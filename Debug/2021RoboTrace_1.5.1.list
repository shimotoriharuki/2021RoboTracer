
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001885c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08018a20  08018a20  00028a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019254  08019254  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019254  08019254  00029254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801925c  0801925c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801925c  0801925c  0002925c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019264  08019264  00029264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019268  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004c998  200001e0  08019444  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2004cb78  08019444  0003cb78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b351  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c45  00000000  00000000  0006b55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002350  00000000  00000000  000731a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002080  00000000  00000000  000754f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  00077578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002662a  00000000  00000000  000aca2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011115d  00000000  00000000  000d3056  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e41b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a59c  00000000  00000000  001e4230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018a04 	.word	0x08018a04

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018a04 	.word	0x08018a04

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fa0e 	bl	800b3f8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2004a670 	.word	0x2004a670

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a f9f6 	bl	800b3f8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2004a670 	.word	0x2004a670

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f897 	bl	800b154 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fdfe 	bl	8009c28 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fdf8 	bl	8009c28 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fdf2 	bl	8009c28 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fdec 	bl	8009c28 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fde6 	bl	8009c28 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fde0 	bl	8009c28 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fdda 	bl	8009c28 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fdd4 	bl	8009c28 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fdce 	bl	8009c28 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fdc8 	bl	8009c28 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fdbc 	bl	8009c28 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fdb6 	bl	8009c28 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 f835 	bl	8016198 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fec6 	bl	800ef88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d fec2 	bl	800ef88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d febe 	bl	800ef88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d feba 	bl	800ef88 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004a75c 	.word	0x2004a75c
 8001248:	2004a6c4 	.word	0x2004a6c4
 800124c:	2004a7e4 	.word	0x2004a7e4

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004a75c 	.word	0x2004a75c
 800137c:	2004a7e4 	.word	0x2004a7e4
 8001380:	2004a6c4 	.word	0x2004a6c4

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004a75c 	.word	0x2004a75c
 80013c4:	2004a6c4 	.word	0x2004a6c4
 80013c8:	2004a7e4 	.word	0x2004a7e4

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0),
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
		cross_line_ignore_distance_(0), goal_judge_distance_(0){}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <_ZN7Encoder4initEv+0x30>)
 8001438:	f00d fe76 	bl	800f128 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <_ZN7Encoder4initEv+0x34>)
 8001440:	f00d fe72 	bl	800f128 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_ZN7Encoder4initEv+0x38>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <_ZN7Encoder4initEv+0x3c>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2004a8c4 	.word	0x2004a8c4
 8001460:	2004a5a8 	.word	0x2004a5a8
 8001464:	40010000 	.word	0x40010000
 8001468:	40010400 	.word	0x40010400
 800146c:	00000000 	.word	0x00000000

08001470 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001478:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <_ZN7Encoder6updateEv+0x108>)
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800157c <_ZN7Encoder6updateEv+0x10c>
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001580 <_ZN7Encoder6updateEv+0x110>
 8001490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001494:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001498:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <_ZN7Encoder6updateEv+0x114>)
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800157c <_ZN7Encoder6updateEv+0x10c>
 80014a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014ac:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001580 <_ZN7Encoder6updateEv+0x110>
 80014b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b4:	edc7 7a02 	vstr	s15, [r7, #8]
	//monitor_cnt_l = cnt_l;

	cnt_l_ = cnt_l;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	605a      	str	r2, [r3, #4]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	ed93 7a00 	vldr	s14, [r3]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	ee17 0a90 	vmov	r0, s15
 80014d8:	f7ff f84e 	bl	8000578 <__aeabi_f2d>
 80014dc:	a324      	add	r3, pc, #144	; (adr r3, 8001570 <_ZN7Encoder6updateEv+0x100>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff f8a1 	bl	8000628 <__aeabi_dmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	4618      	mov	r0, r3
 80014ec:	4621      	mov	r1, r4
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014f6:	f7ff f9c1 	bl	800087c <__aeabi_ddiv>
 80014fa:	4603      	mov	r3, r0
 80014fc:	460c      	mov	r4, r1
 80014fe:	4618      	mov	r0, r3
 8001500:	4621      	mov	r1, r4
 8001502:	f7ff fb89 	bl	8000c18 <__aeabi_d2f>
 8001506:	4602      	mov	r2, r0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	edd3 7a02 	vldr	s15, [r3, #8]
 8001518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	ed93 7a06 	vldr	s14, [r3, #24]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edd3 7a02 	vldr	s15, [r3, #8]
 800152e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	ed93 7a07 	vldr	s14, [r3, #28]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	edd3 7a02 	vldr	s15, [r3, #8]
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a07 	vstr	s15, [r3, #28]
	goal_judge_distance_ += distance_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	ed93 7a08 	vldr	s14, [r3, #32]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	edd3 7a02 	vldr	s15, [r3, #8]
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	edc3 7a08 	vstr	s15, [r3, #32]
	//monitor_distance = distance_10mm_;
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	f3af 8000 	nop.w
 8001570:	ce73a049 	.word	0xce73a049
 8001574:	3f77a3f6 	.word	0x3f77a3f6
 8001578:	40010000 	.word	0x40010000
 800157c:	47000000 	.word	0x47000000
 8001580:	3f912547 	.word	0x3f912547
 8001584:	40010400 	.word	0x40010400

08001588 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <_ZN7Encoder5clearEv+0x3c>)
 80015a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_ZN7Encoder5clearEv+0x40>)
 80015aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ae:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40010000 	.word	0x40010000
 80015c8:	40010400 	.word	0x40010400

080015cc <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	601a      	str	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	return distance_;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	ee07 3a90 	vmov	s15, r3
}
 8001604:	eeb0 0a67 	vmov.f32	s0, s15
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	ee07 3a90 	vmov	s15, r3
}
 8001622:	eeb0 0a67 	vmov.f32	s0, s15
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	ee07 3a90 	vmov	s15, r3
}
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	619a      	str	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	ee07 3a90 	vmov	s15, r3
}
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_ZN7Encoder20getGoalJudgeDistanceEv>:

float Encoder::getGoalJudgeDistance()
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	return goal_judge_distance_;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	ee07 3a90 	vmov	s15, r3
}
 80016ee:	eeb0 0a67 	vmov.f32	s0, s15
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_ZN7Encoder22clearGoalJudgeDistanceEv>:

void Encoder::clearGoalJudgeDistance()
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	goal_judge_distance_= 0;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001726:	6839      	ldr	r1, [r7, #0]
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f977 	bl	8001a1c <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800172e:	f000 f98b 	bl	8001a48 <fopen_folder_and_file>

	return ret;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001746:	4804      	ldr	r0, [pc, #16]	; (8001758 <user_fclose+0x1c>)
 8001748:	f012 fa48 	bl	8013bdc <f_close>

	return ret;
 800174c:	79fb      	ldrb	r3, [r7, #7]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200494b4 	.word	0x200494b4

0800175c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b087      	sub	sp, #28
 8001760:	af02      	add	r7, sp, #8
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	80fb      	strh	r3, [r7, #6]
 8001768:	4613      	mov	r3, r2
 800176a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001770:	2300      	movs	r3, #0
 8001772:	81fb      	strh	r3, [r7, #14]
 8001774:	e030      	b.n	80017d8 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	4413      	add	r3, r2
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fef8 	bl	8000578 <__aeabi_f2d>
 8001788:	4603      	mov	r3, r0
 800178a:	460c      	mov	r4, r1
 800178c:	e9cd 3400 	strd	r3, r4, [sp]
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <sd_write_float+0x94>)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	4817      	ldr	r0, [pc, #92]	; (80017f4 <sd_write_float+0x98>)
 8001796:	f013 fdb1 	bl	80152fc <sniprintf>

		if(state == ADD_WRITE){
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <sd_write_float+0x9c>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	4619      	mov	r1, r3
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <sd_write_float+0x9c>)
 80017a8:	f012 fa8c 	bl	8013cc4 <f_lseek>
 80017ac:	e003      	b.n	80017b6 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80017ae:	2100      	movs	r1, #0
 80017b0:	4811      	ldr	r0, [pc, #68]	; (80017f8 <sd_write_float+0x9c>)
 80017b2:	f012 fa87 	bl	8013cc4 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <sd_write_float+0x98>)
 80017b8:	f7fe fd22 	bl	8000200 <strlen>
 80017bc:	4602      	mov	r2, r0
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <sd_write_float+0xa0>)
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <sd_write_float+0x98>)
 80017c2:	480d      	ldr	r0, [pc, #52]	; (80017f8 <sd_write_float+0x9c>)
 80017c4:	f011 fff5 	bl	80137b2 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80017c8:	f000 f958 	bl	8001a7c <bufclear>
	for(short i = 0 ; i < size; i++){
 80017cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	81fb      	strh	r3, [r7, #14]
 80017d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80017dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbc8      	blt.n	8001776 <sd_write_float+0x1a>
	}
	return ret;
 80017e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08018a20 	.word	0x08018a20
 80017f4:	20049424 	.word	0x20049424
 80017f8:	200494b4 	.word	0x200494b4
 80017fc:	200494a4 	.word	0x200494a4

08001800 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af02      	add	r7, sp, #8
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	4613      	mov	r3, r2
 800180e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 f900 	bl	8001a1c <create_path>

	if(state == OVER_WRITE){
 800181c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d108      	bne.n	8001836 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001824:	4822      	ldr	r0, [pc, #136]	; (80018b0 <sd_write_array_float+0xb0>)
 8001826:	f012 fa03 	bl	8013c30 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800182a:	4822      	ldr	r0, [pc, #136]	; (80018b4 <sd_write_array_float+0xb4>)
 800182c:	f012 fc6e 	bl	801410c <f_unlink>
		f_chdir("..");
 8001830:	4821      	ldr	r0, [pc, #132]	; (80018b8 <sd_write_array_float+0xb8>)
 8001832:	f012 f9fd 	bl	8013c30 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001836:	f000 f907 	bl	8001a48 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800183a:	2300      	movs	r3, #0
 800183c:	82fb      	strh	r3, [r7, #22]
 800183e:	e028      	b.n	8001892 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001840:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	4413      	add	r3, r2
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe93 	bl	8000578 <__aeabi_f2d>
 8001852:	4603      	mov	r3, r0
 8001854:	460c      	mov	r4, r1
 8001856:	e9cd 3400 	strd	r3, r4, [sp]
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <sd_write_array_float+0xbc>)
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	4818      	ldr	r0, [pc, #96]	; (80018c0 <sd_write_array_float+0xc0>)
 8001860:	f013 fd4c 	bl	80152fc <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <sd_write_array_float+0xc4>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4619      	mov	r1, r3
 800186a:	4816      	ldr	r0, [pc, #88]	; (80018c4 <sd_write_array_float+0xc4>)
 800186c:	f012 fa2a 	bl	8013cc4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <sd_write_array_float+0xc0>)
 8001872:	f7fe fcc5 	bl	8000200 <strlen>
 8001876:	4602      	mov	r2, r0
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <sd_write_array_float+0xc8>)
 800187a:	4911      	ldr	r1, [pc, #68]	; (80018c0 <sd_write_array_float+0xc0>)
 800187c:	4811      	ldr	r0, [pc, #68]	; (80018c4 <sd_write_array_float+0xc4>)
 800187e:	f011 ff98 	bl	80137b2 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001882:	f000 f8fb 	bl	8001a7c <bufclear>
	for(short i = 0 ; i < size; i++){
 8001886:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800188a:	b29b      	uxth	r3, r3
 800188c:	3301      	adds	r3, #1
 800188e:	b29b      	uxth	r3, r3
 8001890:	82fb      	strh	r3, [r7, #22]
 8001892:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbd0      	blt.n	8001840 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <sd_write_array_float+0xc4>)
 80018a0:	f012 f99c 	bl	8013bdc <f_close>

	return ret;
 80018a4:	7d7b      	ldrb	r3, [r7, #21]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd90      	pop	{r4, r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20049324 	.word	0x20049324
 80018b4:	200481e4 	.word	0x200481e4
 80018b8:	08018a3c 	.word	0x08018a3c
 80018bc:	08018a20 	.word	0x08018a20
 80018c0:	20049424 	.word	0x20049424
 80018c4:	200494b4 	.word	0x200494b4
 80018c8:	200494a4 	.word	0x200494a4

080018cc <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	603b      	str	r3, [r7, #0]
 80018d8:	4613      	mov	r3, r2
 80018da:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f898 	bl	8001a1c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80018ec:	f000 f8ac 	bl	8001a48 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80018f0:	e019      	b.n	8001926 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80018f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4913      	ldr	r1, [pc, #76]	; (800194c <sd_read_array_float+0x80>)
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <sd_read_array_float+0x84>)
 8001902:	f013 fd4f 	bl	80153a4 <siscanf>
		i++;
 8001906:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800190a:	b29b      	uxth	r3, r3
 800190c:	3301      	adds	r3, #1
 800190e:	b29b      	uxth	r3, r3
 8001910:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001912:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191a:	429a      	cmp	r2, r3
 800191c:	db03      	blt.n	8001926 <sd_read_array_float+0x5a>
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	3b01      	subs	r3, #1
 8001922:	b29b      	uxth	r3, r3
 8001924:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <sd_read_array_float+0x88>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	4809      	ldr	r0, [pc, #36]	; (8001950 <sd_read_array_float+0x84>)
 800192c:	f012 fdcc 	bl	80144c8 <f_gets>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1dd      	bne.n	80018f2 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001936:	f000 f8a1 	bl	8001a7c <bufclear>

	f_close(&fil);	//ファイル閉じる
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <sd_read_array_float+0x88>)
 800193c:	f012 f94e 	bl	8013bdc <f_close>

	return ret;
 8001940:	7d7b      	ldrb	r3, [r7, #21]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	08018a2c 	.word	0x08018a2c
 8001950:	20049424 	.word	0x20049424
 8001954:	200494b4 	.word	0x200494b4

08001958 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f852 	bl	8001a1c <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001978:	f000 f866 	bl	8001a48 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800197c:	e019      	b.n	80019b2 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 800197e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	4413      	add	r3, r2
 8001988:	461a      	mov	r2, r3
 800198a:	4913      	ldr	r1, [pc, #76]	; (80019d8 <sd_read_array_double+0x80>)
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <sd_read_array_double+0x84>)
 800198e:	f013 fd09 	bl	80153a4 <siscanf>
		i++;
 8001992:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001996:	b29b      	uxth	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	b29b      	uxth	r3, r3
 800199c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800199e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	db03      	blt.n	80019b2 <sd_read_array_double+0x5a>
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <sd_read_array_double+0x88>)
 80019b4:	2180      	movs	r1, #128	; 0x80
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <sd_read_array_double+0x84>)
 80019b8:	f012 fd86 	bl	80144c8 <f_gets>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1dd      	bne.n	800197e <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019c2:	f000 f85b 	bl	8001a7c <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <sd_read_array_double+0x88>)
 80019c8:	f012 f908 	bl	8013bdc <f_close>

	return ret;
 80019cc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	08018a38 	.word	0x08018a38
 80019dc:	20049424 	.word	0x20049424
 80019e0:	200494b4 	.word	0x200494b4

080019e4 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80019ee:	2201      	movs	r2, #1
 80019f0:	4908      	ldr	r1, [pc, #32]	; (8001a14 <sd_mount+0x30>)
 80019f2:	4809      	ldr	r0, [pc, #36]	; (8001a18 <sd_mount+0x34>)
 80019f4:	f011 fb6a 	bl	80130cc <f_mount>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <sd_mount+0x20>
 80019fe:	2301      	movs	r3, #1
 8001a00:	71fb      	strb	r3, [r7, #7]
 8001a02:	e001      	b.n	8001a08 <sd_mount+0x24>
	else ret = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	08018a48 	.word	0x08018a48
 8001a18:	200482e4 	.word	0x200482e4

08001a1c <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <create_path+0x24>)
 8001a2a:	f013 fce7 	bl	80153fc <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <create_path+0x28>)
 8001a32:	f013 fce3 	bl	80153fc <strcpy>

}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20049324 	.word	0x20049324
 8001a44:	200481e4 	.word	0x200481e4

08001a48 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001a4c:	4807      	ldr	r0, [pc, #28]	; (8001a6c <fopen_folder_and_file+0x24>)
 8001a4e:	f012 fc1f 	bl	8014290 <f_mkdir>

	f_chdir(dirpath);
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <fopen_folder_and_file+0x24>)
 8001a54:	f012 f8ec 	bl	8013c30 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001a58:	2213      	movs	r2, #19
 8001a5a:	4905      	ldr	r1, [pc, #20]	; (8001a70 <fopen_folder_and_file+0x28>)
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <fopen_folder_and_file+0x2c>)
 8001a5e:	f011 fb7b 	bl	8013158 <f_open>

	f_chdir("..");
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <fopen_folder_and_file+0x30>)
 8001a64:	f012 f8e4 	bl	8013c30 <f_chdir>


}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20049324 	.word	0x20049324
 8001a70:	200481e4 	.word	0x200481e4
 8001a74:	200494b4 	.word	0x200494b4
 8001a78:	08018a3c 	.word	0x08018a3c

08001a7c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e007      	b.n	8001a98 <bufclear+0x1c>
		buffer[i] = '\0';
 8001a88:	4a08      	ldr	r2, [pc, #32]	; (8001aac <bufclear+0x30>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3301      	adds	r3, #1
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a9c:	ddf4      	ble.n	8001a88 <bufclear+0xc>
	}
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20049424 	.word	0x20049424

08001ab0 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <read_byte+0x54>)
 8001acc:	f009 fb42 	bl	800b154 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001ad0:	f107 010f 	add.w	r1, r7, #15
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	480b      	ldr	r0, [pc, #44]	; (8001b08 <read_byte+0x58>)
 8001ada:	f00c fceb 	bl	800e4b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001ade:	f107 010e 	add.w	r1, r7, #14
 8001ae2:	2364      	movs	r3, #100	; 0x64
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4808      	ldr	r0, [pc, #32]	; (8001b08 <read_byte+0x58>)
 8001ae8:	f00c fe18 	bl	800e71c <HAL_SPI_Receive>
	CS_SET;
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af2:	4804      	ldr	r0, [pc, #16]	; (8001b04 <read_byte+0x54>)
 8001af4:	f009 fb2e 	bl	800b154 <HAL_GPIO_WritePin>

	return val;
 8001af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40020400 	.word	0x40020400
 8001b08:	2004a550 	.word	0x2004a550

08001b0c <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <write_byte+0x54>)
 8001b2e:	f009 fb11 	bl	800b154 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b32:	f107 010f 	add.w	r1, r7, #15
 8001b36:	2364      	movs	r3, #100	; 0x64
 8001b38:	2201      	movs	r2, #1
 8001b3a:	480a      	ldr	r0, [pc, #40]	; (8001b64 <write_byte+0x58>)
 8001b3c:	f00c fcba 	bl	800e4b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001b40:	1db9      	adds	r1, r7, #6
 8001b42:	2364      	movs	r3, #100	; 0x64
 8001b44:	2201      	movs	r2, #1
 8001b46:	4807      	ldr	r0, [pc, #28]	; (8001b64 <write_byte+0x58>)
 8001b48:	f00c fcb4 	bl	800e4b4 <HAL_SPI_Transmit>
	CS_SET;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <write_byte+0x54>)
 8001b54:	f009 fafe 	bl	800b154 <HAL_GPIO_WritePin>
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40020400 	.word	0x40020400
 8001b64:	2004a550 	.word	0x2004a550

08001b68 <IMU_init>:

uint16_t IMU_init() {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff ff9c 	bl	8001ab0 <read_byte>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001b7c:	797b      	ldrb	r3, [r7, #5]
 8001b7e:	2be0      	cmp	r3, #224	; 0xe0
 8001b80:	d119      	bne.n	8001bb6 <IMU_init+0x4e>
		ret = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001b86:	2101      	movs	r1, #1
 8001b88:	2006      	movs	r0, #6
 8001b8a:	f7ff ffbf 	bl	8001b0c <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001b8e:	2110      	movs	r1, #16
 8001b90:	2003      	movs	r0, #3
 8001b92:	f7ff ffbb 	bl	8001b0c <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001b96:	2120      	movs	r1, #32
 8001b98:	207f      	movs	r0, #127	; 0x7f
 8001b9a:	f7ff ffb7 	bl	8001b0c <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001b9e:	2106      	movs	r1, #6
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff ffb3 	bl	8001b0c <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ba6:	2106      	movs	r1, #6
 8001ba8:	2014      	movs	r0, #20
 8001baa:	f7ff ffaf 	bl	8001b0c <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	207f      	movs	r0, #127	; 0x7f
 8001bb2:	f7ff ffab 	bl	8001b0c <write_byte>
	}
	return ret;
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <read_gyro_data>:

void read_gyro_data() {
 8001bc0:	b598      	push	{r3, r4, r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001bc4:	2033      	movs	r0, #51	; 0x33
 8001bc6:	f7ff ff73 	bl	8001ab0 <read_byte>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	2034      	movs	r0, #52	; 0x34
 8001bd2:	f7ff ff6d 	bl	8001ab0 <read_byte>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	4323      	orrs	r3, r4
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <read_gyro_data+0x64>)
 8001be0:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001be2:	2035      	movs	r0, #53	; 0x35
 8001be4:	f7ff ff64 	bl	8001ab0 <read_byte>
 8001be8:	4603      	mov	r3, r0
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	b21c      	sxth	r4, r3
 8001bee:	2036      	movs	r0, #54	; 0x36
 8001bf0:	f7ff ff5e 	bl	8001ab0 <read_byte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <read_gyro_data+0x68>)
 8001bfe:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c00:	2037      	movs	r0, #55	; 0x37
 8001c02:	f7ff ff55 	bl	8001ab0 <read_byte>
 8001c06:	4603      	mov	r3, r0
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	b21c      	sxth	r4, r3
 8001c0c:	2038      	movs	r0, #56	; 0x38
 8001c0e:	f7ff ff4f 	bl	8001ab0 <read_byte>
 8001c12:	4603      	mov	r3, r0
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4323      	orrs	r3, r4
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <read_gyro_data+0x6c>)
 8001c1c:	801a      	strh	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	bd98      	pop	{r3, r4, r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2004a4ec 	.word	0x2004a4ec
 8001c28:	2004a4ea 	.word	0x2004a4ea
 8001c2c:	2004a4e4 	.word	0x2004a4e4

08001c30 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	801a      	strh	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	805a      	strh	r2, [r3, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	809a      	strh	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	80da      	strh	r2, [r3, #6]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	811a      	strh	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	815a      	strh	r2, [r3, #10]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
{

}
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001c7c:	f7ff ff74 	bl	8001b68 <IMU_init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001c84:	f7ff fa0c 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff fa18 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001c90:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <_ZN3IMU4initEv+0x44>)
 8001c92:	f7ff fa3f 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c96:	2101      	movs	r1, #1
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff fa11 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4806      	ldr	r0, [pc, #24]	; (8001cbc <_ZN3IMU4initEv+0x48>)
 8001ca4:	f7ff fa36 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cac:	f007 ffbc 	bl	8009c28 <HAL_Delay>

}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	08018a4c 	.word	0x08018a4c
 8001cbc:	08018a58 	.word	0x08018a58

08001cc0 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001cc8:	f7ff ff7a 	bl	8001bc0 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <_ZN3IMU12updateValuesEv+0xa0>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <_ZN3IMU12updateValuesEv+0xa4>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	b21a      	sxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <_ZN3IMU12updateValuesEv+0xa8>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b21a      	sxth	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc2f 	bl	8000554 <__aeabi_i2d>
 8001cf6:	a316      	add	r3, pc, #88	; (adr r3, 8001d50 <_ZN3IMU12updateValuesEv+0x90>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fc94 	bl	8000628 <__aeabi_dmul>
 8001d00:	4603      	mov	r3, r0
 8001d02:	460c      	mov	r4, r1
 8001d04:	4625      	mov	r5, r4
 8001d06:	461c      	mov	r4, r3
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <_ZN3IMU12updateValuesEv+0xac>)
 8001d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc20 	bl	8000554 <__aeabi_i2d>
 8001d14:	a310      	add	r3, pc, #64	; (adr r3, 8001d58 <_ZN3IMU12updateValuesEv+0x98>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fc85 	bl	8000628 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fac9 	bl	80002bc <__adddf3>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460c      	mov	r4, r1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4621      	mov	r1, r4
 8001d32:	f7fe ff29 	bl	8000b88 <__aeabi_d2iz>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <_ZN3IMU12updateValuesEv+0xac>)
 8001d46:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d50:	47ae147b 	.word	0x47ae147b
 8001d54:	3f847ae1 	.word	0x3f847ae1
 8001d58:	7ae147ae 	.word	0x7ae147ae
 8001d5c:	3fefae14 	.word	0x3fefae14
 8001d60:	2004a4ec 	.word	0x2004a4ec
 8001d64:	2004a4ea 	.word	0x2004a4ea
 8001d68:	2004a4e4 	.word	0x2004a4e4
 8001d6c:	200001fc 	.word	0x200001fc

08001d70 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d90:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7fe fbef 	bl	8000578 <__aeabi_f2d>
 8001d9a:	a316      	add	r3, pc, #88	; (adr r3, 8001df4 <_ZN3IMU8getOmegaEv+0x84>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fd6c 	bl	800087c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001dae:	a313      	add	r3, pc, #76	; (adr r3, 8001dfc <_ZN3IMU8getOmegaEv+0x8c>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe fc36 	bl	8000628 <__aeabi_dmul>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <_ZN3IMU8getOmegaEv+0x80>)
 8001dca:	f7fe fd57 	bl	800087c <__aeabi_ddiv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	f7fe ff1f 	bl	8000c18 <__aeabi_d2f>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	60bb      	str	r3, [r7, #8]

	return omega;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	ee07 3a90 	vmov	s15, r3
}
 8001de4:	eeb0 0a67 	vmov.f32	s0, s15
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bdb0      	pop	{r4, r5, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40668000 	.word	0x40668000
 8001df4:	66666666 	.word	0x66666666
 8001df8:	40306666 	.word	0x40306666
 8001dfc:	54411744 	.word	0x54411744
 8001e00:	400921fb 	.word	0x400921fb

08001e04 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e06:	b08b      	sub	sp, #44	; 0x2c
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e0c:	466b      	mov	r3, sp
 8001e0e:	461e      	mov	r6, r3
	HAL_Delay(800);
 8001e10:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e14:	f007 ff08 	bl	8009c28 <HAL_Delay>
	lcd_clear();
 8001e18:	f7ff f942 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff f94e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001e24:	4840      	ldr	r0, [pc, #256]	; (8001f28 <_ZN3IMU11calibrationEv+0x124>)
 8001e26:	f7ff f975 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff f947 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001e32:	483e      	ldr	r0, [pc, #248]	; (8001f2c <_ZN3IMU11calibrationEv+0x128>)
 8001e34:	f7ff f96e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001e38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e3c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001e3e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e42:	1e5d      	subs	r5, r3, #1
 8001e44:	61bd      	str	r5, [r7, #24]
 8001e46:	462b      	mov	r3, r5
 8001e48:	3301      	adds	r3, #1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	f04f 0400 	mov.w	r4, #0
 8001e58:	0154      	lsls	r4, r2, #5
 8001e5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e5e:	014b      	lsls	r3, r1, #5
 8001e60:	462b      	mov	r3, r5
 8001e62:	3301      	adds	r3, #1
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	f04f 0400 	mov.w	r4, #0
 8001e72:	0154      	lsls	r4, r2, #5
 8001e74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e78:	014b      	lsls	r3, r1, #5
 8001e7a:	462b      	mov	r3, r5
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	3303      	adds	r3, #3
 8001e82:	3307      	adds	r3, #7
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	ebad 0d03 	sub.w	sp, sp, r3
 8001e8c:	466b      	mov	r3, sp
 8001e8e:	3303      	adds	r3, #3
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001e96:	2300      	movs	r3, #0
 8001e98:	83fb      	strh	r3, [r7, #30]
 8001e9a:	8bfa      	ldrh	r2, [r7, #30]
 8001e9c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	da13      	bge.n	8001ecc <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001eaa:	8bfb      	ldrh	r3, [r7, #30]
 8001eac:	ee07 2a90 	vmov	s15, r2
 8001eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f007 feb2 	bl	8009c28 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ec4:	8bfb      	ldrh	r3, [r7, #30]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	83fb      	strh	r3, [r7, #30]
 8001eca:	e7e6      	b.n	8001e9a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	462b      	mov	r3, r5
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d00e      	beq.n	8001f02 <_ZN3IMU11calibrationEv+0xfe>
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef6:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	3304      	adds	r3, #4
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	e7ec      	b.n	8001edc <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f02:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f1c:	46b5      	mov	sp, r6
}
 8001f1e:	bf00      	nop
 8001f20:	372c      	adds	r7, #44	; 0x2c
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	08018a5c 	.word	0x08018a5c
 8001f2c:	08018a68 	.word	0x08018a68

08001f30 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	4603      	mov	r3, r0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	b299      	uxth	r1, r3
 8001f44:	1dfa      	adds	r2, r7, #7
 8001f46:	2364      	movs	r3, #100	; 0x64
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <INA260_read+0x50>)
 8001f4e:	f009 fa53 	bl	800b3f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001f52:	79bb      	ldrb	r3, [r7, #6]
 8001f54:	b299      	uxth	r1, r3
 8001f56:	f107 020c 	add.w	r2, r7, #12
 8001f5a:	2364      	movs	r3, #100	; 0x64
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2302      	movs	r3, #2
 8001f60:	4807      	ldr	r0, [pc, #28]	; (8001f80 <INA260_read+0x50>)
 8001f62:	f009 fb47 	bl	800b5f4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001f66:	7b3b      	ldrb	r3, [r7, #12]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	7b7b      	ldrb	r3, [r7, #13]
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	81fb      	strh	r3, [r7, #14]
	return val;
 8001f76:	89fb      	ldrh	r3, [r7, #14]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	2004a704 	.word	0x2004a704

08001f84 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	71fb      	strb	r3, [r7, #7]
 8001f96:	4603      	mov	r3, r0
 8001f98:	71bb      	strb	r3, [r7, #6]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	717b      	strb	r3, [r7, #5]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	733b      	strb	r3, [r7, #12]
 8001fa6:	79bb      	ldrb	r3, [r7, #6]
 8001fa8:	737b      	strb	r3, [r7, #13]
 8001faa:	797b      	ldrb	r3, [r7, #5]
 8001fac:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001fae:	793b      	ldrb	r3, [r7, #4]
 8001fb0:	b299      	uxth	r1, r3
 8001fb2:	f107 020c 	add.w	r2, r7, #12
 8001fb6:	2364      	movs	r3, #100	; 0x64
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2303      	movs	r3, #3
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <INA260_write+0x48>)
 8001fbe:	f009 fa1b 	bl	800b3f8 <HAL_I2C_Master_Transmit>
}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2004a704 	.word	0x2004a704

08001fd0 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	71bb      	strb	r3, [r7, #6]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001fe2:	797b      	ldrb	r3, [r7, #5]
 8001fe4:	79ba      	ldrb	r2, [r7, #6]
 8001fe6:	79f9      	ldrb	r1, [r7, #7]
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff ffcb 	bl	8001f84 <INA260_write>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	461a      	mov	r2, r3
 8002004:	21df      	movs	r1, #223	; 0xdf
 8002006:	2000      	movs	r0, #0
 8002008:	f7ff ffe2 	bl	8001fd0 <setConfig>
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
{

}
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002038:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800203c:	482a      	ldr	r0, [pc, #168]	; (80020e8 <_ZN8JoyStick8getValueEv+0xbc>)
 800203e:	f009 f871 	bl	800b124 <HAL_GPIO_ReadPin>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <_ZN8JoyStick8getValueEv+0x2e>
 8002052:	89fb      	ldrh	r3, [r7, #14]
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800205a:	2101      	movs	r1, #1
 800205c:	4823      	ldr	r0, [pc, #140]	; (80020ec <_ZN8JoyStick8getValueEv+0xc0>)
 800205e:	f009 f861 	bl	800b124 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <_ZN8JoyStick8getValueEv+0x4e>
 8002072:	89fb      	ldrh	r3, [r7, #14]
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800207a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207e:	481a      	ldr	r0, [pc, #104]	; (80020e8 <_ZN8JoyStick8getValueEv+0xbc>)
 8002080:	f009 f850 	bl	800b124 <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <_ZN8JoyStick8getValueEv+0x70>
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800209c:	2104      	movs	r1, #4
 800209e:	4814      	ldr	r0, [pc, #80]	; (80020f0 <_ZN8JoyStick8getValueEv+0xc4>)
 80020a0:	f009 f840 	bl	800b124 <HAL_GPIO_ReadPin>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <_ZN8JoyStick8getValueEv+0x90>
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	f043 0308 	orr.w	r3, r3, #8
 80020ba:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	480a      	ldr	r0, [pc, #40]	; (80020e8 <_ZN8JoyStick8getValueEv+0xbc>)
 80020c0:	f009 f830 	bl	800b124 <HAL_GPIO_ReadPin>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf0c      	ite	eq
 80020ca:	2301      	moveq	r3, #1
 80020cc:	2300      	movne	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <_ZN8JoyStick8getValueEv+0xb0>
 80020d4:	89fb      	ldrh	r3, [r7, #14]
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80020dc:	89fb      	ldrh	r3, [r7, #14]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40020400 	.word	0x40020400

080020f4 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	2b52      	cmp	r3, #82	; 0x52
 8002104:	d112      	bne.n	800212c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210c:	4856      	ldr	r0, [pc, #344]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800210e:	f009 f821 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002112:	2201      	movs	r2, #1
 8002114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002118:	4853      	ldr	r0, [pc, #332]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800211a:	f009 f81b 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002124:	4850      	ldr	r0, [pc, #320]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002126:	f009 f815 	bl	800b154 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800212a:	e098      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	2b47      	cmp	r3, #71	; 0x47
 8002130:	d112      	bne.n	8002158 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002132:	2201      	movs	r2, #1
 8002134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002138:	484b      	ldr	r0, [pc, #300]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800213a:	f009 f80b 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002144:	4848      	ldr	r0, [pc, #288]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002146:	f009 f805 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800214a:	2201      	movs	r2, #1
 800214c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002150:	4845      	ldr	r0, [pc, #276]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002152:	f008 ffff 	bl	800b154 <HAL_GPIO_WritePin>
}
 8002156:	e082      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	2b42      	cmp	r3, #66	; 0x42
 800215c:	d112      	bne.n	8002184 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002164:	4840      	ldr	r0, [pc, #256]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002166:	f008 fff5 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002170:	483d      	ldr	r0, [pc, #244]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002172:	f008 ffef 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217c:	483a      	ldr	r0, [pc, #232]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800217e:	f008 ffe9 	bl	800b154 <HAL_GPIO_WritePin>
}
 8002182:	e06c      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	2b43      	cmp	r3, #67	; 0x43
 8002188:	d112      	bne.n	80021b0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800218a:	2201      	movs	r2, #1
 800218c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002190:	4835      	ldr	r0, [pc, #212]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002192:	f008 ffdf 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002196:	2200      	movs	r2, #0
 8002198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800219c:	4832      	ldr	r0, [pc, #200]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800219e:	f008 ffd9 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a8:	482f      	ldr	r0, [pc, #188]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021aa:	f008 ffd3 	bl	800b154 <HAL_GPIO_WritePin>
}
 80021ae:	e056      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b4d      	cmp	r3, #77	; 0x4d
 80021b4:	d112      	bne.n	80021dc <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021bc:	482a      	ldr	r0, [pc, #168]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021be:	f008 ffc9 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021c2:	2201      	movs	r2, #1
 80021c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c8:	4827      	ldr	r0, [pc, #156]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021ca:	f008 ffc3 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021d4:	4824      	ldr	r0, [pc, #144]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021d6:	f008 ffbd 	bl	800b154 <HAL_GPIO_WritePin>
}
 80021da:	e040      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	2b59      	cmp	r3, #89	; 0x59
 80021e0:	d112      	bne.n	8002208 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e8:	481f      	ldr	r0, [pc, #124]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021ea:	f008 ffb3 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f4:	481c      	ldr	r0, [pc, #112]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 80021f6:	f008 ffad 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002200:	4819      	ldr	r0, [pc, #100]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002202:	f008 ffa7 	bl	800b154 <HAL_GPIO_WritePin>
}
 8002206:	e02a      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	2b57      	cmp	r3, #87	; 0x57
 800220c:	d112      	bne.n	8002234 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002214:	4814      	ldr	r0, [pc, #80]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002216:	f008 ff9d 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800221a:	2200      	movs	r2, #0
 800221c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002220:	4811      	ldr	r0, [pc, #68]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002222:	f008 ff97 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800222c:	480e      	ldr	r0, [pc, #56]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800222e:	f008 ff91 	bl	800b154 <HAL_GPIO_WritePin>
}
 8002232:	e014      	b.n	800225e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	2b7e      	cmp	r3, #126	; 0x7e
 8002238:	d111      	bne.n	800225e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002240:	4809      	ldr	r0, [pc, #36]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 8002242:	f008 ff87 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224c:	4806      	ldr	r0, [pc, #24]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800224e:	f008 ff81 	bl	800b154 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <_ZN3LED9fullColorEc+0x174>)
 800225a:	f008 ff7b 	bl	800b154 <HAL_GPIO_WritePin>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40020000 	.word	0x40020000

0800226c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
 8002278:	4613      	mov	r3, r2
 800227a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800227c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d106      	bne.n	8002292 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228a:	4813      	ldr	r0, [pc, #76]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 800228c:	f008 ff62 	bl	800b154 <HAL_GPIO_WritePin>
 8002290:	e009      	b.n	80022a6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d105      	bne.n	80022a6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022a0:	480d      	ldr	r0, [pc, #52]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 80022a2:	f008 ff57 	bl	800b154 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80022a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d106      	bne.n	80022bc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80022ae:	2201      	movs	r2, #1
 80022b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022b4:	4808      	ldr	r0, [pc, #32]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 80022b6:	f008 ff4d 	bl	800b154 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80022ba:	e009      	b.n	80022d0 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80022bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ca:	4803      	ldr	r0, [pc, #12]	; (80022d8 <_ZN3LED2LREaa+0x6c>)
 80022cc:	f008 ff42 	bl	800b154 <HAL_GPIO_WritePin>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40020000 	.word	0x40020000

080022dc <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 80022dc:	b580      	push	{r7, lr}
 80022de:	b092      	sub	sp, #72	; 0x48
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fe92 	bl	8002014 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
 80022f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f6:	647b      	str	r3, [r7, #68]	; 0x44
 80022f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fa:	331c      	adds	r3, #28
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
 80022fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	429a      	cmp	r2, r3
 8002304:	d008      	beq.n	8002318 <_ZN10LineSensorC1Ev+0x3c>
 8002306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	2200      	movs	r2, #0
 800230e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002312:	3302      	adds	r3, #2
 8002314:	647b      	str	r3, [r7, #68]	; 0x44
 8002316:	e7f2      	b.n	80022fe <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	643b      	str	r3, [r7, #64]	; 0x40
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	3338      	adds	r3, #56	; 0x38
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	429a      	cmp	r2, r3
 8002330:	d009      	beq.n	8002346 <_ZN10LineSensorC1Ev+0x6a>
 8002332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002334:	623b      	str	r3, [r7, #32]
		s = 0;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800233e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002340:	3304      	adds	r3, #4
 8002342:	643b      	str	r3, [r7, #64]	; 0x40
 8002344:	e7f1      	b.n	800232a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3338      	adds	r3, #56	; 0x38
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	429a      	cmp	r2, r3
 800235e:	d009      	beq.n	8002374 <_ZN10LineSensorC1Ev+0x98>
 8002360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002362:	617b      	str	r3, [r7, #20]
		m = 0;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800236c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236e:	3304      	adds	r3, #4
 8002370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002372:	e7f1      	b.n	8002358 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	3338      	adds	r3, #56	; 0x38
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	429a      	cmp	r2, r3
 800238c:	d009      	beq.n	80023a2 <_ZN10LineSensorC1Ev+0xc6>
 800238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002390:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002398:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239c:	3304      	adds	r3, #4
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a0:	e7f1      	b.n	8002386 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	3748      	adds	r7, #72	; 0x48
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	220e      	movs	r2, #14
 80023b8:	4619      	mov	r1, r3
 80023ba:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80023bc:	f007 fc9a 	bl	8009cf4 <HAL_ADC_Start_DMA>
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	2004a628 	.word	0x2004a628

080023cc <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b0d      	cmp	r3, #13
 80023dc:	dc2f      	bgt.n	800243e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3392      	adds	r3, #146	; 0x92
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	3304      	adds	r3, #4
 80023ea:	ed93 7a00 	vldr	s14, [r3]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	33a0      	adds	r3, #160	; 0xa0
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	1a5b      	subs	r3, r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	440b      	add	r3, r1
 800242a:	3306      	adds	r3, #6
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3301      	adds	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e7cc      	b.n	80023d8 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002448:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b09      	cmp	r3, #9
 8002450:	d902      	bls.n	8002458 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]


}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	200001fe 	.word	0x200001fe

08002468 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002468:	b490      	push	{r4, r7}
 800246a:	b08e      	sub	sp, #56	; 0x38
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002470:	2300      	movs	r3, #0
 8002472:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002476:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800247a:	2b0d      	cmp	r3, #13
 800247c:	f200 8087 	bhi.w	800258e <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002486:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800248a:	2b09      	cmp	r3, #9
 800248c:	d81c      	bhi.n	80024c8 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800248e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002492:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002496:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4423      	add	r3, r4
 80024a6:	3306      	adds	r3, #6
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4403      	add	r3, r0
 80024ac:	3304      	adds	r3, #4
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	008b      	lsls	r3, r1, #2
 80024b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80024b6:	440b      	add	r3, r1
 80024b8:	3b30      	subs	r3, #48	; 0x30
 80024ba:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80024bc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80024c0:	3301      	adds	r3, #1
 80024c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80024c6:	e7de      	b.n	8002486 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80024ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	d84d      	bhi.n	8002572 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80024d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024da:	3301      	adds	r3, #1
 80024dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80024e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	d83e      	bhi.n	8002566 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80024e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024f2:	4413      	add	r3, r2
 80024f4:	3b30      	subs	r3, #48	; 0x30
 80024f6:	ed93 7a00 	vldr	s14, [r3]
 80024fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002504:	4413      	add	r3, r2
 8002506:	3b30      	subs	r3, #48	; 0x30
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002514:	d521      	bpl.n	800255a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002516:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002520:	4413      	add	r3, r2
 8002522:	3b30      	subs	r3, #48	; 0x30
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002528:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800252c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002536:	440a      	add	r2, r1
 8002538:	3a30      	subs	r2, #48	; 0x30
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002542:	440b      	add	r3, r1
 8002544:	3b30      	subs	r3, #48	; 0x30
 8002546:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002548:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002552:	4413      	add	r3, r2
 8002554:	3b30      	subs	r3, #48	; 0x30
 8002556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002558:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800255a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800255e:	3301      	adds	r3, #1
 8002560:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002564:	e7bc      	b.n	80024e0 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002566:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800256a:	3301      	adds	r3, #1
 800256c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002570:	e7ad      	b.n	80024ce <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002572:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	33b0      	adds	r3, #176	; 0xb0
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002582:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002586:	3301      	adds	r3, #1
 8002588:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800258c:	e773      	b.n	8002476 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 800258e:	bf00      	nop
 8002590:	3738      	adds	r7, #56	; 0x38
 8002592:	46bd      	mov	sp, r7
 8002594:	bc90      	pop	{r4, r7}
 8002596:	4770      	bx	lr

08002598 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0a0      	sub	sp, #128	; 0x80
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80025a0:	2064      	movs	r0, #100	; 0x64
 80025a2:	f007 fb41 	bl	8009c28 <HAL_Delay>

	lcd_clear();
 80025a6:	f7fe fd7b 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80025aa:	2100      	movs	r1, #0
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7fe fd87 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80025b2:	4886      	ldr	r0, [pc, #536]	; (80027cc <_ZN10LineSensor11calibrationEv+0x234>)
 80025b4:	f7fe fdae 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80025b8:	2101      	movs	r1, #1
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe fd80 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80025c0:	4883      	ldr	r0, [pc, #524]	; (80027d0 <_ZN10LineSensor11calibrationEv+0x238>)
 80025c2:	f7fe fda7 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80025cc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025d0:	2b0d      	cmp	r3, #13
 80025d2:	d823      	bhi.n	800261c <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80025d4:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80025d8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	32b0      	adds	r2, #176	; 0xb0
 80025e0:	0092      	lsls	r2, r2, #2
 80025e2:	440a      	add	r2, r1
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025ec:	440b      	add	r3, r1
 80025ee:	3b40      	subs	r3, #64	; 0x40
 80025f0:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80025f2:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80025f6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	32b0      	adds	r2, #176	; 0xb0
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	440a      	add	r2, r1
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800260a:	440b      	add	r3, r1
 800260c:	3b78      	subs	r3, #120	; 0x78
 800260e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002610:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002614:	3301      	adds	r3, #1
 8002616:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800261a:	e7d7      	b.n	80025cc <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fd02 	bl	800202c <_ZN8JoyStick8getValueEv>
 8002628:	4603      	mov	r3, r0
 800262a:	2b02      	cmp	r3, #2
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d079      	beq.n	800272c <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002638:	2300      	movs	r3, #0
 800263a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800263e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002642:	2b0d      	cmp	r3, #13
 8002644:	d850      	bhi.n	80026e8 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 8002646:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002650:	4413      	add	r3, r2
 8002652:	3b40      	subs	r3, #64	; 0x40
 8002654:	ed93 7a00 	vldr	s14, [r3]
 8002658:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	33b0      	adds	r3, #176	; 0xb0
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	d50f      	bpl.n	8002692 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002672:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002676:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	32b0      	adds	r2, #176	; 0xb0
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	440a      	add	r2, r1
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800268a:	440b      	add	r3, r1
 800268c:	3b40      	subs	r3, #64	; 0x40
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e024      	b.n	80026dc <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002692:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800269c:	4413      	add	r3, r2
 800269e:	3b78      	subs	r3, #120	; 0x78
 80026a0:	ed93 7a00 	vldr	s14, [r3]
 80026a4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	33b0      	adds	r3, #176	; 0xb0
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026bc:	dd0e      	ble.n	80026dc <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80026be:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80026c2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	32b0      	adds	r2, #176	; 0xb0
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	440a      	add	r2, r1
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026d6:	440b      	add	r3, r1
 80026d8:	3b78      	subs	r3, #120	; 0x78
 80026da:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026dc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026e0:	3301      	adds	r3, #1
 80026e2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80026e6:	e7aa      	b.n	800263e <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fe38 	bl	8005364 <_ZN12RotarySwitch8getValueEv>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d009      	beq.n	8002718 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800270a:	2201      	movs	r2, #1
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fdab 	bl	800226c <_ZN3LED2LREaa>
 8002716:	e781      	b.n	800261c <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800271e:	2200      	movs	r2, #0
 8002720:	f04f 31ff 	mov.w	r1, #4294967295
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fda1 	bl	800226c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800272a:	e777      	b.n	800261c <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800272c:	2300      	movs	r3, #0
 800272e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002732:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002736:	2b0d      	cmp	r3, #13
 8002738:	d826      	bhi.n	8002788 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800273a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002744:	4413      	add	r3, r2
 8002746:	3b40      	subs	r3, #64	; 0x40
 8002748:	ed93 7a00 	vldr	s14, [r3]
 800274c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002756:	4413      	add	r3, r2
 8002758:	3b78      	subs	r3, #120	; 0x78
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002762:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002766:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80027d4 <_ZN10LineSensor11calibrationEv+0x23c>
 800276a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	3392      	adds	r3, #146	; 0x92
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3304      	adds	r3, #4
 8002778:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800277c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002780:	3301      	adds	r3, #1
 8002782:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002786:	e7d4      	b.n	8002732 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002788:	2300      	movs	r3, #0
 800278a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800278e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002792:	2b0d      	cmp	r3, #13
 8002794:	d815      	bhi.n	80027c2 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002796:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800279a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027a4:	440a      	add	r2, r1
 80027a6:	3a78      	subs	r2, #120	; 0x78
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	33a0      	adds	r3, #160	; 0xa0
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3304      	adds	r3, #4
 80027b4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027b6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027ba:	3301      	adds	r3, #1
 80027bc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80027c0:	e7e5      	b.n	800278e <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80027c2:	bf00      	nop
 80027c4:	3780      	adds	r7, #128	; 0x80
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	08018a74 	.word	0x08018a74
 80027d0:	08018a80 	.word	0x08018a80
 80027d4:	447a0000 	.word	0x447a0000

080027d8 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 80027e4:	2303      	movs	r3, #3
 80027e6:	81bb      	strh	r3, [r7, #12]
 80027e8:	89bb      	ldrh	r3, [r7, #12]
 80027ea:	2b0a      	cmp	r3, #10
 80027ec:	d814      	bhi.n	8002818 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 80027ee:	89bb      	ldrh	r3, [r7, #12]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	33b0      	adds	r3, #176	; 0xb0
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800286c <_ZN10LineSensor13emergencyStopEv+0x94>
 8002800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002808:	db02      	blt.n	8002810 <_ZN10LineSensor13emergencyStopEv+0x38>
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	3301      	adds	r3, #1
 800280e:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002810:	89bb      	ldrh	r3, [r7, #12]
 8002812:	3301      	adds	r3, #1
 8002814:	81bb      	strh	r3, [r7, #12]
 8002816:	e7e7      	b.n	80027e8 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002818:	89fb      	ldrh	r3, [r7, #14]
 800281a:	2b07      	cmp	r3, #7
 800281c:	d906      	bls.n	800282c <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002828:	801a      	strh	r2, [r3, #0]
 800282a:	e002      	b.n	8002832 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 800282c:	4b10      	ldr	r3, [pc, #64]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800282e:	2200      	movs	r2, #0
 8002830:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	2b63      	cmp	r3, #99	; 0x63
 8002838:	d903      	bls.n	8002842 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e002      	b.n	8002848 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002848:	4b09      	ldr	r3, [pc, #36]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002850:	4293      	cmp	r3, r2
 8002852:	d903      	bls.n	800285c <_ZN10LineSensor13emergencyStopEv+0x84>
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002856:	f242 7210 	movw	r2, #10000	; 0x2710
 800285a:	801a      	strh	r2, [r3, #0]

	return flag;
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800285e:	781b      	ldrb	r3, [r3, #0]

}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	44098000 	.word	0x44098000
 8002870:	20000200 	.word	0x20000200
 8002874:	20000202 	.word	0x20000202

08002878 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002882:	edd7 7a01 	vldr	s15, [r7, #4]
 8002886:	eef0 7ae7 	vabs.f32	s15, s15
 800288a:	eeb0 0a67 	vmov.f32	s0, s15
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), ignore_check_cnt_(0), all_sideline_flag_(false)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002916:	330c      	adds	r3, #12
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002924:	3350      	adds	r3, #80	; 0x50
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002930:	3352      	adds	r3, #82	; 0x52
 8002932:	2200      	movs	r2, #0
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800293c:	3354      	adds	r3, #84	; 0x54
 800293e:	2200      	movs	r2, #0
 8002940:	801a      	strh	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002948:	3318      	adds	r3, #24
 800294a:	2200      	movs	r2, #0
 800294c:	801a      	strh	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002954:	331c      	adds	r3, #28
 8002956:	2200      	movs	r2, #0
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002960:	331e      	adds	r3, #30
 8002962:	2200      	movs	r2, #0
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800296c:	3320      	adds	r3, #32
 800296e:	2200      	movs	r2, #0
 8002970:	801a      	strh	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002978:	3322      	adds	r3, #34	; 0x22
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002984:	3323      	adds	r3, #35	; 0x23
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002990:	3324      	adds	r3, #36	; 0x24
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800299c:	3328      	adds	r3, #40	; 0x28
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029aa:	332c      	adds	r3, #44	; 0x2c
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029b8:	3330      	adds	r3, #48	; 0x30
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029c6:	3334      	adds	r3, #52	; 0x34
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029d4:	3338      	adds	r3, #56	; 0x38
 80029d6:	2200      	movs	r2, #0
 80029d8:	801a      	strh	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029e0:	333a      	adds	r3, #58	; 0x3a
 80029e2:	2200      	movs	r2, #0
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029ec:	333c      	adds	r3, #60	; 0x3c
 80029ee:	2200      	movs	r2, #0
 80029f0:	801a      	strh	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029f8:	333e      	adds	r3, #62	; 0x3e
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a14:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1a:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a20:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a26:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a2c:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002a34:	2300      	movs	r3, #0
 8002a36:	83fb      	strh	r3, [r7, #30]
 8002a38:	8bfb      	ldrh	r3, [r7, #30]
 8002a3a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d80d      	bhi.n	8002a5e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c6>
		velocity_table_[i] = 0;
 8002a42:	8bfb      	ldrh	r3, [r7, #30]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002a56:	8bfb      	ldrh	r3, [r7, #30]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	83fb      	strh	r3, [r7, #30]
 8002a5c:	e7ec      	b.n	8002a38 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a0>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a5e:	2300      	movs	r3, #0
 8002a60:	83bb      	strh	r3, [r7, #28]
 8002a62:	8bbb      	ldrh	r3, [r7, #28]
 8002a64:	2b63      	cmp	r3, #99	; 0x63
 8002a66:	d80d      	bhi.n	8002a84 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ec>
		crossline_distance_[i] = 0;
 8002a68:	8bbb      	ldrh	r3, [r7, #28]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002a70:	3316      	adds	r3, #22
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a7c:	8bbb      	ldrh	r3, [r7, #28]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	83bb      	strh	r3, [r7, #28]
 8002a82:	e7ee      	b.n	8002a62 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ca>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002a84:	2300      	movs	r3, #0
 8002a86:	837b      	strh	r3, [r7, #26]
 8002a88:	8b7b      	ldrh	r3, [r7, #26]
 8002a8a:	2b63      	cmp	r3, #99	; 0x63
 8002a8c:	d80d      	bhi.n	8002aaa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x212>
		crossline_distance2_[i] = 0;
 8002a8e:	8b7b      	ldrh	r3, [r7, #26]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002a96:	333a      	adds	r3, #58	; 0x3a
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002aa2:	8b7b      	ldrh	r3, [r7, #26]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	837b      	strh	r3, [r7, #26]
 8002aa8:	e7ee      	b.n	8002a88 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002aaa:	2300      	movs	r3, #0
 8002aac:	833b      	strh	r3, [r7, #24]
 8002aae:	8b3b      	ldrh	r3, [r7, #24]
 8002ab0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ab4:	d20d      	bcs.n	8002ad2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x23a>
		sideline_distance_[i] = 0;
 8002ab6:	8b3b      	ldrh	r3, [r7, #24]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002abe:	331e      	adds	r3, #30
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002aca:	8b3b      	ldrh	r3, [r7, #24]
 8002acc:	3301      	adds	r3, #1
 8002ace:	833b      	strh	r3, [r7, #24]
 8002ad0:	e7ed      	b.n	8002aae <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x216>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	82fb      	strh	r3, [r7, #22]
 8002ad6:	8afb      	ldrh	r3, [r7, #22]
 8002ad8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002adc:	d20d      	bcs.n	8002afa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x262>
		sideline_distance2_[i] = 0;
 8002ade:	8afb      	ldrh	r3, [r7, #22]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002ae6:	3312      	adds	r3, #18
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002af2:	8afb      	ldrh	r3, [r7, #22]
 8002af4:	3301      	adds	r3, #1
 8002af6:	82fb      	strh	r3, [r7, #22]
 8002af8:	e7ed      	b.n	8002ad6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x23e>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4618      	mov	r0, r3
 8002afe:	3724      	adds	r7, #36	; 0x24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002b40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b54:	edc7 7a03 	vstr	s15, [r7, #12]
	//mon_diff = diff;

	return diff;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	ee07 3a90 	vmov	s15, r3

}
 8002b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	0000      	movs	r0, r0
	...

08002b70 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffc5 	bl	8002b08 <_ZN9LineTrace9calcErrorEv>
 8002b7e:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d007      	beq.n	8002b9c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002b8c:	4b66      	ldr	r3, [pc, #408]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ba2:	3354      	adds	r3, #84	; 0x54
 8002ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d14c      	bne.n	8002c46 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002bb2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bba:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002bc4:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	edd7 6a03 	vldr	s13, [r7, #12]
 8002bce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	ee17 0a90 	vmov	r0, s15
 8002bda:	f7fd fccd 	bl	8000578 <__aeabi_f2d>
 8002bde:	a350      	add	r3, pc, #320	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd fe4a 	bl	800087c <__aeabi_ddiv>
 8002be8:	4603      	mov	r3, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	4618      	mov	r0, r3
 8002bee:	4621      	mov	r1, r4
 8002bf0:	f7fe f812 	bl	8000c18 <__aeabi_d2f>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fcbb 	bl	8000578 <__aeabi_f2d>
 8002c02:	4604      	mov	r4, r0
 8002c04:	460d      	mov	r5, r1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c14:	ee17 0a90 	vmov	r0, s15
 8002c18:	f7fd fcae 	bl	8000578 <__aeabi_f2d>
 8002c1c:	a340      	add	r3, pc, #256	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	f7fd fd01 	bl	8000628 <__aeabi_dmul>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	f7fd fb45 	bl	80002bc <__adddf3>
 8002c32:	4603      	mov	r3, r0
 8002c34:	460c      	mov	r4, r1
 8002c36:	4618      	mov	r0, r3
 8002c38:	4621      	mov	r1, r4
 8002c3a:	f7fd ffed 	bl	8000c18 <__aeabi_d2f>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e04b      	b.n	8002cde <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002c4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c54:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002c5e:	4b33      	ldr	r3, [pc, #204]	; (8002d2c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c70:	ee17 0a90 	vmov	r0, s15
 8002c74:	f7fd fc80 	bl	8000578 <__aeabi_f2d>
 8002c78:	a329      	add	r3, pc, #164	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd fdfd 	bl	800087c <__aeabi_ddiv>
 8002c82:	4603      	mov	r3, r0
 8002c84:	460c      	mov	r4, r1
 8002c86:	4618      	mov	r0, r3
 8002c88:	4621      	mov	r1, r4
 8002c8a:	f7fd ffc5 	bl	8000c18 <__aeabi_d2f>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002c92:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fc6e 	bl	8000578 <__aeabi_f2d>
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	460d      	mov	r5, r1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cae:	ee17 0a90 	vmov	r0, s15
 8002cb2:	f7fd fc61 	bl	8000578 <__aeabi_f2d>
 8002cb6:	a31a      	add	r3, pc, #104	; (adr r3, 8002d20 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f7fd fcb4 	bl	8000628 <__aeabi_dmul>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	f7fd faf8 	bl	80002bc <__adddf3>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	f7fd ffa0 	bl	8000c18 <__aeabi_d2f>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cdc:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002cde:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cea:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cec:	edd3 7a00 	vldr	s15, [r3]
 8002cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf4:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002d02:	edd7 0a02 	vldr	s1, [r7, #8]
 8002d06:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f002 ffb8 	bl	8005c80 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002d10:	4a06      	ldr	r2, [pc, #24]	; (8002d2c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6013      	str	r3, [r2, #0]

}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d24:	3f50624d 	.word	0x3f50624d
 8002d28:	20000214 	.word	0x20000214
 8002d2c:	20000210 	.word	0x20000210

08002d30 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe fc95 	bl	800166c <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f002 f9ce 	bl	80050e8 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 ffb2 	bl	8004cba <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f002 f833 	bl	8004dde <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695a      	ldr	r2, [r3, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002d9a:	3318      	adds	r3, #24
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	461c      	mov	r4, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7fe fc45 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002da6:	eef0 7a40 	vmov.f32	s15, s0
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002db0:	3316      	adds	r3, #22
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dce:	3318      	adds	r3, #24
 8002dd0:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dd8:	3318      	adds	r3, #24
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	2b63      	cmp	r3, #99	; 0x63
 8002dde:	d905      	bls.n	8002dec <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002de6:	3318      	adds	r3, #24
 8002de8:	2263      	movs	r2, #99	; 0x63
 8002dea:	801a      	strh	r2, [r3, #0]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}

08002df4 <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e06:	331a      	adds	r3, #26
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461c      	mov	r4, r3
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	f7fe fc0f 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002e12:	eef0 7a40 	vmov.f32	s15, s0
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002e1c:	333a      	adds	r3, #58	; 0x3a
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e2c:	331a      	adds	r3, #26
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e3a:	331a      	adds	r3, #26
 8002e3c:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e44:	331a      	adds	r3, #26
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	2b63      	cmp	r3, #99	; 0x63
 8002e4a:	d905      	bls.n	8002e58 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e52:	331a      	adds	r3, #26
 8002e54:	2263      	movs	r2, #99	; 0x63
 8002e56:	801a      	strh	r2, [r3, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}

08002e60 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e72:	331c      	adds	r3, #28
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	461c      	mov	r4, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7fe fbd9 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002e7e:	eef0 7a40 	vmov.f32	s15, s0
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002e88:	331e      	adds	r3, #30
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e98:	331c      	adds	r3, #28
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ea6:	331c      	adds	r3, #28
 8002ea8:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eb0:	331c      	adds	r3, #28
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eb8:	d306      	bcc.n	8002ec8 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ec0:	331c      	adds	r3, #28
 8002ec2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ec6:	801a      	strh	r2, [r3, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}

08002ed0 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ee2:	331e      	adds	r3, #30
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	461c      	mov	r4, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7fe fba1 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002eee:	eef0 7a40 	vmov.f32	s15, s0
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002ef8:	3312      	adds	r3, #18
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f08:	331e      	adds	r3, #30
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f16:	331e      	adds	r3, #30
 8002f18:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f20:	331e      	adds	r3, #30
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f28:	d306      	bcc.n	8002f38 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f30:	331e      	adds	r3, #30
 8002f32:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f36:	801a      	strh	r2, [r3, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}

08002f40 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	ed2d 8b02 	vpush	{d8}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d046      	beq.n	8002fe4 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f5c:	3354      	adds	r3, #84	; 0x54
 8002f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d11c      	bne.n	8002fa0 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69dc      	ldr	r4, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fb4f 	bl	8001612 <_ZN7Encoder15getDistance10mmEv>
 8002f74:	eeb0 8a40 	vmov.f32	s16, s0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f002 f8a2 	bl	80050c6 <_ZN8Odometry8getThetaEv>
 8002f82:	ec53 2b10 	vmov	r2, r3, d0
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f7fd fe45 	bl	8000c18 <__aeabi_d2f>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	ee00 3a90 	vmov	s1, r3
 8002f94:	eeb0 0a48 	vmov.f32	s0, s16
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f001 fd4d 	bl	8004a38 <_ZN6Logger21storeDistanceAndThetaEff>
 8002f9e:	e01b      	b.n	8002fd8 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69dc      	ldr	r4, [r3, #28]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fb41 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8002fae:	eeb0 8a40 	vmov.f32	s16, s0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 f885 	bl	80050c6 <_ZN8Odometry8getThetaEv>
 8002fbc:	ec53 2b10 	vmov	r2, r3, d0
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f7fd fe28 	bl	8000c18 <__aeabi_d2f>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	ee00 3a90 	vmov	s1, r3
 8002fce:	eeb0 0a48 	vmov.f32	s0, s16
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f001 fd79 	bl	8004aca <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8002fe2:	801a      	strh	r2, [r3, #0]
	}
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	ecbd 8b02 	vpop	{d8}
 8002fee:	bd90      	pop	{r4, r7, pc}
 8002ff0:	20000204 	.word	0x20000204

08002ff4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003002:	3318      	adds	r3, #24
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d85a      	bhi.n	80030c0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003010:	3318      	adds	r3, #24
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800301a:	3316      	adds	r3, #22
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe fb01 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 800302e:	eeb0 7a40 	vmov.f32	s14, s0
 8003032:	edd7 7a03 	vldr	s15, [r7, #12]
 8003036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800303a:	eeb0 0a67 	vmov.f32	s0, s15
 800303e:	f7ff fc1b 	bl	8002878 <_ZSt3absf>
 8003042:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 8003046:	edd7 7a02 	vldr	s15, [r7, #8]
 800304a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80030e4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 800304e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	d826      	bhi.n	80030a6 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800305e:	3338      	adds	r3, #56	; 0x38
 8003060:	2200      	movs	r2, #0
 8003062:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6959      	ldr	r1, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800306e:	3318      	adds	r3, #24
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003078:	3316      	adds	r3, #22
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	eeb0 0a67 	vmov.f32	s0, s15
 8003086:	4608      	mov	r0, r1
 8003088:	f7fe fae1 	bl	800164e <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003092:	3318      	adds	r3, #24
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030a0:	3318      	adds	r3, #24
 80030a2:	801a      	strh	r2, [r3, #0]
			break;
 80030a4:	e00c      	b.n	80030c0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030ac:	3318      	adds	r3, #24
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	3301      	adds	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030ba:	3318      	adds	r3, #24
 80030bc:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 80030be:	e79d      	b.n	8002ffc <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030c6:	3318      	adds	r3, #24
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	2b63      	cmp	r3, #99	; 0x63
 80030cc:	d905      	bls.n	80030da <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030d4:	3318      	adds	r3, #24
 80030d6:	2263      	movs	r2, #99	; 0x63
 80030d8:	801a      	strh	r2, [r3, #0]

}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	437a0000 	.word	0x437a0000

080030e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80030f0:	2300      	movs	r3, #0
 80030f2:	82fb      	strh	r3, [r7, #22]
 80030f4:	8afb      	ldrh	r3, [r7, #22]
 80030f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030fa:	d23d      	bcs.n	8003178 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 80030fc:	8afb      	ldrh	r3, [r7, #22]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8003104:	331e      	adds	r3, #30
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fa8c 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 8003118:	eeb0 7a40 	vmov.f32	s14, s0
 800311c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003124:	eeb0 0a67 	vmov.f32	s0, s15
 8003128:	f7ff fba6 	bl	8002878 <_ZSt3absf>
 800312c:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 8003130:	edd7 7a03 	vldr	s15, [r7, #12]
 8003134:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80031a0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 8003138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	d816      	bhi.n	8003170 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003148:	3338      	adds	r3, #56	; 0x38
 800314a:	2200      	movs	r2, #0
 800314c:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6959      	ldr	r1, [r3, #20]
 8003152:	8afb      	ldrh	r3, [r7, #22]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800315a:	331e      	adds	r3, #30
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	eeb0 0a67 	vmov.f32	s0, s15
 8003168:	4608      	mov	r0, r1
 800316a:	f7fe fa70 	bl	800164e <_ZN7Encoder16setTotalDistanceEf>
			break;
 800316e:	e003      	b.n	8003178 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003170:	8afb      	ldrh	r3, [r7, #22]
 8003172:	3301      	adds	r3, #1
 8003174:	82fb      	strh	r3, [r7, #22]
 8003176:	e7bd      	b.n	80030f4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800317e:	331c      	adds	r3, #28
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003186:	d306      	bcc.n	8003196 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800318e:	331c      	adds	r3, #28
 8003190:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003194:	801a      	strh	r2, [r3, #0]

}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	43660000 	.word	0x43660000

080031a4 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031b6:	3354      	adds	r3, #84	; 0x54
 80031b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d144      	bne.n	800324a <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 80031c0:	edd7 7a00 	vldr	s15, [r7]
 80031c4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80032fc <_ZN9LineTrace15radius2VelocityEf+0x158>
 80031c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d0:	d504      	bpl.n	80031dc <_ZN9LineTrace15radius2VelocityEf+0x38>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	e084      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.5;
 80031dc:	edd7 7a00 	vldr	s15, [r7]
 80031e0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003300 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d503      	bpl.n	80031f6 <_ZN9LineTrace15radius2VelocityEf+0x52>
 80031ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	e077      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 80031f6:	edd7 7a00 	vldr	s15, [r7]
 80031fa:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003304 <_ZN9LineTrace15radius2VelocityEf+0x160>
 80031fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	d503      	bpl.n	8003210 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 8003208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	e06a      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 8003210:	edd7 7a00 	vldr	s15, [r7]
 8003214:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003308 <_ZN9LineTrace15radius2VelocityEf+0x164>
 8003218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	d502      	bpl.n	8003228 <_ZN9LineTrace15radius2VelocityEf+0x84>
 8003222:	4b3a      	ldr	r3, [pc, #232]	; (800330c <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e05e      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 8003228:	edd7 7a00 	vldr	s15, [r7]
 800322c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003310 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8003230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003238:	d502      	bpl.n	8003240 <_ZN9LineTrace15radius2VelocityEf+0x9c>
 800323a:	4b36      	ldr	r3, [pc, #216]	; (8003314 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e052      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity_;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e04d      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003250:	3354      	adds	r3, #84	; 0x54
 8003252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d143      	bne.n	80032e2 <_ZN9LineTrace15radius2VelocityEf+0x13e>
		if(radius < 400) velocity = min_velocity2_;
 800325a:	edd7 7a00 	vldr	s15, [r7]
 800325e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80032fc <_ZN9LineTrace15radius2VelocityEf+0x158>
 8003262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326a:	d504      	bpl.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0xd2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e037      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.7;
 8003276:	edd7 7a00 	vldr	s15, [r7]
 800327a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003300 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 800327e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003286:	d502      	bpl.n	800328e <_ZN9LineTrace15radius2VelocityEf+0xea>
 8003288:	4b23      	ldr	r3, [pc, #140]	; (8003318 <_ZN9LineTrace15radius2VelocityEf+0x174>)
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e02b      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 800328e:	edd7 7a00 	vldr	s15, [r7]
 8003292:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003304 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8003296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329e:	d503      	bpl.n	80032a8 <_ZN9LineTrace15radius2VelocityEf+0x104>
 80032a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e01e      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 80032a8:	edd7 7a00 	vldr	s15, [r7]
 80032ac:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003308 <_ZN9LineTrace15radius2VelocityEf+0x164>
 80032b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b8:	d502      	bpl.n	80032c0 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e012      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 80032c0:	edd7 7a00 	vldr	s15, [r7]
 80032c4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003310 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 80032c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d0:	d502      	bpl.n	80032d8 <_ZN9LineTrace15radius2VelocityEf+0x134>
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e006      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity2_;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e001      	b.n	80032e6 <_ZN9LineTrace15radius2VelocityEf+0x142>
	}
	else velocity = 1.3;
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <_ZN9LineTrace15radius2VelocityEf+0x178>)
 80032e4:	60fb      	str	r3, [r7, #12]

	return velocity;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	ee07 3a90 	vmov	s15, r3
}
 80032ec:	eeb0 0a67 	vmov.f32	s0, s15
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	43c80000 	.word	0x43c80000
 8003300:	43fa0000 	.word	0x43fa0000
 8003304:	44228000 	.word	0x44228000
 8003308:	44bb8000 	.word	0x44bb8000
 800330c:	40200000 	.word	0x40200000
 8003310:	44fa0000 	.word	0x44fa0000
 8003314:	40400000 	.word	0x40400000
 8003318:	3fd9999a 	.word	0x3fd9999a
 800331c:	3fa66666 	.word	0x3fa66666

08003320 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	ed87 0a02 	vstr	s0, [r7, #8]
 800332c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800332e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003332:	83fb      	strh	r3, [r7, #30]
 8003334:	8bfb      	ldrh	r3, [r7, #30]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 808d 	beq.w	8003456 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800333c:	8bfb      	ldrh	r3, [r7, #30]
 800333e:	3b01      	subs	r3, #1
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003346:	3304      	adds	r3, #4
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	ed93 7a00 	vldr	s14, [r3]
 8003350:	8bfb      	ldrh	r3, [r7, #30]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003358:	3304      	adds	r3, #4
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003366:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800336a:	edd7 7a06 	vldr	s15, [r7, #24]
 800336e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	dd6a      	ble.n	800344e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003378:	8bfb      	ldrh	r3, [r7, #30]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8f8 	bl	8000578 <__aeabi_f2d>
 8003388:	a335      	add	r3, pc, #212	; (adr r3, 8003460 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	f7fd f94b 	bl	8000628 <__aeabi_dmul>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	4625      	mov	r5, r4
 8003398:	461c      	mov	r4, r3
 800339a:	69b8      	ldr	r0, [r7, #24]
 800339c:	f7fd f8ec 	bl	8000578 <__aeabi_f2d>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4620      	mov	r0, r4
 80033a6:	4629      	mov	r1, r5
 80033a8:	f7fd fa68 	bl	800087c <__aeabi_ddiv>
 80033ac:	4603      	mov	r3, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	4618      	mov	r0, r3
 80033b2:	4621      	mov	r1, r4
 80033b4:	f7fd fc30 	bl	8000c18 <__aeabi_d2f>
 80033b8:	4603      	mov	r3, r0
 80033ba:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80033bc:	edd7 6a06 	vldr	s13, [r7, #24]
 80033c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80033c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c8:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80033cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80033d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80033d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	dd37      	ble.n	800344e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80033de:	8bfb      	ldrh	r3, [r7, #30]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033e6:	3304      	adds	r3, #4
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f8c2 	bl	8000578 <__aeabi_f2d>
 80033f4:	4604      	mov	r4, r0
 80033f6:	460d      	mov	r5, r1
 80033f8:	8bfb      	ldrh	r3, [r7, #30]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	ed93 7a00 	vldr	s14, [r3]
 8003404:	edd7 7a02 	vldr	s15, [r7, #8]
 8003408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340c:	ee17 0a90 	vmov	r0, s15
 8003410:	f7fd f8b2 	bl	8000578 <__aeabi_f2d>
 8003414:	a312      	add	r3, pc, #72	; (adr r3, 8003460 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f905 	bl	8000628 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4620      	mov	r0, r4
 8003424:	4629      	mov	r1, r5
 8003426:	f7fc ff49 	bl	80002bc <__adddf3>
 800342a:	4603      	mov	r3, r0
 800342c:	460c      	mov	r4, r1
 800342e:	4619      	mov	r1, r3
 8003430:	4622      	mov	r2, r4
 8003432:	8bfb      	ldrh	r3, [r7, #30]
 8003434:	1e5c      	subs	r4, r3, #1
 8003436:	4608      	mov	r0, r1
 8003438:	4611      	mov	r1, r2
 800343a:	f7fd fbed 	bl	8000c18 <__aeabi_d2f>
 800343e:	4601      	mov	r1, r0
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003446:	3304      	adds	r3, #4
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800344e:	8bfb      	ldrh	r3, [r7, #30]
 8003450:	3b01      	subs	r3, #1
 8003452:	83fb      	strh	r3, [r7, #30]
 8003454:	e76e      	b.n	8003334 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bdb0      	pop	{r4, r5, r7, pc}
 800345e:	bf00      	nop
 8003460:	d2f1a9fc 	.word	0xd2f1a9fc
 8003464:	3f50624d 	.word	0x3f50624d

08003468 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	ed87 0a02 	vstr	s0, [r7, #8]
 8003474:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003476:	2300      	movs	r3, #0
 8003478:	83fb      	strh	r3, [r7, #30]
 800347a:	8bfb      	ldrh	r3, [r7, #30]
 800347c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003480:	4293      	cmp	r3, r2
 8003482:	f200 808d 	bhi.w	80035a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003486:	8bfb      	ldrh	r3, [r7, #30]
 8003488:	3301      	adds	r3, #1
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003490:	3304      	adds	r3, #4
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	ed93 7a00 	vldr	s14, [r3]
 800349a:	8bfb      	ldrh	r3, [r7, #30]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034a2:	3304      	adds	r3, #4
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b0:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80034b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80034b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	dd6a      	ble.n	8003598 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80034c2:	8bfb      	ldrh	r3, [r7, #30]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f853 	bl	8000578 <__aeabi_f2d>
 80034d2:	a335      	add	r3, pc, #212	; (adr r3, 80035a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f7fd f8a6 	bl	8000628 <__aeabi_dmul>
 80034dc:	4603      	mov	r3, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	4625      	mov	r5, r4
 80034e2:	461c      	mov	r4, r3
 80034e4:	69b8      	ldr	r0, [r7, #24]
 80034e6:	f7fd f847 	bl	8000578 <__aeabi_f2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4620      	mov	r0, r4
 80034f0:	4629      	mov	r1, r5
 80034f2:	f7fd f9c3 	bl	800087c <__aeabi_ddiv>
 80034f6:	4603      	mov	r3, r0
 80034f8:	460c      	mov	r4, r1
 80034fa:	4618      	mov	r0, r3
 80034fc:	4621      	mov	r1, r4
 80034fe:	f7fd fb8b 	bl	8000c18 <__aeabi_d2f>
 8003502:	4603      	mov	r3, r0
 8003504:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003506:	edd7 6a06 	vldr	s13, [r7, #24]
 800350a:	ed97 7a05 	vldr	s14, [r7, #20]
 800350e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003512:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003516:	ed97 7a04 	vldr	s14, [r7, #16]
 800351a:	edd7 7a02 	vldr	s15, [r7, #8]
 800351e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	dd37      	ble.n	8003598 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003528:	8bfb      	ldrh	r3, [r7, #30]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003530:	3304      	adds	r3, #4
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd f81d 	bl	8000578 <__aeabi_f2d>
 800353e:	4604      	mov	r4, r0
 8003540:	460d      	mov	r5, r1
 8003542:	8bfb      	ldrh	r3, [r7, #30]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	ed93 7a00 	vldr	s14, [r3]
 800354e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	ee17 0a90 	vmov	r0, s15
 800355a:	f7fd f80d 	bl	8000578 <__aeabi_f2d>
 800355e:	a312      	add	r3, pc, #72	; (adr r3, 80035a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fd f860 	bl	8000628 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4620      	mov	r0, r4
 800356e:	4629      	mov	r1, r5
 8003570:	f7fc fea4 	bl	80002bc <__adddf3>
 8003574:	4603      	mov	r3, r0
 8003576:	460c      	mov	r4, r1
 8003578:	4619      	mov	r1, r3
 800357a:	4622      	mov	r2, r4
 800357c:	8bfb      	ldrh	r3, [r7, #30]
 800357e:	1c5c      	adds	r4, r3, #1
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	f7fd fb48 	bl	8000c18 <__aeabi_d2f>
 8003588:	4601      	mov	r1, r0
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003590:	3304      	adds	r3, #4
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003598:	8bfb      	ldrh	r3, [r7, #30]
 800359a:	3301      	adds	r3, #1
 800359c:	83fb      	strh	r3, [r7, #30]
 800359e:	e76c      	b.n	800347a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80035a0:	bf00      	nop
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bdb0      	pop	{r4, r5, r7, pc}
 80035a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80035ac:	3f50624d 	.word	0x3f50624d

080035b0 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe f863 	bl	8001688 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035c8:	3350      	adds	r3, #80	; 0x50
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035d4:	3352      	adds	r3, #82	; 0x52
 80035d6:	2200      	movs	r2, #0
 80035d8:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035e0:	330c      	adds	r3, #12
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035fe:	3350      	adds	r3, #80	; 0x50
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800360a:	3352      	adds	r3, #82	; 0x52
 800360c:	2200      	movs	r2, #0
 800360e:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003616:	330c      	adds	r3, #12
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003638:	3350      	adds	r3, #80	; 0x50
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d05e      	beq.n	80036fe <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fd fff3 	bl	8001630 <_ZN7Encoder16getTotalDistanceEv>
 800364a:	eeb0 7a40 	vmov.f32	s14, s0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003654:	330c      	adds	r3, #12
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003662:	bfac      	ite	ge
 8003664:	2301      	movge	r3, #1
 8003666:	2300      	movlt	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d025      	beq.n	80036ba <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003674:	330c      	adds	r3, #12
 8003676:	ed93 7a00 	vldr	s14, [r3]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003680:	3352      	adds	r3, #82	; 0x52
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	3332      	adds	r3, #50	; 0x32
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	3304      	adds	r3, #4
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800369c:	330c      	adds	r3, #12
 800369e:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036a8:	3352      	adds	r3, #82	; 0x52
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036b6:	3352      	adds	r3, #82	; 0x52
 80036b8:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036c0:	3352      	adds	r3, #82	; 0x52
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	f241 726f 	movw	r2, #5999	; 0x176f
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d906      	bls.n	80036da <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036d2:	3352      	adds	r3, #82	; 0x52
 80036d4:	f241 726f 	movw	r2, #5999	; 0x176f
 80036d8:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036e0:	3352      	adds	r3, #82	; 0x52
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036ea:	3304      	adds	r3, #4
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	eeb0 0a67 	vmov.f32	s0, s15
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fae4 	bl	8003cc6 <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd ff79 	bl	8001612 <_ZN7Encoder15getDistance10mmEv>
 8003720:	eeb0 7a40 	vmov.f32	s14, s0
 8003724:	edd7 7a00 	vldr	s15, [r7]
 8003728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	bf94      	ite	ls
 8003732:	2301      	movls	r3, #1
 8003734:	2300      	movhi	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8003764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003768:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800376c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003770:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8003784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003788:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800378c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003790:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003794:	4a47      	ldr	r2, [pc, #284]	; (80038b4 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 800379a:	4a47      	ldr	r2, [pc, #284]	; (80038b8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80037a0:	4b46      	ldr	r3, [pc, #280]	; (80038bc <_ZN9LineTrace11isCrossLineEv+0x170>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	f083 0301 	eor.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d052      	beq.n	8003854 <_ZN9LineTrace11isCrossLineEv+0x108>
		if(sensor_edge_val_l < 650 && sensor_edge_val_r < 650){
 80037ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80038c0 <_ZN9LineTrace11isCrossLineEv+0x174>
 80037b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	d50f      	bpl.n	80037e0 <_ZN9LineTrace11isCrossLineEv+0x94>
 80037c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037c4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80038c0 <_ZN9LineTrace11isCrossLineEv+0x174>
 80037c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d0:	d506      	bpl.n	80037e0 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 80037d2:	4b3c      	ldr	r3, [pc, #240]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	3301      	adds	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	4b3a      	ldr	r3, [pc, #232]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	e002      	b.n	80037e6 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 80037e0:	4b38      	ldr	r3, [pc, #224]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 80037e6:	4b37      	ldr	r3, [pc, #220]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d05b      	beq.n	80038a6 <_ZN9LineTrace11isCrossLineEv+0x15a>
			flag = true;
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80037f4:	4b31      	ldr	r3, [pc, #196]	; (80038bc <_ZN9LineTrace11isCrossLineEv+0x170>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80037fa:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	801a      	strh	r2, [r3, #0]

			//side_sensor_->enableIgnore();
			encoder_->clearCrossLineIgnoreDistance();
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd ff5c 	bl	80016c2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003810:	3324      	adds	r3, #36	; 0x24
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800381c:	3354      	adds	r3, #84	; 0x54
 800381e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <_ZN9LineTrace11isCrossLineEv+0xee>
				store_check_cnt_ = 0;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800382c:	333a      	adds	r3, #58	; 0x3a
 800382e:	2200      	movs	r2, #0
 8003830:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff faa8 	bl	8002d88 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003838:	e035      	b.n	80038a6 <_ZN9LineTrace11isCrossLineEv+0x15a>
			}
			else{
				store_check_cnt_ = 0;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003840:	333a      	adds	r3, #58	; 0x3a
 8003842:	2200      	movs	r2, #0
 8003844:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fbd4 	bl	8002ff4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff fad1 	bl	8002df4 <_ZN9LineTrace23storeCrossLineDistance2Ev>
 8003852:	e028      	b.n	80038a6 <_ZN9LineTrace11isCrossLineEv+0x15a>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003854:	edd7 7a03 	vldr	s15, [r7, #12]
 8003858:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80038cc <_ZN9LineTrace11isCrossLineEv+0x180>
 800385c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	dd0f      	ble.n	8003886 <_ZN9LineTrace11isCrossLineEv+0x13a>
 8003866:	edd7 7a02 	vldr	s15, [r7, #8]
 800386a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80038cc <_ZN9LineTrace11isCrossLineEv+0x180>
 800386e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003876:	dd06      	ble.n	8003886 <_ZN9LineTrace11isCrossLineEv+0x13a>
			cnt++;
 8003878:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8003882:	801a      	strh	r2, [r3, #0]
 8003884:	e002      	b.n	800388c <_ZN9LineTrace11isCrossLineEv+0x140>
		}
		else{
			cnt = 0;
 8003886:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8003888:	2200      	movs	r2, #0
 800388a:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 5){
 800388c:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d908      	bls.n	80038a6 <_ZN9LineTrace11isCrossLineEv+0x15a>
			flag = false;
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <_ZN9LineTrace11isCrossLineEv+0x170>)
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x17c>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000208 	.word	0x20000208
 80038b8:	2000020c 	.word	0x2000020c
 80038bc:	2000021b 	.word	0x2000021b
 80038c0:	44228000 	.word	0x44228000
 80038c4:	20000218 	.word	0x20000218
 80038c8:	2000021a 	.word	0x2000021a
 80038cc:	43fa0000 	.word	0x43fa0000

080038d0 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80038d8:	2300      	movs	r3, #0
 80038da:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd fe96 	bl	8001612 <_ZN7Encoder15getDistance10mmEv>
 80038e6:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 fbe9 	bl	80050c6 <_ZN8Odometry8getThetaEv>
 80038f4:	ec54 3b10 	vmov	r3, r4, d0
 80038f8:	4618      	mov	r0, r3
 80038fa:	4621      	mov	r1, r4
 80038fc:	f7fd f98c 	bl	8000c18 <__aeabi_d2f>
 8003900:	4603      	mov	r3, r0
 8003902:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003904:	edd7 7a04 	vldr	s15, [r7, #16]
 8003908:	eef5 7a40 	vcmp.f32	s15, #0.0
 800390c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003910:	d101      	bne.n	8003916 <_ZN9LineTrace8isStableEv+0x46>
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <_ZN9LineTrace8isStableEv+0xd0>)
 8003914:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003916:	ed97 7a02 	vldr	s14, [r7, #8]
 800391a:	edd7 7a04 	vldr	s15, [r7, #16]
 800391e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003922:	eeb0 0a66 	vmov.f32	s0, s13
 8003926:	f7fe ffa7 	bl	8002878 <_ZSt3absf>
 800392a:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800392e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003932:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039a4 <_ZN9LineTrace8isStableEv+0xd4>
 8003936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800393a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393e:	db01      	blt.n	8003944 <_ZN9LineTrace8isStableEv+0x74>
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <_ZN9LineTrace8isStableEv+0xd8>)
 8003942:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800394a:	3324      	adds	r3, #36	; 0x24
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003952:	4b16      	ldr	r3, [pc, #88]	; (80039ac <_ZN9LineTrace8isStableEv+0xdc>)
 8003954:	2200      	movs	r2, #0
 8003956:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800395e:	3324      	adds	r3, #36	; 0x24
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003964:	edd7 7a03 	vldr	s15, [r7, #12]
 8003968:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039b0 <_ZN9LineTrace8isStableEv+0xe0>
 800396c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003974:	db06      	blt.n	8003984 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <_ZN9LineTrace8isStableEv+0xdc>)
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	3301      	adds	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <_ZN9LineTrace8isStableEv+0xdc>)
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	e002      	b.n	800398a <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <_ZN9LineTrace8isStableEv+0xdc>)
 8003986:	2200      	movs	r2, #0
 8003988:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <_ZN9LineTrace8isStableEv+0xdc>)
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	2b18      	cmp	r3, #24
 8003990:	d901      	bls.n	8003996 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003992:	2301      	movs	r3, #1
 8003994:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	bd90      	pop	{r4, r7, pc}
 80039a0:	3727c5ac 	.word	0x3727c5ac
 80039a4:	459c4000 	.word	0x459c4000
 80039a8:	459c4000 	.word	0x459c4000
 80039ac:	2000021c 	.word	0x2000021c
 80039b0:	44fa0000 	.word	0x44fa0000

080039b4 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b092      	sub	sp, #72	; 0x48
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80039bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039c0:	2201      	movs	r2, #1
 80039c2:	4963      	ldr	r1, [pc, #396]	; (8003b50 <_ZN9LineTrace4initEv+0x19c>)
 80039c4:	4863      	ldr	r0, [pc, #396]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 80039c6:	f7fd ff81 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80039ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039ce:	2201      	movs	r2, #1
 80039d0:	4961      	ldr	r1, [pc, #388]	; (8003b58 <_ZN9LineTrace4initEv+0x1a4>)
 80039d2:	4860      	ldr	r0, [pc, #384]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 80039d4:	f7fd ff7a 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80039d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039dc:	2201      	movs	r2, #1
 80039de:	495f      	ldr	r1, [pc, #380]	; (8003b5c <_ZN9LineTrace4initEv+0x1a8>)
 80039e0:	485c      	ldr	r0, [pc, #368]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 80039e2:	f7fd ff73 	bl	80018cc <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80039e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039ea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80039ee:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80039f2:	eeb0 1a66 	vmov.f32	s2, s13
 80039f6:	eef0 0a47 	vmov.f32	s1, s14
 80039fa:	eeb0 0a67 	vmov.f32	s0, s15
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f8c6 	bl	8003b90 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003a04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a08:	2201      	movs	r2, #1
 8003a0a:	4955      	ldr	r1, [pc, #340]	; (8003b60 <_ZN9LineTrace4initEv+0x1ac>)
 8003a0c:	4851      	ldr	r0, [pc, #324]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003a0e:	f7fd ff5d 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a16:	2201      	movs	r2, #1
 8003a18:	4952      	ldr	r1, [pc, #328]	; (8003b64 <_ZN9LineTrace4initEv+0x1b0>)
 8003a1a:	484e      	ldr	r0, [pc, #312]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003a1c:	f7fd ff56 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003a20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a24:	2201      	movs	r2, #1
 8003a26:	4950      	ldr	r1, [pc, #320]	; (8003b68 <_ZN9LineTrace4initEv+0x1b4>)
 8003a28:	484a      	ldr	r0, [pc, #296]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003a2a:	f7fd ff4f 	bl	80018cc <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003a2e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a32:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a36:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003a3a:	eeb0 1a66 	vmov.f32	s2, s13
 8003a3e:	eef0 0a47 	vmov.f32	s1, s14
 8003a42:	eeb0 0a67 	vmov.f32	s0, s15
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f8e8 	bl	8003c1c <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a50:	2201      	movs	r2, #1
 8003a52:	4946      	ldr	r1, [pc, #280]	; (8003b6c <_ZN9LineTrace4initEv+0x1b8>)
 8003a54:	483f      	ldr	r0, [pc, #252]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003a56:	f7fd ff39 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a5e:	2201      	movs	r2, #1
 8003a60:	4943      	ldr	r1, [pc, #268]	; (8003b70 <_ZN9LineTrace4initEv+0x1bc>)
 8003a62:	483c      	ldr	r0, [pc, #240]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003a64:	f7fd ff32 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4941      	ldr	r1, [pc, #260]	; (8003b74 <_ZN9LineTrace4initEv+0x1c0>)
 8003a70:	4838      	ldr	r0, [pc, #224]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003a72:	f7fd ff2b 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a76:	f107 0320 	add.w	r3, r7, #32
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	493e      	ldr	r1, [pc, #248]	; (8003b78 <_ZN9LineTrace4initEv+0x1c4>)
 8003a7e:	4835      	ldr	r0, [pc, #212]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003a80:	f7fd ff24 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	2201      	movs	r2, #1
 8003a8a:	493c      	ldr	r1, [pc, #240]	; (8003b7c <_ZN9LineTrace4initEv+0x1c8>)
 8003a8c:	4831      	ldr	r0, [pc, #196]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003a8e:	f7fd ff1d 	bl	80018cc <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a92:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a96:	eeb0 0a67 	vmov.f32	s0, s15
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f913 	bl	8003cc6 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003aa0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f91c 	bl	8003ce6 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003aae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f925 	bl	8003d06 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003abc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f92e 	bl	8003d26 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003aca:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ace:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f937 	bl	8003d46 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003ad8:	f107 0318 	add.w	r3, r7, #24
 8003adc:	2201      	movs	r2, #1
 8003ade:	4928      	ldr	r1, [pc, #160]	; (8003b80 <_ZN9LineTrace4initEv+0x1cc>)
 8003ae0:	481c      	ldr	r0, [pc, #112]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003ae2:	f7fd fef3 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	2201      	movs	r2, #1
 8003aec:	4925      	ldr	r1, [pc, #148]	; (8003b84 <_ZN9LineTrace4initEv+0x1d0>)
 8003aee:	4819      	ldr	r0, [pc, #100]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003af0:	f7fd feec 	bl	80018cc <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003af4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003af8:	ed97 7a05 	vldr	s14, [r7, #20]
 8003afc:	eef0 0a47 	vmov.f32	s1, s14
 8003b00:	eeb0 0a67 	vmov.f32	s0, s15
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f97e 	bl	8003e06 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003b16:	f107 0310 	add.w	r3, r7, #16
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	491a      	ldr	r1, [pc, #104]	; (8003b88 <_ZN9LineTrace4initEv+0x1d4>)
 8003b1e:	480d      	ldr	r0, [pc, #52]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003b20:	f7fd fed4 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	2201      	movs	r2, #1
 8003b2a:	4918      	ldr	r1, [pc, #96]	; (8003b8c <_ZN9LineTrace4initEv+0x1d8>)
 8003b2c:	4809      	ldr	r0, [pc, #36]	; (8003b54 <_ZN9LineTrace4initEv+0x1a0>)
 8003b2e:	f7fd fecd 	bl	80018cc <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003b32:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b36:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b3a:	eef0 0a47 	vmov.f32	s1, s14
 8003b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f979 	bl	8003e3a <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003b48:	bf00      	nop
 8003b4a:	3748      	adds	r7, #72	; 0x48
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	08018ac0 	.word	0x08018ac0
 8003b54:	08018ac8 	.word	0x08018ac8
 8003b58:	08018ad0 	.word	0x08018ad0
 8003b5c:	08018ad8 	.word	0x08018ad8
 8003b60:	08018ae0 	.word	0x08018ae0
 8003b64:	08018aec 	.word	0x08018aec
 8003b68:	08018af8 	.word	0x08018af8
 8003b6c:	08018b04 	.word	0x08018b04
 8003b70:	08018b10 	.word	0x08018b10
 8003b74:	08018b1c 	.word	0x08018b1c
 8003b78:	08018b28 	.word	0x08018b28
 8003b7c:	08018b34 	.word	0x08018b34
 8003b80:	08018b40 	.word	0x08018b40
 8003b84:	08018b48 	.word	0x08018b48
 8003b88:	08018b50 	.word	0x08018b50
 8003b8c:	08018b5c 	.word	0x08018b5c

08003b90 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b9c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ba0:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
	return kp_;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	ee07 3a90 	vmov	s15, r3
}
 8003bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	return ki_;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	ee07 3a90 	vmov	s15, r3
}
 8003bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
	return kd_;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	ee07 3a90 	vmov	s15, r3
}
 8003c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c28:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c2c:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	ee07 3a90 	vmov	s15, r3
}
 8003c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	ee07 3a90 	vmov	s15, r3
}
 8003c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	ee07 3a90 	vmov	s15, r3
}
 8003c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d74:	ee07 3a90 	vmov	s15, r3
}
 8003d78:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d94:	ee07 3a90 	vmov	s15, r3
}
 8003d98:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003db4:	ee07 3a90 	vmov	s15, r3
}
 8003db8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003dd4:	ee07 3a90 	vmov	s15, r3
}
 8003dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003df4:	ee07 3a90 	vmov	s15, r3
}
 8003df8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e12:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e1c:	3328      	adds	r3, #40	; 0x28
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e28:	332c      	adds	r3, #44	; 0x2c
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	601a      	str	r2, [r3, #0]
}
 8003e2e:	bf00      	nop
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e46:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e50:	3330      	adds	r3, #48	; 0x30
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e5c:	3334      	adds	r3, #52	; 0x34
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e7c:	3328      	adds	r3, #40	; 0x28
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	ee07 3a90 	vmov	s15, r3
}
 8003e84:	eeb0 0a67 	vmov.f32	s0, s15
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ea0:	3334      	adds	r3, #52	; 0x34
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	ee07 3a90 	vmov	s15, r3
}
 8003ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ec4:	3330      	adds	r3, #48	; 0x30
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	ee07 3a90 	vmov	s15, r3
}
 8003ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ee8:	332c      	adds	r3, #44	; 0x2c
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	ee07 3a90 	vmov	s15, r3
}
 8003ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003f00:	b590      	push	{r4, r7, lr}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8140 	beq.w	8004194 <_ZN9LineTrace4flipEv+0x294>
		// ---- line following processing -----//
		pidTrace();
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fe fe2b 	bl	8002b70 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fb85 	bl	800362a <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 8003f20:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff fbee 	bl	8003706 <_ZN9LineTrace16isTargetDistanceEf>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d040      	beq.n	8003fb2 <_ZN9LineTrace4flipEv+0xb2>
			// ---- Store Logs ------//
			storeLogs();
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff f805 	bl	8002f40 <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69dc      	ldr	r4, [r3, #28]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fd ff16 	bl	8001d70 <_ZN3IMU8getOmegaEv>
 8003f44:	eef0 7a40 	vmov.f32	s15, s0
 8003f48:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f000 fcf7 	bl	8004940 <_ZN6Logger8storeLogEf>
			logger_->storeLog2(target_omega_);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8003f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f60:	4610      	mov	r0, r2
 8003f62:	f000 fd2a 	bl	80049ba <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fcb2 	bl	80038d0 <_ZN9LineTrace8isStableEv>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00c      	beq.n	8003f8c <_ZN9LineTrace4flipEv+0x8c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 fb24 	bl	80055c4 <_ZN10SideSensor10getStatusLEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f083 0301 	eor.w	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <_ZN9LineTrace4flipEv+0x8c>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <_ZN9LineTrace4flipEv+0x8e>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <_ZN9LineTrace4flipEv+0x9e>
				stable_flag_ = true;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f98:	3323      	adds	r3, #35	; 0x23
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd fb62 	bl	800166c <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f89b 	bl	80050e8 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fb8:	3323      	adds	r3, #35	; 0x23
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <_ZN9LineTrace4flipEv+0xd4>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 fafd 	bl	80055c4 <_ZN10SideSensor10getStatusLEv>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <_ZN9LineTrace4flipEv+0xd4>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <_ZN9LineTrace4flipEv+0xd6>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d029      	beq.n	800402e <_ZN9LineTrace4flipEv+0x12e>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fe0:	3354      	adds	r3, #84	; 0x54
 8003fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d109      	bne.n	8003ffe <_ZN9LineTrace4flipEv+0xfe>
				store_check_cnt_ = 0;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ff0:	333a      	adds	r3, #58	; 0x3a
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fe ff32 	bl	8002e60 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003ffc:	e00b      	b.n	8004016 <_ZN9LineTrace4flipEv+0x116>
			}
			else{
				store_check_cnt_ = 0;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004004:	333a      	adds	r3, #58	; 0x3a
 8004006:	2200      	movs	r2, #0
 8004008:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff f86c 	bl	80030e8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fe ff5d 	bl	8002ed0 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800401c:	3323      	adds	r3, #35	; 0x23
 800401e:	2200      	movs	r2, #0
 8004020:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004028:	3324      	adds	r3, #36	; 0x24
 800402a:	2201      	movs	r2, #1
 800402c:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fb8c 	bl	800374c <_ZN9LineTrace11isCrossLineEv>
			//encoder_->clearCrossLineIgnoreDistance();//moved to isCrossLine function
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 100){
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	4618      	mov	r0, r3
 800403a:	f001 fb04 	bl	8005646 <_ZN10SideSensor13getIgnoreFlagEv>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00f      	beq.n	8004064 <_ZN9LineTrace4flipEv+0x164>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	4618      	mov	r0, r3
 800404a:	f7fd fb2b 	bl	80016a4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 800404e:	eeb0 7a40 	vmov.f32	s14, s0
 8004052:	eddf 7a52 	vldr	s15, [pc, #328]	; 800419c <_ZN9LineTrace4flipEv+0x29c>
 8004056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800405a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405e:	db01      	blt.n	8004064 <_ZN9LineTrace4flipEv+0x164>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <_ZN9LineTrace4flipEv+0x166>
 8004064:	2300      	movs	r3, #0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d004      	beq.n	8004074 <_ZN9LineTrace4flipEv+0x174>
			side_sensor_->disableIgnore();
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	4618      	mov	r0, r3
 8004070:	f001 fadc 	bl	800562c <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fbad 	bl	80027d8 <_ZN10LineSensor13emergencyStopEv>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00d      	beq.n	80040a0 <_ZN9LineTrace4flipEv+0x1a0>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	eddf 0a45 	vldr	s1, [pc, #276]	; 80041a0 <_ZN9LineTrace4flipEv+0x2a0>
 800408c:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80041a0 <_ZN9LineTrace4flipEv+0x2a0>
 8004090:	4618      	mov	r0, r3
 8004092:	f001 fdf5 	bl	8005c80 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	4618      	mov	r0, r3
 800409c:	f7fd f972 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040a6:	3338      	adds	r3, #56	; 0x38
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040b4:	3338      	adds	r3, #56	; 0x38
 80040b6:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040be:	3338      	adds	r3, #56	; 0x38
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d906      	bls.n	80040d8 <_ZN9LineTrace4flipEv+0x1d8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040d0:	3338      	adds	r3, #56	; 0x38
 80040d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80040d6:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040de:	3338      	adds	r3, #56	; 0x38
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80040e6:	d805      	bhi.n	80040f4 <_ZN9LineTrace4flipEv+0x1f4>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	330c      	adds	r3, #12
 80040ec:	2152      	movs	r1, #82	; 0x52
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe f800 	bl	80020f4 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040fa:	333a      	adds	r3, #58	; 0x3a
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	3301      	adds	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004108:	333a      	adds	r3, #58	; 0x3a
 800410a:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004112:	333a      	adds	r3, #58	; 0x3a
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	f242 720f 	movw	r2, #9999	; 0x270f
 800411a:	4293      	cmp	r3, r2
 800411c:	d906      	bls.n	800412c <_ZN9LineTrace4flipEv+0x22c>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004124:	333a      	adds	r3, #58	; 0x3a
 8004126:	f242 7210 	movw	r2, #10000	; 0x2710
 800412a:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004132:	333a      	adds	r3, #58	; 0x3a
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	2bc8      	cmp	r3, #200	; 0xc8
 8004138:	d808      	bhi.n	800414c <_ZN9LineTrace4flipEv+0x24c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	330c      	adds	r3, #12
 800413e:	f04f 32ff 	mov.w	r2, #4294967295
 8004142:	2101      	movs	r1, #1
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe f891 	bl	800226c <_ZN3LED2LREaa>
 800414a:	e007      	b.n	800415c <_ZN9LineTrace4flipEv+0x25c>
		else led_.LR(0, -1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	330c      	adds	r3, #12
 8004150:	f04f 32ff 	mov.w	r2, #4294967295
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe f888 	bl	800226c <_ZN3LED2LREaa>

		ignore_check_cnt_++;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004162:	333c      	adds	r3, #60	; 0x3c
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	3301      	adds	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004170:	333c      	adds	r3, #60	; 0x3c
 8004172:	801a      	strh	r2, [r3, #0]
		if(ignore_check_cnt_>= 10000) ignore_check_cnt_= 10000;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800417a:	333c      	adds	r3, #60	; 0x3c
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004182:	4293      	cmp	r3, r2
 8004184:	d906      	bls.n	8004194 <_ZN9LineTrace4flipEv+0x294>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800418c:	333c      	adds	r3, #60	; 0x3c
 800418e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004192:	801a      	strh	r2, [r3, #0]

	}
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	bd90      	pop	{r4, r7, pc}
 800419c:	42c80000 	.word	0x42c80000
 80041a0:	00000000 	.word	0x00000000

080041a4 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041b6:	3354      	adds	r3, #84	; 0x54
 80041b8:	887a      	ldrh	r2, [r7, #2]
 80041ba:	801a      	strh	r2, [r3, #0]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fda4 	bl	8005d32 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 fa0c 	bl	800560c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041fa:	3318      	adds	r3, #24
 80041fc:	2200      	movs	r2, #0
 80041fe:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004206:	331c      	adds	r3, #28
 8004208:	2200      	movs	r2, #0
 800420a:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004212:	331e      	adds	r3, #30
 8004214:	2200      	movs	r2, #0
 8004216:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800421e:	3320      	adds	r3, #32
 8004220:	2200      	movs	r2, #0
 8004222:	801a      	strh	r2, [r3, #0]
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004238:	2300      	movs	r3, #0
 800423a:	737b      	strb	r3, [r7, #13]
	bool goal_judge_flag = false;
 800423c:	2300      	movs	r3, #0
 800423e:	733b      	strb	r3, [r7, #12]
	start();
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ffc1 	bl	80041c8 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8004246:	7b7b      	ldrb	r3, [r7, #13]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 80b0 	bne.w	80043ae <_ZN9LineTrace7runningEv+0x182>
		switch(stage){
 800424e:	89fb      	ldrh	r3, [r7, #14]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <_ZN9LineTrace7runningEv+0x2e>
 8004254:	2b0a      	cmp	r3, #10
 8004256:	d031      	beq.n	80042bc <_ZN9LineTrace7runningEv+0x90>
 8004258:	e0a8      	b.n	80043ac <_ZN9LineTrace7runningEv+0x180>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f9c8 	bl	80055f4 <_ZN10SideSensor16getWhiteLineCntREv>
 8004264:	4603      	mov	r3, r0
 8004266:	2b01      	cmp	r3, #1
 8004268:	bf0c      	ite	eq
 800426a:	2301      	moveq	r3, #1
 800426c:	2300      	movne	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8098 	beq.w	80043a6 <_ZN9LineTrace7runningEv+0x17a>
				loggerStart();
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fe fd5a 	bl	8002d30 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004282:	3354      	adds	r3, #84	; 0x54
 8004284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <_ZN9LineTrace7runningEv+0x66>
					startVelocityPlay();
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff f98f 	bl	80035b0 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd fa13 	bl	80016c2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd f9f1 	bl	8001688 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	330c      	adds	r3, #12
 80042aa:	f04f 32ff 	mov.w	r2, #4294967295
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fd ffdb 	bl	800226c <_ZN3LED2LREaa>
				stage = 10;
 80042b6:	230a      	movs	r3, #10
 80042b8:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80042ba:	e074      	b.n	80043a6 <_ZN9LineTrace7runningEv+0x17a>

		case 10:
			//if(side_sensor_->getWhiteLineCntR() == 2){
			if(side_sensor_->getStatusR() == true && side_sensor_->getStatusL() == false){
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 f98b 	bl	80055dc <_ZN10SideSensor10getStatusREv>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00c      	beq.n	80042e6 <_ZN9LineTrace7runningEv+0xba>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 f977 	bl	80055c4 <_ZN10SideSensor10getStatusLEv>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f083 0301 	eor.w	r3, r3, #1
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <_ZN9LineTrace7runningEv+0xba>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <_ZN9LineTrace7runningEv+0xbc>
 80042e6:	2300      	movs	r3, #0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d012      	beq.n	8004312 <_ZN9LineTrace7runningEv+0xe6>
				goal_judge_flag = true;
 80042ec:	2301      	movs	r3, #1
 80042ee:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd fa01 	bl	80016fc <_ZN7Encoder22clearGoalJudgeDistanceEv>
				ignore_check_cnt_ = 0;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004300:	333c      	adds	r3, #60	; 0x3c
 8004302:	2200      	movs	r2, #0
 8004304:	801a      	strh	r2, [r3, #0]

				led_.fullColor('Y');
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	330c      	adds	r3, #12
 800430a:	2159      	movs	r1, #89	; 0x59
 800430c:	4618      	mov	r0, r3
 800430e:	f7fd fef1 	bl	80020f4 <_ZN3LED9fullColorEc>
			}

			if(goal_judge_flag == true && side_sensor_->getStatusL() == true){
 8004312:	7b3b      	ldrb	r3, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <_ZN9LineTrace7runningEv+0x100>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	4618      	mov	r0, r3
 800431e:	f001 f951 	bl	80055c4 <_ZN10SideSensor10getStatusLEv>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <_ZN9LineTrace7runningEv+0x100>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <_ZN9LineTrace7runningEv+0x102>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <_ZN9LineTrace7runningEv+0x118>
				goal_judge_flag = false;
 8004332:	2300      	movs	r3, #0
 8004334:	733b      	strb	r3, [r7, #12]
				led_.fullColor('B');
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	330c      	adds	r3, #12
 800433a:	2142      	movs	r1, #66	; 0x42
 800433c:	4618      	mov	r0, r3
 800433e:	f7fd fed9 	bl	80020f4 <_ZN3LED9fullColorEc>

				goal_flag = true;

			}

			break;
 8004342:	e032      	b.n	80043aa <_ZN9LineTrace7runningEv+0x17e>
			else if(goal_judge_flag == true && encoder_->getGoalJudgeDistance() >= 100){
 8004344:	7b3b      	ldrb	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00f      	beq.n	800436a <_ZN9LineTrace7runningEv+0x13e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	4618      	mov	r0, r3
 8004350:	f7fd f9c5 	bl	80016de <_ZN7Encoder20getGoalJudgeDistanceEv>
 8004354:	eeb0 7a40 	vmov.f32	s14, s0
 8004358:	eddf 7a18 	vldr	s15, [pc, #96]	; 80043bc <_ZN9LineTrace7runningEv+0x190>
 800435c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004364:	db01      	blt.n	800436a <_ZN9LineTrace7runningEv+0x13e>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <_ZN9LineTrace7runningEv+0x140>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01c      	beq.n	80043aa <_ZN9LineTrace7runningEv+0x17e>
				led_.fullColor('M');
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	330c      	adds	r3, #12
 8004374:	214d      	movs	r1, #77	; 0x4d
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd febc 	bl	80020f4 <_ZN3LED9fullColorEc>
				loggerStop();
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fe fcf2 	bl	8002d66 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff f934 	bl	80035f0 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004388:	2064      	movs	r0, #100	; 0x64
 800438a:	f005 fc4d 	bl	8009c28 <HAL_Delay>
				setTargetVelocity(0);
 800438e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80043c0 <_ZN9LineTrace7runningEv+0x194>
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff fc97 	bl	8003cc6 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004398:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800439c:	f005 fc44 	bl	8009c28 <HAL_Delay>
				goal_flag = true;
 80043a0:	2301      	movs	r3, #1
 80043a2:	737b      	strb	r3, [r7, #13]
			break;
 80043a4:	e001      	b.n	80043aa <_ZN9LineTrace7runningEv+0x17e>
			break;
 80043a6:	bf00      	nop
 80043a8:	e74d      	b.n	8004246 <_ZN9LineTrace7runningEv+0x1a>
			break;
 80043aa:	bf00      	nop
	while(goal_flag == false){
 80043ac:	e74b      	b.n	8004246 <_ZN9LineTrace7runningEv+0x1a>
		}
	}

	stop();
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f808 	bl	80043c4 <_ZN9LineTrace4stopEv>
}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	42c80000 	.word	0x42c80000
 80043c0:	00000000 	.word	0x00000000

080043c4 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 fcbd 	bl	8005d58 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	330c      	adds	r3, #12
 80043e2:	2201      	movs	r2, #1
 80043e4:	f04f 31ff 	mov.w	r1, #4294967295
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fd ff3f 	bl	800226c <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043f4:	3354      	adds	r3, #84	; 0x54
 80043f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11e      	bne.n	800443c <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69d8      	ldr	r0, [r3, #28]
 8004402:	4b28      	ldr	r3, [pc, #160]	; (80044a4 <_ZN9LineTrace4stopEv+0xe0>)
 8004404:	4a28      	ldr	r2, [pc, #160]	; (80044a8 <_ZN9LineTrace4stopEv+0xe4>)
 8004406:	4929      	ldr	r1, [pc, #164]	; (80044ac <_ZN9LineTrace4stopEv+0xe8>)
 8004408:	f000 fbef 	bl	8004bea <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004412:	3358      	adds	r3, #88	; 0x58
 8004414:	2200      	movs	r2, #0
 8004416:	9200      	str	r2, [sp, #0]
 8004418:	2264      	movs	r2, #100	; 0x64
 800441a:	4925      	ldr	r1, [pc, #148]	; (80044b0 <_ZN9LineTrace4stopEv+0xec>)
 800441c:	4823      	ldr	r0, [pc, #140]	; (80044ac <_ZN9LineTrace4stopEv+0xe8>)
 800441e:	f7fd f9ef 	bl	8001800 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004428:	3378      	adds	r3, #120	; 0x78
 800442a:	2200      	movs	r2, #0
 800442c:	9200      	str	r2, [sp, #0]
 800442e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004432:	4920      	ldr	r1, [pc, #128]	; (80044b4 <_ZN9LineTrace4stopEv+0xf0>)
 8004434:	481d      	ldr	r0, [pc, #116]	; (80044ac <_ZN9LineTrace4stopEv+0xe8>)
 8004436:	f7fd f9e3 	bl	8001800 <sd_write_array_float>
 800443a:	e01d      	b.n	8004478 <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69d8      	ldr	r0, [r3, #28]
 8004440:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <_ZN9LineTrace4stopEv+0xf4>)
 8004442:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <_ZN9LineTrace4stopEv+0xf8>)
 8004444:	4919      	ldr	r1, [pc, #100]	; (80044ac <_ZN9LineTrace4stopEv+0xe8>)
 8004446:	f000 fbf4 	bl	8004c32 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004450:	33e8      	adds	r3, #232	; 0xe8
 8004452:	2200      	movs	r2, #0
 8004454:	9200      	str	r2, [sp, #0]
 8004456:	2264      	movs	r2, #100	; 0x64
 8004458:	4919      	ldr	r1, [pc, #100]	; (80044c0 <_ZN9LineTrace4stopEv+0xfc>)
 800445a:	4814      	ldr	r0, [pc, #80]	; (80044ac <_ZN9LineTrace4stopEv+0xe8>)
 800445c:	f7fd f9d0 	bl	8001800 <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 8004466:	3348      	adds	r3, #72	; 0x48
 8004468:	2200      	movs	r2, #0
 800446a:	9200      	str	r2, [sp, #0]
 800446c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004470:	4914      	ldr	r1, [pc, #80]	; (80044c4 <_ZN9LineTrace4stopEv+0x100>)
 8004472:	480e      	ldr	r0, [pc, #56]	; (80044ac <_ZN9LineTrace4stopEv+0xe8>)
 8004474:	f7fd f9c4 	bl	8001800 <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	330c      	adds	r3, #12
 800447c:	2200      	movs	r2, #0
 800447e:	f04f 31ff 	mov.w	r1, #4294967295
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd fef2 	bl	800226c <_ZN3LED2LREaa>

	logger_->resetIdx();
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fc68 	bl	8004d62 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fc0f 	bl	8004cba <_ZN6Logger10resetLogs2Ev>
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	08018b68 	.word	0x08018b68
 80044a8:	08018b74 	.word	0x08018b74
 80044ac:	08018b84 	.word	0x08018b84
 80044b0:	08018b90 	.word	0x08018b90
 80044b4:	08018ba0 	.word	0x08018ba0
 80044b8:	08018bac 	.word	0x08018bac
 80044bc:	08018bb8 	.word	0x08018bb8
 80044c0:	08018bc8 	.word	0x08018bc8
 80044c4:	08018bd8 	.word	0x08018bd8

080044c8 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b08b      	sub	sp, #44	; 0x2c
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fb41 	bl	8004b5c <_ZN6Logger23getDistanceArrayPointerEv>
 80044da:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fb49 	bl	8004b78 <_ZN6Logger20getThetaArrayPointerEv>
 80044e6:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80044e8:	2300      	movs	r3, #0
 80044ea:	837b      	strh	r3, [r7, #26]
 80044ec:	8b7b      	ldrh	r3, [r7, #26]
 80044ee:	f241 726f 	movw	r2, #5999	; 0x176f
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d84b      	bhi.n	800458e <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 80044f6:	8b7b      	ldrh	r3, [r7, #26]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4413      	add	r3, r2
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004502:	8b7b      	ldrh	r3, [r7, #26]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4413      	add	r3, r2
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800450e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004512:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451a:	d101      	bne.n	8004520 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 800451c:	4b4c      	ldr	r3, [pc, #304]	; (8004650 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 800451e:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004520:	ed97 7a02 	vldr	s14, [r7, #8]
 8004524:	edd7 7a07 	vldr	s15, [r7, #28]
 8004528:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800452c:	eeb0 0a66 	vmov.f32	s0, s13
 8004530:	f7fe f9a2 	bl	8002878 <_ZSt3absf>
 8004534:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004538:	edd7 7a05 	vldr	s15, [r7, #20]
 800453c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004654 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004548:	db01      	blt.n	800454e <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800454a:	4b43      	ldr	r3, [pc, #268]	; (8004658 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 800454c:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 800454e:	8b7c      	ldrh	r4, [r7, #26]
 8004550:	ed97 0a05 	vldr	s0, [r7, #20]
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fe fe25 	bl	80031a4 <_ZN9LineTrace15radius2VelocityEf>
 800455a:	eef0 7a40 	vmov.f32	s15, s0
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004564:	3304      	adds	r3, #4
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 800456e:	8b7b      	ldrh	r3, [r7, #26]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	441a      	add	r2, r3
 8004576:	8b7b      	ldrh	r3, [r7, #26]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	3332      	adds	r3, #50	; 0x32
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	3304      	adds	r3, #4
 8004584:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004586:	8b7b      	ldrh	r3, [r7, #26]
 8004588:	3301      	adds	r3, #1
 800458a:	837b      	strh	r3, [r7, #26]
 800458c:	e7ae      	b.n	80044ec <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004594:	3354      	adds	r3, #84	; 0x54
 8004596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d120      	bne.n	80045e0 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045aa:	3310      	adds	r3, #16
 80045ac:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80045b4:	332c      	adds	r3, #44	; 0x2c
 80045b6:	edd3 7a00 	vldr	s15, [r3]
 80045ba:	6939      	ldr	r1, [r7, #16]
 80045bc:	eeb0 0a67 	vmov.f32	s0, s15
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7fe fead 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80045cc:	3328      	adds	r3, #40	; 0x28
 80045ce:	edd3 7a00 	vldr	s15, [r3]
 80045d2:	6939      	ldr	r1, [r7, #16]
 80045d4:	eeb0 0a67 	vmov.f32	s0, s15
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fe ff45 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80045de:	e027      	b.n	8004630 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045e6:	3354      	adds	r3, #84	; 0x54
 80045e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d11f      	bne.n	8004630 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045fc:	3310      	adds	r3, #16
 80045fe:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004606:	3334      	adds	r3, #52	; 0x34
 8004608:	edd3 7a00 	vldr	s15, [r3]
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	eeb0 0a67 	vmov.f32	s0, s15
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fe fe84 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800461e:	3330      	adds	r3, #48	; 0x30
 8004620:	edd3 7a00 	vldr	s15, [r3]
 8004624:	6939      	ldr	r1, [r7, #16]
 8004626:	eeb0 0a67 	vmov.f32	s0, s15
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe ff1c 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004636:	3310      	adds	r3, #16
 8004638:	2200      	movs	r2, #0
 800463a:	9200      	str	r2, [sp, #0]
 800463c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004640:	4906      	ldr	r1, [pc, #24]	; (800465c <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004642:	4807      	ldr	r0, [pc, #28]	; (8004660 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004644:	f7fd f8dc 	bl	8001800 <sd_write_array_float>

}
 8004648:	bf00      	nop
 800464a:	3724      	adds	r7, #36	; 0x24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd90      	pop	{r4, r7, pc}
 8004650:	3727c5ac 	.word	0x3727c5ac
 8004654:	459c4000 	.word	0x459c4000
 8004658:	459c4000 	.word	0x459c4000
 800465c:	08018be8 	.word	0x08018be8
 8004660:	08018b84 	.word	0x08018b84

08004664 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004664:	b590      	push	{r4, r7, lr}
 8004666:	b08b      	sub	sp, #44	; 0x2c
 8004668:	af02      	add	r7, sp, #8
 800466a:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69d8      	ldr	r0, [r3, #28]
 8004670:	4b6b      	ldr	r3, [pc, #428]	; (8004820 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8004672:	4a6c      	ldr	r2, [pc, #432]	; (8004824 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004674:	496c      	ldr	r1, [pc, #432]	; (8004828 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004676:	f000 fb00 	bl	8004c7a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004680:	3358      	adds	r3, #88	; 0x58
 8004682:	2264      	movs	r2, #100	; 0x64
 8004684:	4969      	ldr	r1, [pc, #420]	; (800482c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8004686:	4868      	ldr	r0, [pc, #416]	; (8004828 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004688:	f7fd f920 	bl	80018cc <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004692:	3378      	adds	r3, #120	; 0x78
 8004694:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004698:	4965      	ldr	r1, [pc, #404]	; (8004830 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 800469a:	4863      	ldr	r0, [pc, #396]	; (8004828 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800469c:	f7fd f916 	bl	80018cc <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fa59 	bl	8004b5c <_ZN6Logger23getDistanceArrayPointerEv>
 80046aa:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fa61 	bl	8004b78 <_ZN6Logger20getThetaArrayPointerEv>
 80046b6:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80046b8:	2300      	movs	r3, #0
 80046ba:	837b      	strh	r3, [r7, #26]
 80046bc:	8b7b      	ldrh	r3, [r7, #26]
 80046be:	f241 726f 	movw	r2, #5999	; 0x176f
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d84b      	bhi.n	800475e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80046c6:	8b7b      	ldrh	r3, [r7, #26]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4413      	add	r3, r2
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80046d2:	8b7b      	ldrh	r3, [r7, #26]
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80046de:	edd7 7a07 	vldr	s15, [r7, #28]
 80046e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	d101      	bne.n	80046f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80046ec:	4b51      	ldr	r3, [pc, #324]	; (8004834 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 80046ee:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80046f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80046f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80046f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80046fc:	eeb0 0a66 	vmov.f32	s0, s13
 8004700:	f7fe f8ba 	bl	8002878 <_ZSt3absf>
 8004704:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004708:	edd7 7a05 	vldr	s15, [r7, #20]
 800470c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004838 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004718:	db01      	blt.n	800471e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800471a:	4b48      	ldr	r3, [pc, #288]	; (800483c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 800471c:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 800471e:	8b7c      	ldrh	r4, [r7, #26]
 8004720:	ed97 0a05 	vldr	s0, [r7, #20]
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fe fd3d 	bl	80031a4 <_ZN9LineTrace15radius2VelocityEf>
 800472a:	eef0 7a40 	vmov.f32	s15, s0
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004734:	3304      	adds	r3, #4
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 800473e:	8b7b      	ldrh	r3, [r7, #26]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	441a      	add	r2, r3
 8004746:	8b7b      	ldrh	r3, [r7, #26]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	3332      	adds	r3, #50	; 0x32
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	3304      	adds	r3, #4
 8004754:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004756:	8b7b      	ldrh	r3, [r7, #26]
 8004758:	3301      	adds	r3, #1
 800475a:	837b      	strh	r3, [r7, #26]
 800475c:	e7ae      	b.n	80046bc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004764:	3354      	adds	r3, #84	; 0x54
 8004766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d120      	bne.n	80047b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800477a:	3310      	adds	r3, #16
 800477c:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004784:	332c      	adds	r3, #44	; 0x2c
 8004786:	edd3 7a00 	vldr	s15, [r3]
 800478a:	6939      	ldr	r1, [r7, #16]
 800478c:	eeb0 0a67 	vmov.f32	s0, s15
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fe fdc5 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800479c:	3328      	adds	r3, #40	; 0x28
 800479e:	edd3 7a00 	vldr	s15, [r3]
 80047a2:	6939      	ldr	r1, [r7, #16]
 80047a4:	eeb0 0a67 	vmov.f32	s0, s15
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7fe fe5d 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80047ae:	e027      	b.n	8004800 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047b6:	3354      	adds	r3, #84	; 0x54
 80047b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d11f      	bne.n	8004800 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047cc:	3310      	adds	r3, #16
 80047ce:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047d6:	3334      	adds	r3, #52	; 0x34
 80047d8:	edd3 7a00 	vldr	s15, [r3]
 80047dc:	6939      	ldr	r1, [r7, #16]
 80047de:	eeb0 0a67 	vmov.f32	s0, s15
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fe fd9c 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047ee:	3330      	adds	r3, #48	; 0x30
 80047f0:	edd3 7a00 	vldr	s15, [r3]
 80047f4:	6939      	ldr	r1, [r7, #16]
 80047f6:	eeb0 0a67 	vmov.f32	s0, s15
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fe fe34 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004806:	3310      	adds	r3, #16
 8004808:	2200      	movs	r2, #0
 800480a:	9200      	str	r2, [sp, #0]
 800480c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004810:	490b      	ldr	r1, [pc, #44]	; (8004840 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8004812:	4805      	ldr	r0, [pc, #20]	; (8004828 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004814:	f7fc fff4 	bl	8001800 <sd_write_array_float>

}
 8004818:	bf00      	nop
 800481a:	3724      	adds	r7, #36	; 0x24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd90      	pop	{r4, r7, pc}
 8004820:	08018b68 	.word	0x08018b68
 8004824:	08018b74 	.word	0x08018b74
 8004828:	08018b84 	.word	0x08018b84
 800482c:	08018b90 	.word	0x08018b90
 8004830:	08018ba0 	.word	0x08018ba0
 8004834:	3727c5ac 	.word	0x3727c5ac
 8004838:	459c4000 	.word	0x459c4000
 800483c:	459c4000 	.word	0x459c4000
 8004840:	08018be8 	.word	0x08018be8

08004844 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004852:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004860:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004864:	2200      	movs	r2, #0
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800486e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004872:	2200      	movs	r2, #0
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800487c:	f203 2386 	addw	r3, r3, #646	; 0x286
 8004880:	2200      	movs	r2, #0
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800488a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800488e:	2200      	movs	r2, #0
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004898:	f203 238a 	addw	r3, r3, #650	; 0x28a
 800489c:	2200      	movs	r2, #0
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80048b8:	2300      	movs	r3, #0
 80048ba:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80048bc:	f7fd f892 	bl	80019e4 <sd_mount>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	bf0c      	ite	eq
 80048c6:	2301      	moveq	r3, #1
 80048c8:	2300      	movne	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d016      	beq.n	80048fe <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80048d0:	f7fc fbe6 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80048d4:	2100      	movs	r1, #0
 80048d6:	2000      	movs	r0, #0
 80048d8:	f7fc fbf2 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80048dc:	4815      	ldr	r0, [pc, #84]	; (8004934 <_ZN6Logger10sdCardInitEv+0x84>)
 80048de:	f7fc fc19 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80048e2:	2101      	movs	r1, #1
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7fc fbeb 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80048ea:	4813      	ldr	r0, [pc, #76]	; (8004938 <_ZN6Logger10sdCardInitEv+0x88>)
 80048ec:	f7fc fc12 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80048f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048f4:	f005 f998 	bl	8009c28 <HAL_Delay>

	  ret = true;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
 80048fc:	e015      	b.n	800492a <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80048fe:	f7fc fbcf 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004902:	2100      	movs	r1, #0
 8004904:	2000      	movs	r0, #0
 8004906:	f7fc fbdb 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800490a:	480a      	ldr	r0, [pc, #40]	; (8004934 <_ZN6Logger10sdCardInitEv+0x84>)
 800490c:	f7fc fc02 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004910:	2101      	movs	r1, #1
 8004912:	2000      	movs	r0, #0
 8004914:	f7fc fbd4 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004918:	4808      	ldr	r0, [pc, #32]	; (800493c <_ZN6Logger10sdCardInitEv+0x8c>)
 800491a:	f7fc fbfb 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800491e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004922:	f005 f981 	bl	8009c28 <HAL_Delay>

	  ret = false;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	08018bf8 	.word	0x08018bf8
 8004938:	08018c04 	.word	0x08018c04
 800493c:	08018c0c 	.word	0x08018c0c

08004940 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004952:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d028      	beq.n	80049ae <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004962:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004978:	f203 2382 	addw	r3, r3, #642	; 0x282
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	3301      	adds	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004988:	f203 2382 	addw	r3, r3, #642	; 0x282
 800498c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004994:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800499e:	d306      	bcc.n	80049ae <_ZN6Logger8storeLogEf+0x6e>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049a6:	f203 2382 	addw	r3, r3, #642	; 0x282
 80049aa:	2200      	movs	r2, #0
 80049ac:	801a      	strh	r2, [r3, #0]
	}
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d02a      	beq.n	8004a2c <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049dc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80049f6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	3301      	adds	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a06:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a0a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a12:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004a1c:	d306      	bcc.n	8004a2c <_ZN6Logger9storeLog2Ef+0x72>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a24:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004a28:	2200      	movs	r2, #0
 8004a2a:	801a      	strh	r2, [r3, #0]
	}
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a44:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a4e:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004a5a:	3320      	adds	r3, #32
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a6a:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004a76:	3350      	adds	r3, #80	; 0x50
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a86:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004a96:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004a9a:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004aa2:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	f241 726f 	movw	r2, #5999	; 0x176f
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d906      	bls.n	8004abe <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004ab6:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004aba:	2200      	movs	r2, #0
 8004abc:	801a      	strh	r2, [r3, #0]
	//}
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	ed87 0a02 	vstr	s0, [r7, #8]
 8004ad6:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004ae0:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004aec:	3340      	adds	r3, #64	; 0x40
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004afc:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8004b08:	3330      	adds	r3, #48	; 0x30
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b18:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b28:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b2c:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b34:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d906      	bls.n	8004b50 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004b48:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b6a:	3380      	adds	r3, #128	; 0x80
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004b86:	f503 73a0 	add.w	r3, r3, #320	; 0x140
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b086      	sub	sp, #24
 8004b9a:	af02      	add	r7, sp, #8
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	68b8      	ldr	r0, [r7, #8]
 8004bb2:	f7fc fe25 	bl	8001800 <sd_write_array_float>
}
 8004bb6:	bf00      	nop
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b086      	sub	sp, #24
 8004bc2:	af02      	add	r7, sp, #8
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	68b8      	ldr	r0, [r7, #8]
 8004bde:	f7fc fe0f 	bl	8001800 <sd_write_array_float>
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af02      	add	r7, sp, #8
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004bfe:	3380      	adds	r3, #128	; 0x80
 8004c00:	2200      	movs	r2, #0
 8004c02:	9200      	str	r2, [sp, #0]
 8004c04:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	68b8      	ldr	r0, [r7, #8]
 8004c0c:	f7fc fdf8 	bl	8001800 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c16:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	9200      	str	r2, [sp, #0]
 8004c1e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c22:	6839      	ldr	r1, [r7, #0]
 8004c24:	68b8      	ldr	r0, [r7, #8]
 8004c26:	f7fc fdeb 	bl	8001800 <sd_write_array_float>
}
 8004c2a:	bf00      	nop
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b086      	sub	sp, #24
 8004c36:	af02      	add	r7, sp, #8
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	9200      	str	r2, [sp, #0]
 8004c4e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	68b8      	ldr	r0, [r7, #8]
 8004c56:	f7fc fdd3 	bl	8001800 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c60:	33c0      	adds	r3, #192	; 0xc0
 8004c62:	2200      	movs	r2, #0
 8004c64:	9200      	str	r2, [sp, #0]
 8004c66:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c6a:	6839      	ldr	r1, [r7, #0]
 8004c6c:	68b8      	ldr	r0, [r7, #8]
 8004c6e:	f7fc fdc7 	bl	8001800 <sd_write_array_float>
}
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004c8e:	3380      	adds	r3, #128	; 0x80
 8004c90:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	68b8      	ldr	r0, [r7, #8]
 8004c98:	f7fc fe18 	bl	80018cc <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004ca2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004ca6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004caa:	6839      	ldr	r1, [r7, #0]
 8004cac:	68b8      	ldr	r0, [r7, #8]
 8004cae:	f7fc fe0d 	bl	80018cc <sd_read_array_float>
}
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <_ZN6Logger10resetLogs2Ev>:
	log_index_tim2_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b08b      	sub	sp, #44	; 0x2c
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004cc8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004cd8:	3340      	adds	r3, #64	; 0x40
 8004cda:	61bb      	str	r3, [r7, #24]
 8004cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d009      	beq.n	8004cf8 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	617b      	str	r3, [r7, #20]
		log = 0;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf6:	e7f1      	b.n	8004cdc <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cfe:	33c0      	adds	r3, #192	; 0xc0
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	623b      	str	r3, [r7, #32]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d0c:	3340      	adds	r3, #64	; 0x40
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d009      	beq.n	8004d2c <_ZN6Logger10resetLogs2Ev+0x72>
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	3304      	adds	r3, #4
 8004d28:	623b      	str	r3, [r7, #32]
 8004d2a:	e7f1      	b.n	8004d10 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d32:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004d36:	2200      	movs	r2, #0
 8004d38:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d40:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004d44:	2200      	movs	r2, #0
 8004d46:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d4e:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004d52:	2200      	movs	r2, #0
 8004d54:	801a      	strh	r2, [r3, #0]
}
 8004d56:	bf00      	nop
 8004d58:	372c      	adds	r7, #44	; 0x2c
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d70:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004d74:	2200      	movs	r2, #0
 8004d76:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d7e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004d82:	2200      	movs	r2, #0
 8004d84:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004d8c:	f203 238a 	addw	r3, r3, #650	; 0x28a
 8004d90:	2200      	movs	r2, #0
 8004d92:	801a      	strh	r2, [r3, #0]
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004dae:	f203 2382 	addw	r3, r3, #642	; 0x282
 8004db2:	2200      	movs	r2, #0
 8004db4:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004dbc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004dca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8004dec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004df0:	2200      	movs	r2, #0
 8004df2:	701a      	strb	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	805a      	strh	r2, [r3, #2]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004e2c:	2108      	movs	r1, #8
 8004e2e:	4805      	ldr	r0, [pc, #20]	; (8004e44 <_ZN5Motor4initEv+0x20>)
 8004e30:	f00a f8aa 	bl	800ef88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004e34:	210c      	movs	r1, #12
 8004e36:	4803      	ldr	r0, [pc, #12]	; (8004e44 <_ZN5Motor4initEv+0x20>)
 8004e38:	f00a f8a6 	bl	800ef88 <HAL_TIM_PWM_Start>

}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	2004a5e8 	.word	0x2004a5e8

08004e48 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da0d      	bge.n	8004e76 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e60:	481f      	ldr	r0, [pc, #124]	; (8004ee0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e62:	f006 f977 	bl	800b154 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	425b      	negs	r3, r3
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	81fb      	strh	r3, [r7, #14]
 8004e74:	e00a      	b.n	8004e8c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004e76:	2201      	movs	r2, #1
 8004e78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e7c:	4818      	ldr	r0, [pc, #96]	; (8004ee0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e7e:	f006 f969 	bl	800b154 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	da0d      	bge.n	8004eb2 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004e96:	2201      	movs	r2, #1
 8004e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e9c:	4810      	ldr	r0, [pc, #64]	; (8004ee0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e9e:	f006 f959 	bl	800b154 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	425b      	negs	r3, r3
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	81bb      	strh	r3, [r7, #12]
 8004eb0:	e00a      	b.n	8004ec8 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004eb8:	4809      	ldr	r0, [pc, #36]	; (8004ee0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004eba:	f006 f94b 	bl	800b154 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004ec8:	89fa      	ldrh	r2, [r7, #14]
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004ed0:	89ba      	ldrh	r2, [r7, #12]
 8004ed2:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40020c00 	.word	0x40020c00
 8004ee4:	2004a5e8 	.word	0x2004a5e8

08004ee8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6178      	str	r0, [r7, #20]
 8004ef0:	ed87 0b02 	vstr	d0, [r7, #8]
 8004ef4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	4b30      	ldr	r3, [pc, #192]	; (8004fc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004efe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f02:	f7fb fe21 	bl	8000b48 <__aeabi_dcmpgt>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <_ZN5Motor8setRatioEdd+0x30>
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	4c2b      	ldr	r4, [pc, #172]	; (8004fc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f12:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004f16:	e00e      	b.n	8004f36 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	4b29      	ldr	r3, [pc, #164]	; (8004fc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f22:	f7fb fdf3 	bl	8000b0c <__aeabi_dcmplt>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d004      	beq.n	8004f36 <_ZN5Motor8setRatioEdd+0x4e>
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	4c24      	ldr	r4, [pc, #144]	; (8004fc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f32:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f40:	f7fb fe02 	bl	8000b48 <__aeabi_dcmpgt>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <_ZN5Motor8setRatioEdd+0x6e>
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	4c1c      	ldr	r4, [pc, #112]	; (8004fc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f50:	e9c7 3400 	strd	r3, r4, [r7]
 8004f54:	e00e      	b.n	8004f74 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f60:	f7fb fdd4 	bl	8000b0c <__aeabi_dcmplt>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <_ZN5Motor8setRatioEdd+0x8c>
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	4c15      	ldr	r4, [pc, #84]	; (8004fc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f70:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <_ZN5Motor8setRatioEdd+0xe0>)
 8004f7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f7e:	f7fb fb53 	bl	8000628 <__aeabi_dmul>
 8004f82:	4603      	mov	r3, r0
 8004f84:	460c      	mov	r4, r1
 8004f86:	4618      	mov	r0, r3
 8004f88:	4621      	mov	r1, r4
 8004f8a:	f7fb fdfd 	bl	8000b88 <__aeabi_d2iz>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	b21a      	sxth	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <_ZN5Motor8setRatioEdd+0xe0>)
 8004f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fa0:	f7fb fb42 	bl	8000628 <__aeabi_dmul>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	4618      	mov	r0, r3
 8004faa:	4621      	mov	r1, r4
 8004fac:	f7fb fdec 	bl	8000b88 <__aeabi_d2iz>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	b21a      	sxth	r2, r3
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	805a      	strh	r2, [r3, #2]

}
 8004fb8:	bf00      	nop
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd90      	pop	{r4, r7, pc}
 8004fc0:	3ff00000 	.word	0x3ff00000
 8004fc4:	bff00000 	.word	0xbff00000
 8004fc8:	409c2000 	.word	0x409c2000

08004fcc <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004fcc:	b490      	push	{r4, r7}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	f04f 0400 	mov.w	r4, #0
 8004fe4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	f04f 0400 	mov.w	r4, #0
 8004ff2:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	f04f 0300 	mov.w	r3, #0
 8004ffc:	f04f 0400 	mov.w	r4, #0
 8005000:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	f04f 0400 	mov.w	r4, #0
 800500e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	f04f 0400 	mov.w	r4, #0
 800501c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	609a      	str	r2, [r3, #8]
}
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bc90      	pop	{r4, r7}
 800503c:	4770      	bx	lr
	...

08005040 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fc fe8f 	bl	8001d70 <_ZN3IMU8getOmegaEv>
 8005052:	ee10 3a10 	vmov	r3, s0
 8005056:	4618      	mov	r0, r3
 8005058:	f7fb fa8e 	bl	8000578 <__aeabi_f2d>
 800505c:	4603      	mov	r3, r0
 800505e:	460c      	mov	r4, r1
 8005060:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//float distance = encoder_->getDistance();

	delta_theta_ = current_omega * DELTA_T;
 8005064:	a310      	add	r3, pc, #64	; (adr r3, 80050a8 <_ZN8Odometry12calcPotitionEv+0x68>)
 8005066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800506e:	f7fb fadb 	bl	8000628 <__aeabi_dmul>
 8005072:	4603      	mov	r3, r0
 8005074:	460c      	mov	r4, r1
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
	//y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
	theta_= theta_ + delta_theta_;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005088:	461a      	mov	r2, r3
 800508a:	4623      	mov	r3, r4
 800508c:	f7fb f916 	bl	80002bc <__adddf3>
 8005090:	4603      	mov	r3, r0
 8005092:	460c      	mov	r4, r1
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);

	//monitor_x = x_sens_;
	//monitor_y = y_sens_;
	//monitor_theta = theta_;
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd90      	pop	{r4, r7, pc}
 80050a2:	bf00      	nop
 80050a4:	f3af 8000 	nop.w
 80050a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80050ac:	3f50624d 	.word	0x3f50624d

080050b0 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	calcPotition();
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff ffc1 	bl	8005040 <_ZN8Odometry12calcPotitionEv>
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80050c6:	b490      	push	{r4, r7}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
	return theta_;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80050d4:	ec44 3b17 	vmov	d7, r3, r4
}
 80050d8:	eeb0 0a47 	vmov.f32	s0, s14
 80050dc:	eef0 0a67 	vmov.f32	s1, s15
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc90      	pop	{r4, r7}
 80050e6:	4770      	bx	lr

080050e8 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80050e8:	b490      	push	{r4, r7}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	f04f 0400 	mov.w	r4, #0
 80050fa:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	f04f 0400 	mov.w	r4, #0
 8005108:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	f04f 0400 	mov.w	r4, #0
 8005116:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bc90      	pop	{r4, r7}
 8005122:	4770      	bx	lr

08005124 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005124:	b490      	push	{r4, r7}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	f04f 0400 	mov.w	r4, #0
 800513c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	f04f 0400 	mov.w	r4, #0
 800514a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	f04f 0400 	mov.w	r4, #0
 8005158:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8005162:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005166:	2200      	movs	r2, #0
 8005168:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800516a:	4a29      	ldr	r2, [pc, #164]	; (8005210 <_ZN13PathFollowingC1Ev+0xec>)
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	f04f 0400 	mov.w	r4, #0
 8005174:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005178:	4a25      	ldr	r2, [pc, #148]	; (8005210 <_ZN13PathFollowingC1Ev+0xec>)
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	f04f 0400 	mov.w	r4, #0
 8005182:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005186:	4a22      	ldr	r2, [pc, #136]	; (8005210 <_ZN13PathFollowingC1Ev+0xec>)
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	f04f 0400 	mov.w	r4, #0
 8005190:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005194:	4a1f      	ldr	r2, [pc, #124]	; (8005214 <_ZN13PathFollowingC1Ev+0xf0>)
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	f04f 0400 	mov.w	r4, #0
 800519e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80051a2:	4a1c      	ldr	r2, [pc, #112]	; (8005214 <_ZN13PathFollowingC1Ev+0xf0>)
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	f04f 0400 	mov.w	r4, #0
 80051ac:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80051b0:	4a18      	ldr	r2, [pc, #96]	; (8005214 <_ZN13PathFollowingC1Ev+0xf0>)
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	f04f 0400 	mov.w	r4, #0
 80051ba:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80051be:	4a15      	ldr	r2, [pc, #84]	; (8005214 <_ZN13PathFollowingC1Ev+0xf0>)
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80051cc:	4a11      	ldr	r2, [pc, #68]	; (8005214 <_ZN13PathFollowingC1Ev+0xf0>)
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	f04f 0400 	mov.w	r4, #0
 80051d6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80051da:	4a0e      	ldr	r2, [pc, #56]	; (8005214 <_ZN13PathFollowingC1Ev+0xf0>)
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	f04f 0400 	mov.w	r4, #0
 80051e4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80051e8:	4a0b      	ldr	r2, [pc, #44]	; (8005218 <_ZN13PathFollowingC1Ev+0xf4>)
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	f04f 0400 	mov.w	r4, #0
 80051f2:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80051f6:	4a08      	ldr	r2, [pc, #32]	; (8005218 <_ZN13PathFollowingC1Ev+0xf4>)
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	f04f 0400 	mov.w	r4, #0
 8005200:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bc90      	pop	{r4, r7}
 800520e:	4770      	bx	lr
 8005210:	2004aae8 	.word	0x2004aae8
 8005214:	2004aa78 	.word	0x2004aa78
 8005218:	2004aad8 	.word	0x2004aad8

0800521c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005224:	f001 fd2e 	bl	8006c84 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005228:	f107 0318 	add.w	r3, r7, #24
 800522c:	2201      	movs	r2, #1
 800522e:	4915      	ldr	r1, [pc, #84]	; (8005284 <_ZN13PathFollowing4initEv+0x68>)
 8005230:	4815      	ldr	r0, [pc, #84]	; (8005288 <_ZN13PathFollowing4initEv+0x6c>)
 8005232:	f7fc fb91 	bl	8001958 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005236:	f107 0310 	add.w	r3, r7, #16
 800523a:	2201      	movs	r2, #1
 800523c:	4913      	ldr	r1, [pc, #76]	; (800528c <_ZN13PathFollowing4initEv+0x70>)
 800523e:	4812      	ldr	r0, [pc, #72]	; (8005288 <_ZN13PathFollowing4initEv+0x6c>)
 8005240:	f7fc fb8a 	bl	8001958 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005244:	f107 0308 	add.w	r3, r7, #8
 8005248:	2201      	movs	r2, #1
 800524a:	4911      	ldr	r1, [pc, #68]	; (8005290 <_ZN13PathFollowing4initEv+0x74>)
 800524c:	480e      	ldr	r0, [pc, #56]	; (8005288 <_ZN13PathFollowing4initEv+0x6c>)
 800524e:	f7fc fb83 	bl	8001958 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005252:	ed97 7b06 	vldr	d7, [r7, #24]
 8005256:	ed97 6b04 	vldr	d6, [r7, #16]
 800525a:	ed97 5b02 	vldr	d5, [r7, #8]
 800525e:	eeb0 2a45 	vmov.f32	s4, s10
 8005262:	eef0 2a65 	vmov.f32	s5, s11
 8005266:	eeb0 1a46 	vmov.f32	s2, s12
 800526a:	eef0 1a66 	vmov.f32	s3, s13
 800526e:	eeb0 0a47 	vmov.f32	s0, s14
 8005272:	eef0 0a67 	vmov.f32	s1, s15
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f80c 	bl	8005294 <_ZN13PathFollowing7setGainEddd>
}
 800527c:	bf00      	nop
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	08018c14 	.word	0x08018c14
 8005288:	08018c1c 	.word	0x08018c1c
 800528c:	08018c24 	.word	0x08018c24
 8005290:	08018c2c 	.word	0x08018c2c

08005294 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005294:	b490      	push	{r4, r7}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	61f8      	str	r0, [r7, #28]
 800529c:	ed87 0b04 	vstr	d0, [r7, #16]
 80052a0:	ed87 1b02 	vstr	d1, [r7, #8]
 80052a4:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80052a8:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80052ae:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80052b2:	4a07      	ldr	r2, [pc, #28]	; (80052d0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052b4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80052b8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80052bc:	4a04      	ldr	r2, [pc, #16]	; (80052d0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052be:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052c2:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80052c6:	bf00      	nop
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc90      	pop	{r4, r7}
 80052ce:	4770      	bx	lr
 80052d0:	2004aae8 	.word	0x2004aae8

080052d4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80052dc:	2088      	movs	r0, #136	; 0x88
 80052de:	f7fc fe8a 	bl	8001ff6 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80052e2:	2080      	movs	r0, #128	; 0x80
 80052e4:	f7fc fe87 	bl	8001ff6 <INA260_init>
}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80052f0:	b590      	push	{r4, r7, lr}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80052f8:	2188      	movs	r1, #136	; 0x88
 80052fa:	2002      	movs	r0, #2
 80052fc:	f7fc fe18 	bl	8001f30 <INA260_read>
 8005300:	4603      	mov	r3, r0
 8005302:	4618      	mov	r0, r3
 8005304:	f7fb f926 	bl	8000554 <__aeabi_i2d>
 8005308:	a30c      	add	r3, pc, #48	; (adr r3, 800533c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fb f98b 	bl	8000628 <__aeabi_dmul>
 8005312:	4603      	mov	r3, r0
 8005314:	460c      	mov	r4, r1
 8005316:	4618      	mov	r0, r3
 8005318:	4621      	mov	r1, r4
 800531a:	f7fb fc7d 	bl	8000c18 <__aeabi_d2f>
 800531e:	4602      	mov	r2, r0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4a03      	ldr	r2, [pc, #12]	; (8005338 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800532a:	6013      	str	r3, [r2, #0]
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	bd90      	pop	{r4, r7, pc}
 8005334:	f3af 8000 	nop.w
 8005338:	20000220 	.word	0x20000220
 800533c:	47ae147b 	.word	0x47ae147b
 8005340:	3f547ae1 	.word	0x3f547ae1

08005344 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	ee07 3a90 	vmov	s15, r3

}
 8005354:	eeb0 0a67 	vmov.f32	s0, s15
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005370:	2102      	movs	r1, #2
 8005372:	4822      	ldr	r0, [pc, #136]	; (80053fc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005374:	f005 fed6 	bl	800b124 <HAL_GPIO_ReadPin>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	bf0c      	ite	eq
 800537e:	2301      	moveq	r3, #1
 8005380:	2300      	movne	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005388:	89fb      	ldrh	r3, [r7, #14]
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005390:	2108      	movs	r1, #8
 8005392:	481a      	ldr	r0, [pc, #104]	; (80053fc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005394:	f005 fec6 	bl	800b124 <HAL_GPIO_ReadPin>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <_ZN12RotarySwitch8getValueEv+0x4c>
 80053a8:	89fb      	ldrh	r3, [r7, #14]
 80053aa:	f043 0302 	orr.w	r3, r3, #2
 80053ae:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80053b0:	2110      	movs	r1, #16
 80053b2:	4812      	ldr	r0, [pc, #72]	; (80053fc <_ZN12RotarySwitch8getValueEv+0x98>)
 80053b4:	f005 feb6 	bl	800b124 <HAL_GPIO_ReadPin>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <_ZN12RotarySwitch8getValueEv+0x6c>
 80053c8:	89fb      	ldrh	r3, [r7, #14]
 80053ca:	f043 0304 	orr.w	r3, r3, #4
 80053ce:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80053d0:	2180      	movs	r1, #128	; 0x80
 80053d2:	480a      	ldr	r0, [pc, #40]	; (80053fc <_ZN12RotarySwitch8getValueEv+0x98>)
 80053d4:	f005 fea6 	bl	800b124 <HAL_GPIO_ReadPin>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80053e8:	89fb      	ldrh	r3, [r7, #14]
 80053ea:	f043 0308 	orr.w	r3, r3, #8
 80053ee:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80053f0:	89fb      	ldrh	r3, [r7, #14]

}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40020c00 	.word	0x40020c00

08005400 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	801a      	strh	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	709a      	strb	r2, [r3, #2]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	70da      	strb	r2, [r3, #3]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	809a      	strh	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	80da      	strh	r2, [r3, #6]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	721a      	strb	r2, [r3, #8]
{

}
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <_ZN10SideSensor12updateStatusEv>:

void SideSensor::updateStatus()
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	7a1b      	ldrb	r3, [r3, #8]
 8005448:	f083 0301 	eor.w	r3, r3, #1
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 80a8 	beq.w	80055a4 <_ZN10SideSensor12updateStatusEv+0x168>
		if(status_R_== false){
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	78db      	ldrb	r3, [r3, #3]
 8005458:	f083 0301 	eor.w	r3, r3, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d020      	beq.n	80054a4 <_ZN10SideSensor12updateStatusEv+0x68>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is white
 8005462:	2104      	movs	r1, #4
 8005464:	4851      	ldr	r0, [pc, #324]	; (80055ac <_ZN10SideSensor12updateStatusEv+0x170>)
 8005466:	f005 fe5d 	bl	800b124 <HAL_GPIO_ReadPin>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf0c      	ite	eq
 8005470:	2301      	moveq	r3, #1
 8005472:	2300      	movne	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d006      	beq.n	8005488 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 800547a:	4b4d      	ldr	r3, [pc, #308]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x174>)
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	4b4b      	ldr	r3, [pc, #300]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x174>)
 8005484:	801a      	strh	r2, [r3, #0]
 8005486:	e002      	b.n	800548e <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8005488:	4b49      	ldr	r3, [pc, #292]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x174>)
 800548a:	2200      	movs	r2, #0
 800548c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 2){
 800548e:	4b48      	ldr	r3, [pc, #288]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x174>)
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d92d      	bls.n	80054f2 <_ZN10SideSensor12updateStatusEv+0xb6>
				//status_ |= 0x01;
				status_R_ = true;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	70da      	strb	r2, [r3, #3]
				cnt_r = 0;
 800549c:	4b44      	ldr	r3, [pc, #272]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x174>)
 800549e:	2200      	movs	r2, #0
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	e026      	b.n	80054f2 <_ZN10SideSensor12updateStatusEv+0xb6>
			}

		}
		else if(status_R_== true){
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	78db      	ldrb	r3, [r3, #3]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d022      	beq.n	80054f2 <_ZN10SideSensor12updateStatusEv+0xb6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 80054ac:	2104      	movs	r1, #4
 80054ae:	483f      	ldr	r0, [pc, #252]	; (80055ac <_ZN10SideSensor12updateStatusEv+0x170>)
 80054b0:	f005 fe38 	bl	800b124 <HAL_GPIO_ReadPin>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d006      	beq.n	80054d2 <_ZN10SideSensor12updateStatusEv+0x96>
				cnt_r++;
 80054c4:	4b3a      	ldr	r3, [pc, #232]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x174>)
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	3301      	adds	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	4b38      	ldr	r3, [pc, #224]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x174>)
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	e002      	b.n	80054d8 <_ZN10SideSensor12updateStatusEv+0x9c>
			}
			else{
				cnt_r = 0;
 80054d2:	4b37      	ldr	r3, [pc, #220]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x174>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 2){
 80054d8:	4b35      	ldr	r3, [pc, #212]	; (80055b0 <_ZN10SideSensor12updateStatusEv+0x174>)
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d908      	bls.n	80054f2 <_ZN10SideSensor12updateStatusEv+0xb6>
				//status_ ^= 0x01;
				status_R_ = false;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	70da      	strb	r2, [r3, #3]

				white_line_cnt_r_++;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	88db      	ldrh	r3, [r3, #6]
 80054ea:	3301      	adds	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	80da      	strh	r2, [r3, #6]
				//mon_cnt_r = white_line_cnt_r_;
			}
		}


		if(status_L_== false){
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	789b      	ldrb	r3, [r3, #2]
 80054f6:	f083 0301 	eor.w	r3, r3, #1
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d021      	beq.n	8005544 <_ZN10SideSensor12updateStatusEv+0x108>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is white
 8005500:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005504:	482b      	ldr	r0, [pc, #172]	; (80055b4 <_ZN10SideSensor12updateStatusEv+0x178>)
 8005506:	f005 fe0d 	bl	800b124 <HAL_GPIO_ReadPin>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d006      	beq.n	8005528 <_ZN10SideSensor12updateStatusEv+0xec>
				cnt_l++;
 800551a:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x17c>)
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	3301      	adds	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	4b25      	ldr	r3, [pc, #148]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x17c>)
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	e002      	b.n	800552e <_ZN10SideSensor12updateStatusEv+0xf2>
			}
			else{
				cnt_l = 0;
 8005528:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x17c>)
 800552a:	2200      	movs	r2, #0
 800552c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 2){
 800552e:	4b22      	ldr	r3, [pc, #136]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x17c>)
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d92e      	bls.n	8005594 <_ZN10SideSensor12updateStatusEv+0x158>
				//status_ |= 0x02;
				status_L_ = true;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	709a      	strb	r2, [r3, #2]
				cnt_l = 0;
 800553c:	4b1e      	ldr	r3, [pc, #120]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x17c>)
 800553e:	2200      	movs	r2, #0
 8005540:	801a      	strh	r2, [r3, #0]
 8005542:	e027      	b.n	8005594 <_ZN10SideSensor12updateStatusEv+0x158>
			}

		}
		else if(status_L_== true){
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	789b      	ldrb	r3, [r3, #2]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d023      	beq.n	8005594 <_ZN10SideSensor12updateStatusEv+0x158>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 800554c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005550:	4818      	ldr	r0, [pc, #96]	; (80055b4 <_ZN10SideSensor12updateStatusEv+0x178>)
 8005552:	f005 fde7 	bl	800b124 <HAL_GPIO_ReadPin>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d006      	beq.n	8005574 <_ZN10SideSensor12updateStatusEv+0x138>
				cnt_l++;
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x17c>)
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	3301      	adds	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x17c>)
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	e002      	b.n	800557a <_ZN10SideSensor12updateStatusEv+0x13e>
			}
			else{
				cnt_l = 0;
 8005574:	4b10      	ldr	r3, [pc, #64]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x17c>)
 8005576:	2200      	movs	r2, #0
 8005578:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 2){
 800557a:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <_ZN10SideSensor12updateStatusEv+0x17c>)
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d908      	bls.n	8005594 <_ZN10SideSensor12updateStatusEv+0x158>
				//status_ ^= 0x02;
				status_L_ = false;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	709a      	strb	r2, [r3, #2]

				white_line_cnt_l_++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	889b      	ldrh	r3, [r3, #4]
 800558c:	3301      	adds	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	809a      	strh	r2, [r3, #4]
			}

		}

		//mon_status = status_;
		mon_status_L = status_L_;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	789a      	ldrb	r2, [r3, #2]
 8005598:	4b08      	ldr	r3, [pc, #32]	; (80055bc <_ZN10SideSensor12updateStatusEv+0x180>)
 800559a:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	78da      	ldrb	r2, [r3, #3]
 80055a0:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <_ZN10SideSensor12updateStatusEv+0x184>)
 80055a2:	701a      	strb	r2, [r3, #0]
	}

}
 80055a4:	bf00      	nop
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021000 	.word	0x40021000
 80055b0:	20000228 	.word	0x20000228
 80055b4:	40020c00 	.word	0x40020c00
 80055b8:	20000226 	.word	0x20000226
 80055bc:	20000224 	.word	0x20000224
 80055c0:	20000225 	.word	0x20000225

080055c4 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	return status_L_;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	789b      	ldrb	r3, [r3, #2]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <_ZN10SideSensor10getStatusREv>:

bool SideSensor::getStatusR()
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	return status_R_;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	78db      	ldrb	r3, [r3, #3]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	88db      	ldrh	r3, [r3, #6]
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	80da      	strh	r2, [r3, #6]
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <_ZN10SideSensor13disableIgnoreEv>:
{
	ignore_flag_ = true;
}

void SideSensor::disableIgnore()
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	721a      	strb	r2, [r3, #8]
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	7a1b      	ldrb	r3, [r3, #8]
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3308      	adds	r3, #8
 800566e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f00e fff5 	bl	8014664 <memset>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005680:	811a      	strh	r2, [r3, #8]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005688:	815a      	strh	r2, [r3, #10]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005690:	819a      	strh	r2, [r3, #12]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005698:	81da      	strh	r2, [r3, #14]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056a0:	821a      	strh	r2, [r3, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056a8:	825a      	strh	r2, [r3, #18]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	829a      	strh	r2, [r3, #20]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	82da      	strh	r2, [r3, #22]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	831a      	strh	r2, [r3, #24]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	835a      	strh	r2, [r3, #26]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	839a      	strh	r2, [r3, #28]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	83da      	strh	r2, [r3, #30]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	841a      	strh	r2, [r3, #32]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056da:	845a      	strh	r2, [r3, #34]	; 0x22
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	849a      	strh	r2, [r3, #36]	; 0x24
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056e8:	84da      	strh	r2, [r3, #38]	; 0x26
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2201      	movs	r2, #1
 80056ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	859a      	strh	r2, [r3, #44]	; 0x2c
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005704:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800570c:	861a      	strh	r2, [r3, #48]	; 0x30
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	865a      	strh	r2, [r3, #50]	; 0x32
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	869a      	strh	r2, [r3, #52]	; 0x34
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005720:	86da      	strh	r2, [r3, #54]	; 0x36
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005728:	871a      	strh	r2, [r3, #56]	; 0x38
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005742:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005764:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005776:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005780:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005792:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005804:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800581e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005830:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800584a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005864:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800586e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005880:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800588a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2201      	movs	r2, #1
 8005892:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b0:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058dc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e6:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005902:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2201      	movs	r2, #1
 8005922:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005934:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800593e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005950:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005962:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005984:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800598e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059a8:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ba:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80059ee:	b480      	push	{r7}
 80059f0:	b085      	sub	sp, #20
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f04f 0200 	mov.w	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	605a      	str	r2, [r3, #4]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	609a      	str	r2, [r3, #8]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	60da      	str	r2, [r3, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	611a      	str	r2, [r3, #16]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	615a      	str	r2, [r3, #20]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	619a      	str	r2, [r3, #24]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	61da      	str	r2, [r3, #28]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	621a      	str	r2, [r3, #32]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	625a      	str	r2, [r3, #36]	; 0x24
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	0000      	movs	r0, r0
	...

08005a88 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	f107 020c 	add.w	r2, r7, #12
 8005a98:	f107 0110 	add.w	r1, r7, #16
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fb fd95 	bl	80015cc <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005aa2:	ed97 7a04 	vldr	s14, [r7, #16]
 8005aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005aaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005ab2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ab6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005aba:	6978      	ldr	r0, [r7, #20]
 8005abc:	f7fa fd5c 	bl	8000578 <__aeabi_f2d>
 8005ac0:	a30e      	add	r3, pc, #56	; (adr r3, 8005afc <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	f7fa fdaf 	bl	8000628 <__aeabi_dmul>
 8005aca:	4603      	mov	r3, r0
 8005acc:	460c      	mov	r4, r1
 8005ace:	4618      	mov	r0, r3
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	f7fb f8a1 	bl	8000c18 <__aeabi_d2f>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a05      	ldr	r2, [pc, #20]	; (8005af8 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005ae2:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	ee07 3a90 	vmov	s15, r3
}
 8005aec:	eeb0 0a67 	vmov.f32	s0, s15
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd90      	pop	{r4, r7, pc}
 8005af6:	bf00      	nop
 8005af8:	2000022c 	.word	0x2000022c
 8005afc:	1ab1d998 	.word	0x1ab1d998
 8005b00:	3f7830b5 	.word	0x3f7830b5
 8005b04:	00000000 	.word	0x00000000

08005b08 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	ed93 7a00 	vldr	s14, [r3]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b20:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d007      	beq.n	8005b3e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005b2e:	4b48      	ldr	r3, [pc, #288]	; (8005c50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b44:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005b50:	4b3f      	ldr	r3, [pc, #252]	; (8005c50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fa fd0f 	bl	8000578 <__aeabi_f2d>
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	460d      	mov	r5, r1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	ed93 7a06 	vldr	s14, [r3, #24]
 8005b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6c:	ee17 0a90 	vmov	r0, s15
 8005b70:	f7fa fd02 	bl	8000578 <__aeabi_f2d>
 8005b74:	a334      	add	r3, pc, #208	; (adr r3, 8005c48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	f7fa fd55 	bl	8000628 <__aeabi_dmul>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4620      	mov	r0, r4
 8005b84:	4629      	mov	r1, r5
 8005b86:	f7fa fb99 	bl	80002bc <__adddf3>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	4618      	mov	r0, r3
 8005b90:	4621      	mov	r1, r4
 8005b92:	f7fb f841 	bl	8000c18 <__aeabi_d2f>
 8005b96:	4602      	mov	r2, r0
 8005b98:	4b2d      	ldr	r3, [pc, #180]	; (8005c50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005b9a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005ba2:	4b2c      	ldr	r3, [pc, #176]	; (8005c54 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005ba4:	edd3 7a00 	vldr	s15, [r3]
 8005ba8:	edd7 6a05 	vldr	s13, [r7, #20]
 8005bac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb4:	ee17 0a90 	vmov	r0, s15
 8005bb8:	f7fa fcde 	bl	8000578 <__aeabi_f2d>
 8005bbc:	a322      	add	r3, pc, #136	; (adr r3, 8005c48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f7fa fe5b 	bl	800087c <__aeabi_ddiv>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	460c      	mov	r4, r1
 8005bca:	4618      	mov	r0, r3
 8005bcc:	4621      	mov	r1, r4
 8005bce:	f7fb f823 	bl	8000c18 <__aeabi_d2f>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005bd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005be2:	4b1b      	ldr	r3, [pc, #108]	; (8005c50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005be4:	edd3 7a00 	vldr	s15, [r3]
 8005be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bec:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005bfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c02:	ee17 0a90 	vmov	r0, s15
 8005c06:	f7fa fcb7 	bl	8000578 <__aeabi_f2d>
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	460e      	mov	r6, r1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c14:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c1c:	ee17 0a90 	vmov	r0, s15
 8005c20:	f7fa fcaa 	bl	8000578 <__aeabi_f2d>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	ec43 2b11 	vmov	d1, r2, r3
 8005c2c:	ec46 5b10 	vmov	d0, r5, r6
 8005c30:	4620      	mov	r0, r4
 8005c32:	f7ff f959 	bl	8004ee8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005c36:	4a07      	ldr	r2, [pc, #28]	; (8005c54 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	6013      	str	r3, [r2, #0]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c44:	f3af 8000 	nop.w
 8005c48:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c4c:	3f50624d 	.word	0x3f50624d
 8005c50:	20000234 	.word	0x20000234
 8005c54:	20000230 	.word	0x20000230

08005c58 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c64:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	605a      	str	r2, [r3, #4]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c8c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005cb4:	edc7 0a01 	vstr	s1, [r7, #4]
 8005cb8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	615a      	str	r2, [r3, #20]
}
 8005cce:	bf00      	nop
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ce6:	edc7 0a01 	vstr	s1, [r7, #4]
 8005cea:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	621a      	str	r2, [r3, #32]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff feb7 	bl	8005a88 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff feef 	bl	8005b08 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005d88 <_ZN12VelocityCtrl4stopEv+0x30>
 8005d70:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005d88 <_ZN12VelocityCtrl4stopEv+0x30>
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff f8b7 	bl	8004ee8 <_ZN5Motor8setRatioEdd>

}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	f3af 8000 	nop.w
	...

08005d90 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1e      	ldr	r2, [pc, #120]	; (8005e18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10e      	bne.n	8005dc0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005da2:	f001 fe0f 	bl	80079c4 <cppFlip100ns>

		tim7_timer++;
 8005da6:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	4a1b      	ldr	r2, [pc, #108]	; (8005e1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005dae:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005db0:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1a      	ldr	r2, [pc, #104]	; (8005e20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d902      	bls.n	8005dc0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005dba:	4b18      	ldr	r3, [pc, #96]	; (8005e1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a17      	ldr	r2, [pc, #92]	; (8005e24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d10e      	bne.n	8005de8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005dca:	f001 fdcb 	bl	8007964 <cppFlip1ms>

		tim6_timer++;
 8005dce:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005dd6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005dd8:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a10      	ldr	r2, [pc, #64]	; (8005e20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d902      	bls.n	8005de8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005de2:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a0f      	ldr	r2, [pc, #60]	; (8005e2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d10e      	bne.n	8005e10 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005df2:	f001 fdf1 	bl	80079d8 <cppFlip10ms>

		tim13_timer++;
 8005df6:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	4a0c      	ldr	r2, [pc, #48]	; (8005e30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005dfe:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a06      	ldr	r2, [pc, #24]	; (8005e20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d902      	bls.n	8005e10 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005e0a:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
	}

}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40001400 	.word	0x40001400
 8005e1c:	2004a79c 	.word	0x2004a79c
 8005e20:	0001869f 	.word	0x0001869f
 8005e24:	40001000 	.word	0x40001000
 8005e28:	2004a758 	.word	0x2004a758
 8005e2c:	40001c00 	.word	0x40001c00
 8005e30:	2004a7a0 	.word	0x2004a7a0

08005e34 <init>:

void init()
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e3e:	4808      	ldr	r0, [pc, #32]	; (8005e60 <init+0x2c>)
 8005e40:	f005 f988 	bl	800b154 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005e44:	4807      	ldr	r0, [pc, #28]	; (8005e64 <init+0x30>)
 8005e46:	f009 f850 	bl	800eeea <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005e4a:	4807      	ldr	r0, [pc, #28]	; (8005e68 <init+0x34>)
 8005e4c:	f009 f84d 	bl	800eeea <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005e50:	4806      	ldr	r0, [pc, #24]	; (8005e6c <init+0x38>)
 8005e52:	f009 f84a 	bl	800eeea <HAL_TIM_Base_Start_IT>

	cppInit();
 8005e56:	f001 fce3 	bl	8007820 <cppInit>

	//path_following_initialize();

}
 8005e5a:	bf00      	nop
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40021000 	.word	0x40021000
 8005e64:	2004a884 	.word	0x2004a884
 8005e68:	2004aa28 	.word	0x2004aa28
 8005e6c:	2004a7a4 	.word	0x2004a7a4

08005e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e74:	f003 fe66 	bl	8009b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e78:	f000 f82a 	bl	8005ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e7c:	f000 fdbc 	bl	80069f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005e80:	f000 fd8a 	bl	8006998 <MX_DMA_Init>
  MX_I2C2_Init();
 8005e84:	f000 f9e8 	bl	8006258 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005e88:	f000 fa14 	bl	80062b4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005e8c:	f000 fa32 	bl	80062f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005e90:	f000 fa66 	bl	8006360 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005e94:	f000 fb70 	bl	8006578 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005e98:	f000 fc3c 	bl	8006714 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005e9c:	f000 fd52 	bl	8006944 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005ea0:	f00a fff6 	bl	8010e90 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005ea4:	f000 fbcc 	bl	8006640 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005ea8:	f000 f9a8 	bl	80061fc <MX_I2C1_Init>
  MX_TIM3_Init();
 8005eac:	f000 fb00 	bl	80064b0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005eb0:	f000 fc88 	bl	80067c4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005eb4:	f000 fcd4 	bl	8006860 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005eb8:	f000 f898 	bl	8005fec <MX_ADC2_Init>
  MX_TIM7_Init();
 8005ebc:	f000 fbf6 	bl	80066ac <MX_TIM7_Init>
  MX_TIM13_Init();
 8005ec0:	f000 fd1c 	bl	80068fc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005ec4:	f7ff ffb6 	bl	8005e34 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005ec8:	f001 fd8e 	bl	80079e8 <cppLoop>
 8005ecc:	e7fc      	b.n	8005ec8 <main+0x58>
	...

08005ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b0a4      	sub	sp, #144	; 0x90
 8005ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ed6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005eda:	2234      	movs	r2, #52	; 0x34
 8005edc:	2100      	movs	r1, #0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f00e fbc0 	bl	8014664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ee4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	609a      	str	r2, [r3, #8]
 8005ef0:	60da      	str	r2, [r3, #12]
 8005ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ef4:	f107 030c 	add.w	r3, r7, #12
 8005ef8:	223c      	movs	r2, #60	; 0x3c
 8005efa:	2100      	movs	r1, #0
 8005efc:	4618      	mov	r0, r3
 8005efe:	f00e fbb1 	bl	8014664 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f02:	2300      	movs	r3, #0
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	4b37      	ldr	r3, [pc, #220]	; (8005fe4 <SystemClock_Config+0x114>)
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	4a36      	ldr	r2, [pc, #216]	; (8005fe4 <SystemClock_Config+0x114>)
 8005f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f10:	6413      	str	r3, [r2, #64]	; 0x40
 8005f12:	4b34      	ldr	r3, [pc, #208]	; (8005fe4 <SystemClock_Config+0x114>)
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	4b31      	ldr	r3, [pc, #196]	; (8005fe8 <SystemClock_Config+0x118>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a30      	ldr	r2, [pc, #192]	; (8005fe8 <SystemClock_Config+0x118>)
 8005f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	4b2e      	ldr	r3, [pc, #184]	; (8005fe8 <SystemClock_Config+0x118>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f36:	607b      	str	r3, [r7, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f42:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f44:	2302      	movs	r3, #2
 8005f46:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005f4c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005f4e:	2308      	movs	r3, #8
 8005f50:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005f52:	23b4      	movs	r3, #180	; 0xb4
 8005f54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005f5e:	2308      	movs	r3, #8
 8005f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005f64:	2302      	movs	r3, #2
 8005f66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f006 fd12 	bl	800c998 <HAL_RCC_OscConfig>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005f7a:	f000 fe7f 	bl	8006c7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005f7e:	f006 f88d 	bl	800c09c <HAL_PWREx_EnableOverDrive>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005f88:	f000 fe78 	bl	8006c7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f8c:	230f      	movs	r3, #15
 8005f8e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f90:	2302      	movs	r3, #2
 8005f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f94:	2300      	movs	r3, #0
 8005f96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005f98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005f9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fa2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005fa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fa8:	2105      	movs	r1, #5
 8005faa:	4618      	mov	r0, r3
 8005fac:	f006 f8c6 	bl	800c13c <HAL_RCC_ClockConfig>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005fb6:	f000 fe61 	bl	8006c7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005fba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005fbe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fc8:	f107 030c 	add.w	r3, r7, #12
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f006 faa5 	bl	800c51c <HAL_RCCEx_PeriphCLKConfig>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005fd8:	f000 fe50 	bl	8006c7c <Error_Handler>
  }
}
 8005fdc:	bf00      	nop
 8005fde:	3790      	adds	r7, #144	; 0x90
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	40007000 	.word	0x40007000

08005fec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	609a      	str	r2, [r3, #8]
 8005ffc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005ffe:	4b7c      	ldr	r3, [pc, #496]	; (80061f0 <MX_ADC2_Init+0x204>)
 8006000:	4a7c      	ldr	r2, [pc, #496]	; (80061f4 <MX_ADC2_Init+0x208>)
 8006002:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006004:	4b7a      	ldr	r3, [pc, #488]	; (80061f0 <MX_ADC2_Init+0x204>)
 8006006:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800600a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800600c:	4b78      	ldr	r3, [pc, #480]	; (80061f0 <MX_ADC2_Init+0x204>)
 800600e:	2200      	movs	r2, #0
 8006010:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006012:	4b77      	ldr	r3, [pc, #476]	; (80061f0 <MX_ADC2_Init+0x204>)
 8006014:	2201      	movs	r2, #1
 8006016:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006018:	4b75      	ldr	r3, [pc, #468]	; (80061f0 <MX_ADC2_Init+0x204>)
 800601a:	2201      	movs	r2, #1
 800601c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800601e:	4b74      	ldr	r3, [pc, #464]	; (80061f0 <MX_ADC2_Init+0x204>)
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006026:	4b72      	ldr	r3, [pc, #456]	; (80061f0 <MX_ADC2_Init+0x204>)
 8006028:	2200      	movs	r2, #0
 800602a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800602c:	4b70      	ldr	r3, [pc, #448]	; (80061f0 <MX_ADC2_Init+0x204>)
 800602e:	4a72      	ldr	r2, [pc, #456]	; (80061f8 <MX_ADC2_Init+0x20c>)
 8006030:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006032:	4b6f      	ldr	r3, [pc, #444]	; (80061f0 <MX_ADC2_Init+0x204>)
 8006034:	2200      	movs	r2, #0
 8006036:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006038:	4b6d      	ldr	r3, [pc, #436]	; (80061f0 <MX_ADC2_Init+0x204>)
 800603a:	220e      	movs	r2, #14
 800603c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800603e:	4b6c      	ldr	r3, [pc, #432]	; (80061f0 <MX_ADC2_Init+0x204>)
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006046:	4b6a      	ldr	r3, [pc, #424]	; (80061f0 <MX_ADC2_Init+0x204>)
 8006048:	2201      	movs	r2, #1
 800604a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800604c:	4868      	ldr	r0, [pc, #416]	; (80061f0 <MX_ADC2_Init+0x204>)
 800604e:	f003 fe0d 	bl	8009c6c <HAL_ADC_Init>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006058:	f000 fe10 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800605c:	230a      	movs	r3, #10
 800605e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006060:	2301      	movs	r3, #1
 8006062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006064:	2306      	movs	r3, #6
 8006066:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006068:	463b      	mov	r3, r7
 800606a:	4619      	mov	r1, r3
 800606c:	4860      	ldr	r0, [pc, #384]	; (80061f0 <MX_ADC2_Init+0x204>)
 800606e:	f003 ff51 	bl	8009f14 <HAL_ADC_ConfigChannel>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006078:	f000 fe00 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800607c:	230b      	movs	r3, #11
 800607e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006080:	2302      	movs	r3, #2
 8006082:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006084:	463b      	mov	r3, r7
 8006086:	4619      	mov	r1, r3
 8006088:	4859      	ldr	r0, [pc, #356]	; (80061f0 <MX_ADC2_Init+0x204>)
 800608a:	f003 ff43 	bl	8009f14 <HAL_ADC_ConfigChannel>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006094:	f000 fdf2 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006098:	230c      	movs	r3, #12
 800609a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800609c:	2303      	movs	r3, #3
 800609e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060a0:	463b      	mov	r3, r7
 80060a2:	4619      	mov	r1, r3
 80060a4:	4852      	ldr	r0, [pc, #328]	; (80061f0 <MX_ADC2_Init+0x204>)
 80060a6:	f003 ff35 	bl	8009f14 <HAL_ADC_ConfigChannel>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80060b0:	f000 fde4 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80060b4:	230d      	movs	r3, #13
 80060b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80060b8:	2304      	movs	r3, #4
 80060ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060bc:	463b      	mov	r3, r7
 80060be:	4619      	mov	r1, r3
 80060c0:	484b      	ldr	r0, [pc, #300]	; (80061f0 <MX_ADC2_Init+0x204>)
 80060c2:	f003 ff27 	bl	8009f14 <HAL_ADC_ConfigChannel>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80060cc:	f000 fdd6 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80060d4:	2305      	movs	r3, #5
 80060d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060d8:	463b      	mov	r3, r7
 80060da:	4619      	mov	r1, r3
 80060dc:	4844      	ldr	r0, [pc, #272]	; (80061f0 <MX_ADC2_Init+0x204>)
 80060de:	f003 ff19 	bl	8009f14 <HAL_ADC_ConfigChannel>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80060e8:	f000 fdc8 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80060ec:	2301      	movs	r3, #1
 80060ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80060f0:	2306      	movs	r3, #6
 80060f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060f4:	463b      	mov	r3, r7
 80060f6:	4619      	mov	r1, r3
 80060f8:	483d      	ldr	r0, [pc, #244]	; (80061f0 <MX_ADC2_Init+0x204>)
 80060fa:	f003 ff0b 	bl	8009f14 <HAL_ADC_ConfigChannel>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006104:	f000 fdba 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006108:	2302      	movs	r3, #2
 800610a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800610c:	2307      	movs	r3, #7
 800610e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006110:	463b      	mov	r3, r7
 8006112:	4619      	mov	r1, r3
 8006114:	4836      	ldr	r0, [pc, #216]	; (80061f0 <MX_ADC2_Init+0x204>)
 8006116:	f003 fefd 	bl	8009f14 <HAL_ADC_ConfigChannel>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006120:	f000 fdac 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006124:	2303      	movs	r3, #3
 8006126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006128:	2308      	movs	r3, #8
 800612a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800612c:	463b      	mov	r3, r7
 800612e:	4619      	mov	r1, r3
 8006130:	482f      	ldr	r0, [pc, #188]	; (80061f0 <MX_ADC2_Init+0x204>)
 8006132:	f003 feef 	bl	8009f14 <HAL_ADC_ConfigChannel>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800613c:	f000 fd9e 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006140:	2304      	movs	r3, #4
 8006142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006144:	2309      	movs	r3, #9
 8006146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006148:	463b      	mov	r3, r7
 800614a:	4619      	mov	r1, r3
 800614c:	4828      	ldr	r0, [pc, #160]	; (80061f0 <MX_ADC2_Init+0x204>)
 800614e:	f003 fee1 	bl	8009f14 <HAL_ADC_ConfigChannel>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006158:	f000 fd90 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800615c:	2305      	movs	r3, #5
 800615e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006160:	230a      	movs	r3, #10
 8006162:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006164:	463b      	mov	r3, r7
 8006166:	4619      	mov	r1, r3
 8006168:	4821      	ldr	r0, [pc, #132]	; (80061f0 <MX_ADC2_Init+0x204>)
 800616a:	f003 fed3 	bl	8009f14 <HAL_ADC_ConfigChannel>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8006174:	f000 fd82 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006178:	2306      	movs	r3, #6
 800617a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800617c:	230b      	movs	r3, #11
 800617e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006180:	463b      	mov	r3, r7
 8006182:	4619      	mov	r1, r3
 8006184:	481a      	ldr	r0, [pc, #104]	; (80061f0 <MX_ADC2_Init+0x204>)
 8006186:	f003 fec5 	bl	8009f14 <HAL_ADC_ConfigChannel>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006190:	f000 fd74 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006194:	2307      	movs	r3, #7
 8006196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006198:	230c      	movs	r3, #12
 800619a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800619c:	463b      	mov	r3, r7
 800619e:	4619      	mov	r1, r3
 80061a0:	4813      	ldr	r0, [pc, #76]	; (80061f0 <MX_ADC2_Init+0x204>)
 80061a2:	f003 feb7 	bl	8009f14 <HAL_ADC_ConfigChannel>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80061ac:	f000 fd66 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80061b0:	2308      	movs	r3, #8
 80061b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80061b4:	230d      	movs	r3, #13
 80061b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061b8:	463b      	mov	r3, r7
 80061ba:	4619      	mov	r1, r3
 80061bc:	480c      	ldr	r0, [pc, #48]	; (80061f0 <MX_ADC2_Init+0x204>)
 80061be:	f003 fea9 	bl	8009f14 <HAL_ADC_ConfigChannel>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80061c8:	f000 fd58 	bl	8006c7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80061cc:	2309      	movs	r3, #9
 80061ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80061d0:	230e      	movs	r3, #14
 80061d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061d4:	463b      	mov	r3, r7
 80061d6:	4619      	mov	r1, r3
 80061d8:	4805      	ldr	r0, [pc, #20]	; (80061f0 <MX_ADC2_Init+0x204>)
 80061da:	f003 fe9b 	bl	8009f14 <HAL_ADC_ConfigChannel>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80061e4:	f000 fd4a 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80061e8:	bf00      	nop
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	2004a628 	.word	0x2004a628
 80061f4:	40012100 	.word	0x40012100
 80061f8:	0f000001 	.word	0x0f000001

080061fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006200:	4b12      	ldr	r3, [pc, #72]	; (800624c <MX_I2C1_Init+0x50>)
 8006202:	4a13      	ldr	r2, [pc, #76]	; (8006250 <MX_I2C1_Init+0x54>)
 8006204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006206:	4b11      	ldr	r3, [pc, #68]	; (800624c <MX_I2C1_Init+0x50>)
 8006208:	4a12      	ldr	r2, [pc, #72]	; (8006254 <MX_I2C1_Init+0x58>)
 800620a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800620c:	4b0f      	ldr	r3, [pc, #60]	; (800624c <MX_I2C1_Init+0x50>)
 800620e:	2200      	movs	r2, #0
 8006210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006212:	4b0e      	ldr	r3, [pc, #56]	; (800624c <MX_I2C1_Init+0x50>)
 8006214:	2200      	movs	r2, #0
 8006216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006218:	4b0c      	ldr	r3, [pc, #48]	; (800624c <MX_I2C1_Init+0x50>)
 800621a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800621e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006220:	4b0a      	ldr	r3, [pc, #40]	; (800624c <MX_I2C1_Init+0x50>)
 8006222:	2200      	movs	r2, #0
 8006224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <MX_I2C1_Init+0x50>)
 8006228:	2200      	movs	r2, #0
 800622a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800622c:	4b07      	ldr	r3, [pc, #28]	; (800624c <MX_I2C1_Init+0x50>)
 800622e:	2200      	movs	r2, #0
 8006230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <MX_I2C1_Init+0x50>)
 8006234:	2280      	movs	r2, #128	; 0x80
 8006236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006238:	4804      	ldr	r0, [pc, #16]	; (800624c <MX_I2C1_Init+0x50>)
 800623a:	f004 ffa5 	bl	800b188 <HAL_I2C_Init>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006244:	f000 fd1a 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006248:	bf00      	nop
 800624a:	bd80      	pop	{r7, pc}
 800624c:	2004a670 	.word	0x2004a670
 8006250:	40005400 	.word	0x40005400
 8006254:	000186a0 	.word	0x000186a0

08006258 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800625c:	4b12      	ldr	r3, [pc, #72]	; (80062a8 <MX_I2C2_Init+0x50>)
 800625e:	4a13      	ldr	r2, [pc, #76]	; (80062ac <MX_I2C2_Init+0x54>)
 8006260:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006262:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <MX_I2C2_Init+0x50>)
 8006264:	4a12      	ldr	r2, [pc, #72]	; (80062b0 <MX_I2C2_Init+0x58>)
 8006266:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006268:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <MX_I2C2_Init+0x50>)
 800626a:	2200      	movs	r2, #0
 800626c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800626e:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <MX_I2C2_Init+0x50>)
 8006270:	2200      	movs	r2, #0
 8006272:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006274:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <MX_I2C2_Init+0x50>)
 8006276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800627a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <MX_I2C2_Init+0x50>)
 800627e:	2200      	movs	r2, #0
 8006280:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006282:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <MX_I2C2_Init+0x50>)
 8006284:	2200      	movs	r2, #0
 8006286:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006288:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <MX_I2C2_Init+0x50>)
 800628a:	2200      	movs	r2, #0
 800628c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <MX_I2C2_Init+0x50>)
 8006290:	2280      	movs	r2, #128	; 0x80
 8006292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006294:	4804      	ldr	r0, [pc, #16]	; (80062a8 <MX_I2C2_Init+0x50>)
 8006296:	f004 ff77 	bl	800b188 <HAL_I2C_Init>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80062a0:	f000 fcec 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80062a4:	bf00      	nop
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	2004a704 	.word	0x2004a704
 80062ac:	40005800 	.word	0x40005800
 80062b0:	000186a0 	.word	0x000186a0

080062b4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80062b8:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <MX_SDIO_SD_Init+0x38>)
 80062ba:	4a0d      	ldr	r2, [pc, #52]	; (80062f0 <MX_SDIO_SD_Init+0x3c>)
 80062bc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80062be:	4b0b      	ldr	r3, [pc, #44]	; (80062ec <MX_SDIO_SD_Init+0x38>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80062c4:	4b09      	ldr	r3, [pc, #36]	; (80062ec <MX_SDIO_SD_Init+0x38>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80062ca:	4b08      	ldr	r3, [pc, #32]	; (80062ec <MX_SDIO_SD_Init+0x38>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80062d0:	4b06      	ldr	r3, [pc, #24]	; (80062ec <MX_SDIO_SD_Init+0x38>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <MX_SDIO_SD_Init+0x38>)
 80062d8:	2200      	movs	r2, #0
 80062da:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80062dc:	4b03      	ldr	r3, [pc, #12]	; (80062ec <MX_SDIO_SD_Init+0x38>)
 80062de:	2204      	movs	r2, #4
 80062e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80062e2:	bf00      	nop
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	2004a904 	.word	0x2004a904
 80062f0:	40012c00 	.word	0x40012c00

080062f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80062f8:	4b17      	ldr	r3, [pc, #92]	; (8006358 <MX_SPI2_Init+0x64>)
 80062fa:	4a18      	ldr	r2, [pc, #96]	; (800635c <MX_SPI2_Init+0x68>)
 80062fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80062fe:	4b16      	ldr	r3, [pc, #88]	; (8006358 <MX_SPI2_Init+0x64>)
 8006300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006304:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006306:	4b14      	ldr	r3, [pc, #80]	; (8006358 <MX_SPI2_Init+0x64>)
 8006308:	2200      	movs	r2, #0
 800630a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800630c:	4b12      	ldr	r3, [pc, #72]	; (8006358 <MX_SPI2_Init+0x64>)
 800630e:	2200      	movs	r2, #0
 8006310:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <MX_SPI2_Init+0x64>)
 8006314:	2202      	movs	r2, #2
 8006316:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006318:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <MX_SPI2_Init+0x64>)
 800631a:	2201      	movs	r2, #1
 800631c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800631e:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <MX_SPI2_Init+0x64>)
 8006320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006324:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006326:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <MX_SPI2_Init+0x64>)
 8006328:	2220      	movs	r2, #32
 800632a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800632c:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <MX_SPI2_Init+0x64>)
 800632e:	2200      	movs	r2, #0
 8006330:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006332:	4b09      	ldr	r3, [pc, #36]	; (8006358 <MX_SPI2_Init+0x64>)
 8006334:	2200      	movs	r2, #0
 8006336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006338:	4b07      	ldr	r3, [pc, #28]	; (8006358 <MX_SPI2_Init+0x64>)
 800633a:	2200      	movs	r2, #0
 800633c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800633e:	4b06      	ldr	r3, [pc, #24]	; (8006358 <MX_SPI2_Init+0x64>)
 8006340:	220a      	movs	r2, #10
 8006342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006344:	4804      	ldr	r0, [pc, #16]	; (8006358 <MX_SPI2_Init+0x64>)
 8006346:	f008 f851 	bl	800e3ec <HAL_SPI_Init>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006350:	f000 fc94 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006354:	bf00      	nop
 8006356:	bd80      	pop	{r7, pc}
 8006358:	2004a550 	.word	0x2004a550
 800635c:	40003800 	.word	0x40003800

08006360 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b09a      	sub	sp, #104	; 0x68
 8006364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006366:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800636a:	2224      	movs	r2, #36	; 0x24
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f00e f978 	bl	8014664 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006374:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800637e:	f107 0320 	add.w	r3, r7, #32
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	605a      	str	r2, [r3, #4]
 8006388:	609a      	str	r2, [r3, #8]
 800638a:	60da      	str	r2, [r3, #12]
 800638c:	611a      	str	r2, [r3, #16]
 800638e:	615a      	str	r2, [r3, #20]
 8006390:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006392:	463b      	mov	r3, r7
 8006394:	2220      	movs	r2, #32
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f00e f963 	bl	8014664 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800639e:	4b42      	ldr	r3, [pc, #264]	; (80064a8 <MX_TIM1_Init+0x148>)
 80063a0:	4a42      	ldr	r2, [pc, #264]	; (80064ac <MX_TIM1_Init+0x14c>)
 80063a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80063a4:	4b40      	ldr	r3, [pc, #256]	; (80064a8 <MX_TIM1_Init+0x148>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063aa:	4b3f      	ldr	r3, [pc, #252]	; (80064a8 <MX_TIM1_Init+0x148>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80063b0:	4b3d      	ldr	r3, [pc, #244]	; (80064a8 <MX_TIM1_Init+0x148>)
 80063b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063b8:	4b3b      	ldr	r3, [pc, #236]	; (80064a8 <MX_TIM1_Init+0x148>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80063be:	4b3a      	ldr	r3, [pc, #232]	; (80064a8 <MX_TIM1_Init+0x148>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063c4:	4b38      	ldr	r3, [pc, #224]	; (80064a8 <MX_TIM1_Init+0x148>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80063ca:	4837      	ldr	r0, [pc, #220]	; (80064a8 <MX_TIM1_Init+0x148>)
 80063cc:	f008 fdb1 	bl	800ef32 <HAL_TIM_PWM_Init>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80063d6:	f000 fc51 	bl	8006c7c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80063da:	2303      	movs	r3, #3
 80063dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80063de:	2300      	movs	r3, #0
 80063e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80063e2:	2301      	movs	r3, #1
 80063e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80063e6:	2300      	movs	r3, #0
 80063e8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80063ee:	2300      	movs	r3, #0
 80063f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80063f2:	2301      	movs	r3, #1
 80063f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80063f6:	2300      	movs	r3, #0
 80063f8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80063fa:	2300      	movs	r3, #0
 80063fc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80063fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006402:	4619      	mov	r1, r3
 8006404:	4828      	ldr	r0, [pc, #160]	; (80064a8 <MX_TIM1_Init+0x148>)
 8006406:	f008 fdfd 	bl	800f004 <HAL_TIM_Encoder_Init>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006410:	f000 fc34 	bl	8006c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006414:	2300      	movs	r3, #0
 8006416:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006418:	2300      	movs	r3, #0
 800641a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800641c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006420:	4619      	mov	r1, r3
 8006422:	4821      	ldr	r0, [pc, #132]	; (80064a8 <MX_TIM1_Init+0x148>)
 8006424:	f009 fb24 	bl	800fa70 <HAL_TIMEx_MasterConfigSynchronization>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800642e:	f000 fc25 	bl	8006c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006432:	2360      	movs	r3, #96	; 0x60
 8006434:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800643a:	2300      	movs	r3, #0
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800643e:	2300      	movs	r3, #0
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006442:	2300      	movs	r3, #0
 8006444:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006446:	2300      	movs	r3, #0
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800644a:	2300      	movs	r3, #0
 800644c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800644e:	f107 0320 	add.w	r3, r7, #32
 8006452:	2208      	movs	r2, #8
 8006454:	4619      	mov	r1, r3
 8006456:	4814      	ldr	r0, [pc, #80]	; (80064a8 <MX_TIM1_Init+0x148>)
 8006458:	f008 ffa6 	bl	800f3a8 <HAL_TIM_PWM_ConfigChannel>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006462:	f000 fc0b 	bl	8006c7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006466:	2300      	movs	r3, #0
 8006468:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800646a:	2300      	movs	r3, #0
 800646c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800646e:	2300      	movs	r3, #0
 8006470:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800647a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800647e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006484:	463b      	mov	r3, r7
 8006486:	4619      	mov	r1, r3
 8006488:	4807      	ldr	r0, [pc, #28]	; (80064a8 <MX_TIM1_Init+0x148>)
 800648a:	f009 fb6d 	bl	800fb68 <HAL_TIMEx_ConfigBreakDeadTime>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006494:	f000 fbf2 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006498:	4803      	ldr	r0, [pc, #12]	; (80064a8 <MX_TIM1_Init+0x148>)
 800649a:	f000 ffdf 	bl	800745c <HAL_TIM_MspPostInit>

}
 800649e:	bf00      	nop
 80064a0:	3768      	adds	r7, #104	; 0x68
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	2004a8c4 	.word	0x2004a8c4
 80064ac:	40010000 	.word	0x40010000

080064b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08a      	sub	sp, #40	; 0x28
 80064b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064b6:	f107 0320 	add.w	r3, r7, #32
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064c0:	1d3b      	adds	r3, r7, #4
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	605a      	str	r2, [r3, #4]
 80064c8:	609a      	str	r2, [r3, #8]
 80064ca:	60da      	str	r2, [r3, #12]
 80064cc:	611a      	str	r2, [r3, #16]
 80064ce:	615a      	str	r2, [r3, #20]
 80064d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80064d2:	4b27      	ldr	r3, [pc, #156]	; (8006570 <MX_TIM3_Init+0xc0>)
 80064d4:	4a27      	ldr	r2, [pc, #156]	; (8006574 <MX_TIM3_Init+0xc4>)
 80064d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80064d8:	4b25      	ldr	r3, [pc, #148]	; (8006570 <MX_TIM3_Init+0xc0>)
 80064da:	2201      	movs	r2, #1
 80064dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064de:	4b24      	ldr	r3, [pc, #144]	; (8006570 <MX_TIM3_Init+0xc0>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80064e4:	4b22      	ldr	r3, [pc, #136]	; (8006570 <MX_TIM3_Init+0xc0>)
 80064e6:	f241 1293 	movw	r2, #4499	; 0x1193
 80064ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064ec:	4b20      	ldr	r3, [pc, #128]	; (8006570 <MX_TIM3_Init+0xc0>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064f2:	4b1f      	ldr	r3, [pc, #124]	; (8006570 <MX_TIM3_Init+0xc0>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80064f8:	481d      	ldr	r0, [pc, #116]	; (8006570 <MX_TIM3_Init+0xc0>)
 80064fa:	f008 fd1a 	bl	800ef32 <HAL_TIM_PWM_Init>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006504:	f000 fbba 	bl	8006c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006508:	2300      	movs	r3, #0
 800650a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800650c:	2300      	movs	r3, #0
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006510:	f107 0320 	add.w	r3, r7, #32
 8006514:	4619      	mov	r1, r3
 8006516:	4816      	ldr	r0, [pc, #88]	; (8006570 <MX_TIM3_Init+0xc0>)
 8006518:	f009 faaa 	bl	800fa70 <HAL_TIMEx_MasterConfigSynchronization>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006522:	f000 fbab 	bl	8006c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006526:	2360      	movs	r3, #96	; 0x60
 8006528:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006536:	1d3b      	adds	r3, r7, #4
 8006538:	2200      	movs	r2, #0
 800653a:	4619      	mov	r1, r3
 800653c:	480c      	ldr	r0, [pc, #48]	; (8006570 <MX_TIM3_Init+0xc0>)
 800653e:	f008 ff33 	bl	800f3a8 <HAL_TIM_PWM_ConfigChannel>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006548:	f000 fb98 	bl	8006c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	2204      	movs	r2, #4
 8006550:	4619      	mov	r1, r3
 8006552:	4807      	ldr	r0, [pc, #28]	; (8006570 <MX_TIM3_Init+0xc0>)
 8006554:	f008 ff28 	bl	800f3a8 <HAL_TIM_PWM_ConfigChannel>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800655e:	f000 fb8d 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006562:	4803      	ldr	r0, [pc, #12]	; (8006570 <MX_TIM3_Init+0xc0>)
 8006564:	f000 ff7a 	bl	800745c <HAL_TIM_MspPostInit>

}
 8006568:	bf00      	nop
 800656a:	3728      	adds	r7, #40	; 0x28
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	2004a75c 	.word	0x2004a75c
 8006574:	40000400 	.word	0x40000400

08006578 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08a      	sub	sp, #40	; 0x28
 800657c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800657e:	f107 0320 	add.w	r3, r7, #32
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006588:	1d3b      	adds	r3, r7, #4
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	605a      	str	r2, [r3, #4]
 8006590:	609a      	str	r2, [r3, #8]
 8006592:	60da      	str	r2, [r3, #12]
 8006594:	611a      	str	r2, [r3, #16]
 8006596:	615a      	str	r2, [r3, #20]
 8006598:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800659a:	4b27      	ldr	r3, [pc, #156]	; (8006638 <MX_TIM4_Init+0xc0>)
 800659c:	4a27      	ldr	r2, [pc, #156]	; (800663c <MX_TIM4_Init+0xc4>)
 800659e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80065a0:	4b25      	ldr	r3, [pc, #148]	; (8006638 <MX_TIM4_Init+0xc0>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065a6:	4b24      	ldr	r3, [pc, #144]	; (8006638 <MX_TIM4_Init+0xc0>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80065ac:	4b22      	ldr	r3, [pc, #136]	; (8006638 <MX_TIM4_Init+0xc0>)
 80065ae:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80065b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065b4:	4b20      	ldr	r3, [pc, #128]	; (8006638 <MX_TIM4_Init+0xc0>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065ba:	4b1f      	ldr	r3, [pc, #124]	; (8006638 <MX_TIM4_Init+0xc0>)
 80065bc:	2200      	movs	r2, #0
 80065be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80065c0:	481d      	ldr	r0, [pc, #116]	; (8006638 <MX_TIM4_Init+0xc0>)
 80065c2:	f008 fcb6 	bl	800ef32 <HAL_TIM_PWM_Init>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80065cc:	f000 fb56 	bl	8006c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065d0:	2300      	movs	r3, #0
 80065d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065d4:	2300      	movs	r3, #0
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80065d8:	f107 0320 	add.w	r3, r7, #32
 80065dc:	4619      	mov	r1, r3
 80065de:	4816      	ldr	r0, [pc, #88]	; (8006638 <MX_TIM4_Init+0xc0>)
 80065e0:	f009 fa46 	bl	800fa70 <HAL_TIMEx_MasterConfigSynchronization>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80065ea:	f000 fb47 	bl	8006c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065ee:	2360      	movs	r3, #96	; 0x60
 80065f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80065fe:	1d3b      	adds	r3, r7, #4
 8006600:	2208      	movs	r2, #8
 8006602:	4619      	mov	r1, r3
 8006604:	480c      	ldr	r0, [pc, #48]	; (8006638 <MX_TIM4_Init+0xc0>)
 8006606:	f008 fecf 	bl	800f3a8 <HAL_TIM_PWM_ConfigChannel>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006610:	f000 fb34 	bl	8006c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006614:	1d3b      	adds	r3, r7, #4
 8006616:	220c      	movs	r2, #12
 8006618:	4619      	mov	r1, r3
 800661a:	4807      	ldr	r0, [pc, #28]	; (8006638 <MX_TIM4_Init+0xc0>)
 800661c:	f008 fec4 	bl	800f3a8 <HAL_TIM_PWM_ConfigChannel>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006626:	f000 fb29 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800662a:	4803      	ldr	r0, [pc, #12]	; (8006638 <MX_TIM4_Init+0xc0>)
 800662c:	f000 ff16 	bl	800745c <HAL_TIM_MspPostInit>

}
 8006630:	bf00      	nop
 8006632:	3728      	adds	r7, #40	; 0x28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	2004a5e8 	.word	0x2004a5e8
 800663c:	40000800 	.word	0x40000800

08006640 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006646:	463b      	mov	r3, r7
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800664e:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <MX_TIM6_Init+0x64>)
 8006650:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <MX_TIM6_Init+0x68>)
 8006652:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006654:	4b13      	ldr	r3, [pc, #76]	; (80066a4 <MX_TIM6_Init+0x64>)
 8006656:	2259      	movs	r2, #89	; 0x59
 8006658:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800665a:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <MX_TIM6_Init+0x64>)
 800665c:	2200      	movs	r2, #0
 800665e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006660:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <MX_TIM6_Init+0x64>)
 8006662:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006666:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006668:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <MX_TIM6_Init+0x64>)
 800666a:	2280      	movs	r2, #128	; 0x80
 800666c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800666e:	480d      	ldr	r0, [pc, #52]	; (80066a4 <MX_TIM6_Init+0x64>)
 8006670:	f008 fc10 	bl	800ee94 <HAL_TIM_Base_Init>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800667a:	f000 faff 	bl	8006c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800667e:	2300      	movs	r3, #0
 8006680:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006682:	2300      	movs	r3, #0
 8006684:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006686:	463b      	mov	r3, r7
 8006688:	4619      	mov	r1, r3
 800668a:	4806      	ldr	r0, [pc, #24]	; (80066a4 <MX_TIM6_Init+0x64>)
 800668c:	f009 f9f0 	bl	800fa70 <HAL_TIMEx_MasterConfigSynchronization>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006696:	f000 faf1 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800669a:	bf00      	nop
 800669c:	3708      	adds	r7, #8
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	2004a884 	.word	0x2004a884
 80066a8:	40001000 	.word	0x40001000

080066ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066b2:	463b      	mov	r3, r7
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80066ba:	4b14      	ldr	r3, [pc, #80]	; (800670c <MX_TIM7_Init+0x60>)
 80066bc:	4a14      	ldr	r2, [pc, #80]	; (8006710 <MX_TIM7_Init+0x64>)
 80066be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80066c0:	4b12      	ldr	r3, [pc, #72]	; (800670c <MX_TIM7_Init+0x60>)
 80066c2:	22b3      	movs	r2, #179	; 0xb3
 80066c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066c6:	4b11      	ldr	r3, [pc, #68]	; (800670c <MX_TIM7_Init+0x60>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80066cc:	4b0f      	ldr	r3, [pc, #60]	; (800670c <MX_TIM7_Init+0x60>)
 80066ce:	2231      	movs	r2, #49	; 0x31
 80066d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066d2:	4b0e      	ldr	r3, [pc, #56]	; (800670c <MX_TIM7_Init+0x60>)
 80066d4:	2280      	movs	r2, #128	; 0x80
 80066d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80066d8:	480c      	ldr	r0, [pc, #48]	; (800670c <MX_TIM7_Init+0x60>)
 80066da:	f008 fbdb 	bl	800ee94 <HAL_TIM_Base_Init>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80066e4:	f000 faca 	bl	8006c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066e8:	2300      	movs	r3, #0
 80066ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066ec:	2300      	movs	r3, #0
 80066ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80066f0:	463b      	mov	r3, r7
 80066f2:	4619      	mov	r1, r3
 80066f4:	4805      	ldr	r0, [pc, #20]	; (800670c <MX_TIM7_Init+0x60>)
 80066f6:	f009 f9bb 	bl	800fa70 <HAL_TIMEx_MasterConfigSynchronization>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006700:	f000 fabc 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006704:	bf00      	nop
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	2004aa28 	.word	0x2004aa28
 8006710:	40001400 	.word	0x40001400

08006714 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b08c      	sub	sp, #48	; 0x30
 8006718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800671a:	f107 030c 	add.w	r3, r7, #12
 800671e:	2224      	movs	r2, #36	; 0x24
 8006720:	2100      	movs	r1, #0
 8006722:	4618      	mov	r0, r3
 8006724:	f00d ff9e 	bl	8014664 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006728:	1d3b      	adds	r3, r7, #4
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006730:	4b22      	ldr	r3, [pc, #136]	; (80067bc <MX_TIM8_Init+0xa8>)
 8006732:	4a23      	ldr	r2, [pc, #140]	; (80067c0 <MX_TIM8_Init+0xac>)
 8006734:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006736:	4b21      	ldr	r3, [pc, #132]	; (80067bc <MX_TIM8_Init+0xa8>)
 8006738:	2200      	movs	r2, #0
 800673a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800673c:	4b1f      	ldr	r3, [pc, #124]	; (80067bc <MX_TIM8_Init+0xa8>)
 800673e:	2210      	movs	r2, #16
 8006740:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006742:	4b1e      	ldr	r3, [pc, #120]	; (80067bc <MX_TIM8_Init+0xa8>)
 8006744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006748:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800674a:	4b1c      	ldr	r3, [pc, #112]	; (80067bc <MX_TIM8_Init+0xa8>)
 800674c:	2200      	movs	r2, #0
 800674e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006750:	4b1a      	ldr	r3, [pc, #104]	; (80067bc <MX_TIM8_Init+0xa8>)
 8006752:	2200      	movs	r2, #0
 8006754:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006756:	4b19      	ldr	r3, [pc, #100]	; (80067bc <MX_TIM8_Init+0xa8>)
 8006758:	2200      	movs	r2, #0
 800675a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800675c:	2303      	movs	r3, #3
 800675e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006760:	2300      	movs	r3, #0
 8006762:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006764:	2301      	movs	r3, #1
 8006766:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006768:	2300      	movs	r3, #0
 800676a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006770:	2300      	movs	r3, #0
 8006772:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006774:	2301      	movs	r3, #1
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006778:	2300      	movs	r3, #0
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006780:	f107 030c 	add.w	r3, r7, #12
 8006784:	4619      	mov	r1, r3
 8006786:	480d      	ldr	r0, [pc, #52]	; (80067bc <MX_TIM8_Init+0xa8>)
 8006788:	f008 fc3c 	bl	800f004 <HAL_TIM_Encoder_Init>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006792:	f000 fa73 	bl	8006c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006796:	2300      	movs	r3, #0
 8006798:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800679a:	2300      	movs	r3, #0
 800679c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800679e:	1d3b      	adds	r3, r7, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4806      	ldr	r0, [pc, #24]	; (80067bc <MX_TIM8_Init+0xa8>)
 80067a4:	f009 f964 	bl	800fa70 <HAL_TIMEx_MasterConfigSynchronization>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80067ae:	f000 fa65 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80067b2:	bf00      	nop
 80067b4:	3730      	adds	r7, #48	; 0x30
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	2004a5a8 	.word	0x2004a5a8
 80067c0:	40010400 	.word	0x40010400

080067c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80067ca:	1d3b      	adds	r3, r7, #4
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	605a      	str	r2, [r3, #4]
 80067d2:	609a      	str	r2, [r3, #8]
 80067d4:	60da      	str	r2, [r3, #12]
 80067d6:	611a      	str	r2, [r3, #16]
 80067d8:	615a      	str	r2, [r3, #20]
 80067da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80067dc:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <MX_TIM10_Init+0x94>)
 80067de:	4a1f      	ldr	r2, [pc, #124]	; (800685c <MX_TIM10_Init+0x98>)
 80067e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80067e2:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <MX_TIM10_Init+0x94>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067e8:	4b1b      	ldr	r3, [pc, #108]	; (8006858 <MX_TIM10_Init+0x94>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80067ee:	4b1a      	ldr	r3, [pc, #104]	; (8006858 <MX_TIM10_Init+0x94>)
 80067f0:	f242 3227 	movw	r2, #8999	; 0x2327
 80067f4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067f6:	4b18      	ldr	r3, [pc, #96]	; (8006858 <MX_TIM10_Init+0x94>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067fc:	4b16      	ldr	r3, [pc, #88]	; (8006858 <MX_TIM10_Init+0x94>)
 80067fe:	2200      	movs	r2, #0
 8006800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006802:	4815      	ldr	r0, [pc, #84]	; (8006858 <MX_TIM10_Init+0x94>)
 8006804:	f008 fb46 	bl	800ee94 <HAL_TIM_Base_Init>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800680e:	f000 fa35 	bl	8006c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006812:	4811      	ldr	r0, [pc, #68]	; (8006858 <MX_TIM10_Init+0x94>)
 8006814:	f008 fb8d 	bl	800ef32 <HAL_TIM_PWM_Init>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800681e:	f000 fa2d 	bl	8006c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006822:	2360      	movs	r3, #96	; 0x60
 8006824:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006832:	1d3b      	adds	r3, r7, #4
 8006834:	2200      	movs	r2, #0
 8006836:	4619      	mov	r1, r3
 8006838:	4807      	ldr	r0, [pc, #28]	; (8006858 <MX_TIM10_Init+0x94>)
 800683a:	f008 fdb5 	bl	800f3a8 <HAL_TIM_PWM_ConfigChannel>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006844:	f000 fa1a 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006848:	4803      	ldr	r0, [pc, #12]	; (8006858 <MX_TIM10_Init+0x94>)
 800684a:	f000 fe07 	bl	800745c <HAL_TIM_MspPostInit>

}
 800684e:	bf00      	nop
 8006850:	3720      	adds	r7, #32
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	2004a6c4 	.word	0x2004a6c4
 800685c:	40014400 	.word	0x40014400

08006860 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006866:	1d3b      	adds	r3, r7, #4
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	605a      	str	r2, [r3, #4]
 800686e:	609a      	str	r2, [r3, #8]
 8006870:	60da      	str	r2, [r3, #12]
 8006872:	611a      	str	r2, [r3, #16]
 8006874:	615a      	str	r2, [r3, #20]
 8006876:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006878:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <MX_TIM11_Init+0x94>)
 800687a:	4a1f      	ldr	r2, [pc, #124]	; (80068f8 <MX_TIM11_Init+0x98>)
 800687c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 800687e:	4b1d      	ldr	r3, [pc, #116]	; (80068f4 <MX_TIM11_Init+0x94>)
 8006880:	2201      	movs	r2, #1
 8006882:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006884:	4b1b      	ldr	r3, [pc, #108]	; (80068f4 <MX_TIM11_Init+0x94>)
 8006886:	2200      	movs	r2, #0
 8006888:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 800688a:	4b1a      	ldr	r3, [pc, #104]	; (80068f4 <MX_TIM11_Init+0x94>)
 800688c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006890:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006892:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <MX_TIM11_Init+0x94>)
 8006894:	2200      	movs	r2, #0
 8006896:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006898:	4b16      	ldr	r3, [pc, #88]	; (80068f4 <MX_TIM11_Init+0x94>)
 800689a:	2200      	movs	r2, #0
 800689c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800689e:	4815      	ldr	r0, [pc, #84]	; (80068f4 <MX_TIM11_Init+0x94>)
 80068a0:	f008 faf8 	bl	800ee94 <HAL_TIM_Base_Init>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80068aa:	f000 f9e7 	bl	8006c7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80068ae:	4811      	ldr	r0, [pc, #68]	; (80068f4 <MX_TIM11_Init+0x94>)
 80068b0:	f008 fb3f 	bl	800ef32 <HAL_TIM_PWM_Init>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80068ba:	f000 f9df 	bl	8006c7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80068be:	2360      	movs	r3, #96	; 0x60
 80068c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80068ce:	1d3b      	adds	r3, r7, #4
 80068d0:	2200      	movs	r2, #0
 80068d2:	4619      	mov	r1, r3
 80068d4:	4807      	ldr	r0, [pc, #28]	; (80068f4 <MX_TIM11_Init+0x94>)
 80068d6:	f008 fd67 	bl	800f3a8 <HAL_TIM_PWM_ConfigChannel>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80068e0:	f000 f9cc 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80068e4:	4803      	ldr	r0, [pc, #12]	; (80068f4 <MX_TIM11_Init+0x94>)
 80068e6:	f000 fdb9 	bl	800745c <HAL_TIM_MspPostInit>

}
 80068ea:	bf00      	nop
 80068ec:	3720      	adds	r7, #32
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	2004a7e4 	.word	0x2004a7e4
 80068f8:	40014800 	.word	0x40014800

080068fc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006900:	4b0e      	ldr	r3, [pc, #56]	; (800693c <MX_TIM13_Init+0x40>)
 8006902:	4a0f      	ldr	r2, [pc, #60]	; (8006940 <MX_TIM13_Init+0x44>)
 8006904:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006906:	4b0d      	ldr	r3, [pc, #52]	; (800693c <MX_TIM13_Init+0x40>)
 8006908:	2259      	movs	r2, #89	; 0x59
 800690a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800690c:	4b0b      	ldr	r3, [pc, #44]	; (800693c <MX_TIM13_Init+0x40>)
 800690e:	2200      	movs	r2, #0
 8006910:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006912:	4b0a      	ldr	r3, [pc, #40]	; (800693c <MX_TIM13_Init+0x40>)
 8006914:	f242 720f 	movw	r2, #9999	; 0x270f
 8006918:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800691a:	4b08      	ldr	r3, [pc, #32]	; (800693c <MX_TIM13_Init+0x40>)
 800691c:	2200      	movs	r2, #0
 800691e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006920:	4b06      	ldr	r3, [pc, #24]	; (800693c <MX_TIM13_Init+0x40>)
 8006922:	2280      	movs	r2, #128	; 0x80
 8006924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006926:	4805      	ldr	r0, [pc, #20]	; (800693c <MX_TIM13_Init+0x40>)
 8006928:	f008 fab4 	bl	800ee94 <HAL_TIM_Base_Init>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006932:	f000 f9a3 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006936:	bf00      	nop
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	2004a7a4 	.word	0x2004a7a4
 8006940:	40001c00 	.word	0x40001c00

08006944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006948:	4b11      	ldr	r3, [pc, #68]	; (8006990 <MX_USART2_UART_Init+0x4c>)
 800694a:	4a12      	ldr	r2, [pc, #72]	; (8006994 <MX_USART2_UART_Init+0x50>)
 800694c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800694e:	4b10      	ldr	r3, [pc, #64]	; (8006990 <MX_USART2_UART_Init+0x4c>)
 8006950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006956:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <MX_USART2_UART_Init+0x4c>)
 8006958:	2200      	movs	r2, #0
 800695a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800695c:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <MX_USART2_UART_Init+0x4c>)
 800695e:	2200      	movs	r2, #0
 8006960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <MX_USART2_UART_Init+0x4c>)
 8006964:	2200      	movs	r2, #0
 8006966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006968:	4b09      	ldr	r3, [pc, #36]	; (8006990 <MX_USART2_UART_Init+0x4c>)
 800696a:	220c      	movs	r2, #12
 800696c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800696e:	4b08      	ldr	r3, [pc, #32]	; (8006990 <MX_USART2_UART_Init+0x4c>)
 8006970:	2200      	movs	r2, #0
 8006972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006974:	4b06      	ldr	r3, [pc, #24]	; (8006990 <MX_USART2_UART_Init+0x4c>)
 8006976:	2200      	movs	r2, #0
 8006978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800697a:	4805      	ldr	r0, [pc, #20]	; (8006990 <MX_USART2_UART_Init+0x4c>)
 800697c:	f009 f95a 	bl	800fc34 <HAL_UART_Init>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006986:	f000 f979 	bl	8006c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800698a:	bf00      	nop
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	2004a988 	.word	0x2004a988
 8006994:	40004400 	.word	0x40004400

08006998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800699e:	2300      	movs	r3, #0
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <MX_DMA_Init+0x5c>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	4a13      	ldr	r2, [pc, #76]	; (80069f4 <MX_DMA_Init+0x5c>)
 80069a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069ac:	6313      	str	r3, [r2, #48]	; 0x30
 80069ae:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <MX_DMA_Init+0x5c>)
 80069b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069b6:	607b      	str	r3, [r7, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80069ba:	2200      	movs	r2, #0
 80069bc:	2100      	movs	r1, #0
 80069be:	203a      	movs	r0, #58	; 0x3a
 80069c0:	f003 fe33 	bl	800a62a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80069c4:	203a      	movs	r0, #58	; 0x3a
 80069c6:	f003 fe4c 	bl	800a662 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80069ca:	2200      	movs	r2, #0
 80069cc:	2100      	movs	r1, #0
 80069ce:	203b      	movs	r0, #59	; 0x3b
 80069d0:	f003 fe2b 	bl	800a62a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80069d4:	203b      	movs	r0, #59	; 0x3b
 80069d6:	f003 fe44 	bl	800a662 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80069da:	2200      	movs	r2, #0
 80069dc:	2100      	movs	r1, #0
 80069de:	2045      	movs	r0, #69	; 0x45
 80069e0:	f003 fe23 	bl	800a62a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80069e4:	2045      	movs	r0, #69	; 0x45
 80069e6:	f003 fe3c 	bl	800a662 <HAL_NVIC_EnableIRQ>

}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	40023800 	.word	0x40023800

080069f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08c      	sub	sp, #48	; 0x30
 80069fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069fe:	f107 031c 	add.w	r3, r7, #28
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	605a      	str	r2, [r3, #4]
 8006a08:	609a      	str	r2, [r3, #8]
 8006a0a:	60da      	str	r2, [r3, #12]
 8006a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	4b94      	ldr	r3, [pc, #592]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	4a93      	ldr	r2, [pc, #588]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a18:	f043 0310 	orr.w	r3, r3, #16
 8006a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a1e:	4b91      	ldr	r3, [pc, #580]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	4b8d      	ldr	r3, [pc, #564]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	4a8c      	ldr	r2, [pc, #560]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a38:	6313      	str	r3, [r2, #48]	; 0x30
 8006a3a:	4b8a      	ldr	r3, [pc, #552]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	4b86      	ldr	r3, [pc, #536]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	4a85      	ldr	r2, [pc, #532]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a50:	f043 0304 	orr.w	r3, r3, #4
 8006a54:	6313      	str	r3, [r2, #48]	; 0x30
 8006a56:	4b83      	ldr	r3, [pc, #524]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	f003 0304 	and.w	r3, r3, #4
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	4b7f      	ldr	r3, [pc, #508]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6a:	4a7e      	ldr	r2, [pc, #504]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	6313      	str	r3, [r2, #48]	; 0x30
 8006a72:	4b7c      	ldr	r3, [pc, #496]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	4b78      	ldr	r3, [pc, #480]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	4a77      	ldr	r2, [pc, #476]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a88:	f043 0302 	orr.w	r3, r3, #2
 8006a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a8e:	4b75      	ldr	r3, [pc, #468]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	60bb      	str	r3, [r7, #8]
 8006a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	607b      	str	r3, [r7, #4]
 8006a9e:	4b71      	ldr	r3, [pc, #452]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	4a70      	ldr	r2, [pc, #448]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006aa4:	f043 0308 	orr.w	r3, r3, #8
 8006aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8006aaa:	4b6e      	ldr	r3, [pc, #440]	; (8006c64 <MX_GPIO_Init+0x26c>)
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	607b      	str	r3, [r7, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006abc:	486a      	ldr	r0, [pc, #424]	; (8006c68 <MX_GPIO_Init+0x270>)
 8006abe:	f004 fb49 	bl	800b154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ac8:	4868      	ldr	r0, [pc, #416]	; (8006c6c <MX_GPIO_Init+0x274>)
 8006aca:	f004 fb43 	bl	800b154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ad4:	4866      	ldr	r0, [pc, #408]	; (8006c70 <MX_GPIO_Init+0x278>)
 8006ad6:	f004 fb3d 	bl	800b154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006ada:	2200      	movs	r2, #0
 8006adc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006ae0:	4864      	ldr	r0, [pc, #400]	; (8006c74 <MX_GPIO_Init+0x27c>)
 8006ae2:	f004 fb37 	bl	800b154 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ae6:	2304      	movs	r3, #4
 8006ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006aea:	2300      	movs	r3, #0
 8006aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006af2:	f107 031c 	add.w	r3, r7, #28
 8006af6:	4619      	mov	r1, r3
 8006af8:	485b      	ldr	r0, [pc, #364]	; (8006c68 <MX_GPIO_Init+0x270>)
 8006afa:	f004 f969 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006afe:	230f      	movs	r3, #15
 8006b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b02:	2303      	movs	r3, #3
 8006b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b0a:	f107 031c 	add.w	r3, r7, #28
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4859      	ldr	r0, [pc, #356]	; (8006c78 <MX_GPIO_Init+0x280>)
 8006b12:	f004 f95d 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006b16:	23e1      	movs	r3, #225	; 0xe1
 8006b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b22:	f107 031c 	add.w	r3, r7, #28
 8006b26:	4619      	mov	r1, r3
 8006b28:	4852      	ldr	r0, [pc, #328]	; (8006c74 <MX_GPIO_Init+0x27c>)
 8006b2a:	f004 f951 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b32:	2303      	movs	r3, #3
 8006b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b3a:	f107 031c 	add.w	r3, r7, #28
 8006b3e:	4619      	mov	r1, r3
 8006b40:	484a      	ldr	r0, [pc, #296]	; (8006c6c <MX_GPIO_Init+0x274>)
 8006b42:	f004 f945 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b46:	2304      	movs	r3, #4
 8006b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b52:	f107 031c 	add.w	r3, r7, #28
 8006b56:	4619      	mov	r1, r3
 8006b58:	4844      	ldr	r0, [pc, #272]	; (8006c6c <MX_GPIO_Init+0x274>)
 8006b5a:	f004 f939 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006b5e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b64:	2300      	movs	r3, #0
 8006b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b6c:	f107 031c 	add.w	r3, r7, #28
 8006b70:	4619      	mov	r1, r3
 8006b72:	483d      	ldr	r0, [pc, #244]	; (8006c68 <MX_GPIO_Init+0x270>)
 8006b74:	f004 f92c 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006b78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b86:	2300      	movs	r3, #0
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b8a:	f107 031c 	add.w	r3, r7, #28
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4835      	ldr	r0, [pc, #212]	; (8006c68 <MX_GPIO_Init+0x270>)
 8006b92:	f004 f91d 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ba8:	f107 031c 	add.w	r3, r7, #28
 8006bac:	4619      	mov	r1, r3
 8006bae:	482f      	ldr	r0, [pc, #188]	; (8006c6c <MX_GPIO_Init+0x274>)
 8006bb0:	f004 f90e 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bc2:	f107 031c 	add.w	r3, r7, #28
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4829      	ldr	r0, [pc, #164]	; (8006c70 <MX_GPIO_Init+0x278>)
 8006bca:	f004 f901 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006be0:	f107 031c 	add.w	r3, r7, #28
 8006be4:	4619      	mov	r1, r3
 8006be6:	4822      	ldr	r0, [pc, #136]	; (8006c70 <MX_GPIO_Init+0x278>)
 8006be8:	f004 f8f2 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bfe:	f107 031c 	add.w	r3, r7, #28
 8006c02:	4619      	mov	r1, r3
 8006c04:	481a      	ldr	r0, [pc, #104]	; (8006c70 <MX_GPIO_Init+0x278>)
 8006c06:	f004 f8e3 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006c0a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006c0e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c10:	2301      	movs	r3, #1
 8006c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c1c:	f107 031c 	add.w	r3, r7, #28
 8006c20:	4619      	mov	r1, r3
 8006c22:	4814      	ldr	r0, [pc, #80]	; (8006c74 <MX_GPIO_Init+0x27c>)
 8006c24:	f004 f8d4 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c36:	f107 031c 	add.w	r3, r7, #28
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	480d      	ldr	r0, [pc, #52]	; (8006c74 <MX_GPIO_Init+0x27c>)
 8006c3e:	f004 f8c7 	bl	800add0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006c42:	239b      	movs	r3, #155	; 0x9b
 8006c44:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c46:	2300      	movs	r3, #0
 8006c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c4e:	f107 031c 	add.w	r3, r7, #28
 8006c52:	4619      	mov	r1, r3
 8006c54:	4806      	ldr	r0, [pc, #24]	; (8006c70 <MX_GPIO_Init+0x278>)
 8006c56:	f004 f8bb 	bl	800add0 <HAL_GPIO_Init>

}
 8006c5a:	bf00      	nop
 8006c5c:	3730      	adds	r7, #48	; 0x30
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40023800 	.word	0x40023800
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	40020400 	.word	0x40020400
 8006c70:	40020c00 	.word	0x40020c00
 8006c74:	40020000 	.word	0x40020000
 8006c78:	40020800 	.word	0x40020800

08006c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006c80:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006c82:	e7fe      	b.n	8006c82 <Error_Handler+0x6>

08006c84 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006c88:	bf00      	nop
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	4b10      	ldr	r3, [pc, #64]	; (8006ce0 <HAL_MspInit+0x4c>)
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	4a0f      	ldr	r2, [pc, #60]	; (8006ce0 <HAL_MspInit+0x4c>)
 8006ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8006caa:	4b0d      	ldr	r3, [pc, #52]	; (8006ce0 <HAL_MspInit+0x4c>)
 8006cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cb2:	607b      	str	r3, [r7, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	603b      	str	r3, [r7, #0]
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <HAL_MspInit+0x4c>)
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <HAL_MspInit+0x4c>)
 8006cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cc6:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <HAL_MspInit+0x4c>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cce:	603b      	str	r3, [r7, #0]
 8006cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40023800 	.word	0x40023800

08006ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08c      	sub	sp, #48	; 0x30
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cec:	f107 031c 	add.w	r3, r7, #28
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	605a      	str	r2, [r3, #4]
 8006cf6:	609a      	str	r2, [r3, #8]
 8006cf8:	60da      	str	r2, [r3, #12]
 8006cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a4a      	ldr	r2, [pc, #296]	; (8006e2c <HAL_ADC_MspInit+0x148>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	f040 808e 	bne.w	8006e24 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	4b48      	ldr	r3, [pc, #288]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d10:	4a47      	ldr	r2, [pc, #284]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d16:	6453      	str	r3, [r2, #68]	; 0x44
 8006d18:	4b45      	ldr	r3, [pc, #276]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	4b41      	ldr	r3, [pc, #260]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	4a40      	ldr	r2, [pc, #256]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d2e:	f043 0304 	orr.w	r3, r3, #4
 8006d32:	6313      	str	r3, [r2, #48]	; 0x30
 8006d34:	4b3e      	ldr	r3, [pc, #248]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d40:	2300      	movs	r3, #0
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	4b3a      	ldr	r3, [pc, #232]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	4a39      	ldr	r2, [pc, #228]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d50:	4b37      	ldr	r3, [pc, #220]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	4b33      	ldr	r3, [pc, #204]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	4a32      	ldr	r2, [pc, #200]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d66:	f043 0302 	orr.w	r3, r3, #2
 8006d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d6c:	4b30      	ldr	r3, [pc, #192]	; (8006e30 <HAL_ADC_MspInit+0x14c>)
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006d78:	230f      	movs	r3, #15
 8006d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d80:	2300      	movs	r3, #0
 8006d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d84:	f107 031c 	add.w	r3, r7, #28
 8006d88:	4619      	mov	r1, r3
 8006d8a:	482a      	ldr	r0, [pc, #168]	; (8006e34 <HAL_ADC_MspInit+0x150>)
 8006d8c:	f004 f820 	bl	800add0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006d90:	23ff      	movs	r3, #255	; 0xff
 8006d92:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d94:	2303      	movs	r3, #3
 8006d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d9c:	f107 031c 	add.w	r3, r7, #28
 8006da0:	4619      	mov	r1, r3
 8006da2:	4825      	ldr	r0, [pc, #148]	; (8006e38 <HAL_ADC_MspInit+0x154>)
 8006da4:	f004 f814 	bl	800add0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006da8:	2303      	movs	r3, #3
 8006daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dac:	2303      	movs	r3, #3
 8006dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006db4:	f107 031c 	add.w	r3, r7, #28
 8006db8:	4619      	mov	r1, r3
 8006dba:	4820      	ldr	r0, [pc, #128]	; (8006e3c <HAL_ADC_MspInit+0x158>)
 8006dbc:	f004 f808 	bl	800add0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006dc0:	4b1f      	ldr	r3, [pc, #124]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006dc2:	4a20      	ldr	r2, [pc, #128]	; (8006e44 <HAL_ADC_MspInit+0x160>)
 8006dc4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006dc6:	4b1e      	ldr	r3, [pc, #120]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dcc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006dce:	4b1c      	ldr	r3, [pc, #112]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dd4:	4b1a      	ldr	r3, [pc, #104]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006dda:	4b19      	ldr	r3, [pc, #100]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006de0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006de2:	4b17      	ldr	r3, [pc, #92]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006de8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006dea:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006dec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006df0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006df2:	4b13      	ldr	r3, [pc, #76]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006df4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006df8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006dfa:	4b11      	ldr	r3, [pc, #68]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006dfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e00:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e02:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006e08:	480d      	ldr	r0, [pc, #52]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006e0a:	f003 fc45 	bl	800a698 <HAL_DMA_Init>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006e14:	f7ff ff32 	bl	8006c7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a09      	ldr	r2, [pc, #36]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8006e1e:	4a08      	ldr	r2, [pc, #32]	; (8006e40 <HAL_ADC_MspInit+0x15c>)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006e24:	bf00      	nop
 8006e26:	3730      	adds	r7, #48	; 0x30
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	40012100 	.word	0x40012100
 8006e30:	40023800 	.word	0x40023800
 8006e34:	40020800 	.word	0x40020800
 8006e38:	40020000 	.word	0x40020000
 8006e3c:	40020400 	.word	0x40020400
 8006e40:	2004a9c8 	.word	0x2004a9c8
 8006e44:	40026440 	.word	0x40026440

08006e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08c      	sub	sp, #48	; 0x30
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e50:	f107 031c 	add.w	r3, r7, #28
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	605a      	str	r2, [r3, #4]
 8006e5a:	609a      	str	r2, [r3, #8]
 8006e5c:	60da      	str	r2, [r3, #12]
 8006e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a32      	ldr	r2, [pc, #200]	; (8006f30 <HAL_I2C_MspInit+0xe8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d12c      	bne.n	8006ec4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	4b31      	ldr	r3, [pc, #196]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	4a30      	ldr	r2, [pc, #192]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006e74:	f043 0302 	orr.w	r3, r3, #2
 8006e78:	6313      	str	r3, [r2, #48]	; 0x30
 8006e7a:	4b2e      	ldr	r3, [pc, #184]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	f003 0302 	and.w	r3, r3, #2
 8006e82:	61bb      	str	r3, [r7, #24]
 8006e84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006e86:	23c0      	movs	r3, #192	; 0xc0
 8006e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e8a:	2312      	movs	r3, #18
 8006e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e92:	2303      	movs	r3, #3
 8006e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e96:	2304      	movs	r3, #4
 8006e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e9a:	f107 031c 	add.w	r3, r7, #28
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4825      	ldr	r0, [pc, #148]	; (8006f38 <HAL_I2C_MspInit+0xf0>)
 8006ea2:	f003 ff95 	bl	800add0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	4b22      	ldr	r3, [pc, #136]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	4a21      	ldr	r2, [pc, #132]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006eb6:	4b1f      	ldr	r3, [pc, #124]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006ec2:	e031      	b.n	8006f28 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a1c      	ldr	r2, [pc, #112]	; (8006f3c <HAL_I2C_MspInit+0xf4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d12c      	bne.n	8006f28 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	4b18      	ldr	r3, [pc, #96]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	4a17      	ldr	r2, [pc, #92]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006ed8:	f043 0302 	orr.w	r3, r3, #2
 8006edc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ede:	4b15      	ldr	r3, [pc, #84]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006eea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ef0:	2312      	movs	r3, #18
 8006ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006efc:	2304      	movs	r3, #4
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f00:	f107 031c 	add.w	r3, r7, #28
 8006f04:	4619      	mov	r1, r3
 8006f06:	480c      	ldr	r0, [pc, #48]	; (8006f38 <HAL_I2C_MspInit+0xf0>)
 8006f08:	f003 ff62 	bl	800add0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	4b08      	ldr	r3, [pc, #32]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	4a07      	ldr	r2, [pc, #28]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006f16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <HAL_I2C_MspInit+0xec>)
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
}
 8006f28:	bf00      	nop
 8006f2a:	3730      	adds	r7, #48	; 0x30
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40005400 	.word	0x40005400
 8006f34:	40023800 	.word	0x40023800
 8006f38:	40020400 	.word	0x40020400
 8006f3c:	40005800 	.word	0x40005800

08006f40 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08a      	sub	sp, #40	; 0x28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f48:	f107 0314 	add.w	r3, r7, #20
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	609a      	str	r2, [r3, #8]
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a69      	ldr	r2, [pc, #420]	; (8007104 <HAL_SD_MspInit+0x1c4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	f040 80cb 	bne.w	80070fa <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	4b67      	ldr	r3, [pc, #412]	; (8007108 <HAL_SD_MspInit+0x1c8>)
 8006f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6c:	4a66      	ldr	r2, [pc, #408]	; (8007108 <HAL_SD_MspInit+0x1c8>)
 8006f6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f72:	6453      	str	r3, [r2, #68]	; 0x44
 8006f74:	4b64      	ldr	r3, [pc, #400]	; (8007108 <HAL_SD_MspInit+0x1c8>)
 8006f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	4b60      	ldr	r3, [pc, #384]	; (8007108 <HAL_SD_MspInit+0x1c8>)
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	4a5f      	ldr	r2, [pc, #380]	; (8007108 <HAL_SD_MspInit+0x1c8>)
 8006f8a:	f043 0304 	orr.w	r3, r3, #4
 8006f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006f90:	4b5d      	ldr	r3, [pc, #372]	; (8007108 <HAL_SD_MspInit+0x1c8>)
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60bb      	str	r3, [r7, #8]
 8006fa0:	4b59      	ldr	r3, [pc, #356]	; (8007108 <HAL_SD_MspInit+0x1c8>)
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa4:	4a58      	ldr	r2, [pc, #352]	; (8007108 <HAL_SD_MspInit+0x1c8>)
 8006fa6:	f043 0308 	orr.w	r3, r3, #8
 8006faa:	6313      	str	r3, [r2, #48]	; 0x30
 8006fac:	4b56      	ldr	r3, [pc, #344]	; (8007108 <HAL_SD_MspInit+0x1c8>)
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	60bb      	str	r3, [r7, #8]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006fb8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006fbc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006fca:	230c      	movs	r3, #12
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fce:	f107 0314 	add.w	r3, r7, #20
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	484d      	ldr	r0, [pc, #308]	; (800710c <HAL_SD_MspInit+0x1cc>)
 8006fd6:	f003 fefb 	bl	800add0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006fda:	2304      	movs	r3, #4
 8006fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006fea:	230c      	movs	r3, #12
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fee:	f107 0314 	add.w	r3, r7, #20
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4846      	ldr	r0, [pc, #280]	; (8007110 <HAL_SD_MspInit+0x1d0>)
 8006ff6:	f003 feeb 	bl	800add0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006ffa:	4b46      	ldr	r3, [pc, #280]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 8006ffc:	4a46      	ldr	r2, [pc, #280]	; (8007118 <HAL_SD_MspInit+0x1d8>)
 8006ffe:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007000:	4b44      	ldr	r3, [pc, #272]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 8007002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007006:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007008:	4b42      	ldr	r3, [pc, #264]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 800700a:	2200      	movs	r2, #0
 800700c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800700e:	4b41      	ldr	r3, [pc, #260]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 8007010:	2200      	movs	r2, #0
 8007012:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007014:	4b3f      	ldr	r3, [pc, #252]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 8007016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800701a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800701c:	4b3d      	ldr	r3, [pc, #244]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 800701e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007022:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007024:	4b3b      	ldr	r3, [pc, #236]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 8007026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800702a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800702c:	4b39      	ldr	r3, [pc, #228]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 800702e:	2220      	movs	r2, #32
 8007030:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007032:	4b38      	ldr	r3, [pc, #224]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 8007034:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007038:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800703a:	4b36      	ldr	r3, [pc, #216]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 800703c:	2204      	movs	r2, #4
 800703e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007040:	4b34      	ldr	r3, [pc, #208]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 8007042:	2203      	movs	r2, #3
 8007044:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007046:	4b33      	ldr	r3, [pc, #204]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 8007048:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800704c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800704e:	4b31      	ldr	r3, [pc, #196]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 8007050:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007054:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007056:	482f      	ldr	r0, [pc, #188]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 8007058:	f003 fb1e 	bl	800a698 <HAL_DMA_Init>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8007062:	f7ff fe0b 	bl	8006c7c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a2a      	ldr	r2, [pc, #168]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 800706a:	641a      	str	r2, [r3, #64]	; 0x40
 800706c:	4a29      	ldr	r2, [pc, #164]	; (8007114 <HAL_SD_MspInit+0x1d4>)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007072:	4b2a      	ldr	r3, [pc, #168]	; (800711c <HAL_SD_MspInit+0x1dc>)
 8007074:	4a2a      	ldr	r2, [pc, #168]	; (8007120 <HAL_SD_MspInit+0x1e0>)
 8007076:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007078:	4b28      	ldr	r3, [pc, #160]	; (800711c <HAL_SD_MspInit+0x1dc>)
 800707a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800707e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007080:	4b26      	ldr	r3, [pc, #152]	; (800711c <HAL_SD_MspInit+0x1dc>)
 8007082:	2240      	movs	r2, #64	; 0x40
 8007084:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007086:	4b25      	ldr	r3, [pc, #148]	; (800711c <HAL_SD_MspInit+0x1dc>)
 8007088:	2200      	movs	r2, #0
 800708a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800708c:	4b23      	ldr	r3, [pc, #140]	; (800711c <HAL_SD_MspInit+0x1dc>)
 800708e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007092:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007094:	4b21      	ldr	r3, [pc, #132]	; (800711c <HAL_SD_MspInit+0x1dc>)
 8007096:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800709a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800709c:	4b1f      	ldr	r3, [pc, #124]	; (800711c <HAL_SD_MspInit+0x1dc>)
 800709e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070a2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80070a4:	4b1d      	ldr	r3, [pc, #116]	; (800711c <HAL_SD_MspInit+0x1dc>)
 80070a6:	2220      	movs	r2, #32
 80070a8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80070aa:	4b1c      	ldr	r3, [pc, #112]	; (800711c <HAL_SD_MspInit+0x1dc>)
 80070ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80070b0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80070b2:	4b1a      	ldr	r3, [pc, #104]	; (800711c <HAL_SD_MspInit+0x1dc>)
 80070b4:	2204      	movs	r2, #4
 80070b6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80070b8:	4b18      	ldr	r3, [pc, #96]	; (800711c <HAL_SD_MspInit+0x1dc>)
 80070ba:	2203      	movs	r2, #3
 80070bc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80070be:	4b17      	ldr	r3, [pc, #92]	; (800711c <HAL_SD_MspInit+0x1dc>)
 80070c0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80070c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80070c6:	4b15      	ldr	r3, [pc, #84]	; (800711c <HAL_SD_MspInit+0x1dc>)
 80070c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80070cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80070ce:	4813      	ldr	r0, [pc, #76]	; (800711c <HAL_SD_MspInit+0x1dc>)
 80070d0:	f003 fae2 	bl	800a698 <HAL_DMA_Init>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80070da:	f7ff fdcf 	bl	8006c7c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a0e      	ldr	r2, [pc, #56]	; (800711c <HAL_SD_MspInit+0x1dc>)
 80070e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80070e4:	4a0d      	ldr	r2, [pc, #52]	; (800711c <HAL_SD_MspInit+0x1dc>)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80070ea:	2200      	movs	r2, #0
 80070ec:	2100      	movs	r1, #0
 80070ee:	2031      	movs	r0, #49	; 0x31
 80070f0:	f003 fa9b 	bl	800a62a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80070f4:	2031      	movs	r0, #49	; 0x31
 80070f6:	f003 fab4 	bl	800a662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80070fa:	bf00      	nop
 80070fc:	3728      	adds	r7, #40	; 0x28
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	40012c00 	.word	0x40012c00
 8007108:	40023800 	.word	0x40023800
 800710c:	40020800 	.word	0x40020800
 8007110:	40020c00 	.word	0x40020c00
 8007114:	2004a4f0 	.word	0x2004a4f0
 8007118:	40026458 	.word	0x40026458
 800711c:	2004a824 	.word	0x2004a824
 8007120:	400264a0 	.word	0x400264a0

08007124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08a      	sub	sp, #40	; 0x28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800712c:	f107 0314 	add.w	r3, r7, #20
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	605a      	str	r2, [r3, #4]
 8007136:	609a      	str	r2, [r3, #8]
 8007138:	60da      	str	r2, [r3, #12]
 800713a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a19      	ldr	r2, [pc, #100]	; (80071a8 <HAL_SPI_MspInit+0x84>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d12c      	bne.n	80071a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007146:	2300      	movs	r3, #0
 8007148:	613b      	str	r3, [r7, #16]
 800714a:	4b18      	ldr	r3, [pc, #96]	; (80071ac <HAL_SPI_MspInit+0x88>)
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	4a17      	ldr	r2, [pc, #92]	; (80071ac <HAL_SPI_MspInit+0x88>)
 8007150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007154:	6413      	str	r3, [r2, #64]	; 0x40
 8007156:	4b15      	ldr	r3, [pc, #84]	; (80071ac <HAL_SPI_MspInit+0x88>)
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	4b11      	ldr	r3, [pc, #68]	; (80071ac <HAL_SPI_MspInit+0x88>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716a:	4a10      	ldr	r2, [pc, #64]	; (80071ac <HAL_SPI_MspInit+0x88>)
 800716c:	f043 0302 	orr.w	r3, r3, #2
 8007170:	6313      	str	r3, [r2, #48]	; 0x30
 8007172:	4b0e      	ldr	r3, [pc, #56]	; (80071ac <HAL_SPI_MspInit+0x88>)
 8007174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800717e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007184:	2302      	movs	r3, #2
 8007186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007188:	2300      	movs	r3, #0
 800718a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800718c:	2303      	movs	r3, #3
 800718e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007190:	2305      	movs	r3, #5
 8007192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007194:	f107 0314 	add.w	r3, r7, #20
 8007198:	4619      	mov	r1, r3
 800719a:	4805      	ldr	r0, [pc, #20]	; (80071b0 <HAL_SPI_MspInit+0x8c>)
 800719c:	f003 fe18 	bl	800add0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80071a0:	bf00      	nop
 80071a2:	3728      	adds	r7, #40	; 0x28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	40003800 	.word	0x40003800
 80071ac:	40023800 	.word	0x40023800
 80071b0:	40020400 	.word	0x40020400

080071b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08c      	sub	sp, #48	; 0x30
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071bc:	f107 031c 	add.w	r3, r7, #28
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	605a      	str	r2, [r3, #4]
 80071c6:	609a      	str	r2, [r3, #8]
 80071c8:	60da      	str	r2, [r3, #12]
 80071ca:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a2d      	ldr	r2, [pc, #180]	; (8007288 <HAL_TIM_PWM_MspInit+0xd4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d12d      	bne.n	8007232 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80071d6:	2300      	movs	r3, #0
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	4b2c      	ldr	r3, [pc, #176]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 80071dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071de:	4a2b      	ldr	r2, [pc, #172]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 80071e0:	f043 0301 	orr.w	r3, r3, #1
 80071e4:	6453      	str	r3, [r2, #68]	; 0x44
 80071e6:	4b29      	ldr	r3, [pc, #164]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	4b25      	ldr	r3, [pc, #148]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	4a24      	ldr	r2, [pc, #144]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 80071fc:	f043 0310 	orr.w	r3, r3, #16
 8007200:	6313      	str	r3, [r2, #48]	; 0x30
 8007202:	4b22      	ldr	r3, [pc, #136]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	f003 0310 	and.w	r3, r3, #16
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800720e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007214:	2302      	movs	r3, #2
 8007216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007218:	2300      	movs	r3, #0
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800721c:	2300      	movs	r3, #0
 800721e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007220:	2301      	movs	r3, #1
 8007222:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007224:	f107 031c 	add.w	r3, r7, #28
 8007228:	4619      	mov	r1, r3
 800722a:	4819      	ldr	r0, [pc, #100]	; (8007290 <HAL_TIM_PWM_MspInit+0xdc>)
 800722c:	f003 fdd0 	bl	800add0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007230:	e026      	b.n	8007280 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a17      	ldr	r2, [pc, #92]	; (8007294 <HAL_TIM_PWM_MspInit+0xe0>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d10e      	bne.n	800725a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800723c:	2300      	movs	r3, #0
 800723e:	613b      	str	r3, [r7, #16]
 8007240:	4b12      	ldr	r3, [pc, #72]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 8007242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007244:	4a11      	ldr	r2, [pc, #68]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 8007246:	f043 0302 	orr.w	r3, r3, #2
 800724a:	6413      	str	r3, [r2, #64]	; 0x40
 800724c:	4b0f      	ldr	r3, [pc, #60]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	693b      	ldr	r3, [r7, #16]
}
 8007258:	e012      	b.n	8007280 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a0e      	ldr	r2, [pc, #56]	; (8007298 <HAL_TIM_PWM_MspInit+0xe4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d10d      	bne.n	8007280 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	4b08      	ldr	r3, [pc, #32]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 800726a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726c:	4a07      	ldr	r2, [pc, #28]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 800726e:	f043 0304 	orr.w	r3, r3, #4
 8007272:	6413      	str	r3, [r2, #64]	; 0x40
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <HAL_TIM_PWM_MspInit+0xd8>)
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	68fb      	ldr	r3, [r7, #12]
}
 8007280:	bf00      	nop
 8007282:	3730      	adds	r7, #48	; 0x30
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40010000 	.word	0x40010000
 800728c:	40023800 	.word	0x40023800
 8007290:	40021000 	.word	0x40021000
 8007294:	40000400 	.word	0x40000400
 8007298:	40000800 	.word	0x40000800

0800729c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a3e      	ldr	r2, [pc, #248]	; (80073a4 <HAL_TIM_Base_MspInit+0x108>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d116      	bne.n	80072dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	4b3d      	ldr	r3, [pc, #244]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	4a3c      	ldr	r2, [pc, #240]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 80072b8:	f043 0310 	orr.w	r3, r3, #16
 80072bc:	6413      	str	r3, [r2, #64]	; 0x40
 80072be:	4b3a      	ldr	r3, [pc, #232]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	f003 0310 	and.w	r3, r3, #16
 80072c6:	61fb      	str	r3, [r7, #28]
 80072c8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80072ca:	2200      	movs	r2, #0
 80072cc:	2101      	movs	r1, #1
 80072ce:	2036      	movs	r0, #54	; 0x36
 80072d0:	f003 f9ab 	bl	800a62a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80072d4:	2036      	movs	r0, #54	; 0x36
 80072d6:	f003 f9c4 	bl	800a662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80072da:	e05e      	b.n	800739a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a32      	ldr	r2, [pc, #200]	; (80073ac <HAL_TIM_Base_MspInit+0x110>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d116      	bne.n	8007314 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80072e6:	2300      	movs	r3, #0
 80072e8:	61bb      	str	r3, [r7, #24]
 80072ea:	4b2f      	ldr	r3, [pc, #188]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	4a2e      	ldr	r2, [pc, #184]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 80072f0:	f043 0320 	orr.w	r3, r3, #32
 80072f4:	6413      	str	r3, [r2, #64]	; 0x40
 80072f6:	4b2c      	ldr	r3, [pc, #176]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	61bb      	str	r3, [r7, #24]
 8007300:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007302:	2200      	movs	r2, #0
 8007304:	2100      	movs	r1, #0
 8007306:	2037      	movs	r0, #55	; 0x37
 8007308:	f003 f98f 	bl	800a62a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800730c:	2037      	movs	r0, #55	; 0x37
 800730e:	f003 f9a8 	bl	800a662 <HAL_NVIC_EnableIRQ>
}
 8007312:	e042      	b.n	800739a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a25      	ldr	r2, [pc, #148]	; (80073b0 <HAL_TIM_Base_MspInit+0x114>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d10e      	bne.n	800733c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	4b21      	ldr	r3, [pc, #132]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007326:	4a20      	ldr	r2, [pc, #128]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800732c:	6453      	str	r3, [r2, #68]	; 0x44
 800732e:	4b1e      	ldr	r3, [pc, #120]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	697b      	ldr	r3, [r7, #20]
}
 800733a:	e02e      	b.n	800739a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <HAL_TIM_Base_MspInit+0x118>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d10e      	bne.n	8007364 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007346:	2300      	movs	r3, #0
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	4b17      	ldr	r3, [pc, #92]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	4a16      	ldr	r2, [pc, #88]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007354:	6453      	str	r3, [r2, #68]	; 0x44
 8007356:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	693b      	ldr	r3, [r7, #16]
}
 8007362:	e01a      	b.n	800739a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a13      	ldr	r2, [pc, #76]	; (80073b8 <HAL_TIM_Base_MspInit+0x11c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d115      	bne.n	800739a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	4b0d      	ldr	r3, [pc, #52]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	4a0c      	ldr	r2, [pc, #48]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800737c:	6413      	str	r3, [r2, #64]	; 0x40
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800738a:	2200      	movs	r2, #0
 800738c:	2100      	movs	r1, #0
 800738e:	202c      	movs	r0, #44	; 0x2c
 8007390:	f003 f94b 	bl	800a62a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007394:	202c      	movs	r0, #44	; 0x2c
 8007396:	f003 f964 	bl	800a662 <HAL_NVIC_EnableIRQ>
}
 800739a:	bf00      	nop
 800739c:	3720      	adds	r7, #32
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40001000 	.word	0x40001000
 80073a8:	40023800 	.word	0x40023800
 80073ac:	40001400 	.word	0x40001400
 80073b0:	40014400 	.word	0x40014400
 80073b4:	40014800 	.word	0x40014800
 80073b8:	40001c00 	.word	0x40001c00

080073bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1d      	ldr	r2, [pc, #116]	; (8007450 <HAL_TIM_Encoder_MspInit+0x94>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d133      	bne.n	8007446 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
 80073e2:	4b1c      	ldr	r3, [pc, #112]	; (8007454 <HAL_TIM_Encoder_MspInit+0x98>)
 80073e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e6:	4a1b      	ldr	r2, [pc, #108]	; (8007454 <HAL_TIM_Encoder_MspInit+0x98>)
 80073e8:	f043 0302 	orr.w	r3, r3, #2
 80073ec:	6453      	str	r3, [r2, #68]	; 0x44
 80073ee:	4b19      	ldr	r3, [pc, #100]	; (8007454 <HAL_TIM_Encoder_MspInit+0x98>)
 80073f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	4b15      	ldr	r3, [pc, #84]	; (8007454 <HAL_TIM_Encoder_MspInit+0x98>)
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	4a14      	ldr	r2, [pc, #80]	; (8007454 <HAL_TIM_Encoder_MspInit+0x98>)
 8007404:	f043 0304 	orr.w	r3, r3, #4
 8007408:	6313      	str	r3, [r2, #48]	; 0x30
 800740a:	4b12      	ldr	r3, [pc, #72]	; (8007454 <HAL_TIM_Encoder_MspInit+0x98>)
 800740c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740e:	f003 0304 	and.w	r3, r3, #4
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007416:	23c0      	movs	r3, #192	; 0xc0
 8007418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800741a:	2302      	movs	r3, #2
 800741c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800741e:	2300      	movs	r3, #0
 8007420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007422:	2300      	movs	r3, #0
 8007424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007426:	2303      	movs	r3, #3
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800742a:	f107 0314 	add.w	r3, r7, #20
 800742e:	4619      	mov	r1, r3
 8007430:	4809      	ldr	r0, [pc, #36]	; (8007458 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007432:	f003 fccd 	bl	800add0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007436:	2200      	movs	r2, #0
 8007438:	2100      	movs	r1, #0
 800743a:	202c      	movs	r0, #44	; 0x2c
 800743c:	f003 f8f5 	bl	800a62a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007440:	202c      	movs	r0, #44	; 0x2c
 8007442:	f003 f90e 	bl	800a662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007446:	bf00      	nop
 8007448:	3728      	adds	r7, #40	; 0x28
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	40010400 	.word	0x40010400
 8007454:	40023800 	.word	0x40023800
 8007458:	40020800 	.word	0x40020800

0800745c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08c      	sub	sp, #48	; 0x30
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007464:	f107 031c 	add.w	r3, r7, #28
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	609a      	str	r2, [r3, #8]
 8007470:	60da      	str	r2, [r3, #12]
 8007472:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a5c      	ldr	r2, [pc, #368]	; (80075ec <HAL_TIM_MspPostInit+0x190>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d11f      	bne.n	80074be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800747e:	2300      	movs	r3, #0
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	4b5b      	ldr	r3, [pc, #364]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	4a5a      	ldr	r2, [pc, #360]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 8007488:	f043 0310 	orr.w	r3, r3, #16
 800748c:	6313      	str	r3, [r2, #48]	; 0x30
 800748e:	4b58      	ldr	r3, [pc, #352]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	61bb      	str	r3, [r7, #24]
 8007498:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800749a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800749e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074a0:	2302      	movs	r3, #2
 80074a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074a8:	2300      	movs	r3, #0
 80074aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80074ac:	2301      	movs	r3, #1
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80074b0:	f107 031c 	add.w	r3, r7, #28
 80074b4:	4619      	mov	r1, r3
 80074b6:	484f      	ldr	r0, [pc, #316]	; (80075f4 <HAL_TIM_MspPostInit+0x198>)
 80074b8:	f003 fc8a 	bl	800add0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80074bc:	e091      	b.n	80075e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a4d      	ldr	r2, [pc, #308]	; (80075f8 <HAL_TIM_MspPostInit+0x19c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d11e      	bne.n	8007506 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	4b48      	ldr	r3, [pc, #288]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 80074ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d0:	4a47      	ldr	r2, [pc, #284]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 80074d2:	f043 0302 	orr.w	r3, r3, #2
 80074d6:	6313      	str	r3, [r2, #48]	; 0x30
 80074d8:	4b45      	ldr	r3, [pc, #276]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80074e4:	2330      	movs	r3, #48	; 0x30
 80074e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e8:	2302      	movs	r3, #2
 80074ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ec:	2300      	movs	r3, #0
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074f0:	2300      	movs	r3, #0
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80074f4:	2302      	movs	r3, #2
 80074f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074f8:	f107 031c 	add.w	r3, r7, #28
 80074fc:	4619      	mov	r1, r3
 80074fe:	483f      	ldr	r0, [pc, #252]	; (80075fc <HAL_TIM_MspPostInit+0x1a0>)
 8007500:	f003 fc66 	bl	800add0 <HAL_GPIO_Init>
}
 8007504:	e06d      	b.n	80075e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a3d      	ldr	r2, [pc, #244]	; (8007600 <HAL_TIM_MspPostInit+0x1a4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d11f      	bne.n	8007550 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007510:	2300      	movs	r3, #0
 8007512:	613b      	str	r3, [r7, #16]
 8007514:	4b36      	ldr	r3, [pc, #216]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 8007516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007518:	4a35      	ldr	r2, [pc, #212]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 800751a:	f043 0308 	orr.w	r3, r3, #8
 800751e:	6313      	str	r3, [r2, #48]	; 0x30
 8007520:	4b33      	ldr	r3, [pc, #204]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	613b      	str	r3, [r7, #16]
 800752a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800752c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007532:	2302      	movs	r3, #2
 8007534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007536:	2300      	movs	r3, #0
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800753a:	2300      	movs	r3, #0
 800753c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800753e:	2302      	movs	r3, #2
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007542:	f107 031c 	add.w	r3, r7, #28
 8007546:	4619      	mov	r1, r3
 8007548:	482e      	ldr	r0, [pc, #184]	; (8007604 <HAL_TIM_MspPostInit+0x1a8>)
 800754a:	f003 fc41 	bl	800add0 <HAL_GPIO_Init>
}
 800754e:	e048      	b.n	80075e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a2c      	ldr	r2, [pc, #176]	; (8007608 <HAL_TIM_MspPostInit+0x1ac>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d11f      	bne.n	800759a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	4b24      	ldr	r3, [pc, #144]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	4a23      	ldr	r2, [pc, #140]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 8007564:	f043 0302 	orr.w	r3, r3, #2
 8007568:	6313      	str	r3, [r2, #48]	; 0x30
 800756a:	4b21      	ldr	r3, [pc, #132]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800757a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800757c:	2302      	movs	r3, #2
 800757e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007580:	2300      	movs	r3, #0
 8007582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007584:	2300      	movs	r3, #0
 8007586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007588:	2303      	movs	r3, #3
 800758a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800758c:	f107 031c 	add.w	r3, r7, #28
 8007590:	4619      	mov	r1, r3
 8007592:	481a      	ldr	r0, [pc, #104]	; (80075fc <HAL_TIM_MspPostInit+0x1a0>)
 8007594:	f003 fc1c 	bl	800add0 <HAL_GPIO_Init>
}
 8007598:	e023      	b.n	80075e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a1b      	ldr	r2, [pc, #108]	; (800760c <HAL_TIM_MspPostInit+0x1b0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d11e      	bne.n	80075e2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075a4:	2300      	movs	r3, #0
 80075a6:	60bb      	str	r3, [r7, #8]
 80075a8:	4b11      	ldr	r3, [pc, #68]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	4a10      	ldr	r2, [pc, #64]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 80075ae:	f043 0302 	orr.w	r3, r3, #2
 80075b2:	6313      	str	r3, [r2, #48]	; 0x30
 80075b4:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <HAL_TIM_MspPostInit+0x194>)
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	60bb      	str	r3, [r7, #8]
 80075be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80075c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075c6:	2302      	movs	r3, #2
 80075c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075ce:	2300      	movs	r3, #0
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80075d2:	2303      	movs	r3, #3
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075d6:	f107 031c 	add.w	r3, r7, #28
 80075da:	4619      	mov	r1, r3
 80075dc:	4807      	ldr	r0, [pc, #28]	; (80075fc <HAL_TIM_MspPostInit+0x1a0>)
 80075de:	f003 fbf7 	bl	800add0 <HAL_GPIO_Init>
}
 80075e2:	bf00      	nop
 80075e4:	3730      	adds	r7, #48	; 0x30
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	40010000 	.word	0x40010000
 80075f0:	40023800 	.word	0x40023800
 80075f4:	40021000 	.word	0x40021000
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40020400 	.word	0x40020400
 8007600:	40000800 	.word	0x40000800
 8007604:	40020c00 	.word	0x40020c00
 8007608:	40014400 	.word	0x40014400
 800760c:	40014800 	.word	0x40014800

08007610 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b08a      	sub	sp, #40	; 0x28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007618:	f107 0314 	add.w	r3, r7, #20
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	605a      	str	r2, [r3, #4]
 8007622:	609a      	str	r2, [r3, #8]
 8007624:	60da      	str	r2, [r3, #12]
 8007626:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a19      	ldr	r2, [pc, #100]	; (8007694 <HAL_UART_MspInit+0x84>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d12b      	bne.n	800768a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007632:	2300      	movs	r3, #0
 8007634:	613b      	str	r3, [r7, #16]
 8007636:	4b18      	ldr	r3, [pc, #96]	; (8007698 <HAL_UART_MspInit+0x88>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	4a17      	ldr	r2, [pc, #92]	; (8007698 <HAL_UART_MspInit+0x88>)
 800763c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007640:	6413      	str	r3, [r2, #64]	; 0x40
 8007642:	4b15      	ldr	r3, [pc, #84]	; (8007698 <HAL_UART_MspInit+0x88>)
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764a:	613b      	str	r3, [r7, #16]
 800764c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	4b11      	ldr	r3, [pc, #68]	; (8007698 <HAL_UART_MspInit+0x88>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	4a10      	ldr	r2, [pc, #64]	; (8007698 <HAL_UART_MspInit+0x88>)
 8007658:	f043 0308 	orr.w	r3, r3, #8
 800765c:	6313      	str	r3, [r2, #48]	; 0x30
 800765e:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <HAL_UART_MspInit+0x88>)
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800766a:	2360      	movs	r3, #96	; 0x60
 800766c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800766e:	2302      	movs	r3, #2
 8007670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007672:	2300      	movs	r3, #0
 8007674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007676:	2303      	movs	r3, #3
 8007678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800767a:	2307      	movs	r3, #7
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800767e:	f107 0314 	add.w	r3, r7, #20
 8007682:	4619      	mov	r1, r3
 8007684:	4805      	ldr	r0, [pc, #20]	; (800769c <HAL_UART_MspInit+0x8c>)
 8007686:	f003 fba3 	bl	800add0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800768a:	bf00      	nop
 800768c:	3728      	adds	r7, #40	; 0x28
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40004400 	.word	0x40004400
 8007698:	40023800 	.word	0x40023800
 800769c:	40020c00 	.word	0x40020c00

080076a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80076a4:	e7fe      	b.n	80076a4 <NMI_Handler+0x4>

080076a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076a6:	b480      	push	{r7}
 80076a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076aa:	e7fe      	b.n	80076aa <HardFault_Handler+0x4>

080076ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076b0:	e7fe      	b.n	80076b0 <MemManage_Handler+0x4>

080076b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076b2:	b480      	push	{r7}
 80076b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076b6:	e7fe      	b.n	80076b6 <BusFault_Handler+0x4>

080076b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076b8:	b480      	push	{r7}
 80076ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076bc:	e7fe      	b.n	80076bc <UsageFault_Handler+0x4>

080076be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80076be:	b480      	push	{r7}
 80076c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80076c2:	bf00      	nop
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076d0:	bf00      	nop
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076da:	b480      	push	{r7}
 80076dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076de:	bf00      	nop
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076ec:	f002 fa7c 	bl	8009be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076f0:	bf00      	nop
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80076f8:	4803      	ldr	r0, [pc, #12]	; (8007708 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80076fa:	f007 fd4c 	bl	800f196 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80076fe:	4803      	ldr	r0, [pc, #12]	; (800770c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007700:	f007 fd49 	bl	800f196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007704:	bf00      	nop
 8007706:	bd80      	pop	{r7, pc}
 8007708:	2004a5a8 	.word	0x2004a5a8
 800770c:	2004a7a4 	.word	0x2004a7a4

08007710 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007714:	4802      	ldr	r0, [pc, #8]	; (8007720 <SDIO_IRQHandler+0x10>)
 8007716:	f005 fde5 	bl	800d2e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800771a:	bf00      	nop
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	2004a904 	.word	0x2004a904

08007724 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007728:	4802      	ldr	r0, [pc, #8]	; (8007734 <TIM6_DAC_IRQHandler+0x10>)
 800772a:	f007 fd34 	bl	800f196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800772e:	bf00      	nop
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	2004a884 	.word	0x2004a884

08007738 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800773c:	4802      	ldr	r0, [pc, #8]	; (8007748 <TIM7_IRQHandler+0x10>)
 800773e:	f007 fd2a 	bl	800f196 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007742:	bf00      	nop
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	2004aa28 	.word	0x2004aa28

0800774c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007750:	4802      	ldr	r0, [pc, #8]	; (800775c <DMA2_Stream2_IRQHandler+0x10>)
 8007752:	f003 f8c9 	bl	800a8e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007756:	bf00      	nop
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	2004a9c8 	.word	0x2004a9c8

08007760 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007764:	4802      	ldr	r0, [pc, #8]	; (8007770 <DMA2_Stream3_IRQHandler+0x10>)
 8007766:	f003 f8bf 	bl	800a8e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800776a:	bf00      	nop
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	2004a4f0 	.word	0x2004a4f0

08007774 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007778:	4802      	ldr	r0, [pc, #8]	; (8007784 <DMA2_Stream6_IRQHandler+0x10>)
 800777a:	f003 f8b5 	bl	800a8e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800777e:	bf00      	nop
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	2004a824 	.word	0x2004a824

08007788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007790:	4a14      	ldr	r2, [pc, #80]	; (80077e4 <_sbrk+0x5c>)
 8007792:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <_sbrk+0x60>)
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800779c:	4b13      	ldr	r3, [pc, #76]	; (80077ec <_sbrk+0x64>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d102      	bne.n	80077aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80077a4:	4b11      	ldr	r3, [pc, #68]	; (80077ec <_sbrk+0x64>)
 80077a6:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <_sbrk+0x68>)
 80077a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077aa:	4b10      	ldr	r3, [pc, #64]	; (80077ec <_sbrk+0x64>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4413      	add	r3, r2
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d207      	bcs.n	80077c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80077b8:	f00c ff2a 	bl	8014610 <__errno>
 80077bc:	4602      	mov	r2, r0
 80077be:	230c      	movs	r3, #12
 80077c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80077c2:	f04f 33ff 	mov.w	r3, #4294967295
 80077c6:	e009      	b.n	80077dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80077c8:	4b08      	ldr	r3, [pc, #32]	; (80077ec <_sbrk+0x64>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80077ce:	4b07      	ldr	r3, [pc, #28]	; (80077ec <_sbrk+0x64>)
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4413      	add	r3, r2
 80077d6:	4a05      	ldr	r2, [pc, #20]	; (80077ec <_sbrk+0x64>)
 80077d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80077da:	68fb      	ldr	r3, [r7, #12]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20050000 	.word	0x20050000
 80077e8:	00000800 	.word	0x00000800
 80077ec:	20000238 	.word	0x20000238
 80077f0:	2004cb78 	.word	0x2004cb78

080077f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80077f8:	4b08      	ldr	r3, [pc, #32]	; (800781c <SystemInit+0x28>)
 80077fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fe:	4a07      	ldr	r2, [pc, #28]	; (800781c <SystemInit+0x28>)
 8007800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007808:	4b04      	ldr	r3, [pc, #16]	; (800781c <SystemInit+0x28>)
 800780a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800780e:	609a      	str	r2, [r3, #8]
#endif
}
 8007810:	bf00      	nop
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	e000ed00 	.word	0xe000ed00

08007820 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007820:	b598      	push	{r3, r4, r7, lr}
 8007822:	af00      	add	r7, sp, #0
	lcd_init();
 8007824:	f7f9 fbf8 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007828:	483b      	ldr	r0, [pc, #236]	; (8007918 <cppInit+0xf8>)
 800782a:	f7fd fd53 	bl	80052d4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800782e:	2064      	movs	r0, #100	; 0x64
 8007830:	f002 f9fa 	bl	8009c28 <HAL_Delay>
	power_sensor.updateValues();
 8007834:	4838      	ldr	r0, [pc, #224]	; (8007918 <cppInit+0xf8>)
 8007836:	f7fd fd5b 	bl	80052f0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800783a:	f7f9 fc31 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800783e:	2100      	movs	r1, #0
 8007840:	2000      	movs	r0, #0
 8007842:	f7f9 fc3d 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007846:	4835      	ldr	r0, [pc, #212]	; (800791c <cppInit+0xfc>)
 8007848:	f7f9 fc64 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800784c:	2101      	movs	r1, #1
 800784e:	2000      	movs	r0, #0
 8007850:	f7f9 fc36 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007854:	4830      	ldr	r0, [pc, #192]	; (8007918 <cppInit+0xf8>)
 8007856:	f7fd fd75 	bl	8005344 <_ZN11PowerSensor17getButteryVoltageEv>
 800785a:	ee10 3a10 	vmov	r3, s0
 800785e:	4618      	mov	r0, r3
 8007860:	f7f8 fe8a 	bl	8000578 <__aeabi_f2d>
 8007864:	4603      	mov	r3, r0
 8007866:	460c      	mov	r4, r1
 8007868:	461a      	mov	r2, r3
 800786a:	4623      	mov	r3, r4
 800786c:	482c      	ldr	r0, [pc, #176]	; (8007920 <cppInit+0x100>)
 800786e:	f7f9 fc51 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 8007872:	f44f 7048 	mov.w	r0, #800	; 0x320
 8007876:	f002 f9d7 	bl	8009c28 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800787a:	482a      	ldr	r0, [pc, #168]	; (8007924 <cppInit+0x104>)
 800787c:	f7fd f818 	bl	80048b0 <_ZN6Logger10sdCardInitEv>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d007      	beq.n	8007896 <cppInit+0x76>
		led.fullColor('G');
 8007886:	2147      	movs	r1, #71	; 0x47
 8007888:	4827      	ldr	r0, [pc, #156]	; (8007928 <cppInit+0x108>)
 800788a:	f7fa fc33 	bl	80020f4 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800788e:	2064      	movs	r0, #100	; 0x64
 8007890:	f002 f9ca 	bl	8009c28 <HAL_Delay>
 8007894:	e006      	b.n	80078a4 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007896:	2152      	movs	r1, #82	; 0x52
 8007898:	4823      	ldr	r0, [pc, #140]	; (8007928 <cppInit+0x108>)
 800789a:	f7fa fc2b 	bl	80020f4 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800789e:	2064      	movs	r0, #100	; 0x64
 80078a0:	f002 f9c2 	bl	8009c28 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80078a4:	4821      	ldr	r0, [pc, #132]	; (800792c <cppInit+0x10c>)
 80078a6:	f7fa fd81 	bl	80023ac <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80078aa:	4821      	ldr	r0, [pc, #132]	; (8007930 <cppInit+0x110>)
 80078ac:	f7fd faba 	bl	8004e24 <_ZN5Motor4initEv>
	encoder.init();
 80078b0:	4820      	ldr	r0, [pc, #128]	; (8007934 <cppInit+0x114>)
 80078b2:	f7f9 fdbb 	bl	800142c <_ZN7Encoder4initEv>
	imu.init();
 80078b6:	4820      	ldr	r0, [pc, #128]	; (8007938 <cppInit+0x118>)
 80078b8:	f7fa f9dc 	bl	8001c74 <_ZN3IMU4initEv>
	line_trace.init();
 80078bc:	481f      	ldr	r0, [pc, #124]	; (800793c <cppInit+0x11c>)
 80078be:	f7fc f879 	bl	80039b4 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80078c2:	481a      	ldr	r0, [pc, #104]	; (800792c <cppInit+0x10c>)
 80078c4:	f7fa fe68 	bl	8002598 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80078c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078cc:	f002 f9ac 	bl	8009c28 <HAL_Delay>

	led.fullColor('M');
 80078d0:	214d      	movs	r1, #77	; 0x4d
 80078d2:	4815      	ldr	r0, [pc, #84]	; (8007928 <cppInit+0x108>)
 80078d4:	f7fa fc0e 	bl	80020f4 <_ZN3LED9fullColorEc>
	imu.calibration();
 80078d8:	4817      	ldr	r0, [pc, #92]	; (8007938 <cppInit+0x118>)
 80078da:	f7fa fa93 	bl	8001e04 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 80078de:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007940 <cppInit+0x120>
 80078e2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007944 <cppInit+0x124>
 80078e6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007948 <cppInit+0x128>
 80078ea:	4818      	ldr	r0, [pc, #96]	; (800794c <cppInit+0x12c>)
 80078ec:	f7fe f9dc 	bl	8005ca8 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 80078f0:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8007940 <cppInit+0x120>
 80078f4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007950 <cppInit+0x130>
 80078f8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007954 <cppInit+0x134>
 80078fc:	4813      	ldr	r0, [pc, #76]	; (800794c <cppInit+0x12c>)
 80078fe:	f7fe f9ec 	bl	8005cda <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007902:	4815      	ldr	r0, [pc, #84]	; (8007958 <cppInit+0x138>)
 8007904:	f7fd fbf0 	bl	80050e8 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007908:	4814      	ldr	r0, [pc, #80]	; (800795c <cppInit+0x13c>)
 800790a:	f7fd fc87 	bl	800521c <_ZN13PathFollowing4initEv>

	esc.init();
 800790e:	4814      	ldr	r0, [pc, #80]	; (8007960 <cppInit+0x140>)
 8007910:	f7f9 fc6c 	bl	80011ec <_ZN3ESC4initEv>

}
 8007914:	bf00      	nop
 8007916:	bd98      	pop	{r3, r4, r7, pc}
 8007918:	20000550 	.word	0x20000550
 800791c:	08018c5c 	.word	0x08018c5c
 8007920:	08018c64 	.word	0x08018c64
 8007924:	20000570 	.word	0x20000570
 8007928:	2000054c 	.word	0x2000054c
 800792c:	2000023c 	.word	0x2000023c
 8007930:	20000548 	.word	0x20000548
 8007934:	200237fc 	.word	0x200237fc
 8007938:	2000055c 	.word	0x2000055c
 800793c:	200238a4 	.word	0x200238a4
 8007940:	00000000 	.word	0x00000000
 8007944:	4129999a 	.word	0x4129999a
 8007948:	3f99999a 	.word	0x3f99999a
 800794c:	20023820 	.word	0x20023820
 8007950:	3f5e3fbc 	.word	0x3f5e3fbc
 8007954:	3d75c28f 	.word	0x3d75c28f
 8007958:	20023860 	.word	0x20023860
 800795c:	200309f0 	.word	0x200309f0
 8007960:	200238a0 	.word	0x200238a0

08007964 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007968:	480e      	ldr	r0, [pc, #56]	; (80079a4 <cppFlip1ms+0x40>)
 800796a:	f7fa fd7d 	bl	8002468 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800796e:	480e      	ldr	r0, [pc, #56]	; (80079a8 <cppFlip1ms+0x44>)
 8007970:	f7fa f9a6 	bl	8001cc0 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007974:	480d      	ldr	r0, [pc, #52]	; (80079ac <cppFlip1ms+0x48>)
 8007976:	f7f9 fd7b 	bl	8001470 <_ZN7Encoder6updateEv>
	line_trace.flip();
 800797a:	480d      	ldr	r0, [pc, #52]	; (80079b0 <cppFlip1ms+0x4c>)
 800797c:	f7fc fac0 	bl	8003f00 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007980:	480c      	ldr	r0, [pc, #48]	; (80079b4 <cppFlip1ms+0x50>)
 8007982:	f7fe f9c3 	bl	8005d0c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007986:	480c      	ldr	r0, [pc, #48]	; (80079b8 <cppFlip1ms+0x54>)
 8007988:	f7fd fb92 	bl	80050b0 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 800798c:	480b      	ldr	r0, [pc, #44]	; (80079bc <cppFlip1ms+0x58>)
 800798e:	f7fd fd55 	bl	800543c <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007992:	480b      	ldr	r0, [pc, #44]	; (80079c0 <cppFlip1ms+0x5c>)
 8007994:	f7fd fa58 	bl	8004e48 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007998:	4804      	ldr	r0, [pc, #16]	; (80079ac <cppFlip1ms+0x48>)
 800799a:	f7f9 fdf5 	bl	8001588 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 800799e:	bf00      	nop
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	2000023c 	.word	0x2000023c
 80079a8:	2000055c 	.word	0x2000055c
 80079ac:	200237fc 	.word	0x200237fc
 80079b0:	200238a4 	.word	0x200238a4
 80079b4:	20023820 	.word	0x20023820
 80079b8:	20023860 	.word	0x20023860
 80079bc:	20000534 	.word	0x20000534
 80079c0:	20000548 	.word	0x20000548

080079c4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80079c8:	4802      	ldr	r0, [pc, #8]	; (80079d4 <cppFlip100ns+0x10>)
 80079ca:	f7fa fcff 	bl	80023cc <_ZN10LineSensor17storeSensorValuesEv>
}
 80079ce:	bf00      	nop
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	2000023c 	.word	0x2000023c

080079d8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80079dc:	bf00      	nop
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80079e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 80079ee:	4baf      	ldr	r3, [pc, #700]	; (8007cac <cppLoop+0x2c4>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	f3bf 8f5b 	dmb	ish
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	bf0c      	ite	eq
 8007a00:	2301      	moveq	r3, #1
 8007a02:	2300      	movne	r3, #0
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d015      	beq.n	8007a36 <cppLoop+0x4e>
 8007a0a:	48a8      	ldr	r0, [pc, #672]	; (8007cac <cppLoop+0x2c4>)
 8007a0c:	f00c fdf1 	bl	80145f2 <__cxa_guard_acquire>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bf14      	ite	ne
 8007a16:	2301      	movne	r3, #1
 8007a18:	2300      	moveq	r3, #0
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <cppLoop+0x4e>
 8007a20:	48a3      	ldr	r0, [pc, #652]	; (8007cb0 <cppLoop+0x2c8>)
 8007a22:	f7fc f8ce 	bl	8003bc2 <_ZN9LineTrace5getKpEv>
 8007a26:	eef0 7a40 	vmov.f32	s15, s0
 8007a2a:	4ba2      	ldr	r3, [pc, #648]	; (8007cb4 <cppLoop+0x2cc>)
 8007a2c:	edc3 7a00 	vstr	s15, [r3]
 8007a30:	489e      	ldr	r0, [pc, #632]	; (8007cac <cppLoop+0x2c4>)
 8007a32:	f00c fdea 	bl	801460a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007a36:	4ba0      	ldr	r3, [pc, #640]	; (8007cb8 <cppLoop+0x2d0>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f3bf 8f5b 	dmb	ish
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	bf0c      	ite	eq
 8007a48:	2301      	moveq	r3, #1
 8007a4a:	2300      	movne	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d015      	beq.n	8007a7e <cppLoop+0x96>
 8007a52:	4899      	ldr	r0, [pc, #612]	; (8007cb8 <cppLoop+0x2d0>)
 8007a54:	f00c fdcd 	bl	80145f2 <__cxa_guard_acquire>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	bf14      	ite	ne
 8007a5e:	2301      	movne	r3, #1
 8007a60:	2300      	moveq	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <cppLoop+0x96>
 8007a68:	4891      	ldr	r0, [pc, #580]	; (8007cb0 <cppLoop+0x2c8>)
 8007a6a:	f7fc f8b9 	bl	8003be0 <_ZN9LineTrace5getKiEv>
 8007a6e:	eef0 7a40 	vmov.f32	s15, s0
 8007a72:	4b92      	ldr	r3, [pc, #584]	; (8007cbc <cppLoop+0x2d4>)
 8007a74:	edc3 7a00 	vstr	s15, [r3]
 8007a78:	488f      	ldr	r0, [pc, #572]	; (8007cb8 <cppLoop+0x2d0>)
 8007a7a:	f00c fdc6 	bl	801460a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007a7e:	4b90      	ldr	r3, [pc, #576]	; (8007cc0 <cppLoop+0x2d8>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	f3bf 8f5b 	dmb	ish
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bf0c      	ite	eq
 8007a90:	2301      	moveq	r3, #1
 8007a92:	2300      	movne	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d015      	beq.n	8007ac6 <cppLoop+0xde>
 8007a9a:	4889      	ldr	r0, [pc, #548]	; (8007cc0 <cppLoop+0x2d8>)
 8007a9c:	f00c fda9 	bl	80145f2 <__cxa_guard_acquire>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	bf14      	ite	ne
 8007aa6:	2301      	movne	r3, #1
 8007aa8:	2300      	moveq	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <cppLoop+0xde>
 8007ab0:	487f      	ldr	r0, [pc, #508]	; (8007cb0 <cppLoop+0x2c8>)
 8007ab2:	f7fc f8a4 	bl	8003bfe <_ZN9LineTrace5getKdEv>
 8007ab6:	eef0 7a40 	vmov.f32	s15, s0
 8007aba:	4b82      	ldr	r3, [pc, #520]	; (8007cc4 <cppLoop+0x2dc>)
 8007abc:	edc3 7a00 	vstr	s15, [r3]
 8007ac0:	487f      	ldr	r0, [pc, #508]	; (8007cc0 <cppLoop+0x2d8>)
 8007ac2:	f00c fda2 	bl	801460a <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007ac6:	4b80      	ldr	r3, [pc, #512]	; (8007cc8 <cppLoop+0x2e0>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	f3bf 8f5b 	dmb	ish
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	bf0c      	ite	eq
 8007ad8:	2301      	moveq	r3, #1
 8007ada:	2300      	movne	r3, #0
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d015      	beq.n	8007b0e <cppLoop+0x126>
 8007ae2:	4879      	ldr	r0, [pc, #484]	; (8007cc8 <cppLoop+0x2e0>)
 8007ae4:	f00c fd85 	bl	80145f2 <__cxa_guard_acquire>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <cppLoop+0x126>
 8007af8:	486d      	ldr	r0, [pc, #436]	; (8007cb0 <cppLoop+0x2c8>)
 8007afa:	f7fc f8a8 	bl	8003c4e <_ZN9LineTrace9getKpSlowEv>
 8007afe:	eef0 7a40 	vmov.f32	s15, s0
 8007b02:	4b72      	ldr	r3, [pc, #456]	; (8007ccc <cppLoop+0x2e4>)
 8007b04:	edc3 7a00 	vstr	s15, [r3]
 8007b08:	486f      	ldr	r0, [pc, #444]	; (8007cc8 <cppLoop+0x2e0>)
 8007b0a:	f00c fd7e 	bl	801460a <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007b0e:	4b70      	ldr	r3, [pc, #448]	; (8007cd0 <cppLoop+0x2e8>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	f3bf 8f5b 	dmb	ish
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bf0c      	ite	eq
 8007b20:	2301      	moveq	r3, #1
 8007b22:	2300      	movne	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d015      	beq.n	8007b56 <cppLoop+0x16e>
 8007b2a:	4869      	ldr	r0, [pc, #420]	; (8007cd0 <cppLoop+0x2e8>)
 8007b2c:	f00c fd61 	bl	80145f2 <__cxa_guard_acquire>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	bf14      	ite	ne
 8007b36:	2301      	movne	r3, #1
 8007b38:	2300      	moveq	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <cppLoop+0x16e>
 8007b40:	485b      	ldr	r0, [pc, #364]	; (8007cb0 <cppLoop+0x2c8>)
 8007b42:	f7fc f893 	bl	8003c6c <_ZN9LineTrace9getKiSlowEv>
 8007b46:	eef0 7a40 	vmov.f32	s15, s0
 8007b4a:	4b62      	ldr	r3, [pc, #392]	; (8007cd4 <cppLoop+0x2ec>)
 8007b4c:	edc3 7a00 	vstr	s15, [r3]
 8007b50:	485f      	ldr	r0, [pc, #380]	; (8007cd0 <cppLoop+0x2e8>)
 8007b52:	f00c fd5a 	bl	801460a <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007b56:	4b60      	ldr	r3, [pc, #384]	; (8007cd8 <cppLoop+0x2f0>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	f3bf 8f5b 	dmb	ish
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bf0c      	ite	eq
 8007b68:	2301      	moveq	r3, #1
 8007b6a:	2300      	movne	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d015      	beq.n	8007b9e <cppLoop+0x1b6>
 8007b72:	4859      	ldr	r0, [pc, #356]	; (8007cd8 <cppLoop+0x2f0>)
 8007b74:	f00c fd3d 	bl	80145f2 <__cxa_guard_acquire>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bf14      	ite	ne
 8007b7e:	2301      	movne	r3, #1
 8007b80:	2300      	moveq	r3, #0
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <cppLoop+0x1b6>
 8007b88:	4849      	ldr	r0, [pc, #292]	; (8007cb0 <cppLoop+0x2c8>)
 8007b8a:	f7fc f87e 	bl	8003c8a <_ZN9LineTrace9getKdSlowEv>
 8007b8e:	eef0 7a40 	vmov.f32	s15, s0
 8007b92:	4b52      	ldr	r3, [pc, #328]	; (8007cdc <cppLoop+0x2f4>)
 8007b94:	edc3 7a00 	vstr	s15, [r3]
 8007b98:	484f      	ldr	r0, [pc, #316]	; (8007cd8 <cppLoop+0x2f0>)
 8007b9a:	f00c fd36 	bl	801460a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007b9e:	4b50      	ldr	r3, [pc, #320]	; (8007ce0 <cppLoop+0x2f8>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	f3bf 8f5b 	dmb	ish
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	bf0c      	ite	eq
 8007bb0:	2301      	moveq	r3, #1
 8007bb2:	2300      	movne	r3, #0
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d015      	beq.n	8007be6 <cppLoop+0x1fe>
 8007bba:	4849      	ldr	r0, [pc, #292]	; (8007ce0 <cppLoop+0x2f8>)
 8007bbc:	f00c fd19 	bl	80145f2 <__cxa_guard_acquire>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bf14      	ite	ne
 8007bc6:	2301      	movne	r3, #1
 8007bc8:	2300      	moveq	r3, #0
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <cppLoop+0x1fe>
 8007bd0:	4837      	ldr	r0, [pc, #220]	; (8007cb0 <cppLoop+0x2c8>)
 8007bd2:	f7fc f8c8 	bl	8003d66 <_ZN9LineTrace17getTargetVelocityEv>
 8007bd6:	eef0 7a40 	vmov.f32	s15, s0
 8007bda:	4b42      	ldr	r3, [pc, #264]	; (8007ce4 <cppLoop+0x2fc>)
 8007bdc:	edc3 7a00 	vstr	s15, [r3]
 8007be0:	483f      	ldr	r0, [pc, #252]	; (8007ce0 <cppLoop+0x2f8>)
 8007be2:	f00c fd12 	bl	801460a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007be6:	4b40      	ldr	r3, [pc, #256]	; (8007ce8 <cppLoop+0x300>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	f3bf 8f5b 	dmb	ish
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bf0c      	ite	eq
 8007bf8:	2301      	moveq	r3, #1
 8007bfa:	2300      	movne	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d015      	beq.n	8007c2e <cppLoop+0x246>
 8007c02:	4839      	ldr	r0, [pc, #228]	; (8007ce8 <cppLoop+0x300>)
 8007c04:	f00c fcf5 	bl	80145f2 <__cxa_guard_acquire>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	bf14      	ite	ne
 8007c0e:	2301      	movne	r3, #1
 8007c10:	2300      	moveq	r3, #0
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00a      	beq.n	8007c2e <cppLoop+0x246>
 8007c18:	4825      	ldr	r0, [pc, #148]	; (8007cb0 <cppLoop+0x2c8>)
 8007c1a:	f7fc f8b4 	bl	8003d86 <_ZN9LineTrace14getMaxVelocityEv>
 8007c1e:	eef0 7a40 	vmov.f32	s15, s0
 8007c22:	4b32      	ldr	r3, [pc, #200]	; (8007cec <cppLoop+0x304>)
 8007c24:	edc3 7a00 	vstr	s15, [r3]
 8007c28:	482f      	ldr	r0, [pc, #188]	; (8007ce8 <cppLoop+0x300>)
 8007c2a:	f00c fcee 	bl	801460a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007c2e:	4b30      	ldr	r3, [pc, #192]	; (8007cf0 <cppLoop+0x308>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f3bf 8f5b 	dmb	ish
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	bf0c      	ite	eq
 8007c40:	2301      	moveq	r3, #1
 8007c42:	2300      	movne	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d015      	beq.n	8007c76 <cppLoop+0x28e>
 8007c4a:	4829      	ldr	r0, [pc, #164]	; (8007cf0 <cppLoop+0x308>)
 8007c4c:	f00c fcd1 	bl	80145f2 <__cxa_guard_acquire>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	bf14      	ite	ne
 8007c56:	2301      	movne	r3, #1
 8007c58:	2300      	moveq	r3, #0
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <cppLoop+0x28e>
 8007c60:	4813      	ldr	r0, [pc, #76]	; (8007cb0 <cppLoop+0x2c8>)
 8007c62:	f7fc f8a0 	bl	8003da6 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007c66:	eef0 7a40 	vmov.f32	s15, s0
 8007c6a:	4b22      	ldr	r3, [pc, #136]	; (8007cf4 <cppLoop+0x30c>)
 8007c6c:	edc3 7a00 	vstr	s15, [r3]
 8007c70:	481f      	ldr	r0, [pc, #124]	; (8007cf0 <cppLoop+0x308>)
 8007c72:	f00c fcca 	bl	801460a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007c76:	4b20      	ldr	r3, [pc, #128]	; (8007cf8 <cppLoop+0x310>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	f3bf 8f5b 	dmb	ish
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	bf0c      	ite	eq
 8007c88:	2301      	moveq	r3, #1
 8007c8a:	2300      	movne	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d03f      	beq.n	8007d12 <cppLoop+0x32a>
 8007c92:	4819      	ldr	r0, [pc, #100]	; (8007cf8 <cppLoop+0x310>)
 8007c94:	f00c fcad 	bl	80145f2 <__cxa_guard_acquire>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bf14      	ite	ne
 8007c9e:	2301      	movne	r3, #1
 8007ca0:	2300      	moveq	r3, #0
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d034      	beq.n	8007d12 <cppLoop+0x32a>
 8007ca8:	e028      	b.n	8007cfc <cppLoop+0x314>
 8007caa:	bf00      	nop
 8007cac:	20048128 	.word	0x20048128
 8007cb0:	200238a4 	.word	0x200238a4
 8007cb4:	20048124 	.word	0x20048124
 8007cb8:	20048130 	.word	0x20048130
 8007cbc:	2004812c 	.word	0x2004812c
 8007cc0:	20048138 	.word	0x20048138
 8007cc4:	20048134 	.word	0x20048134
 8007cc8:	20048140 	.word	0x20048140
 8007ccc:	2004813c 	.word	0x2004813c
 8007cd0:	20048148 	.word	0x20048148
 8007cd4:	20048144 	.word	0x20048144
 8007cd8:	20048150 	.word	0x20048150
 8007cdc:	2004814c 	.word	0x2004814c
 8007ce0:	20048158 	.word	0x20048158
 8007ce4:	20048154 	.word	0x20048154
 8007ce8:	20048160 	.word	0x20048160
 8007cec:	2004815c 	.word	0x2004815c
 8007cf0:	20048168 	.word	0x20048168
 8007cf4:	20048164 	.word	0x20048164
 8007cf8:	20048170 	.word	0x20048170
 8007cfc:	48b6      	ldr	r0, [pc, #728]	; (8007fd8 <cppLoop+0x5f0>)
 8007cfe:	f7fc f862 	bl	8003dc6 <_ZN9LineTrace14getMinVelocityEv>
 8007d02:	eef0 7a40 	vmov.f32	s15, s0
 8007d06:	4bb5      	ldr	r3, [pc, #724]	; (8007fdc <cppLoop+0x5f4>)
 8007d08:	edc3 7a00 	vstr	s15, [r3]
 8007d0c:	48b4      	ldr	r0, [pc, #720]	; (8007fe0 <cppLoop+0x5f8>)
 8007d0e:	f00c fc7c 	bl	801460a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007d12:	4bb4      	ldr	r3, [pc, #720]	; (8007fe4 <cppLoop+0x5fc>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	f3bf 8f5b 	dmb	ish
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d015      	beq.n	8007d5a <cppLoop+0x372>
 8007d2e:	48ad      	ldr	r0, [pc, #692]	; (8007fe4 <cppLoop+0x5fc>)
 8007d30:	f00c fc5f 	bl	80145f2 <__cxa_guard_acquire>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bf14      	ite	ne
 8007d3a:	2301      	movne	r3, #1
 8007d3c:	2300      	moveq	r3, #0
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d00a      	beq.n	8007d5a <cppLoop+0x372>
 8007d44:	48a4      	ldr	r0, [pc, #656]	; (8007fd8 <cppLoop+0x5f0>)
 8007d46:	f7fc f84e 	bl	8003de6 <_ZN9LineTrace15getMinVelocity2Ev>
 8007d4a:	eef0 7a40 	vmov.f32	s15, s0
 8007d4e:	4ba6      	ldr	r3, [pc, #664]	; (8007fe8 <cppLoop+0x600>)
 8007d50:	edc3 7a00 	vstr	s15, [r3]
 8007d54:	48a3      	ldr	r0, [pc, #652]	; (8007fe4 <cppLoop+0x5fc>)
 8007d56:	f00c fc58 	bl	801460a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007d5a:	4ba4      	ldr	r3, [pc, #656]	; (8007fec <cppLoop+0x604>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	f3bf 8f5b 	dmb	ish
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	bf0c      	ite	eq
 8007d6c:	2301      	moveq	r3, #1
 8007d6e:	2300      	movne	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d015      	beq.n	8007da2 <cppLoop+0x3ba>
 8007d76:	489d      	ldr	r0, [pc, #628]	; (8007fec <cppLoop+0x604>)
 8007d78:	f00c fc3b 	bl	80145f2 <__cxa_guard_acquire>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	bf14      	ite	ne
 8007d82:	2301      	movne	r3, #1
 8007d84:	2300      	moveq	r3, #0
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <cppLoop+0x3ba>
 8007d8c:	4892      	ldr	r0, [pc, #584]	; (8007fd8 <cppLoop+0x5f0>)
 8007d8e:	f7fc f86e 	bl	8003e6e <_ZN9LineTrace9getMaxAccEv>
 8007d92:	eef0 7a40 	vmov.f32	s15, s0
 8007d96:	4b96      	ldr	r3, [pc, #600]	; (8007ff0 <cppLoop+0x608>)
 8007d98:	edc3 7a00 	vstr	s15, [r3]
 8007d9c:	4893      	ldr	r0, [pc, #588]	; (8007fec <cppLoop+0x604>)
 8007d9e:	f00c fc34 	bl	801460a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007da2:	4b94      	ldr	r3, [pc, #592]	; (8007ff4 <cppLoop+0x60c>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	f3bf 8f5b 	dmb	ish
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bf0c      	ite	eq
 8007db4:	2301      	moveq	r3, #1
 8007db6:	2300      	movne	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d015      	beq.n	8007dea <cppLoop+0x402>
 8007dbe:	488d      	ldr	r0, [pc, #564]	; (8007ff4 <cppLoop+0x60c>)
 8007dc0:	f00c fc17 	bl	80145f2 <__cxa_guard_acquire>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	bf14      	ite	ne
 8007dca:	2301      	movne	r3, #1
 8007dcc:	2300      	moveq	r3, #0
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00a      	beq.n	8007dea <cppLoop+0x402>
 8007dd4:	4880      	ldr	r0, [pc, #512]	; (8007fd8 <cppLoop+0x5f0>)
 8007dd6:	f7fc f880 	bl	8003eda <_ZN9LineTrace9getMaxDecEv>
 8007dda:	eef0 7a40 	vmov.f32	s15, s0
 8007dde:	4b86      	ldr	r3, [pc, #536]	; (8007ff8 <cppLoop+0x610>)
 8007de0:	edc3 7a00 	vstr	s15, [r3]
 8007de4:	4883      	ldr	r0, [pc, #524]	; (8007ff4 <cppLoop+0x60c>)
 8007de6:	f00c fc10 	bl	801460a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007dea:	4b84      	ldr	r3, [pc, #528]	; (8007ffc <cppLoop+0x614>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	f3bf 8f5b 	dmb	ish
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	bf0c      	ite	eq
 8007dfc:	2301      	moveq	r3, #1
 8007dfe:	2300      	movne	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d015      	beq.n	8007e32 <cppLoop+0x44a>
 8007e06:	487d      	ldr	r0, [pc, #500]	; (8007ffc <cppLoop+0x614>)
 8007e08:	f00c fbf3 	bl	80145f2 <__cxa_guard_acquire>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bf14      	ite	ne
 8007e12:	2301      	movne	r3, #1
 8007e14:	2300      	moveq	r3, #0
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <cppLoop+0x44a>
 8007e1c:	486e      	ldr	r0, [pc, #440]	; (8007fd8 <cppLoop+0x5f0>)
 8007e1e:	f7fc f84a 	bl	8003eb6 <_ZN9LineTrace10getMaxAcc2Ev>
 8007e22:	eef0 7a40 	vmov.f32	s15, s0
 8007e26:	4b76      	ldr	r3, [pc, #472]	; (8008000 <cppLoop+0x618>)
 8007e28:	edc3 7a00 	vstr	s15, [r3]
 8007e2c:	4873      	ldr	r0, [pc, #460]	; (8007ffc <cppLoop+0x614>)
 8007e2e:	f00c fbec 	bl	801460a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007e32:	4b74      	ldr	r3, [pc, #464]	; (8008004 <cppLoop+0x61c>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	f3bf 8f5b 	dmb	ish
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	bf0c      	ite	eq
 8007e44:	2301      	moveq	r3, #1
 8007e46:	2300      	movne	r3, #0
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d015      	beq.n	8007e7a <cppLoop+0x492>
 8007e4e:	486d      	ldr	r0, [pc, #436]	; (8008004 <cppLoop+0x61c>)
 8007e50:	f00c fbcf 	bl	80145f2 <__cxa_guard_acquire>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2301      	movne	r3, #1
 8007e5c:	2300      	moveq	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00a      	beq.n	8007e7a <cppLoop+0x492>
 8007e64:	485c      	ldr	r0, [pc, #368]	; (8007fd8 <cppLoop+0x5f0>)
 8007e66:	f7fc f814 	bl	8003e92 <_ZN9LineTrace10getMaxDec2Ev>
 8007e6a:	eef0 7a40 	vmov.f32	s15, s0
 8007e6e:	4b66      	ldr	r3, [pc, #408]	; (8008008 <cppLoop+0x620>)
 8007e70:	edc3 7a00 	vstr	s15, [r3]
 8007e74:	4863      	ldr	r0, [pc, #396]	; (8008004 <cppLoop+0x61c>)
 8007e76:	f00c fbc8 	bl	801460a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007e7a:	4864      	ldr	r0, [pc, #400]	; (800800c <cppLoop+0x624>)
 8007e7c:	f7fd fa72 	bl	8005364 <_ZN12RotarySwitch8getValueEv>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b0f      	cmp	r3, #15
 8007e84:	f201 8586 	bhi.w	8009994 <cppLoop+0x1fac>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <cppLoop+0x4a8>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ed1 	.word	0x08007ed1
 8007e94:	08008255 	.word	0x08008255
 8007e98:	08008371 	.word	0x08008371
 8007e9c:	080084c3 	.word	0x080084c3
 8007ea0:	080085b7 	.word	0x080085b7
 8007ea4:	08008859 	.word	0x08008859
 8007ea8:	080089c1 	.word	0x080089c1
 8007eac:	08008c45 	.word	0x08008c45
 8007eb0:	08008e8f 	.word	0x08008e8f
 8007eb4:	0800911f 	.word	0x0800911f
 8007eb8:	080091db 	.word	0x080091db
 8007ebc:	080092d1 	.word	0x080092d1
 8007ec0:	08009357 	.word	0x08009357
 8007ec4:	0800941d 	.word	0x0800941d
 8007ec8:	080094e3 	.word	0x080094e3
 8007ecc:	08009625 	.word	0x08009625
	case 0:
		led.fullColor('W');
 8007ed0:	2157      	movs	r1, #87	; 0x57
 8007ed2:	484f      	ldr	r0, [pc, #316]	; (8008010 <cppLoop+0x628>)
 8007ed4:	f7fa f90e 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007ed8:	f7f9 f8e2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007edc:	2100      	movs	r1, #0
 8007ede:	2000      	movs	r0, #0
 8007ee0:	f7f9 f8ee 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 8007ee4:	483c      	ldr	r0, [pc, #240]	; (8007fd8 <cppLoop+0x5f0>)
 8007ee6:	f7fb feb2 	bl	8003c4e <_ZN9LineTrace9getKpSlowEv>
 8007eea:	eeb0 7a40 	vmov.f32	s14, s0
 8007eee:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008014 <cppLoop+0x62c>
 8007ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8007efa:	f7fa fcbd 	bl	8002878 <_ZSt3absf>
 8007efe:	ee10 3a10 	vmov	r3, s0
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7f8 fb38 	bl	8000578 <__aeabi_f2d>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4623      	mov	r3, r4
 8007f10:	4841      	ldr	r0, [pc, #260]	; (8008018 <cppLoop+0x630>)
 8007f12:	f7f9 f8ff 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007f16:	2101      	movs	r1, #1
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f7f9 f8d1 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*100000));
 8007f1e:	482e      	ldr	r0, [pc, #184]	; (8007fd8 <cppLoop+0x5f0>)
 8007f20:	f7fb fea4 	bl	8003c6c <_ZN9LineTrace9getKiSlowEv>
 8007f24:	eeb0 7a40 	vmov.f32	s14, s0
 8007f28:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800801c <cppLoop+0x634>
 8007f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f30:	eeb0 0a67 	vmov.f32	s0, s15
 8007f34:	f7fa fca0 	bl	8002878 <_ZSt3absf>
 8007f38:	ee10 3a10 	vmov	r3, s0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7f8 fb1b 	bl	8000578 <__aeabi_f2d>
 8007f42:	4605      	mov	r5, r0
 8007f44:	460e      	mov	r6, r1
 8007f46:	4824      	ldr	r0, [pc, #144]	; (8007fd8 <cppLoop+0x5f0>)
 8007f48:	f7fb fe9f 	bl	8003c8a <_ZN9LineTrace9getKdSlowEv>
 8007f4c:	eeb0 7a40 	vmov.f32	s14, s0
 8007f50:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008020 <cppLoop+0x638>
 8007f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f58:	eeb0 0a67 	vmov.f32	s0, s15
 8007f5c:	f7fa fc8c 	bl	8002878 <_ZSt3absf>
 8007f60:	ee10 3a10 	vmov	r3, s0
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7f8 fb07 	bl	8000578 <__aeabi_f2d>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	e9cd 3400 	strd	r3, r4, [sp]
 8007f72:	462a      	mov	r2, r5
 8007f74:	4633      	mov	r3, r6
 8007f76:	482b      	ldr	r0, [pc, #172]	; (8008024 <cppLoop+0x63c>)
 8007f78:	f7f9 f8cc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007f7c:	482a      	ldr	r0, [pc, #168]	; (8008028 <cppLoop+0x640>)
 8007f7e:	f7fa f855 	bl	800202c <_ZN8JoyStick8getValueEv>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d04e      	beq.n	8008030 <cppLoop+0x648>
			led.LR(-1, 1);
 8007f92:	2201      	movs	r2, #1
 8007f94:	f04f 31ff 	mov.w	r1, #4294967295
 8007f98:	481d      	ldr	r0, [pc, #116]	; (8008010 <cppLoop+0x628>)
 8007f9a:	f7fa f967 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007fa2:	f001 fe41 	bl	8009c28 <HAL_Delay>

			selector++;
 8007fa6:	4b21      	ldr	r3, [pc, #132]	; (800802c <cppLoop+0x644>)
 8007fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3301      	adds	r3, #1
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	b21a      	sxth	r2, r3
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	; (800802c <cppLoop+0x644>)
 8007fb6:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007fb8:	4b1c      	ldr	r3, [pc, #112]	; (800802c <cppLoop+0x644>)
 8007fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	dd02      	ble.n	8007fc8 <cppLoop+0x5e0>
 8007fc2:	4b1a      	ldr	r3, [pc, #104]	; (800802c <cppLoop+0x644>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f04f 31ff 	mov.w	r1, #4294967295
 8007fce:	4810      	ldr	r0, [pc, #64]	; (8008010 <cppLoop+0x628>)
 8007fd0:	f7fa f94c 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8007fd4:	f001 bce0 	b.w	8009998 <cppLoop+0x1fb0>
 8007fd8:	200238a4 	.word	0x200238a4
 8007fdc:	2004816c 	.word	0x2004816c
 8007fe0:	20048170 	.word	0x20048170
 8007fe4:	20048178 	.word	0x20048178
 8007fe8:	20048174 	.word	0x20048174
 8007fec:	20048180 	.word	0x20048180
 8007ff0:	2004817c 	.word	0x2004817c
 8007ff4:	20048188 	.word	0x20048188
 8007ff8:	20048184 	.word	0x20048184
 8007ffc:	20048190 	.word	0x20048190
 8008000:	2004818c 	.word	0x2004818c
 8008004:	20048198 	.word	0x20048198
 8008008:	20048194 	.word	0x20048194
 800800c:	20000544 	.word	0x20000544
 8008010:	2000054c 	.word	0x2000054c
 8008014:	461c4000 	.word	0x461c4000
 8008018:	08018c68 	.word	0x08018c68
 800801c:	447a0000 	.word	0x447a0000
 8008020:	47c35000 	.word	0x47c35000
 8008024:	08018c74 	.word	0x08018c74
 8008028:	20000540 	.word	0x20000540
 800802c:	20048118 	.word	0x20048118
		else if(joy_stick.getValue() == JOY_R){
 8008030:	48bd      	ldr	r0, [pc, #756]	; (8008328 <cppLoop+0x940>)
 8008032:	f7f9 fffb 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008036:	4603      	mov	r3, r0
 8008038:	2b10      	cmp	r3, #16
 800803a:	bf0c      	ite	eq
 800803c:	2301      	moveq	r3, #1
 800803e:	2300      	movne	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d059      	beq.n	80080fa <cppLoop+0x712>
			led.LR(-1, 1);
 8008046:	2201      	movs	r2, #1
 8008048:	f04f 31ff 	mov.w	r1, #4294967295
 800804c:	48b7      	ldr	r0, [pc, #732]	; (800832c <cppLoop+0x944>)
 800804e:	f7fa f90d 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008052:	2064      	movs	r0, #100	; 0x64
 8008054:	f001 fde8 	bl	8009c28 <HAL_Delay>
			if(selector == 0){
 8008058:	4bb5      	ldr	r3, [pc, #724]	; (8008330 <cppLoop+0x948>)
 800805a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d113      	bne.n	800808a <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.000001;
 8008062:	4bb4      	ldr	r3, [pc, #720]	; (8008334 <cppLoop+0x94c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f7f8 fa86 	bl	8000578 <__aeabi_f2d>
 800806c:	a3a8      	add	r3, pc, #672	; (adr r3, 8008310 <cppLoop+0x928>)
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f7f8 f923 	bl	80002bc <__adddf3>
 8008076:	4603      	mov	r3, r0
 8008078:	460c      	mov	r4, r1
 800807a:	4618      	mov	r0, r3
 800807c:	4621      	mov	r1, r4
 800807e:	f7f8 fdcb 	bl	8000c18 <__aeabi_d2f>
 8008082:	4602      	mov	r2, r0
 8008084:	4bab      	ldr	r3, [pc, #684]	; (8008334 <cppLoop+0x94c>)
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	e02b      	b.n	80080e2 <cppLoop+0x6fa>
			else if(selector == 1){
 800808a:	4ba9      	ldr	r3, [pc, #676]	; (8008330 <cppLoop+0x948>)
 800808c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d113      	bne.n	80080bc <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.00001;
 8008094:	4ba8      	ldr	r3, [pc, #672]	; (8008338 <cppLoop+0x950>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4618      	mov	r0, r3
 800809a:	f7f8 fa6d 	bl	8000578 <__aeabi_f2d>
 800809e:	a39e      	add	r3, pc, #632	; (adr r3, 8008318 <cppLoop+0x930>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f7f8 f90a 	bl	80002bc <__adddf3>
 80080a8:	4603      	mov	r3, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	4618      	mov	r0, r3
 80080ae:	4621      	mov	r1, r4
 80080b0:	f7f8 fdb2 	bl	8000c18 <__aeabi_d2f>
 80080b4:	4602      	mov	r2, r0
 80080b6:	4ba0      	ldr	r3, [pc, #640]	; (8008338 <cppLoop+0x950>)
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	e012      	b.n	80080e2 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.0000001;
 80080bc:	4b9f      	ldr	r3, [pc, #636]	; (800833c <cppLoop+0x954>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7f8 fa59 	bl	8000578 <__aeabi_f2d>
 80080c6:	a396      	add	r3, pc, #600	; (adr r3, 8008320 <cppLoop+0x938>)
 80080c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080cc:	f7f8 f8f6 	bl	80002bc <__adddf3>
 80080d0:	4603      	mov	r3, r0
 80080d2:	460c      	mov	r4, r1
 80080d4:	4618      	mov	r0, r3
 80080d6:	4621      	mov	r1, r4
 80080d8:	f7f8 fd9e 	bl	8000c18 <__aeabi_d2f>
 80080dc:	4602      	mov	r2, r0
 80080de:	4b97      	ldr	r3, [pc, #604]	; (800833c <cppLoop+0x954>)
 80080e0:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80080e2:	2152      	movs	r1, #82	; 0x52
 80080e4:	4891      	ldr	r0, [pc, #580]	; (800832c <cppLoop+0x944>)
 80080e6:	f7fa f805 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80080ea:	2200      	movs	r2, #0
 80080ec:	f04f 31ff 	mov.w	r1, #4294967295
 80080f0:	488e      	ldr	r0, [pc, #568]	; (800832c <cppLoop+0x944>)
 80080f2:	f7fa f8bb 	bl	800226c <_ZN3LED2LREaa>
		break;
 80080f6:	f001 bc4f 	b.w	8009998 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_L){
 80080fa:	488b      	ldr	r0, [pc, #556]	; (8008328 <cppLoop+0x940>)
 80080fc:	f7f9 ff96 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008100:	4603      	mov	r3, r0
 8008102:	2b01      	cmp	r3, #1
 8008104:	bf0c      	ite	eq
 8008106:	2301      	moveq	r3, #1
 8008108:	2300      	movne	r3, #0
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d059      	beq.n	80081c4 <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008110:	2201      	movs	r2, #1
 8008112:	f04f 31ff 	mov.w	r1, #4294967295
 8008116:	4885      	ldr	r0, [pc, #532]	; (800832c <cppLoop+0x944>)
 8008118:	f7fa f8a8 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800811c:	2064      	movs	r0, #100	; 0x64
 800811e:	f001 fd83 	bl	8009c28 <HAL_Delay>
			if(selector == 0){
 8008122:	4b83      	ldr	r3, [pc, #524]	; (8008330 <cppLoop+0x948>)
 8008124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d113      	bne.n	8008154 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 800812c:	4b81      	ldr	r3, [pc, #516]	; (8008334 <cppLoop+0x94c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4618      	mov	r0, r3
 8008132:	f7f8 fa21 	bl	8000578 <__aeabi_f2d>
 8008136:	a376      	add	r3, pc, #472	; (adr r3, 8008310 <cppLoop+0x928>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f7f8 f8bc 	bl	80002b8 <__aeabi_dsub>
 8008140:	4603      	mov	r3, r0
 8008142:	460c      	mov	r4, r1
 8008144:	4618      	mov	r0, r3
 8008146:	4621      	mov	r1, r4
 8008148:	f7f8 fd66 	bl	8000c18 <__aeabi_d2f>
 800814c:	4602      	mov	r2, r0
 800814e:	4b79      	ldr	r3, [pc, #484]	; (8008334 <cppLoop+0x94c>)
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e02b      	b.n	80081ac <cppLoop+0x7c4>
			else if(selector == 1){
 8008154:	4b76      	ldr	r3, [pc, #472]	; (8008330 <cppLoop+0x948>)
 8008156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d113      	bne.n	8008186 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 800815e:	4b76      	ldr	r3, [pc, #472]	; (8008338 <cppLoop+0x950>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4618      	mov	r0, r3
 8008164:	f7f8 fa08 	bl	8000578 <__aeabi_f2d>
 8008168:	a36b      	add	r3, pc, #428	; (adr r3, 8008318 <cppLoop+0x930>)
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	f7f8 f8a3 	bl	80002b8 <__aeabi_dsub>
 8008172:	4603      	mov	r3, r0
 8008174:	460c      	mov	r4, r1
 8008176:	4618      	mov	r0, r3
 8008178:	4621      	mov	r1, r4
 800817a:	f7f8 fd4d 	bl	8000c18 <__aeabi_d2f>
 800817e:	4602      	mov	r2, r0
 8008180:	4b6d      	ldr	r3, [pc, #436]	; (8008338 <cppLoop+0x950>)
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	e012      	b.n	80081ac <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.0000001;
 8008186:	4b6d      	ldr	r3, [pc, #436]	; (800833c <cppLoop+0x954>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4618      	mov	r0, r3
 800818c:	f7f8 f9f4 	bl	8000578 <__aeabi_f2d>
 8008190:	a363      	add	r3, pc, #396	; (adr r3, 8008320 <cppLoop+0x938>)
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f7f8 f88f 	bl	80002b8 <__aeabi_dsub>
 800819a:	4603      	mov	r3, r0
 800819c:	460c      	mov	r4, r1
 800819e:	4618      	mov	r0, r3
 80081a0:	4621      	mov	r1, r4
 80081a2:	f7f8 fd39 	bl	8000c18 <__aeabi_d2f>
 80081a6:	4602      	mov	r2, r0
 80081a8:	4b64      	ldr	r3, [pc, #400]	; (800833c <cppLoop+0x954>)
 80081aa:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80081ac:	2152      	movs	r1, #82	; 0x52
 80081ae:	485f      	ldr	r0, [pc, #380]	; (800832c <cppLoop+0x944>)
 80081b0:	f7f9 ffa0 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80081b4:	2200      	movs	r2, #0
 80081b6:	f04f 31ff 	mov.w	r1, #4294967295
 80081ba:	485c      	ldr	r0, [pc, #368]	; (800832c <cppLoop+0x944>)
 80081bc:	f7fa f856 	bl	800226c <_ZN3LED2LREaa>
		break;
 80081c0:	f001 bbea 	b.w	8009998 <cppLoop+0x1fb0>
		else if(joy_stick.getValue() == JOY_C){
 80081c4:	4858      	ldr	r0, [pc, #352]	; (8008328 <cppLoop+0x940>)
 80081c6:	f7f9 ff31 	bl	800202c <_ZN8JoyStick8getValueEv>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	bf0c      	ite	eq
 80081d0:	2301      	moveq	r3, #1
 80081d2:	2300      	movne	r3, #0
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f001 83de 	beq.w	8009998 <cppLoop+0x1fb0>
			led.LR(-1, 1);
 80081dc:	2201      	movs	r2, #1
 80081de:	f04f 31ff 	mov.w	r1, #4294967295
 80081e2:	4852      	ldr	r0, [pc, #328]	; (800832c <cppLoop+0x944>)
 80081e4:	f7fa f842 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80081e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80081ec:	f001 fd1c 	bl	8009c28 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 80081f0:	2300      	movs	r3, #0
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4b4f      	ldr	r3, [pc, #316]	; (8008334 <cppLoop+0x94c>)
 80081f6:	2201      	movs	r2, #1
 80081f8:	4951      	ldr	r1, [pc, #324]	; (8008340 <cppLoop+0x958>)
 80081fa:	4852      	ldr	r0, [pc, #328]	; (8008344 <cppLoop+0x95c>)
 80081fc:	f7f9 fb00 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008200:	2300      	movs	r3, #0
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	4b4c      	ldr	r3, [pc, #304]	; (8008338 <cppLoop+0x950>)
 8008206:	2201      	movs	r2, #1
 8008208:	494f      	ldr	r1, [pc, #316]	; (8008348 <cppLoop+0x960>)
 800820a:	484e      	ldr	r0, [pc, #312]	; (8008344 <cppLoop+0x95c>)
 800820c:	f7f9 faf8 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008210:	2300      	movs	r3, #0
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	4b49      	ldr	r3, [pc, #292]	; (800833c <cppLoop+0x954>)
 8008216:	2201      	movs	r2, #1
 8008218:	494c      	ldr	r1, [pc, #304]	; (800834c <cppLoop+0x964>)
 800821a:	484a      	ldr	r0, [pc, #296]	; (8008344 <cppLoop+0x95c>)
 800821c:	f7f9 faf0 	bl	8001800 <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008220:	4b44      	ldr	r3, [pc, #272]	; (8008334 <cppLoop+0x94c>)
 8008222:	edd3 7a00 	vldr	s15, [r3]
 8008226:	4b44      	ldr	r3, [pc, #272]	; (8008338 <cppLoop+0x950>)
 8008228:	ed93 7a00 	vldr	s14, [r3]
 800822c:	4b43      	ldr	r3, [pc, #268]	; (800833c <cppLoop+0x954>)
 800822e:	edd3 6a00 	vldr	s13, [r3]
 8008232:	eeb0 1a66 	vmov.f32	s2, s13
 8008236:	eef0 0a47 	vmov.f32	s1, s14
 800823a:	eeb0 0a67 	vmov.f32	s0, s15
 800823e:	4844      	ldr	r0, [pc, #272]	; (8008350 <cppLoop+0x968>)
 8008240:	f7fb fcec 	bl	8003c1c <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008244:	2200      	movs	r2, #0
 8008246:	f04f 31ff 	mov.w	r1, #4294967295
 800824a:	4838      	ldr	r0, [pc, #224]	; (800832c <cppLoop+0x944>)
 800824c:	f7fa f80e 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008250:	f001 bba2 	b.w	8009998 <cppLoop+0x1fb0>

	case 1:
		led.fullColor('C');
 8008254:	2143      	movs	r1, #67	; 0x43
 8008256:	4835      	ldr	r0, [pc, #212]	; (800832c <cppLoop+0x944>)
 8008258:	f7f9 ff4c 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 800825c:	f7f8 ff20 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008260:	2100      	movs	r1, #0
 8008262:	2000      	movs	r0, #0
 8008264:	f7f8 ff2c 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008268:	483a      	ldr	r0, [pc, #232]	; (8008354 <cppLoop+0x96c>)
 800826a:	f7f8 ff53 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800826e:	2101      	movs	r1, #1
 8008270:	2000      	movs	r0, #0
 8008272:	f7f8 ff25 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8008276:	4b38      	ldr	r3, [pc, #224]	; (8008358 <cppLoop+0x970>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4618      	mov	r0, r3
 800827c:	f7f8 f97c 	bl	8000578 <__aeabi_f2d>
 8008280:	4603      	mov	r3, r0
 8008282:	460c      	mov	r4, r1
 8008284:	461a      	mov	r2, r3
 8008286:	4623      	mov	r3, r4
 8008288:	4834      	ldr	r0, [pc, #208]	; (800835c <cppLoop+0x974>)
 800828a:	f7f8 ff43 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800828e:	4826      	ldr	r0, [pc, #152]	; (8008328 <cppLoop+0x940>)
 8008290:	f7f9 fecc 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008294:	4603      	mov	r3, r0
 8008296:	2b02      	cmp	r3, #2
 8008298:	bf0c      	ite	eq
 800829a:	2301      	moveq	r3, #1
 800829c:	2300      	movne	r3, #0
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f001 837b 	beq.w	800999c <cppLoop+0x1fb4>
			HAL_Delay(500);
 80082a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80082aa:	f001 fcbd 	bl	8009c28 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 80082ae:	4b2a      	ldr	r3, [pc, #168]	; (8008358 <cppLoop+0x970>)
 80082b0:	edd3 7a00 	vldr	s15, [r3]
 80082b4:	eeb0 0a67 	vmov.f32	s0, s15
 80082b8:	4825      	ldr	r0, [pc, #148]	; (8008350 <cppLoop+0x968>)
 80082ba:	f7fb fd04 	bl	8003cc6 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80082be:	f04f 32ff 	mov.w	r2, #4294967295
 80082c2:	2101      	movs	r1, #1
 80082c4:	4819      	ldr	r0, [pc, #100]	; (800832c <cppLoop+0x944>)
 80082c6:	f7f9 ffd1 	bl	800226c <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 80082ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082ce:	f001 fcab 	bl	8009c28 <HAL_Delay>
			//logger.start();

			// Run
			line_trace.setMode(FIRST_RUNNING);
 80082d2:	2100      	movs	r1, #0
 80082d4:	481e      	ldr	r0, [pc, #120]	; (8008350 <cppLoop+0x968>)
 80082d6:	f7fb ff65 	bl	80041a4 <_ZN9LineTrace7setModeEs>

			logger.start();
 80082da:	4821      	ldr	r0, [pc, #132]	; (8008360 <cppLoop+0x978>)
 80082dc:	f7fc fd60 	bl	8004da0 <_ZN6Logger5startEv>

			line_trace.running();
 80082e0:	481b      	ldr	r0, [pc, #108]	; (8008350 <cppLoop+0x968>)
 80082e2:	f7fb ffa3 	bl	800422c <_ZN9LineTrace7runningEv>

			logger.stop();
 80082e6:	481e      	ldr	r0, [pc, #120]	; (8008360 <cppLoop+0x978>)
 80082e8:	f7fc fd79 	bl	8004dde <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 80082ec:	4a1d      	ldr	r2, [pc, #116]	; (8008364 <cppLoop+0x97c>)
 80082ee:	491e      	ldr	r1, [pc, #120]	; (8008368 <cppLoop+0x980>)
 80082f0:	481b      	ldr	r0, [pc, #108]	; (8008360 <cppLoop+0x978>)
 80082f2:	f7fc fc50 	bl	8004b96 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 80082f6:	4a1d      	ldr	r2, [pc, #116]	; (800836c <cppLoop+0x984>)
 80082f8:	491b      	ldr	r1, [pc, #108]	; (8008368 <cppLoop+0x980>)
 80082fa:	4819      	ldr	r0, [pc, #100]	; (8008360 <cppLoop+0x978>)
 80082fc:	f7fc fc5f 	bl	8004bbe <_ZN6Logger9saveLogs2EPKcS1_>
			// Record stop and save
			//logger.stop();
			//logger.saveLogsInt("STATELOG", "LPERIOD.txt");
			//logger.saveLogs2Int("STATELOG", "RPERIOD.txt");

			led.LR(0, -1);
 8008300:	f04f 32ff 	mov.w	r2, #4294967295
 8008304:	2100      	movs	r1, #0
 8008306:	4809      	ldr	r0, [pc, #36]	; (800832c <cppLoop+0x944>)
 8008308:	f7f9 ffb0 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 800830c:	f001 bb46 	b.w	800999c <cppLoop+0x1fb4>
 8008310:	a0b5ed8d 	.word	0xa0b5ed8d
 8008314:	3eb0c6f7 	.word	0x3eb0c6f7
 8008318:	88e368f1 	.word	0x88e368f1
 800831c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008320:	9abcaf48 	.word	0x9abcaf48
 8008324:	3e7ad7f2 	.word	0x3e7ad7f2
 8008328:	20000540 	.word	0x20000540
 800832c:	2000054c 	.word	0x2000054c
 8008330:	20048118 	.word	0x20048118
 8008334:	2004813c 	.word	0x2004813c
 8008338:	20048144 	.word	0x20048144
 800833c:	2004814c 	.word	0x2004814c
 8008340:	08018c84 	.word	0x08018c84
 8008344:	08018c90 	.word	0x08018c90
 8008348:	08018c98 	.word	0x08018c98
 800834c:	08018ca4 	.word	0x08018ca4
 8008350:	200238a4 	.word	0x200238a4
 8008354:	08018cb0 	.word	0x08018cb0
 8008358:	20048154 	.word	0x20048154
 800835c:	08018cbc 	.word	0x08018cbc
 8008360:	20000570 	.word	0x20000570
 8008364:	08018cc8 	.word	0x08018cc8
 8008368:	08018cd4 	.word	0x08018cd4
 800836c:	08018ce0 	.word	0x08018ce0

	case 2:
		led.fullColor('B');
 8008370:	2142      	movs	r1, #66	; 0x42
 8008372:	48c1      	ldr	r0, [pc, #772]	; (8008678 <cppLoop+0xc90>)
 8008374:	f7f9 febe 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008378:	f7f8 fe92 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800837c:	2100      	movs	r1, #0
 800837e:	2000      	movs	r0, #0
 8008380:	f7f8 fe9e 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008384:	48bd      	ldr	r0, [pc, #756]	; (800867c <cppLoop+0xc94>)
 8008386:	f7f8 fec5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800838a:	2101      	movs	r1, #1
 800838c:	2000      	movs	r0, #0
 800838e:	f7f8 fe97 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8008392:	4bbb      	ldr	r3, [pc, #748]	; (8008680 <cppLoop+0xc98>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4618      	mov	r0, r3
 8008398:	f7f8 f8ee 	bl	8000578 <__aeabi_f2d>
 800839c:	4603      	mov	r3, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	461a      	mov	r2, r3
 80083a2:	4623      	mov	r3, r4
 80083a4:	48b7      	ldr	r0, [pc, #732]	; (8008684 <cppLoop+0xc9c>)
 80083a6:	f7f8 feb5 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80083aa:	48b7      	ldr	r0, [pc, #732]	; (8008688 <cppLoop+0xca0>)
 80083ac:	f7f9 fe3e 	bl	800202c <_ZN8JoyStick8getValueEv>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	bf0c      	ite	eq
 80083b6:	2301      	moveq	r3, #1
 80083b8:	2300      	movne	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d023      	beq.n	8008408 <cppLoop+0xa20>
			led.LR(-1, 1);
 80083c0:	2201      	movs	r2, #1
 80083c2:	f04f 31ff 	mov.w	r1, #4294967295
 80083c6:	48ac      	ldr	r0, [pc, #688]	; (8008678 <cppLoop+0xc90>)
 80083c8:	f7f9 ff50 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80083cc:	2064      	movs	r0, #100	; 0x64
 80083ce:	f001 fc2b 	bl	8009c28 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80083d2:	4bab      	ldr	r3, [pc, #684]	; (8008680 <cppLoop+0xc98>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7f8 f8ce 	bl	8000578 <__aeabi_f2d>
 80083dc:	a3a4      	add	r3, pc, #656	; (adr r3, 8008670 <cppLoop+0xc88>)
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	f7f7 ff6b 	bl	80002bc <__adddf3>
 80083e6:	4603      	mov	r3, r0
 80083e8:	460c      	mov	r4, r1
 80083ea:	4618      	mov	r0, r3
 80083ec:	4621      	mov	r1, r4
 80083ee:	f7f8 fc13 	bl	8000c18 <__aeabi_d2f>
 80083f2:	4602      	mov	r2, r0
 80083f4:	4ba2      	ldr	r3, [pc, #648]	; (8008680 <cppLoop+0xc98>)
 80083f6:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80083f8:	2200      	movs	r2, #0
 80083fa:	f04f 31ff 	mov.w	r1, #4294967295
 80083fe:	489e      	ldr	r0, [pc, #632]	; (8008678 <cppLoop+0xc90>)
 8008400:	f7f9 ff34 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008404:	f001 bacc 	b.w	80099a0 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_L){
 8008408:	489f      	ldr	r0, [pc, #636]	; (8008688 <cppLoop+0xca0>)
 800840a:	f7f9 fe0f 	bl	800202c <_ZN8JoyStick8getValueEv>
 800840e:	4603      	mov	r3, r0
 8008410:	2b01      	cmp	r3, #1
 8008412:	bf0c      	ite	eq
 8008414:	2301      	moveq	r3, #1
 8008416:	2300      	movne	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d023      	beq.n	8008466 <cppLoop+0xa7e>
			led.LR(-1, 1);
 800841e:	2201      	movs	r2, #1
 8008420:	f04f 31ff 	mov.w	r1, #4294967295
 8008424:	4894      	ldr	r0, [pc, #592]	; (8008678 <cppLoop+0xc90>)
 8008426:	f7f9 ff21 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800842a:	2064      	movs	r0, #100	; 0x64
 800842c:	f001 fbfc 	bl	8009c28 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008430:	4b93      	ldr	r3, [pc, #588]	; (8008680 <cppLoop+0xc98>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4618      	mov	r0, r3
 8008436:	f7f8 f89f 	bl	8000578 <__aeabi_f2d>
 800843a:	a38d      	add	r3, pc, #564	; (adr r3, 8008670 <cppLoop+0xc88>)
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f7f7 ff3a 	bl	80002b8 <__aeabi_dsub>
 8008444:	4603      	mov	r3, r0
 8008446:	460c      	mov	r4, r1
 8008448:	4618      	mov	r0, r3
 800844a:	4621      	mov	r1, r4
 800844c:	f7f8 fbe4 	bl	8000c18 <__aeabi_d2f>
 8008450:	4602      	mov	r2, r0
 8008452:	4b8b      	ldr	r3, [pc, #556]	; (8008680 <cppLoop+0xc98>)
 8008454:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008456:	2200      	movs	r2, #0
 8008458:	f04f 31ff 	mov.w	r1, #4294967295
 800845c:	4886      	ldr	r0, [pc, #536]	; (8008678 <cppLoop+0xc90>)
 800845e:	f7f9 ff05 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008462:	f001 ba9d 	b.w	80099a0 <cppLoop+0x1fb8>
		else if(joy_stick.getValue() == JOY_C){
 8008466:	4888      	ldr	r0, [pc, #544]	; (8008688 <cppLoop+0xca0>)
 8008468:	f7f9 fde0 	bl	800202c <_ZN8JoyStick8getValueEv>
 800846c:	4603      	mov	r3, r0
 800846e:	2b02      	cmp	r3, #2
 8008470:	bf0c      	ite	eq
 8008472:	2301      	moveq	r3, #1
 8008474:	2300      	movne	r3, #0
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	f001 8291 	beq.w	80099a0 <cppLoop+0x1fb8>
			led.LR(-1, 1);
 800847e:	2201      	movs	r2, #1
 8008480:	f04f 31ff 	mov.w	r1, #4294967295
 8008484:	487c      	ldr	r0, [pc, #496]	; (8008678 <cppLoop+0xc90>)
 8008486:	f7f9 fef1 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800848a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800848e:	f001 fbcb 	bl	8009c28 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008492:	2300      	movs	r3, #0
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	4b7a      	ldr	r3, [pc, #488]	; (8008680 <cppLoop+0xc98>)
 8008498:	2201      	movs	r2, #1
 800849a:	497c      	ldr	r1, [pc, #496]	; (800868c <cppLoop+0xca4>)
 800849c:	487c      	ldr	r0, [pc, #496]	; (8008690 <cppLoop+0xca8>)
 800849e:	f7f9 f9af 	bl	8001800 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80084a2:	4b77      	ldr	r3, [pc, #476]	; (8008680 <cppLoop+0xc98>)
 80084a4:	edd3 7a00 	vldr	s15, [r3]
 80084a8:	eeb0 0a67 	vmov.f32	s0, s15
 80084ac:	4879      	ldr	r0, [pc, #484]	; (8008694 <cppLoop+0xcac>)
 80084ae:	f7fb fc0a 	bl	8003cc6 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80084b2:	2200      	movs	r2, #0
 80084b4:	f04f 31ff 	mov.w	r1, #4294967295
 80084b8:	486f      	ldr	r0, [pc, #444]	; (8008678 <cppLoop+0xc90>)
 80084ba:	f7f9 fed7 	bl	800226c <_ZN3LED2LREaa>
		break;
 80084be:	f001 ba6f 	b.w	80099a0 <cppLoop+0x1fb8>

	case 3:
		led.fullColor('Y');
 80084c2:	2159      	movs	r1, #89	; 0x59
 80084c4:	486c      	ldr	r0, [pc, #432]	; (8008678 <cppLoop+0xc90>)
 80084c6:	f7f9 fe15 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80084ca:	f7f8 fde9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084ce:	2100      	movs	r1, #0
 80084d0:	2000      	movs	r0, #0
 80084d2:	f7f8 fdf5 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80084d6:	4b70      	ldr	r3, [pc, #448]	; (8008698 <cppLoop+0xcb0>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4618      	mov	r0, r3
 80084dc:	f7f8 f84c 	bl	8000578 <__aeabi_f2d>
 80084e0:	4603      	mov	r3, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	461a      	mov	r2, r3
 80084e6:	4623      	mov	r3, r4
 80084e8:	486c      	ldr	r0, [pc, #432]	; (800869c <cppLoop+0xcb4>)
 80084ea:	f7f8 fe13 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084ee:	2101      	movs	r1, #1
 80084f0:	2000      	movs	r0, #0
 80084f2:	f7f8 fde5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 80084f6:	4b6a      	ldr	r3, [pc, #424]	; (80086a0 <cppLoop+0xcb8>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7f8 f83c 	bl	8000578 <__aeabi_f2d>
 8008500:	4603      	mov	r3, r0
 8008502:	460c      	mov	r4, r1
 8008504:	461a      	mov	r2, r3
 8008506:	4623      	mov	r3, r4
 8008508:	4866      	ldr	r0, [pc, #408]	; (80086a4 <cppLoop+0xcbc>)
 800850a:	f7f8 fe03 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800850e:	485e      	ldr	r0, [pc, #376]	; (8008688 <cppLoop+0xca0>)
 8008510:	f7f9 fd8c 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008514:	4603      	mov	r3, r0
 8008516:	2b02      	cmp	r3, #2
 8008518:	bf0c      	ite	eq
 800851a:	2301      	moveq	r3, #1
 800851c:	2300      	movne	r3, #0
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	f001 823f 	beq.w	80099a4 <cppLoop+0x1fbc>
			HAL_Delay(500);
 8008526:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800852a:	f001 fb7d 	bl	8009c28 <HAL_Delay>

			led.LR(1, -1);
 800852e:	f04f 32ff 	mov.w	r2, #4294967295
 8008532:	2101      	movs	r1, #1
 8008534:	4850      	ldr	r0, [pc, #320]	; (8008678 <cppLoop+0xc90>)
 8008536:	f7f9 fe99 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800853a:	2101      	movs	r1, #1
 800853c:	4855      	ldr	r0, [pc, #340]	; (8008694 <cppLoop+0xcac>)
 800853e:	f7fb fe31 	bl	80041a4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008542:	4b57      	ldr	r3, [pc, #348]	; (80086a0 <cppLoop+0xcb8>)
 8008544:	edd3 7a00 	vldr	s15, [r3]
 8008548:	eeb0 0a67 	vmov.f32	s0, s15
 800854c:	4851      	ldr	r0, [pc, #324]	; (8008694 <cppLoop+0xcac>)
 800854e:	f7fb fbba 	bl	8003cc6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008552:	4b51      	ldr	r3, [pc, #324]	; (8008698 <cppLoop+0xcb0>)
 8008554:	edd3 7a00 	vldr	s15, [r3]
 8008558:	eeb0 0a67 	vmov.f32	s0, s15
 800855c:	484d      	ldr	r0, [pc, #308]	; (8008694 <cppLoop+0xcac>)
 800855e:	f7fb fbc2 	bl	8003ce6 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008562:	4b4f      	ldr	r3, [pc, #316]	; (80086a0 <cppLoop+0xcb8>)
 8008564:	edd3 7a00 	vldr	s15, [r3]
 8008568:	eeb0 0a67 	vmov.f32	s0, s15
 800856c:	4849      	ldr	r0, [pc, #292]	; (8008694 <cppLoop+0xcac>)
 800856e:	f7fb fbda 	bl	8003d26 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008572:	4848      	ldr	r0, [pc, #288]	; (8008694 <cppLoop+0xcac>)
 8008574:	f7fb ffa8 	bl	80044c8 <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(1000);
 8008578:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800857c:	f001 fb54 	bl	8009c28 <HAL_Delay>

			logger.start();
 8008580:	4849      	ldr	r0, [pc, #292]	; (80086a8 <cppLoop+0xcc0>)
 8008582:	f7fc fc0d 	bl	8004da0 <_ZN6Logger5startEv>

			line_trace.running();
 8008586:	4843      	ldr	r0, [pc, #268]	; (8008694 <cppLoop+0xcac>)
 8008588:	f7fb fe50 	bl	800422c <_ZN9LineTrace7runningEv>

			logger.stop();
 800858c:	4846      	ldr	r0, [pc, #280]	; (80086a8 <cppLoop+0xcc0>)
 800858e:	f7fc fc26 	bl	8004dde <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8008592:	4a46      	ldr	r2, [pc, #280]	; (80086ac <cppLoop+0xcc4>)
 8008594:	4946      	ldr	r1, [pc, #280]	; (80086b0 <cppLoop+0xcc8>)
 8008596:	4844      	ldr	r0, [pc, #272]	; (80086a8 <cppLoop+0xcc0>)
 8008598:	f7fc fafd 	bl	8004b96 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800859c:	4a45      	ldr	r2, [pc, #276]	; (80086b4 <cppLoop+0xccc>)
 800859e:	4944      	ldr	r1, [pc, #272]	; (80086b0 <cppLoop+0xcc8>)
 80085a0:	4841      	ldr	r0, [pc, #260]	; (80086a8 <cppLoop+0xcc0>)
 80085a2:	f7fc fb0c 	bl	8004bbe <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 80085a6:	f04f 32ff 	mov.w	r2, #4294967295
 80085aa:	2100      	movs	r1, #0
 80085ac:	4832      	ldr	r0, [pc, #200]	; (8008678 <cppLoop+0xc90>)
 80085ae:	f7f9 fe5d 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 80085b2:	f001 b9f7 	b.w	80099a4 <cppLoop+0x1fbc>

	case 4:
		led.fullColor('G');
 80085b6:	2147      	movs	r1, #71	; 0x47
 80085b8:	482f      	ldr	r0, [pc, #188]	; (8008678 <cppLoop+0xc90>)
 80085ba:	f7f9 fd9b 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80085be:	f7f8 fd6f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80085c2:	2100      	movs	r1, #0
 80085c4:	2000      	movs	r0, #0
 80085c6:	f7f8 fd7b 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80085ca:	4832      	ldr	r0, [pc, #200]	; (8008694 <cppLoop+0xcac>)
 80085cc:	f7fb fbdb 	bl	8003d86 <_ZN9LineTrace14getMaxVelocityEv>
 80085d0:	ee10 3a10 	vmov	r3, s0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7f7 ffcf 	bl	8000578 <__aeabi_f2d>
 80085da:	4603      	mov	r3, r0
 80085dc:	460c      	mov	r4, r1
 80085de:	461a      	mov	r2, r3
 80085e0:	4623      	mov	r3, r4
 80085e2:	482e      	ldr	r0, [pc, #184]	; (800869c <cppLoop+0xcb4>)
 80085e4:	f7f8 fd96 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085e8:	2101      	movs	r1, #1
 80085ea:	2000      	movs	r0, #0
 80085ec:	f7f8 fd68 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80085f0:	4828      	ldr	r0, [pc, #160]	; (8008694 <cppLoop+0xcac>)
 80085f2:	f7fb fbe8 	bl	8003dc6 <_ZN9LineTrace14getMinVelocityEv>
 80085f6:	ee10 3a10 	vmov	r3, s0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7f7 ffbc 	bl	8000578 <__aeabi_f2d>
 8008600:	4603      	mov	r3, r0
 8008602:	460c      	mov	r4, r1
 8008604:	461a      	mov	r2, r3
 8008606:	4623      	mov	r3, r4
 8008608:	481e      	ldr	r0, [pc, #120]	; (8008684 <cppLoop+0xc9c>)
 800860a:	f7f8 fd83 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800860e:	481e      	ldr	r0, [pc, #120]	; (8008688 <cppLoop+0xca0>)
 8008610:	f7f9 fd0c 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008614:	4603      	mov	r3, r0
 8008616:	2b08      	cmp	r3, #8
 8008618:	bf0c      	ite	eq
 800861a:	2301      	moveq	r3, #1
 800861c:	2300      	movne	r3, #0
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d04b      	beq.n	80086bc <cppLoop+0xcd4>
			led.LR(-1, 1);
 8008624:	2201      	movs	r2, #1
 8008626:	f04f 31ff 	mov.w	r1, #4294967295
 800862a:	4813      	ldr	r0, [pc, #76]	; (8008678 <cppLoop+0xc90>)
 800862c:	f7f9 fe1e 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008630:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008634:	f001 faf8 	bl	8009c28 <HAL_Delay>

			selector_vel++;
 8008638:	4b1f      	ldr	r3, [pc, #124]	; (80086b8 <cppLoop+0xcd0>)
 800863a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800863e:	b29b      	uxth	r3, r3
 8008640:	3301      	adds	r3, #1
 8008642:	b29b      	uxth	r3, r3
 8008644:	b21a      	sxth	r2, r3
 8008646:	4b1c      	ldr	r3, [pc, #112]	; (80086b8 <cppLoop+0xcd0>)
 8008648:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 800864a:	4b1b      	ldr	r3, [pc, #108]	; (80086b8 <cppLoop+0xcd0>)
 800864c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008650:	2b01      	cmp	r3, #1
 8008652:	dd02      	ble.n	800865a <cppLoop+0xc72>
 8008654:	4b18      	ldr	r3, [pc, #96]	; (80086b8 <cppLoop+0xcd0>)
 8008656:	2200      	movs	r2, #0
 8008658:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800865a:	2200      	movs	r2, #0
 800865c:	f04f 31ff 	mov.w	r1, #4294967295
 8008660:	4805      	ldr	r0, [pc, #20]	; (8008678 <cppLoop+0xc90>)
 8008662:	f7f9 fe03 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008666:	f001 b99f 	b.w	80099a8 <cppLoop+0x1fc0>
 800866a:	bf00      	nop
 800866c:	f3af 8000 	nop.w
 8008670:	9999999a 	.word	0x9999999a
 8008674:	3fb99999 	.word	0x3fb99999
 8008678:	2000054c 	.word	0x2000054c
 800867c:	08018cb0 	.word	0x08018cb0
 8008680:	20048154 	.word	0x20048154
 8008684:	08018cec 	.word	0x08018cec
 8008688:	20000540 	.word	0x20000540
 800868c:	08018cf8 	.word	0x08018cf8
 8008690:	08018c90 	.word	0x08018c90
 8008694:	200238a4 	.word	0x200238a4
 8008698:	2004815c 	.word	0x2004815c
 800869c:	08018d04 	.word	0x08018d04
 80086a0:	2004816c 	.word	0x2004816c
 80086a4:	08018cbc 	.word	0x08018cbc
 80086a8:	20000570 	.word	0x20000570
 80086ac:	08018cc8 	.word	0x08018cc8
 80086b0:	08018cd4 	.word	0x08018cd4
 80086b4:	08018ce0 	.word	0x08018ce0
 80086b8:	2004811e 	.word	0x2004811e
		else if(joy_stick.getValue() == JOY_R){
 80086bc:	48ac      	ldr	r0, [pc, #688]	; (8008970 <cppLoop+0xf88>)
 80086be:	f7f9 fcb5 	bl	800202c <_ZN8JoyStick8getValueEv>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	bf0c      	ite	eq
 80086c8:	2301      	moveq	r3, #1
 80086ca:	2300      	movne	r3, #0
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d03c      	beq.n	800874c <cppLoop+0xd64>
			led.LR(-1, 1);
 80086d2:	2201      	movs	r2, #1
 80086d4:	f04f 31ff 	mov.w	r1, #4294967295
 80086d8:	48a6      	ldr	r0, [pc, #664]	; (8008974 <cppLoop+0xf8c>)
 80086da:	f7f9 fdc7 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80086de:	2064      	movs	r0, #100	; 0x64
 80086e0:	f001 faa2 	bl	8009c28 <HAL_Delay>
			if(selector_vel == 0)
 80086e4:	4ba4      	ldr	r3, [pc, #656]	; (8008978 <cppLoop+0xf90>)
 80086e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d113      	bne.n	8008716 <cppLoop+0xd2e>
				adj_max_velocity = adj_max_velocity + 0.1;
 80086ee:	4ba3      	ldr	r3, [pc, #652]	; (800897c <cppLoop+0xf94>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7f7 ff40 	bl	8000578 <__aeabi_f2d>
 80086f8:	a39b      	add	r3, pc, #620	; (adr r3, 8008968 <cppLoop+0xf80>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 fddd 	bl	80002bc <__adddf3>
 8008702:	4603      	mov	r3, r0
 8008704:	460c      	mov	r4, r1
 8008706:	4618      	mov	r0, r3
 8008708:	4621      	mov	r1, r4
 800870a:	f7f8 fa85 	bl	8000c18 <__aeabi_d2f>
 800870e:	4602      	mov	r2, r0
 8008710:	4b9a      	ldr	r3, [pc, #616]	; (800897c <cppLoop+0xf94>)
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	e012      	b.n	800873c <cppLoop+0xd54>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008716:	4b9a      	ldr	r3, [pc, #616]	; (8008980 <cppLoop+0xf98>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4618      	mov	r0, r3
 800871c:	f7f7 ff2c 	bl	8000578 <__aeabi_f2d>
 8008720:	a391      	add	r3, pc, #580	; (adr r3, 8008968 <cppLoop+0xf80>)
 8008722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008726:	f7f7 fdc9 	bl	80002bc <__adddf3>
 800872a:	4603      	mov	r3, r0
 800872c:	460c      	mov	r4, r1
 800872e:	4618      	mov	r0, r3
 8008730:	4621      	mov	r1, r4
 8008732:	f7f8 fa71 	bl	8000c18 <__aeabi_d2f>
 8008736:	4602      	mov	r2, r0
 8008738:	4b91      	ldr	r3, [pc, #580]	; (8008980 <cppLoop+0xf98>)
 800873a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800873c:	2200      	movs	r2, #0
 800873e:	f04f 31ff 	mov.w	r1, #4294967295
 8008742:	488c      	ldr	r0, [pc, #560]	; (8008974 <cppLoop+0xf8c>)
 8008744:	f7f9 fd92 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008748:	f001 b92e 	b.w	80099a8 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_L){
 800874c:	4888      	ldr	r0, [pc, #544]	; (8008970 <cppLoop+0xf88>)
 800874e:	f7f9 fc6d 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008752:	4603      	mov	r3, r0
 8008754:	2b01      	cmp	r3, #1
 8008756:	bf0c      	ite	eq
 8008758:	2301      	moveq	r3, #1
 800875a:	2300      	movne	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d03c      	beq.n	80087dc <cppLoop+0xdf4>
			led.LR(-1, 1);
 8008762:	2201      	movs	r2, #1
 8008764:	f04f 31ff 	mov.w	r1, #4294967295
 8008768:	4882      	ldr	r0, [pc, #520]	; (8008974 <cppLoop+0xf8c>)
 800876a:	f7f9 fd7f 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800876e:	2064      	movs	r0, #100	; 0x64
 8008770:	f001 fa5a 	bl	8009c28 <HAL_Delay>
			if(selector_vel == 0)
 8008774:	4b80      	ldr	r3, [pc, #512]	; (8008978 <cppLoop+0xf90>)
 8008776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d113      	bne.n	80087a6 <cppLoop+0xdbe>
				adj_max_velocity = adj_max_velocity - 0.1;
 800877e:	4b7f      	ldr	r3, [pc, #508]	; (800897c <cppLoop+0xf94>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4618      	mov	r0, r3
 8008784:	f7f7 fef8 	bl	8000578 <__aeabi_f2d>
 8008788:	a377      	add	r3, pc, #476	; (adr r3, 8008968 <cppLoop+0xf80>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 fd93 	bl	80002b8 <__aeabi_dsub>
 8008792:	4603      	mov	r3, r0
 8008794:	460c      	mov	r4, r1
 8008796:	4618      	mov	r0, r3
 8008798:	4621      	mov	r1, r4
 800879a:	f7f8 fa3d 	bl	8000c18 <__aeabi_d2f>
 800879e:	4602      	mov	r2, r0
 80087a0:	4b76      	ldr	r3, [pc, #472]	; (800897c <cppLoop+0xf94>)
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e012      	b.n	80087cc <cppLoop+0xde4>
				adj_min_velocity = adj_min_velocity - 0.1;
 80087a6:	4b76      	ldr	r3, [pc, #472]	; (8008980 <cppLoop+0xf98>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7f7 fee4 	bl	8000578 <__aeabi_f2d>
 80087b0:	a36d      	add	r3, pc, #436	; (adr r3, 8008968 <cppLoop+0xf80>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 fd7f 	bl	80002b8 <__aeabi_dsub>
 80087ba:	4603      	mov	r3, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	4618      	mov	r0, r3
 80087c0:	4621      	mov	r1, r4
 80087c2:	f7f8 fa29 	bl	8000c18 <__aeabi_d2f>
 80087c6:	4602      	mov	r2, r0
 80087c8:	4b6d      	ldr	r3, [pc, #436]	; (8008980 <cppLoop+0xf98>)
 80087ca:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80087cc:	2200      	movs	r2, #0
 80087ce:	f04f 31ff 	mov.w	r1, #4294967295
 80087d2:	4868      	ldr	r0, [pc, #416]	; (8008974 <cppLoop+0xf8c>)
 80087d4:	f7f9 fd4a 	bl	800226c <_ZN3LED2LREaa>
		break;
 80087d8:	f001 b8e6 	b.w	80099a8 <cppLoop+0x1fc0>
		else if(joy_stick.getValue() == JOY_C){
 80087dc:	4864      	ldr	r0, [pc, #400]	; (8008970 <cppLoop+0xf88>)
 80087de:	f7f9 fc25 	bl	800202c <_ZN8JoyStick8getValueEv>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	bf0c      	ite	eq
 80087e8:	2301      	moveq	r3, #1
 80087ea:	2300      	movne	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f001 80da 	beq.w	80099a8 <cppLoop+0x1fc0>
			led.LR(-1, 1);
 80087f4:	2201      	movs	r2, #1
 80087f6:	f04f 31ff 	mov.w	r1, #4294967295
 80087fa:	485e      	ldr	r0, [pc, #376]	; (8008974 <cppLoop+0xf8c>)
 80087fc:	f7f9 fd36 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008800:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008804:	f001 fa10 	bl	8009c28 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008808:	2300      	movs	r3, #0
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	4b5b      	ldr	r3, [pc, #364]	; (800897c <cppLoop+0xf94>)
 800880e:	2201      	movs	r2, #1
 8008810:	495c      	ldr	r1, [pc, #368]	; (8008984 <cppLoop+0xf9c>)
 8008812:	485d      	ldr	r0, [pc, #372]	; (8008988 <cppLoop+0xfa0>)
 8008814:	f7f8 fff4 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008818:	2300      	movs	r3, #0
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	4b58      	ldr	r3, [pc, #352]	; (8008980 <cppLoop+0xf98>)
 800881e:	2201      	movs	r2, #1
 8008820:	495a      	ldr	r1, [pc, #360]	; (800898c <cppLoop+0xfa4>)
 8008822:	4859      	ldr	r0, [pc, #356]	; (8008988 <cppLoop+0xfa0>)
 8008824:	f7f8 ffec 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008828:	4b54      	ldr	r3, [pc, #336]	; (800897c <cppLoop+0xf94>)
 800882a:	edd3 7a00 	vldr	s15, [r3]
 800882e:	eeb0 0a67 	vmov.f32	s0, s15
 8008832:	4857      	ldr	r0, [pc, #348]	; (8008990 <cppLoop+0xfa8>)
 8008834:	f7fb fa57 	bl	8003ce6 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008838:	4b51      	ldr	r3, [pc, #324]	; (8008980 <cppLoop+0xf98>)
 800883a:	edd3 7a00 	vldr	s15, [r3]
 800883e:	eeb0 0a67 	vmov.f32	s0, s15
 8008842:	4853      	ldr	r0, [pc, #332]	; (8008990 <cppLoop+0xfa8>)
 8008844:	f7fb fa6f 	bl	8003d26 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008848:	2200      	movs	r2, #0
 800884a:	f04f 31ff 	mov.w	r1, #4294967295
 800884e:	4849      	ldr	r0, [pc, #292]	; (8008974 <cppLoop+0xf8c>)
 8008850:	f7f9 fd0c 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008854:	f001 b8a8 	b.w	80099a8 <cppLoop+0x1fc0>

	case 5:
		led.fullColor('M');
 8008858:	214d      	movs	r1, #77	; 0x4d
 800885a:	4846      	ldr	r0, [pc, #280]	; (8008974 <cppLoop+0xf8c>)
 800885c:	f7f9 fc4a 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008860:	f7f8 fc1e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008864:	2100      	movs	r1, #0
 8008866:	2000      	movs	r0, #0
 8008868:	f7f8 fc2a 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 800886c:	4b49      	ldr	r3, [pc, #292]	; (8008994 <cppLoop+0xfac>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4618      	mov	r0, r3
 8008872:	f7f7 fe81 	bl	8000578 <__aeabi_f2d>
 8008876:	4603      	mov	r3, r0
 8008878:	460c      	mov	r4, r1
 800887a:	461a      	mov	r2, r3
 800887c:	4623      	mov	r3, r4
 800887e:	4846      	ldr	r0, [pc, #280]	; (8008998 <cppLoop+0xfb0>)
 8008880:	f7f8 fc48 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008884:	2101      	movs	r1, #1
 8008886:	2000      	movs	r0, #0
 8008888:	f7f8 fc1a 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 800888c:	4b43      	ldr	r3, [pc, #268]	; (800899c <cppLoop+0xfb4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4618      	mov	r0, r3
 8008892:	f7f7 fe71 	bl	8000578 <__aeabi_f2d>
 8008896:	4603      	mov	r3, r0
 8008898:	460c      	mov	r4, r1
 800889a:	461a      	mov	r2, r3
 800889c:	4623      	mov	r3, r4
 800889e:	4840      	ldr	r0, [pc, #256]	; (80089a0 <cppLoop+0xfb8>)
 80088a0:	f7f8 fc38 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80088a4:	4832      	ldr	r0, [pc, #200]	; (8008970 <cppLoop+0xf88>)
 80088a6:	f7f9 fbc1 	bl	800202c <_ZN8JoyStick8getValueEv>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	bf0c      	ite	eq
 80088b0:	2301      	moveq	r3, #1
 80088b2:	2300      	movne	r3, #0
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f001 8078 	beq.w	80099ac <cppLoop+0x1fc4>
			HAL_Delay(500);
 80088bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088c0:	f001 f9b2 	bl	8009c28 <HAL_Delay>

			led.LR(1, -1);
 80088c4:	f04f 32ff 	mov.w	r2, #4294967295
 80088c8:	2101      	movs	r1, #1
 80088ca:	482a      	ldr	r0, [pc, #168]	; (8008974 <cppLoop+0xf8c>)
 80088cc:	f7f9 fcce 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80088d0:	4b34      	ldr	r3, [pc, #208]	; (80089a4 <cppLoop+0xfbc>)
 80088d2:	edd3 7a00 	vldr	s15, [r3]
 80088d6:	4b34      	ldr	r3, [pc, #208]	; (80089a8 <cppLoop+0xfc0>)
 80088d8:	ed93 7a00 	vldr	s14, [r3]
 80088dc:	4b33      	ldr	r3, [pc, #204]	; (80089ac <cppLoop+0xfc4>)
 80088de:	edd3 6a00 	vldr	s13, [r3]
 80088e2:	eeb0 1a66 	vmov.f32	s2, s13
 80088e6:	eef0 0a47 	vmov.f32	s1, s14
 80088ea:	eeb0 0a67 	vmov.f32	s0, s15
 80088ee:	4828      	ldr	r0, [pc, #160]	; (8008990 <cppLoop+0xfa8>)
 80088f0:	f7fb f94e 	bl	8003b90 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 80088f4:	2102      	movs	r1, #2
 80088f6:	4826      	ldr	r0, [pc, #152]	; (8008990 <cppLoop+0xfa8>)
 80088f8:	f7fb fc54 	bl	80041a4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80088fc:	4b27      	ldr	r3, [pc, #156]	; (800899c <cppLoop+0xfb4>)
 80088fe:	edd3 7a00 	vldr	s15, [r3]
 8008902:	eeb0 0a67 	vmov.f32	s0, s15
 8008906:	4822      	ldr	r0, [pc, #136]	; (8008990 <cppLoop+0xfa8>)
 8008908:	f7fb f9dd 	bl	8003cc6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 800890c:	4b21      	ldr	r3, [pc, #132]	; (8008994 <cppLoop+0xfac>)
 800890e:	edd3 7a00 	vldr	s15, [r3]
 8008912:	eeb0 0a67 	vmov.f32	s0, s15
 8008916:	481e      	ldr	r0, [pc, #120]	; (8008990 <cppLoop+0xfa8>)
 8008918:	f7fb f9f5 	bl	8003d06 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 800891c:	4b1f      	ldr	r3, [pc, #124]	; (800899c <cppLoop+0xfb4>)
 800891e:	edd3 7a00 	vldr	s15, [r3]
 8008922:	eeb0 0a67 	vmov.f32	s0, s15
 8008926:	481a      	ldr	r0, [pc, #104]	; (8008990 <cppLoop+0xfa8>)
 8008928:	f7fb fa0d 	bl	8003d46 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 800892c:	4818      	ldr	r0, [pc, #96]	; (8008990 <cppLoop+0xfa8>)
 800892e:	f7fb fdcb 	bl	80044c8 <_ZN9LineTrace20createVelocityTabeleEv>

			logger.start();
 8008932:	481f      	ldr	r0, [pc, #124]	; (80089b0 <cppLoop+0xfc8>)
 8008934:	f7fc fa34 	bl	8004da0 <_ZN6Logger5startEv>

			line_trace.running();
 8008938:	4815      	ldr	r0, [pc, #84]	; (8008990 <cppLoop+0xfa8>)
 800893a:	f7fb fc77 	bl	800422c <_ZN9LineTrace7runningEv>

			logger.stop();
 800893e:	481c      	ldr	r0, [pc, #112]	; (80089b0 <cppLoop+0xfc8>)
 8008940:	f7fc fa4d 	bl	8004dde <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8008944:	4a1b      	ldr	r2, [pc, #108]	; (80089b4 <cppLoop+0xfcc>)
 8008946:	491c      	ldr	r1, [pc, #112]	; (80089b8 <cppLoop+0xfd0>)
 8008948:	4819      	ldr	r0, [pc, #100]	; (80089b0 <cppLoop+0xfc8>)
 800894a:	f7fc f924 	bl	8004b96 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800894e:	4a1b      	ldr	r2, [pc, #108]	; (80089bc <cppLoop+0xfd4>)
 8008950:	4919      	ldr	r1, [pc, #100]	; (80089b8 <cppLoop+0xfd0>)
 8008952:	4817      	ldr	r0, [pc, #92]	; (80089b0 <cppLoop+0xfc8>)
 8008954:	f7fc f933 	bl	8004bbe <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8008958:	f04f 32ff 	mov.w	r2, #4294967295
 800895c:	2100      	movs	r1, #0
 800895e:	4805      	ldr	r0, [pc, #20]	; (8008974 <cppLoop+0xf8c>)
 8008960:	f7f9 fc84 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 8008964:	f001 b822 	b.w	80099ac <cppLoop+0x1fc4>
 8008968:	9999999a 	.word	0x9999999a
 800896c:	3fb99999 	.word	0x3fb99999
 8008970:	20000540 	.word	0x20000540
 8008974:	2000054c 	.word	0x2000054c
 8008978:	2004811e 	.word	0x2004811e
 800897c:	2004815c 	.word	0x2004815c
 8008980:	2004816c 	.word	0x2004816c
 8008984:	08018d10 	.word	0x08018d10
 8008988:	08018c90 	.word	0x08018c90
 800898c:	08018d1c 	.word	0x08018d1c
 8008990:	200238a4 	.word	0x200238a4
 8008994:	20048164 	.word	0x20048164
 8008998:	08018d28 	.word	0x08018d28
 800899c:	20048174 	.word	0x20048174
 80089a0:	08018cbc 	.word	0x08018cbc
 80089a4:	20048124 	.word	0x20048124
 80089a8:	2004812c 	.word	0x2004812c
 80089ac:	20048134 	.word	0x20048134
 80089b0:	20000570 	.word	0x20000570
 80089b4:	08018cc8 	.word	0x08018cc8
 80089b8:	08018cd4 	.word	0x08018cd4
 80089bc:	08018ce0 	.word	0x08018ce0

	case 6:
		led.fullColor('R');
 80089c0:	2152      	movs	r1, #82	; 0x52
 80089c2:	4895      	ldr	r0, [pc, #596]	; (8008c18 <cppLoop+0x1230>)
 80089c4:	f7f9 fb96 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80089c8:	f7f8 fb6a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089cc:	2100      	movs	r1, #0
 80089ce:	2000      	movs	r0, #0
 80089d0:	f7f8 fb76 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 80089d4:	4891      	ldr	r0, [pc, #580]	; (8008c1c <cppLoop+0x1234>)
 80089d6:	f7fb f9e6 	bl	8003da6 <_ZN9LineTrace15getMaxVelocity2Ev>
 80089da:	ee10 3a10 	vmov	r3, s0
 80089de:	4618      	mov	r0, r3
 80089e0:	f7f7 fdca 	bl	8000578 <__aeabi_f2d>
 80089e4:	4603      	mov	r3, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	461a      	mov	r2, r3
 80089ea:	4623      	mov	r3, r4
 80089ec:	488c      	ldr	r0, [pc, #560]	; (8008c20 <cppLoop+0x1238>)
 80089ee:	f7f8 fb91 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80089f2:	2101      	movs	r1, #1
 80089f4:	2000      	movs	r0, #0
 80089f6:	f7f8 fb63 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80089fa:	4888      	ldr	r0, [pc, #544]	; (8008c1c <cppLoop+0x1234>)
 80089fc:	f7fb f9f3 	bl	8003de6 <_ZN9LineTrace15getMinVelocity2Ev>
 8008a00:	ee10 3a10 	vmov	r3, s0
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7f7 fdb7 	bl	8000578 <__aeabi_f2d>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	461a      	mov	r2, r3
 8008a10:	4623      	mov	r3, r4
 8008a12:	4884      	ldr	r0, [pc, #528]	; (8008c24 <cppLoop+0x123c>)
 8008a14:	f7f8 fb7e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008a18:	4883      	ldr	r0, [pc, #524]	; (8008c28 <cppLoop+0x1240>)
 8008a1a:	f7f9 fb07 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	bf0c      	ite	eq
 8008a24:	2301      	moveq	r3, #1
 8008a26:	2300      	movne	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d022      	beq.n	8008a74 <cppLoop+0x108c>
			led.LR(-1, 1);
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f04f 31ff 	mov.w	r1, #4294967295
 8008a34:	4878      	ldr	r0, [pc, #480]	; (8008c18 <cppLoop+0x1230>)
 8008a36:	f7f9 fc19 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a3e:	f001 f8f3 	bl	8009c28 <HAL_Delay>

			selector_vel2++;
 8008a42:	4b7a      	ldr	r3, [pc, #488]	; (8008c2c <cppLoop+0x1244>)
 8008a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	b21a      	sxth	r2, r3
 8008a50:	4b76      	ldr	r3, [pc, #472]	; (8008c2c <cppLoop+0x1244>)
 8008a52:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008a54:	4b75      	ldr	r3, [pc, #468]	; (8008c2c <cppLoop+0x1244>)
 8008a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	dd02      	ble.n	8008a64 <cppLoop+0x107c>
 8008a5e:	4b73      	ldr	r3, [pc, #460]	; (8008c2c <cppLoop+0x1244>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008a64:	2200      	movs	r2, #0
 8008a66:	f04f 31ff 	mov.w	r1, #4294967295
 8008a6a:	486b      	ldr	r0, [pc, #428]	; (8008c18 <cppLoop+0x1230>)
 8008a6c:	f7f9 fbfe 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008a70:	f000 bf9e 	b.w	80099b0 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_R){
 8008a74:	486c      	ldr	r0, [pc, #432]	; (8008c28 <cppLoop+0x1240>)
 8008a76:	f7f9 fad9 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	bf0c      	ite	eq
 8008a80:	2301      	moveq	r3, #1
 8008a82:	2300      	movne	r3, #0
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d03c      	beq.n	8008b04 <cppLoop+0x111c>
			led.LR(-1, 1);
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8008a90:	4861      	ldr	r0, [pc, #388]	; (8008c18 <cppLoop+0x1230>)
 8008a92:	f7f9 fbeb 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a96:	2064      	movs	r0, #100	; 0x64
 8008a98:	f001 f8c6 	bl	8009c28 <HAL_Delay>
			if(selector_vel2 == 0)
 8008a9c:	4b63      	ldr	r3, [pc, #396]	; (8008c2c <cppLoop+0x1244>)
 8008a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d113      	bne.n	8008ace <cppLoop+0x10e6>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008aa6:	4b62      	ldr	r3, [pc, #392]	; (8008c30 <cppLoop+0x1248>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7f7 fd64 	bl	8000578 <__aeabi_f2d>
 8008ab0:	a357      	add	r3, pc, #348	; (adr r3, 8008c10 <cppLoop+0x1228>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f7f7 fc01 	bl	80002bc <__adddf3>
 8008aba:	4603      	mov	r3, r0
 8008abc:	460c      	mov	r4, r1
 8008abe:	4618      	mov	r0, r3
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	f7f8 f8a9 	bl	8000c18 <__aeabi_d2f>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	4b59      	ldr	r3, [pc, #356]	; (8008c30 <cppLoop+0x1248>)
 8008aca:	601a      	str	r2, [r3, #0]
 8008acc:	e012      	b.n	8008af4 <cppLoop+0x110c>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008ace:	4b59      	ldr	r3, [pc, #356]	; (8008c34 <cppLoop+0x124c>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7f7 fd50 	bl	8000578 <__aeabi_f2d>
 8008ad8:	a34d      	add	r3, pc, #308	; (adr r3, 8008c10 <cppLoop+0x1228>)
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	f7f7 fbed 	bl	80002bc <__adddf3>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	4621      	mov	r1, r4
 8008aea:	f7f8 f895 	bl	8000c18 <__aeabi_d2f>
 8008aee:	4602      	mov	r2, r0
 8008af0:	4b50      	ldr	r3, [pc, #320]	; (8008c34 <cppLoop+0x124c>)
 8008af2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008af4:	2200      	movs	r2, #0
 8008af6:	f04f 31ff 	mov.w	r1, #4294967295
 8008afa:	4847      	ldr	r0, [pc, #284]	; (8008c18 <cppLoop+0x1230>)
 8008afc:	f7f9 fbb6 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008b00:	f000 bf56 	b.w	80099b0 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_L){
 8008b04:	4848      	ldr	r0, [pc, #288]	; (8008c28 <cppLoop+0x1240>)
 8008b06:	f7f9 fa91 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	bf0c      	ite	eq
 8008b10:	2301      	moveq	r3, #1
 8008b12:	2300      	movne	r3, #0
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d03c      	beq.n	8008b94 <cppLoop+0x11ac>
			led.LR(-1, 1);
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8008b20:	483d      	ldr	r0, [pc, #244]	; (8008c18 <cppLoop+0x1230>)
 8008b22:	f7f9 fba3 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b26:	2064      	movs	r0, #100	; 0x64
 8008b28:	f001 f87e 	bl	8009c28 <HAL_Delay>
			if(selector_vel2 == 0)
 8008b2c:	4b3f      	ldr	r3, [pc, #252]	; (8008c2c <cppLoop+0x1244>)
 8008b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d113      	bne.n	8008b5e <cppLoop+0x1176>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008b36:	4b3e      	ldr	r3, [pc, #248]	; (8008c30 <cppLoop+0x1248>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7f7 fd1c 	bl	8000578 <__aeabi_f2d>
 8008b40:	a333      	add	r3, pc, #204	; (adr r3, 8008c10 <cppLoop+0x1228>)
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f7f7 fbb7 	bl	80002b8 <__aeabi_dsub>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	4618      	mov	r0, r3
 8008b50:	4621      	mov	r1, r4
 8008b52:	f7f8 f861 	bl	8000c18 <__aeabi_d2f>
 8008b56:	4602      	mov	r2, r0
 8008b58:	4b35      	ldr	r3, [pc, #212]	; (8008c30 <cppLoop+0x1248>)
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	e012      	b.n	8008b84 <cppLoop+0x119c>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008b5e:	4b35      	ldr	r3, [pc, #212]	; (8008c34 <cppLoop+0x124c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f7 fd08 	bl	8000578 <__aeabi_f2d>
 8008b68:	a329      	add	r3, pc, #164	; (adr r3, 8008c10 <cppLoop+0x1228>)
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	f7f7 fba3 	bl	80002b8 <__aeabi_dsub>
 8008b72:	4603      	mov	r3, r0
 8008b74:	460c      	mov	r4, r1
 8008b76:	4618      	mov	r0, r3
 8008b78:	4621      	mov	r1, r4
 8008b7a:	f7f8 f84d 	bl	8000c18 <__aeabi_d2f>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	4b2c      	ldr	r3, [pc, #176]	; (8008c34 <cppLoop+0x124c>)
 8008b82:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b84:	2200      	movs	r2, #0
 8008b86:	f04f 31ff 	mov.w	r1, #4294967295
 8008b8a:	4823      	ldr	r0, [pc, #140]	; (8008c18 <cppLoop+0x1230>)
 8008b8c:	f7f9 fb6e 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008b90:	f000 bf0e 	b.w	80099b0 <cppLoop+0x1fc8>
		else if(joy_stick.getValue() == JOY_C){
 8008b94:	4824      	ldr	r0, [pc, #144]	; (8008c28 <cppLoop+0x1240>)
 8008b96:	f7f9 fa49 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	bf0c      	ite	eq
 8008ba0:	2301      	moveq	r3, #1
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 8702 	beq.w	80099b0 <cppLoop+0x1fc8>
			led.LR(-1, 1);
 8008bac:	2201      	movs	r2, #1
 8008bae:	f04f 31ff 	mov.w	r1, #4294967295
 8008bb2:	4819      	ldr	r0, [pc, #100]	; (8008c18 <cppLoop+0x1230>)
 8008bb4:	f7f9 fb5a 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008bb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008bbc:	f001 f834 	bl	8009c28 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	4b1a      	ldr	r3, [pc, #104]	; (8008c30 <cppLoop+0x1248>)
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	491b      	ldr	r1, [pc, #108]	; (8008c38 <cppLoop+0x1250>)
 8008bca:	481c      	ldr	r0, [pc, #112]	; (8008c3c <cppLoop+0x1254>)
 8008bcc:	f7f8 fe18 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	4b17      	ldr	r3, [pc, #92]	; (8008c34 <cppLoop+0x124c>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	4919      	ldr	r1, [pc, #100]	; (8008c40 <cppLoop+0x1258>)
 8008bda:	4818      	ldr	r0, [pc, #96]	; (8008c3c <cppLoop+0x1254>)
 8008bdc:	f7f8 fe10 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008be0:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <cppLoop+0x1248>)
 8008be2:	edd3 7a00 	vldr	s15, [r3]
 8008be6:	eeb0 0a67 	vmov.f32	s0, s15
 8008bea:	480c      	ldr	r0, [pc, #48]	; (8008c1c <cppLoop+0x1234>)
 8008bec:	f7fb f88b 	bl	8003d06 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008bf0:	4b10      	ldr	r3, [pc, #64]	; (8008c34 <cppLoop+0x124c>)
 8008bf2:	edd3 7a00 	vldr	s15, [r3]
 8008bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8008bfa:	4808      	ldr	r0, [pc, #32]	; (8008c1c <cppLoop+0x1234>)
 8008bfc:	f7fb f8a3 	bl	8003d46 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008c00:	2200      	movs	r2, #0
 8008c02:	f04f 31ff 	mov.w	r1, #4294967295
 8008c06:	4804      	ldr	r0, [pc, #16]	; (8008c18 <cppLoop+0x1230>)
 8008c08:	f7f9 fb30 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008c0c:	f000 bed0 	b.w	80099b0 <cppLoop+0x1fc8>
 8008c10:	9999999a 	.word	0x9999999a
 8008c14:	3fb99999 	.word	0x3fb99999
 8008c18:	2000054c 	.word	0x2000054c
 8008c1c:	200238a4 	.word	0x200238a4
 8008c20:	08018d28 	.word	0x08018d28
 8008c24:	08018cec 	.word	0x08018cec
 8008c28:	20000540 	.word	0x20000540
 8008c2c:	20048120 	.word	0x20048120
 8008c30:	20048164 	.word	0x20048164
 8008c34:	20048174 	.word	0x20048174
 8008c38:	08018d34 	.word	0x08018d34
 8008c3c:	08018c90 	.word	0x08018c90
 8008c40:	08018d40 	.word	0x08018d40

	case 7:
		led.fullColor('W');
 8008c44:	2157      	movs	r1, #87	; 0x57
 8008c46:	48c2      	ldr	r0, [pc, #776]	; (8008f50 <cppLoop+0x1568>)
 8008c48:	f7f9 fa54 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008c4c:	f7f8 fa28 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008c50:	2100      	movs	r1, #0
 8008c52:	2000      	movs	r0, #0
 8008c54:	f7f8 fa34 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008c58:	48be      	ldr	r0, [pc, #760]	; (8008f54 <cppLoop+0x156c>)
 8008c5a:	f7fb f908 	bl	8003e6e <_ZN9LineTrace9getMaxAccEv>
 8008c5e:	ee10 3a10 	vmov	r3, s0
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7f7 fc88 	bl	8000578 <__aeabi_f2d>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	4623      	mov	r3, r4
 8008c70:	48b9      	ldr	r0, [pc, #740]	; (8008f58 <cppLoop+0x1570>)
 8008c72:	f7f8 fa4f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008c76:	2101      	movs	r1, #1
 8008c78:	2000      	movs	r0, #0
 8008c7a:	f7f8 fa21 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008c7e:	48b5      	ldr	r0, [pc, #724]	; (8008f54 <cppLoop+0x156c>)
 8008c80:	f7fb f92b 	bl	8003eda <_ZN9LineTrace9getMaxDecEv>
 8008c84:	ee10 3a10 	vmov	r3, s0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7f7 fc75 	bl	8000578 <__aeabi_f2d>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	460c      	mov	r4, r1
 8008c92:	461a      	mov	r2, r3
 8008c94:	4623      	mov	r3, r4
 8008c96:	48b1      	ldr	r0, [pc, #708]	; (8008f5c <cppLoop+0x1574>)
 8008c98:	f7f8 fa3c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008c9c:	48b0      	ldr	r0, [pc, #704]	; (8008f60 <cppLoop+0x1578>)
 8008c9e:	f7f9 f9c5 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b08      	cmp	r3, #8
 8008ca6:	bf0c      	ite	eq
 8008ca8:	2301      	moveq	r3, #1
 8008caa:	2300      	movne	r3, #0
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d022      	beq.n	8008cf8 <cppLoop+0x1310>
			led.LR(-1, 1);
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8008cb8:	48a5      	ldr	r0, [pc, #660]	; (8008f50 <cppLoop+0x1568>)
 8008cba:	f7f9 fad7 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008cbe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008cc2:	f000 ffb1 	bl	8009c28 <HAL_Delay>

			selector_acc++;
 8008cc6:	4ba7      	ldr	r3, [pc, #668]	; (8008f64 <cppLoop+0x157c>)
 8008cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	3301      	adds	r3, #1
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	b21a      	sxth	r2, r3
 8008cd4:	4ba3      	ldr	r3, [pc, #652]	; (8008f64 <cppLoop+0x157c>)
 8008cd6:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008cd8:	4ba2      	ldr	r3, [pc, #648]	; (8008f64 <cppLoop+0x157c>)
 8008cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	dd02      	ble.n	8008ce8 <cppLoop+0x1300>
 8008ce2:	4ba0      	ldr	r3, [pc, #640]	; (8008f64 <cppLoop+0x157c>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f04f 31ff 	mov.w	r1, #4294967295
 8008cee:	4898      	ldr	r0, [pc, #608]	; (8008f50 <cppLoop+0x1568>)
 8008cf0:	f7f9 fabc 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008cf4:	f000 be5e 	b.w	80099b4 <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_R){
 8008cf8:	4899      	ldr	r0, [pc, #612]	; (8008f60 <cppLoop+0x1578>)
 8008cfa:	f7f9 f997 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b10      	cmp	r3, #16
 8008d02:	bf0c      	ite	eq
 8008d04:	2301      	moveq	r3, #1
 8008d06:	2300      	movne	r3, #0
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d03c      	beq.n	8008d88 <cppLoop+0x13a0>
			led.LR(-1, 1);
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f04f 31ff 	mov.w	r1, #4294967295
 8008d14:	488e      	ldr	r0, [pc, #568]	; (8008f50 <cppLoop+0x1568>)
 8008d16:	f7f9 faa9 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d1a:	2064      	movs	r0, #100	; 0x64
 8008d1c:	f000 ff84 	bl	8009c28 <HAL_Delay>
			if(selector_acc == 0){
 8008d20:	4b90      	ldr	r3, [pc, #576]	; (8008f64 <cppLoop+0x157c>)
 8008d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d113      	bne.n	8008d52 <cppLoop+0x136a>
				adj_acc = adj_acc + 0.1;
 8008d2a:	4b8f      	ldr	r3, [pc, #572]	; (8008f68 <cppLoop+0x1580>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7f7 fc22 	bl	8000578 <__aeabi_f2d>
 8008d34:	a384      	add	r3, pc, #528	; (adr r3, 8008f48 <cppLoop+0x1560>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f7f7 fabf 	bl	80002bc <__adddf3>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	460c      	mov	r4, r1
 8008d42:	4618      	mov	r0, r3
 8008d44:	4621      	mov	r1, r4
 8008d46:	f7f7 ff67 	bl	8000c18 <__aeabi_d2f>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	4b86      	ldr	r3, [pc, #536]	; (8008f68 <cppLoop+0x1580>)
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	e012      	b.n	8008d78 <cppLoop+0x1390>
				adj_dec = adj_dec + 0.1;
 8008d52:	4b86      	ldr	r3, [pc, #536]	; (8008f6c <cppLoop+0x1584>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7f7 fc0e 	bl	8000578 <__aeabi_f2d>
 8008d5c:	a37a      	add	r3, pc, #488	; (adr r3, 8008f48 <cppLoop+0x1560>)
 8008d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d62:	f7f7 faab 	bl	80002bc <__adddf3>
 8008d66:	4603      	mov	r3, r0
 8008d68:	460c      	mov	r4, r1
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	f7f7 ff53 	bl	8000c18 <__aeabi_d2f>
 8008d72:	4602      	mov	r2, r0
 8008d74:	4b7d      	ldr	r3, [pc, #500]	; (8008f6c <cppLoop+0x1584>)
 8008d76:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d7e:	4874      	ldr	r0, [pc, #464]	; (8008f50 <cppLoop+0x1568>)
 8008d80:	f7f9 fa74 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008d84:	f000 be16 	b.w	80099b4 <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_L){
 8008d88:	4875      	ldr	r0, [pc, #468]	; (8008f60 <cppLoop+0x1578>)
 8008d8a:	f7f9 f94f 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	bf0c      	ite	eq
 8008d94:	2301      	moveq	r3, #1
 8008d96:	2300      	movne	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d03c      	beq.n	8008e18 <cppLoop+0x1430>
			led.LR(-1, 1);
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f04f 31ff 	mov.w	r1, #4294967295
 8008da4:	486a      	ldr	r0, [pc, #424]	; (8008f50 <cppLoop+0x1568>)
 8008da6:	f7f9 fa61 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008daa:	2064      	movs	r0, #100	; 0x64
 8008dac:	f000 ff3c 	bl	8009c28 <HAL_Delay>
			if(selector_acc == 0){
 8008db0:	4b6c      	ldr	r3, [pc, #432]	; (8008f64 <cppLoop+0x157c>)
 8008db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d113      	bne.n	8008de2 <cppLoop+0x13fa>
				adj_acc = adj_acc - 0.1;
 8008dba:	4b6b      	ldr	r3, [pc, #428]	; (8008f68 <cppLoop+0x1580>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7f7 fbda 	bl	8000578 <__aeabi_f2d>
 8008dc4:	a360      	add	r3, pc, #384	; (adr r3, 8008f48 <cppLoop+0x1560>)
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	f7f7 fa75 	bl	80002b8 <__aeabi_dsub>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f7f7 ff1f 	bl	8000c18 <__aeabi_d2f>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	4b62      	ldr	r3, [pc, #392]	; (8008f68 <cppLoop+0x1580>)
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	e012      	b.n	8008e08 <cppLoop+0x1420>
				adj_dec = adj_dec - 0.1;
 8008de2:	4b62      	ldr	r3, [pc, #392]	; (8008f6c <cppLoop+0x1584>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7f7 fbc6 	bl	8000578 <__aeabi_f2d>
 8008dec:	a356      	add	r3, pc, #344	; (adr r3, 8008f48 <cppLoop+0x1560>)
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	f7f7 fa61 	bl	80002b8 <__aeabi_dsub>
 8008df6:	4603      	mov	r3, r0
 8008df8:	460c      	mov	r4, r1
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	f7f7 ff0b 	bl	8000c18 <__aeabi_d2f>
 8008e02:	4602      	mov	r2, r0
 8008e04:	4b59      	ldr	r3, [pc, #356]	; (8008f6c <cppLoop+0x1584>)
 8008e06:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e0e:	4850      	ldr	r0, [pc, #320]	; (8008f50 <cppLoop+0x1568>)
 8008e10:	f7f9 fa2c 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008e14:	f000 bdce 	b.w	80099b4 <cppLoop+0x1fcc>
		else if(joy_stick.getValue() == JOY_C){
 8008e18:	4851      	ldr	r0, [pc, #324]	; (8008f60 <cppLoop+0x1578>)
 8008e1a:	f7f9 f907 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	bf0c      	ite	eq
 8008e24:	2301      	moveq	r3, #1
 8008e26:	2300      	movne	r3, #0
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 85c2 	beq.w	80099b4 <cppLoop+0x1fcc>
			led.LR(-1, 1);
 8008e30:	2201      	movs	r2, #1
 8008e32:	f04f 31ff 	mov.w	r1, #4294967295
 8008e36:	4846      	ldr	r0, [pc, #280]	; (8008f50 <cppLoop+0x1568>)
 8008e38:	f7f9 fa18 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e40:	f000 fef2 	bl	8009c28 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008e44:	2300      	movs	r3, #0
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	4b47      	ldr	r3, [pc, #284]	; (8008f68 <cppLoop+0x1580>)
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	4948      	ldr	r1, [pc, #288]	; (8008f70 <cppLoop+0x1588>)
 8008e4e:	4849      	ldr	r0, [pc, #292]	; (8008f74 <cppLoop+0x158c>)
 8008e50:	f7f8 fcd6 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008e54:	2300      	movs	r3, #0
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	4b44      	ldr	r3, [pc, #272]	; (8008f6c <cppLoop+0x1584>)
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	4946      	ldr	r1, [pc, #280]	; (8008f78 <cppLoop+0x1590>)
 8008e5e:	4845      	ldr	r0, [pc, #276]	; (8008f74 <cppLoop+0x158c>)
 8008e60:	f7f8 fcce 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008e64:	4b40      	ldr	r3, [pc, #256]	; (8008f68 <cppLoop+0x1580>)
 8008e66:	edd3 7a00 	vldr	s15, [r3]
 8008e6a:	4b40      	ldr	r3, [pc, #256]	; (8008f6c <cppLoop+0x1584>)
 8008e6c:	ed93 7a00 	vldr	s14, [r3]
 8008e70:	eef0 0a47 	vmov.f32	s1, s14
 8008e74:	eeb0 0a67 	vmov.f32	s0, s15
 8008e78:	4836      	ldr	r0, [pc, #216]	; (8008f54 <cppLoop+0x156c>)
 8008e7a:	f7fa ffc4 	bl	8003e06 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f04f 31ff 	mov.w	r1, #4294967295
 8008e84:	4832      	ldr	r0, [pc, #200]	; (8008f50 <cppLoop+0x1568>)
 8008e86:	f7f9 f9f1 	bl	800226c <_ZN3LED2LREaa>
		break;
 8008e8a:	f000 bd93 	b.w	80099b4 <cppLoop+0x1fcc>

	case 8:
		led.fullColor('W');
 8008e8e:	2157      	movs	r1, #87	; 0x57
 8008e90:	482f      	ldr	r0, [pc, #188]	; (8008f50 <cppLoop+0x1568>)
 8008e92:	f7f9 f92f 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008e96:	f7f8 f903 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	f7f8 f90f 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008ea2:	482c      	ldr	r0, [pc, #176]	; (8008f54 <cppLoop+0x156c>)
 8008ea4:	f7fb f807 	bl	8003eb6 <_ZN9LineTrace10getMaxAcc2Ev>
 8008ea8:	ee10 3a10 	vmov	r3, s0
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7f7 fb63 	bl	8000578 <__aeabi_f2d>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	4623      	mov	r3, r4
 8008eba:	4830      	ldr	r0, [pc, #192]	; (8008f7c <cppLoop+0x1594>)
 8008ebc:	f7f8 f92a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	f7f8 f8fc 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008ec8:	4822      	ldr	r0, [pc, #136]	; (8008f54 <cppLoop+0x156c>)
 8008eca:	f7fa ffe2 	bl	8003e92 <_ZN9LineTrace10getMaxDec2Ev>
 8008ece:	ee10 3a10 	vmov	r3, s0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7f7 fb50 	bl	8000578 <__aeabi_f2d>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	460c      	mov	r4, r1
 8008edc:	461a      	mov	r2, r3
 8008ede:	4623      	mov	r3, r4
 8008ee0:	4827      	ldr	r0, [pc, #156]	; (8008f80 <cppLoop+0x1598>)
 8008ee2:	f7f8 f917 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008ee6:	481e      	ldr	r0, [pc, #120]	; (8008f60 <cppLoop+0x1578>)
 8008ee8:	f7f9 f8a0 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b08      	cmp	r3, #8
 8008ef0:	bf0c      	ite	eq
 8008ef2:	2301      	moveq	r3, #1
 8008ef4:	2300      	movne	r3, #0
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d045      	beq.n	8008f88 <cppLoop+0x15a0>
			led.LR(-1, 1);
 8008efc:	2201      	movs	r2, #1
 8008efe:	f04f 31ff 	mov.w	r1, #4294967295
 8008f02:	4813      	ldr	r0, [pc, #76]	; (8008f50 <cppLoop+0x1568>)
 8008f04:	f7f9 f9b2 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f0c:	f000 fe8c 	bl	8009c28 <HAL_Delay>

			selector_acc2++;
 8008f10:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <cppLoop+0x159c>)
 8008f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	3301      	adds	r3, #1
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	b21a      	sxth	r2, r3
 8008f1e:	4b19      	ldr	r3, [pc, #100]	; (8008f84 <cppLoop+0x159c>)
 8008f20:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008f22:	4b18      	ldr	r3, [pc, #96]	; (8008f84 <cppLoop+0x159c>)
 8008f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	dd02      	ble.n	8008f32 <cppLoop+0x154a>
 8008f2c:	4b15      	ldr	r3, [pc, #84]	; (8008f84 <cppLoop+0x159c>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008f32:	2200      	movs	r2, #0
 8008f34:	f04f 31ff 	mov.w	r1, #4294967295
 8008f38:	4805      	ldr	r0, [pc, #20]	; (8008f50 <cppLoop+0x1568>)
 8008f3a:	f7f9 f997 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008f3e:	f000 bd3b 	b.w	80099b8 <cppLoop+0x1fd0>
 8008f42:	bf00      	nop
 8008f44:	f3af 8000 	nop.w
 8008f48:	9999999a 	.word	0x9999999a
 8008f4c:	3fb99999 	.word	0x3fb99999
 8008f50:	2000054c 	.word	0x2000054c
 8008f54:	200238a4 	.word	0x200238a4
 8008f58:	08018d4c 	.word	0x08018d4c
 8008f5c:	08018d58 	.word	0x08018d58
 8008f60:	20000540 	.word	0x20000540
 8008f64:	2004811a 	.word	0x2004811a
 8008f68:	2004817c 	.word	0x2004817c
 8008f6c:	20048184 	.word	0x20048184
 8008f70:	08018d64 	.word	0x08018d64
 8008f74:	08018c90 	.word	0x08018c90
 8008f78:	08018d6c 	.word	0x08018d6c
 8008f7c:	08018d74 	.word	0x08018d74
 8008f80:	08018d80 	.word	0x08018d80
 8008f84:	2004811c 	.word	0x2004811c
		else if(joy_stick.getValue() == JOY_R){
 8008f88:	48bf      	ldr	r0, [pc, #764]	; (8009288 <cppLoop+0x18a0>)
 8008f8a:	f7f9 f84f 	bl	800202c <_ZN8JoyStick8getValueEv>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b10      	cmp	r3, #16
 8008f92:	bf0c      	ite	eq
 8008f94:	2301      	moveq	r3, #1
 8008f96:	2300      	movne	r3, #0
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d03c      	beq.n	8009018 <cppLoop+0x1630>
			led.LR(-1, 1);
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8008fa4:	48b9      	ldr	r0, [pc, #740]	; (800928c <cppLoop+0x18a4>)
 8008fa6:	f7f9 f961 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008faa:	2064      	movs	r0, #100	; 0x64
 8008fac:	f000 fe3c 	bl	8009c28 <HAL_Delay>
			if(selector_acc2 == 0){
 8008fb0:	4bb7      	ldr	r3, [pc, #732]	; (8009290 <cppLoop+0x18a8>)
 8008fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d113      	bne.n	8008fe2 <cppLoop+0x15fa>
				adj_acc2 = adj_acc2 + 0.1;
 8008fba:	4bb6      	ldr	r3, [pc, #728]	; (8009294 <cppLoop+0x18ac>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7f7 fada 	bl	8000578 <__aeabi_f2d>
 8008fc4:	a3ae      	add	r3, pc, #696	; (adr r3, 8009280 <cppLoop+0x1898>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f7f7 f977 	bl	80002bc <__adddf3>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	f7f7 fe1f 	bl	8000c18 <__aeabi_d2f>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	4bad      	ldr	r3, [pc, #692]	; (8009294 <cppLoop+0x18ac>)
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	e012      	b.n	8009008 <cppLoop+0x1620>
				adj_dec2 = adj_dec2 + 0.1;
 8008fe2:	4bad      	ldr	r3, [pc, #692]	; (8009298 <cppLoop+0x18b0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7f7 fac6 	bl	8000578 <__aeabi_f2d>
 8008fec:	a3a4      	add	r3, pc, #656	; (adr r3, 8009280 <cppLoop+0x1898>)
 8008fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff2:	f7f7 f963 	bl	80002bc <__adddf3>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	f7f7 fe0b 	bl	8000c18 <__aeabi_d2f>
 8009002:	4602      	mov	r2, r0
 8009004:	4ba4      	ldr	r3, [pc, #656]	; (8009298 <cppLoop+0x18b0>)
 8009006:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009008:	2200      	movs	r2, #0
 800900a:	f04f 31ff 	mov.w	r1, #4294967295
 800900e:	489f      	ldr	r0, [pc, #636]	; (800928c <cppLoop+0x18a4>)
 8009010:	f7f9 f92c 	bl	800226c <_ZN3LED2LREaa>
		break;
 8009014:	f000 bcd0 	b.w	80099b8 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_L){
 8009018:	489b      	ldr	r0, [pc, #620]	; (8009288 <cppLoop+0x18a0>)
 800901a:	f7f9 f807 	bl	800202c <_ZN8JoyStick8getValueEv>
 800901e:	4603      	mov	r3, r0
 8009020:	2b01      	cmp	r3, #1
 8009022:	bf0c      	ite	eq
 8009024:	2301      	moveq	r3, #1
 8009026:	2300      	movne	r3, #0
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d03c      	beq.n	80090a8 <cppLoop+0x16c0>
			led.LR(-1, 1);
 800902e:	2201      	movs	r2, #1
 8009030:	f04f 31ff 	mov.w	r1, #4294967295
 8009034:	4895      	ldr	r0, [pc, #596]	; (800928c <cppLoop+0x18a4>)
 8009036:	f7f9 f919 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800903a:	2064      	movs	r0, #100	; 0x64
 800903c:	f000 fdf4 	bl	8009c28 <HAL_Delay>
			if(selector_acc2 == 0){
 8009040:	4b93      	ldr	r3, [pc, #588]	; (8009290 <cppLoop+0x18a8>)
 8009042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d113      	bne.n	8009072 <cppLoop+0x168a>
				adj_acc2 = adj_acc2 - 0.1;
 800904a:	4b92      	ldr	r3, [pc, #584]	; (8009294 <cppLoop+0x18ac>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f7f7 fa92 	bl	8000578 <__aeabi_f2d>
 8009054:	a38a      	add	r3, pc, #552	; (adr r3, 8009280 <cppLoop+0x1898>)
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	f7f7 f92d 	bl	80002b8 <__aeabi_dsub>
 800905e:	4603      	mov	r3, r0
 8009060:	460c      	mov	r4, r1
 8009062:	4618      	mov	r0, r3
 8009064:	4621      	mov	r1, r4
 8009066:	f7f7 fdd7 	bl	8000c18 <__aeabi_d2f>
 800906a:	4602      	mov	r2, r0
 800906c:	4b89      	ldr	r3, [pc, #548]	; (8009294 <cppLoop+0x18ac>)
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	e012      	b.n	8009098 <cppLoop+0x16b0>
				adj_dec2 = adj_dec2 - 0.1;
 8009072:	4b89      	ldr	r3, [pc, #548]	; (8009298 <cppLoop+0x18b0>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4618      	mov	r0, r3
 8009078:	f7f7 fa7e 	bl	8000578 <__aeabi_f2d>
 800907c:	a380      	add	r3, pc, #512	; (adr r3, 8009280 <cppLoop+0x1898>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	f7f7 f919 	bl	80002b8 <__aeabi_dsub>
 8009086:	4603      	mov	r3, r0
 8009088:	460c      	mov	r4, r1
 800908a:	4618      	mov	r0, r3
 800908c:	4621      	mov	r1, r4
 800908e:	f7f7 fdc3 	bl	8000c18 <__aeabi_d2f>
 8009092:	4602      	mov	r2, r0
 8009094:	4b80      	ldr	r3, [pc, #512]	; (8009298 <cppLoop+0x18b0>)
 8009096:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009098:	2200      	movs	r2, #0
 800909a:	f04f 31ff 	mov.w	r1, #4294967295
 800909e:	487b      	ldr	r0, [pc, #492]	; (800928c <cppLoop+0x18a4>)
 80090a0:	f7f9 f8e4 	bl	800226c <_ZN3LED2LREaa>
		break;
 80090a4:	f000 bc88 	b.w	80099b8 <cppLoop+0x1fd0>
		else if(joy_stick.getValue() == JOY_C){
 80090a8:	4877      	ldr	r0, [pc, #476]	; (8009288 <cppLoop+0x18a0>)
 80090aa:	f7f8 ffbf 	bl	800202c <_ZN8JoyStick8getValueEv>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	bf0c      	ite	eq
 80090b4:	2301      	moveq	r3, #1
 80090b6:	2300      	movne	r3, #0
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 847c 	beq.w	80099b8 <cppLoop+0x1fd0>
			led.LR(-1, 1);
 80090c0:	2201      	movs	r2, #1
 80090c2:	f04f 31ff 	mov.w	r1, #4294967295
 80090c6:	4871      	ldr	r0, [pc, #452]	; (800928c <cppLoop+0x18a4>)
 80090c8:	f7f9 f8d0 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80090cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80090d0:	f000 fdaa 	bl	8009c28 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80090d4:	2300      	movs	r3, #0
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	4b6e      	ldr	r3, [pc, #440]	; (8009294 <cppLoop+0x18ac>)
 80090da:	2201      	movs	r2, #1
 80090dc:	496f      	ldr	r1, [pc, #444]	; (800929c <cppLoop+0x18b4>)
 80090de:	4870      	ldr	r0, [pc, #448]	; (80092a0 <cppLoop+0x18b8>)
 80090e0:	f7f8 fb8e 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80090e4:	2300      	movs	r3, #0
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	4b6b      	ldr	r3, [pc, #428]	; (8009298 <cppLoop+0x18b0>)
 80090ea:	2201      	movs	r2, #1
 80090ec:	496d      	ldr	r1, [pc, #436]	; (80092a4 <cppLoop+0x18bc>)
 80090ee:	486c      	ldr	r0, [pc, #432]	; (80092a0 <cppLoop+0x18b8>)
 80090f0:	f7f8 fb86 	bl	8001800 <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 80090f4:	4b67      	ldr	r3, [pc, #412]	; (8009294 <cppLoop+0x18ac>)
 80090f6:	edd3 7a00 	vldr	s15, [r3]
 80090fa:	4b67      	ldr	r3, [pc, #412]	; (8009298 <cppLoop+0x18b0>)
 80090fc:	ed93 7a00 	vldr	s14, [r3]
 8009100:	eef0 0a47 	vmov.f32	s1, s14
 8009104:	eeb0 0a67 	vmov.f32	s0, s15
 8009108:	4867      	ldr	r0, [pc, #412]	; (80092a8 <cppLoop+0x18c0>)
 800910a:	f7fa fe96 	bl	8003e3a <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 800910e:	2200      	movs	r2, #0
 8009110:	f04f 31ff 	mov.w	r1, #4294967295
 8009114:	485d      	ldr	r0, [pc, #372]	; (800928c <cppLoop+0x18a4>)
 8009116:	f7f9 f8a9 	bl	800226c <_ZN3LED2LREaa>
		break;
 800911a:	f000 bc4d 	b.w	80099b8 <cppLoop+0x1fd0>

	case 9:
		led.fullColor('~');
 800911e:	217e      	movs	r1, #126	; 0x7e
 8009120:	485a      	ldr	r0, [pc, #360]	; (800928c <cppLoop+0x18a4>)
 8009122:	f7f8 ffe7 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009126:	f7f7 ffbb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800912a:	2100      	movs	r1, #0
 800912c:	2000      	movs	r0, #0
 800912e:	f7f7 ffc7 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8009132:	485e      	ldr	r0, [pc, #376]	; (80092ac <cppLoop+0x18c4>)
 8009134:	f7f7 ffee 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009138:	2101      	movs	r1, #1
 800913a:	2000      	movs	r0, #0
 800913c:	f7f7 ffc0 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009140:	485b      	ldr	r0, [pc, #364]	; (80092b0 <cppLoop+0x18c8>)
 8009142:	f7f7 ffe7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009146:	4850      	ldr	r0, [pc, #320]	; (8009288 <cppLoop+0x18a0>)
 8009148:	f7f8 ff70 	bl	800202c <_ZN8JoyStick8getValueEv>
 800914c:	4603      	mov	r3, r0
 800914e:	2b02      	cmp	r3, #2
 8009150:	bf0c      	ite	eq
 8009152:	2301      	moveq	r3, #1
 8009154:	2300      	movne	r3, #0
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 842f 	beq.w	80099bc <cppLoop+0x1fd4>
			led.LR(-1, 1);
 800915e:	2201      	movs	r2, #1
 8009160:	f04f 31ff 	mov.w	r1, #4294967295
 8009164:	4849      	ldr	r0, [pc, #292]	; (800928c <cppLoop+0x18a4>)
 8009166:	f7f9 f881 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(500);
 800916a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800916e:	f000 fd5b 	bl	8009c28 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8009172:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80092b4 <cppLoop+0x18cc>
 8009176:	484c      	ldr	r0, [pc, #304]	; (80092a8 <cppLoop+0x18c0>)
 8009178:	f7fa fd96 	bl	8003ca8 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800917c:	484a      	ldr	r0, [pc, #296]	; (80092a8 <cppLoop+0x18c0>)
 800917e:	f7fb f823 	bl	80041c8 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8009182:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009186:	f000 fd4f 	bl	8009c28 <HAL_Delay>

			led.fullColor('R');
 800918a:	2152      	movs	r1, #82	; 0x52
 800918c:	483f      	ldr	r0, [pc, #252]	; (800928c <cppLoop+0x18a4>)
 800918e:	f7f8 ffb1 	bl	80020f4 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8009192:	4849      	ldr	r0, [pc, #292]	; (80092b8 <cppLoop+0x18d0>)
 8009194:	f7f8 fa6a 	bl	800166c <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8009198:	f242 7010 	movw	r0, #10000	; 0x2710
 800919c:	f000 fd44 	bl	8009c28 <HAL_Delay>

			line_trace.stop();
 80091a0:	4841      	ldr	r0, [pc, #260]	; (80092a8 <cppLoop+0x18c0>)
 80091a2:	f7fb f90f 	bl	80043c4 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80091a6:	4945      	ldr	r1, [pc, #276]	; (80092bc <cppLoop+0x18d4>)
 80091a8:	4845      	ldr	r0, [pc, #276]	; (80092c0 <cppLoop+0x18d8>)
 80091aa:	f7f8 fab5 	bl	8001718 <user_fopen>
			float d = encoder.getDistance();
 80091ae:	4842      	ldr	r0, [pc, #264]	; (80092b8 <cppLoop+0x18d0>)
 80091b0:	f7f8 fa20 	bl	80015f4 <_ZN7Encoder11getDistanceEv>
 80091b4:	eef0 7a40 	vmov.f32	s15, s0
 80091b8:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 80091bc:	1d3b      	adds	r3, r7, #4
 80091be:	2201      	movs	r2, #1
 80091c0:	4619      	mov	r1, r3
 80091c2:	2001      	movs	r0, #1
 80091c4:	f7f8 faca 	bl	800175c <sd_write_float>
			user_fclose();
 80091c8:	f7f8 fab8 	bl	800173c <user_fclose>

			led.LR(-1, 0);
 80091cc:	2200      	movs	r2, #0
 80091ce:	f04f 31ff 	mov.w	r1, #4294967295
 80091d2:	482e      	ldr	r0, [pc, #184]	; (800928c <cppLoop+0x18a4>)
 80091d4:	f7f9 f84a 	bl	800226c <_ZN3LED2LREaa>
		}
		break;
 80091d8:	e3f0      	b.n	80099bc <cppLoop+0x1fd4>

	case 10:
		led.fullColor('~');
 80091da:	217e      	movs	r1, #126	; 0x7e
 80091dc:	482b      	ldr	r0, [pc, #172]	; (800928c <cppLoop+0x18a4>)
 80091de:	f7f8 ff89 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80091e2:	f7f7 ff5d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80091e6:	2100      	movs	r1, #0
 80091e8:	2000      	movs	r0, #0
 80091ea:	f7f7 ff69 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80091ee:	4835      	ldr	r0, [pc, #212]	; (80092c4 <cppLoop+0x18dc>)
 80091f0:	f7f7 ff90 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80091f4:	2101      	movs	r1, #1
 80091f6:	2000      	movs	r0, #0
 80091f8:	f7f7 ff62 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 80091fc:	4832      	ldr	r0, [pc, #200]	; (80092c8 <cppLoop+0x18e0>)
 80091fe:	f7f7 ff89 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009202:	4821      	ldr	r0, [pc, #132]	; (8009288 <cppLoop+0x18a0>)
 8009204:	f7f8 ff12 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009208:	4603      	mov	r3, r0
 800920a:	2b02      	cmp	r3, #2
 800920c:	bf0c      	ite	eq
 800920e:	2301      	moveq	r3, #1
 8009210:	2300      	movne	r3, #0
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 83d3 	beq.w	80099c0 <cppLoop+0x1fd8>
			HAL_Delay(500);
 800921a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800921e:	f000 fd03 	bl	8009c28 <HAL_Delay>
			led.LR(-1, 1);
 8009222:	2201      	movs	r2, #1
 8009224:	f04f 31ff 	mov.w	r1, #4294967295
 8009228:	4818      	ldr	r0, [pc, #96]	; (800928c <cppLoop+0x18a4>)
 800922a:	f7f9 f81f 	bl	800226c <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800922e:	2102      	movs	r1, #2
 8009230:	481d      	ldr	r0, [pc, #116]	; (80092a8 <cppLoop+0x18c0>)
 8009232:	f7fa ffb7 	bl	80041a4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8009236:	4b25      	ldr	r3, [pc, #148]	; (80092cc <cppLoop+0x18e4>)
 8009238:	edd3 7a00 	vldr	s15, [r3]
 800923c:	eeb0 0a67 	vmov.f32	s0, s15
 8009240:	4819      	ldr	r0, [pc, #100]	; (80092a8 <cppLoop+0x18c0>)
 8009242:	f7fa fd40 	bl	8003cc6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009246:	4b21      	ldr	r3, [pc, #132]	; (80092cc <cppLoop+0x18e4>)
 8009248:	edd3 7a00 	vldr	s15, [r3]
 800924c:	eeb0 0a67 	vmov.f32	s0, s15
 8009250:	4815      	ldr	r0, [pc, #84]	; (80092a8 <cppLoop+0x18c0>)
 8009252:	f7fa fd48 	bl	8003ce6 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009256:	4b1d      	ldr	r3, [pc, #116]	; (80092cc <cppLoop+0x18e4>)
 8009258:	edd3 7a00 	vldr	s15, [r3]
 800925c:	eeb0 0a67 	vmov.f32	s0, s15
 8009260:	4811      	ldr	r0, [pc, #68]	; (80092a8 <cppLoop+0x18c0>)
 8009262:	f7fa fd60 	bl	8003d26 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009266:	4810      	ldr	r0, [pc, #64]	; (80092a8 <cppLoop+0x18c0>)
 8009268:	f7fb f9fc 	bl	8004664 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 800926c:	2200      	movs	r2, #0
 800926e:	f04f 31ff 	mov.w	r1, #4294967295
 8009272:	4806      	ldr	r0, [pc, #24]	; (800928c <cppLoop+0x18a4>)
 8009274:	f7f8 fffa 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 8009278:	e3a2      	b.n	80099c0 <cppLoop+0x1fd8>
 800927a:	bf00      	nop
 800927c:	f3af 8000 	nop.w
 8009280:	9999999a 	.word	0x9999999a
 8009284:	3fb99999 	.word	0x3fb99999
 8009288:	20000540 	.word	0x20000540
 800928c:	2000054c 	.word	0x2000054c
 8009290:	2004811c 	.word	0x2004811c
 8009294:	2004818c 	.word	0x2004818c
 8009298:	20048194 	.word	0x20048194
 800929c:	08018d8c 	.word	0x08018d8c
 80092a0:	08018c90 	.word	0x08018c90
 80092a4:	08018d98 	.word	0x08018d98
 80092a8:	200238a4 	.word	0x200238a4
 80092ac:	08018da4 	.word	0x08018da4
 80092b0:	08018dac 	.word	0x08018dac
 80092b4:	00000000 	.word	0x00000000
 80092b8:	200237fc 	.word	0x200237fc
 80092bc:	08018db8 	.word	0x08018db8
 80092c0:	08018dc0 	.word	0x08018dc0
 80092c4:	08018dcc 	.word	0x08018dcc
 80092c8:	08018dd8 	.word	0x08018dd8
 80092cc:	20048164 	.word	0x20048164

	case 11:
		led.fullColor('~');
 80092d0:	217e      	movs	r1, #126	; 0x7e
 80092d2:	48bc      	ldr	r0, [pc, #752]	; (80095c4 <cppLoop+0x1bdc>)
 80092d4:	f7f8 ff0e 	bl	80020f4 <_ZN3LED9fullColorEc>

lcd_clear();
 80092d8:	f7f7 fee2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092dc:	2100      	movs	r1, #0
 80092de:	2000      	movs	r0, #0
 80092e0:	f7f7 feee 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80092e4:	48b8      	ldr	r0, [pc, #736]	; (80095c8 <cppLoop+0x1be0>)
 80092e6:	f7f7 ff15 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80092ea:	2101      	movs	r1, #1
 80092ec:	2000      	movs	r0, #0
 80092ee:	f7f7 fee7 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 80092f2:	48b6      	ldr	r0, [pc, #728]	; (80095cc <cppLoop+0x1be4>)
 80092f4:	f7f7 ff0e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80092f8:	48b5      	ldr	r0, [pc, #724]	; (80095d0 <cppLoop+0x1be8>)
 80092fa:	f7f8 fe97 	bl	800202c <_ZN8JoyStick8getValueEv>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b02      	cmp	r3, #2
 8009302:	bf0c      	ite	eq
 8009304:	2301      	moveq	r3, #1
 8009306:	2300      	movne	r3, #0
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 835a 	beq.w	80099c4 <cppLoop+0x1fdc>
			HAL_Delay(1000);
 8009310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009314:	f000 fc88 	bl	8009c28 <HAL_Delay>
			led.LR(-1, 1);
 8009318:	2201      	movs	r2, #1
 800931a:	f04f 31ff 	mov.w	r1, #4294967295
 800931e:	48a9      	ldr	r0, [pc, #676]	; (80095c4 <cppLoop+0x1bdc>)
 8009320:	f7f8 ffa4 	bl	800226c <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009324:	eddf 1aab 	vldr	s3, [pc, #684]	; 80095d4 <cppLoop+0x1bec>
 8009328:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 80095d4 <cppLoop+0x1bec>
 800932c:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80095d4 <cppLoop+0x1bec>
 8009330:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80095d4 <cppLoop+0x1bec>
 8009334:	48a8      	ldr	r0, [pc, #672]	; (80095d8 <cppLoop+0x1bf0>)
 8009336:	f7f7 ff8b 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 800933a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800933e:	f000 fc73 	bl	8009c28 <HAL_Delay>
			esc.off();
 8009342:	48a5      	ldr	r0, [pc, #660]	; (80095d8 <cppLoop+0x1bf0>)
 8009344:	f7f8 f81e 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009348:	2200      	movs	r2, #0
 800934a:	f04f 31ff 	mov.w	r1, #4294967295
 800934e:	489d      	ldr	r0, [pc, #628]	; (80095c4 <cppLoop+0x1bdc>)
 8009350:	f7f8 ff8c 	bl	800226c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 8009354:	e336      	b.n	80099c4 <cppLoop+0x1fdc>

	case 12:
		led.fullColor('~');
 8009356:	217e      	movs	r1, #126	; 0x7e
 8009358:	489a      	ldr	r0, [pc, #616]	; (80095c4 <cppLoop+0x1bdc>)
 800935a:	f7f8 fecb 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 800935e:	f7f7 fe9f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009362:	2100      	movs	r1, #0
 8009364:	2000      	movs	r0, #0
 8009366:	f7f7 feab 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800936a:	489c      	ldr	r0, [pc, #624]	; (80095dc <cppLoop+0x1bf4>)
 800936c:	f7f7 fed2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009370:	2101      	movs	r1, #1
 8009372:	2000      	movs	r0, #0
 8009374:	f7f7 fea4 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009378:	4899      	ldr	r0, [pc, #612]	; (80095e0 <cppLoop+0x1bf8>)
 800937a:	f7f7 fecb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800937e:	4894      	ldr	r0, [pc, #592]	; (80095d0 <cppLoop+0x1be8>)
 8009380:	f7f8 fe54 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009384:	4603      	mov	r3, r0
 8009386:	2b02      	cmp	r3, #2
 8009388:	bf0c      	ite	eq
 800938a:	2301      	moveq	r3, #1
 800938c:	2300      	movne	r3, #0
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 8319 	beq.w	80099c8 <cppLoop+0x1fe0>
			HAL_Delay(1500);
 8009396:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800939a:	f000 fc45 	bl	8009c28 <HAL_Delay>
			led.LR(-1, 1);
 800939e:	2201      	movs	r2, #1
 80093a0:	f04f 31ff 	mov.w	r1, #4294967295
 80093a4:	4887      	ldr	r0, [pc, #540]	; (80095c4 <cppLoop+0x1bdc>)
 80093a6:	f7f8 ff61 	bl	800226c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 80093aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80093ae:	f000 fc3b 	bl	8009c28 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80093b2:	eddf 1a88 	vldr	s3, [pc, #544]	; 80095d4 <cppLoop+0x1bec>
 80093b6:	ed9f 1a87 	vldr	s2, [pc, #540]	; 80095d4 <cppLoop+0x1bec>
 80093ba:	eddf 0a86 	vldr	s1, [pc, #536]	; 80095d4 <cppLoop+0x1bec>
 80093be:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80095d4 <cppLoop+0x1bec>
 80093c2:	4885      	ldr	r0, [pc, #532]	; (80095d8 <cppLoop+0x1bf0>)
 80093c4:	f7f7 ff44 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80093c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093cc:	f000 fc2c 	bl	8009c28 <HAL_Delay>

			logger.start();
 80093d0:	4884      	ldr	r0, [pc, #528]	; (80095e4 <cppLoop+0x1bfc>)
 80093d2:	f7fb fce5 	bl	8004da0 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80093d6:	4884      	ldr	r0, [pc, #528]	; (80095e8 <cppLoop+0x1c00>)
 80093d8:	f7fc fcab 	bl	8005d32 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80093dc:	eddf 0a83 	vldr	s1, [pc, #524]	; 80095ec <cppLoop+0x1c04>
 80093e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80093e4:	4880      	ldr	r0, [pc, #512]	; (80095e8 <cppLoop+0x1c00>)
 80093e6:	f7fc fc37 	bl	8005c58 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80093ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093ee:	f000 fc1b 	bl	8009c28 <HAL_Delay>

			logger.stop();
 80093f2:	487c      	ldr	r0, [pc, #496]	; (80095e4 <cppLoop+0x1bfc>)
 80093f4:	f7fb fcf3 	bl	8004dde <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80093f8:	487b      	ldr	r0, [pc, #492]	; (80095e8 <cppLoop+0x1c00>)
 80093fa:	f7fc fcad 	bl	8005d58 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 80093fe:	4876      	ldr	r0, [pc, #472]	; (80095d8 <cppLoop+0x1bf0>)
 8009400:	f7f7 ffc0 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009404:	4a7a      	ldr	r2, [pc, #488]	; (80095f0 <cppLoop+0x1c08>)
 8009406:	497b      	ldr	r1, [pc, #492]	; (80095f4 <cppLoop+0x1c0c>)
 8009408:	4876      	ldr	r0, [pc, #472]	; (80095e4 <cppLoop+0x1bfc>)
 800940a:	f7fb fbc4 	bl	8004b96 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800940e:	2200      	movs	r2, #0
 8009410:	f04f 31ff 	mov.w	r1, #4294967295
 8009414:	486b      	ldr	r0, [pc, #428]	; (80095c4 <cppLoop+0x1bdc>)
 8009416:	f7f8 ff29 	bl	800226c <_ZN3LED2LREaa>
		}
		break;
 800941a:	e2d5      	b.n	80099c8 <cppLoop+0x1fe0>

	case 13:

		led.fullColor('W');
 800941c:	2157      	movs	r1, #87	; 0x57
 800941e:	4869      	ldr	r0, [pc, #420]	; (80095c4 <cppLoop+0x1bdc>)
 8009420:	f7f8 fe68 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009424:	f7f7 fe3c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009428:	2100      	movs	r1, #0
 800942a:	2000      	movs	r0, #0
 800942c:	f7f7 fe48 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009430:	4871      	ldr	r0, [pc, #452]	; (80095f8 <cppLoop+0x1c10>)
 8009432:	f7f7 fe6f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009436:	2101      	movs	r1, #1
 8009438:	2000      	movs	r0, #0
 800943a:	f7f7 fe41 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800943e:	4b6f      	ldr	r3, [pc, #444]	; (80095fc <cppLoop+0x1c14>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4618      	mov	r0, r3
 8009444:	f7f7 f898 	bl	8000578 <__aeabi_f2d>
 8009448:	4603      	mov	r3, r0
 800944a:	460c      	mov	r4, r1
 800944c:	461a      	mov	r2, r3
 800944e:	4623      	mov	r3, r4
 8009450:	486b      	ldr	r0, [pc, #428]	; (8009600 <cppLoop+0x1c18>)
 8009452:	f7f7 fe5f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009456:	485e      	ldr	r0, [pc, #376]	; (80095d0 <cppLoop+0x1be8>)
 8009458:	f7f8 fde8 	bl	800202c <_ZN8JoyStick8getValueEv>
 800945c:	4603      	mov	r3, r0
 800945e:	2b02      	cmp	r3, #2
 8009460:	bf0c      	ite	eq
 8009462:	2301      	moveq	r3, #1
 8009464:	2300      	movne	r3, #0
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 82af 	beq.w	80099cc <cppLoop+0x1fe4>
			HAL_Delay(500);
 800946e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009472:	f000 fbd9 	bl	8009c28 <HAL_Delay>

			led.LR(1, -1);
 8009476:	f04f 32ff 	mov.w	r2, #4294967295
 800947a:	2101      	movs	r1, #1
 800947c:	4851      	ldr	r0, [pc, #324]	; (80095c4 <cppLoop+0x1bdc>)
 800947e:	f7f8 fef5 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009482:	2102      	movs	r1, #2
 8009484:	485f      	ldr	r0, [pc, #380]	; (8009604 <cppLoop+0x1c1c>)
 8009486:	f7fa fe8d 	bl	80041a4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800948a:	4b5f      	ldr	r3, [pc, #380]	; (8009608 <cppLoop+0x1c20>)
 800948c:	edd3 7a00 	vldr	s15, [r3]
 8009490:	eeb0 0a67 	vmov.f32	s0, s15
 8009494:	485b      	ldr	r0, [pc, #364]	; (8009604 <cppLoop+0x1c1c>)
 8009496:	f7fa fc16 	bl	8003cc6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800949a:	4b58      	ldr	r3, [pc, #352]	; (80095fc <cppLoop+0x1c14>)
 800949c:	edd3 7a00 	vldr	s15, [r3]
 80094a0:	eeb0 0a67 	vmov.f32	s0, s15
 80094a4:	4857      	ldr	r0, [pc, #348]	; (8009604 <cppLoop+0x1c1c>)
 80094a6:	f7fa fc1e 	bl	8003ce6 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80094aa:	4b54      	ldr	r3, [pc, #336]	; (80095fc <cppLoop+0x1c14>)
 80094ac:	edd3 7a00 	vldr	s15, [r3]
 80094b0:	eeb0 0a67 	vmov.f32	s0, s15
 80094b4:	4853      	ldr	r0, [pc, #332]	; (8009604 <cppLoop+0x1c1c>)
 80094b6:	f7fa fc36 	bl	8003d26 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80094ba:	4852      	ldr	r0, [pc, #328]	; (8009604 <cppLoop+0x1c1c>)
 80094bc:	f7fb f8d2 	bl	8004664 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80094c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094c4:	f000 fbb0 	bl	8009c28 <HAL_Delay>

			line_trace.running();
 80094c8:	484e      	ldr	r0, [pc, #312]	; (8009604 <cppLoop+0x1c1c>)
 80094ca:	f7fa feaf 	bl	800422c <_ZN9LineTrace7runningEv>

			esc.off();
 80094ce:	4842      	ldr	r0, [pc, #264]	; (80095d8 <cppLoop+0x1bf0>)
 80094d0:	f7f7 ff58 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80094d4:	f04f 32ff 	mov.w	r2, #4294967295
 80094d8:	2100      	movs	r1, #0
 80094da:	483a      	ldr	r0, [pc, #232]	; (80095c4 <cppLoop+0x1bdc>)
 80094dc:	f7f8 fec6 	bl	800226c <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80094e0:	e274      	b.n	80099cc <cppLoop+0x1fe4>

	case 14:
		led.fullColor('W');
 80094e2:	2157      	movs	r1, #87	; 0x57
 80094e4:	4837      	ldr	r0, [pc, #220]	; (80095c4 <cppLoop+0x1bdc>)
 80094e6:	f7f8 fe05 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 80094ea:	f7f7 fdd9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094ee:	2100      	movs	r1, #0
 80094f0:	2000      	movs	r0, #0
 80094f2:	f7f7 fde5 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80094f6:	4845      	ldr	r0, [pc, #276]	; (800960c <cppLoop+0x1c24>)
 80094f8:	f7f7 fe0c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80094fc:	2101      	movs	r1, #1
 80094fe:	2000      	movs	r0, #0
 8009500:	f7f7 fdde 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8009504:	4b42      	ldr	r3, [pc, #264]	; (8009610 <cppLoop+0x1c28>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4618      	mov	r0, r3
 800950a:	f7f7 f835 	bl	8000578 <__aeabi_f2d>
 800950e:	4603      	mov	r3, r0
 8009510:	460c      	mov	r4, r1
 8009512:	461a      	mov	r2, r3
 8009514:	4623      	mov	r3, r4
 8009516:	483a      	ldr	r0, [pc, #232]	; (8009600 <cppLoop+0x1c18>)
 8009518:	f7f7 fdfc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800951c:	482c      	ldr	r0, [pc, #176]	; (80095d0 <cppLoop+0x1be8>)
 800951e:	f7f8 fd85 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009522:	4603      	mov	r3, r0
 8009524:	2b02      	cmp	r3, #2
 8009526:	bf0c      	ite	eq
 8009528:	2301      	moveq	r3, #1
 800952a:	2300      	movne	r3, #0
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 824e 	beq.w	80099d0 <cppLoop+0x1fe8>
			HAL_Delay(500);
 8009534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009538:	f000 fb76 	bl	8009c28 <HAL_Delay>

			led.LR(1, -1);
 800953c:	f04f 32ff 	mov.w	r2, #4294967295
 8009540:	2101      	movs	r1, #1
 8009542:	4820      	ldr	r0, [pc, #128]	; (80095c4 <cppLoop+0x1bdc>)
 8009544:	f7f8 fe92 	bl	800226c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009548:	2101      	movs	r1, #1
 800954a:	482e      	ldr	r0, [pc, #184]	; (8009604 <cppLoop+0x1c1c>)
 800954c:	f7fa fe2a 	bl	80041a4 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009550:	4b30      	ldr	r3, [pc, #192]	; (8009614 <cppLoop+0x1c2c>)
 8009552:	edd3 7a00 	vldr	s15, [r3]
 8009556:	eeb0 0a67 	vmov.f32	s0, s15
 800955a:	482a      	ldr	r0, [pc, #168]	; (8009604 <cppLoop+0x1c1c>)
 800955c:	f7fa fbb3 	bl	8003cc6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009560:	4b2b      	ldr	r3, [pc, #172]	; (8009610 <cppLoop+0x1c28>)
 8009562:	edd3 7a00 	vldr	s15, [r3]
 8009566:	eeb0 0a67 	vmov.f32	s0, s15
 800956a:	4826      	ldr	r0, [pc, #152]	; (8009604 <cppLoop+0x1c1c>)
 800956c:	f7fa fbbb 	bl	8003ce6 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009570:	4b28      	ldr	r3, [pc, #160]	; (8009614 <cppLoop+0x1c2c>)
 8009572:	edd3 7a00 	vldr	s15, [r3]
 8009576:	eeb0 0a67 	vmov.f32	s0, s15
 800957a:	4822      	ldr	r0, [pc, #136]	; (8009604 <cppLoop+0x1c1c>)
 800957c:	f7fa fbd3 	bl	8003d26 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009580:	4820      	ldr	r0, [pc, #128]	; (8009604 <cppLoop+0x1c1c>)
 8009582:	f7fb f86f 	bl	8004664 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 8009586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800958a:	f000 fb4d 	bl	8009c28 <HAL_Delay>

			logger.start();
 800958e:	4815      	ldr	r0, [pc, #84]	; (80095e4 <cppLoop+0x1bfc>)
 8009590:	f7fb fc06 	bl	8004da0 <_ZN6Logger5startEv>

			line_trace.running();
 8009594:	481b      	ldr	r0, [pc, #108]	; (8009604 <cppLoop+0x1c1c>)
 8009596:	f7fa fe49 	bl	800422c <_ZN9LineTrace7runningEv>

			logger.stop();
 800959a:	4812      	ldr	r0, [pc, #72]	; (80095e4 <cppLoop+0x1bfc>)
 800959c:	f7fb fc1f 	bl	8004dde <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "CURVEL.txt");
 80095a0:	4a1d      	ldr	r2, [pc, #116]	; (8009618 <cppLoop+0x1c30>)
 80095a2:	491e      	ldr	r1, [pc, #120]	; (800961c <cppLoop+0x1c34>)
 80095a4:	480f      	ldr	r0, [pc, #60]	; (80095e4 <cppLoop+0x1bfc>)
 80095a6:	f7fb faf6 	bl	8004b96 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TARVEL.txt");
 80095aa:	4a1d      	ldr	r2, [pc, #116]	; (8009620 <cppLoop+0x1c38>)
 80095ac:	491b      	ldr	r1, [pc, #108]	; (800961c <cppLoop+0x1c34>)
 80095ae:	480d      	ldr	r0, [pc, #52]	; (80095e4 <cppLoop+0x1bfc>)
 80095b0:	f7fb fb05 	bl	8004bbe <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 80095b4:	f04f 32ff 	mov.w	r2, #4294967295
 80095b8:	2100      	movs	r1, #0
 80095ba:	4802      	ldr	r0, [pc, #8]	; (80095c4 <cppLoop+0x1bdc>)
 80095bc:	f7f8 fe56 	bl	800226c <_ZN3LED2LREaa>
		}

		break;
 80095c0:	e206      	b.n	80099d0 <cppLoop+0x1fe8>
 80095c2:	bf00      	nop
 80095c4:	2000054c 	.word	0x2000054c
 80095c8:	08018de4 	.word	0x08018de4
 80095cc:	08018de8 	.word	0x08018de8
 80095d0:	20000540 	.word	0x20000540
 80095d4:	3ea3d70a 	.word	0x3ea3d70a
 80095d8:	200238a0 	.word	0x200238a0
 80095dc:	08018df0 	.word	0x08018df0
 80095e0:	08018df4 	.word	0x08018df4
 80095e4:	20000570 	.word	0x20000570
 80095e8:	20023820 	.word	0x20023820
 80095ec:	00000000 	.word	0x00000000
 80095f0:	08018e00 	.word	0x08018e00
 80095f4:	08018e0c 	.word	0x08018e0c
 80095f8:	08018e18 	.word	0x08018e18
 80095fc:	20048164 	.word	0x20048164
 8009600:	08018cbc 	.word	0x08018cbc
 8009604:	200238a4 	.word	0x200238a4
 8009608:	20048174 	.word	0x20048174
 800960c:	08018e24 	.word	0x08018e24
 8009610:	2004815c 	.word	0x2004815c
 8009614:	2004816c 	.word	0x2004816c
 8009618:	08018ce0 	.word	0x08018ce0
 800961c:	08018cd4 	.word	0x08018cd4
 8009620:	08018cc8 	.word	0x08018cc8

	case 15:
		led.fullColor('W');
 8009624:	2157      	movs	r1, #87	; 0x57
 8009626:	48ac      	ldr	r0, [pc, #688]	; (80098d8 <cppLoop+0x1ef0>)
 8009628:	f7f8 fd64 	bl	80020f4 <_ZN3LED9fullColorEc>

		lcd_clear();
 800962c:	f7f7 fd38 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009630:	2100      	movs	r1, #0
 8009632:	2000      	movs	r0, #0
 8009634:	f7f7 fd44 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*10000));
 8009638:	48a8      	ldr	r0, [pc, #672]	; (80098dc <cppLoop+0x1ef4>)
 800963a:	f7fa fac2 	bl	8003bc2 <_ZN9LineTrace5getKpEv>
 800963e:	eeb0 7a40 	vmov.f32	s14, s0
 8009642:	eddf 7aa7 	vldr	s15, [pc, #668]	; 80098e0 <cppLoop+0x1ef8>
 8009646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964a:	eeb0 0a67 	vmov.f32	s0, s15
 800964e:	f7f9 f913 	bl	8002878 <_ZSt3absf>
 8009652:	ee10 3a10 	vmov	r3, s0
 8009656:	4618      	mov	r0, r3
 8009658:	f7f6 ff8e 	bl	8000578 <__aeabi_f2d>
 800965c:	4603      	mov	r3, r0
 800965e:	460c      	mov	r4, r1
 8009660:	461a      	mov	r2, r3
 8009662:	4623      	mov	r3, r4
 8009664:	489f      	ldr	r0, [pc, #636]	; (80098e4 <cppLoop+0x1efc>)
 8009666:	f7f7 fd55 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800966a:	2101      	movs	r1, #1
 800966c:	2000      	movs	r0, #0
 800966e:	f7f7 fd27 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*100000));
 8009672:	489a      	ldr	r0, [pc, #616]	; (80098dc <cppLoop+0x1ef4>)
 8009674:	f7fa fab4 	bl	8003be0 <_ZN9LineTrace5getKiEv>
 8009678:	eeb0 7a40 	vmov.f32	s14, s0
 800967c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 80098e8 <cppLoop+0x1f00>
 8009680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009684:	eeb0 0a67 	vmov.f32	s0, s15
 8009688:	f7f9 f8f6 	bl	8002878 <_ZSt3absf>
 800968c:	ee10 3a10 	vmov	r3, s0
 8009690:	4618      	mov	r0, r3
 8009692:	f7f6 ff71 	bl	8000578 <__aeabi_f2d>
 8009696:	4605      	mov	r5, r0
 8009698:	460e      	mov	r6, r1
 800969a:	4890      	ldr	r0, [pc, #576]	; (80098dc <cppLoop+0x1ef4>)
 800969c:	f7fa faaf 	bl	8003bfe <_ZN9LineTrace5getKdEv>
 80096a0:	eeb0 7a40 	vmov.f32	s14, s0
 80096a4:	eddf 7a91 	vldr	s15, [pc, #580]	; 80098ec <cppLoop+0x1f04>
 80096a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ac:	eeb0 0a67 	vmov.f32	s0, s15
 80096b0:	f7f9 f8e2 	bl	8002878 <_ZSt3absf>
 80096b4:	ee10 3a10 	vmov	r3, s0
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7f6 ff5d 	bl	8000578 <__aeabi_f2d>
 80096be:	4603      	mov	r3, r0
 80096c0:	460c      	mov	r4, r1
 80096c2:	e9cd 3400 	strd	r3, r4, [sp]
 80096c6:	462a      	mov	r2, r5
 80096c8:	4633      	mov	r3, r6
 80096ca:	4889      	ldr	r0, [pc, #548]	; (80098f0 <cppLoop+0x1f08>)
 80096cc:	f7f7 fd22 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80096d0:	4888      	ldr	r0, [pc, #544]	; (80098f4 <cppLoop+0x1f0c>)
 80096d2:	f7f8 fcab 	bl	800202c <_ZN8JoyStick8getValueEv>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b08      	cmp	r3, #8
 80096da:	bf0c      	ite	eq
 80096dc:	2301      	moveq	r3, #1
 80096de:	2300      	movne	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d021      	beq.n	800972a <cppLoop+0x1d42>
			led.LR(-1, 1);
 80096e6:	2201      	movs	r2, #1
 80096e8:	f04f 31ff 	mov.w	r1, #4294967295
 80096ec:	487a      	ldr	r0, [pc, #488]	; (80098d8 <cppLoop+0x1ef0>)
 80096ee:	f7f8 fdbd 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80096f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80096f6:	f000 fa97 	bl	8009c28 <HAL_Delay>

			selector++;
 80096fa:	4b7f      	ldr	r3, [pc, #508]	; (80098f8 <cppLoop+0x1f10>)
 80096fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009700:	b29b      	uxth	r3, r3
 8009702:	3301      	adds	r3, #1
 8009704:	b29b      	uxth	r3, r3
 8009706:	b21a      	sxth	r2, r3
 8009708:	4b7b      	ldr	r3, [pc, #492]	; (80098f8 <cppLoop+0x1f10>)
 800970a:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 800970c:	4b7a      	ldr	r3, [pc, #488]	; (80098f8 <cppLoop+0x1f10>)
 800970e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009712:	2b02      	cmp	r3, #2
 8009714:	dd02      	ble.n	800971c <cppLoop+0x1d34>
 8009716:	4b78      	ldr	r3, [pc, #480]	; (80098f8 <cppLoop+0x1f10>)
 8009718:	2200      	movs	r2, #0
 800971a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800971c:	2200      	movs	r2, #0
 800971e:	f04f 31ff 	mov.w	r1, #4294967295
 8009722:	486d      	ldr	r0, [pc, #436]	; (80098d8 <cppLoop+0x1ef0>)
 8009724:	f7f8 fda2 	bl	800226c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009728:	e154      	b.n	80099d4 <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_R){
 800972a:	4872      	ldr	r0, [pc, #456]	; (80098f4 <cppLoop+0x1f0c>)
 800972c:	f7f8 fc7e 	bl	800202c <_ZN8JoyStick8getValueEv>
 8009730:	4603      	mov	r3, r0
 8009732:	2b10      	cmp	r3, #16
 8009734:	bf0c      	ite	eq
 8009736:	2301      	moveq	r3, #1
 8009738:	2300      	movne	r3, #0
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b00      	cmp	r3, #0
 800973e:	d058      	beq.n	80097f2 <cppLoop+0x1e0a>
			led.LR(-1, 1);
 8009740:	2201      	movs	r2, #1
 8009742:	f04f 31ff 	mov.w	r1, #4294967295
 8009746:	4864      	ldr	r0, [pc, #400]	; (80098d8 <cppLoop+0x1ef0>)
 8009748:	f7f8 fd90 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800974c:	2064      	movs	r0, #100	; 0x64
 800974e:	f000 fa6b 	bl	8009c28 <HAL_Delay>
			if(selector == 0){
 8009752:	4b69      	ldr	r3, [pc, #420]	; (80098f8 <cppLoop+0x1f10>)
 8009754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d113      	bne.n	8009784 <cppLoop+0x1d9c>
				adj_kp = adj_kp + 0.000001;
 800975c:	4b67      	ldr	r3, [pc, #412]	; (80098fc <cppLoop+0x1f14>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4618      	mov	r0, r3
 8009762:	f7f6 ff09 	bl	8000578 <__aeabi_f2d>
 8009766:	a356      	add	r3, pc, #344	; (adr r3, 80098c0 <cppLoop+0x1ed8>)
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f7f6 fda6 	bl	80002bc <__adddf3>
 8009770:	4603      	mov	r3, r0
 8009772:	460c      	mov	r4, r1
 8009774:	4618      	mov	r0, r3
 8009776:	4621      	mov	r1, r4
 8009778:	f7f7 fa4e 	bl	8000c18 <__aeabi_d2f>
 800977c:	4602      	mov	r2, r0
 800977e:	4b5f      	ldr	r3, [pc, #380]	; (80098fc <cppLoop+0x1f14>)
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	e02b      	b.n	80097dc <cppLoop+0x1df4>
			else if(selector == 1){
 8009784:	4b5c      	ldr	r3, [pc, #368]	; (80098f8 <cppLoop+0x1f10>)
 8009786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d113      	bne.n	80097b6 <cppLoop+0x1dce>
				adj_ki = adj_ki + 0.00001;
 800978e:	4b5c      	ldr	r3, [pc, #368]	; (8009900 <cppLoop+0x1f18>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4618      	mov	r0, r3
 8009794:	f7f6 fef0 	bl	8000578 <__aeabi_f2d>
 8009798:	a34b      	add	r3, pc, #300	; (adr r3, 80098c8 <cppLoop+0x1ee0>)
 800979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979e:	f7f6 fd8d 	bl	80002bc <__adddf3>
 80097a2:	4603      	mov	r3, r0
 80097a4:	460c      	mov	r4, r1
 80097a6:	4618      	mov	r0, r3
 80097a8:	4621      	mov	r1, r4
 80097aa:	f7f7 fa35 	bl	8000c18 <__aeabi_d2f>
 80097ae:	4602      	mov	r2, r0
 80097b0:	4b53      	ldr	r3, [pc, #332]	; (8009900 <cppLoop+0x1f18>)
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	e012      	b.n	80097dc <cppLoop+0x1df4>
				adj_kd = adj_kd + 0.0000001;
 80097b6:	4b53      	ldr	r3, [pc, #332]	; (8009904 <cppLoop+0x1f1c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7f6 fedc 	bl	8000578 <__aeabi_f2d>
 80097c0:	a343      	add	r3, pc, #268	; (adr r3, 80098d0 <cppLoop+0x1ee8>)
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	f7f6 fd79 	bl	80002bc <__adddf3>
 80097ca:	4603      	mov	r3, r0
 80097cc:	460c      	mov	r4, r1
 80097ce:	4618      	mov	r0, r3
 80097d0:	4621      	mov	r1, r4
 80097d2:	f7f7 fa21 	bl	8000c18 <__aeabi_d2f>
 80097d6:	4602      	mov	r2, r0
 80097d8:	4b4a      	ldr	r3, [pc, #296]	; (8009904 <cppLoop+0x1f1c>)
 80097da:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80097dc:	2152      	movs	r1, #82	; 0x52
 80097de:	483e      	ldr	r0, [pc, #248]	; (80098d8 <cppLoop+0x1ef0>)
 80097e0:	f7f8 fc88 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80097e4:	2200      	movs	r2, #0
 80097e6:	f04f 31ff 	mov.w	r1, #4294967295
 80097ea:	483b      	ldr	r0, [pc, #236]	; (80098d8 <cppLoop+0x1ef0>)
 80097ec:	f7f8 fd3e 	bl	800226c <_ZN3LED2LREaa>
		break;
 80097f0:	e0f0      	b.n	80099d4 <cppLoop+0x1fec>
		else if(joy_stick.getValue() == JOY_L){
 80097f2:	4840      	ldr	r0, [pc, #256]	; (80098f4 <cppLoop+0x1f0c>)
 80097f4:	f7f8 fc1a 	bl	800202c <_ZN8JoyStick8getValueEv>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	bf0c      	ite	eq
 80097fe:	2301      	moveq	r3, #1
 8009800:	2300      	movne	r3, #0
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d07f      	beq.n	8009908 <cppLoop+0x1f20>
			led.LR(-1, 1);
 8009808:	2201      	movs	r2, #1
 800980a:	f04f 31ff 	mov.w	r1, #4294967295
 800980e:	4832      	ldr	r0, [pc, #200]	; (80098d8 <cppLoop+0x1ef0>)
 8009810:	f7f8 fd2c 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009814:	2064      	movs	r0, #100	; 0x64
 8009816:	f000 fa07 	bl	8009c28 <HAL_Delay>
			if(selector == 0){
 800981a:	4b37      	ldr	r3, [pc, #220]	; (80098f8 <cppLoop+0x1f10>)
 800981c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d113      	bne.n	800984c <cppLoop+0x1e64>
				adj_kp = adj_kp - 0.000001;
 8009824:	4b35      	ldr	r3, [pc, #212]	; (80098fc <cppLoop+0x1f14>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f7f6 fea5 	bl	8000578 <__aeabi_f2d>
 800982e:	a324      	add	r3, pc, #144	; (adr r3, 80098c0 <cppLoop+0x1ed8>)
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	f7f6 fd40 	bl	80002b8 <__aeabi_dsub>
 8009838:	4603      	mov	r3, r0
 800983a:	460c      	mov	r4, r1
 800983c:	4618      	mov	r0, r3
 800983e:	4621      	mov	r1, r4
 8009840:	f7f7 f9ea 	bl	8000c18 <__aeabi_d2f>
 8009844:	4602      	mov	r2, r0
 8009846:	4b2d      	ldr	r3, [pc, #180]	; (80098fc <cppLoop+0x1f14>)
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	e02b      	b.n	80098a4 <cppLoop+0x1ebc>
			else if(selector == 1){
 800984c:	4b2a      	ldr	r3, [pc, #168]	; (80098f8 <cppLoop+0x1f10>)
 800984e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d113      	bne.n	800987e <cppLoop+0x1e96>
				adj_ki = adj_ki - 0.00001;
 8009856:	4b2a      	ldr	r3, [pc, #168]	; (8009900 <cppLoop+0x1f18>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4618      	mov	r0, r3
 800985c:	f7f6 fe8c 	bl	8000578 <__aeabi_f2d>
 8009860:	a319      	add	r3, pc, #100	; (adr r3, 80098c8 <cppLoop+0x1ee0>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	f7f6 fd27 	bl	80002b8 <__aeabi_dsub>
 800986a:	4603      	mov	r3, r0
 800986c:	460c      	mov	r4, r1
 800986e:	4618      	mov	r0, r3
 8009870:	4621      	mov	r1, r4
 8009872:	f7f7 f9d1 	bl	8000c18 <__aeabi_d2f>
 8009876:	4602      	mov	r2, r0
 8009878:	4b21      	ldr	r3, [pc, #132]	; (8009900 <cppLoop+0x1f18>)
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	e012      	b.n	80098a4 <cppLoop+0x1ebc>
				adj_kd = adj_kd - 0.0000001;
 800987e:	4b21      	ldr	r3, [pc, #132]	; (8009904 <cppLoop+0x1f1c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f7f6 fe78 	bl	8000578 <__aeabi_f2d>
 8009888:	a311      	add	r3, pc, #68	; (adr r3, 80098d0 <cppLoop+0x1ee8>)
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f7f6 fd13 	bl	80002b8 <__aeabi_dsub>
 8009892:	4603      	mov	r3, r0
 8009894:	460c      	mov	r4, r1
 8009896:	4618      	mov	r0, r3
 8009898:	4621      	mov	r1, r4
 800989a:	f7f7 f9bd 	bl	8000c18 <__aeabi_d2f>
 800989e:	4602      	mov	r2, r0
 80098a0:	4b18      	ldr	r3, [pc, #96]	; (8009904 <cppLoop+0x1f1c>)
 80098a2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80098a4:	2152      	movs	r1, #82	; 0x52
 80098a6:	480c      	ldr	r0, [pc, #48]	; (80098d8 <cppLoop+0x1ef0>)
 80098a8:	f7f8 fc24 	bl	80020f4 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80098ac:	2200      	movs	r2, #0
 80098ae:	f04f 31ff 	mov.w	r1, #4294967295
 80098b2:	4809      	ldr	r0, [pc, #36]	; (80098d8 <cppLoop+0x1ef0>)
 80098b4:	f7f8 fcda 	bl	800226c <_ZN3LED2LREaa>
		break;
 80098b8:	e08c      	b.n	80099d4 <cppLoop+0x1fec>
 80098ba:	bf00      	nop
 80098bc:	f3af 8000 	nop.w
 80098c0:	a0b5ed8d 	.word	0xa0b5ed8d
 80098c4:	3eb0c6f7 	.word	0x3eb0c6f7
 80098c8:	88e368f1 	.word	0x88e368f1
 80098cc:	3ee4f8b5 	.word	0x3ee4f8b5
 80098d0:	9abcaf48 	.word	0x9abcaf48
 80098d4:	3e7ad7f2 	.word	0x3e7ad7f2
 80098d8:	2000054c 	.word	0x2000054c
 80098dc:	200238a4 	.word	0x200238a4
 80098e0:	461c4000 	.word	0x461c4000
 80098e4:	08018e30 	.word	0x08018e30
 80098e8:	447a0000 	.word	0x447a0000
 80098ec:	47c35000 	.word	0x47c35000
 80098f0:	08018c74 	.word	0x08018c74
 80098f4:	20000540 	.word	0x20000540
 80098f8:	20048118 	.word	0x20048118
 80098fc:	20048124 	.word	0x20048124
 8009900:	2004812c 	.word	0x2004812c
 8009904:	20048134 	.word	0x20048134
		else if(joy_stick.getValue() == JOY_C){
 8009908:	4836      	ldr	r0, [pc, #216]	; (80099e4 <cppLoop+0x1ffc>)
 800990a:	f7f8 fb8f 	bl	800202c <_ZN8JoyStick8getValueEv>
 800990e:	4603      	mov	r3, r0
 8009910:	2b02      	cmp	r3, #2
 8009912:	bf0c      	ite	eq
 8009914:	2301      	moveq	r3, #1
 8009916:	2300      	movne	r3, #0
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d05a      	beq.n	80099d4 <cppLoop+0x1fec>
			led.LR(-1, 1);
 800991e:	2201      	movs	r2, #1
 8009920:	f04f 31ff 	mov.w	r1, #4294967295
 8009924:	4830      	ldr	r0, [pc, #192]	; (80099e8 <cppLoop+0x2000>)
 8009926:	f7f8 fca1 	bl	800226c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800992a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800992e:	f000 f97b 	bl	8009c28 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009932:	2300      	movs	r3, #0
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	4b2d      	ldr	r3, [pc, #180]	; (80099ec <cppLoop+0x2004>)
 8009938:	2201      	movs	r2, #1
 800993a:	492d      	ldr	r1, [pc, #180]	; (80099f0 <cppLoop+0x2008>)
 800993c:	482d      	ldr	r0, [pc, #180]	; (80099f4 <cppLoop+0x200c>)
 800993e:	f7f7 ff5f 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009942:	2300      	movs	r3, #0
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	4b2c      	ldr	r3, [pc, #176]	; (80099f8 <cppLoop+0x2010>)
 8009948:	2201      	movs	r2, #1
 800994a:	492c      	ldr	r1, [pc, #176]	; (80099fc <cppLoop+0x2014>)
 800994c:	4829      	ldr	r0, [pc, #164]	; (80099f4 <cppLoop+0x200c>)
 800994e:	f7f7 ff57 	bl	8001800 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009952:	2300      	movs	r3, #0
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <cppLoop+0x2018>)
 8009958:	2201      	movs	r2, #1
 800995a:	492a      	ldr	r1, [pc, #168]	; (8009a04 <cppLoop+0x201c>)
 800995c:	4825      	ldr	r0, [pc, #148]	; (80099f4 <cppLoop+0x200c>)
 800995e:	f7f7 ff4f 	bl	8001800 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009962:	4b22      	ldr	r3, [pc, #136]	; (80099ec <cppLoop+0x2004>)
 8009964:	edd3 7a00 	vldr	s15, [r3]
 8009968:	4b23      	ldr	r3, [pc, #140]	; (80099f8 <cppLoop+0x2010>)
 800996a:	ed93 7a00 	vldr	s14, [r3]
 800996e:	4b24      	ldr	r3, [pc, #144]	; (8009a00 <cppLoop+0x2018>)
 8009970:	edd3 6a00 	vldr	s13, [r3]
 8009974:	eeb0 1a66 	vmov.f32	s2, s13
 8009978:	eef0 0a47 	vmov.f32	s1, s14
 800997c:	eeb0 0a67 	vmov.f32	s0, s15
 8009980:	4821      	ldr	r0, [pc, #132]	; (8009a08 <cppLoop+0x2020>)
 8009982:	f7fa f905 	bl	8003b90 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009986:	2200      	movs	r2, #0
 8009988:	f04f 31ff 	mov.w	r1, #4294967295
 800998c:	4816      	ldr	r0, [pc, #88]	; (80099e8 <cppLoop+0x2000>)
 800998e:	f7f8 fc6d 	bl	800226c <_ZN3LED2LREaa>
		break;
 8009992:	e01f      	b.n	80099d4 <cppLoop+0x1fec>

	default:
		break;
 8009994:	bf00      	nop
 8009996:	e01e      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 8009998:	bf00      	nop
 800999a:	e01c      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 800999c:	bf00      	nop
 800999e:	e01a      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099a0:	bf00      	nop
 80099a2:	e018      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099a4:	bf00      	nop
 80099a6:	e016      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099a8:	bf00      	nop
 80099aa:	e014      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099ac:	bf00      	nop
 80099ae:	e012      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099b0:	bf00      	nop
 80099b2:	e010      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099b4:	bf00      	nop
 80099b6:	e00e      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099b8:	bf00      	nop
 80099ba:	e00c      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099bc:	bf00      	nop
 80099be:	e00a      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099c0:	bf00      	nop
 80099c2:	e008      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099c4:	bf00      	nop
 80099c6:	e006      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099c8:	bf00      	nop
 80099ca:	e004      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099cc:	bf00      	nop
 80099ce:	e002      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099d0:	bf00      	nop
 80099d2:	e000      	b.n	80099d6 <cppLoop+0x1fee>
		break;
 80099d4:	bf00      	nop

	}

	HAL_Delay(30);
 80099d6:	201e      	movs	r0, #30
 80099d8:	f000 f926 	bl	8009c28 <HAL_Delay>

}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e4:	20000540 	.word	0x20000540
 80099e8:	2000054c 	.word	0x2000054c
 80099ec:	20048124 	.word	0x20048124
 80099f0:	08018e3c 	.word	0x08018e3c
 80099f4:	08018c90 	.word	0x08018c90
 80099f8:	2004812c 	.word	0x2004812c
 80099fc:	08018e44 	.word	0x08018e44
 8009a00:	20048134 	.word	0x20048134
 8009a04:	08018e4c 	.word	0x08018e4c
 8009a08:	200238a4 	.word	0x200238a4

08009a0c <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af06      	add	r7, sp, #24
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d142      	bne.n	8009aa2 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d13d      	bne.n	8009aa2 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009a26:	4821      	ldr	r0, [pc, #132]	; (8009aac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009a28:	f7f8 fc58 	bl	80022dc <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009a2c:	4820      	ldr	r0, [pc, #128]	; (8009ab0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009a2e:	f7fb fce7 	bl	8005400 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009a32:	4820      	ldr	r0, [pc, #128]	; (8009ab4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009a34:	f7f8 faee 	bl	8002014 <_ZN8JoyStickC1Ev>
Motor motor;
 8009a38:	481f      	ldr	r0, [pc, #124]	; (8009ab8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009a3a:	f7fb f9e1 	bl	8004e00 <_ZN5MotorC1Ev>
IMU imu;
 8009a3e:	481f      	ldr	r0, [pc, #124]	; (8009abc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009a40:	f7f8 f8f6 	bl	8001c30 <_ZN3IMUC1Ev>
Logger logger;
 8009a44:	481e      	ldr	r0, [pc, #120]	; (8009ac0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009a46:	f7fa fefd 	bl	8004844 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009a4a:	481e      	ldr	r0, [pc, #120]	; (8009ac4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009a4c:	f7f7 fcbe 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009a50:	4b1a      	ldr	r3, [pc, #104]	; (8009abc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009a52:	4a1c      	ldr	r2, [pc, #112]	; (8009ac4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009a54:	4918      	ldr	r1, [pc, #96]	; (8009ab8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009a56:	481c      	ldr	r0, [pc, #112]	; (8009ac8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009a58:	f7fb ffc9 	bl	80059ee <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009a5c:	4b1a      	ldr	r3, [pc, #104]	; (8009ac8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009a5e:	4a17      	ldr	r2, [pc, #92]	; (8009abc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009a60:	4918      	ldr	r1, [pc, #96]	; (8009ac4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009a62:	481a      	ldr	r0, [pc, #104]	; (8009acc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009a64:	f7fb fab2 	bl	8004fcc <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009a68:	4819      	ldr	r0, [pc, #100]	; (8009ad0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009a6a:	f7f7 fbb3 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009a6e:	4b18      	ldr	r3, [pc, #96]	; (8009ad0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009a70:	9305      	str	r3, [sp, #20]
 8009a72:	4b12      	ldr	r3, [pc, #72]	; (8009abc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009a74:	9304      	str	r3, [sp, #16]
 8009a76:	4b12      	ldr	r3, [pc, #72]	; (8009ac0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009a78:	9303      	str	r3, [sp, #12]
 8009a7a:	4b14      	ldr	r3, [pc, #80]	; (8009acc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009a7c:	9302      	str	r3, [sp, #8]
 8009a7e:	4b11      	ldr	r3, [pc, #68]	; (8009ac4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	4b10      	ldr	r3, [pc, #64]	; (8009ac8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009a88:	4a08      	ldr	r2, [pc, #32]	; (8009aac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009a8a:	490b      	ldr	r1, [pc, #44]	; (8009ab8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009a8c:	4811      	ldr	r0, [pc, #68]	; (8009ad4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009a8e:	f7f8 ff03 	bl	8002898 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009a92:	4a09      	ldr	r2, [pc, #36]	; (8009ab8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009a94:	490a      	ldr	r1, [pc, #40]	; (8009ac0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009a96:	4810      	ldr	r0, [pc, #64]	; (8009ad8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009a98:	f7fb fde1 	bl	800565e <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009a9c:	480f      	ldr	r0, [pc, #60]	; (8009adc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009a9e:	f7fb fb41 	bl	8005124 <_ZN13PathFollowingC1Ev>
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	2000023c 	.word	0x2000023c
 8009ab0:	20000534 	.word	0x20000534
 8009ab4:	20000540 	.word	0x20000540
 8009ab8:	20000548 	.word	0x20000548
 8009abc:	2000055c 	.word	0x2000055c
 8009ac0:	20000570 	.word	0x20000570
 8009ac4:	200237fc 	.word	0x200237fc
 8009ac8:	20023820 	.word	0x20023820
 8009acc:	20023860 	.word	0x20023860
 8009ad0:	200238a0 	.word	0x200238a0
 8009ad4:	200238a4 	.word	0x200238a4
 8009ad8:	200307e4 	.word	0x200307e4
 8009adc:	200309f0 	.word	0x200309f0

08009ae0 <_GLOBAL__sub_I_line_sensor>:
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009ae8:	2001      	movs	r0, #1
 8009aea:	f7ff ff8f 	bl	8009a0c <_Z41__static_initialization_and_destruction_0ii>
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009b28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009af4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009af6:	e003      	b.n	8009b00 <LoopCopyDataInit>

08009af8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009af8:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009afa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009afc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009afe:	3104      	adds	r1, #4

08009b00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009b00:	480b      	ldr	r0, [pc, #44]	; (8009b30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009b02:	4b0c      	ldr	r3, [pc, #48]	; (8009b34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009b04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009b06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009b08:	d3f6      	bcc.n	8009af8 <CopyDataInit>
  ldr  r2, =_sbss
 8009b0a:	4a0b      	ldr	r2, [pc, #44]	; (8009b38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009b0c:	e002      	b.n	8009b14 <LoopFillZerobss>

08009b0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009b0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009b10:	f842 3b04 	str.w	r3, [r2], #4

08009b14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009b14:	4b09      	ldr	r3, [pc, #36]	; (8009b3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009b16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009b18:	d3f9      	bcc.n	8009b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009b1a:	f7fd fe6b 	bl	80077f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009b1e:	f00a fd7d 	bl	801461c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009b22:	f7fc f9a5 	bl	8005e70 <main>
  bx  lr    
 8009b26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009b28:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009b2c:	08019268 	.word	0x08019268
  ldr  r0, =_sdata
 8009b30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009b34:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009b38:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009b3c:	2004cb78 	.word	0x2004cb78

08009b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009b40:	e7fe      	b.n	8009b40 <ADC_IRQHandler>
	...

08009b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009b48:	4b0e      	ldr	r3, [pc, #56]	; (8009b84 <HAL_Init+0x40>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a0d      	ldr	r2, [pc, #52]	; (8009b84 <HAL_Init+0x40>)
 8009b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009b54:	4b0b      	ldr	r3, [pc, #44]	; (8009b84 <HAL_Init+0x40>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a0a      	ldr	r2, [pc, #40]	; (8009b84 <HAL_Init+0x40>)
 8009b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009b60:	4b08      	ldr	r3, [pc, #32]	; (8009b84 <HAL_Init+0x40>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a07      	ldr	r2, [pc, #28]	; (8009b84 <HAL_Init+0x40>)
 8009b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009b6c:	2003      	movs	r0, #3
 8009b6e:	f000 fd51 	bl	800a614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009b72:	2000      	movs	r0, #0
 8009b74:	f000 f808 	bl	8009b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009b78:	f7fd f88c 	bl	8006c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	40023c00 	.word	0x40023c00

08009b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009b90:	4b12      	ldr	r3, [pc, #72]	; (8009bdc <HAL_InitTick+0x54>)
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	4b12      	ldr	r3, [pc, #72]	; (8009be0 <HAL_InitTick+0x58>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	4619      	mov	r1, r3
 8009b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 fd69 	bl	800a67e <HAL_SYSTICK_Config>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e00e      	b.n	8009bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b0f      	cmp	r3, #15
 8009bba:	d80a      	bhi.n	8009bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	f000 fd31 	bl	800a62a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009bc8:	4a06      	ldr	r2, [pc, #24]	; (8009be4 <HAL_InitTick+0x5c>)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	e000      	b.n	8009bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	20000000 	.word	0x20000000
 8009be0:	20000008 	.word	0x20000008
 8009be4:	20000004 	.word	0x20000004

08009be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009be8:	b480      	push	{r7}
 8009bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009bec:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <HAL_IncTick+0x20>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <HAL_IncTick+0x24>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	4a04      	ldr	r2, [pc, #16]	; (8009c0c <HAL_IncTick+0x24>)
 8009bfa:	6013      	str	r3, [r2, #0]
}
 8009bfc:	bf00      	nop
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	20000008 	.word	0x20000008
 8009c0c:	2004ab00 	.word	0x2004ab00

08009c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
  return uwTick;
 8009c14:	4b03      	ldr	r3, [pc, #12]	; (8009c24 <HAL_GetTick+0x14>)
 8009c16:	681b      	ldr	r3, [r3, #0]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	2004ab00 	.word	0x2004ab00

08009c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009c30:	f7ff ffee 	bl	8009c10 <HAL_GetTick>
 8009c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c40:	d005      	beq.n	8009c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009c42:	4b09      	ldr	r3, [pc, #36]	; (8009c68 <HAL_Delay+0x40>)
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009c4e:	bf00      	nop
 8009c50:	f7ff ffde 	bl	8009c10 <HAL_GetTick>
 8009c54:	4602      	mov	r2, r0
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d8f7      	bhi.n	8009c50 <HAL_Delay+0x28>
  {
  }
}
 8009c60:	bf00      	nop
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	20000008 	.word	0x20000008

08009c6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d101      	bne.n	8009c82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e033      	b.n	8009cea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d109      	bne.n	8009c9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7fd f82a 	bl	8006ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	f003 0310 	and.w	r3, r3, #16
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d118      	bne.n	8009cdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009cb2:	f023 0302 	bic.w	r3, r3, #2
 8009cb6:	f043 0202 	orr.w	r2, r3, #2
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa5a 	bl	800a178 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cce:	f023 0303 	bic.w	r3, r3, #3
 8009cd2:	f043 0201 	orr.w	r2, r3, #1
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	641a      	str	r2, [r3, #64]	; 0x40
 8009cda:	e001      	b.n	8009ce0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d101      	bne.n	8009d12 <HAL_ADC_Start_DMA+0x1e>
 8009d0e:	2302      	movs	r3, #2
 8009d10:	e0cc      	b.n	8009eac <HAL_ADC_Start_DMA+0x1b8>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d018      	beq.n	8009d5a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	689a      	ldr	r2, [r3, #8]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f042 0201 	orr.w	r2, r2, #1
 8009d36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009d38:	4b5e      	ldr	r3, [pc, #376]	; (8009eb4 <HAL_ADC_Start_DMA+0x1c0>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a5e      	ldr	r2, [pc, #376]	; (8009eb8 <HAL_ADC_Start_DMA+0x1c4>)
 8009d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d42:	0c9a      	lsrs	r2, r3, #18
 8009d44:	4613      	mov	r3, r2
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	4413      	add	r3, r2
 8009d4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009d4c:	e002      	b.n	8009d54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1f9      	bne.n	8009d4e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	f040 80a0 	bne.w	8009eaa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009d72:	f023 0301 	bic.w	r3, r3, #1
 8009d76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d007      	beq.n	8009d9c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009d94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009da8:	d106      	bne.n	8009db8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dae:	f023 0206 	bic.w	r2, r3, #6
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	645a      	str	r2, [r3, #68]	; 0x44
 8009db6:	e002      	b.n	8009dbe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009dc6:	4b3d      	ldr	r3, [pc, #244]	; (8009ebc <HAL_ADC_Start_DMA+0x1c8>)
 8009dc8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dce:	4a3c      	ldr	r2, [pc, #240]	; (8009ec0 <HAL_ADC_Start_DMA+0x1cc>)
 8009dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd6:	4a3b      	ldr	r2, [pc, #236]	; (8009ec4 <HAL_ADC_Start_DMA+0x1d0>)
 8009dd8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dde:	4a3a      	ldr	r2, [pc, #232]	; (8009ec8 <HAL_ADC_Start_DMA+0x1d4>)
 8009de0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009dea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009dfa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	689a      	ldr	r2, [r3, #8]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	334c      	adds	r3, #76	; 0x4c
 8009e16:	4619      	mov	r1, r3
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f000 fcea 	bl	800a7f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f003 031f 	and.w	r3, r3, #31
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d12a      	bne.n	8009e82 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a26      	ldr	r2, [pc, #152]	; (8009ecc <HAL_ADC_Start_DMA+0x1d8>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d015      	beq.n	8009e62 <HAL_ADC_Start_DMA+0x16e>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a25      	ldr	r2, [pc, #148]	; (8009ed0 <HAL_ADC_Start_DMA+0x1dc>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d105      	bne.n	8009e4c <HAL_ADC_Start_DMA+0x158>
 8009e40:	4b1e      	ldr	r3, [pc, #120]	; (8009ebc <HAL_ADC_Start_DMA+0x1c8>)
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	f003 031f 	and.w	r3, r3, #31
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00a      	beq.n	8009e62 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a20      	ldr	r2, [pc, #128]	; (8009ed4 <HAL_ADC_Start_DMA+0x1e0>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d129      	bne.n	8009eaa <HAL_ADC_Start_DMA+0x1b6>
 8009e56:	4b19      	ldr	r3, [pc, #100]	; (8009ebc <HAL_ADC_Start_DMA+0x1c8>)
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	f003 031f 	and.w	r3, r3, #31
 8009e5e:	2b0f      	cmp	r3, #15
 8009e60:	d823      	bhi.n	8009eaa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d11c      	bne.n	8009eaa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689a      	ldr	r2, [r3, #8]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009e7e:	609a      	str	r2, [r3, #8]
 8009e80:	e013      	b.n	8009eaa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a11      	ldr	r2, [pc, #68]	; (8009ecc <HAL_ADC_Start_DMA+0x1d8>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d10e      	bne.n	8009eaa <HAL_ADC_Start_DMA+0x1b6>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d107      	bne.n	8009eaa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	689a      	ldr	r2, [r3, #8]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009ea8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	20000000 	.word	0x20000000
 8009eb8:	431bde83 	.word	0x431bde83
 8009ebc:	40012300 	.word	0x40012300
 8009ec0:	0800a371 	.word	0x0800a371
 8009ec4:	0800a42b 	.word	0x0800a42b
 8009ec8:	0800a447 	.word	0x0800a447
 8009ecc:	40012000 	.word	0x40012000
 8009ed0:	40012100 	.word	0x40012100
 8009ed4:	40012200 	.word	0x40012200

08009ed8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d101      	bne.n	8009f30 <HAL_ADC_ConfigChannel+0x1c>
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	e113      	b.n	800a158 <HAL_ADC_ConfigChannel+0x244>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b09      	cmp	r3, #9
 8009f3e:	d925      	bls.n	8009f8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68d9      	ldr	r1, [r3, #12]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4613      	mov	r3, r2
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	4413      	add	r3, r2
 8009f54:	3b1e      	subs	r3, #30
 8009f56:	2207      	movs	r2, #7
 8009f58:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5c:	43da      	mvns	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	400a      	ands	r2, r1
 8009f64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	68d9      	ldr	r1, [r3, #12]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	4618      	mov	r0, r3
 8009f78:	4603      	mov	r3, r0
 8009f7a:	005b      	lsls	r3, r3, #1
 8009f7c:	4403      	add	r3, r0
 8009f7e:	3b1e      	subs	r3, #30
 8009f80:	409a      	lsls	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	430a      	orrs	r2, r1
 8009f88:	60da      	str	r2, [r3, #12]
 8009f8a:	e022      	b.n	8009fd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6919      	ldr	r1, [r3, #16]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	4413      	add	r3, r2
 8009fa0:	2207      	movs	r2, #7
 8009fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa6:	43da      	mvns	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	400a      	ands	r2, r1
 8009fae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6919      	ldr	r1, [r3, #16]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	689a      	ldr	r2, [r3, #8]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	4403      	add	r3, r0
 8009fc8:	409a      	lsls	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	2b06      	cmp	r3, #6
 8009fd8:	d824      	bhi.n	800a024 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	3b05      	subs	r3, #5
 8009fec:	221f      	movs	r2, #31
 8009fee:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff2:	43da      	mvns	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	400a      	ands	r2, r1
 8009ffa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	b29b      	uxth	r3, r3
 800a008:	4618      	mov	r0, r3
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	4613      	mov	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	3b05      	subs	r3, #5
 800a016:	fa00 f203 	lsl.w	r2, r0, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	635a      	str	r2, [r3, #52]	; 0x34
 800a022:	e04c      	b.n	800a0be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	2b0c      	cmp	r3, #12
 800a02a:	d824      	bhi.n	800a076 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	4613      	mov	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4413      	add	r3, r2
 800a03c:	3b23      	subs	r3, #35	; 0x23
 800a03e:	221f      	movs	r2, #31
 800a040:	fa02 f303 	lsl.w	r3, r2, r3
 800a044:	43da      	mvns	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	400a      	ands	r2, r1
 800a04c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	4618      	mov	r0, r3
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	3b23      	subs	r3, #35	; 0x23
 800a068:	fa00 f203 	lsl.w	r2, r0, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	430a      	orrs	r2, r1
 800a072:	631a      	str	r2, [r3, #48]	; 0x30
 800a074:	e023      	b.n	800a0be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	3b41      	subs	r3, #65	; 0x41
 800a088:	221f      	movs	r2, #31
 800a08a:	fa02 f303 	lsl.w	r3, r2, r3
 800a08e:	43da      	mvns	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	400a      	ands	r2, r1
 800a096:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	3b41      	subs	r3, #65	; 0x41
 800a0b2:	fa00 f203 	lsl.w	r2, r0, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a0be:	4b29      	ldr	r3, [pc, #164]	; (800a164 <HAL_ADC_ConfigChannel+0x250>)
 800a0c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a28      	ldr	r2, [pc, #160]	; (800a168 <HAL_ADC_ConfigChannel+0x254>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d10f      	bne.n	800a0ec <HAL_ADC_ConfigChannel+0x1d8>
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b12      	cmp	r3, #18
 800a0d2:	d10b      	bne.n	800a0ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a1d      	ldr	r2, [pc, #116]	; (800a168 <HAL_ADC_ConfigChannel+0x254>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d12b      	bne.n	800a14e <HAL_ADC_ConfigChannel+0x23a>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a1c      	ldr	r2, [pc, #112]	; (800a16c <HAL_ADC_ConfigChannel+0x258>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d003      	beq.n	800a108 <HAL_ADC_ConfigChannel+0x1f4>
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b11      	cmp	r3, #17
 800a106:	d122      	bne.n	800a14e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a11      	ldr	r2, [pc, #68]	; (800a16c <HAL_ADC_ConfigChannel+0x258>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d111      	bne.n	800a14e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a12a:	4b11      	ldr	r3, [pc, #68]	; (800a170 <HAL_ADC_ConfigChannel+0x25c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a11      	ldr	r2, [pc, #68]	; (800a174 <HAL_ADC_ConfigChannel+0x260>)
 800a130:	fba2 2303 	umull	r2, r3, r2, r3
 800a134:	0c9a      	lsrs	r2, r3, #18
 800a136:	4613      	mov	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a140:	e002      	b.n	800a148 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	3b01      	subs	r3, #1
 800a146:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1f9      	bne.n	800a142 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	40012300 	.word	0x40012300
 800a168:	40012000 	.word	0x40012000
 800a16c:	10000012 	.word	0x10000012
 800a170:	20000000 	.word	0x20000000
 800a174:	431bde83 	.word	0x431bde83

0800a178 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a180:	4b79      	ldr	r3, [pc, #484]	; (800a368 <ADC_Init+0x1f0>)
 800a182:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	431a      	orrs	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6859      	ldr	r1, [r3, #4]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	021a      	lsls	r2, r3, #8
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	685a      	ldr	r2, [r3, #4]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a1d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6859      	ldr	r1, [r3, #4]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6899      	ldr	r1, [r3, #8]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	430a      	orrs	r2, r1
 800a204:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20a:	4a58      	ldr	r2, [pc, #352]	; (800a36c <ADC_Init+0x1f4>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d022      	beq.n	800a256 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a21e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6899      	ldr	r1, [r3, #8]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689a      	ldr	r2, [r3, #8]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a240:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	6899      	ldr	r1, [r3, #8]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	430a      	orrs	r2, r1
 800a252:	609a      	str	r2, [r3, #8]
 800a254:	e00f      	b.n	800a276 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a264:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a274:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f022 0202 	bic.w	r2, r2, #2
 800a284:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6899      	ldr	r1, [r3, #8]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	7e1b      	ldrb	r3, [r3, #24]
 800a290:	005a      	lsls	r2, r3, #1
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d01b      	beq.n	800a2dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	685a      	ldr	r2, [r3, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a2c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6859      	ldr	r1, [r3, #4]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	035a      	lsls	r2, r3, #13
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	605a      	str	r2, [r3, #4]
 800a2da:	e007      	b.n	800a2ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a2fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	3b01      	subs	r3, #1
 800a308:	051a      	lsls	r2, r3, #20
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	689a      	ldr	r2, [r3, #8]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a320:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6899      	ldr	r1, [r3, #8]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a32e:	025a      	lsls	r2, r3, #9
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	430a      	orrs	r2, r1
 800a336:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689a      	ldr	r2, [r3, #8]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a346:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6899      	ldr	r1, [r3, #8]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	029a      	lsls	r2, r3, #10
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	430a      	orrs	r2, r1
 800a35a:	609a      	str	r2, [r3, #8]
}
 800a35c:	bf00      	nop
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	40012300 	.word	0x40012300
 800a36c:	0f000001 	.word	0x0f000001

0800a370 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a382:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a386:	2b00      	cmp	r3, #0
 800a388:	d13c      	bne.n	800a404 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d12b      	bne.n	800a3fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d127      	bne.n	800a3fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d006      	beq.n	800a3c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d119      	bne.n	800a3fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f022 0220 	bic.w	r2, r2, #32
 800a3d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d105      	bne.n	800a3fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f4:	f043 0201 	orr.w	r2, r3, #1
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f7ff fd6b 	bl	8009ed8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a402:	e00e      	b.n	800a422 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a408:	f003 0310 	and.w	r3, r3, #16
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d003      	beq.n	800a418 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f7ff fd75 	bl	8009f00 <HAL_ADC_ErrorCallback>
}
 800a416:	e004      	b.n	800a422 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	4798      	blx	r3
}
 800a422:	bf00      	nop
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b084      	sub	sp, #16
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a436:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7ff fd57 	bl	8009eec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a43e:	bf00      	nop
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a452:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2240      	movs	r2, #64	; 0x40
 800a458:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a45e:	f043 0204 	orr.w	r2, r3, #4
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f7ff fd4a 	bl	8009f00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a46c:	bf00      	nop
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f003 0307 	and.w	r3, r3, #7
 800a482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a484:	4b0c      	ldr	r3, [pc, #48]	; (800a4b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a490:	4013      	ands	r3, r2
 800a492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a49c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a4a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a4a6:	4a04      	ldr	r2, [pc, #16]	; (800a4b8 <__NVIC_SetPriorityGrouping+0x44>)
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	60d3      	str	r3, [r2, #12]
}
 800a4ac:	bf00      	nop
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	e000ed00 	.word	0xe000ed00

0800a4bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a4c0:	4b04      	ldr	r3, [pc, #16]	; (800a4d4 <__NVIC_GetPriorityGrouping+0x18>)
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	0a1b      	lsrs	r3, r3, #8
 800a4c6:	f003 0307 	and.w	r3, r3, #7
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	e000ed00 	.word	0xe000ed00

0800a4d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	db0b      	blt.n	800a502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4ea:	79fb      	ldrb	r3, [r7, #7]
 800a4ec:	f003 021f 	and.w	r2, r3, #31
 800a4f0:	4907      	ldr	r1, [pc, #28]	; (800a510 <__NVIC_EnableIRQ+0x38>)
 800a4f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4f6:	095b      	lsrs	r3, r3, #5
 800a4f8:	2001      	movs	r0, #1
 800a4fa:	fa00 f202 	lsl.w	r2, r0, r2
 800a4fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr
 800a50e:	bf00      	nop
 800a510:	e000e100 	.word	0xe000e100

0800a514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	6039      	str	r1, [r7, #0]
 800a51e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a524:	2b00      	cmp	r3, #0
 800a526:	db0a      	blt.n	800a53e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	490c      	ldr	r1, [pc, #48]	; (800a560 <__NVIC_SetPriority+0x4c>)
 800a52e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a532:	0112      	lsls	r2, r2, #4
 800a534:	b2d2      	uxtb	r2, r2
 800a536:	440b      	add	r3, r1
 800a538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a53c:	e00a      	b.n	800a554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	b2da      	uxtb	r2, r3
 800a542:	4908      	ldr	r1, [pc, #32]	; (800a564 <__NVIC_SetPriority+0x50>)
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	f003 030f 	and.w	r3, r3, #15
 800a54a:	3b04      	subs	r3, #4
 800a54c:	0112      	lsls	r2, r2, #4
 800a54e:	b2d2      	uxtb	r2, r2
 800a550:	440b      	add	r3, r1
 800a552:	761a      	strb	r2, [r3, #24]
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	e000e100 	.word	0xe000e100
 800a564:	e000ed00 	.word	0xe000ed00

0800a568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a568:	b480      	push	{r7}
 800a56a:	b089      	sub	sp, #36	; 0x24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f003 0307 	and.w	r3, r3, #7
 800a57a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	f1c3 0307 	rsb	r3, r3, #7
 800a582:	2b04      	cmp	r3, #4
 800a584:	bf28      	it	cs
 800a586:	2304      	movcs	r3, #4
 800a588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	3304      	adds	r3, #4
 800a58e:	2b06      	cmp	r3, #6
 800a590:	d902      	bls.n	800a598 <NVIC_EncodePriority+0x30>
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	3b03      	subs	r3, #3
 800a596:	e000      	b.n	800a59a <NVIC_EncodePriority+0x32>
 800a598:	2300      	movs	r3, #0
 800a59a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a59c:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a6:	43da      	mvns	r2, r3
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	401a      	ands	r2, r3
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a5b0:	f04f 31ff 	mov.w	r1, #4294967295
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ba:	43d9      	mvns	r1, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5c0:	4313      	orrs	r3, r2
         );
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3724      	adds	r7, #36	; 0x24
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5e0:	d301      	bcc.n	800a5e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e00f      	b.n	800a606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a5e6:	4a0a      	ldr	r2, [pc, #40]	; (800a610 <SysTick_Config+0x40>)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a5ee:	210f      	movs	r1, #15
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f4:	f7ff ff8e 	bl	800a514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a5f8:	4b05      	ldr	r3, [pc, #20]	; (800a610 <SysTick_Config+0x40>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a5fe:	4b04      	ldr	r3, [pc, #16]	; (800a610 <SysTick_Config+0x40>)
 800a600:	2207      	movs	r2, #7
 800a602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	e000e010 	.word	0xe000e010

0800a614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7ff ff29 	bl	800a474 <__NVIC_SetPriorityGrouping>
}
 800a622:	bf00      	nop
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b086      	sub	sp, #24
 800a62e:	af00      	add	r7, sp, #0
 800a630:	4603      	mov	r3, r0
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	607a      	str	r2, [r7, #4]
 800a636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a638:	2300      	movs	r3, #0
 800a63a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a63c:	f7ff ff3e 	bl	800a4bc <__NVIC_GetPriorityGrouping>
 800a640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	68b9      	ldr	r1, [r7, #8]
 800a646:	6978      	ldr	r0, [r7, #20]
 800a648:	f7ff ff8e 	bl	800a568 <NVIC_EncodePriority>
 800a64c:	4602      	mov	r2, r0
 800a64e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a652:	4611      	mov	r1, r2
 800a654:	4618      	mov	r0, r3
 800a656:	f7ff ff5d 	bl	800a514 <__NVIC_SetPriority>
}
 800a65a:	bf00      	nop
 800a65c:	3718      	adds	r7, #24
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b082      	sub	sp, #8
 800a666:	af00      	add	r7, sp, #0
 800a668:	4603      	mov	r3, r0
 800a66a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a66c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a670:	4618      	mov	r0, r3
 800a672:	f7ff ff31 	bl	800a4d8 <__NVIC_EnableIRQ>
}
 800a676:	bf00      	nop
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b082      	sub	sp, #8
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff ffa2 	bl	800a5d0 <SysTick_Config>
 800a68c:	4603      	mov	r3, r0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a6a4:	f7ff fab4 	bl	8009c10 <HAL_GetTick>
 800a6a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d101      	bne.n	800a6b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e099      	b.n	800a7e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2202      	movs	r2, #2
 800a6c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f022 0201 	bic.w	r2, r2, #1
 800a6d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a6d4:	e00f      	b.n	800a6f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a6d6:	f7ff fa9b 	bl	8009c10 <HAL_GetTick>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	2b05      	cmp	r3, #5
 800a6e2:	d908      	bls.n	800a6f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2203      	movs	r2, #3
 800a6ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e078      	b.n	800a7e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e8      	bne.n	800a6d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	4b38      	ldr	r3, [pc, #224]	; (800a7f0 <HAL_DMA_Init+0x158>)
 800a710:	4013      	ands	r3, r2
 800a712:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a722:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a72e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a73a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6a1b      	ldr	r3, [r3, #32]
 800a740:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	4313      	orrs	r3, r2
 800a746:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	d107      	bne.n	800a760 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a758:	4313      	orrs	r3, r2
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	697a      	ldr	r2, [r7, #20]
 800a766:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f023 0307 	bic.w	r3, r3, #7
 800a776:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	697a      	ldr	r2, [r7, #20]
 800a77e:	4313      	orrs	r3, r2
 800a780:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b04      	cmp	r3, #4
 800a788:	d117      	bne.n	800a7ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	4313      	orrs	r3, r2
 800a792:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00e      	beq.n	800a7ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fa9d 	bl	800acdc <DMA_CheckFifoParam>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d008      	beq.n	800a7ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2240      	movs	r2, #64	; 0x40
 800a7ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e016      	b.n	800a7e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fa54 	bl	800ac70 <DMA_CalcBaseAndBitshift>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7d0:	223f      	movs	r2, #63	; 0x3f
 800a7d2:	409a      	lsls	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	f010803f 	.word	0xf010803f

0800a7f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
 800a800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a802:	2300      	movs	r3, #0
 800a804:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a812:	2b01      	cmp	r3, #1
 800a814:	d101      	bne.n	800a81a <HAL_DMA_Start_IT+0x26>
 800a816:	2302      	movs	r3, #2
 800a818:	e040      	b.n	800a89c <HAL_DMA_Start_IT+0xa8>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d12f      	bne.n	800a88e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2202      	movs	r2, #2
 800a832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2200      	movs	r2, #0
 800a83a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	68b9      	ldr	r1, [r7, #8]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 f9e6 	bl	800ac14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a84c:	223f      	movs	r2, #63	; 0x3f
 800a84e:	409a      	lsls	r2, r3
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f042 0216 	orr.w	r2, r2, #22
 800a862:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d007      	beq.n	800a87c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f042 0208 	orr.w	r2, r2, #8
 800a87a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f042 0201 	orr.w	r2, r2, #1
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	e005      	b.n	800a89a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a896:	2302      	movs	r3, #2
 800a898:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3718      	adds	r7, #24
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d004      	beq.n	800a8c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2280      	movs	r2, #128	; 0x80
 800a8bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e00c      	b.n	800a8dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2205      	movs	r2, #5
 800a8c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f022 0201 	bic.w	r2, r2, #1
 800a8d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a8f4:	4b92      	ldr	r3, [pc, #584]	; (800ab40 <HAL_DMA_IRQHandler+0x258>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a92      	ldr	r2, [pc, #584]	; (800ab44 <HAL_DMA_IRQHandler+0x25c>)
 800a8fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fe:	0a9b      	lsrs	r3, r3, #10
 800a900:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a906:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a912:	2208      	movs	r2, #8
 800a914:	409a      	lsls	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	4013      	ands	r3, r2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d01a      	beq.n	800a954 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0304 	and.w	r3, r3, #4
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d013      	beq.n	800a954 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f022 0204 	bic.w	r2, r2, #4
 800a93a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a940:	2208      	movs	r2, #8
 800a942:	409a      	lsls	r2, r3
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a94c:	f043 0201 	orr.w	r2, r3, #1
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a958:	2201      	movs	r2, #1
 800a95a:	409a      	lsls	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4013      	ands	r3, r2
 800a960:	2b00      	cmp	r3, #0
 800a962:	d012      	beq.n	800a98a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00b      	beq.n	800a98a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a976:	2201      	movs	r2, #1
 800a978:	409a      	lsls	r2, r3
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a982:	f043 0202 	orr.w	r2, r3, #2
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a98e:	2204      	movs	r2, #4
 800a990:	409a      	lsls	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4013      	ands	r3, r2
 800a996:	2b00      	cmp	r3, #0
 800a998:	d012      	beq.n	800a9c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0302 	and.w	r3, r3, #2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00b      	beq.n	800a9c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ac:	2204      	movs	r2, #4
 800a9ae:	409a      	lsls	r2, r3
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b8:	f043 0204 	orr.w	r2, r3, #4
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9c4:	2210      	movs	r2, #16
 800a9c6:	409a      	lsls	r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d043      	beq.n	800aa58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 0308 	and.w	r3, r3, #8
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d03c      	beq.n	800aa58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9e2:	2210      	movs	r2, #16
 800a9e4:	409a      	lsls	r2, r3
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d018      	beq.n	800aa2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d108      	bne.n	800aa18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d024      	beq.n	800aa58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
 800aa16:	e01f      	b.n	800aa58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d01b      	beq.n	800aa58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	4798      	blx	r3
 800aa28:	e016      	b.n	800aa58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d107      	bne.n	800aa48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f022 0208 	bic.w	r2, r2, #8
 800aa46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d003      	beq.n	800aa58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	409a      	lsls	r2, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4013      	ands	r3, r2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 808e 	beq.w	800ab86 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0310 	and.w	r3, r3, #16
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 8086 	beq.w	800ab86 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa7e:	2220      	movs	r2, #32
 800aa80:	409a      	lsls	r2, r3
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	2b05      	cmp	r3, #5
 800aa90:	d136      	bne.n	800ab00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f022 0216 	bic.w	r2, r2, #22
 800aaa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	695a      	ldr	r2, [r3, #20]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aab0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d103      	bne.n	800aac2 <HAL_DMA_IRQHandler+0x1da>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d007      	beq.n	800aad2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f022 0208 	bic.w	r2, r2, #8
 800aad0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aad6:	223f      	movs	r2, #63	; 0x3f
 800aad8:	409a      	lsls	r2, r3
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d07d      	beq.n	800abf2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	4798      	blx	r3
        }
        return;
 800aafe:	e078      	b.n	800abf2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d01c      	beq.n	800ab48 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d108      	bne.n	800ab2e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d030      	beq.n	800ab86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	4798      	blx	r3
 800ab2c:	e02b      	b.n	800ab86 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d027      	beq.n	800ab86 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	4798      	blx	r3
 800ab3e:	e022      	b.n	800ab86 <HAL_DMA_IRQHandler+0x29e>
 800ab40:	20000000 	.word	0x20000000
 800ab44:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10f      	bne.n	800ab76 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f022 0210 	bic.w	r2, r2, #16
 800ab64:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d003      	beq.n	800ab86 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d032      	beq.n	800abf4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab92:	f003 0301 	and.w	r3, r3, #1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d022      	beq.n	800abe0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2205      	movs	r2, #5
 800ab9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f022 0201 	bic.w	r2, r2, #1
 800abb0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	3301      	adds	r3, #1
 800abb6:	60bb      	str	r3, [r7, #8]
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d307      	bcc.n	800abce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0301 	and.w	r3, r3, #1
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1f2      	bne.n	800abb2 <HAL_DMA_IRQHandler+0x2ca>
 800abcc:	e000      	b.n	800abd0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800abce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d005      	beq.n	800abf4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	4798      	blx	r3
 800abf0:	e000      	b.n	800abf4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800abf2:	bf00      	nop
    }
  }
}
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop

0800abfc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	2b40      	cmp	r3, #64	; 0x40
 800ac40:	d108      	bne.n	800ac54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ac52:	e007      	b.n	800ac64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	60da      	str	r2, [r3, #12]
}
 800ac64:	bf00      	nop
 800ac66:	3714      	adds	r7, #20
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	3b10      	subs	r3, #16
 800ac80:	4a14      	ldr	r2, [pc, #80]	; (800acd4 <DMA_CalcBaseAndBitshift+0x64>)
 800ac82:	fba2 2303 	umull	r2, r3, r2, r3
 800ac86:	091b      	lsrs	r3, r3, #4
 800ac88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ac8a:	4a13      	ldr	r2, [pc, #76]	; (800acd8 <DMA_CalcBaseAndBitshift+0x68>)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4413      	add	r3, r2
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d909      	bls.n	800acb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aca6:	f023 0303 	bic.w	r3, r3, #3
 800acaa:	1d1a      	adds	r2, r3, #4
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	659a      	str	r2, [r3, #88]	; 0x58
 800acb0:	e007      	b.n	800acc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800acba:	f023 0303 	bic.w	r3, r3, #3
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	aaaaaaab 	.word	0xaaaaaaab
 800acd8:	08018e88 	.word	0x08018e88

0800acdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d11f      	bne.n	800ad36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d855      	bhi.n	800ada8 <DMA_CheckFifoParam+0xcc>
 800acfc:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <DMA_CheckFifoParam+0x28>)
 800acfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad02:	bf00      	nop
 800ad04:	0800ad15 	.word	0x0800ad15
 800ad08:	0800ad27 	.word	0x0800ad27
 800ad0c:	0800ad15 	.word	0x0800ad15
 800ad10:	0800ada9 	.word	0x0800ada9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d045      	beq.n	800adac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad24:	e042      	b.n	800adac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ad2e:	d13f      	bne.n	800adb0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad34:	e03c      	b.n	800adb0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	699b      	ldr	r3, [r3, #24]
 800ad3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad3e:	d121      	bne.n	800ad84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d836      	bhi.n	800adb4 <DMA_CheckFifoParam+0xd8>
 800ad46:	a201      	add	r2, pc, #4	; (adr r2, 800ad4c <DMA_CheckFifoParam+0x70>)
 800ad48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4c:	0800ad5d 	.word	0x0800ad5d
 800ad50:	0800ad63 	.word	0x0800ad63
 800ad54:	0800ad5d 	.word	0x0800ad5d
 800ad58:	0800ad75 	.word	0x0800ad75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad60:	e02f      	b.n	800adc2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d024      	beq.n	800adb8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad72:	e021      	b.n	800adb8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ad7c:	d11e      	bne.n	800adbc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ad82:	e01b      	b.n	800adbc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d902      	bls.n	800ad90 <DMA_CheckFifoParam+0xb4>
 800ad8a:	2b03      	cmp	r3, #3
 800ad8c:	d003      	beq.n	800ad96 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ad8e:	e018      	b.n	800adc2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	73fb      	strb	r3, [r7, #15]
      break;
 800ad94:	e015      	b.n	800adc2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00e      	beq.n	800adc0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	73fb      	strb	r3, [r7, #15]
      break;
 800ada6:	e00b      	b.n	800adc0 <DMA_CheckFifoParam+0xe4>
      break;
 800ada8:	bf00      	nop
 800adaa:	e00a      	b.n	800adc2 <DMA_CheckFifoParam+0xe6>
      break;
 800adac:	bf00      	nop
 800adae:	e008      	b.n	800adc2 <DMA_CheckFifoParam+0xe6>
      break;
 800adb0:	bf00      	nop
 800adb2:	e006      	b.n	800adc2 <DMA_CheckFifoParam+0xe6>
      break;
 800adb4:	bf00      	nop
 800adb6:	e004      	b.n	800adc2 <DMA_CheckFifoParam+0xe6>
      break;
 800adb8:	bf00      	nop
 800adba:	e002      	b.n	800adc2 <DMA_CheckFifoParam+0xe6>
      break;   
 800adbc:	bf00      	nop
 800adbe:	e000      	b.n	800adc2 <DMA_CheckFifoParam+0xe6>
      break;
 800adc0:	bf00      	nop
    }
  } 
  
  return status; 
 800adc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800add0:	b480      	push	{r7}
 800add2:	b089      	sub	sp, #36	; 0x24
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800adda:	2300      	movs	r3, #0
 800addc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800adde:	2300      	movs	r3, #0
 800ade0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ade6:	2300      	movs	r3, #0
 800ade8:	61fb      	str	r3, [r7, #28]
 800adea:	e177      	b.n	800b0dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800adec:	2201      	movs	r2, #1
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	fa02 f303 	lsl.w	r3, r2, r3
 800adf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	697a      	ldr	r2, [r7, #20]
 800adfc:	4013      	ands	r3, r2
 800adfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	f040 8166 	bne.w	800b0d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d00b      	beq.n	800ae2a <HAL_GPIO_Init+0x5a>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	d007      	beq.n	800ae2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ae1e:	2b11      	cmp	r3, #17
 800ae20:	d003      	beq.n	800ae2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	2b12      	cmp	r3, #18
 800ae28:	d130      	bne.n	800ae8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	2203      	movs	r2, #3
 800ae36:	fa02 f303 	lsl.w	r3, r2, r3
 800ae3a:	43db      	mvns	r3, r3
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	68da      	ldr	r2, [r3, #12]
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	69ba      	ldr	r2, [r7, #24]
 800ae58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ae60:	2201      	movs	r2, #1
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	fa02 f303 	lsl.w	r3, r2, r3
 800ae68:	43db      	mvns	r3, r3
 800ae6a:	69ba      	ldr	r2, [r7, #24]
 800ae6c:	4013      	ands	r3, r2
 800ae6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	091b      	lsrs	r3, r3, #4
 800ae76:	f003 0201 	and.w	r2, r3, #1
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae80:	69ba      	ldr	r2, [r7, #24]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	69ba      	ldr	r2, [r7, #24]
 800ae8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	2203      	movs	r2, #3
 800ae98:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9c:	43db      	mvns	r3, r3
 800ae9e:	69ba      	ldr	r2, [r7, #24]
 800aea0:	4013      	ands	r3, r2
 800aea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	005b      	lsls	r3, r3, #1
 800aeac:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb0:	69ba      	ldr	r2, [r7, #24]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d003      	beq.n	800aecc <HAL_GPIO_Init+0xfc>
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	2b12      	cmp	r3, #18
 800aeca:	d123      	bne.n	800af14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	08da      	lsrs	r2, r3, #3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3208      	adds	r2, #8
 800aed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	f003 0307 	and.w	r3, r3, #7
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	220f      	movs	r2, #15
 800aee4:	fa02 f303 	lsl.w	r3, r2, r3
 800aee8:	43db      	mvns	r3, r3
 800aeea:	69ba      	ldr	r2, [r7, #24]
 800aeec:	4013      	ands	r3, r2
 800aeee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	691a      	ldr	r2, [r3, #16]
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	f003 0307 	and.w	r3, r3, #7
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	fa02 f303 	lsl.w	r3, r2, r3
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	4313      	orrs	r3, r2
 800af04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	08da      	lsrs	r2, r3, #3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3208      	adds	r2, #8
 800af0e:	69b9      	ldr	r1, [r7, #24]
 800af10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	2203      	movs	r2, #3
 800af20:	fa02 f303 	lsl.w	r3, r2, r3
 800af24:	43db      	mvns	r3, r3
 800af26:	69ba      	ldr	r2, [r7, #24]
 800af28:	4013      	ands	r3, r2
 800af2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	f003 0203 	and.w	r2, r3, #3
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	005b      	lsls	r3, r3, #1
 800af38:	fa02 f303 	lsl.w	r3, r2, r3
 800af3c:	69ba      	ldr	r2, [r7, #24]
 800af3e:	4313      	orrs	r3, r2
 800af40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	69ba      	ldr	r2, [r7, #24]
 800af46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 80c0 	beq.w	800b0d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af56:	2300      	movs	r3, #0
 800af58:	60fb      	str	r3, [r7, #12]
 800af5a:	4b65      	ldr	r3, [pc, #404]	; (800b0f0 <HAL_GPIO_Init+0x320>)
 800af5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af5e:	4a64      	ldr	r2, [pc, #400]	; (800b0f0 <HAL_GPIO_Init+0x320>)
 800af60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af64:	6453      	str	r3, [r2, #68]	; 0x44
 800af66:	4b62      	ldr	r3, [pc, #392]	; (800b0f0 <HAL_GPIO_Init+0x320>)
 800af68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af6e:	60fb      	str	r3, [r7, #12]
 800af70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800af72:	4a60      	ldr	r2, [pc, #384]	; (800b0f4 <HAL_GPIO_Init+0x324>)
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	089b      	lsrs	r3, r3, #2
 800af78:	3302      	adds	r3, #2
 800af7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	f003 0303 	and.w	r3, r3, #3
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	220f      	movs	r2, #15
 800af8a:	fa02 f303 	lsl.w	r3, r2, r3
 800af8e:	43db      	mvns	r3, r3
 800af90:	69ba      	ldr	r2, [r7, #24]
 800af92:	4013      	ands	r3, r2
 800af94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a57      	ldr	r2, [pc, #348]	; (800b0f8 <HAL_GPIO_Init+0x328>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d037      	beq.n	800b00e <HAL_GPIO_Init+0x23e>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a56      	ldr	r2, [pc, #344]	; (800b0fc <HAL_GPIO_Init+0x32c>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d031      	beq.n	800b00a <HAL_GPIO_Init+0x23a>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a55      	ldr	r2, [pc, #340]	; (800b100 <HAL_GPIO_Init+0x330>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d02b      	beq.n	800b006 <HAL_GPIO_Init+0x236>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a54      	ldr	r2, [pc, #336]	; (800b104 <HAL_GPIO_Init+0x334>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d025      	beq.n	800b002 <HAL_GPIO_Init+0x232>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a53      	ldr	r2, [pc, #332]	; (800b108 <HAL_GPIO_Init+0x338>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d01f      	beq.n	800affe <HAL_GPIO_Init+0x22e>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a52      	ldr	r2, [pc, #328]	; (800b10c <HAL_GPIO_Init+0x33c>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d019      	beq.n	800affa <HAL_GPIO_Init+0x22a>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a51      	ldr	r2, [pc, #324]	; (800b110 <HAL_GPIO_Init+0x340>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d013      	beq.n	800aff6 <HAL_GPIO_Init+0x226>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a50      	ldr	r2, [pc, #320]	; (800b114 <HAL_GPIO_Init+0x344>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d00d      	beq.n	800aff2 <HAL_GPIO_Init+0x222>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a4f      	ldr	r2, [pc, #316]	; (800b118 <HAL_GPIO_Init+0x348>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d007      	beq.n	800afee <HAL_GPIO_Init+0x21e>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a4e      	ldr	r2, [pc, #312]	; (800b11c <HAL_GPIO_Init+0x34c>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d101      	bne.n	800afea <HAL_GPIO_Init+0x21a>
 800afe6:	2309      	movs	r3, #9
 800afe8:	e012      	b.n	800b010 <HAL_GPIO_Init+0x240>
 800afea:	230a      	movs	r3, #10
 800afec:	e010      	b.n	800b010 <HAL_GPIO_Init+0x240>
 800afee:	2308      	movs	r3, #8
 800aff0:	e00e      	b.n	800b010 <HAL_GPIO_Init+0x240>
 800aff2:	2307      	movs	r3, #7
 800aff4:	e00c      	b.n	800b010 <HAL_GPIO_Init+0x240>
 800aff6:	2306      	movs	r3, #6
 800aff8:	e00a      	b.n	800b010 <HAL_GPIO_Init+0x240>
 800affa:	2305      	movs	r3, #5
 800affc:	e008      	b.n	800b010 <HAL_GPIO_Init+0x240>
 800affe:	2304      	movs	r3, #4
 800b000:	e006      	b.n	800b010 <HAL_GPIO_Init+0x240>
 800b002:	2303      	movs	r3, #3
 800b004:	e004      	b.n	800b010 <HAL_GPIO_Init+0x240>
 800b006:	2302      	movs	r3, #2
 800b008:	e002      	b.n	800b010 <HAL_GPIO_Init+0x240>
 800b00a:	2301      	movs	r3, #1
 800b00c:	e000      	b.n	800b010 <HAL_GPIO_Init+0x240>
 800b00e:	2300      	movs	r3, #0
 800b010:	69fa      	ldr	r2, [r7, #28]
 800b012:	f002 0203 	and.w	r2, r2, #3
 800b016:	0092      	lsls	r2, r2, #2
 800b018:	4093      	lsls	r3, r2
 800b01a:	69ba      	ldr	r2, [r7, #24]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b020:	4934      	ldr	r1, [pc, #208]	; (800b0f4 <HAL_GPIO_Init+0x324>)
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	089b      	lsrs	r3, r3, #2
 800b026:	3302      	adds	r3, #2
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b02e:	4b3c      	ldr	r3, [pc, #240]	; (800b120 <HAL_GPIO_Init+0x350>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	43db      	mvns	r3, r3
 800b038:	69ba      	ldr	r2, [r7, #24]
 800b03a:	4013      	ands	r3, r2
 800b03c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	4313      	orrs	r3, r2
 800b050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b052:	4a33      	ldr	r2, [pc, #204]	; (800b120 <HAL_GPIO_Init+0x350>)
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b058:	4b31      	ldr	r3, [pc, #196]	; (800b120 <HAL_GPIO_Init+0x350>)
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	43db      	mvns	r3, r3
 800b062:	69ba      	ldr	r2, [r7, #24]
 800b064:	4013      	ands	r3, r2
 800b066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d003      	beq.n	800b07c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b074:	69ba      	ldr	r2, [r7, #24]
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	4313      	orrs	r3, r2
 800b07a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b07c:	4a28      	ldr	r2, [pc, #160]	; (800b120 <HAL_GPIO_Init+0x350>)
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b082:	4b27      	ldr	r3, [pc, #156]	; (800b120 <HAL_GPIO_Init+0x350>)
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	43db      	mvns	r3, r3
 800b08c:	69ba      	ldr	r2, [r7, #24]
 800b08e:	4013      	ands	r3, r2
 800b090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d003      	beq.n	800b0a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b0a6:	4a1e      	ldr	r2, [pc, #120]	; (800b120 <HAL_GPIO_Init+0x350>)
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b0ac:	4b1c      	ldr	r3, [pc, #112]	; (800b120 <HAL_GPIO_Init+0x350>)
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	43db      	mvns	r3, r3
 800b0b6:	69ba      	ldr	r2, [r7, #24]
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d003      	beq.n	800b0d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b0c8:	69ba      	ldr	r2, [r7, #24]
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b0d0:	4a13      	ldr	r2, [pc, #76]	; (800b120 <HAL_GPIO_Init+0x350>)
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	61fb      	str	r3, [r7, #28]
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	2b0f      	cmp	r3, #15
 800b0e0:	f67f ae84 	bls.w	800adec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b0e4:	bf00      	nop
 800b0e6:	3724      	adds	r7, #36	; 0x24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	40023800 	.word	0x40023800
 800b0f4:	40013800 	.word	0x40013800
 800b0f8:	40020000 	.word	0x40020000
 800b0fc:	40020400 	.word	0x40020400
 800b100:	40020800 	.word	0x40020800
 800b104:	40020c00 	.word	0x40020c00
 800b108:	40021000 	.word	0x40021000
 800b10c:	40021400 	.word	0x40021400
 800b110:	40021800 	.word	0x40021800
 800b114:	40021c00 	.word	0x40021c00
 800b118:	40022000 	.word	0x40022000
 800b11c:	40022400 	.word	0x40022400
 800b120:	40013c00 	.word	0x40013c00

0800b124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	691a      	ldr	r2, [r3, #16]
 800b134:	887b      	ldrh	r3, [r7, #2]
 800b136:	4013      	ands	r3, r2
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b13c:	2301      	movs	r3, #1
 800b13e:	73fb      	strb	r3, [r7, #15]
 800b140:	e001      	b.n	800b146 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b146:	7bfb      	ldrb	r3, [r7, #15]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3714      	adds	r7, #20
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	807b      	strh	r3, [r7, #2]
 800b160:	4613      	mov	r3, r2
 800b162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b164:	787b      	ldrb	r3, [r7, #1]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b16a:	887a      	ldrh	r2, [r7, #2]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b170:	e003      	b.n	800b17a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b172:	887b      	ldrh	r3, [r7, #2]
 800b174:	041a      	lsls	r2, r3, #16
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	619a      	str	r2, [r3, #24]
}
 800b17a:	bf00      	nop
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
	...

0800b188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e11f      	b.n	800b3da <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d106      	bne.n	800b1b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f7fb fe4a 	bl	8006e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2224      	movs	r2, #36	; 0x24
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f022 0201 	bic.w	r2, r2, #1
 800b1ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b1ec:	f001 f96e 	bl	800c4cc <HAL_RCC_GetPCLK1Freq>
 800b1f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	4a7b      	ldr	r2, [pc, #492]	; (800b3e4 <HAL_I2C_Init+0x25c>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d807      	bhi.n	800b20c <HAL_I2C_Init+0x84>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	4a7a      	ldr	r2, [pc, #488]	; (800b3e8 <HAL_I2C_Init+0x260>)
 800b200:	4293      	cmp	r3, r2
 800b202:	bf94      	ite	ls
 800b204:	2301      	movls	r3, #1
 800b206:	2300      	movhi	r3, #0
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	e006      	b.n	800b21a <HAL_I2C_Init+0x92>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	4a77      	ldr	r2, [pc, #476]	; (800b3ec <HAL_I2C_Init+0x264>)
 800b210:	4293      	cmp	r3, r2
 800b212:	bf94      	ite	ls
 800b214:	2301      	movls	r3, #1
 800b216:	2300      	movhi	r3, #0
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d001      	beq.n	800b222 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e0db      	b.n	800b3da <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	4a72      	ldr	r2, [pc, #456]	; (800b3f0 <HAL_I2C_Init+0x268>)
 800b226:	fba2 2303 	umull	r2, r3, r2, r3
 800b22a:	0c9b      	lsrs	r3, r3, #18
 800b22c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	430a      	orrs	r2, r1
 800b240:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	6a1b      	ldr	r3, [r3, #32]
 800b248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	4a64      	ldr	r2, [pc, #400]	; (800b3e4 <HAL_I2C_Init+0x25c>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d802      	bhi.n	800b25c <HAL_I2C_Init+0xd4>
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	3301      	adds	r3, #1
 800b25a:	e009      	b.n	800b270 <HAL_I2C_Init+0xe8>
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b262:	fb02 f303 	mul.w	r3, r2, r3
 800b266:	4a63      	ldr	r2, [pc, #396]	; (800b3f4 <HAL_I2C_Init+0x26c>)
 800b268:	fba2 2303 	umull	r2, r3, r2, r3
 800b26c:	099b      	lsrs	r3, r3, #6
 800b26e:	3301      	adds	r3, #1
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	6812      	ldr	r2, [r2, #0]
 800b274:	430b      	orrs	r3, r1
 800b276:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b282:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	4956      	ldr	r1, [pc, #344]	; (800b3e4 <HAL_I2C_Init+0x25c>)
 800b28c:	428b      	cmp	r3, r1
 800b28e:	d80d      	bhi.n	800b2ac <HAL_I2C_Init+0x124>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	1e59      	subs	r1, r3, #1
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	005b      	lsls	r3, r3, #1
 800b29a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b29e:	3301      	adds	r3, #1
 800b2a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2a4:	2b04      	cmp	r3, #4
 800b2a6:	bf38      	it	cc
 800b2a8:	2304      	movcc	r3, #4
 800b2aa:	e04f      	b.n	800b34c <HAL_I2C_Init+0x1c4>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d111      	bne.n	800b2d8 <HAL_I2C_Init+0x150>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	1e58      	subs	r0, r3, #1
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6859      	ldr	r1, [r3, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	005b      	lsls	r3, r3, #1
 800b2c0:	440b      	add	r3, r1
 800b2c2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	bf0c      	ite	eq
 800b2d0:	2301      	moveq	r3, #1
 800b2d2:	2300      	movne	r3, #0
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	e012      	b.n	800b2fe <HAL_I2C_Init+0x176>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	1e58      	subs	r0, r3, #1
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6859      	ldr	r1, [r3, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	440b      	add	r3, r1
 800b2e6:	0099      	lsls	r1, r3, #2
 800b2e8:	440b      	add	r3, r1
 800b2ea:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	bf0c      	ite	eq
 800b2f8:	2301      	moveq	r3, #1
 800b2fa:	2300      	movne	r3, #0
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <HAL_I2C_Init+0x17e>
 800b302:	2301      	movs	r3, #1
 800b304:	e022      	b.n	800b34c <HAL_I2C_Init+0x1c4>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10e      	bne.n	800b32c <HAL_I2C_Init+0x1a4>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	1e58      	subs	r0, r3, #1
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6859      	ldr	r1, [r3, #4]
 800b316:	460b      	mov	r3, r1
 800b318:	005b      	lsls	r3, r3, #1
 800b31a:	440b      	add	r3, r1
 800b31c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b320:	3301      	adds	r3, #1
 800b322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b32a:	e00f      	b.n	800b34c <HAL_I2C_Init+0x1c4>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	1e58      	subs	r0, r3, #1
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6859      	ldr	r1, [r3, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	440b      	add	r3, r1
 800b33a:	0099      	lsls	r1, r3, #2
 800b33c:	440b      	add	r3, r1
 800b33e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b342:	3301      	adds	r3, #1
 800b344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b348:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b34c:	6879      	ldr	r1, [r7, #4]
 800b34e:	6809      	ldr	r1, [r1, #0]
 800b350:	4313      	orrs	r3, r2
 800b352:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	69da      	ldr	r2, [r3, #28]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	431a      	orrs	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	430a      	orrs	r2, r1
 800b36e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b37a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	6911      	ldr	r1, [r2, #16]
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	68d2      	ldr	r2, [r2, #12]
 800b386:	4311      	orrs	r1, r2
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	6812      	ldr	r2, [r2, #0]
 800b38c:	430b      	orrs	r3, r1
 800b38e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	695a      	ldr	r2, [r3, #20]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	430a      	orrs	r2, r1
 800b3aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f042 0201 	orr.w	r2, r2, #1
 800b3ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2220      	movs	r2, #32
 800b3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	000186a0 	.word	0x000186a0
 800b3e8:	001e847f 	.word	0x001e847f
 800b3ec:	003d08ff 	.word	0x003d08ff
 800b3f0:	431bde83 	.word	0x431bde83
 800b3f4:	10624dd3 	.word	0x10624dd3

0800b3f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b088      	sub	sp, #32
 800b3fc:	af02      	add	r7, sp, #8
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	607a      	str	r2, [r7, #4]
 800b402:	461a      	mov	r2, r3
 800b404:	460b      	mov	r3, r1
 800b406:	817b      	strh	r3, [r7, #10]
 800b408:	4613      	mov	r3, r2
 800b40a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b40c:	f7fe fc00 	bl	8009c10 <HAL_GetTick>
 800b410:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	2b20      	cmp	r3, #32
 800b41c:	f040 80e0 	bne.w	800b5e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	2319      	movs	r3, #25
 800b426:	2201      	movs	r2, #1
 800b428:	4970      	ldr	r1, [pc, #448]	; (800b5ec <HAL_I2C_Master_Transmit+0x1f4>)
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f000 fc58 	bl	800bce0 <I2C_WaitOnFlagUntilTimeout>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d001      	beq.n	800b43a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b436:	2302      	movs	r3, #2
 800b438:	e0d3      	b.n	800b5e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b440:	2b01      	cmp	r3, #1
 800b442:	d101      	bne.n	800b448 <HAL_I2C_Master_Transmit+0x50>
 800b444:	2302      	movs	r3, #2
 800b446:	e0cc      	b.n	800b5e2 <HAL_I2C_Master_Transmit+0x1ea>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 0301 	and.w	r3, r3, #1
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d007      	beq.n	800b46e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f042 0201 	orr.w	r2, r2, #1
 800b46c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b47c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2221      	movs	r2, #33	; 0x21
 800b482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2210      	movs	r2, #16
 800b48a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	893a      	ldrh	r2, [r7, #8]
 800b49e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4a4:	b29a      	uxth	r2, r3
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	4a50      	ldr	r2, [pc, #320]	; (800b5f0 <HAL_I2C_Master_Transmit+0x1f8>)
 800b4ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b4b0:	8979      	ldrh	r1, [r7, #10]
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	6a3a      	ldr	r2, [r7, #32]
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f000 fac2 	bl	800ba40 <I2C_MasterRequestWrite>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e08d      	b.n	800b5e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	613b      	str	r3, [r7, #16]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	613b      	str	r3, [r7, #16]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	613b      	str	r3, [r7, #16]
 800b4da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b4dc:	e066      	b.n	800b5ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4de:	697a      	ldr	r2, [r7, #20]
 800b4e0:	6a39      	ldr	r1, [r7, #32]
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f000 fcd2 	bl	800be8c <I2C_WaitOnTXEFlagUntilTimeout>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00d      	beq.n	800b50a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f2:	2b04      	cmp	r3, #4
 800b4f4:	d107      	bne.n	800b506 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b504:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e06b      	b.n	800b5e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50e:	781a      	ldrb	r2, [r3, #0]
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b524:	b29b      	uxth	r3, r3
 800b526:	3b01      	subs	r3, #1
 800b528:	b29a      	uxth	r2, r3
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b532:	3b01      	subs	r3, #1
 800b534:	b29a      	uxth	r2, r3
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b04      	cmp	r3, #4
 800b546:	d11b      	bne.n	800b580 <HAL_I2C_Master_Transmit+0x188>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d017      	beq.n	800b580 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b554:	781a      	ldrb	r2, [r3, #0]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	3b01      	subs	r3, #1
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b578:	3b01      	subs	r3, #1
 800b57a:	b29a      	uxth	r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	6a39      	ldr	r1, [r7, #32]
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f000 fcc2 	bl	800bf0e <I2C_WaitOnBTFFlagUntilTimeout>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00d      	beq.n	800b5ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b594:	2b04      	cmp	r3, #4
 800b596:	d107      	bne.n	800b5a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e01a      	b.n	800b5e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d194      	bne.n	800b4de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2220      	movs	r2, #32
 800b5c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e000      	b.n	800b5e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b5e0:	2302      	movs	r3, #2
  }
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3718      	adds	r7, #24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	00100002 	.word	0x00100002
 800b5f0:	ffff0000 	.word	0xffff0000

0800b5f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b08c      	sub	sp, #48	; 0x30
 800b5f8:	af02      	add	r7, sp, #8
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	607a      	str	r2, [r7, #4]
 800b5fe:	461a      	mov	r2, r3
 800b600:	460b      	mov	r3, r1
 800b602:	817b      	strh	r3, [r7, #10]
 800b604:	4613      	mov	r3, r2
 800b606:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b608:	f7fe fb02 	bl	8009c10 <HAL_GetTick>
 800b60c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b20      	cmp	r3, #32
 800b618:	f040 820b 	bne.w	800ba32 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	2319      	movs	r3, #25
 800b622:	2201      	movs	r2, #1
 800b624:	497c      	ldr	r1, [pc, #496]	; (800b818 <HAL_I2C_Master_Receive+0x224>)
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 fb5a 	bl	800bce0 <I2C_WaitOnFlagUntilTimeout>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b632:	2302      	movs	r3, #2
 800b634:	e1fe      	b.n	800ba34 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d101      	bne.n	800b644 <HAL_I2C_Master_Receive+0x50>
 800b640:	2302      	movs	r3, #2
 800b642:	e1f7      	b.n	800ba34 <HAL_I2C_Master_Receive+0x440>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	2b01      	cmp	r3, #1
 800b658:	d007      	beq.n	800b66a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f042 0201 	orr.w	r2, r2, #1
 800b668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b678:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2222      	movs	r2, #34	; 0x22
 800b67e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2210      	movs	r2, #16
 800b686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	893a      	ldrh	r2, [r7, #8]
 800b69a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6a0:	b29a      	uxth	r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	4a5c      	ldr	r2, [pc, #368]	; (800b81c <HAL_I2C_Master_Receive+0x228>)
 800b6aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b6ac:	8979      	ldrh	r1, [r7, #10]
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f000 fa46 	bl	800bb44 <I2C_MasterRequestRead>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d001      	beq.n	800b6c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e1b8      	b.n	800ba34 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d113      	bne.n	800b6f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	623b      	str	r3, [r7, #32]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	623b      	str	r3, [r7, #32]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	623b      	str	r3, [r7, #32]
 800b6de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ee:	601a      	str	r2, [r3, #0]
 800b6f0:	e18c      	b.n	800ba0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d11b      	bne.n	800b732 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b70a:	2300      	movs	r3, #0
 800b70c:	61fb      	str	r3, [r7, #28]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	695b      	ldr	r3, [r3, #20]
 800b714:	61fb      	str	r3, [r7, #28]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	61fb      	str	r3, [r7, #28]
 800b71e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b72e:	601a      	str	r2, [r3, #0]
 800b730:	e16c      	b.n	800ba0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b736:	2b02      	cmp	r3, #2
 800b738:	d11b      	bne.n	800b772 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b748:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b75a:	2300      	movs	r3, #0
 800b75c:	61bb      	str	r3, [r7, #24]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	695b      	ldr	r3, [r3, #20]
 800b764:	61bb      	str	r3, [r7, #24]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	61bb      	str	r3, [r7, #24]
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	e14c      	b.n	800ba0c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b782:	2300      	movs	r3, #0
 800b784:	617b      	str	r3, [r7, #20]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	695b      	ldr	r3, [r3, #20]
 800b78c:	617b      	str	r3, [r7, #20]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	617b      	str	r3, [r7, #20]
 800b796:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b798:	e138      	b.n	800ba0c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	f200 80f1 	bhi.w	800b986 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d123      	bne.n	800b7f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f000 fbed 	bl	800bf90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d001      	beq.n	800b7c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e139      	b.n	800ba34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	691a      	ldr	r2, [r3, #16]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ca:	b2d2      	uxtb	r2, r2
 800b7cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d2:	1c5a      	adds	r2, r3, #1
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7f2:	e10b      	b.n	800ba0c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d14e      	bne.n	800b89a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b802:	2200      	movs	r2, #0
 800b804:	4906      	ldr	r1, [pc, #24]	; (800b820 <HAL_I2C_Master_Receive+0x22c>)
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f000 fa6a 	bl	800bce0 <I2C_WaitOnFlagUntilTimeout>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d008      	beq.n	800b824 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e10e      	b.n	800ba34 <HAL_I2C_Master_Receive+0x440>
 800b816:	bf00      	nop
 800b818:	00100002 	.word	0x00100002
 800b81c:	ffff0000 	.word	0xffff0000
 800b820:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	691a      	ldr	r2, [r3, #16]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	b2d2      	uxtb	r2, r2
 800b840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	1c5a      	adds	r2, r3, #1
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b850:	3b01      	subs	r3, #1
 800b852:	b29a      	uxth	r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	3b01      	subs	r3, #1
 800b860:	b29a      	uxth	r2, r3
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	691a      	ldr	r2, [r3, #16]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	b2d2      	uxtb	r2, r2
 800b872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	1c5a      	adds	r2, r3, #1
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b882:	3b01      	subs	r3, #1
 800b884:	b29a      	uxth	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b88e:	b29b      	uxth	r3, r3
 800b890:	3b01      	subs	r3, #1
 800b892:	b29a      	uxth	r2, r3
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b898:	e0b8      	b.n	800ba0c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	4966      	ldr	r1, [pc, #408]	; (800ba3c <HAL_I2C_Master_Receive+0x448>)
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f000 fa1b 	bl	800bce0 <I2C_WaitOnFlagUntilTimeout>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e0bf      	b.n	800ba34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	691a      	ldr	r2, [r3, #16]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ce:	b2d2      	uxtb	r2, r2
 800b8d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d6:	1c5a      	adds	r2, r3, #1
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	494f      	ldr	r1, [pc, #316]	; (800ba3c <HAL_I2C_Master_Receive+0x448>)
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 f9ed 	bl	800bce0 <I2C_WaitOnFlagUntilTimeout>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e091      	b.n	800ba34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b91e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	691a      	ldr	r2, [r3, #16]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92a:	b2d2      	uxtb	r2, r2
 800b92c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b932:	1c5a      	adds	r2, r3, #1
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b93c:	3b01      	subs	r3, #1
 800b93e:	b29a      	uxth	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b948:	b29b      	uxth	r3, r3
 800b94a:	3b01      	subs	r3, #1
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	691a      	ldr	r2, [r3, #16]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	b2d2      	uxtb	r2, r2
 800b95e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b96e:	3b01      	subs	r3, #1
 800b970:	b29a      	uxth	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	3b01      	subs	r3, #1
 800b97e:	b29a      	uxth	r2, r3
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b984:	e042      	b.n	800ba0c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b988:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f000 fb00 	bl	800bf90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e04c      	b.n	800ba34 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	691a      	ldr	r2, [r3, #16]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	b2d2      	uxtb	r2, r2
 800b9a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ac:	1c5a      	adds	r2, r3, #1
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	3b01      	subs	r3, #1
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	f003 0304 	and.w	r3, r3, #4
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d118      	bne.n	800ba0c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	691a      	ldr	r2, [r3, #16]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e4:	b2d2      	uxtb	r2, r2
 800b9e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ec:	1c5a      	adds	r2, r3, #1
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	3b01      	subs	r3, #1
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f47f aec2 	bne.w	800b79a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2220      	movs	r2, #32
 800ba1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	e000      	b.n	800ba34 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ba32:	2302      	movs	r3, #2
  }
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3728      	adds	r7, #40	; 0x28
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	00010004 	.word	0x00010004

0800ba40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b088      	sub	sp, #32
 800ba44:	af02      	add	r7, sp, #8
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	607a      	str	r2, [r7, #4]
 800ba4a:	603b      	str	r3, [r7, #0]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2b08      	cmp	r3, #8
 800ba5a:	d006      	beq.n	800ba6a <I2C_MasterRequestWrite+0x2a>
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d003      	beq.n	800ba6a <I2C_MasterRequestWrite+0x2a>
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba68:	d108      	bne.n	800ba7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba78:	601a      	str	r2, [r3, #0]
 800ba7a:	e00b      	b.n	800ba94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba80:	2b12      	cmp	r3, #18
 800ba82:	d107      	bne.n	800ba94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 f91d 	bl	800bce0 <I2C_WaitOnFlagUntilTimeout>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00d      	beq.n	800bac8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baba:	d103      	bne.n	800bac4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bac2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bac4:	2303      	movs	r3, #3
 800bac6:	e035      	b.n	800bb34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bad0:	d108      	bne.n	800bae4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bad2:	897b      	ldrh	r3, [r7, #10]
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	461a      	mov	r2, r3
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bae0:	611a      	str	r2, [r3, #16]
 800bae2:	e01b      	b.n	800bb1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bae4:	897b      	ldrh	r3, [r7, #10]
 800bae6:	11db      	asrs	r3, r3, #7
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	f003 0306 	and.w	r3, r3, #6
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f063 030f 	orn	r3, r3, #15
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	490e      	ldr	r1, [pc, #56]	; (800bb3c <I2C_MasterRequestWrite+0xfc>)
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 f943 	bl	800bd8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e010      	b.n	800bb34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bb12:	897b      	ldrh	r3, [r7, #10]
 800bb14:	b2da      	uxtb	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	4907      	ldr	r1, [pc, #28]	; (800bb40 <I2C_MasterRequestWrite+0x100>)
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f000 f933 	bl	800bd8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e000      	b.n	800bb34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3718      	adds	r7, #24
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	00010008 	.word	0x00010008
 800bb40:	00010002 	.word	0x00010002

0800bb44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b088      	sub	sp, #32
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	607a      	str	r2, [r7, #4]
 800bb4e:	603b      	str	r3, [r7, #0]
 800bb50:	460b      	mov	r3, r1
 800bb52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	2b08      	cmp	r3, #8
 800bb6e:	d006      	beq.n	800bb7e <I2C_MasterRequestRead+0x3a>
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d003      	beq.n	800bb7e <I2C_MasterRequestRead+0x3a>
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb7c:	d108      	bne.n	800bb90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	e00b      	b.n	800bba8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb94:	2b11      	cmp	r3, #17
 800bb96:	d107      	bne.n	800bba8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bba6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f000 f893 	bl	800bce0 <I2C_WaitOnFlagUntilTimeout>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00d      	beq.n	800bbdc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbce:	d103      	bne.n	800bbd8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e079      	b.n	800bcd0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbe4:	d108      	bne.n	800bbf8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bbe6:	897b      	ldrh	r3, [r7, #10]
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	f043 0301 	orr.w	r3, r3, #1
 800bbee:	b2da      	uxtb	r2, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	611a      	str	r2, [r3, #16]
 800bbf6:	e05f      	b.n	800bcb8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bbf8:	897b      	ldrh	r3, [r7, #10]
 800bbfa:	11db      	asrs	r3, r3, #7
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	f003 0306 	and.w	r3, r3, #6
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	f063 030f 	orn	r3, r3, #15
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	4930      	ldr	r1, [pc, #192]	; (800bcd8 <I2C_MasterRequestRead+0x194>)
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f000 f8b9 	bl	800bd8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	e054      	b.n	800bcd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bc26:	897b      	ldrh	r3, [r7, #10]
 800bc28:	b2da      	uxtb	r2, r3
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	4929      	ldr	r1, [pc, #164]	; (800bcdc <I2C_MasterRequestRead+0x198>)
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f000 f8a9 	bl	800bd8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d001      	beq.n	800bc46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	e044      	b.n	800bcd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc46:	2300      	movs	r3, #0
 800bc48:	613b      	str	r3, [r7, #16]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	613b      	str	r3, [r7, #16]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	699b      	ldr	r3, [r3, #24]
 800bc58:	613b      	str	r3, [r7, #16]
 800bc5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f000 f831 	bl	800bce0 <I2C_WaitOnFlagUntilTimeout>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00d      	beq.n	800bca0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc92:	d103      	bne.n	800bc9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e017      	b.n	800bcd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bca0:	897b      	ldrh	r3, [r7, #10]
 800bca2:	11db      	asrs	r3, r3, #7
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	f003 0306 	and.w	r3, r3, #6
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	f063 030e 	orn	r3, r3, #14
 800bcb0:	b2da      	uxtb	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	4907      	ldr	r1, [pc, #28]	; (800bcdc <I2C_MasterRequestRead+0x198>)
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f000 f865 	bl	800bd8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d001      	beq.n	800bcce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bcca:	2301      	movs	r3, #1
 800bccc:	e000      	b.n	800bcd0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3718      	adds	r7, #24
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	00010008 	.word	0x00010008
 800bcdc:	00010002 	.word	0x00010002

0800bce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	603b      	str	r3, [r7, #0]
 800bcec:	4613      	mov	r3, r2
 800bcee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bcf0:	e025      	b.n	800bd3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf8:	d021      	beq.n	800bd3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcfa:	f7fd ff89 	bl	8009c10 <HAL_GetTick>
 800bcfe:	4602      	mov	r2, r0
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	683a      	ldr	r2, [r7, #0]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d302      	bcc.n	800bd10 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d116      	bne.n	800bd3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2220      	movs	r2, #32
 800bd1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2a:	f043 0220 	orr.w	r2, r3, #32
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e023      	b.n	800bd86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	0c1b      	lsrs	r3, r3, #16
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d10d      	bne.n	800bd64 <I2C_WaitOnFlagUntilTimeout+0x84>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	695b      	ldr	r3, [r3, #20]
 800bd4e:	43da      	mvns	r2, r3
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	4013      	ands	r3, r2
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	bf0c      	ite	eq
 800bd5a:	2301      	moveq	r3, #1
 800bd5c:	2300      	movne	r3, #0
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	461a      	mov	r2, r3
 800bd62:	e00c      	b.n	800bd7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	699b      	ldr	r3, [r3, #24]
 800bd6a:	43da      	mvns	r2, r3
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	4013      	ands	r3, r2
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	bf0c      	ite	eq
 800bd76:	2301      	moveq	r3, #1
 800bd78:	2300      	movne	r3, #0
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	79fb      	ldrb	r3, [r7, #7]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d0b6      	beq.n	800bcf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b084      	sub	sp, #16
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	60f8      	str	r0, [r7, #12]
 800bd96:	60b9      	str	r1, [r7, #8]
 800bd98:	607a      	str	r2, [r7, #4]
 800bd9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bd9c:	e051      	b.n	800be42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	695b      	ldr	r3, [r3, #20]
 800bda4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bda8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdac:	d123      	bne.n	800bdf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bdbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bdc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2220      	movs	r2, #32
 800bdd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde2:	f043 0204 	orr.w	r2, r3, #4
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e046      	b.n	800be84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfc:	d021      	beq.n	800be42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bdfe:	f7fd ff07 	bl	8009c10 <HAL_GetTick>
 800be02:	4602      	mov	r2, r0
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d302      	bcc.n	800be14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d116      	bne.n	800be42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2200      	movs	r2, #0
 800be18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2220      	movs	r2, #32
 800be1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2e:	f043 0220 	orr.w	r2, r3, #32
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	e020      	b.n	800be84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	0c1b      	lsrs	r3, r3, #16
 800be46:	b2db      	uxtb	r3, r3
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d10c      	bne.n	800be66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	43da      	mvns	r2, r3
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	4013      	ands	r3, r2
 800be58:	b29b      	uxth	r3, r3
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	bf14      	ite	ne
 800be5e:	2301      	movne	r3, #1
 800be60:	2300      	moveq	r3, #0
 800be62:	b2db      	uxtb	r3, r3
 800be64:	e00b      	b.n	800be7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	43da      	mvns	r2, r3
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	4013      	ands	r3, r2
 800be72:	b29b      	uxth	r3, r3
 800be74:	2b00      	cmp	r3, #0
 800be76:	bf14      	ite	ne
 800be78:	2301      	movne	r3, #1
 800be7a:	2300      	moveq	r3, #0
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d18d      	bne.n	800bd9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be98:	e02d      	b.n	800bef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f000 f8ce 	bl	800c03c <I2C_IsAcknowledgeFailed>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d001      	beq.n	800beaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	e02d      	b.n	800bf06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb0:	d021      	beq.n	800bef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800beb2:	f7fd fead 	bl	8009c10 <HAL_GetTick>
 800beb6:	4602      	mov	r2, r0
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d302      	bcc.n	800bec8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d116      	bne.n	800bef6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2220      	movs	r2, #32
 800bed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee2:	f043 0220 	orr.w	r2, r3, #32
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2200      	movs	r2, #0
 800beee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e007      	b.n	800bf06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf00:	2b80      	cmp	r3, #128	; 0x80
 800bf02:	d1ca      	bne.n	800be9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b084      	sub	sp, #16
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	60f8      	str	r0, [r7, #12]
 800bf16:	60b9      	str	r1, [r7, #8]
 800bf18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bf1a:	e02d      	b.n	800bf78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f000 f88d 	bl	800c03c <I2C_IsAcknowledgeFailed>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e02d      	b.n	800bf88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf32:	d021      	beq.n	800bf78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf34:	f7fd fe6c 	bl	8009c10 <HAL_GetTick>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	68ba      	ldr	r2, [r7, #8]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d302      	bcc.n	800bf4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d116      	bne.n	800bf78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2220      	movs	r2, #32
 800bf54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf64:	f043 0220 	orr.w	r2, r3, #32
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf74:	2301      	movs	r3, #1
 800bf76:	e007      	b.n	800bf88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	f003 0304 	and.w	r3, r3, #4
 800bf82:	2b04      	cmp	r3, #4
 800bf84:	d1ca      	bne.n	800bf1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bf9c:	e042      	b.n	800c024 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	695b      	ldr	r3, [r3, #20]
 800bfa4:	f003 0310 	and.w	r3, r3, #16
 800bfa8:	2b10      	cmp	r3, #16
 800bfaa:	d119      	bne.n	800bfe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f06f 0210 	mvn.w	r2, #16
 800bfb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2220      	movs	r2, #32
 800bfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e029      	b.n	800c034 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfe0:	f7fd fe16 	bl	8009c10 <HAL_GetTick>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	68ba      	ldr	r2, [r7, #8]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d302      	bcc.n	800bff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d116      	bne.n	800c024 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2200      	movs	r2, #0
 800bffa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2220      	movs	r2, #32
 800c000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c010:	f043 0220 	orr.w	r2, r3, #32
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e007      	b.n	800c034 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	695b      	ldr	r3, [r3, #20]
 800c02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c02e:	2b40      	cmp	r3, #64	; 0x40
 800c030:	d1b5      	bne.n	800bf9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3710      	adds	r7, #16
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	695b      	ldr	r3, [r3, #20]
 800c04a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c04e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c052:	d11b      	bne.n	800c08c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c05c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2220      	movs	r2, #32
 800c068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c078:	f043 0204 	orr.w	r2, r3, #4
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e000      	b.n	800c08e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr
	...

0800c09c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	603b      	str	r3, [r7, #0]
 800c0aa:	4b20      	ldr	r3, [pc, #128]	; (800c12c <HAL_PWREx_EnableOverDrive+0x90>)
 800c0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ae:	4a1f      	ldr	r2, [pc, #124]	; (800c12c <HAL_PWREx_EnableOverDrive+0x90>)
 800c0b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0b4:	6413      	str	r3, [r2, #64]	; 0x40
 800c0b6:	4b1d      	ldr	r3, [pc, #116]	; (800c12c <HAL_PWREx_EnableOverDrive+0x90>)
 800c0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0be:	603b      	str	r3, [r7, #0]
 800c0c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c0c2:	4b1b      	ldr	r3, [pc, #108]	; (800c130 <HAL_PWREx_EnableOverDrive+0x94>)
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c0c8:	f7fd fda2 	bl	8009c10 <HAL_GetTick>
 800c0cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c0ce:	e009      	b.n	800c0e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c0d0:	f7fd fd9e 	bl	8009c10 <HAL_GetTick>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0de:	d901      	bls.n	800c0e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e01f      	b.n	800c124 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c0e4:	4b13      	ldr	r3, [pc, #76]	; (800c134 <HAL_PWREx_EnableOverDrive+0x98>)
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f0:	d1ee      	bne.n	800c0d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c0f2:	4b11      	ldr	r3, [pc, #68]	; (800c138 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c0f8:	f7fd fd8a 	bl	8009c10 <HAL_GetTick>
 800c0fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c0fe:	e009      	b.n	800c114 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c100:	f7fd fd86 	bl	8009c10 <HAL_GetTick>
 800c104:	4602      	mov	r2, r0
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	1ad3      	subs	r3, r2, r3
 800c10a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c10e:	d901      	bls.n	800c114 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c110:	2303      	movs	r3, #3
 800c112:	e007      	b.n	800c124 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c114:	4b07      	ldr	r3, [pc, #28]	; (800c134 <HAL_PWREx_EnableOverDrive+0x98>)
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c11c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c120:	d1ee      	bne.n	800c100 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	40023800 	.word	0x40023800
 800c130:	420e0040 	.word	0x420e0040
 800c134:	40007000 	.word	0x40007000
 800c138:	420e0044 	.word	0x420e0044

0800c13c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e0cc      	b.n	800c2ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c150:	4b68      	ldr	r3, [pc, #416]	; (800c2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 030f 	and.w	r3, r3, #15
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d90c      	bls.n	800c178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c15e:	4b65      	ldr	r3, [pc, #404]	; (800c2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c160:	683a      	ldr	r2, [r7, #0]
 800c162:	b2d2      	uxtb	r2, r2
 800c164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c166:	4b63      	ldr	r3, [pc, #396]	; (800c2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f003 030f 	and.w	r3, r3, #15
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	429a      	cmp	r2, r3
 800c172:	d001      	beq.n	800c178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	e0b8      	b.n	800c2ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f003 0302 	and.w	r3, r3, #2
 800c180:	2b00      	cmp	r3, #0
 800c182:	d020      	beq.n	800c1c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c190:	4b59      	ldr	r3, [pc, #356]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	4a58      	ldr	r2, [pc, #352]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c19a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 0308 	and.w	r3, r3, #8
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d005      	beq.n	800c1b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c1a8:	4b53      	ldr	r3, [pc, #332]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	4a52      	ldr	r2, [pc, #328]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c1ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c1b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c1b4:	4b50      	ldr	r3, [pc, #320]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	494d      	ldr	r1, [pc, #308]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 0301 	and.w	r3, r3, #1
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d044      	beq.n	800c25c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d107      	bne.n	800c1ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1da:	4b47      	ldr	r3, [pc, #284]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d119      	bne.n	800c21a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e07f      	b.n	800c2ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d003      	beq.n	800c1fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c1f6:	2b03      	cmp	r3, #3
 800c1f8:	d107      	bne.n	800c20a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1fa:	4b3f      	ldr	r3, [pc, #252]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c202:	2b00      	cmp	r3, #0
 800c204:	d109      	bne.n	800c21a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c206:	2301      	movs	r3, #1
 800c208:	e06f      	b.n	800c2ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c20a:	4b3b      	ldr	r3, [pc, #236]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f003 0302 	and.w	r3, r3, #2
 800c212:	2b00      	cmp	r3, #0
 800c214:	d101      	bne.n	800c21a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	e067      	b.n	800c2ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c21a:	4b37      	ldr	r3, [pc, #220]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	f023 0203 	bic.w	r2, r3, #3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	4934      	ldr	r1, [pc, #208]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c228:	4313      	orrs	r3, r2
 800c22a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c22c:	f7fd fcf0 	bl	8009c10 <HAL_GetTick>
 800c230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c232:	e00a      	b.n	800c24a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c234:	f7fd fcec 	bl	8009c10 <HAL_GetTick>
 800c238:	4602      	mov	r2, r0
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c242:	4293      	cmp	r3, r2
 800c244:	d901      	bls.n	800c24a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c246:	2303      	movs	r3, #3
 800c248:	e04f      	b.n	800c2ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c24a:	4b2b      	ldr	r3, [pc, #172]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	f003 020c 	and.w	r2, r3, #12
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	429a      	cmp	r2, r3
 800c25a:	d1eb      	bne.n	800c234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c25c:	4b25      	ldr	r3, [pc, #148]	; (800c2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f003 030f 	and.w	r3, r3, #15
 800c264:	683a      	ldr	r2, [r7, #0]
 800c266:	429a      	cmp	r2, r3
 800c268:	d20c      	bcs.n	800c284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c26a:	4b22      	ldr	r3, [pc, #136]	; (800c2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	b2d2      	uxtb	r2, r2
 800c270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c272:	4b20      	ldr	r3, [pc, #128]	; (800c2f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f003 030f 	and.w	r3, r3, #15
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d001      	beq.n	800c284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c280:	2301      	movs	r3, #1
 800c282:	e032      	b.n	800c2ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f003 0304 	and.w	r3, r3, #4
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d008      	beq.n	800c2a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c290:	4b19      	ldr	r3, [pc, #100]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	4916      	ldr	r1, [pc, #88]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f003 0308 	and.w	r3, r3, #8
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d009      	beq.n	800c2c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c2ae:	4b12      	ldr	r3, [pc, #72]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c2b0:	689b      	ldr	r3, [r3, #8]
 800c2b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	00db      	lsls	r3, r3, #3
 800c2bc:	490e      	ldr	r1, [pc, #56]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c2c2:	f000 f821 	bl	800c308 <HAL_RCC_GetSysClockFreq>
 800c2c6:	4601      	mov	r1, r0
 800c2c8:	4b0b      	ldr	r3, [pc, #44]	; (800c2f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	091b      	lsrs	r3, r3, #4
 800c2ce:	f003 030f 	and.w	r3, r3, #15
 800c2d2:	4a0a      	ldr	r2, [pc, #40]	; (800c2fc <HAL_RCC_ClockConfig+0x1c0>)
 800c2d4:	5cd3      	ldrb	r3, [r2, r3]
 800c2d6:	fa21 f303 	lsr.w	r3, r1, r3
 800c2da:	4a09      	ldr	r2, [pc, #36]	; (800c300 <HAL_RCC_ClockConfig+0x1c4>)
 800c2dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c2de:	4b09      	ldr	r3, [pc, #36]	; (800c304 <HAL_RCC_ClockConfig+0x1c8>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fd fc50 	bl	8009b88 <HAL_InitTick>

  return HAL_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	40023c00 	.word	0x40023c00
 800c2f8:	40023800 	.word	0x40023800
 800c2fc:	08018e70 	.word	0x08018e70
 800c300:	20000000 	.word	0x20000000
 800c304:	20000004 	.word	0x20000004

0800c308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c30e:	2300      	movs	r3, #0
 800c310:	607b      	str	r3, [r7, #4]
 800c312:	2300      	movs	r3, #0
 800c314:	60fb      	str	r3, [r7, #12]
 800c316:	2300      	movs	r3, #0
 800c318:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c31e:	4b63      	ldr	r3, [pc, #396]	; (800c4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	f003 030c 	and.w	r3, r3, #12
 800c326:	2b04      	cmp	r3, #4
 800c328:	d007      	beq.n	800c33a <HAL_RCC_GetSysClockFreq+0x32>
 800c32a:	2b08      	cmp	r3, #8
 800c32c:	d008      	beq.n	800c340 <HAL_RCC_GetSysClockFreq+0x38>
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f040 80b4 	bne.w	800c49c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c334:	4b5e      	ldr	r3, [pc, #376]	; (800c4b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c336:	60bb      	str	r3, [r7, #8]
       break;
 800c338:	e0b3      	b.n	800c4a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c33a:	4b5d      	ldr	r3, [pc, #372]	; (800c4b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c33c:	60bb      	str	r3, [r7, #8]
      break;
 800c33e:	e0b0      	b.n	800c4a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c340:	4b5a      	ldr	r3, [pc, #360]	; (800c4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c348:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c34a:	4b58      	ldr	r3, [pc, #352]	; (800c4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c352:	2b00      	cmp	r3, #0
 800c354:	d04a      	beq.n	800c3ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c356:	4b55      	ldr	r3, [pc, #340]	; (800c4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	099b      	lsrs	r3, r3, #6
 800c35c:	f04f 0400 	mov.w	r4, #0
 800c360:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c364:	f04f 0200 	mov.w	r2, #0
 800c368:	ea03 0501 	and.w	r5, r3, r1
 800c36c:	ea04 0602 	and.w	r6, r4, r2
 800c370:	4629      	mov	r1, r5
 800c372:	4632      	mov	r2, r6
 800c374:	f04f 0300 	mov.w	r3, #0
 800c378:	f04f 0400 	mov.w	r4, #0
 800c37c:	0154      	lsls	r4, r2, #5
 800c37e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c382:	014b      	lsls	r3, r1, #5
 800c384:	4619      	mov	r1, r3
 800c386:	4622      	mov	r2, r4
 800c388:	1b49      	subs	r1, r1, r5
 800c38a:	eb62 0206 	sbc.w	r2, r2, r6
 800c38e:	f04f 0300 	mov.w	r3, #0
 800c392:	f04f 0400 	mov.w	r4, #0
 800c396:	0194      	lsls	r4, r2, #6
 800c398:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c39c:	018b      	lsls	r3, r1, #6
 800c39e:	1a5b      	subs	r3, r3, r1
 800c3a0:	eb64 0402 	sbc.w	r4, r4, r2
 800c3a4:	f04f 0100 	mov.w	r1, #0
 800c3a8:	f04f 0200 	mov.w	r2, #0
 800c3ac:	00e2      	lsls	r2, r4, #3
 800c3ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c3b2:	00d9      	lsls	r1, r3, #3
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	4614      	mov	r4, r2
 800c3b8:	195b      	adds	r3, r3, r5
 800c3ba:	eb44 0406 	adc.w	r4, r4, r6
 800c3be:	f04f 0100 	mov.w	r1, #0
 800c3c2:	f04f 0200 	mov.w	r2, #0
 800c3c6:	02a2      	lsls	r2, r4, #10
 800c3c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c3cc:	0299      	lsls	r1, r3, #10
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	4614      	mov	r4, r2
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f04f 0400 	mov.w	r4, #0
 800c3dc:	461a      	mov	r2, r3
 800c3de:	4623      	mov	r3, r4
 800c3e0:	f7f4 fc6a 	bl	8000cb8 <__aeabi_uldivmod>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	460c      	mov	r4, r1
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	e049      	b.n	800c480 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c3ec:	4b2f      	ldr	r3, [pc, #188]	; (800c4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	099b      	lsrs	r3, r3, #6
 800c3f2:	f04f 0400 	mov.w	r4, #0
 800c3f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c3fa:	f04f 0200 	mov.w	r2, #0
 800c3fe:	ea03 0501 	and.w	r5, r3, r1
 800c402:	ea04 0602 	and.w	r6, r4, r2
 800c406:	4629      	mov	r1, r5
 800c408:	4632      	mov	r2, r6
 800c40a:	f04f 0300 	mov.w	r3, #0
 800c40e:	f04f 0400 	mov.w	r4, #0
 800c412:	0154      	lsls	r4, r2, #5
 800c414:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c418:	014b      	lsls	r3, r1, #5
 800c41a:	4619      	mov	r1, r3
 800c41c:	4622      	mov	r2, r4
 800c41e:	1b49      	subs	r1, r1, r5
 800c420:	eb62 0206 	sbc.w	r2, r2, r6
 800c424:	f04f 0300 	mov.w	r3, #0
 800c428:	f04f 0400 	mov.w	r4, #0
 800c42c:	0194      	lsls	r4, r2, #6
 800c42e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c432:	018b      	lsls	r3, r1, #6
 800c434:	1a5b      	subs	r3, r3, r1
 800c436:	eb64 0402 	sbc.w	r4, r4, r2
 800c43a:	f04f 0100 	mov.w	r1, #0
 800c43e:	f04f 0200 	mov.w	r2, #0
 800c442:	00e2      	lsls	r2, r4, #3
 800c444:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c448:	00d9      	lsls	r1, r3, #3
 800c44a:	460b      	mov	r3, r1
 800c44c:	4614      	mov	r4, r2
 800c44e:	195b      	adds	r3, r3, r5
 800c450:	eb44 0406 	adc.w	r4, r4, r6
 800c454:	f04f 0100 	mov.w	r1, #0
 800c458:	f04f 0200 	mov.w	r2, #0
 800c45c:	02a2      	lsls	r2, r4, #10
 800c45e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c462:	0299      	lsls	r1, r3, #10
 800c464:	460b      	mov	r3, r1
 800c466:	4614      	mov	r4, r2
 800c468:	4618      	mov	r0, r3
 800c46a:	4621      	mov	r1, r4
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f04f 0400 	mov.w	r4, #0
 800c472:	461a      	mov	r2, r3
 800c474:	4623      	mov	r3, r4
 800c476:	f7f4 fc1f 	bl	8000cb8 <__aeabi_uldivmod>
 800c47a:	4603      	mov	r3, r0
 800c47c:	460c      	mov	r4, r1
 800c47e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c480:	4b0a      	ldr	r3, [pc, #40]	; (800c4ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	0c1b      	lsrs	r3, r3, #16
 800c486:	f003 0303 	and.w	r3, r3, #3
 800c48a:	3301      	adds	r3, #1
 800c48c:	005b      	lsls	r3, r3, #1
 800c48e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	fbb2 f3f3 	udiv	r3, r2, r3
 800c498:	60bb      	str	r3, [r7, #8]
      break;
 800c49a:	e002      	b.n	800c4a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c49c:	4b04      	ldr	r3, [pc, #16]	; (800c4b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c49e:	60bb      	str	r3, [r7, #8]
      break;
 800c4a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c4a2:	68bb      	ldr	r3, [r7, #8]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ac:	40023800 	.word	0x40023800
 800c4b0:	00f42400 	.word	0x00f42400

0800c4b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c4b8:	4b03      	ldr	r3, [pc, #12]	; (800c4c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	20000000 	.word	0x20000000

0800c4cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c4d0:	f7ff fff0 	bl	800c4b4 <HAL_RCC_GetHCLKFreq>
 800c4d4:	4601      	mov	r1, r0
 800c4d6:	4b05      	ldr	r3, [pc, #20]	; (800c4ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	0a9b      	lsrs	r3, r3, #10
 800c4dc:	f003 0307 	and.w	r3, r3, #7
 800c4e0:	4a03      	ldr	r2, [pc, #12]	; (800c4f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c4e2:	5cd3      	ldrb	r3, [r2, r3]
 800c4e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	40023800 	.word	0x40023800
 800c4f0:	08018e80 	.word	0x08018e80

0800c4f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c4f8:	f7ff ffdc 	bl	800c4b4 <HAL_RCC_GetHCLKFreq>
 800c4fc:	4601      	mov	r1, r0
 800c4fe:	4b05      	ldr	r3, [pc, #20]	; (800c514 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	0b5b      	lsrs	r3, r3, #13
 800c504:	f003 0307 	and.w	r3, r3, #7
 800c508:	4a03      	ldr	r2, [pc, #12]	; (800c518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c50a:	5cd3      	ldrb	r3, [r2, r3]
 800c50c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c510:	4618      	mov	r0, r3
 800c512:	bd80      	pop	{r7, pc}
 800c514:	40023800 	.word	0x40023800
 800c518:	08018e80 	.word	0x08018e80

0800c51c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c524:	2300      	movs	r3, #0
 800c526:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c528:	2300      	movs	r3, #0
 800c52a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c52c:	2300      	movs	r3, #0
 800c52e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c530:	2300      	movs	r3, #0
 800c532:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c534:	2300      	movs	r3, #0
 800c536:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00a      	beq.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c544:	4b66      	ldr	r3, [pc, #408]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c54a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c552:	4963      	ldr	r1, [pc, #396]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c554:	4313      	orrs	r3, r2
 800c556:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c562:	2b00      	cmp	r3, #0
 800c564:	d00a      	beq.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c566:	4b5e      	ldr	r3, [pc, #376]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c56c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c574:	495a      	ldr	r1, [pc, #360]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c576:	4313      	orrs	r3, r2
 800c578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f003 0301 	and.w	r3, r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10b      	bne.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c590:	2b00      	cmp	r3, #0
 800c592:	d105      	bne.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d075      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c5a0:	4b50      	ldr	r3, [pc, #320]	; (800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c5a6:	f7fd fb33 	bl	8009c10 <HAL_GetTick>
 800c5aa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c5ac:	e008      	b.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c5ae:	f7fd fb2f 	bl	8009c10 <HAL_GetTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d901      	bls.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e1dc      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c5c0:	4b47      	ldr	r3, [pc, #284]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1f0      	bne.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 0301 	and.w	r3, r3, #1
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d009      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	019a      	lsls	r2, r3, #6
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	071b      	lsls	r3, r3, #28
 800c5e4:	493e      	ldr	r1, [pc, #248]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 0302 	and.w	r3, r3, #2
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d01f      	beq.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c5f8:	4b39      	ldr	r3, [pc, #228]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c5fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5fe:	0f1b      	lsrs	r3, r3, #28
 800c600:	f003 0307 	and.w	r3, r3, #7
 800c604:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	019a      	lsls	r2, r3, #6
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	061b      	lsls	r3, r3, #24
 800c612:	431a      	orrs	r2, r3
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	071b      	lsls	r3, r3, #28
 800c618:	4931      	ldr	r1, [pc, #196]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c61a:	4313      	orrs	r3, r2
 800c61c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c620:	4b2f      	ldr	r3, [pc, #188]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c626:	f023 021f 	bic.w	r2, r3, #31
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a1b      	ldr	r3, [r3, #32]
 800c62e:	3b01      	subs	r3, #1
 800c630:	492b      	ldr	r1, [pc, #172]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c632:	4313      	orrs	r3, r2
 800c634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00d      	beq.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	019a      	lsls	r2, r3, #6
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	061b      	lsls	r3, r3, #24
 800c650:	431a      	orrs	r2, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	071b      	lsls	r3, r3, #28
 800c658:	4921      	ldr	r1, [pc, #132]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c65a:	4313      	orrs	r3, r2
 800c65c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c660:	4b20      	ldr	r3, [pc, #128]	; (800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c662:	2201      	movs	r2, #1
 800c664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c666:	f7fd fad3 	bl	8009c10 <HAL_GetTick>
 800c66a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c66c:	e008      	b.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c66e:	f7fd facf 	bl	8009c10 <HAL_GetTick>
 800c672:	4602      	mov	r2, r0
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d901      	bls.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c67c:	2303      	movs	r3, #3
 800c67e:	e17c      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c680:	4b17      	ldr	r3, [pc, #92]	; (800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d0f0      	beq.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f003 0304 	and.w	r3, r3, #4
 800c694:	2b00      	cmp	r3, #0
 800c696:	d112      	bne.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d10c      	bne.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 80ce 	beq.w	800c84e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c6b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6ba:	f040 80c8 	bne.w	800c84e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c6be:	4b0a      	ldr	r3, [pc, #40]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c6c4:	f7fd faa4 	bl	8009c10 <HAL_GetTick>
 800c6c8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c6ca:	e00f      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c6cc:	f7fd faa0 	bl	8009c10 <HAL_GetTick>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d908      	bls.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	e14d      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c6de:	bf00      	nop
 800c6e0:	40023800 	.word	0x40023800
 800c6e4:	42470068 	.word	0x42470068
 800c6e8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c6ec:	4ba5      	ldr	r3, [pc, #660]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6f8:	d0e8      	beq.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f003 0304 	and.w	r3, r3, #4
 800c702:	2b00      	cmp	r3, #0
 800c704:	d02e      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c706:	4b9f      	ldr	r3, [pc, #636]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c70c:	0c1b      	lsrs	r3, r3, #16
 800c70e:	f003 0303 	and.w	r3, r3, #3
 800c712:	3301      	adds	r3, #1
 800c714:	005b      	lsls	r3, r3, #1
 800c716:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c718:	4b9a      	ldr	r3, [pc, #616]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c71e:	0f1b      	lsrs	r3, r3, #28
 800c720:	f003 0307 	and.w	r3, r3, #7
 800c724:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	019a      	lsls	r2, r3, #6
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	085b      	lsrs	r3, r3, #1
 800c730:	3b01      	subs	r3, #1
 800c732:	041b      	lsls	r3, r3, #16
 800c734:	431a      	orrs	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	061b      	lsls	r3, r3, #24
 800c73c:	431a      	orrs	r2, r3
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	071b      	lsls	r3, r3, #28
 800c742:	4990      	ldr	r1, [pc, #576]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c744:	4313      	orrs	r3, r2
 800c746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c74a:	4b8e      	ldr	r3, [pc, #568]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c74c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c750:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c758:	3b01      	subs	r3, #1
 800c75a:	021b      	lsls	r3, r3, #8
 800c75c:	4989      	ldr	r1, [pc, #548]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c75e:	4313      	orrs	r3, r2
 800c760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f003 0308 	and.w	r3, r3, #8
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d02c      	beq.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c770:	4b84      	ldr	r3, [pc, #528]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c776:	0c1b      	lsrs	r3, r3, #16
 800c778:	f003 0303 	and.w	r3, r3, #3
 800c77c:	3301      	adds	r3, #1
 800c77e:	005b      	lsls	r3, r3, #1
 800c780:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c782:	4b80      	ldr	r3, [pc, #512]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c788:	0e1b      	lsrs	r3, r3, #24
 800c78a:	f003 030f 	and.w	r3, r3, #15
 800c78e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	019a      	lsls	r2, r3, #6
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	085b      	lsrs	r3, r3, #1
 800c79a:	3b01      	subs	r3, #1
 800c79c:	041b      	lsls	r3, r3, #16
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	061b      	lsls	r3, r3, #24
 800c7a4:	431a      	orrs	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	69db      	ldr	r3, [r3, #28]
 800c7aa:	071b      	lsls	r3, r3, #28
 800c7ac:	4975      	ldr	r1, [pc, #468]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c7b4:	4b73      	ldr	r3, [pc, #460]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7c2:	4970      	ldr	r1, [pc, #448]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d024      	beq.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c7da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7de:	d11f      	bne.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c7e0:	4b68      	ldr	r3, [pc, #416]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7e6:	0e1b      	lsrs	r3, r3, #24
 800c7e8:	f003 030f 	and.w	r3, r3, #15
 800c7ec:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c7ee:	4b65      	ldr	r3, [pc, #404]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7f4:	0f1b      	lsrs	r3, r3, #28
 800c7f6:	f003 0307 	and.w	r3, r3, #7
 800c7fa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	691b      	ldr	r3, [r3, #16]
 800c800:	019a      	lsls	r2, r3, #6
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	085b      	lsrs	r3, r3, #1
 800c808:	3b01      	subs	r3, #1
 800c80a:	041b      	lsls	r3, r3, #16
 800c80c:	431a      	orrs	r2, r3
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	061b      	lsls	r3, r3, #24
 800c812:	431a      	orrs	r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	071b      	lsls	r3, r3, #28
 800c818:	495a      	ldr	r1, [pc, #360]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c81a:	4313      	orrs	r3, r2
 800c81c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c820:	4b59      	ldr	r3, [pc, #356]	; (800c988 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c822:	2201      	movs	r2, #1
 800c824:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c826:	f7fd f9f3 	bl	8009c10 <HAL_GetTick>
 800c82a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c82c:	e008      	b.n	800c840 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c82e:	f7fd f9ef 	bl	8009c10 <HAL_GetTick>
 800c832:	4602      	mov	r2, r0
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d901      	bls.n	800c840 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c83c:	2303      	movs	r3, #3
 800c83e:	e09c      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c840:	4b50      	ldr	r3, [pc, #320]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c84c:	d1ef      	bne.n	800c82e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f003 0320 	and.w	r3, r3, #32
 800c856:	2b00      	cmp	r3, #0
 800c858:	f000 8083 	beq.w	800c962 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c85c:	2300      	movs	r3, #0
 800c85e:	60bb      	str	r3, [r7, #8]
 800c860:	4b48      	ldr	r3, [pc, #288]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c864:	4a47      	ldr	r2, [pc, #284]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c86a:	6413      	str	r3, [r2, #64]	; 0x40
 800c86c:	4b45      	ldr	r3, [pc, #276]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c874:	60bb      	str	r3, [r7, #8]
 800c876:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c878:	4b44      	ldr	r3, [pc, #272]	; (800c98c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a43      	ldr	r2, [pc, #268]	; (800c98c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c87e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c882:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c884:	f7fd f9c4 	bl	8009c10 <HAL_GetTick>
 800c888:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c88a:	e008      	b.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c88c:	f7fd f9c0 	bl	8009c10 <HAL_GetTick>
 800c890:	4602      	mov	r2, r0
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	2b02      	cmp	r3, #2
 800c898:	d901      	bls.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e06d      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c89e:	4b3b      	ldr	r3, [pc, #236]	; (800c98c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d0f0      	beq.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c8aa:	4b36      	ldr	r3, [pc, #216]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8b2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d02f      	beq.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8c2:	69ba      	ldr	r2, [r7, #24]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d028      	beq.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c8c8:	4b2e      	ldr	r3, [pc, #184]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8d0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c8d2:	4b2f      	ldr	r3, [pc, #188]	; (800c990 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c8d8:	4b2d      	ldr	r3, [pc, #180]	; (800c990 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c8de:	4a29      	ldr	r2, [pc, #164]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c8e4:	4b27      	ldr	r3, [pc, #156]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e8:	f003 0301 	and.w	r3, r3, #1
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d114      	bne.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c8f0:	f7fd f98e 	bl	8009c10 <HAL_GetTick>
 800c8f4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8f6:	e00a      	b.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c8f8:	f7fd f98a 	bl	8009c10 <HAL_GetTick>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	f241 3288 	movw	r2, #5000	; 0x1388
 800c906:	4293      	cmp	r3, r2
 800c908:	d901      	bls.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c90a:	2303      	movs	r3, #3
 800c90c:	e035      	b.n	800c97a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c90e:	4b1d      	ldr	r3, [pc, #116]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c912:	f003 0302 	and.w	r3, r3, #2
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0ee      	beq.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c926:	d10d      	bne.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c928:	4b16      	ldr	r3, [pc, #88]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c934:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c93c:	4911      	ldr	r1, [pc, #68]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c93e:	4313      	orrs	r3, r2
 800c940:	608b      	str	r3, [r1, #8]
 800c942:	e005      	b.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c944:	4b0f      	ldr	r3, [pc, #60]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	4a0e      	ldr	r2, [pc, #56]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c94a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c94e:	6093      	str	r3, [r2, #8]
 800c950:	4b0c      	ldr	r3, [pc, #48]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c952:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c95c:	4909      	ldr	r1, [pc, #36]	; (800c984 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c95e:	4313      	orrs	r3, r2
 800c960:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f003 0310 	and.w	r3, r3, #16
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d004      	beq.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c974:	4b07      	ldr	r3, [pc, #28]	; (800c994 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c976:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3720      	adds	r7, #32
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	40023800 	.word	0x40023800
 800c988:	42470070 	.word	0x42470070
 800c98c:	40007000 	.word	0x40007000
 800c990:	42470e40 	.word	0x42470e40
 800c994:	424711e0 	.word	0x424711e0

0800c998 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0301 	and.w	r3, r3, #1
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d075      	beq.n	800ca9c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c9b0:	4ba2      	ldr	r3, [pc, #648]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	f003 030c 	and.w	r3, r3, #12
 800c9b8:	2b04      	cmp	r3, #4
 800c9ba:	d00c      	beq.n	800c9d6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c9bc:	4b9f      	ldr	r3, [pc, #636]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c9c4:	2b08      	cmp	r3, #8
 800c9c6:	d112      	bne.n	800c9ee <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c9c8:	4b9c      	ldr	r3, [pc, #624]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c9d4:	d10b      	bne.n	800c9ee <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9d6:	4b99      	ldr	r3, [pc, #612]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d05b      	beq.n	800ca9a <HAL_RCC_OscConfig+0x102>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d157      	bne.n	800ca9a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e20b      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9f6:	d106      	bne.n	800ca06 <HAL_RCC_OscConfig+0x6e>
 800c9f8:	4b90      	ldr	r3, [pc, #576]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a8f      	ldr	r2, [pc, #572]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800c9fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca02:	6013      	str	r3, [r2, #0]
 800ca04:	e01d      	b.n	800ca42 <HAL_RCC_OscConfig+0xaa>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca0e:	d10c      	bne.n	800ca2a <HAL_RCC_OscConfig+0x92>
 800ca10:	4b8a      	ldr	r3, [pc, #552]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a89      	ldr	r2, [pc, #548]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800ca16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca1a:	6013      	str	r3, [r2, #0]
 800ca1c:	4b87      	ldr	r3, [pc, #540]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a86      	ldr	r2, [pc, #536]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800ca22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca26:	6013      	str	r3, [r2, #0]
 800ca28:	e00b      	b.n	800ca42 <HAL_RCC_OscConfig+0xaa>
 800ca2a:	4b84      	ldr	r3, [pc, #528]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a83      	ldr	r2, [pc, #524]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800ca30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca34:	6013      	str	r3, [r2, #0]
 800ca36:	4b81      	ldr	r3, [pc, #516]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a80      	ldr	r2, [pc, #512]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800ca3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d013      	beq.n	800ca72 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca4a:	f7fd f8e1 	bl	8009c10 <HAL_GetTick>
 800ca4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca50:	e008      	b.n	800ca64 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca52:	f7fd f8dd 	bl	8009c10 <HAL_GetTick>
 800ca56:	4602      	mov	r2, r0
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	2b64      	cmp	r3, #100	; 0x64
 800ca5e:	d901      	bls.n	800ca64 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800ca60:	2303      	movs	r3, #3
 800ca62:	e1d0      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ca64:	4b75      	ldr	r3, [pc, #468]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d0f0      	beq.n	800ca52 <HAL_RCC_OscConfig+0xba>
 800ca70:	e014      	b.n	800ca9c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca72:	f7fd f8cd 	bl	8009c10 <HAL_GetTick>
 800ca76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca78:	e008      	b.n	800ca8c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ca7a:	f7fd f8c9 	bl	8009c10 <HAL_GetTick>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	1ad3      	subs	r3, r2, r3
 800ca84:	2b64      	cmp	r3, #100	; 0x64
 800ca86:	d901      	bls.n	800ca8c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	e1bc      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ca8c:	4b6b      	ldr	r3, [pc, #428]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1f0      	bne.n	800ca7a <HAL_RCC_OscConfig+0xe2>
 800ca98:	e000      	b.n	800ca9c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f003 0302 	and.w	r3, r3, #2
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d063      	beq.n	800cb70 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800caa8:	4b64      	ldr	r3, [pc, #400]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f003 030c 	and.w	r3, r3, #12
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00b      	beq.n	800cacc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cab4:	4b61      	ldr	r3, [pc, #388]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cabc:	2b08      	cmp	r3, #8
 800cabe:	d11c      	bne.n	800cafa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cac0:	4b5e      	ldr	r3, [pc, #376]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d116      	bne.n	800cafa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cacc:	4b5b      	ldr	r3, [pc, #364]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f003 0302 	and.w	r3, r3, #2
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d005      	beq.n	800cae4 <HAL_RCC_OscConfig+0x14c>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d001      	beq.n	800cae4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e190      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cae4:	4b55      	ldr	r3, [pc, #340]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	691b      	ldr	r3, [r3, #16]
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	4952      	ldr	r1, [pc, #328]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800caf4:	4313      	orrs	r3, r2
 800caf6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800caf8:	e03a      	b.n	800cb70 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d020      	beq.n	800cb44 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb02:	4b4f      	ldr	r3, [pc, #316]	; (800cc40 <HAL_RCC_OscConfig+0x2a8>)
 800cb04:	2201      	movs	r2, #1
 800cb06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb08:	f7fd f882 	bl	8009c10 <HAL_GetTick>
 800cb0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb0e:	e008      	b.n	800cb22 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb10:	f7fd f87e 	bl	8009c10 <HAL_GetTick>
 800cb14:	4602      	mov	r2, r0
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d901      	bls.n	800cb22 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cb1e:	2303      	movs	r3, #3
 800cb20:	e171      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cb22:	4b46      	ldr	r3, [pc, #280]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f003 0302 	and.w	r3, r3, #2
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d0f0      	beq.n	800cb10 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb2e:	4b43      	ldr	r3, [pc, #268]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	00db      	lsls	r3, r3, #3
 800cb3c:	493f      	ldr	r1, [pc, #252]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	600b      	str	r3, [r1, #0]
 800cb42:	e015      	b.n	800cb70 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb44:	4b3e      	ldr	r3, [pc, #248]	; (800cc40 <HAL_RCC_OscConfig+0x2a8>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb4a:	f7fd f861 	bl	8009c10 <HAL_GetTick>
 800cb4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb50:	e008      	b.n	800cb64 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb52:	f7fd f85d 	bl	8009c10 <HAL_GetTick>
 800cb56:	4602      	mov	r2, r0
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	1ad3      	subs	r3, r2, r3
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d901      	bls.n	800cb64 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e150      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cb64:	4b35      	ldr	r3, [pc, #212]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 0302 	and.w	r3, r3, #2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1f0      	bne.n	800cb52 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 0308 	and.w	r3, r3, #8
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d030      	beq.n	800cbde <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	695b      	ldr	r3, [r3, #20]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d016      	beq.n	800cbb2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb84:	4b2f      	ldr	r3, [pc, #188]	; (800cc44 <HAL_RCC_OscConfig+0x2ac>)
 800cb86:	2201      	movs	r2, #1
 800cb88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb8a:	f7fd f841 	bl	8009c10 <HAL_GetTick>
 800cb8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb90:	e008      	b.n	800cba4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cb92:	f7fd f83d 	bl	8009c10 <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d901      	bls.n	800cba4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e130      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cba4:	4b25      	ldr	r3, [pc, #148]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cba8:	f003 0302 	and.w	r3, r3, #2
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d0f0      	beq.n	800cb92 <HAL_RCC_OscConfig+0x1fa>
 800cbb0:	e015      	b.n	800cbde <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cbb2:	4b24      	ldr	r3, [pc, #144]	; (800cc44 <HAL_RCC_OscConfig+0x2ac>)
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbb8:	f7fd f82a 	bl	8009c10 <HAL_GetTick>
 800cbbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbbe:	e008      	b.n	800cbd2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cbc0:	f7fd f826 	bl	8009c10 <HAL_GetTick>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	1ad3      	subs	r3, r2, r3
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	d901      	bls.n	800cbd2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	e119      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cbd2:	4b1a      	ldr	r3, [pc, #104]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cbd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbd6:	f003 0302 	and.w	r3, r3, #2
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1f0      	bne.n	800cbc0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f003 0304 	and.w	r3, r3, #4
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f000 809f 	beq.w	800cd2a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cbec:	2300      	movs	r3, #0
 800cbee:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cbf0:	4b12      	ldr	r3, [pc, #72]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10f      	bne.n	800cc1c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	60fb      	str	r3, [r7, #12]
 800cc00:	4b0e      	ldr	r3, [pc, #56]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc04:	4a0d      	ldr	r2, [pc, #52]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cc06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc0a:	6413      	str	r3, [r2, #64]	; 0x40
 800cc0c:	4b0b      	ldr	r3, [pc, #44]	; (800cc3c <HAL_RCC_OscConfig+0x2a4>)
 800cc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc14:	60fb      	str	r3, [r7, #12]
 800cc16:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc1c:	4b0a      	ldr	r3, [pc, #40]	; (800cc48 <HAL_RCC_OscConfig+0x2b0>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d120      	bne.n	800cc6a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cc28:	4b07      	ldr	r3, [pc, #28]	; (800cc48 <HAL_RCC_OscConfig+0x2b0>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a06      	ldr	r2, [pc, #24]	; (800cc48 <HAL_RCC_OscConfig+0x2b0>)
 800cc2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cc34:	f7fc ffec 	bl	8009c10 <HAL_GetTick>
 800cc38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc3a:	e010      	b.n	800cc5e <HAL_RCC_OscConfig+0x2c6>
 800cc3c:	40023800 	.word	0x40023800
 800cc40:	42470000 	.word	0x42470000
 800cc44:	42470e80 	.word	0x42470e80
 800cc48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc4c:	f7fc ffe0 	bl	8009c10 <HAL_GetTick>
 800cc50:	4602      	mov	r2, r0
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d901      	bls.n	800cc5e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	e0d3      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cc5e:	4b6c      	ldr	r3, [pc, #432]	; (800ce10 <HAL_RCC_OscConfig+0x478>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d0f0      	beq.n	800cc4c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	2b01      	cmp	r3, #1
 800cc70:	d106      	bne.n	800cc80 <HAL_RCC_OscConfig+0x2e8>
 800cc72:	4b68      	ldr	r3, [pc, #416]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cc74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc76:	4a67      	ldr	r2, [pc, #412]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cc78:	f043 0301 	orr.w	r3, r3, #1
 800cc7c:	6713      	str	r3, [r2, #112]	; 0x70
 800cc7e:	e01c      	b.n	800ccba <HAL_RCC_OscConfig+0x322>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	2b05      	cmp	r3, #5
 800cc86:	d10c      	bne.n	800cca2 <HAL_RCC_OscConfig+0x30a>
 800cc88:	4b62      	ldr	r3, [pc, #392]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cc8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc8c:	4a61      	ldr	r2, [pc, #388]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cc8e:	f043 0304 	orr.w	r3, r3, #4
 800cc92:	6713      	str	r3, [r2, #112]	; 0x70
 800cc94:	4b5f      	ldr	r3, [pc, #380]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cc96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc98:	4a5e      	ldr	r2, [pc, #376]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cc9a:	f043 0301 	orr.w	r3, r3, #1
 800cc9e:	6713      	str	r3, [r2, #112]	; 0x70
 800cca0:	e00b      	b.n	800ccba <HAL_RCC_OscConfig+0x322>
 800cca2:	4b5c      	ldr	r3, [pc, #368]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cca6:	4a5b      	ldr	r2, [pc, #364]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cca8:	f023 0301 	bic.w	r3, r3, #1
 800ccac:	6713      	str	r3, [r2, #112]	; 0x70
 800ccae:	4b59      	ldr	r3, [pc, #356]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800ccb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccb2:	4a58      	ldr	r2, [pc, #352]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800ccb4:	f023 0304 	bic.w	r3, r3, #4
 800ccb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d015      	beq.n	800ccee <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccc2:	f7fc ffa5 	bl	8009c10 <HAL_GetTick>
 800ccc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccc8:	e00a      	b.n	800cce0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ccca:	f7fc ffa1 	bl	8009c10 <HAL_GetTick>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d901      	bls.n	800cce0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ccdc:	2303      	movs	r3, #3
 800ccde:	e092      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cce0:	4b4c      	ldr	r3, [pc, #304]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cce4:	f003 0302 	and.w	r3, r3, #2
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d0ee      	beq.n	800ccca <HAL_RCC_OscConfig+0x332>
 800ccec:	e014      	b.n	800cd18 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccee:	f7fc ff8f 	bl	8009c10 <HAL_GetTick>
 800ccf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ccf4:	e00a      	b.n	800cd0c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ccf6:	f7fc ff8b 	bl	8009c10 <HAL_GetTick>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d901      	bls.n	800cd0c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800cd08:	2303      	movs	r3, #3
 800cd0a:	e07c      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd0c:	4b41      	ldr	r3, [pc, #260]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cd0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd10:	f003 0302 	and.w	r3, r3, #2
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1ee      	bne.n	800ccf6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d105      	bne.n	800cd2a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd1e:	4b3d      	ldr	r3, [pc, #244]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd22:	4a3c      	ldr	r2, [pc, #240]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cd24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	699b      	ldr	r3, [r3, #24]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d068      	beq.n	800ce04 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cd32:	4b38      	ldr	r3, [pc, #224]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	f003 030c 	and.w	r3, r3, #12
 800cd3a:	2b08      	cmp	r3, #8
 800cd3c:	d060      	beq.n	800ce00 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	699b      	ldr	r3, [r3, #24]
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d145      	bne.n	800cdd2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd46:	4b34      	ldr	r3, [pc, #208]	; (800ce18 <HAL_RCC_OscConfig+0x480>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd4c:	f7fc ff60 	bl	8009c10 <HAL_GetTick>
 800cd50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd52:	e008      	b.n	800cd66 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cd54:	f7fc ff5c 	bl	8009c10 <HAL_GetTick>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	d901      	bls.n	800cd66 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800cd62:	2303      	movs	r3, #3
 800cd64:	e04f      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd66:	4b2b      	ldr	r3, [pc, #172]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1f0      	bne.n	800cd54 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	69da      	ldr	r2, [r3, #28]
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	431a      	orrs	r2, r3
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd80:	019b      	lsls	r3, r3, #6
 800cd82:	431a      	orrs	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd88:	085b      	lsrs	r3, r3, #1
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	041b      	lsls	r3, r3, #16
 800cd8e:	431a      	orrs	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd94:	061b      	lsls	r3, r3, #24
 800cd96:	431a      	orrs	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd9c:	071b      	lsls	r3, r3, #28
 800cd9e:	491d      	ldr	r1, [pc, #116]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cda0:	4313      	orrs	r3, r2
 800cda2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cda4:	4b1c      	ldr	r3, [pc, #112]	; (800ce18 <HAL_RCC_OscConfig+0x480>)
 800cda6:	2201      	movs	r2, #1
 800cda8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdaa:	f7fc ff31 	bl	8009c10 <HAL_GetTick>
 800cdae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdb0:	e008      	b.n	800cdc4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cdb2:	f7fc ff2d 	bl	8009c10 <HAL_GetTick>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	d901      	bls.n	800cdc4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	e020      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cdc4:	4b13      	ldr	r3, [pc, #76]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0f0      	beq.n	800cdb2 <HAL_RCC_OscConfig+0x41a>
 800cdd0:	e018      	b.n	800ce04 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cdd2:	4b11      	ldr	r3, [pc, #68]	; (800ce18 <HAL_RCC_OscConfig+0x480>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdd8:	f7fc ff1a 	bl	8009c10 <HAL_GetTick>
 800cddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdde:	e008      	b.n	800cdf2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cde0:	f7fc ff16 	bl	8009c10 <HAL_GetTick>
 800cde4:	4602      	mov	r2, r0
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	2b02      	cmp	r3, #2
 800cdec:	d901      	bls.n	800cdf2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cdee:	2303      	movs	r3, #3
 800cdf0:	e009      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdf2:	4b08      	ldr	r3, [pc, #32]	; (800ce14 <HAL_RCC_OscConfig+0x47c>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1f0      	bne.n	800cde0 <HAL_RCC_OscConfig+0x448>
 800cdfe:	e001      	b.n	800ce04 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	e000      	b.n	800ce06 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3718      	adds	r7, #24
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	40007000 	.word	0x40007000
 800ce14:	40023800 	.word	0x40023800
 800ce18:	42470060 	.word	0x42470060

0800ce1c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d101      	bne.n	800ce2e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	e022      	b.n	800ce74 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d105      	bne.n	800ce46 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7fa f87d 	bl	8006f40 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2203      	movs	r2, #3
 800ce4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f814 	bl	800ce7c <HAL_SD_InitCard>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d001      	beq.n	800ce5e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	e00a      	b.n	800ce74 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2200      	movs	r2, #0
 800ce62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ce7c:	b5b0      	push	{r4, r5, r7, lr}
 800ce7e:	b08e      	sub	sp, #56	; 0x38
 800ce80:	af04      	add	r7, sp, #16
 800ce82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ce84:	2300      	movs	r3, #0
 800ce86:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800ce90:	2300      	movs	r3, #0
 800ce92:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ce94:	2300      	movs	r3, #0
 800ce96:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800ce98:	2376      	movs	r3, #118	; 0x76
 800ce9a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681d      	ldr	r5, [r3, #0]
 800cea0:	466c      	mov	r4, sp
 800cea2:	f107 0314 	add.w	r3, r7, #20
 800cea6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ceaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ceae:	f107 0308 	add.w	r3, r7, #8
 800ceb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f003 fa87 	bl	80103c8 <SDIO_Init>
 800ceba:	4603      	mov	r3, r0
 800cebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d001      	beq.n	800cecc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cec8:	2301      	movs	r3, #1
 800ceca:	e031      	b.n	800cf30 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cecc:	4b1a      	ldr	r3, [pc, #104]	; (800cf38 <HAL_SD_InitCard+0xbc>)
 800cece:	2200      	movs	r2, #0
 800ced0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f003 fabf 	bl	801045a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cedc:	4b16      	ldr	r3, [pc, #88]	; (800cf38 <HAL_SD_InitCard+0xbc>)
 800cede:	2201      	movs	r2, #1
 800cee0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 ffc6 	bl	800de74 <SD_PowerON>
 800cee8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d00b      	beq.n	800cf08 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cefc:	6a3b      	ldr	r3, [r7, #32]
 800cefe:	431a      	orrs	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e013      	b.n	800cf30 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fee5 	bl	800dcd8 <SD_InitCard>
 800cf0e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf10:	6a3b      	ldr	r3, [r7, #32]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00b      	beq.n	800cf2e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf22:	6a3b      	ldr	r3, [r7, #32]
 800cf24:	431a      	orrs	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e000      	b.n	800cf30 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3728      	adds	r7, #40	; 0x28
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bdb0      	pop	{r4, r5, r7, pc}
 800cf38:	422580a0 	.word	0x422580a0

0800cf3c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b08c      	sub	sp, #48	; 0x30
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
 800cf48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d107      	bne.n	800cf64 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	e0c7      	b.n	800d0f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	f040 80c0 	bne.w	800d0f2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cf78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	441a      	add	r2, r3
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d907      	bls.n	800cf96 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e0ae      	b.n	800d0f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2203      	movs	r2, #3
 800cf9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cfb4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfba:	4a50      	ldr	r2, [pc, #320]	; (800d0fc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cfbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc2:	4a4f      	ldr	r2, [pc, #316]	; (800d100 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cfc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfca:	2200      	movs	r2, #0
 800cfcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3380      	adds	r3, #128	; 0x80
 800cfd8:	4619      	mov	r1, r3
 800cfda:	68ba      	ldr	r2, [r7, #8]
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	025b      	lsls	r3, r3, #9
 800cfe0:	089b      	lsrs	r3, r3, #2
 800cfe2:	f7fd fc07 	bl	800a7f4 <HAL_DMA_Start_IT>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d017      	beq.n	800d01c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cffa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a40      	ldr	r2, [pc, #256]	; (800d104 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d002:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d008:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d018:	2301      	movs	r3, #1
 800d01a:	e06b      	b.n	800d0f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d01c:	4b3a      	ldr	r3, [pc, #232]	; (800d108 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d01e:	2201      	movs	r2, #1
 800d020:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d026:	2b01      	cmp	r3, #1
 800d028:	d002      	beq.n	800d030 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02c:	025b      	lsls	r3, r3, #9
 800d02e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d038:	4618      	mov	r0, r3
 800d03a:	f003 faa1 	bl	8010580 <SDMMC_CmdBlockLength>
 800d03e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00f      	beq.n	800d066 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4a2e      	ldr	r2, [pc, #184]	; (800d104 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d04c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d054:	431a      	orrs	r2, r3
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2201      	movs	r2, #1
 800d05e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d062:	2301      	movs	r3, #1
 800d064:	e046      	b.n	800d0f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d066:	f04f 33ff 	mov.w	r3, #4294967295
 800d06a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	025b      	lsls	r3, r3, #9
 800d070:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d072:	2390      	movs	r3, #144	; 0x90
 800d074:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d076:	2302      	movs	r3, #2
 800d078:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d07e:	2301      	movs	r3, #1
 800d080:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f107 0210 	add.w	r2, r7, #16
 800d08a:	4611      	mov	r1, r2
 800d08c:	4618      	mov	r0, r3
 800d08e:	f003 fa4b 	bl	8010528 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d90a      	bls.n	800d0ae <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2282      	movs	r2, #130	; 0x82
 800d09c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f003 faaf 	bl	8010608 <SDMMC_CmdReadMultiBlock>
 800d0aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d0ac:	e009      	b.n	800d0c2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2281      	movs	r2, #129	; 0x81
 800d0b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f003 fa82 	bl	80105c4 <SDMMC_CmdReadSingleBlock>
 800d0c0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d012      	beq.n	800d0ee <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a0d      	ldr	r2, [pc, #52]	; (800d104 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d0ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d6:	431a      	orrs	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e002      	b.n	800d0f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	e000      	b.n	800d0f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d0f2:	2302      	movs	r3, #2
  }
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3730      	adds	r7, #48	; 0x30
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	0800dae7 	.word	0x0800dae7
 800d100:	0800db59 	.word	0x0800db59
 800d104:	004005ff 	.word	0x004005ff
 800d108:	4225858c 	.word	0x4225858c

0800d10c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b08c      	sub	sp, #48	; 0x30
 800d110:	af00      	add	r7, sp, #0
 800d112:	60f8      	str	r0, [r7, #12]
 800d114:	60b9      	str	r1, [r7, #8]
 800d116:	607a      	str	r2, [r7, #4]
 800d118:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d107      	bne.n	800d134 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d128:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	e0ca      	b.n	800d2ca <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	f040 80c3 	bne.w	800d2c8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	441a      	add	r2, r3
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d152:	429a      	cmp	r2, r3
 800d154:	d907      	bls.n	800d166 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d15a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d162:	2301      	movs	r3, #1
 800d164:	e0b1      	b.n	800d2ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2203      	movs	r2, #3
 800d16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2200      	movs	r2, #0
 800d174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f042 021a 	orr.w	r2, r2, #26
 800d184:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d18a:	4a52      	ldr	r2, [pc, #328]	; (800d2d4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d18c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d192:	4a51      	ldr	r2, [pc, #324]	; (800d2d8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d194:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d19a:	2200      	movs	r2, #0
 800d19c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d002      	beq.n	800d1ac <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a8:	025b      	lsls	r3, r3, #9
 800d1aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f003 f9e3 	bl	8010580 <SDMMC_CmdBlockLength>
 800d1ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00f      	beq.n	800d1e2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a45      	ldr	r2, [pc, #276]	; (800d2dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d1c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d0:	431a      	orrs	r2, r3
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e073      	b.n	800d2ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d90a      	bls.n	800d1fe <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	22a0      	movs	r2, #160	; 0xa0
 800d1ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f003 fa4b 	bl	8010690 <SDMMC_CmdWriteMultiBlock>
 800d1fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d1fc:	e009      	b.n	800d212 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2290      	movs	r2, #144	; 0x90
 800d202:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d20a:	4618      	mov	r0, r3
 800d20c:	f003 fa1e 	bl	801064c <SDMMC_CmdWriteSingleBlock>
 800d210:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	2b00      	cmp	r3, #0
 800d216:	d012      	beq.n	800d23e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a2f      	ldr	r2, [pc, #188]	; (800d2dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d21e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d226:	431a      	orrs	r2, r3
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2200      	movs	r2, #0
 800d238:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e045      	b.n	800d2ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d23e:	4b28      	ldr	r3, [pc, #160]	; (800d2e0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d240:	2201      	movs	r2, #1
 800d242:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d248:	68b9      	ldr	r1, [r7, #8]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3380      	adds	r3, #128	; 0x80
 800d250:	461a      	mov	r2, r3
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	025b      	lsls	r3, r3, #9
 800d256:	089b      	lsrs	r3, r3, #2
 800d258:	f7fd facc 	bl	800a7f4 <HAL_DMA_Start_IT>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d01a      	beq.n	800d298 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f022 021a 	bic.w	r2, r2, #26
 800d270:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a19      	ldr	r2, [pc, #100]	; (800d2dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d278:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2201      	movs	r2, #1
 800d28a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2200      	movs	r2, #0
 800d292:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	e018      	b.n	800d2ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d298:	f04f 33ff 	mov.w	r3, #4294967295
 800d29c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	025b      	lsls	r3, r3, #9
 800d2a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d2a4:	2390      	movs	r3, #144	; 0x90
 800d2a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f107 0210 	add.w	r2, r7, #16
 800d2bc:	4611      	mov	r1, r2
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f003 f932 	bl	8010528 <SDIO_ConfigData>

      return HAL_OK;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	e000      	b.n	800d2ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d2c8:	2302      	movs	r3, #2
  }
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3730      	adds	r7, #48	; 0x30
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	0800dabd 	.word	0x0800dabd
 800d2d8:	0800db59 	.word	0x0800db59
 800d2dc:	004005ff 	.word	0x004005ff
 800d2e0:	4225858c 	.word	0x4225858c

0800d2e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d008      	beq.n	800d312 <HAL_SD_IRQHandler+0x2e>
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f003 0308 	and.w	r3, r3, #8
 800d306:	2b00      	cmp	r3, #0
 800d308:	d003      	beq.n	800d312 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 ffc8 	bl	800e2a0 <SD_Read_IT>
 800d310:	e155      	b.n	800d5be <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f000 808f 	beq.w	800d440 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d32a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	6812      	ldr	r2, [r2, #0]
 800d336:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d33a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d33e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f022 0201 	bic.w	r2, r2, #1
 800d34e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f003 0308 	and.w	r3, r3, #8
 800d356:	2b00      	cmp	r3, #0
 800d358:	d039      	beq.n	800d3ce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f003 0302 	and.w	r3, r3, #2
 800d360:	2b00      	cmp	r3, #0
 800d362:	d104      	bne.n	800d36e <HAL_SD_IRQHandler+0x8a>
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f003 0320 	and.w	r3, r3, #32
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d011      	beq.n	800d392 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4618      	mov	r0, r3
 800d374:	f003 f9ae 	bl	80106d4 <SDMMC_CmdStopTransfer>
 800d378:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d008      	beq.n	800d392 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	431a      	orrs	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f000 f91f 	bl	800d5d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f240 523a 	movw	r2, #1338	; 0x53a
 800d39a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f003 0301 	and.w	r3, r3, #1
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d104      	bne.n	800d3be <HAL_SD_IRQHandler+0xda>
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f003 0302 	and.w	r3, r3, #2
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d003      	beq.n	800d3c6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f003 fe04 	bl	8010fcc <HAL_SD_RxCpltCallback>
 800d3c4:	e0fb      	b.n	800d5be <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f003 fdf6 	bl	8010fb8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d3cc:	e0f7      	b.n	800d5be <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f000 80f2 	beq.w	800d5be <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f003 0320 	and.w	r3, r3, #32
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d011      	beq.n	800d408 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f003 f973 	bl	80106d4 <SDMMC_CmdStopTransfer>
 800d3ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d008      	beq.n	800d408 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	431a      	orrs	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 f8e4 	bl	800d5d0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f003 0301 	and.w	r3, r3, #1
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f040 80d5 	bne.w	800d5be <HAL_SD_IRQHandler+0x2da>
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f003 0302 	and.w	r3, r3, #2
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f040 80cf 	bne.w	800d5be <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f022 0208 	bic.w	r2, r2, #8
 800d42e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f003 fdbd 	bl	8010fb8 <HAL_SD_TxCpltCallback>
}
 800d43e:	e0be      	b.n	800d5be <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d008      	beq.n	800d460 <HAL_SD_IRQHandler+0x17c>
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f003 0308 	and.w	r3, r3, #8
 800d454:	2b00      	cmp	r3, #0
 800d456:	d003      	beq.n	800d460 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 ff72 	bl	800e342 <SD_Write_IT>
 800d45e:	e0ae      	b.n	800d5be <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d466:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f000 80a7 	beq.w	800d5be <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d476:	f003 0302 	and.w	r3, r3, #2
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d005      	beq.n	800d48a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d482:	f043 0202 	orr.w	r2, r3, #2
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d490:	f003 0308 	and.w	r3, r3, #8
 800d494:	2b00      	cmp	r3, #0
 800d496:	d005      	beq.n	800d4a4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49c:	f043 0208 	orr.w	r2, r3, #8
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4aa:	f003 0320 	and.w	r3, r3, #32
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d005      	beq.n	800d4be <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b6:	f043 0220 	orr.w	r2, r3, #32
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4c4:	f003 0310 	and.w	r3, r3, #16
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d005      	beq.n	800d4d8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d0:	f043 0210 	orr.w	r2, r3, #16
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f240 523a 	movw	r2, #1338	; 0x53a
 800d4e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d4f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f003 f8ec 	bl	80106d4 <SDMMC_CmdStopTransfer>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d502:	431a      	orrs	r2, r3
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f003 0308 	and.w	r3, r3, #8
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00a      	beq.n	800d528 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2201      	movs	r2, #1
 800d516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 f855 	bl	800d5d0 <HAL_SD_ErrorCallback>
}
 800d526:	e04a      	b.n	800d5be <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d045      	beq.n	800d5be <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f003 0310 	and.w	r3, r3, #16
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d104      	bne.n	800d546 <HAL_SD_IRQHandler+0x262>
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f003 0320 	and.w	r3, r3, #32
 800d542:	2b00      	cmp	r3, #0
 800d544:	d011      	beq.n	800d56a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d54a:	4a1f      	ldr	r2, [pc, #124]	; (800d5c8 <HAL_SD_IRQHandler+0x2e4>)
 800d54c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d552:	4618      	mov	r0, r3
 800d554:	f7fd f9a6 	bl	800a8a4 <HAL_DMA_Abort_IT>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d02f      	beq.n	800d5be <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d562:	4618      	mov	r0, r3
 800d564:	f000 fb4a 	bl	800dbfc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d568:	e029      	b.n	800d5be <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f003 0301 	and.w	r3, r3, #1
 800d570:	2b00      	cmp	r3, #0
 800d572:	d104      	bne.n	800d57e <HAL_SD_IRQHandler+0x29a>
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f003 0302 	and.w	r3, r3, #2
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d011      	beq.n	800d5a2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d582:	4a12      	ldr	r2, [pc, #72]	; (800d5cc <HAL_SD_IRQHandler+0x2e8>)
 800d584:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fd f98a 	bl	800a8a4 <HAL_DMA_Abort_IT>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d013      	beq.n	800d5be <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d59a:	4618      	mov	r0, r3
 800d59c:	f000 fb65 	bl	800dc6a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d5a0:	e00d      	b.n	800d5be <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f003 fcf4 	bl	8010fa4 <HAL_SD_AbortCallback>
}
 800d5bc:	e7ff      	b.n	800d5be <HAL_SD_IRQHandler+0x2da>
 800d5be:	bf00      	nop
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	0800dbfd 	.word	0x0800dbfd
 800d5cc:	0800dc6b 	.word	0x0800dc6b

0800d5d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d5d8:	bf00      	nop
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5f2:	0f9b      	lsrs	r3, r3, #30
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5fe:	0e9b      	lsrs	r3, r3, #26
 800d600:	b2db      	uxtb	r3, r3
 800d602:	f003 030f 	and.w	r3, r3, #15
 800d606:	b2da      	uxtb	r2, r3
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d610:	0e1b      	lsrs	r3, r3, #24
 800d612:	b2db      	uxtb	r3, r3
 800d614:	f003 0303 	and.w	r3, r3, #3
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d622:	0c1b      	lsrs	r3, r3, #16
 800d624:	b2da      	uxtb	r2, r3
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d62e:	0a1b      	lsrs	r3, r3, #8
 800d630:	b2da      	uxtb	r2, r3
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d644:	0d1b      	lsrs	r3, r3, #20
 800d646:	b29a      	uxth	r2, r3
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d650:	0c1b      	lsrs	r3, r3, #16
 800d652:	b2db      	uxtb	r3, r3
 800d654:	f003 030f 	and.w	r3, r3, #15
 800d658:	b2da      	uxtb	r2, r3
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d662:	0bdb      	lsrs	r3, r3, #15
 800d664:	b2db      	uxtb	r3, r3
 800d666:	f003 0301 	and.w	r3, r3, #1
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d674:	0b9b      	lsrs	r3, r3, #14
 800d676:	b2db      	uxtb	r3, r3
 800d678:	f003 0301 	and.w	r3, r3, #1
 800d67c:	b2da      	uxtb	r2, r3
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d686:	0b5b      	lsrs	r3, r3, #13
 800d688:	b2db      	uxtb	r3, r3
 800d68a:	f003 0301 	and.w	r3, r3, #1
 800d68e:	b2da      	uxtb	r2, r3
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d698:	0b1b      	lsrs	r3, r3, #12
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	f003 0301 	and.w	r3, r3, #1
 800d6a0:	b2da      	uxtb	r2, r3
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d163      	bne.n	800d77c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6b8:	009a      	lsls	r2, r3, #2
 800d6ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d6be:	4013      	ands	r3, r2
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d6c4:	0f92      	lsrs	r2, r2, #30
 800d6c6:	431a      	orrs	r2, r3
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6d0:	0edb      	lsrs	r3, r3, #27
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	f003 0307 	and.w	r3, r3, #7
 800d6d8:	b2da      	uxtb	r2, r3
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6e2:	0e1b      	lsrs	r3, r3, #24
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	f003 0307 	and.w	r3, r3, #7
 800d6ea:	b2da      	uxtb	r2, r3
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6f4:	0d5b      	lsrs	r3, r3, #21
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	f003 0307 	and.w	r3, r3, #7
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d706:	0c9b      	lsrs	r3, r3, #18
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	f003 0307 	and.w	r3, r3, #7
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d718:	0bdb      	lsrs	r3, r3, #15
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	f003 0307 	and.w	r3, r3, #7
 800d720:	b2da      	uxtb	r2, r3
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	1c5a      	adds	r2, r3, #1
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	7e1b      	ldrb	r3, [r3, #24]
 800d734:	b2db      	uxtb	r3, r3
 800d736:	f003 0307 	and.w	r3, r3, #7
 800d73a:	3302      	adds	r3, #2
 800d73c:	2201      	movs	r2, #1
 800d73e:	fa02 f303 	lsl.w	r3, r2, r3
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d746:	fb02 f203 	mul.w	r2, r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	7a1b      	ldrb	r3, [r3, #8]
 800d752:	b2db      	uxtb	r3, r3
 800d754:	f003 030f 	and.w	r3, r3, #15
 800d758:	2201      	movs	r2, #1
 800d75a:	409a      	lsls	r2, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d768:	0a52      	lsrs	r2, r2, #9
 800d76a:	fb02 f203 	mul.w	r2, r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d778:	661a      	str	r2, [r3, #96]	; 0x60
 800d77a:	e031      	b.n	800d7e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d780:	2b01      	cmp	r3, #1
 800d782:	d11d      	bne.n	800d7c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d788:	041b      	lsls	r3, r3, #16
 800d78a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d792:	0c1b      	lsrs	r3, r3, #16
 800d794:	431a      	orrs	r2, r3
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	029a      	lsls	r2, r3, #10
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	661a      	str	r2, [r3, #96]	; 0x60
 800d7be:	e00f      	b.n	800d7e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a58      	ldr	r2, [pc, #352]	; (800d928 <HAL_SD_GetCardCSD+0x344>)
 800d7c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e09d      	b.n	800d91c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7e4:	0b9b      	lsrs	r3, r3, #14
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	f003 0301 	and.w	r3, r3, #1
 800d7ec:	b2da      	uxtb	r2, r3
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f6:	09db      	lsrs	r3, r3, #7
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d818:	0fdb      	lsrs	r3, r3, #31
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d824:	0f5b      	lsrs	r3, r3, #29
 800d826:	b2db      	uxtb	r3, r3
 800d828:	f003 0303 	and.w	r3, r3, #3
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d836:	0e9b      	lsrs	r3, r3, #26
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	f003 0307 	and.w	r3, r3, #7
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d848:	0d9b      	lsrs	r3, r3, #22
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	f003 030f 	and.w	r3, r3, #15
 800d850:	b2da      	uxtb	r2, r3
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d85a:	0d5b      	lsrs	r3, r3, #21
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	f003 0301 	and.w	r3, r3, #1
 800d862:	b2da      	uxtb	r2, r3
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d876:	0c1b      	lsrs	r3, r3, #16
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d88a:	0bdb      	lsrs	r3, r3, #15
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	b2da      	uxtb	r2, r3
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d89e:	0b9b      	lsrs	r3, r3, #14
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	f003 0301 	and.w	r3, r3, #1
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8b2:	0b5b      	lsrs	r3, r3, #13
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	f003 0301 	and.w	r3, r3, #1
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8c6:	0b1b      	lsrs	r3, r3, #12
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	f003 0301 	and.w	r3, r3, #1
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8da:	0a9b      	lsrs	r3, r3, #10
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	f003 0303 	and.w	r3, r3, #3
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ee:	0a1b      	lsrs	r3, r3, #8
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	f003 0303 	and.w	r3, r3, #3
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d902:	085b      	lsrs	r3, r3, #1
 800d904:	b2db      	uxtb	r3, r3
 800d906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	2201      	movs	r2, #1
 800d916:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	004005ff 	.word	0x004005ff

0800d92c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d984:	b5b0      	push	{r4, r5, r7, lr}
 800d986:	b08e      	sub	sp, #56	; 0x38
 800d988:	af04      	add	r7, sp, #16
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2203      	movs	r2, #3
 800d992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d99a:	2b03      	cmp	r3, #3
 800d99c:	d02e      	beq.n	800d9fc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9a4:	d106      	bne.n	800d9b4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	639a      	str	r2, [r3, #56]	; 0x38
 800d9b2:	e029      	b.n	800da08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d9ba:	d10a      	bne.n	800d9d2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 fb0f 	bl	800dfe0 <SD_WideBus_Enable>
 800d9c2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	431a      	orrs	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	639a      	str	r2, [r3, #56]	; 0x38
 800d9d0:	e01a      	b.n	800da08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10a      	bne.n	800d9ee <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 fb4c 	bl	800e076 <SD_WideBus_Disable>
 800d9de:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	431a      	orrs	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	639a      	str	r2, [r3, #56]	; 0x38
 800d9ec:	e00c      	b.n	800da08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	639a      	str	r2, [r3, #56]	; 0x38
 800d9fa:	e005      	b.n	800da08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d009      	beq.n	800da24 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a18      	ldr	r2, [pc, #96]	; (800da78 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800da16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800da20:	2301      	movs	r3, #1
 800da22:	e024      	b.n	800da6e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	695b      	ldr	r3, [r3, #20]
 800da3e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	699b      	ldr	r3, [r3, #24]
 800da44:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681d      	ldr	r5, [r3, #0]
 800da4a:	466c      	mov	r4, sp
 800da4c:	f107 0318 	add.w	r3, r7, #24
 800da50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800da54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800da58:	f107 030c 	add.w	r3, r7, #12
 800da5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800da5e:	4628      	mov	r0, r5
 800da60:	f002 fcb2 	bl	80103c8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3728      	adds	r7, #40	; 0x28
 800da72:	46bd      	mov	sp, r7
 800da74:	bdb0      	pop	{r4, r5, r7, pc}
 800da76:	bf00      	nop
 800da78:	004005ff 	.word	0x004005ff

0800da7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b086      	sub	sp, #24
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800da84:	2300      	movs	r3, #0
 800da86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800da88:	f107 030c 	add.w	r3, r7, #12
 800da8c:	4619      	mov	r1, r3
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fa7e 	bl	800df90 <SD_SendStatus>
 800da94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d005      	beq.n	800daa8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	431a      	orrs	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	0a5b      	lsrs	r3, r3, #9
 800daac:	f003 030f 	and.w	r3, r3, #15
 800dab0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dab2:	693b      	ldr	r3, [r7, #16]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3718      	adds	r7, #24
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dad8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800dada:	bf00      	nop
 800dadc:	3714      	adds	r7, #20
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daf8:	2b82      	cmp	r3, #130	; 0x82
 800dafa:	d111      	bne.n	800db20 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4618      	mov	r0, r3
 800db02:	f002 fde7 	bl	80106d4 <SDMMC_CmdStopTransfer>
 800db06:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d008      	beq.n	800db20 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	431a      	orrs	r2, r3
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f7ff fd58 	bl	800d5d0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f022 0208 	bic.w	r2, r2, #8
 800db2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f240 523a 	movw	r2, #1338	; 0x53a
 800db38:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2201      	movs	r2, #1
 800db3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f003 fa3f 	bl	8010fcc <HAL_SD_RxCpltCallback>
#endif
}
 800db4e:	bf00      	nop
 800db50:	3710      	adds	r7, #16
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
	...

0800db58 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b086      	sub	sp, #24
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db64:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f7fd f848 	bl	800abfc <HAL_DMA_GetError>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b02      	cmp	r3, #2
 800db70:	d03e      	beq.n	800dbf0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db78:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db80:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	2b01      	cmp	r3, #1
 800db86:	d002      	beq.n	800db8e <SD_DMAError+0x36>
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d12d      	bne.n	800dbea <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a19      	ldr	r2, [pc, #100]	; (800dbf8 <SD_DMAError+0xa0>)
 800db94:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dba4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbaa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800dbb2:	6978      	ldr	r0, [r7, #20]
 800dbb4:	f7ff ff62 	bl	800da7c <HAL_SD_GetCardState>
 800dbb8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	2b06      	cmp	r3, #6
 800dbbe:	d002      	beq.n	800dbc6 <SD_DMAError+0x6e>
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	2b05      	cmp	r3, #5
 800dbc4:	d10a      	bne.n	800dbdc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f002 fd82 	bl	80106d4 <SDMMC_CmdStopTransfer>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd6:	431a      	orrs	r2, r3
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2201      	movs	r2, #1
 800dbe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dbea:	6978      	ldr	r0, [r7, #20]
 800dbec:	f7ff fcf0 	bl	800d5d0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dbf0:	bf00      	nop
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	004005ff 	.word	0x004005ff

0800dbfc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc08:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f240 523a 	movw	r2, #1338	; 0x53a
 800dc12:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f7ff ff31 	bl	800da7c <HAL_SD_GetCardState>
 800dc1a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2200      	movs	r2, #0
 800dc28:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	2b06      	cmp	r3, #6
 800dc2e:	d002      	beq.n	800dc36 <SD_DMATxAbort+0x3a>
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2b05      	cmp	r3, #5
 800dc34:	d10a      	bne.n	800dc4c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f002 fd4a 	bl	80106d4 <SDMMC_CmdStopTransfer>
 800dc40:	4602      	mov	r2, r0
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc46:	431a      	orrs	r2, r3
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d103      	bne.n	800dc5c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f003 f9a5 	bl	8010fa4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dc5a:	e002      	b.n	800dc62 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f7ff fcb7 	bl	800d5d0 <HAL_SD_ErrorCallback>
}
 800dc62:	bf00      	nop
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}

0800dc6a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800dc6a:	b580      	push	{r7, lr}
 800dc6c:	b084      	sub	sp, #16
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc76:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f240 523a 	movw	r2, #1338	; 0x53a
 800dc80:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dc82:	68f8      	ldr	r0, [r7, #12]
 800dc84:	f7ff fefa 	bl	800da7c <HAL_SD_GetCardState>
 800dc88:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2200      	movs	r2, #0
 800dc96:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	2b06      	cmp	r3, #6
 800dc9c:	d002      	beq.n	800dca4 <SD_DMARxAbort+0x3a>
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	2b05      	cmp	r3, #5
 800dca2:	d10a      	bne.n	800dcba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f002 fd13 	bl	80106d4 <SDMMC_CmdStopTransfer>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb4:	431a      	orrs	r2, r3
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d103      	bne.n	800dcca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	f003 f96e 	bl	8010fa4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dcc8:	e002      	b.n	800dcd0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f7ff fc80 	bl	800d5d0 <HAL_SD_ErrorCallback>
}
 800dcd0:	bf00      	nop
 800dcd2:	3710      	adds	r7, #16
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dcd8:	b5b0      	push	{r4, r5, r7, lr}
 800dcda:	b094      	sub	sp, #80	; 0x50
 800dcdc:	af04      	add	r7, sp, #16
 800dcde:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dce0:	2301      	movs	r3, #1
 800dce2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4618      	mov	r0, r3
 800dcea:	f002 fbc5 	bl	8010478 <SDIO_GetPowerState>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d102      	bne.n	800dcfa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dcf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dcf8:	e0b7      	b.n	800de6a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcfe:	2b03      	cmp	r3, #3
 800dd00:	d02f      	beq.n	800dd62 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4618      	mov	r0, r3
 800dd08:	f002 fdee 	bl	80108e8 <SDMMC_CmdSendCID>
 800dd0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d001      	beq.n	800dd18 <SD_InitCard+0x40>
    {
      return errorstate;
 800dd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd16:	e0a8      	b.n	800de6a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f002 fbef 	bl	8010502 <SDIO_GetResponse>
 800dd24:	4602      	mov	r2, r0
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2104      	movs	r1, #4
 800dd30:	4618      	mov	r0, r3
 800dd32:	f002 fbe6 	bl	8010502 <SDIO_GetResponse>
 800dd36:	4602      	mov	r2, r0
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2108      	movs	r1, #8
 800dd42:	4618      	mov	r0, r3
 800dd44:	f002 fbdd 	bl	8010502 <SDIO_GetResponse>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	210c      	movs	r1, #12
 800dd54:	4618      	mov	r0, r3
 800dd56:	f002 fbd4 	bl	8010502 <SDIO_GetResponse>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd66:	2b03      	cmp	r3, #3
 800dd68:	d00d      	beq.n	800dd86 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f107 020e 	add.w	r2, r7, #14
 800dd72:	4611      	mov	r1, r2
 800dd74:	4618      	mov	r0, r3
 800dd76:	f002 fdf4 	bl	8010962 <SDMMC_CmdSetRelAdd>
 800dd7a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <SD_InitCard+0xae>
    {
      return errorstate;
 800dd82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd84:	e071      	b.n	800de6a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd8a:	2b03      	cmp	r3, #3
 800dd8c:	d036      	beq.n	800ddfc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dd8e:	89fb      	ldrh	r3, [r7, #14]
 800dd90:	461a      	mov	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd9e:	041b      	lsls	r3, r3, #16
 800dda0:	4619      	mov	r1, r3
 800dda2:	4610      	mov	r0, r2
 800dda4:	f002 fdbe 	bl	8010924 <SDMMC_CmdSendCSD>
 800dda8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d001      	beq.n	800ddb4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ddb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb2:	e05a      	b.n	800de6a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2100      	movs	r1, #0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f002 fba1 	bl	8010502 <SDIO_GetResponse>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2104      	movs	r1, #4
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f002 fb98 	bl	8010502 <SDIO_GetResponse>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2108      	movs	r1, #8
 800ddde:	4618      	mov	r0, r3
 800dde0:	f002 fb8f 	bl	8010502 <SDIO_GetResponse>
 800dde4:	4602      	mov	r2, r0
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	210c      	movs	r1, #12
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f002 fb86 	bl	8010502 <SDIO_GetResponse>
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2104      	movs	r1, #4
 800de02:	4618      	mov	r0, r3
 800de04:	f002 fb7d 	bl	8010502 <SDIO_GetResponse>
 800de08:	4603      	mov	r3, r0
 800de0a:	0d1a      	lsrs	r2, r3, #20
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800de10:	f107 0310 	add.w	r3, r7, #16
 800de14:	4619      	mov	r1, r3
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f7ff fbe4 	bl	800d5e4 <HAL_SD_GetCardCSD>
 800de1c:	4603      	mov	r3, r0
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d002      	beq.n	800de28 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800de26:	e020      	b.n	800de6a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6819      	ldr	r1, [r3, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de30:	041b      	lsls	r3, r3, #16
 800de32:	f04f 0400 	mov.w	r4, #0
 800de36:	461a      	mov	r2, r3
 800de38:	4623      	mov	r3, r4
 800de3a:	4608      	mov	r0, r1
 800de3c:	f002 fc6c 	bl	8010718 <SDMMC_CmdSelDesel>
 800de40:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800de42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <SD_InitCard+0x174>
  {
    return errorstate;
 800de48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de4a:	e00e      	b.n	800de6a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681d      	ldr	r5, [r3, #0]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	466c      	mov	r4, sp
 800de54:	f103 0210 	add.w	r2, r3, #16
 800de58:	ca07      	ldmia	r2, {r0, r1, r2}
 800de5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de5e:	3304      	adds	r3, #4
 800de60:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de62:	4628      	mov	r0, r5
 800de64:	f002 fab0 	bl	80103c8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3740      	adds	r7, #64	; 0x40
 800de6e:	46bd      	mov	sp, r7
 800de70:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800de74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b086      	sub	sp, #24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de7c:	2300      	movs	r3, #0
 800de7e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800de80:	2300      	movs	r3, #0
 800de82:	617b      	str	r3, [r7, #20]
 800de84:	2300      	movs	r3, #0
 800de86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4618      	mov	r0, r3
 800de8e:	f002 fc66 	bl	801075e <SDMMC_CmdGoIdleState>
 800de92:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d001      	beq.n	800de9e <SD_PowerON+0x2a>
  {
    return errorstate;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	e072      	b.n	800df84 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f002 fc79 	bl	801079a <SDMMC_CmdOperCond>
 800dea8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d00d      	beq.n	800decc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4618      	mov	r0, r3
 800debc:	f002 fc4f 	bl	801075e <SDMMC_CmdGoIdleState>
 800dec0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d004      	beq.n	800ded2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	e05b      	b.n	800df84 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d137      	bne.n	800df4a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2100      	movs	r1, #0
 800dee0:	4618      	mov	r0, r3
 800dee2:	f002 fc79 	bl	80107d8 <SDMMC_CmdAppCommand>
 800dee6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d02d      	beq.n	800df4a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800deee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800def2:	e047      	b.n	800df84 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2100      	movs	r1, #0
 800defa:	4618      	mov	r0, r3
 800defc:	f002 fc6c 	bl	80107d8 <SDMMC_CmdAppCommand>
 800df00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <SD_PowerON+0x98>
    {
      return errorstate;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	e03b      	b.n	800df84 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	491e      	ldr	r1, [pc, #120]	; (800df8c <SD_PowerON+0x118>)
 800df12:	4618      	mov	r0, r3
 800df14:	f002 fc82 	bl	801081c <SDMMC_CmdAppOperCommand>
 800df18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d002      	beq.n	800df26 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df24:	e02e      	b.n	800df84 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2100      	movs	r1, #0
 800df2c:	4618      	mov	r0, r3
 800df2e:	f002 fae8 	bl	8010502 <SDIO_GetResponse>
 800df32:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	0fdb      	lsrs	r3, r3, #31
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d101      	bne.n	800df40 <SD_PowerON+0xcc>
 800df3c:	2301      	movs	r3, #1
 800df3e:	e000      	b.n	800df42 <SD_PowerON+0xce>
 800df40:	2300      	movs	r3, #0
 800df42:	613b      	str	r3, [r7, #16]

    count++;
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	3301      	adds	r3, #1
 800df48:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df50:	4293      	cmp	r3, r2
 800df52:	d802      	bhi.n	800df5a <SD_PowerON+0xe6>
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d0cc      	beq.n	800def4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800df60:	4293      	cmp	r3, r2
 800df62:	d902      	bls.n	800df6a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800df64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800df68:	e00c      	b.n	800df84 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df70:	2b00      	cmp	r3, #0
 800df72:	d003      	beq.n	800df7c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2201      	movs	r2, #1
 800df78:	645a      	str	r2, [r3, #68]	; 0x44
 800df7a:	e002      	b.n	800df82 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800df82:	2300      	movs	r3, #0
}
 800df84:	4618      	mov	r0, r3
 800df86:	3718      	adds	r7, #24
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	c1100000 	.word	0xc1100000

0800df90 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d102      	bne.n	800dfa6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dfa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dfa4:	e018      	b.n	800dfd8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfae:	041b      	lsls	r3, r3, #16
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	4610      	mov	r0, r2
 800dfb4:	f002 fcf6 	bl	80109a4 <SDMMC_CmdSendStatus>
 800dfb8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	e009      	b.n	800dfd8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2100      	movs	r1, #0
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f002 fa99 	bl	8010502 <SDIO_GetResponse>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dfd6:	2300      	movs	r3, #0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dfe8:	2300      	movs	r3, #0
 800dfea:	60fb      	str	r3, [r7, #12]
 800dfec:	2300      	movs	r3, #0
 800dfee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	2100      	movs	r1, #0
 800dff6:	4618      	mov	r0, r3
 800dff8:	f002 fa83 	bl	8010502 <SDIO_GetResponse>
 800dffc:	4603      	mov	r3, r0
 800dffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e006:	d102      	bne.n	800e00e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e008:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e00c:	e02f      	b.n	800e06e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e00e:	f107 030c 	add.w	r3, r7, #12
 800e012:	4619      	mov	r1, r3
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 f879 	bl	800e10c <SD_FindSCR>
 800e01a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d001      	beq.n	800e026 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	e023      	b.n	800e06e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d01c      	beq.n	800e06a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e038:	041b      	lsls	r3, r3, #16
 800e03a:	4619      	mov	r1, r3
 800e03c:	4610      	mov	r0, r2
 800e03e:	f002 fbcb 	bl	80107d8 <SDMMC_CmdAppCommand>
 800e042:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d001      	beq.n	800e04e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	e00f      	b.n	800e06e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2102      	movs	r1, #2
 800e054:	4618      	mov	r0, r3
 800e056:	f002 fc04 	bl	8010862 <SDMMC_CmdBusWidth>
 800e05a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d001      	beq.n	800e066 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	e003      	b.n	800e06e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e066:	2300      	movs	r3, #0
 800e068:	e001      	b.n	800e06e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e06a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3718      	adds	r7, #24
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b086      	sub	sp, #24
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e07e:	2300      	movs	r3, #0
 800e080:	60fb      	str	r3, [r7, #12]
 800e082:	2300      	movs	r3, #0
 800e084:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2100      	movs	r1, #0
 800e08c:	4618      	mov	r0, r3
 800e08e:	f002 fa38 	bl	8010502 <SDIO_GetResponse>
 800e092:	4603      	mov	r3, r0
 800e094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e09c:	d102      	bne.n	800e0a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e09e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0a2:	e02f      	b.n	800e104 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e0a4:	f107 030c 	add.w	r3, r7, #12
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f82e 	bl	800e10c <SD_FindSCR>
 800e0b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d001      	beq.n	800e0bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	e023      	b.n	800e104 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d01c      	beq.n	800e100 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0ce:	041b      	lsls	r3, r3, #16
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	4610      	mov	r0, r2
 800e0d4:	f002 fb80 	bl	80107d8 <SDMMC_CmdAppCommand>
 800e0d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d001      	beq.n	800e0e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	e00f      	b.n	800e104 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f002 fbb9 	bl	8010862 <SDMMC_CmdBusWidth>
 800e0f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d001      	beq.n	800e0fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	e003      	b.n	800e104 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	e001      	b.n	800e104 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e100:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e104:	4618      	mov	r0, r3
 800e106:	3718      	adds	r7, #24
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e10c:	b590      	push	{r4, r7, lr}
 800e10e:	b08f      	sub	sp, #60	; 0x3c
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e116:	f7fb fd7b 	bl	8009c10 <HAL_GetTick>
 800e11a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e11c:	2300      	movs	r3, #0
 800e11e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e120:	2300      	movs	r3, #0
 800e122:	60bb      	str	r3, [r7, #8]
 800e124:	2300      	movs	r3, #0
 800e126:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2108      	movs	r1, #8
 800e132:	4618      	mov	r0, r3
 800e134:	f002 fa24 	bl	8010580 <SDMMC_CmdBlockLength>
 800e138:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e142:	e0a9      	b.n	800e298 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e14c:	041b      	lsls	r3, r3, #16
 800e14e:	4619      	mov	r1, r3
 800e150:	4610      	mov	r0, r2
 800e152:	f002 fb41 	bl	80107d8 <SDMMC_CmdAppCommand>
 800e156:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e160:	e09a      	b.n	800e298 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e162:	f04f 33ff 	mov.w	r3, #4294967295
 800e166:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e168:	2308      	movs	r3, #8
 800e16a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e16c:	2330      	movs	r3, #48	; 0x30
 800e16e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e170:	2302      	movs	r3, #2
 800e172:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e174:	2300      	movs	r3, #0
 800e176:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e178:	2301      	movs	r3, #1
 800e17a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f107 0210 	add.w	r2, r7, #16
 800e184:	4611      	mov	r1, r2
 800e186:	4618      	mov	r0, r3
 800e188:	f002 f9ce 	bl	8010528 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4618      	mov	r0, r3
 800e192:	f002 fb88 	bl	80108a6 <SDMMC_CmdSendSCR>
 800e196:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d022      	beq.n	800e1e4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a0:	e07a      	b.n	800e298 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00e      	beq.n	800e1ce <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6819      	ldr	r1, [r3, #0]
 800e1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	f107 0208 	add.w	r2, r7, #8
 800e1bc:	18d4      	adds	r4, r2, r3
 800e1be:	4608      	mov	r0, r1
 800e1c0:	f002 f92d 	bl	801041e <SDIO_ReadFIFO>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	6023      	str	r3, [r4, #0]
      index++;
 800e1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e1ce:	f7fb fd1f 	bl	8009c10 <HAL_GetTick>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1dc:	d102      	bne.n	800e1e4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e1de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e1e2:	e059      	b.n	800e298 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1ea:	f240 432a 	movw	r3, #1066	; 0x42a
 800e1ee:	4013      	ands	r3, r2
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d0d6      	beq.n	800e1a2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1fa:	f003 0308 	and.w	r3, r3, #8
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d005      	beq.n	800e20e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	2208      	movs	r2, #8
 800e208:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e20a:	2308      	movs	r3, #8
 800e20c:	e044      	b.n	800e298 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e214:	f003 0302 	and.w	r3, r3, #2
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d005      	beq.n	800e228 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	2202      	movs	r2, #2
 800e222:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e224:	2302      	movs	r3, #2
 800e226:	e037      	b.n	800e298 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e22e:	f003 0320 	and.w	r3, r3, #32
 800e232:	2b00      	cmp	r3, #0
 800e234:	d005      	beq.n	800e242 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2220      	movs	r2, #32
 800e23c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e23e:	2320      	movs	r3, #32
 800e240:	e02a      	b.n	800e298 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f240 523a 	movw	r2, #1338	; 0x53a
 800e24a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	061a      	lsls	r2, r3, #24
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	021b      	lsls	r3, r3, #8
 800e254:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e258:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	0a1b      	lsrs	r3, r3, #8
 800e25e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e262:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	0e1b      	lsrs	r3, r3, #24
 800e268:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	601a      	str	r2, [r3, #0]
    scr++;
 800e26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e270:	3304      	adds	r3, #4
 800e272:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	061a      	lsls	r2, r3, #24
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	021b      	lsls	r3, r3, #8
 800e27c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e280:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	0a1b      	lsrs	r3, r3, #8
 800e286:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e28a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	0e1b      	lsrs	r3, r3, #24
 800e290:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e294:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e296:	2300      	movs	r3, #0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	373c      	adds	r7, #60	; 0x3c
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd90      	pop	{r4, r7, pc}

0800e2a0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d03f      	beq.n	800e33a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	e033      	b.n	800e328 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f002 f8aa 	bl	801041e <SDIO_ReadFIFO>
 800e2ca:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	b2da      	uxtb	r2, r3
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	0a1b      	lsrs	r3, r3, #8
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	0c1b      	lsrs	r3, r3, #16
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	3301      	adds	r3, #1
 800e304:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	3b01      	subs	r3, #1
 800e30a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	0e1b      	lsrs	r3, r3, #24
 800e310:	b2da      	uxtb	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	3301      	adds	r3, #1
 800e31a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	3b01      	subs	r3, #1
 800e320:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	3301      	adds	r3, #1
 800e326:	617b      	str	r3, [r7, #20]
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	2b07      	cmp	r3, #7
 800e32c:	d9c8      	bls.n	800e2c0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	693a      	ldr	r2, [r7, #16]
 800e338:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e33a:	bf00      	nop
 800e33c:	3718      	adds	r7, #24
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b086      	sub	sp, #24
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6a1b      	ldr	r3, [r3, #32]
 800e34e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e354:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d043      	beq.n	800e3e4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e35c:	2300      	movs	r3, #0
 800e35e:	617b      	str	r3, [r7, #20]
 800e360:	e037      	b.n	800e3d2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	3301      	adds	r3, #1
 800e36c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	3b01      	subs	r3, #1
 800e372:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	021a      	lsls	r2, r3, #8
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	3301      	adds	r3, #1
 800e384:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	3b01      	subs	r3, #1
 800e38a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	041a      	lsls	r2, r3, #16
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	4313      	orrs	r3, r2
 800e396:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	3301      	adds	r3, #1
 800e39c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	061a      	lsls	r2, r3, #24
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f107 0208 	add.w	r2, r7, #8
 800e3c4:	4611      	mov	r1, r2
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f002 f836 	bl	8010438 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	617b      	str	r3, [r7, #20]
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	2b07      	cmp	r3, #7
 800e3d6:	d9c4      	bls.n	800e362 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e3e4:	bf00      	nop
 800e3e6:	3718      	adds	r7, #24
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d101      	bne.n	800e3fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e056      	b.n	800e4ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d106      	bne.n	800e41e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7f8 fe83 	bl	8007124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2202      	movs	r2, #2
 800e422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e434:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	685a      	ldr	r2, [r3, #4]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	431a      	orrs	r2, r3
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	68db      	ldr	r3, [r3, #12]
 800e444:	431a      	orrs	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	431a      	orrs	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	695b      	ldr	r3, [r3, #20]
 800e450:	431a      	orrs	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	699b      	ldr	r3, [r3, #24]
 800e456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e45a:	431a      	orrs	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	69db      	ldr	r3, [r3, #28]
 800e460:	431a      	orrs	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	6a1b      	ldr	r3, [r3, #32]
 800e466:	ea42 0103 	orr.w	r1, r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	430a      	orrs	r2, r1
 800e474:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	699b      	ldr	r3, [r3, #24]
 800e47a:	0c1b      	lsrs	r3, r3, #16
 800e47c:	f003 0104 	and.w	r1, r3, #4
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	430a      	orrs	r2, r1
 800e48a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	69da      	ldr	r2, [r3, #28]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e49a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e4aa:	2300      	movs	r3, #0
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	3708      	adds	r7, #8
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd80      	pop	{r7, pc}

0800e4b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b088      	sub	sp, #32
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	60f8      	str	r0, [r7, #12]
 800e4bc:	60b9      	str	r1, [r7, #8]
 800e4be:	603b      	str	r3, [r7, #0]
 800e4c0:	4613      	mov	r3, r2
 800e4c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d101      	bne.n	800e4d6 <HAL_SPI_Transmit+0x22>
 800e4d2:	2302      	movs	r3, #2
 800e4d4:	e11e      	b.n	800e714 <HAL_SPI_Transmit+0x260>
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2201      	movs	r2, #1
 800e4da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4de:	f7fb fb97 	bl	8009c10 <HAL_GetTick>
 800e4e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e4e4:	88fb      	ldrh	r3, [r7, #6]
 800e4e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d002      	beq.n	800e4fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e4f4:	2302      	movs	r3, #2
 800e4f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e4f8:	e103      	b.n	800e702 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d002      	beq.n	800e506 <HAL_SPI_Transmit+0x52>
 800e500:	88fb      	ldrh	r3, [r7, #6]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d102      	bne.n	800e50c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e506:	2301      	movs	r3, #1
 800e508:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e50a:	e0fa      	b.n	800e702 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2203      	movs	r2, #3
 800e510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2200      	movs	r2, #0
 800e518:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	88fa      	ldrh	r2, [r7, #6]
 800e524:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	88fa      	ldrh	r2, [r7, #6]
 800e52a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2200      	movs	r2, #0
 800e530:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2200      	movs	r2, #0
 800e536:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2200      	movs	r2, #0
 800e53c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2200      	movs	r2, #0
 800e542:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2200      	movs	r2, #0
 800e548:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	689b      	ldr	r3, [r3, #8]
 800e54e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e552:	d107      	bne.n	800e564 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e562:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e56e:	2b40      	cmp	r3, #64	; 0x40
 800e570:	d007      	beq.n	800e582 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e580:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e58a:	d14b      	bne.n	800e624 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <HAL_SPI_Transmit+0xe6>
 800e594:	8afb      	ldrh	r3, [r7, #22]
 800e596:	2b01      	cmp	r3, #1
 800e598:	d13e      	bne.n	800e618 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e59e:	881a      	ldrh	r2, [r3, #0]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5aa:	1c9a      	adds	r2, r3, #2
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	3b01      	subs	r3, #1
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e5be:	e02b      	b.n	800e618 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	689b      	ldr	r3, [r3, #8]
 800e5c6:	f003 0302 	and.w	r3, r3, #2
 800e5ca:	2b02      	cmp	r3, #2
 800e5cc:	d112      	bne.n	800e5f4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d2:	881a      	ldrh	r2, [r3, #0]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5de:	1c9a      	adds	r2, r3, #2
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	3b01      	subs	r3, #1
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	86da      	strh	r2, [r3, #54]	; 0x36
 800e5f2:	e011      	b.n	800e618 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5f4:	f7fb fb0c 	bl	8009c10 <HAL_GetTick>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	1ad3      	subs	r3, r2, r3
 800e5fe:	683a      	ldr	r2, [r7, #0]
 800e600:	429a      	cmp	r2, r3
 800e602:	d803      	bhi.n	800e60c <HAL_SPI_Transmit+0x158>
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e60a:	d102      	bne.n	800e612 <HAL_SPI_Transmit+0x15e>
 800e60c:	683b      	ldr	r3, [r7, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d102      	bne.n	800e618 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e612:	2303      	movs	r3, #3
 800e614:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e616:	e074      	b.n	800e702 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d1ce      	bne.n	800e5c0 <HAL_SPI_Transmit+0x10c>
 800e622:	e04c      	b.n	800e6be <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d002      	beq.n	800e632 <HAL_SPI_Transmit+0x17e>
 800e62c:	8afb      	ldrh	r3, [r7, #22]
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d140      	bne.n	800e6b4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	330c      	adds	r3, #12
 800e63c:	7812      	ldrb	r2, [r2, #0]
 800e63e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e644:	1c5a      	adds	r2, r3, #1
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e64e:	b29b      	uxth	r3, r3
 800e650:	3b01      	subs	r3, #1
 800e652:	b29a      	uxth	r2, r3
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e658:	e02c      	b.n	800e6b4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	f003 0302 	and.w	r3, r3, #2
 800e664:	2b02      	cmp	r3, #2
 800e666:	d113      	bne.n	800e690 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	330c      	adds	r3, #12
 800e672:	7812      	ldrb	r2, [r2, #0]
 800e674:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e67a:	1c5a      	adds	r2, r3, #1
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e684:	b29b      	uxth	r3, r3
 800e686:	3b01      	subs	r3, #1
 800e688:	b29a      	uxth	r2, r3
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e68e:	e011      	b.n	800e6b4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e690:	f7fb fabe 	bl	8009c10 <HAL_GetTick>
 800e694:	4602      	mov	r2, r0
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	1ad3      	subs	r3, r2, r3
 800e69a:	683a      	ldr	r2, [r7, #0]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d803      	bhi.n	800e6a8 <HAL_SPI_Transmit+0x1f4>
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a6:	d102      	bne.n	800e6ae <HAL_SPI_Transmit+0x1fa>
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d102      	bne.n	800e6b4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e6ae:	2303      	movs	r3, #3
 800e6b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e6b2:	e026      	b.n	800e702 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1cd      	bne.n	800e65a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e6be:	69ba      	ldr	r2, [r7, #24]
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f000 fba4 	bl	800ee10 <SPI_EndRxTxTransaction>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d002      	beq.n	800e6d4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2220      	movs	r2, #32
 800e6d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	689b      	ldr	r3, [r3, #8]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d10a      	bne.n	800e6f2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e6dc:	2300      	movs	r3, #0
 800e6de:	613b      	str	r3, [r7, #16]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	613b      	str	r3, [r7, #16]
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	613b      	str	r3, [r7, #16]
 800e6f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d002      	beq.n	800e700 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	77fb      	strb	r3, [r7, #31]
 800e6fe:	e000      	b.n	800e702 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e700:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2201      	movs	r2, #1
 800e706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2200      	movs	r2, #0
 800e70e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e712:	7ffb      	ldrb	r3, [r7, #31]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3720      	adds	r7, #32
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b088      	sub	sp, #32
 800e720:	af02      	add	r7, sp, #8
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	603b      	str	r3, [r7, #0]
 800e728:	4613      	mov	r3, r2
 800e72a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e72c:	2300      	movs	r3, #0
 800e72e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e738:	d112      	bne.n	800e760 <HAL_SPI_Receive+0x44>
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d10e      	bne.n	800e760 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2204      	movs	r2, #4
 800e746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e74a:	88fa      	ldrh	r2, [r7, #6]
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	4613      	mov	r3, r2
 800e752:	68ba      	ldr	r2, [r7, #8]
 800e754:	68b9      	ldr	r1, [r7, #8]
 800e756:	68f8      	ldr	r0, [r7, #12]
 800e758:	f000 f8e9 	bl	800e92e <HAL_SPI_TransmitReceive>
 800e75c:	4603      	mov	r3, r0
 800e75e:	e0e2      	b.n	800e926 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e766:	2b01      	cmp	r3, #1
 800e768:	d101      	bne.n	800e76e <HAL_SPI_Receive+0x52>
 800e76a:	2302      	movs	r3, #2
 800e76c:	e0db      	b.n	800e926 <HAL_SPI_Receive+0x20a>
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2201      	movs	r2, #1
 800e772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e776:	f7fb fa4b 	bl	8009c10 <HAL_GetTick>
 800e77a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e782:	b2db      	uxtb	r3, r3
 800e784:	2b01      	cmp	r3, #1
 800e786:	d002      	beq.n	800e78e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e788:	2302      	movs	r3, #2
 800e78a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e78c:	e0c2      	b.n	800e914 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d002      	beq.n	800e79a <HAL_SPI_Receive+0x7e>
 800e794:	88fb      	ldrh	r3, [r7, #6]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d102      	bne.n	800e7a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e79a:	2301      	movs	r3, #1
 800e79c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e79e:	e0b9      	b.n	800e914 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2204      	movs	r2, #4
 800e7a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	88fa      	ldrh	r2, [r7, #6]
 800e7b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	88fa      	ldrh	r2, [r7, #6]
 800e7be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	689b      	ldr	r3, [r3, #8]
 800e7e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7e6:	d107      	bne.n	800e7f8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e7f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e802:	2b40      	cmp	r3, #64	; 0x40
 800e804:	d007      	beq.n	800e816 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	681a      	ldr	r2, [r3, #0]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e814:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d162      	bne.n	800e8e4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e81e:	e02e      	b.n	800e87e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	689b      	ldr	r3, [r3, #8]
 800e826:	f003 0301 	and.w	r3, r3, #1
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d115      	bne.n	800e85a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f103 020c 	add.w	r2, r3, #12
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83a:	7812      	ldrb	r2, [r2, #0]
 800e83c:	b2d2      	uxtb	r2, r2
 800e83e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e844:	1c5a      	adds	r2, r3, #1
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e84e:	b29b      	uxth	r3, r3
 800e850:	3b01      	subs	r3, #1
 800e852:	b29a      	uxth	r2, r3
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e858:	e011      	b.n	800e87e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e85a:	f7fb f9d9 	bl	8009c10 <HAL_GetTick>
 800e85e:	4602      	mov	r2, r0
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	683a      	ldr	r2, [r7, #0]
 800e866:	429a      	cmp	r2, r3
 800e868:	d803      	bhi.n	800e872 <HAL_SPI_Receive+0x156>
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e870:	d102      	bne.n	800e878 <HAL_SPI_Receive+0x15c>
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d102      	bne.n	800e87e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e878:	2303      	movs	r3, #3
 800e87a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e87c:	e04a      	b.n	800e914 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e882:	b29b      	uxth	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	d1cb      	bne.n	800e820 <HAL_SPI_Receive+0x104>
 800e888:	e031      	b.n	800e8ee <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	f003 0301 	and.w	r3, r3, #1
 800e894:	2b01      	cmp	r3, #1
 800e896:	d113      	bne.n	800e8c0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	68da      	ldr	r2, [r3, #12]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a2:	b292      	uxth	r2, r2
 800e8a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8aa:	1c9a      	adds	r2, r3, #2
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	3b01      	subs	r3, #1
 800e8b8:	b29a      	uxth	r2, r3
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e8be:	e011      	b.n	800e8e4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8c0:	f7fb f9a6 	bl	8009c10 <HAL_GetTick>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	1ad3      	subs	r3, r2, r3
 800e8ca:	683a      	ldr	r2, [r7, #0]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d803      	bhi.n	800e8d8 <HAL_SPI_Receive+0x1bc>
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d6:	d102      	bne.n	800e8de <HAL_SPI_Receive+0x1c2>
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d102      	bne.n	800e8e4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e8de:	2303      	movs	r3, #3
 800e8e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e8e2:	e017      	b.n	800e914 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d1cd      	bne.n	800e88a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e8ee:	693a      	ldr	r2, [r7, #16]
 800e8f0:	6839      	ldr	r1, [r7, #0]
 800e8f2:	68f8      	ldr	r0, [r7, #12]
 800e8f4:	f000 fa27 	bl	800ed46 <SPI_EndRxTransaction>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d002      	beq.n	800e904 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2220      	movs	r2, #32
 800e902:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d002      	beq.n	800e912 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e90c:	2301      	movs	r3, #1
 800e90e:	75fb      	strb	r3, [r7, #23]
 800e910:	e000      	b.n	800e914 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e912:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2201      	movs	r2, #1
 800e918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2200      	movs	r2, #0
 800e920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e924:	7dfb      	ldrb	r3, [r7, #23]
}
 800e926:	4618      	mov	r0, r3
 800e928:	3718      	adds	r7, #24
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b08c      	sub	sp, #48	; 0x30
 800e932:	af00      	add	r7, sp, #0
 800e934:	60f8      	str	r0, [r7, #12]
 800e936:	60b9      	str	r1, [r7, #8]
 800e938:	607a      	str	r2, [r7, #4]
 800e93a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e93c:	2301      	movs	r3, #1
 800e93e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e940:	2300      	movs	r3, #0
 800e942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d101      	bne.n	800e954 <HAL_SPI_TransmitReceive+0x26>
 800e950:	2302      	movs	r3, #2
 800e952:	e18a      	b.n	800ec6a <HAL_SPI_TransmitReceive+0x33c>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2201      	movs	r2, #1
 800e958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e95c:	f7fb f958 	bl	8009c10 <HAL_GetTick>
 800e960:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e972:	887b      	ldrh	r3, [r7, #2]
 800e974:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d00f      	beq.n	800e99e <HAL_SPI_TransmitReceive+0x70>
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e984:	d107      	bne.n	800e996 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	689b      	ldr	r3, [r3, #8]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d103      	bne.n	800e996 <HAL_SPI_TransmitReceive+0x68>
 800e98e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e992:	2b04      	cmp	r3, #4
 800e994:	d003      	beq.n	800e99e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e996:	2302      	movs	r3, #2
 800e998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e99c:	e15b      	b.n	800ec56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d005      	beq.n	800e9b0 <HAL_SPI_TransmitReceive+0x82>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d002      	beq.n	800e9b0 <HAL_SPI_TransmitReceive+0x82>
 800e9aa:	887b      	ldrh	r3, [r7, #2]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d103      	bne.n	800e9b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e9b6:	e14e      	b.n	800ec56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	2b04      	cmp	r3, #4
 800e9c2:	d003      	beq.n	800e9cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	2205      	movs	r2, #5
 800e9c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	887a      	ldrh	r2, [r7, #2]
 800e9dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	887a      	ldrh	r2, [r7, #2]
 800e9e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	68ba      	ldr	r2, [r7, #8]
 800e9e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	887a      	ldrh	r2, [r7, #2]
 800e9ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	887a      	ldrh	r2, [r7, #2]
 800e9f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea0c:	2b40      	cmp	r3, #64	; 0x40
 800ea0e:	d007      	beq.n	800ea20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea28:	d178      	bne.n	800eb1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d002      	beq.n	800ea38 <HAL_SPI_TransmitReceive+0x10a>
 800ea32:	8b7b      	ldrh	r3, [r7, #26]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d166      	bne.n	800eb06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea3c:	881a      	ldrh	r2, [r3, #0]
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea48:	1c9a      	adds	r2, r3, #2
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	3b01      	subs	r3, #1
 800ea56:	b29a      	uxth	r2, r3
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea5c:	e053      	b.n	800eb06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	689b      	ldr	r3, [r3, #8]
 800ea64:	f003 0302 	and.w	r3, r3, #2
 800ea68:	2b02      	cmp	r3, #2
 800ea6a:	d11b      	bne.n	800eaa4 <HAL_SPI_TransmitReceive+0x176>
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d016      	beq.n	800eaa4 <HAL_SPI_TransmitReceive+0x176>
 800ea76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d113      	bne.n	800eaa4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea80:	881a      	ldrh	r2, [r3, #0]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea8c:	1c9a      	adds	r2, r3, #2
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	3b01      	subs	r3, #1
 800ea9a:	b29a      	uxth	r2, r3
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	f003 0301 	and.w	r3, r3, #1
 800eaae:	2b01      	cmp	r3, #1
 800eab0:	d119      	bne.n	800eae6 <HAL_SPI_TransmitReceive+0x1b8>
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d014      	beq.n	800eae6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	68da      	ldr	r2, [r3, #12]
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac6:	b292      	uxth	r2, r2
 800eac8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eace:	1c9a      	adds	r2, r3, #2
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ead8:	b29b      	uxth	r3, r3
 800eada:	3b01      	subs	r3, #1
 800eadc:	b29a      	uxth	r2, r3
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eae2:	2301      	movs	r3, #1
 800eae4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800eae6:	f7fb f893 	bl	8009c10 <HAL_GetTick>
 800eaea:	4602      	mov	r2, r0
 800eaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaee:	1ad3      	subs	r3, r2, r3
 800eaf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d807      	bhi.n	800eb06 <HAL_SPI_TransmitReceive+0x1d8>
 800eaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eafc:	d003      	beq.n	800eb06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800eafe:	2303      	movs	r3, #3
 800eb00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eb04:	e0a7      	b.n	800ec56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d1a6      	bne.n	800ea5e <HAL_SPI_TransmitReceive+0x130>
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d1a1      	bne.n	800ea5e <HAL_SPI_TransmitReceive+0x130>
 800eb1a:	e07c      	b.n	800ec16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d002      	beq.n	800eb2a <HAL_SPI_TransmitReceive+0x1fc>
 800eb24:	8b7b      	ldrh	r3, [r7, #26]
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d16b      	bne.n	800ec02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	330c      	adds	r3, #12
 800eb34:	7812      	ldrb	r2, [r2, #0]
 800eb36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb3c:	1c5a      	adds	r2, r3, #1
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	3b01      	subs	r3, #1
 800eb4a:	b29a      	uxth	r2, r3
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb50:	e057      	b.n	800ec02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	f003 0302 	and.w	r3, r3, #2
 800eb5c:	2b02      	cmp	r3, #2
 800eb5e:	d11c      	bne.n	800eb9a <HAL_SPI_TransmitReceive+0x26c>
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d017      	beq.n	800eb9a <HAL_SPI_TransmitReceive+0x26c>
 800eb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d114      	bne.n	800eb9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	330c      	adds	r3, #12
 800eb7a:	7812      	ldrb	r2, [r2, #0]
 800eb7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb82:	1c5a      	adds	r2, r3, #1
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	3b01      	subs	r3, #1
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eb96:	2300      	movs	r3, #0
 800eb98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	f003 0301 	and.w	r3, r3, #1
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d119      	bne.n	800ebdc <HAL_SPI_TransmitReceive+0x2ae>
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d014      	beq.n	800ebdc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	68da      	ldr	r2, [r3, #12]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebbc:	b2d2      	uxtb	r2, r2
 800ebbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebc4:	1c5a      	adds	r2, r3, #1
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ebdc:	f7fb f818 	bl	8009c10 <HAL_GetTick>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe4:	1ad3      	subs	r3, r2, r3
 800ebe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d803      	bhi.n	800ebf4 <HAL_SPI_TransmitReceive+0x2c6>
 800ebec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebf2:	d102      	bne.n	800ebfa <HAL_SPI_TransmitReceive+0x2cc>
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d103      	bne.n	800ec02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ebfa:	2303      	movs	r3, #3
 800ebfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ec00:	e029      	b.n	800ec56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1a2      	bne.n	800eb52 <HAL_SPI_TransmitReceive+0x224>
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d19d      	bne.n	800eb52 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ec16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	f000 f8f8 	bl	800ee10 <SPI_EndRxTxTransaction>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d006      	beq.n	800ec34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ec26:	2301      	movs	r3, #1
 800ec28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2220      	movs	r2, #32
 800ec30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ec32:	e010      	b.n	800ec56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d10b      	bne.n	800ec54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	617b      	str	r3, [r7, #20]
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	68db      	ldr	r3, [r3, #12]
 800ec46:	617b      	str	r3, [r7, #20]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	617b      	str	r3, [r7, #20]
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	e000      	b.n	800ec56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ec54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2200      	movs	r2, #0
 800ec62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ec66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3730      	adds	r7, #48	; 0x30
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b084      	sub	sp, #16
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	60f8      	str	r0, [r7, #12]
 800ec7a:	60b9      	str	r1, [r7, #8]
 800ec7c:	603b      	str	r3, [r7, #0]
 800ec7e:	4613      	mov	r3, r2
 800ec80:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ec82:	e04c      	b.n	800ed1e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec8a:	d048      	beq.n	800ed1e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ec8c:	f7fa ffc0 	bl	8009c10 <HAL_GetTick>
 800ec90:	4602      	mov	r2, r0
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	683a      	ldr	r2, [r7, #0]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d902      	bls.n	800eca2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d13d      	bne.n	800ed1e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	685a      	ldr	r2, [r3, #4]
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ecb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ecba:	d111      	bne.n	800ece0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecc4:	d004      	beq.n	800ecd0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ecce:	d107      	bne.n	800ece0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ecde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ece8:	d10f      	bne.n	800ed0a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	681a      	ldr	r2, [r3, #0]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ecf8:	601a      	str	r2, [r3, #0]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ed08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2200      	movs	r2, #0
 800ed16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ed1a:	2303      	movs	r3, #3
 800ed1c:	e00f      	b.n	800ed3e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	689a      	ldr	r2, [r3, #8]
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	4013      	ands	r3, r2
 800ed28:	68ba      	ldr	r2, [r7, #8]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	bf0c      	ite	eq
 800ed2e:	2301      	moveq	r3, #1
 800ed30:	2300      	movne	r3, #0
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	461a      	mov	r2, r3
 800ed36:	79fb      	ldrb	r3, [r7, #7]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d1a3      	bne.n	800ec84 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ed3c:	2300      	movs	r3, #0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}

0800ed46 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ed46:	b580      	push	{r7, lr}
 800ed48:	b086      	sub	sp, #24
 800ed4a:	af02      	add	r7, sp, #8
 800ed4c:	60f8      	str	r0, [r7, #12]
 800ed4e:	60b9      	str	r1, [r7, #8]
 800ed50:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed5a:	d111      	bne.n	800ed80 <SPI_EndRxTransaction+0x3a>
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	689b      	ldr	r3, [r3, #8]
 800ed60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed64:	d004      	beq.n	800ed70 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed6e:	d107      	bne.n	800ed80 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	681a      	ldr	r2, [r3, #0]
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed7e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed88:	d12a      	bne.n	800ede0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed92:	d012      	beq.n	800edba <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	2180      	movs	r1, #128	; 0x80
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f7ff ff67 	bl	800ec72 <SPI_WaitFlagStateUntilTimeout>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d02d      	beq.n	800ee06 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edae:	f043 0220 	orr.w	r2, r3, #32
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800edb6:	2303      	movs	r3, #3
 800edb8:	e026      	b.n	800ee08 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	9300      	str	r3, [sp, #0]
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	2200      	movs	r2, #0
 800edc2:	2101      	movs	r1, #1
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	f7ff ff54 	bl	800ec72 <SPI_WaitFlagStateUntilTimeout>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d01a      	beq.n	800ee06 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edd4:	f043 0220 	orr.w	r2, r3, #32
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eddc:	2303      	movs	r3, #3
 800edde:	e013      	b.n	800ee08 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	2200      	movs	r2, #0
 800ede8:	2101      	movs	r1, #1
 800edea:	68f8      	ldr	r0, [r7, #12]
 800edec:	f7ff ff41 	bl	800ec72 <SPI_WaitFlagStateUntilTimeout>
 800edf0:	4603      	mov	r3, r0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d007      	beq.n	800ee06 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edfa:	f043 0220 	orr.w	r2, r3, #32
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ee02:	2303      	movs	r3, #3
 800ee04:	e000      	b.n	800ee08 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b088      	sub	sp, #32
 800ee14:	af02      	add	r7, sp, #8
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ee1c:	4b1b      	ldr	r3, [pc, #108]	; (800ee8c <SPI_EndRxTxTransaction+0x7c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a1b      	ldr	r2, [pc, #108]	; (800ee90 <SPI_EndRxTxTransaction+0x80>)
 800ee22:	fba2 2303 	umull	r2, r3, r2, r3
 800ee26:	0d5b      	lsrs	r3, r3, #21
 800ee28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ee2c:	fb02 f303 	mul.w	r3, r2, r3
 800ee30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee3a:	d112      	bne.n	800ee62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	9300      	str	r3, [sp, #0]
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	2200      	movs	r2, #0
 800ee44:	2180      	movs	r1, #128	; 0x80
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f7ff ff13 	bl	800ec72 <SPI_WaitFlagStateUntilTimeout>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d016      	beq.n	800ee80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee56:	f043 0220 	orr.w	r2, r3, #32
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ee5e:	2303      	movs	r3, #3
 800ee60:	e00f      	b.n	800ee82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d00a      	beq.n	800ee7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	3b01      	subs	r3, #1
 800ee6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	689b      	ldr	r3, [r3, #8]
 800ee74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee78:	2b80      	cmp	r3, #128	; 0x80
 800ee7a:	d0f2      	beq.n	800ee62 <SPI_EndRxTxTransaction+0x52>
 800ee7c:	e000      	b.n	800ee80 <SPI_EndRxTxTransaction+0x70>
        break;
 800ee7e:	bf00      	nop
  }

  return HAL_OK;
 800ee80:	2300      	movs	r3, #0
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3718      	adds	r7, #24
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	20000000 	.word	0x20000000
 800ee90:	165e9f81 	.word	0x165e9f81

0800ee94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d101      	bne.n	800eea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eea2:	2301      	movs	r3, #1
 800eea4:	e01d      	b.n	800eee2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eeac:	b2db      	uxtb	r3, r3
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d106      	bne.n	800eec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7f8 f9ee 	bl	800729c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2202      	movs	r2, #2
 800eec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	3304      	adds	r3, #4
 800eed0:	4619      	mov	r1, r3
 800eed2:	4610      	mov	r0, r2
 800eed4:	f000 fb56 	bl	800f584 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2201      	movs	r2, #1
 800eedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eee0:	2300      	movs	r3, #0
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3708      	adds	r7, #8
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eeea:	b480      	push	{r7}
 800eeec:	b085      	sub	sp, #20
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	68da      	ldr	r2, [r3, #12]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f042 0201 	orr.w	r2, r2, #1
 800ef00:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	f003 0307 	and.w	r3, r3, #7
 800ef0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	2b06      	cmp	r3, #6
 800ef12:	d007      	beq.n	800ef24 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f042 0201 	orr.w	r2, r2, #1
 800ef22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ef24:	2300      	movs	r3, #0
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3714      	adds	r7, #20
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr

0800ef32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b082      	sub	sp, #8
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d101      	bne.n	800ef44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ef40:	2301      	movs	r3, #1
 800ef42:	e01d      	b.n	800ef80 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d106      	bne.n	800ef5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f7f8 f92b 	bl	80071b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2202      	movs	r2, #2
 800ef62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	4619      	mov	r1, r3
 800ef70:	4610      	mov	r0, r2
 800ef72:	f000 fb07 	bl	800f584 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2201      	movs	r2, #1
 800ef7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef7e:	2300      	movs	r3, #0
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2201      	movs	r2, #1
 800ef98:	6839      	ldr	r1, [r7, #0]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f000 fd42 	bl	800fa24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a15      	ldr	r2, [pc, #84]	; (800effc <HAL_TIM_PWM_Start+0x74>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d004      	beq.n	800efb4 <HAL_TIM_PWM_Start+0x2c>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	4a14      	ldr	r2, [pc, #80]	; (800f000 <HAL_TIM_PWM_Start+0x78>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d101      	bne.n	800efb8 <HAL_TIM_PWM_Start+0x30>
 800efb4:	2301      	movs	r3, #1
 800efb6:	e000      	b.n	800efba <HAL_TIM_PWM_Start+0x32>
 800efb8:	2300      	movs	r3, #0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d007      	beq.n	800efce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800efcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	f003 0307 	and.w	r3, r3, #7
 800efd8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2b06      	cmp	r3, #6
 800efde:	d007      	beq.n	800eff0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f042 0201 	orr.w	r2, r2, #1
 800efee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eff0:	2300      	movs	r3, #0
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	40010000 	.word	0x40010000
 800f000:	40010400 	.word	0x40010400

0800f004 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b086      	sub	sp, #24
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d101      	bne.n	800f018 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f014:	2301      	movs	r3, #1
 800f016:	e083      	b.n	800f120 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	2b00      	cmp	r3, #0
 800f022:	d106      	bne.n	800f032 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2200      	movs	r2, #0
 800f028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7f8 f9c5 	bl	80073bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2202      	movs	r2, #2
 800f036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	6812      	ldr	r2, [r2, #0]
 800f044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f048:	f023 0307 	bic.w	r3, r3, #7
 800f04c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	3304      	adds	r3, #4
 800f056:	4619      	mov	r1, r3
 800f058:	4610      	mov	r0, r2
 800f05a:	f000 fa93 	bl	800f584 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	699b      	ldr	r3, [r3, #24]
 800f06c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	6a1b      	ldr	r3, [r3, #32]
 800f074:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	697a      	ldr	r2, [r7, #20]
 800f07c:	4313      	orrs	r3, r2
 800f07e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f086:	f023 0303 	bic.w	r3, r3, #3
 800f08a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	689a      	ldr	r2, [r3, #8]
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	699b      	ldr	r3, [r3, #24]
 800f094:	021b      	lsls	r3, r3, #8
 800f096:	4313      	orrs	r3, r2
 800f098:	693a      	ldr	r2, [r7, #16]
 800f09a:	4313      	orrs	r3, r2
 800f09c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f0a4:	f023 030c 	bic.w	r3, r3, #12
 800f0a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f0b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f0b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	68da      	ldr	r2, [r3, #12]
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	69db      	ldr	r3, [r3, #28]
 800f0be:	021b      	lsls	r3, r3, #8
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	693a      	ldr	r2, [r7, #16]
 800f0c4:	4313      	orrs	r3, r2
 800f0c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	691b      	ldr	r3, [r3, #16]
 800f0cc:	011a      	lsls	r2, r3, #4
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	6a1b      	ldr	r3, [r3, #32]
 800f0d2:	031b      	lsls	r3, r3, #12
 800f0d4:	4313      	orrs	r3, r2
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f0e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f0ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	685a      	ldr	r2, [r3, #4]
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	695b      	ldr	r3, [r3, #20]
 800f0f4:	011b      	lsls	r3, r3, #4
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	68fa      	ldr	r2, [r7, #12]
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	697a      	ldr	r2, [r7, #20]
 800f104:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	693a      	ldr	r2, [r7, #16]
 800f10c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	68fa      	ldr	r2, [r7, #12]
 800f114:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2201      	movs	r2, #1
 800f11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f11e:	2300      	movs	r3, #0
}
 800f120:	4618      	mov	r0, r3
 800f122:	3718      	adds	r7, #24
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d002      	beq.n	800f13e <HAL_TIM_Encoder_Start+0x16>
 800f138:	2b04      	cmp	r3, #4
 800f13a:	d008      	beq.n	800f14e <HAL_TIM_Encoder_Start+0x26>
 800f13c:	e00f      	b.n	800f15e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2201      	movs	r2, #1
 800f144:	2100      	movs	r1, #0
 800f146:	4618      	mov	r0, r3
 800f148:	f000 fc6c 	bl	800fa24 <TIM_CCxChannelCmd>
      break;
 800f14c:	e016      	b.n	800f17c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2201      	movs	r2, #1
 800f154:	2104      	movs	r1, #4
 800f156:	4618      	mov	r0, r3
 800f158:	f000 fc64 	bl	800fa24 <TIM_CCxChannelCmd>
      break;
 800f15c:	e00e      	b.n	800f17c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2201      	movs	r2, #1
 800f164:	2100      	movs	r1, #0
 800f166:	4618      	mov	r0, r3
 800f168:	f000 fc5c 	bl	800fa24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2201      	movs	r2, #1
 800f172:	2104      	movs	r1, #4
 800f174:	4618      	mov	r0, r3
 800f176:	f000 fc55 	bl	800fa24 <TIM_CCxChannelCmd>
      break;
 800f17a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	681a      	ldr	r2, [r3, #0]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f042 0201 	orr.w	r2, r2, #1
 800f18a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f18c:	2300      	movs	r3, #0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3708      	adds	r7, #8
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b082      	sub	sp, #8
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	691b      	ldr	r3, [r3, #16]
 800f1a4:	f003 0302 	and.w	r3, r3, #2
 800f1a8:	2b02      	cmp	r3, #2
 800f1aa:	d122      	bne.n	800f1f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	f003 0302 	and.w	r3, r3, #2
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	d11b      	bne.n	800f1f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f06f 0202 	mvn.w	r2, #2
 800f1c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	699b      	ldr	r3, [r3, #24]
 800f1d0:	f003 0303 	and.w	r3, r3, #3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d003      	beq.n	800f1e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 f9b5 	bl	800f548 <HAL_TIM_IC_CaptureCallback>
 800f1de:	e005      	b.n	800f1ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 f9a7 	bl	800f534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 f9b8 	bl	800f55c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	691b      	ldr	r3, [r3, #16]
 800f1f8:	f003 0304 	and.w	r3, r3, #4
 800f1fc:	2b04      	cmp	r3, #4
 800f1fe:	d122      	bne.n	800f246 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	f003 0304 	and.w	r3, r3, #4
 800f20a:	2b04      	cmp	r3, #4
 800f20c:	d11b      	bne.n	800f246 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f06f 0204 	mvn.w	r2, #4
 800f216:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2202      	movs	r2, #2
 800f21c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	699b      	ldr	r3, [r3, #24]
 800f224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d003      	beq.n	800f234 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 f98b 	bl	800f548 <HAL_TIM_IC_CaptureCallback>
 800f232:	e005      	b.n	800f240 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f000 f97d 	bl	800f534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 f98e 	bl	800f55c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	691b      	ldr	r3, [r3, #16]
 800f24c:	f003 0308 	and.w	r3, r3, #8
 800f250:	2b08      	cmp	r3, #8
 800f252:	d122      	bne.n	800f29a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	f003 0308 	and.w	r3, r3, #8
 800f25e:	2b08      	cmp	r3, #8
 800f260:	d11b      	bne.n	800f29a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f06f 0208 	mvn.w	r2, #8
 800f26a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2204      	movs	r2, #4
 800f270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	69db      	ldr	r3, [r3, #28]
 800f278:	f003 0303 	and.w	r3, r3, #3
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d003      	beq.n	800f288 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f000 f961 	bl	800f548 <HAL_TIM_IC_CaptureCallback>
 800f286:	e005      	b.n	800f294 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 f953 	bl	800f534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f964 	bl	800f55c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	691b      	ldr	r3, [r3, #16]
 800f2a0:	f003 0310 	and.w	r3, r3, #16
 800f2a4:	2b10      	cmp	r3, #16
 800f2a6:	d122      	bne.n	800f2ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	68db      	ldr	r3, [r3, #12]
 800f2ae:	f003 0310 	and.w	r3, r3, #16
 800f2b2:	2b10      	cmp	r3, #16
 800f2b4:	d11b      	bne.n	800f2ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f06f 0210 	mvn.w	r2, #16
 800f2be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2208      	movs	r2, #8
 800f2c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	69db      	ldr	r3, [r3, #28]
 800f2cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d003      	beq.n	800f2dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f000 f937 	bl	800f548 <HAL_TIM_IC_CaptureCallback>
 800f2da:	e005      	b.n	800f2e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f000 f929 	bl	800f534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 f93a 	bl	800f55c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	f003 0301 	and.w	r3, r3, #1
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d10e      	bne.n	800f31a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	f003 0301 	and.w	r3, r3, #1
 800f306:	2b01      	cmp	r3, #1
 800f308:	d107      	bne.n	800f31a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f06f 0201 	mvn.w	r2, #1
 800f312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f7f6 fd3b 	bl	8005d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	691b      	ldr	r3, [r3, #16]
 800f320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f324:	2b80      	cmp	r3, #128	; 0x80
 800f326:	d10e      	bne.n	800f346 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f332:	2b80      	cmp	r3, #128	; 0x80
 800f334:	d107      	bne.n	800f346 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f33e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 fc6d 	bl	800fc20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f350:	2b40      	cmp	r3, #64	; 0x40
 800f352:	d10e      	bne.n	800f372 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f35e:	2b40      	cmp	r3, #64	; 0x40
 800f360:	d107      	bne.n	800f372 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f36a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 f8ff 	bl	800f570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	691b      	ldr	r3, [r3, #16]
 800f378:	f003 0320 	and.w	r3, r3, #32
 800f37c:	2b20      	cmp	r3, #32
 800f37e:	d10e      	bne.n	800f39e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	68db      	ldr	r3, [r3, #12]
 800f386:	f003 0320 	and.w	r3, r3, #32
 800f38a:	2b20      	cmp	r3, #32
 800f38c:	d107      	bne.n	800f39e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f06f 0220 	mvn.w	r2, #32
 800f396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 fc37 	bl	800fc0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f39e:	bf00      	nop
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
	...

0800f3a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d101      	bne.n	800f3c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f3be:	2302      	movs	r3, #2
 800f3c0:	e0b4      	b.n	800f52c <HAL_TIM_PWM_ConfigChannel+0x184>
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2202      	movs	r2, #2
 800f3ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2b0c      	cmp	r3, #12
 800f3d6:	f200 809f 	bhi.w	800f518 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f3da:	a201      	add	r2, pc, #4	; (adr r2, 800f3e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3e0:	0800f415 	.word	0x0800f415
 800f3e4:	0800f519 	.word	0x0800f519
 800f3e8:	0800f519 	.word	0x0800f519
 800f3ec:	0800f519 	.word	0x0800f519
 800f3f0:	0800f455 	.word	0x0800f455
 800f3f4:	0800f519 	.word	0x0800f519
 800f3f8:	0800f519 	.word	0x0800f519
 800f3fc:	0800f519 	.word	0x0800f519
 800f400:	0800f497 	.word	0x0800f497
 800f404:	0800f519 	.word	0x0800f519
 800f408:	0800f519 	.word	0x0800f519
 800f40c:	0800f519 	.word	0x0800f519
 800f410:	0800f4d7 	.word	0x0800f4d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	68b9      	ldr	r1, [r7, #8]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 f952 	bl	800f6c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	699a      	ldr	r2, [r3, #24]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f042 0208 	orr.w	r2, r2, #8
 800f42e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	699a      	ldr	r2, [r3, #24]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f022 0204 	bic.w	r2, r2, #4
 800f43e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	6999      	ldr	r1, [r3, #24]
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	691a      	ldr	r2, [r3, #16]
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	430a      	orrs	r2, r1
 800f450:	619a      	str	r2, [r3, #24]
      break;
 800f452:	e062      	b.n	800f51a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68b9      	ldr	r1, [r7, #8]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 f9a2 	bl	800f7a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	699a      	ldr	r2, [r3, #24]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f46e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	699a      	ldr	r2, [r3, #24]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f47e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	6999      	ldr	r1, [r3, #24]
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	691b      	ldr	r3, [r3, #16]
 800f48a:	021a      	lsls	r2, r3, #8
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	430a      	orrs	r2, r1
 800f492:	619a      	str	r2, [r3, #24]
      break;
 800f494:	e041      	b.n	800f51a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	68b9      	ldr	r1, [r7, #8]
 800f49c:	4618      	mov	r0, r3
 800f49e:	f000 f9f7 	bl	800f890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	69da      	ldr	r2, [r3, #28]
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f042 0208 	orr.w	r2, r2, #8
 800f4b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	69da      	ldr	r2, [r3, #28]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	f022 0204 	bic.w	r2, r2, #4
 800f4c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	69d9      	ldr	r1, [r3, #28]
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	691a      	ldr	r2, [r3, #16]
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	430a      	orrs	r2, r1
 800f4d2:	61da      	str	r2, [r3, #28]
      break;
 800f4d4:	e021      	b.n	800f51a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	68b9      	ldr	r1, [r7, #8]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f000 fa4b 	bl	800f978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	69da      	ldr	r2, [r3, #28]
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f4f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	69da      	ldr	r2, [r3, #28]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	69d9      	ldr	r1, [r3, #28]
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	691b      	ldr	r3, [r3, #16]
 800f50c:	021a      	lsls	r2, r3, #8
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	430a      	orrs	r2, r1
 800f514:	61da      	str	r2, [r3, #28]
      break;
 800f516:	e000      	b.n	800f51a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f518:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2201      	movs	r2, #1
 800f51e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2200      	movs	r2, #0
 800f526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f52a:	2300      	movs	r3, #0
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f53c:	bf00      	nop
 800f53e:	370c      	adds	r7, #12
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f564:	bf00      	nop
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4a40      	ldr	r2, [pc, #256]	; (800f698 <TIM_Base_SetConfig+0x114>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d013      	beq.n	800f5c4 <TIM_Base_SetConfig+0x40>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5a2:	d00f      	beq.n	800f5c4 <TIM_Base_SetConfig+0x40>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4a3d      	ldr	r2, [pc, #244]	; (800f69c <TIM_Base_SetConfig+0x118>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d00b      	beq.n	800f5c4 <TIM_Base_SetConfig+0x40>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4a3c      	ldr	r2, [pc, #240]	; (800f6a0 <TIM_Base_SetConfig+0x11c>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d007      	beq.n	800f5c4 <TIM_Base_SetConfig+0x40>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4a3b      	ldr	r2, [pc, #236]	; (800f6a4 <TIM_Base_SetConfig+0x120>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d003      	beq.n	800f5c4 <TIM_Base_SetConfig+0x40>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4a3a      	ldr	r2, [pc, #232]	; (800f6a8 <TIM_Base_SetConfig+0x124>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d108      	bne.n	800f5d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	68fa      	ldr	r2, [r7, #12]
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4a2f      	ldr	r2, [pc, #188]	; (800f698 <TIM_Base_SetConfig+0x114>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d02b      	beq.n	800f636 <TIM_Base_SetConfig+0xb2>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5e4:	d027      	beq.n	800f636 <TIM_Base_SetConfig+0xb2>
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4a2c      	ldr	r2, [pc, #176]	; (800f69c <TIM_Base_SetConfig+0x118>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d023      	beq.n	800f636 <TIM_Base_SetConfig+0xb2>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	4a2b      	ldr	r2, [pc, #172]	; (800f6a0 <TIM_Base_SetConfig+0x11c>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d01f      	beq.n	800f636 <TIM_Base_SetConfig+0xb2>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a2a      	ldr	r2, [pc, #168]	; (800f6a4 <TIM_Base_SetConfig+0x120>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d01b      	beq.n	800f636 <TIM_Base_SetConfig+0xb2>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4a29      	ldr	r2, [pc, #164]	; (800f6a8 <TIM_Base_SetConfig+0x124>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d017      	beq.n	800f636 <TIM_Base_SetConfig+0xb2>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4a28      	ldr	r2, [pc, #160]	; (800f6ac <TIM_Base_SetConfig+0x128>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d013      	beq.n	800f636 <TIM_Base_SetConfig+0xb2>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	4a27      	ldr	r2, [pc, #156]	; (800f6b0 <TIM_Base_SetConfig+0x12c>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d00f      	beq.n	800f636 <TIM_Base_SetConfig+0xb2>
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4a26      	ldr	r2, [pc, #152]	; (800f6b4 <TIM_Base_SetConfig+0x130>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d00b      	beq.n	800f636 <TIM_Base_SetConfig+0xb2>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	4a25      	ldr	r2, [pc, #148]	; (800f6b8 <TIM_Base_SetConfig+0x134>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d007      	beq.n	800f636 <TIM_Base_SetConfig+0xb2>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4a24      	ldr	r2, [pc, #144]	; (800f6bc <TIM_Base_SetConfig+0x138>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d003      	beq.n	800f636 <TIM_Base_SetConfig+0xb2>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4a23      	ldr	r2, [pc, #140]	; (800f6c0 <TIM_Base_SetConfig+0x13c>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d108      	bne.n	800f648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f63c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	68fa      	ldr	r2, [r7, #12]
 800f644:	4313      	orrs	r3, r2
 800f646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	695b      	ldr	r3, [r3, #20]
 800f652:	4313      	orrs	r3, r2
 800f654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	689a      	ldr	r2, [r3, #8]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4a0a      	ldr	r2, [pc, #40]	; (800f698 <TIM_Base_SetConfig+0x114>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d003      	beq.n	800f67c <TIM_Base_SetConfig+0xf8>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4a0c      	ldr	r2, [pc, #48]	; (800f6a8 <TIM_Base_SetConfig+0x124>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d103      	bne.n	800f684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	691a      	ldr	r2, [r3, #16]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2201      	movs	r2, #1
 800f688:	615a      	str	r2, [r3, #20]
}
 800f68a:	bf00      	nop
 800f68c:	3714      	adds	r7, #20
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr
 800f696:	bf00      	nop
 800f698:	40010000 	.word	0x40010000
 800f69c:	40000400 	.word	0x40000400
 800f6a0:	40000800 	.word	0x40000800
 800f6a4:	40000c00 	.word	0x40000c00
 800f6a8:	40010400 	.word	0x40010400
 800f6ac:	40014000 	.word	0x40014000
 800f6b0:	40014400 	.word	0x40014400
 800f6b4:	40014800 	.word	0x40014800
 800f6b8:	40001800 	.word	0x40001800
 800f6bc:	40001c00 	.word	0x40001c00
 800f6c0:	40002000 	.word	0x40002000

0800f6c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b087      	sub	sp, #28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	f023 0201 	bic.w	r2, r3, #1
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6a1b      	ldr	r3, [r3, #32]
 800f6de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	699b      	ldr	r3, [r3, #24]
 800f6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f023 0303 	bic.w	r3, r3, #3
 800f6fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	68fa      	ldr	r2, [r7, #12]
 800f702:	4313      	orrs	r3, r2
 800f704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	f023 0302 	bic.w	r3, r3, #2
 800f70c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	697a      	ldr	r2, [r7, #20]
 800f714:	4313      	orrs	r3, r2
 800f716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4a20      	ldr	r2, [pc, #128]	; (800f79c <TIM_OC1_SetConfig+0xd8>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d003      	beq.n	800f728 <TIM_OC1_SetConfig+0x64>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4a1f      	ldr	r2, [pc, #124]	; (800f7a0 <TIM_OC1_SetConfig+0xdc>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d10c      	bne.n	800f742 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	f023 0308 	bic.w	r3, r3, #8
 800f72e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	4313      	orrs	r3, r2
 800f738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	f023 0304 	bic.w	r3, r3, #4
 800f740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a15      	ldr	r2, [pc, #84]	; (800f79c <TIM_OC1_SetConfig+0xd8>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d003      	beq.n	800f752 <TIM_OC1_SetConfig+0x8e>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	4a14      	ldr	r2, [pc, #80]	; (800f7a0 <TIM_OC1_SetConfig+0xdc>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d111      	bne.n	800f776 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	695b      	ldr	r3, [r3, #20]
 800f766:	693a      	ldr	r2, [r7, #16]
 800f768:	4313      	orrs	r3, r2
 800f76a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	699b      	ldr	r3, [r3, #24]
 800f770:	693a      	ldr	r2, [r7, #16]
 800f772:	4313      	orrs	r3, r2
 800f774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	693a      	ldr	r2, [r7, #16]
 800f77a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	685a      	ldr	r2, [r3, #4]
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	697a      	ldr	r2, [r7, #20]
 800f78e:	621a      	str	r2, [r3, #32]
}
 800f790:	bf00      	nop
 800f792:	371c      	adds	r7, #28
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr
 800f79c:	40010000 	.word	0x40010000
 800f7a0:	40010400 	.word	0x40010400

0800f7a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b087      	sub	sp, #28
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6a1b      	ldr	r3, [r3, #32]
 800f7b2:	f023 0210 	bic.w	r2, r3, #16
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6a1b      	ldr	r3, [r3, #32]
 800f7be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	699b      	ldr	r3, [r3, #24]
 800f7ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	021b      	lsls	r3, r3, #8
 800f7e2:	68fa      	ldr	r2, [r7, #12]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	f023 0320 	bic.w	r3, r3, #32
 800f7ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	011b      	lsls	r3, r3, #4
 800f7f6:	697a      	ldr	r2, [r7, #20]
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4a22      	ldr	r2, [pc, #136]	; (800f888 <TIM_OC2_SetConfig+0xe4>)
 800f800:	4293      	cmp	r3, r2
 800f802:	d003      	beq.n	800f80c <TIM_OC2_SetConfig+0x68>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4a21      	ldr	r2, [pc, #132]	; (800f88c <TIM_OC2_SetConfig+0xe8>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d10d      	bne.n	800f828 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	011b      	lsls	r3, r3, #4
 800f81a:	697a      	ldr	r2, [r7, #20]
 800f81c:	4313      	orrs	r3, r2
 800f81e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4a17      	ldr	r2, [pc, #92]	; (800f888 <TIM_OC2_SetConfig+0xe4>)
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d003      	beq.n	800f838 <TIM_OC2_SetConfig+0x94>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	4a16      	ldr	r2, [pc, #88]	; (800f88c <TIM_OC2_SetConfig+0xe8>)
 800f834:	4293      	cmp	r3, r2
 800f836:	d113      	bne.n	800f860 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f83e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	695b      	ldr	r3, [r3, #20]
 800f84c:	009b      	lsls	r3, r3, #2
 800f84e:	693a      	ldr	r2, [r7, #16]
 800f850:	4313      	orrs	r3, r2
 800f852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	699b      	ldr	r3, [r3, #24]
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	693a      	ldr	r2, [r7, #16]
 800f85c:	4313      	orrs	r3, r2
 800f85e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	693a      	ldr	r2, [r7, #16]
 800f864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	685a      	ldr	r2, [r3, #4]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	697a      	ldr	r2, [r7, #20]
 800f878:	621a      	str	r2, [r3, #32]
}
 800f87a:	bf00      	nop
 800f87c:	371c      	adds	r7, #28
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr
 800f886:	bf00      	nop
 800f888:	40010000 	.word	0x40010000
 800f88c:	40010400 	.word	0x40010400

0800f890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f890:	b480      	push	{r7}
 800f892:	b087      	sub	sp, #28
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6a1b      	ldr	r3, [r3, #32]
 800f89e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6a1b      	ldr	r3, [r3, #32]
 800f8aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	69db      	ldr	r3, [r3, #28]
 800f8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f023 0303 	bic.w	r3, r3, #3
 800f8c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	68fa      	ldr	r2, [r7, #12]
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	021b      	lsls	r3, r3, #8
 800f8e0:	697a      	ldr	r2, [r7, #20]
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4a21      	ldr	r2, [pc, #132]	; (800f970 <TIM_OC3_SetConfig+0xe0>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d003      	beq.n	800f8f6 <TIM_OC3_SetConfig+0x66>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a20      	ldr	r2, [pc, #128]	; (800f974 <TIM_OC3_SetConfig+0xe4>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d10d      	bne.n	800f912 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	021b      	lsls	r3, r3, #8
 800f904:	697a      	ldr	r2, [r7, #20]
 800f906:	4313      	orrs	r3, r2
 800f908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	4a16      	ldr	r2, [pc, #88]	; (800f970 <TIM_OC3_SetConfig+0xe0>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d003      	beq.n	800f922 <TIM_OC3_SetConfig+0x92>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	4a15      	ldr	r2, [pc, #84]	; (800f974 <TIM_OC3_SetConfig+0xe4>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d113      	bne.n	800f94a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	695b      	ldr	r3, [r3, #20]
 800f936:	011b      	lsls	r3, r3, #4
 800f938:	693a      	ldr	r2, [r7, #16]
 800f93a:	4313      	orrs	r3, r2
 800f93c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	699b      	ldr	r3, [r3, #24]
 800f942:	011b      	lsls	r3, r3, #4
 800f944:	693a      	ldr	r2, [r7, #16]
 800f946:	4313      	orrs	r3, r2
 800f948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	693a      	ldr	r2, [r7, #16]
 800f94e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	68fa      	ldr	r2, [r7, #12]
 800f954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	685a      	ldr	r2, [r3, #4]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	697a      	ldr	r2, [r7, #20]
 800f962:	621a      	str	r2, [r3, #32]
}
 800f964:	bf00      	nop
 800f966:	371c      	adds	r7, #28
 800f968:	46bd      	mov	sp, r7
 800f96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96e:	4770      	bx	lr
 800f970:	40010000 	.word	0x40010000
 800f974:	40010400 	.word	0x40010400

0800f978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f978:	b480      	push	{r7}
 800f97a:	b087      	sub	sp, #28
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a1b      	ldr	r3, [r3, #32]
 800f986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6a1b      	ldr	r3, [r3, #32]
 800f992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	69db      	ldr	r3, [r3, #28]
 800f99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	021b      	lsls	r3, r3, #8
 800f9b6:	68fa      	ldr	r2, [r7, #12]
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	689b      	ldr	r3, [r3, #8]
 800f9c8:	031b      	lsls	r3, r3, #12
 800f9ca:	693a      	ldr	r2, [r7, #16]
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	4a12      	ldr	r2, [pc, #72]	; (800fa1c <TIM_OC4_SetConfig+0xa4>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d003      	beq.n	800f9e0 <TIM_OC4_SetConfig+0x68>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	4a11      	ldr	r2, [pc, #68]	; (800fa20 <TIM_OC4_SetConfig+0xa8>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d109      	bne.n	800f9f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f9e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	695b      	ldr	r3, [r3, #20]
 800f9ec:	019b      	lsls	r3, r3, #6
 800f9ee:	697a      	ldr	r2, [r7, #20]
 800f9f0:	4313      	orrs	r3, r2
 800f9f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	697a      	ldr	r2, [r7, #20]
 800f9f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	685a      	ldr	r2, [r3, #4]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	693a      	ldr	r2, [r7, #16]
 800fa0c:	621a      	str	r2, [r3, #32]
}
 800fa0e:	bf00      	nop
 800fa10:	371c      	adds	r7, #28
 800fa12:	46bd      	mov	sp, r7
 800fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop
 800fa1c:	40010000 	.word	0x40010000
 800fa20:	40010400 	.word	0x40010400

0800fa24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b087      	sub	sp, #28
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	f003 031f 	and.w	r3, r3, #31
 800fa36:	2201      	movs	r2, #1
 800fa38:	fa02 f303 	lsl.w	r3, r2, r3
 800fa3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6a1a      	ldr	r2, [r3, #32]
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	43db      	mvns	r3, r3
 800fa46:	401a      	ands	r2, r3
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	6a1a      	ldr	r2, [r3, #32]
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	f003 031f 	and.w	r3, r3, #31
 800fa56:	6879      	ldr	r1, [r7, #4]
 800fa58:	fa01 f303 	lsl.w	r3, r1, r3
 800fa5c:	431a      	orrs	r2, r3
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	621a      	str	r2, [r3, #32]
}
 800fa62:	bf00      	nop
 800fa64:	371c      	adds	r7, #28
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr
	...

0800fa70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b085      	sub	sp, #20
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d101      	bne.n	800fa88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fa84:	2302      	movs	r3, #2
 800fa86:	e05a      	b.n	800fb3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2202      	movs	r2, #2
 800fa94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	689b      	ldr	r3, [r3, #8]
 800faa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	68fa      	ldr	r2, [r7, #12]
 800fab6:	4313      	orrs	r3, r2
 800fab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	68fa      	ldr	r2, [r7, #12]
 800fac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	4a21      	ldr	r2, [pc, #132]	; (800fb4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d022      	beq.n	800fb12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fad4:	d01d      	beq.n	800fb12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4a1d      	ldr	r2, [pc, #116]	; (800fb50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d018      	beq.n	800fb12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4a1b      	ldr	r2, [pc, #108]	; (800fb54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d013      	beq.n	800fb12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4a1a      	ldr	r2, [pc, #104]	; (800fb58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d00e      	beq.n	800fb12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a18      	ldr	r2, [pc, #96]	; (800fb5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d009      	beq.n	800fb12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	4a17      	ldr	r2, [pc, #92]	; (800fb60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d004      	beq.n	800fb12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4a15      	ldr	r2, [pc, #84]	; (800fb64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d10c      	bne.n	800fb2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	685b      	ldr	r3, [r3, #4]
 800fb1e:	68ba      	ldr	r2, [r7, #8]
 800fb20:	4313      	orrs	r3, r2
 800fb22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	68ba      	ldr	r2, [r7, #8]
 800fb2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2200      	movs	r2, #0
 800fb38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb3c:	2300      	movs	r3, #0
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3714      	adds	r7, #20
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr
 800fb4a:	bf00      	nop
 800fb4c:	40010000 	.word	0x40010000
 800fb50:	40000400 	.word	0x40000400
 800fb54:	40000800 	.word	0x40000800
 800fb58:	40000c00 	.word	0x40000c00
 800fb5c:	40010400 	.word	0x40010400
 800fb60:	40014000 	.word	0x40014000
 800fb64:	40001800 	.word	0x40001800

0800fb68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fb72:	2300      	movs	r3, #0
 800fb74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d101      	bne.n	800fb84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fb80:	2302      	movs	r3, #2
 800fb82:	e03d      	b.n	800fc00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2201      	movs	r2, #1
 800fb88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	68db      	ldr	r3, [r3, #12]
 800fb96:	4313      	orrs	r3, r2
 800fb98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	689b      	ldr	r3, [r3, #8]
 800fba4:	4313      	orrs	r3, r2
 800fba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	685b      	ldr	r3, [r3, #4]
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4313      	orrs	r3, r2
 800fbc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	695b      	ldr	r3, [r3, #20]
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	69db      	ldr	r3, [r3, #28]
 800fbea:	4313      	orrs	r3, r2
 800fbec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	68fa      	ldr	r2, [r7, #12]
 800fbf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fbfe:	2300      	movs	r3, #0
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3714      	adds	r7, #20
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr

0800fc0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b083      	sub	sp, #12
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc14:	bf00      	nop
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr

0800fc20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc20:	b480      	push	{r7}
 800fc22:	b083      	sub	sp, #12
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc28:	bf00      	nop
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr

0800fc34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d101      	bne.n	800fc46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fc42:	2301      	movs	r3, #1
 800fc44:	e03f      	b.n	800fcc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d106      	bne.n	800fc60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2200      	movs	r2, #0
 800fc56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f7f7 fcd8 	bl	8007610 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2224      	movs	r2, #36	; 0x24
 800fc64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	68da      	ldr	r2, [r3, #12]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fc76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f000 f829 	bl	800fcd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	691a      	ldr	r2, [r3, #16]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fc8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	695a      	ldr	r2, [r3, #20]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fc9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	68da      	ldr	r2, [r3, #12]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fcac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2220      	movs	r2, #32
 800fcb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2220      	movs	r2, #32
 800fcc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fcc4:	2300      	movs	r3, #0
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3708      	adds	r7, #8
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
	...

0800fcd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd4:	b085      	sub	sp, #20
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	691b      	ldr	r3, [r3, #16]
 800fce0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	68da      	ldr	r2, [r3, #12]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	430a      	orrs	r2, r1
 800fcee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	689a      	ldr	r2, [r3, #8]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	691b      	ldr	r3, [r3, #16]
 800fcf8:	431a      	orrs	r2, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	695b      	ldr	r3, [r3, #20]
 800fcfe:	431a      	orrs	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	69db      	ldr	r3, [r3, #28]
 800fd04:	4313      	orrs	r3, r2
 800fd06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fd12:	f023 030c 	bic.w	r3, r3, #12
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	6812      	ldr	r2, [r2, #0]
 800fd1a:	68f9      	ldr	r1, [r7, #12]
 800fd1c:	430b      	orrs	r3, r1
 800fd1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	695b      	ldr	r3, [r3, #20]
 800fd26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	699a      	ldr	r2, [r3, #24]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	430a      	orrs	r2, r1
 800fd34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	69db      	ldr	r3, [r3, #28]
 800fd3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd3e:	f040 818b 	bne.w	8010058 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	4ac1      	ldr	r2, [pc, #772]	; (801004c <UART_SetConfig+0x37c>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d005      	beq.n	800fd58 <UART_SetConfig+0x88>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4abf      	ldr	r2, [pc, #764]	; (8010050 <UART_SetConfig+0x380>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	f040 80bd 	bne.w	800fed2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fd58:	f7fc fbcc 	bl	800c4f4 <HAL_RCC_GetPCLK2Freq>
 800fd5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	461d      	mov	r5, r3
 800fd62:	f04f 0600 	mov.w	r6, #0
 800fd66:	46a8      	mov	r8, r5
 800fd68:	46b1      	mov	r9, r6
 800fd6a:	eb18 0308 	adds.w	r3, r8, r8
 800fd6e:	eb49 0409 	adc.w	r4, r9, r9
 800fd72:	4698      	mov	r8, r3
 800fd74:	46a1      	mov	r9, r4
 800fd76:	eb18 0805 	adds.w	r8, r8, r5
 800fd7a:	eb49 0906 	adc.w	r9, r9, r6
 800fd7e:	f04f 0100 	mov.w	r1, #0
 800fd82:	f04f 0200 	mov.w	r2, #0
 800fd86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fd8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fd8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fd92:	4688      	mov	r8, r1
 800fd94:	4691      	mov	r9, r2
 800fd96:	eb18 0005 	adds.w	r0, r8, r5
 800fd9a:	eb49 0106 	adc.w	r1, r9, r6
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	461d      	mov	r5, r3
 800fda4:	f04f 0600 	mov.w	r6, #0
 800fda8:	196b      	adds	r3, r5, r5
 800fdaa:	eb46 0406 	adc.w	r4, r6, r6
 800fdae:	461a      	mov	r2, r3
 800fdb0:	4623      	mov	r3, r4
 800fdb2:	f7f0 ff81 	bl	8000cb8 <__aeabi_uldivmod>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	460c      	mov	r4, r1
 800fdba:	461a      	mov	r2, r3
 800fdbc:	4ba5      	ldr	r3, [pc, #660]	; (8010054 <UART_SetConfig+0x384>)
 800fdbe:	fba3 2302 	umull	r2, r3, r3, r2
 800fdc2:	095b      	lsrs	r3, r3, #5
 800fdc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	461d      	mov	r5, r3
 800fdcc:	f04f 0600 	mov.w	r6, #0
 800fdd0:	46a9      	mov	r9, r5
 800fdd2:	46b2      	mov	sl, r6
 800fdd4:	eb19 0309 	adds.w	r3, r9, r9
 800fdd8:	eb4a 040a 	adc.w	r4, sl, sl
 800fddc:	4699      	mov	r9, r3
 800fdde:	46a2      	mov	sl, r4
 800fde0:	eb19 0905 	adds.w	r9, r9, r5
 800fde4:	eb4a 0a06 	adc.w	sl, sl, r6
 800fde8:	f04f 0100 	mov.w	r1, #0
 800fdec:	f04f 0200 	mov.w	r2, #0
 800fdf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fdf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fdf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fdfc:	4689      	mov	r9, r1
 800fdfe:	4692      	mov	sl, r2
 800fe00:	eb19 0005 	adds.w	r0, r9, r5
 800fe04:	eb4a 0106 	adc.w	r1, sl, r6
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	461d      	mov	r5, r3
 800fe0e:	f04f 0600 	mov.w	r6, #0
 800fe12:	196b      	adds	r3, r5, r5
 800fe14:	eb46 0406 	adc.w	r4, r6, r6
 800fe18:	461a      	mov	r2, r3
 800fe1a:	4623      	mov	r3, r4
 800fe1c:	f7f0 ff4c 	bl	8000cb8 <__aeabi_uldivmod>
 800fe20:	4603      	mov	r3, r0
 800fe22:	460c      	mov	r4, r1
 800fe24:	461a      	mov	r2, r3
 800fe26:	4b8b      	ldr	r3, [pc, #556]	; (8010054 <UART_SetConfig+0x384>)
 800fe28:	fba3 1302 	umull	r1, r3, r3, r2
 800fe2c:	095b      	lsrs	r3, r3, #5
 800fe2e:	2164      	movs	r1, #100	; 0x64
 800fe30:	fb01 f303 	mul.w	r3, r1, r3
 800fe34:	1ad3      	subs	r3, r2, r3
 800fe36:	00db      	lsls	r3, r3, #3
 800fe38:	3332      	adds	r3, #50	; 0x32
 800fe3a:	4a86      	ldr	r2, [pc, #536]	; (8010054 <UART_SetConfig+0x384>)
 800fe3c:	fba2 2303 	umull	r2, r3, r2, r3
 800fe40:	095b      	lsrs	r3, r3, #5
 800fe42:	005b      	lsls	r3, r3, #1
 800fe44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fe48:	4498      	add	r8, r3
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	461d      	mov	r5, r3
 800fe4e:	f04f 0600 	mov.w	r6, #0
 800fe52:	46a9      	mov	r9, r5
 800fe54:	46b2      	mov	sl, r6
 800fe56:	eb19 0309 	adds.w	r3, r9, r9
 800fe5a:	eb4a 040a 	adc.w	r4, sl, sl
 800fe5e:	4699      	mov	r9, r3
 800fe60:	46a2      	mov	sl, r4
 800fe62:	eb19 0905 	adds.w	r9, r9, r5
 800fe66:	eb4a 0a06 	adc.w	sl, sl, r6
 800fe6a:	f04f 0100 	mov.w	r1, #0
 800fe6e:	f04f 0200 	mov.w	r2, #0
 800fe72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe7e:	4689      	mov	r9, r1
 800fe80:	4692      	mov	sl, r2
 800fe82:	eb19 0005 	adds.w	r0, r9, r5
 800fe86:	eb4a 0106 	adc.w	r1, sl, r6
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	461d      	mov	r5, r3
 800fe90:	f04f 0600 	mov.w	r6, #0
 800fe94:	196b      	adds	r3, r5, r5
 800fe96:	eb46 0406 	adc.w	r4, r6, r6
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	4623      	mov	r3, r4
 800fe9e:	f7f0 ff0b 	bl	8000cb8 <__aeabi_uldivmod>
 800fea2:	4603      	mov	r3, r0
 800fea4:	460c      	mov	r4, r1
 800fea6:	461a      	mov	r2, r3
 800fea8:	4b6a      	ldr	r3, [pc, #424]	; (8010054 <UART_SetConfig+0x384>)
 800feaa:	fba3 1302 	umull	r1, r3, r3, r2
 800feae:	095b      	lsrs	r3, r3, #5
 800feb0:	2164      	movs	r1, #100	; 0x64
 800feb2:	fb01 f303 	mul.w	r3, r1, r3
 800feb6:	1ad3      	subs	r3, r2, r3
 800feb8:	00db      	lsls	r3, r3, #3
 800feba:	3332      	adds	r3, #50	; 0x32
 800febc:	4a65      	ldr	r2, [pc, #404]	; (8010054 <UART_SetConfig+0x384>)
 800febe:	fba2 2303 	umull	r2, r3, r2, r3
 800fec2:	095b      	lsrs	r3, r3, #5
 800fec4:	f003 0207 	and.w	r2, r3, #7
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	4442      	add	r2, r8
 800fece:	609a      	str	r2, [r3, #8]
 800fed0:	e26f      	b.n	80103b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fed2:	f7fc fafb 	bl	800c4cc <HAL_RCC_GetPCLK1Freq>
 800fed6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	461d      	mov	r5, r3
 800fedc:	f04f 0600 	mov.w	r6, #0
 800fee0:	46a8      	mov	r8, r5
 800fee2:	46b1      	mov	r9, r6
 800fee4:	eb18 0308 	adds.w	r3, r8, r8
 800fee8:	eb49 0409 	adc.w	r4, r9, r9
 800feec:	4698      	mov	r8, r3
 800feee:	46a1      	mov	r9, r4
 800fef0:	eb18 0805 	adds.w	r8, r8, r5
 800fef4:	eb49 0906 	adc.w	r9, r9, r6
 800fef8:	f04f 0100 	mov.w	r1, #0
 800fefc:	f04f 0200 	mov.w	r2, #0
 800ff00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ff04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ff08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ff0c:	4688      	mov	r8, r1
 800ff0e:	4691      	mov	r9, r2
 800ff10:	eb18 0005 	adds.w	r0, r8, r5
 800ff14:	eb49 0106 	adc.w	r1, r9, r6
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	461d      	mov	r5, r3
 800ff1e:	f04f 0600 	mov.w	r6, #0
 800ff22:	196b      	adds	r3, r5, r5
 800ff24:	eb46 0406 	adc.w	r4, r6, r6
 800ff28:	461a      	mov	r2, r3
 800ff2a:	4623      	mov	r3, r4
 800ff2c:	f7f0 fec4 	bl	8000cb8 <__aeabi_uldivmod>
 800ff30:	4603      	mov	r3, r0
 800ff32:	460c      	mov	r4, r1
 800ff34:	461a      	mov	r2, r3
 800ff36:	4b47      	ldr	r3, [pc, #284]	; (8010054 <UART_SetConfig+0x384>)
 800ff38:	fba3 2302 	umull	r2, r3, r3, r2
 800ff3c:	095b      	lsrs	r3, r3, #5
 800ff3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	461d      	mov	r5, r3
 800ff46:	f04f 0600 	mov.w	r6, #0
 800ff4a:	46a9      	mov	r9, r5
 800ff4c:	46b2      	mov	sl, r6
 800ff4e:	eb19 0309 	adds.w	r3, r9, r9
 800ff52:	eb4a 040a 	adc.w	r4, sl, sl
 800ff56:	4699      	mov	r9, r3
 800ff58:	46a2      	mov	sl, r4
 800ff5a:	eb19 0905 	adds.w	r9, r9, r5
 800ff5e:	eb4a 0a06 	adc.w	sl, sl, r6
 800ff62:	f04f 0100 	mov.w	r1, #0
 800ff66:	f04f 0200 	mov.w	r2, #0
 800ff6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff76:	4689      	mov	r9, r1
 800ff78:	4692      	mov	sl, r2
 800ff7a:	eb19 0005 	adds.w	r0, r9, r5
 800ff7e:	eb4a 0106 	adc.w	r1, sl, r6
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	461d      	mov	r5, r3
 800ff88:	f04f 0600 	mov.w	r6, #0
 800ff8c:	196b      	adds	r3, r5, r5
 800ff8e:	eb46 0406 	adc.w	r4, r6, r6
 800ff92:	461a      	mov	r2, r3
 800ff94:	4623      	mov	r3, r4
 800ff96:	f7f0 fe8f 	bl	8000cb8 <__aeabi_uldivmod>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	460c      	mov	r4, r1
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	4b2c      	ldr	r3, [pc, #176]	; (8010054 <UART_SetConfig+0x384>)
 800ffa2:	fba3 1302 	umull	r1, r3, r3, r2
 800ffa6:	095b      	lsrs	r3, r3, #5
 800ffa8:	2164      	movs	r1, #100	; 0x64
 800ffaa:	fb01 f303 	mul.w	r3, r1, r3
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	00db      	lsls	r3, r3, #3
 800ffb2:	3332      	adds	r3, #50	; 0x32
 800ffb4:	4a27      	ldr	r2, [pc, #156]	; (8010054 <UART_SetConfig+0x384>)
 800ffb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ffba:	095b      	lsrs	r3, r3, #5
 800ffbc:	005b      	lsls	r3, r3, #1
 800ffbe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ffc2:	4498      	add	r8, r3
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	461d      	mov	r5, r3
 800ffc8:	f04f 0600 	mov.w	r6, #0
 800ffcc:	46a9      	mov	r9, r5
 800ffce:	46b2      	mov	sl, r6
 800ffd0:	eb19 0309 	adds.w	r3, r9, r9
 800ffd4:	eb4a 040a 	adc.w	r4, sl, sl
 800ffd8:	4699      	mov	r9, r3
 800ffda:	46a2      	mov	sl, r4
 800ffdc:	eb19 0905 	adds.w	r9, r9, r5
 800ffe0:	eb4a 0a06 	adc.w	sl, sl, r6
 800ffe4:	f04f 0100 	mov.w	r1, #0
 800ffe8:	f04f 0200 	mov.w	r2, #0
 800ffec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fff0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fff4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fff8:	4689      	mov	r9, r1
 800fffa:	4692      	mov	sl, r2
 800fffc:	eb19 0005 	adds.w	r0, r9, r5
 8010000:	eb4a 0106 	adc.w	r1, sl, r6
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	461d      	mov	r5, r3
 801000a:	f04f 0600 	mov.w	r6, #0
 801000e:	196b      	adds	r3, r5, r5
 8010010:	eb46 0406 	adc.w	r4, r6, r6
 8010014:	461a      	mov	r2, r3
 8010016:	4623      	mov	r3, r4
 8010018:	f7f0 fe4e 	bl	8000cb8 <__aeabi_uldivmod>
 801001c:	4603      	mov	r3, r0
 801001e:	460c      	mov	r4, r1
 8010020:	461a      	mov	r2, r3
 8010022:	4b0c      	ldr	r3, [pc, #48]	; (8010054 <UART_SetConfig+0x384>)
 8010024:	fba3 1302 	umull	r1, r3, r3, r2
 8010028:	095b      	lsrs	r3, r3, #5
 801002a:	2164      	movs	r1, #100	; 0x64
 801002c:	fb01 f303 	mul.w	r3, r1, r3
 8010030:	1ad3      	subs	r3, r2, r3
 8010032:	00db      	lsls	r3, r3, #3
 8010034:	3332      	adds	r3, #50	; 0x32
 8010036:	4a07      	ldr	r2, [pc, #28]	; (8010054 <UART_SetConfig+0x384>)
 8010038:	fba2 2303 	umull	r2, r3, r2, r3
 801003c:	095b      	lsrs	r3, r3, #5
 801003e:	f003 0207 	and.w	r2, r3, #7
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4442      	add	r2, r8
 8010048:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801004a:	e1b2      	b.n	80103b2 <UART_SetConfig+0x6e2>
 801004c:	40011000 	.word	0x40011000
 8010050:	40011400 	.word	0x40011400
 8010054:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4ad7      	ldr	r2, [pc, #860]	; (80103bc <UART_SetConfig+0x6ec>)
 801005e:	4293      	cmp	r3, r2
 8010060:	d005      	beq.n	801006e <UART_SetConfig+0x39e>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	4ad6      	ldr	r2, [pc, #856]	; (80103c0 <UART_SetConfig+0x6f0>)
 8010068:	4293      	cmp	r3, r2
 801006a:	f040 80d1 	bne.w	8010210 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801006e:	f7fc fa41 	bl	800c4f4 <HAL_RCC_GetPCLK2Freq>
 8010072:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	469a      	mov	sl, r3
 8010078:	f04f 0b00 	mov.w	fp, #0
 801007c:	46d0      	mov	r8, sl
 801007e:	46d9      	mov	r9, fp
 8010080:	eb18 0308 	adds.w	r3, r8, r8
 8010084:	eb49 0409 	adc.w	r4, r9, r9
 8010088:	4698      	mov	r8, r3
 801008a:	46a1      	mov	r9, r4
 801008c:	eb18 080a 	adds.w	r8, r8, sl
 8010090:	eb49 090b 	adc.w	r9, r9, fp
 8010094:	f04f 0100 	mov.w	r1, #0
 8010098:	f04f 0200 	mov.w	r2, #0
 801009c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80100a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80100a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80100a8:	4688      	mov	r8, r1
 80100aa:	4691      	mov	r9, r2
 80100ac:	eb1a 0508 	adds.w	r5, sl, r8
 80100b0:	eb4b 0609 	adc.w	r6, fp, r9
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	4619      	mov	r1, r3
 80100ba:	f04f 0200 	mov.w	r2, #0
 80100be:	f04f 0300 	mov.w	r3, #0
 80100c2:	f04f 0400 	mov.w	r4, #0
 80100c6:	0094      	lsls	r4, r2, #2
 80100c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80100cc:	008b      	lsls	r3, r1, #2
 80100ce:	461a      	mov	r2, r3
 80100d0:	4623      	mov	r3, r4
 80100d2:	4628      	mov	r0, r5
 80100d4:	4631      	mov	r1, r6
 80100d6:	f7f0 fdef 	bl	8000cb8 <__aeabi_uldivmod>
 80100da:	4603      	mov	r3, r0
 80100dc:	460c      	mov	r4, r1
 80100de:	461a      	mov	r2, r3
 80100e0:	4bb8      	ldr	r3, [pc, #736]	; (80103c4 <UART_SetConfig+0x6f4>)
 80100e2:	fba3 2302 	umull	r2, r3, r3, r2
 80100e6:	095b      	lsrs	r3, r3, #5
 80100e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	469b      	mov	fp, r3
 80100f0:	f04f 0c00 	mov.w	ip, #0
 80100f4:	46d9      	mov	r9, fp
 80100f6:	46e2      	mov	sl, ip
 80100f8:	eb19 0309 	adds.w	r3, r9, r9
 80100fc:	eb4a 040a 	adc.w	r4, sl, sl
 8010100:	4699      	mov	r9, r3
 8010102:	46a2      	mov	sl, r4
 8010104:	eb19 090b 	adds.w	r9, r9, fp
 8010108:	eb4a 0a0c 	adc.w	sl, sl, ip
 801010c:	f04f 0100 	mov.w	r1, #0
 8010110:	f04f 0200 	mov.w	r2, #0
 8010114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010118:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801011c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010120:	4689      	mov	r9, r1
 8010122:	4692      	mov	sl, r2
 8010124:	eb1b 0509 	adds.w	r5, fp, r9
 8010128:	eb4c 060a 	adc.w	r6, ip, sl
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	4619      	mov	r1, r3
 8010132:	f04f 0200 	mov.w	r2, #0
 8010136:	f04f 0300 	mov.w	r3, #0
 801013a:	f04f 0400 	mov.w	r4, #0
 801013e:	0094      	lsls	r4, r2, #2
 8010140:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010144:	008b      	lsls	r3, r1, #2
 8010146:	461a      	mov	r2, r3
 8010148:	4623      	mov	r3, r4
 801014a:	4628      	mov	r0, r5
 801014c:	4631      	mov	r1, r6
 801014e:	f7f0 fdb3 	bl	8000cb8 <__aeabi_uldivmod>
 8010152:	4603      	mov	r3, r0
 8010154:	460c      	mov	r4, r1
 8010156:	461a      	mov	r2, r3
 8010158:	4b9a      	ldr	r3, [pc, #616]	; (80103c4 <UART_SetConfig+0x6f4>)
 801015a:	fba3 1302 	umull	r1, r3, r3, r2
 801015e:	095b      	lsrs	r3, r3, #5
 8010160:	2164      	movs	r1, #100	; 0x64
 8010162:	fb01 f303 	mul.w	r3, r1, r3
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	011b      	lsls	r3, r3, #4
 801016a:	3332      	adds	r3, #50	; 0x32
 801016c:	4a95      	ldr	r2, [pc, #596]	; (80103c4 <UART_SetConfig+0x6f4>)
 801016e:	fba2 2303 	umull	r2, r3, r2, r3
 8010172:	095b      	lsrs	r3, r3, #5
 8010174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010178:	4498      	add	r8, r3
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	469b      	mov	fp, r3
 801017e:	f04f 0c00 	mov.w	ip, #0
 8010182:	46d9      	mov	r9, fp
 8010184:	46e2      	mov	sl, ip
 8010186:	eb19 0309 	adds.w	r3, r9, r9
 801018a:	eb4a 040a 	adc.w	r4, sl, sl
 801018e:	4699      	mov	r9, r3
 8010190:	46a2      	mov	sl, r4
 8010192:	eb19 090b 	adds.w	r9, r9, fp
 8010196:	eb4a 0a0c 	adc.w	sl, sl, ip
 801019a:	f04f 0100 	mov.w	r1, #0
 801019e:	f04f 0200 	mov.w	r2, #0
 80101a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80101a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80101aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80101ae:	4689      	mov	r9, r1
 80101b0:	4692      	mov	sl, r2
 80101b2:	eb1b 0509 	adds.w	r5, fp, r9
 80101b6:	eb4c 060a 	adc.w	r6, ip, sl
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	4619      	mov	r1, r3
 80101c0:	f04f 0200 	mov.w	r2, #0
 80101c4:	f04f 0300 	mov.w	r3, #0
 80101c8:	f04f 0400 	mov.w	r4, #0
 80101cc:	0094      	lsls	r4, r2, #2
 80101ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80101d2:	008b      	lsls	r3, r1, #2
 80101d4:	461a      	mov	r2, r3
 80101d6:	4623      	mov	r3, r4
 80101d8:	4628      	mov	r0, r5
 80101da:	4631      	mov	r1, r6
 80101dc:	f7f0 fd6c 	bl	8000cb8 <__aeabi_uldivmod>
 80101e0:	4603      	mov	r3, r0
 80101e2:	460c      	mov	r4, r1
 80101e4:	461a      	mov	r2, r3
 80101e6:	4b77      	ldr	r3, [pc, #476]	; (80103c4 <UART_SetConfig+0x6f4>)
 80101e8:	fba3 1302 	umull	r1, r3, r3, r2
 80101ec:	095b      	lsrs	r3, r3, #5
 80101ee:	2164      	movs	r1, #100	; 0x64
 80101f0:	fb01 f303 	mul.w	r3, r1, r3
 80101f4:	1ad3      	subs	r3, r2, r3
 80101f6:	011b      	lsls	r3, r3, #4
 80101f8:	3332      	adds	r3, #50	; 0x32
 80101fa:	4a72      	ldr	r2, [pc, #456]	; (80103c4 <UART_SetConfig+0x6f4>)
 80101fc:	fba2 2303 	umull	r2, r3, r2, r3
 8010200:	095b      	lsrs	r3, r3, #5
 8010202:	f003 020f 	and.w	r2, r3, #15
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	4442      	add	r2, r8
 801020c:	609a      	str	r2, [r3, #8]
 801020e:	e0d0      	b.n	80103b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010210:	f7fc f95c 	bl	800c4cc <HAL_RCC_GetPCLK1Freq>
 8010214:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	469a      	mov	sl, r3
 801021a:	f04f 0b00 	mov.w	fp, #0
 801021e:	46d0      	mov	r8, sl
 8010220:	46d9      	mov	r9, fp
 8010222:	eb18 0308 	adds.w	r3, r8, r8
 8010226:	eb49 0409 	adc.w	r4, r9, r9
 801022a:	4698      	mov	r8, r3
 801022c:	46a1      	mov	r9, r4
 801022e:	eb18 080a 	adds.w	r8, r8, sl
 8010232:	eb49 090b 	adc.w	r9, r9, fp
 8010236:	f04f 0100 	mov.w	r1, #0
 801023a:	f04f 0200 	mov.w	r2, #0
 801023e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010242:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010246:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801024a:	4688      	mov	r8, r1
 801024c:	4691      	mov	r9, r2
 801024e:	eb1a 0508 	adds.w	r5, sl, r8
 8010252:	eb4b 0609 	adc.w	r6, fp, r9
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	4619      	mov	r1, r3
 801025c:	f04f 0200 	mov.w	r2, #0
 8010260:	f04f 0300 	mov.w	r3, #0
 8010264:	f04f 0400 	mov.w	r4, #0
 8010268:	0094      	lsls	r4, r2, #2
 801026a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801026e:	008b      	lsls	r3, r1, #2
 8010270:	461a      	mov	r2, r3
 8010272:	4623      	mov	r3, r4
 8010274:	4628      	mov	r0, r5
 8010276:	4631      	mov	r1, r6
 8010278:	f7f0 fd1e 	bl	8000cb8 <__aeabi_uldivmod>
 801027c:	4603      	mov	r3, r0
 801027e:	460c      	mov	r4, r1
 8010280:	461a      	mov	r2, r3
 8010282:	4b50      	ldr	r3, [pc, #320]	; (80103c4 <UART_SetConfig+0x6f4>)
 8010284:	fba3 2302 	umull	r2, r3, r3, r2
 8010288:	095b      	lsrs	r3, r3, #5
 801028a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	469b      	mov	fp, r3
 8010292:	f04f 0c00 	mov.w	ip, #0
 8010296:	46d9      	mov	r9, fp
 8010298:	46e2      	mov	sl, ip
 801029a:	eb19 0309 	adds.w	r3, r9, r9
 801029e:	eb4a 040a 	adc.w	r4, sl, sl
 80102a2:	4699      	mov	r9, r3
 80102a4:	46a2      	mov	sl, r4
 80102a6:	eb19 090b 	adds.w	r9, r9, fp
 80102aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80102ae:	f04f 0100 	mov.w	r1, #0
 80102b2:	f04f 0200 	mov.w	r2, #0
 80102b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102c2:	4689      	mov	r9, r1
 80102c4:	4692      	mov	sl, r2
 80102c6:	eb1b 0509 	adds.w	r5, fp, r9
 80102ca:	eb4c 060a 	adc.w	r6, ip, sl
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	4619      	mov	r1, r3
 80102d4:	f04f 0200 	mov.w	r2, #0
 80102d8:	f04f 0300 	mov.w	r3, #0
 80102dc:	f04f 0400 	mov.w	r4, #0
 80102e0:	0094      	lsls	r4, r2, #2
 80102e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80102e6:	008b      	lsls	r3, r1, #2
 80102e8:	461a      	mov	r2, r3
 80102ea:	4623      	mov	r3, r4
 80102ec:	4628      	mov	r0, r5
 80102ee:	4631      	mov	r1, r6
 80102f0:	f7f0 fce2 	bl	8000cb8 <__aeabi_uldivmod>
 80102f4:	4603      	mov	r3, r0
 80102f6:	460c      	mov	r4, r1
 80102f8:	461a      	mov	r2, r3
 80102fa:	4b32      	ldr	r3, [pc, #200]	; (80103c4 <UART_SetConfig+0x6f4>)
 80102fc:	fba3 1302 	umull	r1, r3, r3, r2
 8010300:	095b      	lsrs	r3, r3, #5
 8010302:	2164      	movs	r1, #100	; 0x64
 8010304:	fb01 f303 	mul.w	r3, r1, r3
 8010308:	1ad3      	subs	r3, r2, r3
 801030a:	011b      	lsls	r3, r3, #4
 801030c:	3332      	adds	r3, #50	; 0x32
 801030e:	4a2d      	ldr	r2, [pc, #180]	; (80103c4 <UART_SetConfig+0x6f4>)
 8010310:	fba2 2303 	umull	r2, r3, r2, r3
 8010314:	095b      	lsrs	r3, r3, #5
 8010316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801031a:	4498      	add	r8, r3
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	469b      	mov	fp, r3
 8010320:	f04f 0c00 	mov.w	ip, #0
 8010324:	46d9      	mov	r9, fp
 8010326:	46e2      	mov	sl, ip
 8010328:	eb19 0309 	adds.w	r3, r9, r9
 801032c:	eb4a 040a 	adc.w	r4, sl, sl
 8010330:	4699      	mov	r9, r3
 8010332:	46a2      	mov	sl, r4
 8010334:	eb19 090b 	adds.w	r9, r9, fp
 8010338:	eb4a 0a0c 	adc.w	sl, sl, ip
 801033c:	f04f 0100 	mov.w	r1, #0
 8010340:	f04f 0200 	mov.w	r2, #0
 8010344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010348:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801034c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010350:	4689      	mov	r9, r1
 8010352:	4692      	mov	sl, r2
 8010354:	eb1b 0509 	adds.w	r5, fp, r9
 8010358:	eb4c 060a 	adc.w	r6, ip, sl
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	4619      	mov	r1, r3
 8010362:	f04f 0200 	mov.w	r2, #0
 8010366:	f04f 0300 	mov.w	r3, #0
 801036a:	f04f 0400 	mov.w	r4, #0
 801036e:	0094      	lsls	r4, r2, #2
 8010370:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010374:	008b      	lsls	r3, r1, #2
 8010376:	461a      	mov	r2, r3
 8010378:	4623      	mov	r3, r4
 801037a:	4628      	mov	r0, r5
 801037c:	4631      	mov	r1, r6
 801037e:	f7f0 fc9b 	bl	8000cb8 <__aeabi_uldivmod>
 8010382:	4603      	mov	r3, r0
 8010384:	460c      	mov	r4, r1
 8010386:	461a      	mov	r2, r3
 8010388:	4b0e      	ldr	r3, [pc, #56]	; (80103c4 <UART_SetConfig+0x6f4>)
 801038a:	fba3 1302 	umull	r1, r3, r3, r2
 801038e:	095b      	lsrs	r3, r3, #5
 8010390:	2164      	movs	r1, #100	; 0x64
 8010392:	fb01 f303 	mul.w	r3, r1, r3
 8010396:	1ad3      	subs	r3, r2, r3
 8010398:	011b      	lsls	r3, r3, #4
 801039a:	3332      	adds	r3, #50	; 0x32
 801039c:	4a09      	ldr	r2, [pc, #36]	; (80103c4 <UART_SetConfig+0x6f4>)
 801039e:	fba2 2303 	umull	r2, r3, r2, r3
 80103a2:	095b      	lsrs	r3, r3, #5
 80103a4:	f003 020f 	and.w	r2, r3, #15
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	4442      	add	r2, r8
 80103ae:	609a      	str	r2, [r3, #8]
}
 80103b0:	e7ff      	b.n	80103b2 <UART_SetConfig+0x6e2>
 80103b2:	bf00      	nop
 80103b4:	3714      	adds	r7, #20
 80103b6:	46bd      	mov	sp, r7
 80103b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103bc:	40011000 	.word	0x40011000
 80103c0:	40011400 	.word	0x40011400
 80103c4:	51eb851f 	.word	0x51eb851f

080103c8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80103c8:	b084      	sub	sp, #16
 80103ca:	b480      	push	{r7}
 80103cc:	b085      	sub	sp, #20
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
 80103d2:	f107 001c 	add.w	r0, r7, #28
 80103d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80103da:	2300      	movs	r3, #0
 80103dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80103de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80103e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80103e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80103e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80103e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80103e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80103ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80103ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80103ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 80103f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80103f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80103f4:	68fa      	ldr	r2, [r7, #12]
 80103f6:	4313      	orrs	r3, r2
 80103f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010402:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010406:	68fa      	ldr	r2, [r7, #12]
 8010408:	431a      	orrs	r2, r3
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801040e:	2300      	movs	r3, #0
}
 8010410:	4618      	mov	r0, r3
 8010412:	3714      	adds	r7, #20
 8010414:	46bd      	mov	sp, r7
 8010416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041a:	b004      	add	sp, #16
 801041c:	4770      	bx	lr

0801041e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801041e:	b480      	push	{r7}
 8010420:	b083      	sub	sp, #12
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801042c:	4618      	mov	r0, r3
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr

08010438 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010438:	b480      	push	{r7}
 801043a:	b083      	sub	sp, #12
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801044c:	2300      	movs	r3, #0
}
 801044e:	4618      	mov	r0, r3
 8010450:	370c      	adds	r7, #12
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr

0801045a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801045a:	b580      	push	{r7, lr}
 801045c:	b082      	sub	sp, #8
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2203      	movs	r2, #3
 8010466:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010468:	2002      	movs	r0, #2
 801046a:	f7f9 fbdd 	bl	8009c28 <HAL_Delay>
  
  return HAL_OK;
 801046e:	2300      	movs	r3, #0
}
 8010470:	4618      	mov	r0, r3
 8010472:	3708      	adds	r7, #8
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}

08010478 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	f003 0303 	and.w	r3, r3, #3
}
 8010488:	4618      	mov	r0, r3
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr

08010494 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010494:	b480      	push	{r7}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801049e:	2300      	movs	r3, #0
 80104a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80104b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80104b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80104be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80104c0:	68fa      	ldr	r2, [r7, #12]
 80104c2:	4313      	orrs	r3, r2
 80104c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80104ce:	f023 030f 	bic.w	r3, r3, #15
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	431a      	orrs	r2, r3
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80104da:	2300      	movs	r3, #0
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3714      	adds	r7, #20
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	691b      	ldr	r3, [r3, #16]
 80104f4:	b2db      	uxtb	r3, r3
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	370c      	adds	r7, #12
 80104fa:	46bd      	mov	sp, r7
 80104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010500:	4770      	bx	lr

08010502 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010502:	b480      	push	{r7}
 8010504:	b085      	sub	sp, #20
 8010506:	af00      	add	r7, sp, #0
 8010508:	6078      	str	r0, [r7, #4]
 801050a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	3314      	adds	r3, #20
 8010510:	461a      	mov	r2, r3
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	4413      	add	r3, r2
 8010516:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	681b      	ldr	r3, [r3, #0]
}  
 801051c:	4618      	mov	r0, r3
 801051e:	3714      	adds	r7, #20
 8010520:	46bd      	mov	sp, r7
 8010522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010526:	4770      	bx	lr

08010528 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010528:	b480      	push	{r7}
 801052a:	b085      	sub	sp, #20
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010532:	2300      	movs	r3, #0
 8010534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	685a      	ldr	r2, [r3, #4]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801054e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010554:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801055a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801055c:	68fa      	ldr	r2, [r7, #12]
 801055e:	4313      	orrs	r3, r2
 8010560:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010566:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	431a      	orrs	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010572:	2300      	movs	r3, #0

}
 8010574:	4618      	mov	r0, r3
 8010576:	3714      	adds	r7, #20
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b088      	sub	sp, #32
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801058e:	2310      	movs	r3, #16
 8010590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010592:	2340      	movs	r3, #64	; 0x40
 8010594:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010596:	2300      	movs	r3, #0
 8010598:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801059a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801059e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105a0:	f107 0308 	add.w	r3, r7, #8
 80105a4:	4619      	mov	r1, r3
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f7ff ff74 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80105ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80105b0:	2110      	movs	r1, #16
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 fa40 	bl	8010a38 <SDMMC_GetCmdResp1>
 80105b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ba:	69fb      	ldr	r3, [r7, #28]
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3720      	adds	r7, #32
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}

080105c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b088      	sub	sp, #32
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80105d2:	2311      	movs	r3, #17
 80105d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105d6:	2340      	movs	r3, #64	; 0x40
 80105d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105da:	2300      	movs	r3, #0
 80105dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105e4:	f107 0308 	add.w	r3, r7, #8
 80105e8:	4619      	mov	r1, r3
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f7ff ff52 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80105f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80105f4:	2111      	movs	r1, #17
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 fa1e 	bl	8010a38 <SDMMC_GetCmdResp1>
 80105fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105fe:	69fb      	ldr	r3, [r7, #28]
}
 8010600:	4618      	mov	r0, r3
 8010602:	3720      	adds	r7, #32
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b088      	sub	sp, #32
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010616:	2312      	movs	r3, #18
 8010618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801061a:	2340      	movs	r3, #64	; 0x40
 801061c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801061e:	2300      	movs	r3, #0
 8010620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010626:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010628:	f107 0308 	add.w	r3, r7, #8
 801062c:	4619      	mov	r1, r3
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f7ff ff30 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010634:	f241 3288 	movw	r2, #5000	; 0x1388
 8010638:	2112      	movs	r1, #18
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f000 f9fc 	bl	8010a38 <SDMMC_GetCmdResp1>
 8010640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010642:	69fb      	ldr	r3, [r7, #28]
}
 8010644:	4618      	mov	r0, r3
 8010646:	3720      	adds	r7, #32
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b088      	sub	sp, #32
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801065a:	2318      	movs	r3, #24
 801065c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801065e:	2340      	movs	r3, #64	; 0x40
 8010660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010662:	2300      	movs	r3, #0
 8010664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801066a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801066c:	f107 0308 	add.w	r3, r7, #8
 8010670:	4619      	mov	r1, r3
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f7ff ff0e 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010678:	f241 3288 	movw	r2, #5000	; 0x1388
 801067c:	2118      	movs	r1, #24
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f000 f9da 	bl	8010a38 <SDMMC_GetCmdResp1>
 8010684:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010686:	69fb      	ldr	r3, [r7, #28]
}
 8010688:	4618      	mov	r0, r3
 801068a:	3720      	adds	r7, #32
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}

08010690 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b088      	sub	sp, #32
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801069e:	2319      	movs	r3, #25
 80106a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106a2:	2340      	movs	r3, #64	; 0x40
 80106a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106a6:	2300      	movs	r3, #0
 80106a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106b0:	f107 0308 	add.w	r3, r7, #8
 80106b4:	4619      	mov	r1, r3
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f7ff feec 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80106bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80106c0:	2119      	movs	r1, #25
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f000 f9b8 	bl	8010a38 <SDMMC_GetCmdResp1>
 80106c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106ca:	69fb      	ldr	r3, [r7, #28]
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3720      	adds	r7, #32
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}

080106d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b088      	sub	sp, #32
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80106dc:	2300      	movs	r3, #0
 80106de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80106e0:	230c      	movs	r3, #12
 80106e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106e4:	2340      	movs	r3, #64	; 0x40
 80106e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106e8:	2300      	movs	r3, #0
 80106ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106f2:	f107 0308 	add.w	r3, r7, #8
 80106f6:	4619      	mov	r1, r3
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7ff fecb 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80106fe:	4a05      	ldr	r2, [pc, #20]	; (8010714 <SDMMC_CmdStopTransfer+0x40>)
 8010700:	210c      	movs	r1, #12
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f998 	bl	8010a38 <SDMMC_GetCmdResp1>
 8010708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801070a:	69fb      	ldr	r3, [r7, #28]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3720      	adds	r7, #32
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}
 8010714:	05f5e100 	.word	0x05f5e100

08010718 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b08a      	sub	sp, #40	; 0x28
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010728:	2307      	movs	r3, #7
 801072a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801072c:	2340      	movs	r3, #64	; 0x40
 801072e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010730:	2300      	movs	r3, #0
 8010732:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010738:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801073a:	f107 0310 	add.w	r3, r7, #16
 801073e:	4619      	mov	r1, r3
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f7ff fea7 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010746:	f241 3288 	movw	r2, #5000	; 0x1388
 801074a:	2107      	movs	r1, #7
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f000 f973 	bl	8010a38 <SDMMC_GetCmdResp1>
 8010752:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010756:	4618      	mov	r0, r3
 8010758:	3728      	adds	r7, #40	; 0x28
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801075e:	b580      	push	{r7, lr}
 8010760:	b088      	sub	sp, #32
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010766:	2300      	movs	r3, #0
 8010768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801076a:	2300      	movs	r3, #0
 801076c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801076e:	2300      	movs	r3, #0
 8010770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010772:	2300      	movs	r3, #0
 8010774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801077a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801077c:	f107 0308 	add.w	r3, r7, #8
 8010780:	4619      	mov	r1, r3
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f7ff fe86 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 f92d 	bl	80109e8 <SDMMC_GetCmdError>
 801078e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010790:	69fb      	ldr	r3, [r7, #28]
}
 8010792:	4618      	mov	r0, r3
 8010794:	3720      	adds	r7, #32
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}

0801079a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801079a:	b580      	push	{r7, lr}
 801079c:	b088      	sub	sp, #32
 801079e:	af00      	add	r7, sp, #0
 80107a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80107a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80107a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80107a8:	2308      	movs	r3, #8
 80107aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107ac:	2340      	movs	r3, #64	; 0x40
 80107ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107b0:	2300      	movs	r3, #0
 80107b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107ba:	f107 0308 	add.w	r3, r7, #8
 80107be:	4619      	mov	r1, r3
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f7ff fe67 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f000 fb16 	bl	8010df8 <SDMMC_GetCmdResp7>
 80107cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107ce:	69fb      	ldr	r3, [r7, #28]
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3720      	adds	r7, #32
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b088      	sub	sp, #32
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80107e6:	2337      	movs	r3, #55	; 0x37
 80107e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107ea:	2340      	movs	r3, #64	; 0x40
 80107ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107ee:	2300      	movs	r3, #0
 80107f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107f8:	f107 0308 	add.w	r3, r7, #8
 80107fc:	4619      	mov	r1, r3
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f7ff fe48 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010804:	f241 3288 	movw	r2, #5000	; 0x1388
 8010808:	2137      	movs	r1, #55	; 0x37
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 f914 	bl	8010a38 <SDMMC_GetCmdResp1>
 8010810:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010812:	69fb      	ldr	r3, [r7, #28]
}
 8010814:	4618      	mov	r0, r3
 8010816:	3720      	adds	r7, #32
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}

0801081c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b088      	sub	sp, #32
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801082c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010832:	2329      	movs	r3, #41	; 0x29
 8010834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010836:	2340      	movs	r3, #64	; 0x40
 8010838:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801083a:	2300      	movs	r3, #0
 801083c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801083e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010842:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010844:	f107 0308 	add.w	r3, r7, #8
 8010848:	4619      	mov	r1, r3
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7ff fe22 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f000 fa23 	bl	8010c9c <SDMMC_GetCmdResp3>
 8010856:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010858:	69fb      	ldr	r3, [r7, #28]
}
 801085a:	4618      	mov	r0, r3
 801085c:	3720      	adds	r7, #32
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010862:	b580      	push	{r7, lr}
 8010864:	b088      	sub	sp, #32
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
 801086a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010870:	2306      	movs	r3, #6
 8010872:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010874:	2340      	movs	r3, #64	; 0x40
 8010876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010878:	2300      	movs	r3, #0
 801087a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010880:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010882:	f107 0308 	add.w	r3, r7, #8
 8010886:	4619      	mov	r1, r3
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f7ff fe03 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801088e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010892:	2106      	movs	r1, #6
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 f8cf 	bl	8010a38 <SDMMC_GetCmdResp1>
 801089a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801089c:	69fb      	ldr	r3, [r7, #28]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3720      	adds	r7, #32
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80108a6:	b580      	push	{r7, lr}
 80108a8:	b088      	sub	sp, #32
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80108ae:	2300      	movs	r3, #0
 80108b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80108b2:	2333      	movs	r3, #51	; 0x33
 80108b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108b6:	2340      	movs	r3, #64	; 0x40
 80108b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108ba:	2300      	movs	r3, #0
 80108bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108c4:	f107 0308 	add.w	r3, r7, #8
 80108c8:	4619      	mov	r1, r3
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f7ff fde2 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80108d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80108d4:	2133      	movs	r1, #51	; 0x33
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f000 f8ae 	bl	8010a38 <SDMMC_GetCmdResp1>
 80108dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108de:	69fb      	ldr	r3, [r7, #28]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3720      	adds	r7, #32
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b088      	sub	sp, #32
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80108f0:	2300      	movs	r3, #0
 80108f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80108f4:	2302      	movs	r3, #2
 80108f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80108f8:	23c0      	movs	r3, #192	; 0xc0
 80108fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108fc:	2300      	movs	r3, #0
 80108fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010904:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010906:	f107 0308 	add.w	r3, r7, #8
 801090a:	4619      	mov	r1, r3
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f7ff fdc1 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 f97c 	bl	8010c10 <SDMMC_GetCmdResp2>
 8010918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801091a:	69fb      	ldr	r3, [r7, #28]
}
 801091c:	4618      	mov	r0, r3
 801091e:	3720      	adds	r7, #32
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b088      	sub	sp, #32
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010932:	2309      	movs	r3, #9
 8010934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010936:	23c0      	movs	r3, #192	; 0xc0
 8010938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801093a:	2300      	movs	r3, #0
 801093c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801093e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010942:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010944:	f107 0308 	add.w	r3, r7, #8
 8010948:	4619      	mov	r1, r3
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	f7ff fda2 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 f95d 	bl	8010c10 <SDMMC_GetCmdResp2>
 8010956:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010958:	69fb      	ldr	r3, [r7, #28]
}
 801095a:	4618      	mov	r0, r3
 801095c:	3720      	adds	r7, #32
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010962:	b580      	push	{r7, lr}
 8010964:	b088      	sub	sp, #32
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
 801096a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801096c:	2300      	movs	r3, #0
 801096e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010970:	2303      	movs	r3, #3
 8010972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010974:	2340      	movs	r3, #64	; 0x40
 8010976:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010978:	2300      	movs	r3, #0
 801097a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801097c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010980:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010982:	f107 0308 	add.w	r3, r7, #8
 8010986:	4619      	mov	r1, r3
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f7ff fd83 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801098e:	683a      	ldr	r2, [r7, #0]
 8010990:	2103      	movs	r1, #3
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 f9bc 	bl	8010d10 <SDMMC_GetCmdResp6>
 8010998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801099a:	69fb      	ldr	r3, [r7, #28]
}
 801099c:	4618      	mov	r0, r3
 801099e:	3720      	adds	r7, #32
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}

080109a4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b088      	sub	sp, #32
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80109b2:	230d      	movs	r3, #13
 80109b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109b6:	2340      	movs	r3, #64	; 0x40
 80109b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109ba:	2300      	movs	r3, #0
 80109bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109c4:	f107 0308 	add.w	r3, r7, #8
 80109c8:	4619      	mov	r1, r3
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f7ff fd62 	bl	8010494 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80109d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80109d4:	210d      	movs	r1, #13
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 f82e 	bl	8010a38 <SDMMC_GetCmdResp1>
 80109dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109de:	69fb      	ldr	r3, [r7, #28]
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3720      	adds	r7, #32
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80109e8:	b490      	push	{r4, r7}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80109f0:	4b0f      	ldr	r3, [pc, #60]	; (8010a30 <SDMMC_GetCmdError+0x48>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	4a0f      	ldr	r2, [pc, #60]	; (8010a34 <SDMMC_GetCmdError+0x4c>)
 80109f6:	fba2 2303 	umull	r2, r3, r2, r3
 80109fa:	0a5b      	lsrs	r3, r3, #9
 80109fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a00:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a04:	4623      	mov	r3, r4
 8010a06:	1e5c      	subs	r4, r3, #1
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d102      	bne.n	8010a12 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a10:	e009      	b.n	8010a26 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d0f2      	beq.n	8010a04 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	22c5      	movs	r2, #197	; 0xc5
 8010a22:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010a24:	2300      	movs	r3, #0
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3708      	adds	r7, #8
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bc90      	pop	{r4, r7}
 8010a2e:	4770      	bx	lr
 8010a30:	20000000 	.word	0x20000000
 8010a34:	10624dd3 	.word	0x10624dd3

08010a38 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010a38:	b590      	push	{r4, r7, lr}
 8010a3a:	b087      	sub	sp, #28
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	60f8      	str	r0, [r7, #12]
 8010a40:	460b      	mov	r3, r1
 8010a42:	607a      	str	r2, [r7, #4]
 8010a44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010a46:	4b6f      	ldr	r3, [pc, #444]	; (8010c04 <SDMMC_GetCmdResp1+0x1cc>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4a6f      	ldr	r2, [pc, #444]	; (8010c08 <SDMMC_GetCmdResp1+0x1d0>)
 8010a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8010a50:	0a5b      	lsrs	r3, r3, #9
 8010a52:	687a      	ldr	r2, [r7, #4]
 8010a54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a58:	4623      	mov	r3, r4
 8010a5a:	1e5c      	subs	r4, r3, #1
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d102      	bne.n	8010a66 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a64:	e0c9      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a6a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d0f0      	beq.n	8010a58 <SDMMC_GetCmdResp1+0x20>
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d1eb      	bne.n	8010a58 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a84:	f003 0304 	and.w	r3, r3, #4
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d004      	beq.n	8010a96 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2204      	movs	r2, #4
 8010a90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a92:	2304      	movs	r3, #4
 8010a94:	e0b1      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a9a:	f003 0301 	and.w	r3, r3, #1
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d004      	beq.n	8010aac <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	e0a6      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	22c5      	movs	r2, #197	; 0xc5
 8010ab0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	f7ff fd18 	bl	80104e8 <SDIO_GetCommandResponse>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	461a      	mov	r2, r3
 8010abc:	7afb      	ldrb	r3, [r7, #11]
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d001      	beq.n	8010ac6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	e099      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	68f8      	ldr	r0, [r7, #12]
 8010aca:	f7ff fd1a 	bl	8010502 <SDIO_GetResponse>
 8010ace:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010ad0:	693a      	ldr	r2, [r7, #16]
 8010ad2:	4b4e      	ldr	r3, [pc, #312]	; (8010c0c <SDMMC_GetCmdResp1+0x1d4>)
 8010ad4:	4013      	ands	r3, r2
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d101      	bne.n	8010ade <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010ada:	2300      	movs	r3, #0
 8010adc:	e08d      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	da02      	bge.n	8010aea <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010ae4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010ae8:	e087      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d001      	beq.n	8010af8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010af4:	2340      	movs	r3, #64	; 0x40
 8010af6:	e080      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d001      	beq.n	8010b06 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010b02:	2380      	movs	r3, #128	; 0x80
 8010b04:	e079      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d002      	beq.n	8010b16 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b14:	e071      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d002      	beq.n	8010b26 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b24:	e069      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d002      	beq.n	8010b36 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b34:	e061      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d002      	beq.n	8010b46 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010b40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b44:	e059      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d002      	beq.n	8010b56 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b54:	e051      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d002      	beq.n	8010b66 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b64:	e049      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010b66:	693b      	ldr	r3, [r7, #16]
 8010b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d002      	beq.n	8010b76 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010b70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010b74:	e041      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d002      	beq.n	8010b86 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010b80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b84:	e039      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d002      	beq.n	8010b96 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010b94:	e031      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d002      	beq.n	8010ba6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010ba0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010ba4:	e029      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d002      	beq.n	8010bb6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010bb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010bb4:	e021      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d002      	beq.n	8010bc6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010bc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010bc4:	e019      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d002      	beq.n	8010bd6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010bd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010bd4:	e011      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010bd6:	693b      	ldr	r3, [r7, #16]
 8010bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d002      	beq.n	8010be6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010be0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010be4:	e009      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	f003 0308 	and.w	r3, r3, #8
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d002      	beq.n	8010bf6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010bf0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010bf4:	e001      	b.n	8010bfa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	371c      	adds	r7, #28
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd90      	pop	{r4, r7, pc}
 8010c02:	bf00      	nop
 8010c04:	20000000 	.word	0x20000000
 8010c08:	10624dd3 	.word	0x10624dd3
 8010c0c:	fdffe008 	.word	0xfdffe008

08010c10 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010c10:	b490      	push	{r4, r7}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010c18:	4b1e      	ldr	r3, [pc, #120]	; (8010c94 <SDMMC_GetCmdResp2+0x84>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4a1e      	ldr	r2, [pc, #120]	; (8010c98 <SDMMC_GetCmdResp2+0x88>)
 8010c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8010c22:	0a5b      	lsrs	r3, r3, #9
 8010c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c28:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010c2c:	4623      	mov	r3, r4
 8010c2e:	1e5c      	subs	r4, r3, #1
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d102      	bne.n	8010c3a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c38:	e026      	b.n	8010c88 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c3e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d0f0      	beq.n	8010c2c <SDMMC_GetCmdResp2+0x1c>
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d1eb      	bne.n	8010c2c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c58:	f003 0304 	and.w	r3, r3, #4
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d004      	beq.n	8010c6a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2204      	movs	r2, #4
 8010c64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c66:	2304      	movs	r3, #4
 8010c68:	e00e      	b.n	8010c88 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c6e:	f003 0301 	and.w	r3, r3, #1
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d004      	beq.n	8010c80 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2201      	movs	r2, #1
 8010c7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	e003      	b.n	8010c88 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	22c5      	movs	r2, #197	; 0xc5
 8010c84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010c86:	2300      	movs	r3, #0
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3710      	adds	r7, #16
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bc90      	pop	{r4, r7}
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop
 8010c94:	20000000 	.word	0x20000000
 8010c98:	10624dd3 	.word	0x10624dd3

08010c9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010c9c:	b490      	push	{r4, r7}
 8010c9e:	b084      	sub	sp, #16
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ca4:	4b18      	ldr	r3, [pc, #96]	; (8010d08 <SDMMC_GetCmdResp3+0x6c>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4a18      	ldr	r2, [pc, #96]	; (8010d0c <SDMMC_GetCmdResp3+0x70>)
 8010caa:	fba2 2303 	umull	r2, r3, r2, r3
 8010cae:	0a5b      	lsrs	r3, r3, #9
 8010cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cb4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010cb8:	4623      	mov	r3, r4
 8010cba:	1e5c      	subs	r4, r3, #1
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d102      	bne.n	8010cc6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cc4:	e01b      	b.n	8010cfe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d0f0      	beq.n	8010cb8 <SDMMC_GetCmdResp3+0x1c>
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d1eb      	bne.n	8010cb8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ce4:	f003 0304 	and.w	r3, r3, #4
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d004      	beq.n	8010cf6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2204      	movs	r2, #4
 8010cf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010cf2:	2304      	movs	r3, #4
 8010cf4:	e003      	b.n	8010cfe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	22c5      	movs	r2, #197	; 0xc5
 8010cfa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010cfc:	2300      	movs	r3, #0
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	3710      	adds	r7, #16
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bc90      	pop	{r4, r7}
 8010d06:	4770      	bx	lr
 8010d08:	20000000 	.word	0x20000000
 8010d0c:	10624dd3 	.word	0x10624dd3

08010d10 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010d10:	b590      	push	{r4, r7, lr}
 8010d12:	b087      	sub	sp, #28
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	60f8      	str	r0, [r7, #12]
 8010d18:	460b      	mov	r3, r1
 8010d1a:	607a      	str	r2, [r7, #4]
 8010d1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d1e:	4b34      	ldr	r3, [pc, #208]	; (8010df0 <SDMMC_GetCmdResp6+0xe0>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	4a34      	ldr	r2, [pc, #208]	; (8010df4 <SDMMC_GetCmdResp6+0xe4>)
 8010d24:	fba2 2303 	umull	r2, r3, r2, r3
 8010d28:	0a5b      	lsrs	r3, r3, #9
 8010d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d2e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d32:	4623      	mov	r3, r4
 8010d34:	1e5c      	subs	r4, r3, #1
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d102      	bne.n	8010d40 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d3e:	e052      	b.n	8010de6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d44:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d0f0      	beq.n	8010d32 <SDMMC_GetCmdResp6+0x22>
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d1eb      	bne.n	8010d32 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d5e:	f003 0304 	and.w	r3, r3, #4
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d004      	beq.n	8010d70 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	2204      	movs	r2, #4
 8010d6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d6c:	2304      	movs	r3, #4
 8010d6e:	e03a      	b.n	8010de6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d74:	f003 0301 	and.w	r3, r3, #1
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d004      	beq.n	8010d86 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	2201      	movs	r2, #1
 8010d80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d82:	2301      	movs	r3, #1
 8010d84:	e02f      	b.n	8010de6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010d86:	68f8      	ldr	r0, [r7, #12]
 8010d88:	f7ff fbae 	bl	80104e8 <SDIO_GetCommandResponse>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	461a      	mov	r2, r3
 8010d90:	7afb      	ldrb	r3, [r7, #11]
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d001      	beq.n	8010d9a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d96:	2301      	movs	r3, #1
 8010d98:	e025      	b.n	8010de6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	22c5      	movs	r2, #197	; 0xc5
 8010d9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010da0:	2100      	movs	r1, #0
 8010da2:	68f8      	ldr	r0, [r7, #12]
 8010da4:	f7ff fbad 	bl	8010502 <SDIO_GetResponse>
 8010da8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d106      	bne.n	8010dc2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	0c1b      	lsrs	r3, r3, #16
 8010db8:	b29a      	uxth	r2, r3
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	e011      	b.n	8010de6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d002      	beq.n	8010dd2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010dd0:	e009      	b.n	8010de6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d002      	beq.n	8010de2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010de0:	e001      	b.n	8010de6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	371c      	adds	r7, #28
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd90      	pop	{r4, r7, pc}
 8010dee:	bf00      	nop
 8010df0:	20000000 	.word	0x20000000
 8010df4:	10624dd3 	.word	0x10624dd3

08010df8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010df8:	b490      	push	{r4, r7}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e00:	4b21      	ldr	r3, [pc, #132]	; (8010e88 <SDMMC_GetCmdResp7+0x90>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4a21      	ldr	r2, [pc, #132]	; (8010e8c <SDMMC_GetCmdResp7+0x94>)
 8010e06:	fba2 2303 	umull	r2, r3, r2, r3
 8010e0a:	0a5b      	lsrs	r3, r3, #9
 8010e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e14:	4623      	mov	r3, r4
 8010e16:	1e5c      	subs	r4, r3, #1
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d102      	bne.n	8010e22 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e20:	e02c      	b.n	8010e7c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d0f0      	beq.n	8010e14 <SDMMC_GetCmdResp7+0x1c>
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1eb      	bne.n	8010e14 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e40:	f003 0304 	and.w	r3, r3, #4
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d004      	beq.n	8010e52 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2204      	movs	r2, #4
 8010e4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e4e:	2304      	movs	r3, #4
 8010e50:	e014      	b.n	8010e7c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e56:	f003 0301 	and.w	r3, r3, #1
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d004      	beq.n	8010e68 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2201      	movs	r2, #1
 8010e62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e64:	2301      	movs	r3, #1
 8010e66:	e009      	b.n	8010e7c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d002      	beq.n	8010e7a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2240      	movs	r2, #64	; 0x40
 8010e78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010e7a:	2300      	movs	r3, #0
  
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3710      	adds	r7, #16
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bc90      	pop	{r4, r7}
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop
 8010e88:	20000000 	.word	0x20000000
 8010e8c:	10624dd3 	.word	0x10624dd3

08010e90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010e94:	4904      	ldr	r1, [pc, #16]	; (8010ea8 <MX_FATFS_Init+0x18>)
 8010e96:	4805      	ldr	r0, [pc, #20]	; (8010eac <MX_FATFS_Init+0x1c>)
 8010e98:	f003 fb9c 	bl	80145d4 <FATFS_LinkDriver>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	4b03      	ldr	r3, [pc, #12]	; (8010eb0 <MX_FATFS_Init+0x20>)
 8010ea2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010ea4:	bf00      	nop
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	2004ab08 	.word	0x2004ab08
 8010eac:	08018e90 	.word	0x08018e90
 8010eb0:	2004ab04 	.word	0x2004ab04

08010eb4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010ebe:	f000 f896 	bl	8010fee <BSP_SD_IsDetected>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	2b01      	cmp	r3, #1
 8010ec6:	d001      	beq.n	8010ecc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010ec8:	2301      	movs	r3, #1
 8010eca:	e012      	b.n	8010ef2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010ecc:	480b      	ldr	r0, [pc, #44]	; (8010efc <BSP_SD_Init+0x48>)
 8010ece:	f7fb ffa5 	bl	800ce1c <HAL_SD_Init>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010ed6:	79fb      	ldrb	r3, [r7, #7]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d109      	bne.n	8010ef0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010edc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010ee0:	4806      	ldr	r0, [pc, #24]	; (8010efc <BSP_SD_Init+0x48>)
 8010ee2:	f7fc fd4f 	bl	800d984 <HAL_SD_ConfigWideBusOperation>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d001      	beq.n	8010ef0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010eec:	2301      	movs	r3, #1
 8010eee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010ef0:	79fb      	ldrb	r3, [r7, #7]
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3708      	adds	r7, #8
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}
 8010efa:	bf00      	nop
 8010efc:	2004a904 	.word	0x2004a904

08010f00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b086      	sub	sp, #24
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	60b9      	str	r1, [r7, #8]
 8010f0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	68ba      	ldr	r2, [r7, #8]
 8010f14:	68f9      	ldr	r1, [r7, #12]
 8010f16:	4806      	ldr	r0, [pc, #24]	; (8010f30 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010f18:	f7fc f810 	bl	800cf3c <HAL_SD_ReadBlocks_DMA>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d001      	beq.n	8010f26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010f22:	2301      	movs	r3, #1
 8010f24:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3718      	adds	r7, #24
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}
 8010f30:	2004a904 	.word	0x2004a904

08010f34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b086      	sub	sp, #24
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	60b9      	str	r1, [r7, #8]
 8010f3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010f40:	2300      	movs	r3, #0
 8010f42:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	68f9      	ldr	r1, [r7, #12]
 8010f4a:	4806      	ldr	r0, [pc, #24]	; (8010f64 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010f4c:	f7fc f8de 	bl	800d10c <HAL_SD_WriteBlocks_DMA>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d001      	beq.n	8010f5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010f56:	2301      	movs	r3, #1
 8010f58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	3718      	adds	r7, #24
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}
 8010f64:	2004a904 	.word	0x2004a904

08010f68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010f6c:	4805      	ldr	r0, [pc, #20]	; (8010f84 <BSP_SD_GetCardState+0x1c>)
 8010f6e:	f7fc fd85 	bl	800da7c <HAL_SD_GetCardState>
 8010f72:	4603      	mov	r3, r0
 8010f74:	2b04      	cmp	r3, #4
 8010f76:	bf14      	ite	ne
 8010f78:	2301      	movne	r3, #1
 8010f7a:	2300      	moveq	r3, #0
 8010f7c:	b2db      	uxtb	r3, r3
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	2004a904 	.word	0x2004a904

08010f88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010f90:	6879      	ldr	r1, [r7, #4]
 8010f92:	4803      	ldr	r0, [pc, #12]	; (8010fa0 <BSP_SD_GetCardInfo+0x18>)
 8010f94:	f7fc fcca 	bl	800d92c <HAL_SD_GetCardInfo>
}
 8010f98:	bf00      	nop
 8010f9a:	3708      	adds	r7, #8
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}
 8010fa0:	2004a904 	.word	0x2004a904

08010fa4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010fac:	f000 f818 	bl	8010fe0 <BSP_SD_AbortCallback>
}
 8010fb0:	bf00      	nop
 8010fb2:	3708      	adds	r7, #8
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010fc0:	f000 f9a8 	bl	8011314 <BSP_SD_WriteCpltCallback>
}
 8010fc4:	bf00      	nop
 8010fc6:	3708      	adds	r7, #8
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010fd4:	f000 f9aa 	bl	801132c <BSP_SD_ReadCpltCallback>
}
 8010fd8:	bf00      	nop
 8010fda:	3708      	adds	r7, #8
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}

08010fe0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	af00      	add	r7, sp, #0

}
 8010fe4:	bf00      	nop
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr

08010fee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b082      	sub	sp, #8
 8010ff2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010ff8:	f000 f80c 	bl	8011014 <BSP_PlatformIsDetected>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d101      	bne.n	8011006 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011002:	2300      	movs	r3, #0
 8011004:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011006:	79fb      	ldrb	r3, [r7, #7]
 8011008:	b2db      	uxtb	r3, r3
}
 801100a:	4618      	mov	r0, r3
 801100c:	3708      	adds	r7, #8
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}
	...

08011014 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801101a:	2301      	movs	r3, #1
 801101c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801101e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011022:	4806      	ldr	r0, [pc, #24]	; (801103c <BSP_PlatformIsDetected+0x28>)
 8011024:	f7fa f87e 	bl	800b124 <HAL_GPIO_ReadPin>
 8011028:	4603      	mov	r3, r0
 801102a:	2b00      	cmp	r3, #0
 801102c:	d001      	beq.n	8011032 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801102e:	2300      	movs	r3, #0
 8011030:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011032:	79fb      	ldrb	r3, [r7, #7]
}
 8011034:	4618      	mov	r0, r3
 8011036:	3708      	adds	r7, #8
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	40020000 	.word	0x40020000

08011040 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011048:	f7f8 fde2 	bl	8009c10 <HAL_GetTick>
 801104c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801104e:	e006      	b.n	801105e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011050:	f7ff ff8a 	bl	8010f68 <BSP_SD_GetCardState>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d101      	bne.n	801105e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801105a:	2300      	movs	r3, #0
 801105c:	e009      	b.n	8011072 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801105e:	f7f8 fdd7 	bl	8009c10 <HAL_GetTick>
 8011062:	4602      	mov	r2, r0
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	1ad3      	subs	r3, r2, r3
 8011068:	687a      	ldr	r2, [r7, #4]
 801106a:	429a      	cmp	r2, r3
 801106c:	d8f0      	bhi.n	8011050 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801106e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011072:	4618      	mov	r0, r3
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
	...

0801107c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	4603      	mov	r3, r0
 8011084:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011086:	4b0b      	ldr	r3, [pc, #44]	; (80110b4 <SD_CheckStatus+0x38>)
 8011088:	2201      	movs	r2, #1
 801108a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801108c:	f7ff ff6c 	bl	8010f68 <BSP_SD_GetCardState>
 8011090:	4603      	mov	r3, r0
 8011092:	2b00      	cmp	r3, #0
 8011094:	d107      	bne.n	80110a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011096:	4b07      	ldr	r3, [pc, #28]	; (80110b4 <SD_CheckStatus+0x38>)
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	b2db      	uxtb	r3, r3
 801109c:	f023 0301 	bic.w	r3, r3, #1
 80110a0:	b2da      	uxtb	r2, r3
 80110a2:	4b04      	ldr	r3, [pc, #16]	; (80110b4 <SD_CheckStatus+0x38>)
 80110a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80110a6:	4b03      	ldr	r3, [pc, #12]	; (80110b4 <SD_CheckStatus+0x38>)
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	b2db      	uxtb	r3, r3
}
 80110ac:	4618      	mov	r0, r3
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	20000009 	.word	0x20000009

080110b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
 80110be:	4603      	mov	r3, r0
 80110c0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80110c2:	f7ff fef7 	bl	8010eb4 <BSP_SD_Init>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d107      	bne.n	80110dc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80110cc:	79fb      	ldrb	r3, [r7, #7]
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7ff ffd4 	bl	801107c <SD_CheckStatus>
 80110d4:	4603      	mov	r3, r0
 80110d6:	461a      	mov	r2, r3
 80110d8:	4b04      	ldr	r3, [pc, #16]	; (80110ec <SD_initialize+0x34>)
 80110da:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80110dc:	4b03      	ldr	r3, [pc, #12]	; (80110ec <SD_initialize+0x34>)
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	b2db      	uxtb	r3, r3
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3708      	adds	r7, #8
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	20000009 	.word	0x20000009

080110f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b082      	sub	sp, #8
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	4603      	mov	r3, r0
 80110f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80110fa:	79fb      	ldrb	r3, [r7, #7]
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7ff ffbd 	bl	801107c <SD_CheckStatus>
 8011102:	4603      	mov	r3, r0
}
 8011104:	4618      	mov	r0, r3
 8011106:	3708      	adds	r7, #8
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}

0801110c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b086      	sub	sp, #24
 8011110:	af00      	add	r7, sp, #0
 8011112:	60b9      	str	r1, [r7, #8]
 8011114:	607a      	str	r2, [r7, #4]
 8011116:	603b      	str	r3, [r7, #0]
 8011118:	4603      	mov	r3, r0
 801111a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801111c:	2301      	movs	r3, #1
 801111e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011120:	f247 5030 	movw	r0, #30000	; 0x7530
 8011124:	f7ff ff8c 	bl	8011040 <SD_CheckStatusWithTimeout>
 8011128:	4603      	mov	r3, r0
 801112a:	2b00      	cmp	r3, #0
 801112c:	da01      	bge.n	8011132 <SD_read+0x26>
  {
    return res;
 801112e:	7dfb      	ldrb	r3, [r7, #23]
 8011130:	e03b      	b.n	80111aa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011132:	683a      	ldr	r2, [r7, #0]
 8011134:	6879      	ldr	r1, [r7, #4]
 8011136:	68b8      	ldr	r0, [r7, #8]
 8011138:	f7ff fee2 	bl	8010f00 <BSP_SD_ReadBlocks_DMA>
 801113c:	4603      	mov	r3, r0
 801113e:	2b00      	cmp	r3, #0
 8011140:	d132      	bne.n	80111a8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011142:	4b1c      	ldr	r3, [pc, #112]	; (80111b4 <SD_read+0xa8>)
 8011144:	2200      	movs	r2, #0
 8011146:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011148:	f7f8 fd62 	bl	8009c10 <HAL_GetTick>
 801114c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801114e:	bf00      	nop
 8011150:	4b18      	ldr	r3, [pc, #96]	; (80111b4 <SD_read+0xa8>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d108      	bne.n	801116a <SD_read+0x5e>
 8011158:	f7f8 fd5a 	bl	8009c10 <HAL_GetTick>
 801115c:	4602      	mov	r2, r0
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	1ad3      	subs	r3, r2, r3
 8011162:	f247 522f 	movw	r2, #29999	; 0x752f
 8011166:	4293      	cmp	r3, r2
 8011168:	d9f2      	bls.n	8011150 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801116a:	4b12      	ldr	r3, [pc, #72]	; (80111b4 <SD_read+0xa8>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d102      	bne.n	8011178 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011172:	2301      	movs	r3, #1
 8011174:	75fb      	strb	r3, [r7, #23]
 8011176:	e017      	b.n	80111a8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011178:	4b0e      	ldr	r3, [pc, #56]	; (80111b4 <SD_read+0xa8>)
 801117a:	2200      	movs	r2, #0
 801117c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801117e:	f7f8 fd47 	bl	8009c10 <HAL_GetTick>
 8011182:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011184:	e007      	b.n	8011196 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011186:	f7ff feef 	bl	8010f68 <BSP_SD_GetCardState>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d102      	bne.n	8011196 <SD_read+0x8a>
          {
            res = RES_OK;
 8011190:	2300      	movs	r3, #0
 8011192:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011194:	e008      	b.n	80111a8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011196:	f7f8 fd3b 	bl	8009c10 <HAL_GetTick>
 801119a:	4602      	mov	r2, r0
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	f247 522f 	movw	r2, #29999	; 0x752f
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d9ee      	bls.n	8011186 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80111a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3718      	adds	r7, #24
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	200481a0 	.word	0x200481a0

080111b8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b086      	sub	sp, #24
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60b9      	str	r1, [r7, #8]
 80111c0:	607a      	str	r2, [r7, #4]
 80111c2:	603b      	str	r3, [r7, #0]
 80111c4:	4603      	mov	r3, r0
 80111c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80111c8:	2301      	movs	r3, #1
 80111ca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80111cc:	4b24      	ldr	r3, [pc, #144]	; (8011260 <SD_write+0xa8>)
 80111ce:	2200      	movs	r2, #0
 80111d0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80111d2:	f247 5030 	movw	r0, #30000	; 0x7530
 80111d6:	f7ff ff33 	bl	8011040 <SD_CheckStatusWithTimeout>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b00      	cmp	r3, #0
 80111de:	da01      	bge.n	80111e4 <SD_write+0x2c>
  {
    return res;
 80111e0:	7dfb      	ldrb	r3, [r7, #23]
 80111e2:	e038      	b.n	8011256 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80111e4:	683a      	ldr	r2, [r7, #0]
 80111e6:	6879      	ldr	r1, [r7, #4]
 80111e8:	68b8      	ldr	r0, [r7, #8]
 80111ea:	f7ff fea3 	bl	8010f34 <BSP_SD_WriteBlocks_DMA>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d12f      	bne.n	8011254 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80111f4:	f7f8 fd0c 	bl	8009c10 <HAL_GetTick>
 80111f8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80111fa:	bf00      	nop
 80111fc:	4b18      	ldr	r3, [pc, #96]	; (8011260 <SD_write+0xa8>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d108      	bne.n	8011216 <SD_write+0x5e>
 8011204:	f7f8 fd04 	bl	8009c10 <HAL_GetTick>
 8011208:	4602      	mov	r2, r0
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	1ad3      	subs	r3, r2, r3
 801120e:	f247 522f 	movw	r2, #29999	; 0x752f
 8011212:	4293      	cmp	r3, r2
 8011214:	d9f2      	bls.n	80111fc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8011216:	4b12      	ldr	r3, [pc, #72]	; (8011260 <SD_write+0xa8>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d102      	bne.n	8011224 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801121e:	2301      	movs	r3, #1
 8011220:	75fb      	strb	r3, [r7, #23]
 8011222:	e017      	b.n	8011254 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011224:	4b0e      	ldr	r3, [pc, #56]	; (8011260 <SD_write+0xa8>)
 8011226:	2200      	movs	r2, #0
 8011228:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801122a:	f7f8 fcf1 	bl	8009c10 <HAL_GetTick>
 801122e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011230:	e007      	b.n	8011242 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011232:	f7ff fe99 	bl	8010f68 <BSP_SD_GetCardState>
 8011236:	4603      	mov	r3, r0
 8011238:	2b00      	cmp	r3, #0
 801123a:	d102      	bne.n	8011242 <SD_write+0x8a>
          {
            res = RES_OK;
 801123c:	2300      	movs	r3, #0
 801123e:	75fb      	strb	r3, [r7, #23]
            break;
 8011240:	e008      	b.n	8011254 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011242:	f7f8 fce5 	bl	8009c10 <HAL_GetTick>
 8011246:	4602      	mov	r2, r0
 8011248:	693b      	ldr	r3, [r7, #16]
 801124a:	1ad3      	subs	r3, r2, r3
 801124c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011250:	4293      	cmp	r3, r2
 8011252:	d9ee      	bls.n	8011232 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011254:	7dfb      	ldrb	r3, [r7, #23]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3718      	adds	r7, #24
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	2004819c 	.word	0x2004819c

08011264 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b08c      	sub	sp, #48	; 0x30
 8011268:	af00      	add	r7, sp, #0
 801126a:	4603      	mov	r3, r0
 801126c:	603a      	str	r2, [r7, #0]
 801126e:	71fb      	strb	r3, [r7, #7]
 8011270:	460b      	mov	r3, r1
 8011272:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011274:	2301      	movs	r3, #1
 8011276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801127a:	4b25      	ldr	r3, [pc, #148]	; (8011310 <SD_ioctl+0xac>)
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	b2db      	uxtb	r3, r3
 8011280:	f003 0301 	and.w	r3, r3, #1
 8011284:	2b00      	cmp	r3, #0
 8011286:	d001      	beq.n	801128c <SD_ioctl+0x28>
 8011288:	2303      	movs	r3, #3
 801128a:	e03c      	b.n	8011306 <SD_ioctl+0xa2>

  switch (cmd)
 801128c:	79bb      	ldrb	r3, [r7, #6]
 801128e:	2b03      	cmp	r3, #3
 8011290:	d834      	bhi.n	80112fc <SD_ioctl+0x98>
 8011292:	a201      	add	r2, pc, #4	; (adr r2, 8011298 <SD_ioctl+0x34>)
 8011294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011298:	080112a9 	.word	0x080112a9
 801129c:	080112b1 	.word	0x080112b1
 80112a0:	080112c9 	.word	0x080112c9
 80112a4:	080112e3 	.word	0x080112e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80112a8:	2300      	movs	r3, #0
 80112aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80112ae:	e028      	b.n	8011302 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80112b0:	f107 030c 	add.w	r3, r7, #12
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7ff fe67 	bl	8010f88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80112ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80112c0:	2300      	movs	r3, #0
 80112c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80112c6:	e01c      	b.n	8011302 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80112c8:	f107 030c 	add.w	r3, r7, #12
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7ff fe5b 	bl	8010f88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80112d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d4:	b29a      	uxth	r2, r3
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80112da:	2300      	movs	r3, #0
 80112dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80112e0:	e00f      	b.n	8011302 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80112e2:	f107 030c 	add.w	r3, r7, #12
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7ff fe4e 	bl	8010f88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80112ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ee:	0a5a      	lsrs	r2, r3, #9
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80112f4:	2300      	movs	r3, #0
 80112f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80112fa:	e002      	b.n	8011302 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80112fc:	2304      	movs	r3, #4
 80112fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011306:	4618      	mov	r0, r3
 8011308:	3730      	adds	r7, #48	; 0x30
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	20000009 	.word	0x20000009

08011314 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011314:	b480      	push	{r7}
 8011316:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011318:	4b03      	ldr	r3, [pc, #12]	; (8011328 <BSP_SD_WriteCpltCallback+0x14>)
 801131a:	2201      	movs	r2, #1
 801131c:	601a      	str	r2, [r3, #0]
}
 801131e:	bf00      	nop
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr
 8011328:	2004819c 	.word	0x2004819c

0801132c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801132c:	b480      	push	{r7}
 801132e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011330:	4b03      	ldr	r3, [pc, #12]	; (8011340 <BSP_SD_ReadCpltCallback+0x14>)
 8011332:	2201      	movs	r2, #1
 8011334:	601a      	str	r2, [r3, #0]
}
 8011336:	bf00      	nop
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr
 8011340:	200481a0 	.word	0x200481a0

08011344 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	4603      	mov	r3, r0
 801134c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801134e:	79fb      	ldrb	r3, [r7, #7]
 8011350:	4a08      	ldr	r2, [pc, #32]	; (8011374 <disk_status+0x30>)
 8011352:	009b      	lsls	r3, r3, #2
 8011354:	4413      	add	r3, r2
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	79fa      	ldrb	r2, [r7, #7]
 801135c:	4905      	ldr	r1, [pc, #20]	; (8011374 <disk_status+0x30>)
 801135e:	440a      	add	r2, r1
 8011360:	7a12      	ldrb	r2, [r2, #8]
 8011362:	4610      	mov	r0, r2
 8011364:	4798      	blx	r3
 8011366:	4603      	mov	r3, r0
 8011368:	73fb      	strb	r3, [r7, #15]
  return stat;
 801136a:	7bfb      	ldrb	r3, [r7, #15]
}
 801136c:	4618      	mov	r0, r3
 801136e:	3710      	adds	r7, #16
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}
 8011374:	200481cc 	.word	0x200481cc

08011378 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	4603      	mov	r3, r0
 8011380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011382:	2300      	movs	r3, #0
 8011384:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011386:	79fb      	ldrb	r3, [r7, #7]
 8011388:	4a0d      	ldr	r2, [pc, #52]	; (80113c0 <disk_initialize+0x48>)
 801138a:	5cd3      	ldrb	r3, [r2, r3]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d111      	bne.n	80113b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011390:	79fb      	ldrb	r3, [r7, #7]
 8011392:	4a0b      	ldr	r2, [pc, #44]	; (80113c0 <disk_initialize+0x48>)
 8011394:	2101      	movs	r1, #1
 8011396:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011398:	79fb      	ldrb	r3, [r7, #7]
 801139a:	4a09      	ldr	r2, [pc, #36]	; (80113c0 <disk_initialize+0x48>)
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	4413      	add	r3, r2
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	79fa      	ldrb	r2, [r7, #7]
 80113a6:	4906      	ldr	r1, [pc, #24]	; (80113c0 <disk_initialize+0x48>)
 80113a8:	440a      	add	r2, r1
 80113aa:	7a12      	ldrb	r2, [r2, #8]
 80113ac:	4610      	mov	r0, r2
 80113ae:	4798      	blx	r3
 80113b0:	4603      	mov	r3, r0
 80113b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80113b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3710      	adds	r7, #16
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	200481cc 	.word	0x200481cc

080113c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80113c4:	b590      	push	{r4, r7, lr}
 80113c6:	b087      	sub	sp, #28
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60b9      	str	r1, [r7, #8]
 80113cc:	607a      	str	r2, [r7, #4]
 80113ce:	603b      	str	r3, [r7, #0]
 80113d0:	4603      	mov	r3, r0
 80113d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80113d4:	7bfb      	ldrb	r3, [r7, #15]
 80113d6:	4a0a      	ldr	r2, [pc, #40]	; (8011400 <disk_read+0x3c>)
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	4413      	add	r3, r2
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	689c      	ldr	r4, [r3, #8]
 80113e0:	7bfb      	ldrb	r3, [r7, #15]
 80113e2:	4a07      	ldr	r2, [pc, #28]	; (8011400 <disk_read+0x3c>)
 80113e4:	4413      	add	r3, r2
 80113e6:	7a18      	ldrb	r0, [r3, #8]
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	687a      	ldr	r2, [r7, #4]
 80113ec:	68b9      	ldr	r1, [r7, #8]
 80113ee:	47a0      	blx	r4
 80113f0:	4603      	mov	r3, r0
 80113f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80113f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	371c      	adds	r7, #28
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd90      	pop	{r4, r7, pc}
 80113fe:	bf00      	nop
 8011400:	200481cc 	.word	0x200481cc

08011404 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011404:	b590      	push	{r4, r7, lr}
 8011406:	b087      	sub	sp, #28
 8011408:	af00      	add	r7, sp, #0
 801140a:	60b9      	str	r1, [r7, #8]
 801140c:	607a      	str	r2, [r7, #4]
 801140e:	603b      	str	r3, [r7, #0]
 8011410:	4603      	mov	r3, r0
 8011412:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011414:	7bfb      	ldrb	r3, [r7, #15]
 8011416:	4a0a      	ldr	r2, [pc, #40]	; (8011440 <disk_write+0x3c>)
 8011418:	009b      	lsls	r3, r3, #2
 801141a:	4413      	add	r3, r2
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	68dc      	ldr	r4, [r3, #12]
 8011420:	7bfb      	ldrb	r3, [r7, #15]
 8011422:	4a07      	ldr	r2, [pc, #28]	; (8011440 <disk_write+0x3c>)
 8011424:	4413      	add	r3, r2
 8011426:	7a18      	ldrb	r0, [r3, #8]
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	68b9      	ldr	r1, [r7, #8]
 801142e:	47a0      	blx	r4
 8011430:	4603      	mov	r3, r0
 8011432:	75fb      	strb	r3, [r7, #23]
  return res;
 8011434:	7dfb      	ldrb	r3, [r7, #23]
}
 8011436:	4618      	mov	r0, r3
 8011438:	371c      	adds	r7, #28
 801143a:	46bd      	mov	sp, r7
 801143c:	bd90      	pop	{r4, r7, pc}
 801143e:	bf00      	nop
 8011440:	200481cc 	.word	0x200481cc

08011444 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	4603      	mov	r3, r0
 801144c:	603a      	str	r2, [r7, #0]
 801144e:	71fb      	strb	r3, [r7, #7]
 8011450:	460b      	mov	r3, r1
 8011452:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011454:	79fb      	ldrb	r3, [r7, #7]
 8011456:	4a09      	ldr	r2, [pc, #36]	; (801147c <disk_ioctl+0x38>)
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	4413      	add	r3, r2
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	691b      	ldr	r3, [r3, #16]
 8011460:	79fa      	ldrb	r2, [r7, #7]
 8011462:	4906      	ldr	r1, [pc, #24]	; (801147c <disk_ioctl+0x38>)
 8011464:	440a      	add	r2, r1
 8011466:	7a10      	ldrb	r0, [r2, #8]
 8011468:	79b9      	ldrb	r1, [r7, #6]
 801146a:	683a      	ldr	r2, [r7, #0]
 801146c:	4798      	blx	r3
 801146e:	4603      	mov	r3, r0
 8011470:	73fb      	strb	r3, [r7, #15]
  return res;
 8011472:	7bfb      	ldrb	r3, [r7, #15]
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}
 801147c:	200481cc 	.word	0x200481cc

08011480 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011480:	b480      	push	{r7}
 8011482:	b085      	sub	sp, #20
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	3301      	adds	r3, #1
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011490:	89fb      	ldrh	r3, [r7, #14]
 8011492:	021b      	lsls	r3, r3, #8
 8011494:	b21a      	sxth	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	781b      	ldrb	r3, [r3, #0]
 801149a:	b21b      	sxth	r3, r3
 801149c:	4313      	orrs	r3, r2
 801149e:	b21b      	sxth	r3, r3
 80114a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80114a2:	89fb      	ldrh	r3, [r7, #14]
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3714      	adds	r7, #20
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80114b0:	b480      	push	{r7}
 80114b2:	b085      	sub	sp, #20
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	3303      	adds	r3, #3
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	021b      	lsls	r3, r3, #8
 80114c4:	687a      	ldr	r2, [r7, #4]
 80114c6:	3202      	adds	r2, #2
 80114c8:	7812      	ldrb	r2, [r2, #0]
 80114ca:	4313      	orrs	r3, r2
 80114cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	021b      	lsls	r3, r3, #8
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	3201      	adds	r2, #1
 80114d6:	7812      	ldrb	r2, [r2, #0]
 80114d8:	4313      	orrs	r3, r2
 80114da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	021b      	lsls	r3, r3, #8
 80114e0:	687a      	ldr	r2, [r7, #4]
 80114e2:	7812      	ldrb	r2, [r2, #0]
 80114e4:	4313      	orrs	r3, r2
 80114e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80114e8:	68fb      	ldr	r3, [r7, #12]
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3714      	adds	r7, #20
 80114ee:	46bd      	mov	sp, r7
 80114f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f4:	4770      	bx	lr

080114f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80114f6:	b480      	push	{r7}
 80114f8:	b083      	sub	sp, #12
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	6078      	str	r0, [r7, #4]
 80114fe:	460b      	mov	r3, r1
 8011500:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	1c5a      	adds	r2, r3, #1
 8011506:	607a      	str	r2, [r7, #4]
 8011508:	887a      	ldrh	r2, [r7, #2]
 801150a:	b2d2      	uxtb	r2, r2
 801150c:	701a      	strb	r2, [r3, #0]
 801150e:	887b      	ldrh	r3, [r7, #2]
 8011510:	0a1b      	lsrs	r3, r3, #8
 8011512:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	1c5a      	adds	r2, r3, #1
 8011518:	607a      	str	r2, [r7, #4]
 801151a:	887a      	ldrh	r2, [r7, #2]
 801151c:	b2d2      	uxtb	r2, r2
 801151e:	701a      	strb	r2, [r3, #0]
}
 8011520:	bf00      	nop
 8011522:	370c      	adds	r7, #12
 8011524:	46bd      	mov	sp, r7
 8011526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152a:	4770      	bx	lr

0801152c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801152c:	b480      	push	{r7}
 801152e:	b083      	sub	sp, #12
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
 8011534:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	1c5a      	adds	r2, r3, #1
 801153a:	607a      	str	r2, [r7, #4]
 801153c:	683a      	ldr	r2, [r7, #0]
 801153e:	b2d2      	uxtb	r2, r2
 8011540:	701a      	strb	r2, [r3, #0]
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	0a1b      	lsrs	r3, r3, #8
 8011546:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	1c5a      	adds	r2, r3, #1
 801154c:	607a      	str	r2, [r7, #4]
 801154e:	683a      	ldr	r2, [r7, #0]
 8011550:	b2d2      	uxtb	r2, r2
 8011552:	701a      	strb	r2, [r3, #0]
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	0a1b      	lsrs	r3, r3, #8
 8011558:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	1c5a      	adds	r2, r3, #1
 801155e:	607a      	str	r2, [r7, #4]
 8011560:	683a      	ldr	r2, [r7, #0]
 8011562:	b2d2      	uxtb	r2, r2
 8011564:	701a      	strb	r2, [r3, #0]
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	0a1b      	lsrs	r3, r3, #8
 801156a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	1c5a      	adds	r2, r3, #1
 8011570:	607a      	str	r2, [r7, #4]
 8011572:	683a      	ldr	r2, [r7, #0]
 8011574:	b2d2      	uxtb	r2, r2
 8011576:	701a      	strb	r2, [r3, #0]
}
 8011578:	bf00      	nop
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr

08011584 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011584:	b480      	push	{r7}
 8011586:	b087      	sub	sp, #28
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d00d      	beq.n	80115ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801159e:	693a      	ldr	r2, [r7, #16]
 80115a0:	1c53      	adds	r3, r2, #1
 80115a2:	613b      	str	r3, [r7, #16]
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	1c59      	adds	r1, r3, #1
 80115a8:	6179      	str	r1, [r7, #20]
 80115aa:	7812      	ldrb	r2, [r2, #0]
 80115ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	3b01      	subs	r3, #1
 80115b2:	607b      	str	r3, [r7, #4]
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d1f1      	bne.n	801159e <mem_cpy+0x1a>
	}
}
 80115ba:	bf00      	nop
 80115bc:	371c      	adds	r7, #28
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr

080115c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80115c6:	b480      	push	{r7}
 80115c8:	b087      	sub	sp, #28
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	60f8      	str	r0, [r7, #12]
 80115ce:	60b9      	str	r1, [r7, #8]
 80115d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	1c5a      	adds	r2, r3, #1
 80115da:	617a      	str	r2, [r7, #20]
 80115dc:	68ba      	ldr	r2, [r7, #8]
 80115de:	b2d2      	uxtb	r2, r2
 80115e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	3b01      	subs	r3, #1
 80115e6:	607b      	str	r3, [r7, #4]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d1f3      	bne.n	80115d6 <mem_set+0x10>
}
 80115ee:	bf00      	nop
 80115f0:	371c      	adds	r7, #28
 80115f2:	46bd      	mov	sp, r7
 80115f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f8:	4770      	bx	lr

080115fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80115fa:	b480      	push	{r7}
 80115fc:	b089      	sub	sp, #36	; 0x24
 80115fe:	af00      	add	r7, sp, #0
 8011600:	60f8      	str	r0, [r7, #12]
 8011602:	60b9      	str	r1, [r7, #8]
 8011604:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	61fb      	str	r3, [r7, #28]
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801160e:	2300      	movs	r3, #0
 8011610:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011612:	69fb      	ldr	r3, [r7, #28]
 8011614:	1c5a      	adds	r2, r3, #1
 8011616:	61fa      	str	r2, [r7, #28]
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	4619      	mov	r1, r3
 801161c:	69bb      	ldr	r3, [r7, #24]
 801161e:	1c5a      	adds	r2, r3, #1
 8011620:	61ba      	str	r2, [r7, #24]
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	1acb      	subs	r3, r1, r3
 8011626:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	3b01      	subs	r3, #1
 801162c:	607b      	str	r3, [r7, #4]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d002      	beq.n	801163a <mem_cmp+0x40>
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d0eb      	beq.n	8011612 <mem_cmp+0x18>

	return r;
 801163a:	697b      	ldr	r3, [r7, #20]
}
 801163c:	4618      	mov	r0, r3
 801163e:	3724      	adds	r7, #36	; 0x24
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr

08011648 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011652:	e002      	b.n	801165a <chk_chr+0x12>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	3301      	adds	r3, #1
 8011658:	607b      	str	r3, [r7, #4]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d005      	beq.n	801166e <chk_chr+0x26>
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	461a      	mov	r2, r3
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	4293      	cmp	r3, r2
 801166c:	d1f2      	bne.n	8011654 <chk_chr+0xc>
	return *str;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	781b      	ldrb	r3, [r3, #0]
}
 8011672:	4618      	mov	r0, r3
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr
	...

08011680 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011680:	b480      	push	{r7}
 8011682:	b085      	sub	sp, #20
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801168a:	2300      	movs	r3, #0
 801168c:	60bb      	str	r3, [r7, #8]
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	60fb      	str	r3, [r7, #12]
 8011692:	e029      	b.n	80116e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011694:	4a27      	ldr	r2, [pc, #156]	; (8011734 <chk_lock+0xb4>)
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	011b      	lsls	r3, r3, #4
 801169a:	4413      	add	r3, r2
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d01d      	beq.n	80116de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80116a2:	4a24      	ldr	r2, [pc, #144]	; (8011734 <chk_lock+0xb4>)
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	011b      	lsls	r3, r3, #4
 80116a8:	4413      	add	r3, r2
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d116      	bne.n	80116e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80116b4:	4a1f      	ldr	r2, [pc, #124]	; (8011734 <chk_lock+0xb4>)
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	011b      	lsls	r3, r3, #4
 80116ba:	4413      	add	r3, r2
 80116bc:	3304      	adds	r3, #4
 80116be:	681a      	ldr	r2, [r3, #0]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80116c4:	429a      	cmp	r2, r3
 80116c6:	d10c      	bne.n	80116e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80116c8:	4a1a      	ldr	r2, [pc, #104]	; (8011734 <chk_lock+0xb4>)
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	011b      	lsls	r3, r3, #4
 80116ce:	4413      	add	r3, r2
 80116d0:	3308      	adds	r3, #8
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80116d8:	429a      	cmp	r2, r3
 80116da:	d102      	bne.n	80116e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80116dc:	e007      	b.n	80116ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80116de:	2301      	movs	r3, #1
 80116e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	3301      	adds	r3, #1
 80116e6:	60fb      	str	r3, [r7, #12]
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2b01      	cmp	r3, #1
 80116ec:	d9d2      	bls.n	8011694 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2b02      	cmp	r3, #2
 80116f2:	d109      	bne.n	8011708 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d102      	bne.n	8011700 <chk_lock+0x80>
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	d101      	bne.n	8011704 <chk_lock+0x84>
 8011700:	2300      	movs	r3, #0
 8011702:	e010      	b.n	8011726 <chk_lock+0xa6>
 8011704:	2312      	movs	r3, #18
 8011706:	e00e      	b.n	8011726 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d108      	bne.n	8011720 <chk_lock+0xa0>
 801170e:	4a09      	ldr	r2, [pc, #36]	; (8011734 <chk_lock+0xb4>)
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	011b      	lsls	r3, r3, #4
 8011714:	4413      	add	r3, r2
 8011716:	330c      	adds	r3, #12
 8011718:	881b      	ldrh	r3, [r3, #0]
 801171a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801171e:	d101      	bne.n	8011724 <chk_lock+0xa4>
 8011720:	2310      	movs	r3, #16
 8011722:	e000      	b.n	8011726 <chk_lock+0xa6>
 8011724:	2300      	movs	r3, #0
}
 8011726:	4618      	mov	r0, r3
 8011728:	3714      	adds	r7, #20
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr
 8011732:	bf00      	nop
 8011734:	200481ac 	.word	0x200481ac

08011738 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011738:	b480      	push	{r7}
 801173a:	b083      	sub	sp, #12
 801173c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801173e:	2300      	movs	r3, #0
 8011740:	607b      	str	r3, [r7, #4]
 8011742:	e002      	b.n	801174a <enq_lock+0x12>
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	3301      	adds	r3, #1
 8011748:	607b      	str	r3, [r7, #4]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2b01      	cmp	r3, #1
 801174e:	d806      	bhi.n	801175e <enq_lock+0x26>
 8011750:	4a09      	ldr	r2, [pc, #36]	; (8011778 <enq_lock+0x40>)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	011b      	lsls	r3, r3, #4
 8011756:	4413      	add	r3, r2
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d1f2      	bne.n	8011744 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2b02      	cmp	r3, #2
 8011762:	bf14      	ite	ne
 8011764:	2301      	movne	r3, #1
 8011766:	2300      	moveq	r3, #0
 8011768:	b2db      	uxtb	r3, r3
}
 801176a:	4618      	mov	r0, r3
 801176c:	370c      	adds	r7, #12
 801176e:	46bd      	mov	sp, r7
 8011770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011774:	4770      	bx	lr
 8011776:	bf00      	nop
 8011778:	200481ac 	.word	0x200481ac

0801177c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801177c:	b480      	push	{r7}
 801177e:	b085      	sub	sp, #20
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011786:	2300      	movs	r3, #0
 8011788:	60fb      	str	r3, [r7, #12]
 801178a:	e01f      	b.n	80117cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801178c:	4a41      	ldr	r2, [pc, #260]	; (8011894 <inc_lock+0x118>)
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	011b      	lsls	r3, r3, #4
 8011792:	4413      	add	r3, r2
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	429a      	cmp	r2, r3
 801179c:	d113      	bne.n	80117c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801179e:	4a3d      	ldr	r2, [pc, #244]	; (8011894 <inc_lock+0x118>)
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	011b      	lsls	r3, r3, #4
 80117a4:	4413      	add	r3, r2
 80117a6:	3304      	adds	r3, #4
 80117a8:	681a      	ldr	r2, [r3, #0]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d109      	bne.n	80117c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80117b2:	4a38      	ldr	r2, [pc, #224]	; (8011894 <inc_lock+0x118>)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	011b      	lsls	r3, r3, #4
 80117b8:	4413      	add	r3, r2
 80117ba:	3308      	adds	r3, #8
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d006      	beq.n	80117d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3301      	adds	r3, #1
 80117ca:	60fb      	str	r3, [r7, #12]
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2b01      	cmp	r3, #1
 80117d0:	d9dc      	bls.n	801178c <inc_lock+0x10>
 80117d2:	e000      	b.n	80117d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80117d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	2b02      	cmp	r3, #2
 80117da:	d132      	bne.n	8011842 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80117dc:	2300      	movs	r3, #0
 80117de:	60fb      	str	r3, [r7, #12]
 80117e0:	e002      	b.n	80117e8 <inc_lock+0x6c>
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	3301      	adds	r3, #1
 80117e6:	60fb      	str	r3, [r7, #12]
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d806      	bhi.n	80117fc <inc_lock+0x80>
 80117ee:	4a29      	ldr	r2, [pc, #164]	; (8011894 <inc_lock+0x118>)
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	011b      	lsls	r3, r3, #4
 80117f4:	4413      	add	r3, r2
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d1f2      	bne.n	80117e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	2b02      	cmp	r3, #2
 8011800:	d101      	bne.n	8011806 <inc_lock+0x8a>
 8011802:	2300      	movs	r3, #0
 8011804:	e040      	b.n	8011888 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	4922      	ldr	r1, [pc, #136]	; (8011894 <inc_lock+0x118>)
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	011b      	lsls	r3, r3, #4
 8011810:	440b      	add	r3, r1
 8011812:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	689a      	ldr	r2, [r3, #8]
 8011818:	491e      	ldr	r1, [pc, #120]	; (8011894 <inc_lock+0x118>)
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	011b      	lsls	r3, r3, #4
 801181e:	440b      	add	r3, r1
 8011820:	3304      	adds	r3, #4
 8011822:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	695a      	ldr	r2, [r3, #20]
 8011828:	491a      	ldr	r1, [pc, #104]	; (8011894 <inc_lock+0x118>)
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	011b      	lsls	r3, r3, #4
 801182e:	440b      	add	r3, r1
 8011830:	3308      	adds	r3, #8
 8011832:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011834:	4a17      	ldr	r2, [pc, #92]	; (8011894 <inc_lock+0x118>)
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	011b      	lsls	r3, r3, #4
 801183a:	4413      	add	r3, r2
 801183c:	330c      	adds	r3, #12
 801183e:	2200      	movs	r2, #0
 8011840:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d009      	beq.n	801185c <inc_lock+0xe0>
 8011848:	4a12      	ldr	r2, [pc, #72]	; (8011894 <inc_lock+0x118>)
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	011b      	lsls	r3, r3, #4
 801184e:	4413      	add	r3, r2
 8011850:	330c      	adds	r3, #12
 8011852:	881b      	ldrh	r3, [r3, #0]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d001      	beq.n	801185c <inc_lock+0xe0>
 8011858:	2300      	movs	r3, #0
 801185a:	e015      	b.n	8011888 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d108      	bne.n	8011874 <inc_lock+0xf8>
 8011862:	4a0c      	ldr	r2, [pc, #48]	; (8011894 <inc_lock+0x118>)
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	011b      	lsls	r3, r3, #4
 8011868:	4413      	add	r3, r2
 801186a:	330c      	adds	r3, #12
 801186c:	881b      	ldrh	r3, [r3, #0]
 801186e:	3301      	adds	r3, #1
 8011870:	b29a      	uxth	r2, r3
 8011872:	e001      	b.n	8011878 <inc_lock+0xfc>
 8011874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011878:	4906      	ldr	r1, [pc, #24]	; (8011894 <inc_lock+0x118>)
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	011b      	lsls	r3, r3, #4
 801187e:	440b      	add	r3, r1
 8011880:	330c      	adds	r3, #12
 8011882:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	3301      	adds	r3, #1
}
 8011888:	4618      	mov	r0, r3
 801188a:	3714      	adds	r7, #20
 801188c:	46bd      	mov	sp, r7
 801188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011892:	4770      	bx	lr
 8011894:	200481ac 	.word	0x200481ac

08011898 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011898:	b480      	push	{r7}
 801189a:	b085      	sub	sp, #20
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	3b01      	subs	r3, #1
 80118a4:	607b      	str	r3, [r7, #4]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d825      	bhi.n	80118f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80118ac:	4a17      	ldr	r2, [pc, #92]	; (801190c <dec_lock+0x74>)
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	011b      	lsls	r3, r3, #4
 80118b2:	4413      	add	r3, r2
 80118b4:	330c      	adds	r3, #12
 80118b6:	881b      	ldrh	r3, [r3, #0]
 80118b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80118ba:	89fb      	ldrh	r3, [r7, #14]
 80118bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118c0:	d101      	bne.n	80118c6 <dec_lock+0x2e>
 80118c2:	2300      	movs	r3, #0
 80118c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80118c6:	89fb      	ldrh	r3, [r7, #14]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d002      	beq.n	80118d2 <dec_lock+0x3a>
 80118cc:	89fb      	ldrh	r3, [r7, #14]
 80118ce:	3b01      	subs	r3, #1
 80118d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80118d2:	4a0e      	ldr	r2, [pc, #56]	; (801190c <dec_lock+0x74>)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	011b      	lsls	r3, r3, #4
 80118d8:	4413      	add	r3, r2
 80118da:	330c      	adds	r3, #12
 80118dc:	89fa      	ldrh	r2, [r7, #14]
 80118de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80118e0:	89fb      	ldrh	r3, [r7, #14]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d105      	bne.n	80118f2 <dec_lock+0x5a>
 80118e6:	4a09      	ldr	r2, [pc, #36]	; (801190c <dec_lock+0x74>)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	011b      	lsls	r3, r3, #4
 80118ec:	4413      	add	r3, r2
 80118ee:	2200      	movs	r2, #0
 80118f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80118f2:	2300      	movs	r3, #0
 80118f4:	737b      	strb	r3, [r7, #13]
 80118f6:	e001      	b.n	80118fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80118f8:	2302      	movs	r3, #2
 80118fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80118fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3714      	adds	r7, #20
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr
 801190a:	bf00      	nop
 801190c:	200481ac 	.word	0x200481ac

08011910 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011910:	b480      	push	{r7}
 8011912:	b085      	sub	sp, #20
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011918:	2300      	movs	r3, #0
 801191a:	60fb      	str	r3, [r7, #12]
 801191c:	e010      	b.n	8011940 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801191e:	4a0d      	ldr	r2, [pc, #52]	; (8011954 <clear_lock+0x44>)
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	011b      	lsls	r3, r3, #4
 8011924:	4413      	add	r3, r2
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	687a      	ldr	r2, [r7, #4]
 801192a:	429a      	cmp	r2, r3
 801192c:	d105      	bne.n	801193a <clear_lock+0x2a>
 801192e:	4a09      	ldr	r2, [pc, #36]	; (8011954 <clear_lock+0x44>)
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	011b      	lsls	r3, r3, #4
 8011934:	4413      	add	r3, r2
 8011936:	2200      	movs	r2, #0
 8011938:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	3301      	adds	r3, #1
 801193e:	60fb      	str	r3, [r7, #12]
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2b01      	cmp	r3, #1
 8011944:	d9eb      	bls.n	801191e <clear_lock+0xe>
	}
}
 8011946:	bf00      	nop
 8011948:	3714      	adds	r7, #20
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr
 8011952:	bf00      	nop
 8011954:	200481ac 	.word	0x200481ac

08011958 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b086      	sub	sp, #24
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011960:	2300      	movs	r3, #0
 8011962:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	78db      	ldrb	r3, [r3, #3]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d034      	beq.n	80119d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011970:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	7858      	ldrb	r0, [r3, #1]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801197c:	2301      	movs	r3, #1
 801197e:	697a      	ldr	r2, [r7, #20]
 8011980:	f7ff fd40 	bl	8011404 <disk_write>
 8011984:	4603      	mov	r3, r0
 8011986:	2b00      	cmp	r3, #0
 8011988:	d002      	beq.n	8011990 <sync_window+0x38>
			res = FR_DISK_ERR;
 801198a:	2301      	movs	r3, #1
 801198c:	73fb      	strb	r3, [r7, #15]
 801198e:	e022      	b.n	80119d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2200      	movs	r2, #0
 8011994:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801199a:	697a      	ldr	r2, [r7, #20]
 801199c:	1ad2      	subs	r2, r2, r3
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6a1b      	ldr	r3, [r3, #32]
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d217      	bcs.n	80119d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	789b      	ldrb	r3, [r3, #2]
 80119aa:	613b      	str	r3, [r7, #16]
 80119ac:	e010      	b.n	80119d0 <sync_window+0x78>
					wsect += fs->fsize;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6a1b      	ldr	r3, [r3, #32]
 80119b2:	697a      	ldr	r2, [r7, #20]
 80119b4:	4413      	add	r3, r2
 80119b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	7858      	ldrb	r0, [r3, #1]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80119c2:	2301      	movs	r3, #1
 80119c4:	697a      	ldr	r2, [r7, #20]
 80119c6:	f7ff fd1d 	bl	8011404 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	3b01      	subs	r3, #1
 80119ce:	613b      	str	r3, [r7, #16]
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	2b01      	cmp	r3, #1
 80119d4:	d8eb      	bhi.n	80119ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80119d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3718      	adds	r7, #24
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b084      	sub	sp, #16
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80119ea:	2300      	movs	r3, #0
 80119ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119f2:	683a      	ldr	r2, [r7, #0]
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d01b      	beq.n	8011a30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	f7ff ffad 	bl	8011958 <sync_window>
 80119fe:	4603      	mov	r3, r0
 8011a00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011a02:	7bfb      	ldrb	r3, [r7, #15]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d113      	bne.n	8011a30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	7858      	ldrb	r0, [r3, #1]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a12:	2301      	movs	r3, #1
 8011a14:	683a      	ldr	r2, [r7, #0]
 8011a16:	f7ff fcd5 	bl	80113c4 <disk_read>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d004      	beq.n	8011a2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011a20:	f04f 33ff 	mov.w	r3, #4294967295
 8011a24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011a26:	2301      	movs	r3, #1
 8011a28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	683a      	ldr	r2, [r7, #0]
 8011a2e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3710      	adds	r7, #16
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}
	...

08011a3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b084      	sub	sp, #16
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f7ff ff87 	bl	8011958 <sync_window>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011a4e:	7bfb      	ldrb	r3, [r7, #15]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d159      	bne.n	8011b08 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	2b03      	cmp	r3, #3
 8011a5a:	d149      	bne.n	8011af0 <sync_fs+0xb4>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	791b      	ldrb	r3, [r3, #4]
 8011a60:	2b01      	cmp	r3, #1
 8011a62:	d145      	bne.n	8011af0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	899b      	ldrh	r3, [r3, #12]
 8011a6e:	461a      	mov	r2, r3
 8011a70:	2100      	movs	r1, #0
 8011a72:	f7ff fda8 	bl	80115c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	3338      	adds	r3, #56	; 0x38
 8011a7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011a7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7ff fd37 	bl	80114f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	3338      	adds	r3, #56	; 0x38
 8011a8c:	4921      	ldr	r1, [pc, #132]	; (8011b14 <sync_fs+0xd8>)
 8011a8e:	4618      	mov	r0, r3
 8011a90:	f7ff fd4c 	bl	801152c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	3338      	adds	r3, #56	; 0x38
 8011a98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011a9c:	491e      	ldr	r1, [pc, #120]	; (8011b18 <sync_fs+0xdc>)
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7ff fd44 	bl	801152c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	3338      	adds	r3, #56	; 0x38
 8011aa8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	695b      	ldr	r3, [r3, #20]
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	4610      	mov	r0, r2
 8011ab4:	f7ff fd3a 	bl	801152c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	3338      	adds	r3, #56	; 0x38
 8011abc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	691b      	ldr	r3, [r3, #16]
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	4610      	mov	r0, r2
 8011ac8:	f7ff fd30 	bl	801152c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad0:	1c5a      	adds	r2, r3, #1
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	7858      	ldrb	r0, [r3, #1]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	f7ff fc8d 	bl	8011404 <disk_write>
			fs->fsi_flag = 0;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2200      	movs	r2, #0
 8011aee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	785b      	ldrb	r3, [r3, #1]
 8011af4:	2200      	movs	r2, #0
 8011af6:	2100      	movs	r1, #0
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7ff fca3 	bl	8011444 <disk_ioctl>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d001      	beq.n	8011b08 <sync_fs+0xcc>
 8011b04:	2301      	movs	r3, #1
 8011b06:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3710      	adds	r7, #16
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	41615252 	.word	0x41615252
 8011b18:	61417272 	.word	0x61417272

08011b1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b083      	sub	sp, #12
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	3b02      	subs	r3, #2
 8011b2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	69db      	ldr	r3, [r3, #28]
 8011b30:	3b02      	subs	r3, #2
 8011b32:	683a      	ldr	r2, [r7, #0]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d301      	bcc.n	8011b3c <clust2sect+0x20>
 8011b38:	2300      	movs	r3, #0
 8011b3a:	e008      	b.n	8011b4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	895b      	ldrh	r3, [r3, #10]
 8011b40:	461a      	mov	r2, r3
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	fb03 f202 	mul.w	r2, r3, r2
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b4c:	4413      	add	r3, r2
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	370c      	adds	r7, #12
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr

08011b5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011b5a:	b580      	push	{r7, lr}
 8011b5c:	b086      	sub	sp, #24
 8011b5e:	af00      	add	r7, sp, #0
 8011b60:	6078      	str	r0, [r7, #4]
 8011b62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d904      	bls.n	8011b7a <get_fat+0x20>
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	69db      	ldr	r3, [r3, #28]
 8011b74:	683a      	ldr	r2, [r7, #0]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d302      	bcc.n	8011b80 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	617b      	str	r3, [r7, #20]
 8011b7e:	e0b7      	b.n	8011cf0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011b80:	f04f 33ff 	mov.w	r3, #4294967295
 8011b84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	2b02      	cmp	r3, #2
 8011b8c:	d05a      	beq.n	8011c44 <get_fat+0xea>
 8011b8e:	2b03      	cmp	r3, #3
 8011b90:	d07d      	beq.n	8011c8e <get_fat+0x134>
 8011b92:	2b01      	cmp	r3, #1
 8011b94:	f040 80a2 	bne.w	8011cdc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	60fb      	str	r3, [r7, #12]
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	085b      	lsrs	r3, r3, #1
 8011ba0:	68fa      	ldr	r2, [r7, #12]
 8011ba2:	4413      	add	r3, r2
 8011ba4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ba6:	693b      	ldr	r3, [r7, #16]
 8011ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	899b      	ldrh	r3, [r3, #12]
 8011bae:	4619      	mov	r1, r3
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bb6:	4413      	add	r3, r2
 8011bb8:	4619      	mov	r1, r3
 8011bba:	6938      	ldr	r0, [r7, #16]
 8011bbc:	f7ff ff10 	bl	80119e0 <move_window>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f040 808d 	bne.w	8011ce2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	1c5a      	adds	r2, r3, #1
 8011bcc:	60fa      	str	r2, [r7, #12]
 8011bce:	693a      	ldr	r2, [r7, #16]
 8011bd0:	8992      	ldrh	r2, [r2, #12]
 8011bd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011bd6:	fb02 f201 	mul.w	r2, r2, r1
 8011bda:	1a9b      	subs	r3, r3, r2
 8011bdc:	693a      	ldr	r2, [r7, #16]
 8011bde:	4413      	add	r3, r2
 8011be0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011be4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	899b      	ldrh	r3, [r3, #12]
 8011bee:	4619      	mov	r1, r3
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bf6:	4413      	add	r3, r2
 8011bf8:	4619      	mov	r1, r3
 8011bfa:	6938      	ldr	r0, [r7, #16]
 8011bfc:	f7ff fef0 	bl	80119e0 <move_window>
 8011c00:	4603      	mov	r3, r0
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d16f      	bne.n	8011ce6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	899b      	ldrh	r3, [r3, #12]
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c12:	fb02 f201 	mul.w	r2, r2, r1
 8011c16:	1a9b      	subs	r3, r3, r2
 8011c18:	693a      	ldr	r2, [r7, #16]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011c20:	021b      	lsls	r3, r3, #8
 8011c22:	461a      	mov	r2, r3
 8011c24:	68bb      	ldr	r3, [r7, #8]
 8011c26:	4313      	orrs	r3, r2
 8011c28:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	f003 0301 	and.w	r3, r3, #1
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d002      	beq.n	8011c3a <get_fat+0xe0>
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	091b      	lsrs	r3, r3, #4
 8011c38:	e002      	b.n	8011c40 <get_fat+0xe6>
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011c40:	617b      	str	r3, [r7, #20]
			break;
 8011c42:	e055      	b.n	8011cf0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	899b      	ldrh	r3, [r3, #12]
 8011c4c:	085b      	lsrs	r3, r3, #1
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	4619      	mov	r1, r3
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c58:	4413      	add	r3, r2
 8011c5a:	4619      	mov	r1, r3
 8011c5c:	6938      	ldr	r0, [r7, #16]
 8011c5e:	f7ff febf 	bl	80119e0 <move_window>
 8011c62:	4603      	mov	r3, r0
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d140      	bne.n	8011cea <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	005b      	lsls	r3, r3, #1
 8011c72:	693a      	ldr	r2, [r7, #16]
 8011c74:	8992      	ldrh	r2, [r2, #12]
 8011c76:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c7a:	fb02 f200 	mul.w	r2, r2, r0
 8011c7e:	1a9b      	subs	r3, r3, r2
 8011c80:	440b      	add	r3, r1
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7ff fbfc 	bl	8011480 <ld_word>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	617b      	str	r3, [r7, #20]
			break;
 8011c8c:	e030      	b.n	8011cf0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c92:	693b      	ldr	r3, [r7, #16]
 8011c94:	899b      	ldrh	r3, [r3, #12]
 8011c96:	089b      	lsrs	r3, r3, #2
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	4619      	mov	r1, r3
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ca2:	4413      	add	r3, r2
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	6938      	ldr	r0, [r7, #16]
 8011ca8:	f7ff fe9a 	bl	80119e0 <move_window>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d11d      	bne.n	8011cee <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	693a      	ldr	r2, [r7, #16]
 8011cbe:	8992      	ldrh	r2, [r2, #12]
 8011cc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cc4:	fb02 f200 	mul.w	r2, r2, r0
 8011cc8:	1a9b      	subs	r3, r3, r2
 8011cca:	440b      	add	r3, r1
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7ff fbef 	bl	80114b0 <ld_dword>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011cd8:	617b      	str	r3, [r7, #20]
			break;
 8011cda:	e009      	b.n	8011cf0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011cdc:	2301      	movs	r3, #1
 8011cde:	617b      	str	r3, [r7, #20]
 8011ce0:	e006      	b.n	8011cf0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ce2:	bf00      	nop
 8011ce4:	e004      	b.n	8011cf0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ce6:	bf00      	nop
 8011ce8:	e002      	b.n	8011cf0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011cea:	bf00      	nop
 8011cec:	e000      	b.n	8011cf0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011cee:	bf00      	nop
		}
	}

	return val;
 8011cf0:	697b      	ldr	r3, [r7, #20]
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3718      	adds	r7, #24
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}

08011cfa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011cfa:	b590      	push	{r4, r7, lr}
 8011cfc:	b089      	sub	sp, #36	; 0x24
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	60f8      	str	r0, [r7, #12]
 8011d02:	60b9      	str	r1, [r7, #8]
 8011d04:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011d06:	2302      	movs	r3, #2
 8011d08:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	f240 8106 	bls.w	8011f1e <put_fat+0x224>
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	69db      	ldr	r3, [r3, #28]
 8011d16:	68ba      	ldr	r2, [r7, #8]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	f080 8100 	bcs.w	8011f1e <put_fat+0x224>
		switch (fs->fs_type) {
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	2b02      	cmp	r3, #2
 8011d24:	f000 8088 	beq.w	8011e38 <put_fat+0x13e>
 8011d28:	2b03      	cmp	r3, #3
 8011d2a:	f000 80b0 	beq.w	8011e8e <put_fat+0x194>
 8011d2e:	2b01      	cmp	r3, #1
 8011d30:	f040 80f5 	bne.w	8011f1e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	61bb      	str	r3, [r7, #24]
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	085b      	lsrs	r3, r3, #1
 8011d3c:	69ba      	ldr	r2, [r7, #24]
 8011d3e:	4413      	add	r3, r2
 8011d40:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	899b      	ldrh	r3, [r3, #12]
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	69bb      	ldr	r3, [r7, #24]
 8011d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d52:	4413      	add	r3, r2
 8011d54:	4619      	mov	r1, r3
 8011d56:	68f8      	ldr	r0, [r7, #12]
 8011d58:	f7ff fe42 	bl	80119e0 <move_window>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011d60:	7ffb      	ldrb	r3, [r7, #31]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	f040 80d4 	bne.w	8011f10 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d6e:	69bb      	ldr	r3, [r7, #24]
 8011d70:	1c5a      	adds	r2, r3, #1
 8011d72:	61ba      	str	r2, [r7, #24]
 8011d74:	68fa      	ldr	r2, [r7, #12]
 8011d76:	8992      	ldrh	r2, [r2, #12]
 8011d78:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d7c:	fb02 f200 	mul.w	r2, r2, r0
 8011d80:	1a9b      	subs	r3, r3, r2
 8011d82:	440b      	add	r3, r1
 8011d84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	f003 0301 	and.w	r3, r3, #1
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d00d      	beq.n	8011dac <put_fat+0xb2>
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	781b      	ldrb	r3, [r3, #0]
 8011d94:	b25b      	sxtb	r3, r3
 8011d96:	f003 030f 	and.w	r3, r3, #15
 8011d9a:	b25a      	sxtb	r2, r3
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	b2db      	uxtb	r3, r3
 8011da0:	011b      	lsls	r3, r3, #4
 8011da2:	b25b      	sxtb	r3, r3
 8011da4:	4313      	orrs	r3, r2
 8011da6:	b25b      	sxtb	r3, r3
 8011da8:	b2db      	uxtb	r3, r3
 8011daa:	e001      	b.n	8011db0 <put_fat+0xb6>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	697a      	ldr	r2, [r7, #20]
 8011db2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	2201      	movs	r2, #1
 8011db8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	899b      	ldrh	r3, [r3, #12]
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dca:	4413      	add	r3, r2
 8011dcc:	4619      	mov	r1, r3
 8011dce:	68f8      	ldr	r0, [r7, #12]
 8011dd0:	f7ff fe06 	bl	80119e0 <move_window>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011dd8:	7ffb      	ldrb	r3, [r7, #31]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	f040 809a 	bne.w	8011f14 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	899b      	ldrh	r3, [r3, #12]
 8011dea:	461a      	mov	r2, r3
 8011dec:	69bb      	ldr	r3, [r7, #24]
 8011dee:	fbb3 f0f2 	udiv	r0, r3, r2
 8011df2:	fb02 f200 	mul.w	r2, r2, r0
 8011df6:	1a9b      	subs	r3, r3, r2
 8011df8:	440b      	add	r3, r1
 8011dfa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	f003 0301 	and.w	r3, r3, #1
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d003      	beq.n	8011e0e <put_fat+0x114>
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	091b      	lsrs	r3, r3, #4
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	e00e      	b.n	8011e2c <put_fat+0x132>
 8011e0e:	697b      	ldr	r3, [r7, #20]
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	b25b      	sxtb	r3, r3
 8011e14:	f023 030f 	bic.w	r3, r3, #15
 8011e18:	b25a      	sxtb	r2, r3
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	0a1b      	lsrs	r3, r3, #8
 8011e1e:	b25b      	sxtb	r3, r3
 8011e20:	f003 030f 	and.w	r3, r3, #15
 8011e24:	b25b      	sxtb	r3, r3
 8011e26:	4313      	orrs	r3, r2
 8011e28:	b25b      	sxtb	r3, r3
 8011e2a:	b2db      	uxtb	r3, r3
 8011e2c:	697a      	ldr	r2, [r7, #20]
 8011e2e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2201      	movs	r2, #1
 8011e34:	70da      	strb	r2, [r3, #3]
			break;
 8011e36:	e072      	b.n	8011f1e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	899b      	ldrh	r3, [r3, #12]
 8011e40:	085b      	lsrs	r3, r3, #1
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	4619      	mov	r1, r3
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e4c:	4413      	add	r3, r2
 8011e4e:	4619      	mov	r1, r3
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f7ff fdc5 	bl	80119e0 <move_window>
 8011e56:	4603      	mov	r3, r0
 8011e58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e5a:	7ffb      	ldrb	r3, [r7, #31]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d15b      	bne.n	8011f18 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	005b      	lsls	r3, r3, #1
 8011e6a:	68fa      	ldr	r2, [r7, #12]
 8011e6c:	8992      	ldrh	r2, [r2, #12]
 8011e6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e72:	fb02 f200 	mul.w	r2, r2, r0
 8011e76:	1a9b      	subs	r3, r3, r2
 8011e78:	440b      	add	r3, r1
 8011e7a:	687a      	ldr	r2, [r7, #4]
 8011e7c:	b292      	uxth	r2, r2
 8011e7e:	4611      	mov	r1, r2
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7ff fb38 	bl	80114f6 <st_word>
			fs->wflag = 1;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	2201      	movs	r2, #1
 8011e8a:	70da      	strb	r2, [r3, #3]
			break;
 8011e8c:	e047      	b.n	8011f1e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	899b      	ldrh	r3, [r3, #12]
 8011e96:	089b      	lsrs	r3, r3, #2
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ea2:	4413      	add	r3, r2
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	68f8      	ldr	r0, [r7, #12]
 8011ea8:	f7ff fd9a 	bl	80119e0 <move_window>
 8011eac:	4603      	mov	r3, r0
 8011eae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011eb0:	7ffb      	ldrb	r3, [r7, #31]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d132      	bne.n	8011f1c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	009b      	lsls	r3, r3, #2
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	8992      	ldrh	r2, [r2, #12]
 8011eca:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ece:	fb02 f200 	mul.w	r2, r2, r0
 8011ed2:	1a9b      	subs	r3, r3, r2
 8011ed4:	440b      	add	r3, r1
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7ff faea 	bl	80114b0 <ld_dword>
 8011edc:	4603      	mov	r3, r0
 8011ede:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011ee2:	4323      	orrs	r3, r4
 8011ee4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	009b      	lsls	r3, r3, #2
 8011ef0:	68fa      	ldr	r2, [r7, #12]
 8011ef2:	8992      	ldrh	r2, [r2, #12]
 8011ef4:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ef8:	fb02 f200 	mul.w	r2, r2, r0
 8011efc:	1a9b      	subs	r3, r3, r2
 8011efe:	440b      	add	r3, r1
 8011f00:	6879      	ldr	r1, [r7, #4]
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7ff fb12 	bl	801152c <st_dword>
			fs->wflag = 1;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	70da      	strb	r2, [r3, #3]
			break;
 8011f0e:	e006      	b.n	8011f1e <put_fat+0x224>
			if (res != FR_OK) break;
 8011f10:	bf00      	nop
 8011f12:	e004      	b.n	8011f1e <put_fat+0x224>
			if (res != FR_OK) break;
 8011f14:	bf00      	nop
 8011f16:	e002      	b.n	8011f1e <put_fat+0x224>
			if (res != FR_OK) break;
 8011f18:	bf00      	nop
 8011f1a:	e000      	b.n	8011f1e <put_fat+0x224>
			if (res != FR_OK) break;
 8011f1c:	bf00      	nop
		}
	}
	return res;
 8011f1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3724      	adds	r7, #36	; 0x24
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd90      	pop	{r4, r7, pc}

08011f28 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b088      	sub	sp, #32
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	60f8      	str	r0, [r7, #12]
 8011f30:	60b9      	str	r1, [r7, #8]
 8011f32:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011f34:	2300      	movs	r3, #0
 8011f36:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d904      	bls.n	8011f4e <remove_chain+0x26>
 8011f44:	69bb      	ldr	r3, [r7, #24]
 8011f46:	69db      	ldr	r3, [r3, #28]
 8011f48:	68ba      	ldr	r2, [r7, #8]
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d301      	bcc.n	8011f52 <remove_chain+0x2a>
 8011f4e:	2302      	movs	r3, #2
 8011f50:	e04b      	b.n	8011fea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d00c      	beq.n	8011f72 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011f58:	f04f 32ff 	mov.w	r2, #4294967295
 8011f5c:	6879      	ldr	r1, [r7, #4]
 8011f5e:	69b8      	ldr	r0, [r7, #24]
 8011f60:	f7ff fecb 	bl	8011cfa <put_fat>
 8011f64:	4603      	mov	r3, r0
 8011f66:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011f68:	7ffb      	ldrb	r3, [r7, #31]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d001      	beq.n	8011f72 <remove_chain+0x4a>
 8011f6e:	7ffb      	ldrb	r3, [r7, #31]
 8011f70:	e03b      	b.n	8011fea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011f72:	68b9      	ldr	r1, [r7, #8]
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	f7ff fdf0 	bl	8011b5a <get_fat>
 8011f7a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d031      	beq.n	8011fe6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d101      	bne.n	8011f8c <remove_chain+0x64>
 8011f88:	2302      	movs	r3, #2
 8011f8a:	e02e      	b.n	8011fea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f92:	d101      	bne.n	8011f98 <remove_chain+0x70>
 8011f94:	2301      	movs	r3, #1
 8011f96:	e028      	b.n	8011fea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011f98:	2200      	movs	r2, #0
 8011f9a:	68b9      	ldr	r1, [r7, #8]
 8011f9c:	69b8      	ldr	r0, [r7, #24]
 8011f9e:	f7ff feac 	bl	8011cfa <put_fat>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011fa6:	7ffb      	ldrb	r3, [r7, #31]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d001      	beq.n	8011fb0 <remove_chain+0x88>
 8011fac:	7ffb      	ldrb	r3, [r7, #31]
 8011fae:	e01c      	b.n	8011fea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	695a      	ldr	r2, [r3, #20]
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	69db      	ldr	r3, [r3, #28]
 8011fb8:	3b02      	subs	r3, #2
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d20b      	bcs.n	8011fd6 <remove_chain+0xae>
			fs->free_clst++;
 8011fbe:	69bb      	ldr	r3, [r7, #24]
 8011fc0:	695b      	ldr	r3, [r3, #20]
 8011fc2:	1c5a      	adds	r2, r3, #1
 8011fc4:	69bb      	ldr	r3, [r7, #24]
 8011fc6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011fc8:	69bb      	ldr	r3, [r7, #24]
 8011fca:	791b      	ldrb	r3, [r3, #4]
 8011fcc:	f043 0301 	orr.w	r3, r3, #1
 8011fd0:	b2da      	uxtb	r2, r3
 8011fd2:	69bb      	ldr	r3, [r7, #24]
 8011fd4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011fda:	69bb      	ldr	r3, [r7, #24]
 8011fdc:	69db      	ldr	r3, [r3, #28]
 8011fde:	68ba      	ldr	r2, [r7, #8]
 8011fe0:	429a      	cmp	r2, r3
 8011fe2:	d3c6      	bcc.n	8011f72 <remove_chain+0x4a>
 8011fe4:	e000      	b.n	8011fe8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011fe6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011fe8:	2300      	movs	r3, #0
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3720      	adds	r7, #32
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}

08011ff2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011ff2:	b580      	push	{r7, lr}
 8011ff4:	b088      	sub	sp, #32
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	6078      	str	r0, [r7, #4]
 8011ffa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d10d      	bne.n	8012024 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	691b      	ldr	r3, [r3, #16]
 801200c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d004      	beq.n	801201e <create_chain+0x2c>
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	69db      	ldr	r3, [r3, #28]
 8012018:	69ba      	ldr	r2, [r7, #24]
 801201a:	429a      	cmp	r2, r3
 801201c:	d31b      	bcc.n	8012056 <create_chain+0x64>
 801201e:	2301      	movs	r3, #1
 8012020:	61bb      	str	r3, [r7, #24]
 8012022:	e018      	b.n	8012056 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012024:	6839      	ldr	r1, [r7, #0]
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f7ff fd97 	bl	8011b5a <get_fat>
 801202c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	2b01      	cmp	r3, #1
 8012032:	d801      	bhi.n	8012038 <create_chain+0x46>
 8012034:	2301      	movs	r3, #1
 8012036:	e070      	b.n	801211a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801203e:	d101      	bne.n	8012044 <create_chain+0x52>
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	e06a      	b.n	801211a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	69db      	ldr	r3, [r3, #28]
 8012048:	68fa      	ldr	r2, [r7, #12]
 801204a:	429a      	cmp	r2, r3
 801204c:	d201      	bcs.n	8012052 <create_chain+0x60>
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	e063      	b.n	801211a <create_chain+0x128>
		scl = clst;
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801205a:	69fb      	ldr	r3, [r7, #28]
 801205c:	3301      	adds	r3, #1
 801205e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	69db      	ldr	r3, [r3, #28]
 8012064:	69fa      	ldr	r2, [r7, #28]
 8012066:	429a      	cmp	r2, r3
 8012068:	d307      	bcc.n	801207a <create_chain+0x88>
				ncl = 2;
 801206a:	2302      	movs	r3, #2
 801206c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801206e:	69fa      	ldr	r2, [r7, #28]
 8012070:	69bb      	ldr	r3, [r7, #24]
 8012072:	429a      	cmp	r2, r3
 8012074:	d901      	bls.n	801207a <create_chain+0x88>
 8012076:	2300      	movs	r3, #0
 8012078:	e04f      	b.n	801211a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801207a:	69f9      	ldr	r1, [r7, #28]
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7ff fd6c 	bl	8011b5a <get_fat>
 8012082:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d00e      	beq.n	80120a8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	2b01      	cmp	r3, #1
 801208e:	d003      	beq.n	8012098 <create_chain+0xa6>
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012096:	d101      	bne.n	801209c <create_chain+0xaa>
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	e03e      	b.n	801211a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801209c:	69fa      	ldr	r2, [r7, #28]
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d1da      	bne.n	801205a <create_chain+0x68>
 80120a4:	2300      	movs	r3, #0
 80120a6:	e038      	b.n	801211a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80120a8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80120aa:	f04f 32ff 	mov.w	r2, #4294967295
 80120ae:	69f9      	ldr	r1, [r7, #28]
 80120b0:	6938      	ldr	r0, [r7, #16]
 80120b2:	f7ff fe22 	bl	8011cfa <put_fat>
 80120b6:	4603      	mov	r3, r0
 80120b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80120ba:	7dfb      	ldrb	r3, [r7, #23]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d109      	bne.n	80120d4 <create_chain+0xe2>
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d006      	beq.n	80120d4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80120c6:	69fa      	ldr	r2, [r7, #28]
 80120c8:	6839      	ldr	r1, [r7, #0]
 80120ca:	6938      	ldr	r0, [r7, #16]
 80120cc:	f7ff fe15 	bl	8011cfa <put_fat>
 80120d0:	4603      	mov	r3, r0
 80120d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80120d4:	7dfb      	ldrb	r3, [r7, #23]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d116      	bne.n	8012108 <create_chain+0x116>
		fs->last_clst = ncl;
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	69fa      	ldr	r2, [r7, #28]
 80120de:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	695a      	ldr	r2, [r3, #20]
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	69db      	ldr	r3, [r3, #28]
 80120e8:	3b02      	subs	r3, #2
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d804      	bhi.n	80120f8 <create_chain+0x106>
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	695b      	ldr	r3, [r3, #20]
 80120f2:	1e5a      	subs	r2, r3, #1
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80120f8:	693b      	ldr	r3, [r7, #16]
 80120fa:	791b      	ldrb	r3, [r3, #4]
 80120fc:	f043 0301 	orr.w	r3, r3, #1
 8012100:	b2da      	uxtb	r2, r3
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	711a      	strb	r2, [r3, #4]
 8012106:	e007      	b.n	8012118 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012108:	7dfb      	ldrb	r3, [r7, #23]
 801210a:	2b01      	cmp	r3, #1
 801210c:	d102      	bne.n	8012114 <create_chain+0x122>
 801210e:	f04f 33ff 	mov.w	r3, #4294967295
 8012112:	e000      	b.n	8012116 <create_chain+0x124>
 8012114:	2301      	movs	r3, #1
 8012116:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012118:	69fb      	ldr	r3, [r7, #28]
}
 801211a:	4618      	mov	r0, r3
 801211c:	3720      	adds	r7, #32
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012122:	b480      	push	{r7}
 8012124:	b087      	sub	sp, #28
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
 801212a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012136:	3304      	adds	r3, #4
 8012138:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	899b      	ldrh	r3, [r3, #12]
 801213e:	461a      	mov	r2, r3
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	fbb3 f3f2 	udiv	r3, r3, r2
 8012146:	68fa      	ldr	r2, [r7, #12]
 8012148:	8952      	ldrh	r2, [r2, #10]
 801214a:	fbb3 f3f2 	udiv	r3, r3, r2
 801214e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	1d1a      	adds	r2, r3, #4
 8012154:	613a      	str	r2, [r7, #16]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d101      	bne.n	8012164 <clmt_clust+0x42>
 8012160:	2300      	movs	r3, #0
 8012162:	e010      	b.n	8012186 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012164:	697a      	ldr	r2, [r7, #20]
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	429a      	cmp	r2, r3
 801216a:	d307      	bcc.n	801217c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801216c:	697a      	ldr	r2, [r7, #20]
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	1ad3      	subs	r3, r2, r3
 8012172:	617b      	str	r3, [r7, #20]
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	3304      	adds	r3, #4
 8012178:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801217a:	e7e9      	b.n	8012150 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801217c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	681a      	ldr	r2, [r3, #0]
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	4413      	add	r3, r2
}
 8012186:	4618      	mov	r0, r3
 8012188:	371c      	adds	r7, #28
 801218a:	46bd      	mov	sp, r7
 801218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012190:	4770      	bx	lr

08012192 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012192:	b580      	push	{r7, lr}
 8012194:	b086      	sub	sp, #24
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
 801219a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80121a8:	d204      	bcs.n	80121b4 <dir_sdi+0x22>
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	f003 031f 	and.w	r3, r3, #31
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d001      	beq.n	80121b8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80121b4:	2302      	movs	r3, #2
 80121b6:	e071      	b.n	801229c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	683a      	ldr	r2, [r7, #0]
 80121bc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	689b      	ldr	r3, [r3, #8]
 80121c2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d106      	bne.n	80121d8 <dir_sdi+0x46>
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	781b      	ldrb	r3, [r3, #0]
 80121ce:	2b02      	cmp	r3, #2
 80121d0:	d902      	bls.n	80121d8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d10c      	bne.n	80121f8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	095b      	lsrs	r3, r3, #5
 80121e2:	693a      	ldr	r2, [r7, #16]
 80121e4:	8912      	ldrh	r2, [r2, #8]
 80121e6:	4293      	cmp	r3, r2
 80121e8:	d301      	bcc.n	80121ee <dir_sdi+0x5c>
 80121ea:	2302      	movs	r3, #2
 80121ec:	e056      	b.n	801229c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80121ee:	693b      	ldr	r3, [r7, #16]
 80121f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	61da      	str	r2, [r3, #28]
 80121f6:	e02d      	b.n	8012254 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80121f8:	693b      	ldr	r3, [r7, #16]
 80121fa:	895b      	ldrh	r3, [r3, #10]
 80121fc:	461a      	mov	r2, r3
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	899b      	ldrh	r3, [r3, #12]
 8012202:	fb03 f302 	mul.w	r3, r3, r2
 8012206:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012208:	e019      	b.n	801223e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6979      	ldr	r1, [r7, #20]
 801220e:	4618      	mov	r0, r3
 8012210:	f7ff fca3 	bl	8011b5a <get_fat>
 8012214:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	f1b3 3fff 	cmp.w	r3, #4294967295
 801221c:	d101      	bne.n	8012222 <dir_sdi+0x90>
 801221e:	2301      	movs	r3, #1
 8012220:	e03c      	b.n	801229c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	2b01      	cmp	r3, #1
 8012226:	d904      	bls.n	8012232 <dir_sdi+0xa0>
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	69db      	ldr	r3, [r3, #28]
 801222c:	697a      	ldr	r2, [r7, #20]
 801222e:	429a      	cmp	r2, r3
 8012230:	d301      	bcc.n	8012236 <dir_sdi+0xa4>
 8012232:	2302      	movs	r3, #2
 8012234:	e032      	b.n	801229c <dir_sdi+0x10a>
			ofs -= csz;
 8012236:	683a      	ldr	r2, [r7, #0]
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	1ad3      	subs	r3, r2, r3
 801223c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801223e:	683a      	ldr	r2, [r7, #0]
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	429a      	cmp	r2, r3
 8012244:	d2e1      	bcs.n	801220a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012246:	6979      	ldr	r1, [r7, #20]
 8012248:	6938      	ldr	r0, [r7, #16]
 801224a:	f7ff fc67 	bl	8011b1c <clust2sect>
 801224e:	4602      	mov	r2, r0
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	697a      	ldr	r2, [r7, #20]
 8012258:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	69db      	ldr	r3, [r3, #28]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d101      	bne.n	8012266 <dir_sdi+0xd4>
 8012262:	2302      	movs	r3, #2
 8012264:	e01a      	b.n	801229c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	69da      	ldr	r2, [r3, #28]
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	899b      	ldrh	r3, [r3, #12]
 801226e:	4619      	mov	r1, r3
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	fbb3 f3f1 	udiv	r3, r3, r1
 8012276:	441a      	add	r2, r3
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	899b      	ldrh	r3, [r3, #12]
 8012286:	461a      	mov	r2, r3
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	fbb3 f0f2 	udiv	r0, r3, r2
 801228e:	fb02 f200 	mul.w	r2, r2, r0
 8012292:	1a9b      	subs	r3, r3, r2
 8012294:	18ca      	adds	r2, r1, r3
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801229a:	2300      	movs	r3, #0
}
 801229c:	4618      	mov	r0, r3
 801229e:	3718      	adds	r7, #24
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b086      	sub	sp, #24
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	695b      	ldr	r3, [r3, #20]
 80122b8:	3320      	adds	r3, #32
 80122ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	69db      	ldr	r3, [r3, #28]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d003      	beq.n	80122cc <dir_next+0x28>
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80122ca:	d301      	bcc.n	80122d0 <dir_next+0x2c>
 80122cc:	2304      	movs	r3, #4
 80122ce:	e0bb      	b.n	8012448 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	899b      	ldrh	r3, [r3, #12]
 80122d4:	461a      	mov	r2, r3
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80122dc:	fb02 f201 	mul.w	r2, r2, r1
 80122e0:	1a9b      	subs	r3, r3, r2
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f040 809d 	bne.w	8012422 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	69db      	ldr	r3, [r3, #28]
 80122ec:	1c5a      	adds	r2, r3, #1
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	699b      	ldr	r3, [r3, #24]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d10b      	bne.n	8012312 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	095b      	lsrs	r3, r3, #5
 80122fe:	68fa      	ldr	r2, [r7, #12]
 8012300:	8912      	ldrh	r2, [r2, #8]
 8012302:	4293      	cmp	r3, r2
 8012304:	f0c0 808d 	bcc.w	8012422 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2200      	movs	r2, #0
 801230c:	61da      	str	r2, [r3, #28]
 801230e:	2304      	movs	r3, #4
 8012310:	e09a      	b.n	8012448 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	899b      	ldrh	r3, [r3, #12]
 8012316:	461a      	mov	r2, r3
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	fbb3 f3f2 	udiv	r3, r3, r2
 801231e:	68fa      	ldr	r2, [r7, #12]
 8012320:	8952      	ldrh	r2, [r2, #10]
 8012322:	3a01      	subs	r2, #1
 8012324:	4013      	ands	r3, r2
 8012326:	2b00      	cmp	r3, #0
 8012328:	d17b      	bne.n	8012422 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801232a:	687a      	ldr	r2, [r7, #4]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	699b      	ldr	r3, [r3, #24]
 8012330:	4619      	mov	r1, r3
 8012332:	4610      	mov	r0, r2
 8012334:	f7ff fc11 	bl	8011b5a <get_fat>
 8012338:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	2b01      	cmp	r3, #1
 801233e:	d801      	bhi.n	8012344 <dir_next+0xa0>
 8012340:	2302      	movs	r3, #2
 8012342:	e081      	b.n	8012448 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	f1b3 3fff 	cmp.w	r3, #4294967295
 801234a:	d101      	bne.n	8012350 <dir_next+0xac>
 801234c:	2301      	movs	r3, #1
 801234e:	e07b      	b.n	8012448 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	69db      	ldr	r3, [r3, #28]
 8012354:	697a      	ldr	r2, [r7, #20]
 8012356:	429a      	cmp	r2, r3
 8012358:	d359      	bcc.n	801240e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d104      	bne.n	801236a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2200      	movs	r2, #0
 8012364:	61da      	str	r2, [r3, #28]
 8012366:	2304      	movs	r3, #4
 8012368:	e06e      	b.n	8012448 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	699b      	ldr	r3, [r3, #24]
 8012370:	4619      	mov	r1, r3
 8012372:	4610      	mov	r0, r2
 8012374:	f7ff fe3d 	bl	8011ff2 <create_chain>
 8012378:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d101      	bne.n	8012384 <dir_next+0xe0>
 8012380:	2307      	movs	r3, #7
 8012382:	e061      	b.n	8012448 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	2b01      	cmp	r3, #1
 8012388:	d101      	bne.n	801238e <dir_next+0xea>
 801238a:	2302      	movs	r3, #2
 801238c:	e05c      	b.n	8012448 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012394:	d101      	bne.n	801239a <dir_next+0xf6>
 8012396:	2301      	movs	r3, #1
 8012398:	e056      	b.n	8012448 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801239a:	68f8      	ldr	r0, [r7, #12]
 801239c:	f7ff fadc 	bl	8011958 <sync_window>
 80123a0:	4603      	mov	r3, r0
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d001      	beq.n	80123aa <dir_next+0x106>
 80123a6:	2301      	movs	r3, #1
 80123a8:	e04e      	b.n	8012448 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	899b      	ldrh	r3, [r3, #12]
 80123b4:	461a      	mov	r2, r3
 80123b6:	2100      	movs	r1, #0
 80123b8:	f7ff f905 	bl	80115c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80123bc:	2300      	movs	r3, #0
 80123be:	613b      	str	r3, [r7, #16]
 80123c0:	6979      	ldr	r1, [r7, #20]
 80123c2:	68f8      	ldr	r0, [r7, #12]
 80123c4:	f7ff fbaa 	bl	8011b1c <clust2sect>
 80123c8:	4602      	mov	r2, r0
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	635a      	str	r2, [r3, #52]	; 0x34
 80123ce:	e012      	b.n	80123f6 <dir_next+0x152>
						fs->wflag = 1;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	2201      	movs	r2, #1
 80123d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80123d6:	68f8      	ldr	r0, [r7, #12]
 80123d8:	f7ff fabe 	bl	8011958 <sync_window>
 80123dc:	4603      	mov	r3, r0
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d001      	beq.n	80123e6 <dir_next+0x142>
 80123e2:	2301      	movs	r3, #1
 80123e4:	e030      	b.n	8012448 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	3301      	adds	r3, #1
 80123ea:	613b      	str	r3, [r7, #16]
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123f0:	1c5a      	adds	r2, r3, #1
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	635a      	str	r2, [r3, #52]	; 0x34
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	895b      	ldrh	r3, [r3, #10]
 80123fa:	461a      	mov	r2, r3
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	4293      	cmp	r3, r2
 8012400:	d3e6      	bcc.n	80123d0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	1ad2      	subs	r2, r2, r3
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	697a      	ldr	r2, [r7, #20]
 8012412:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012414:	6979      	ldr	r1, [r7, #20]
 8012416:	68f8      	ldr	r0, [r7, #12]
 8012418:	f7ff fb80 	bl	8011b1c <clust2sect>
 801241c:	4602      	mov	r2, r0
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	68ba      	ldr	r2, [r7, #8]
 8012426:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	899b      	ldrh	r3, [r3, #12]
 8012432:	461a      	mov	r2, r3
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	fbb3 f0f2 	udiv	r0, r3, r2
 801243a:	fb02 f200 	mul.w	r2, r2, r0
 801243e:	1a9b      	subs	r3, r3, r2
 8012440:	18ca      	adds	r2, r1, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012446:	2300      	movs	r3, #0
}
 8012448:	4618      	mov	r0, r3
 801244a:	3718      	adds	r7, #24
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b086      	sub	sp, #24
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012460:	2100      	movs	r1, #0
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f7ff fe95 	bl	8012192 <dir_sdi>
 8012468:	4603      	mov	r3, r0
 801246a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801246c:	7dfb      	ldrb	r3, [r7, #23]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d12b      	bne.n	80124ca <dir_alloc+0x7a>
		n = 0;
 8012472:	2300      	movs	r3, #0
 8012474:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	69db      	ldr	r3, [r3, #28]
 801247a:	4619      	mov	r1, r3
 801247c:	68f8      	ldr	r0, [r7, #12]
 801247e:	f7ff faaf 	bl	80119e0 <move_window>
 8012482:	4603      	mov	r3, r0
 8012484:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012486:	7dfb      	ldrb	r3, [r7, #23]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d11d      	bne.n	80124c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6a1b      	ldr	r3, [r3, #32]
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	2be5      	cmp	r3, #229	; 0xe5
 8012494:	d004      	beq.n	80124a0 <dir_alloc+0x50>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6a1b      	ldr	r3, [r3, #32]
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d107      	bne.n	80124b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	3301      	adds	r3, #1
 80124a4:	613b      	str	r3, [r7, #16]
 80124a6:	693a      	ldr	r2, [r7, #16]
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d102      	bne.n	80124b4 <dir_alloc+0x64>
 80124ae:	e00c      	b.n	80124ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80124b0:	2300      	movs	r3, #0
 80124b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80124b4:	2101      	movs	r1, #1
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f7ff fef4 	bl	80122a4 <dir_next>
 80124bc:	4603      	mov	r3, r0
 80124be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80124c0:	7dfb      	ldrb	r3, [r7, #23]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d0d7      	beq.n	8012476 <dir_alloc+0x26>
 80124c6:	e000      	b.n	80124ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80124c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80124ca:	7dfb      	ldrb	r3, [r7, #23]
 80124cc:	2b04      	cmp	r3, #4
 80124ce:	d101      	bne.n	80124d4 <dir_alloc+0x84>
 80124d0:	2307      	movs	r3, #7
 80124d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80124d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80124d6:	4618      	mov	r0, r3
 80124d8:	3718      	adds	r7, #24
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}

080124de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80124de:	b580      	push	{r7, lr}
 80124e0:	b084      	sub	sp, #16
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
 80124e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	331a      	adds	r3, #26
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7fe ffc7 	bl	8011480 <ld_word>
 80124f2:	4603      	mov	r3, r0
 80124f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	781b      	ldrb	r3, [r3, #0]
 80124fa:	2b03      	cmp	r3, #3
 80124fc:	d109      	bne.n	8012512 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	3314      	adds	r3, #20
 8012502:	4618      	mov	r0, r3
 8012504:	f7fe ffbc 	bl	8011480 <ld_word>
 8012508:	4603      	mov	r3, r0
 801250a:	041b      	lsls	r3, r3, #16
 801250c:	68fa      	ldr	r2, [r7, #12]
 801250e:	4313      	orrs	r3, r2
 8012510:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012512:	68fb      	ldr	r3, [r7, #12]
}
 8012514:	4618      	mov	r0, r3
 8012516:	3710      	adds	r7, #16
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}

0801251c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b084      	sub	sp, #16
 8012520:	af00      	add	r7, sp, #0
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	60b9      	str	r1, [r7, #8]
 8012526:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	331a      	adds	r3, #26
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	b292      	uxth	r2, r2
 8012530:	4611      	mov	r1, r2
 8012532:	4618      	mov	r0, r3
 8012534:	f7fe ffdf 	bl	80114f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	781b      	ldrb	r3, [r3, #0]
 801253c:	2b03      	cmp	r3, #3
 801253e:	d109      	bne.n	8012554 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	f103 0214 	add.w	r2, r3, #20
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	0c1b      	lsrs	r3, r3, #16
 801254a:	b29b      	uxth	r3, r3
 801254c:	4619      	mov	r1, r3
 801254e:	4610      	mov	r0, r2
 8012550:	f7fe ffd1 	bl	80114f6 <st_word>
	}
}
 8012554:	bf00      	nop
 8012556:	3710      	adds	r7, #16
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b086      	sub	sp, #24
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012566:	2304      	movs	r3, #4
 8012568:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012570:	e03c      	b.n	80125ec <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	69db      	ldr	r3, [r3, #28]
 8012576:	4619      	mov	r1, r3
 8012578:	6938      	ldr	r0, [r7, #16]
 801257a:	f7ff fa31 	bl	80119e0 <move_window>
 801257e:	4603      	mov	r3, r0
 8012580:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012582:	7dfb      	ldrb	r3, [r7, #23]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d136      	bne.n	80125f6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	6a1b      	ldr	r3, [r3, #32]
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012590:	7bfb      	ldrb	r3, [r7, #15]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d102      	bne.n	801259c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012596:	2304      	movs	r3, #4
 8012598:	75fb      	strb	r3, [r7, #23]
 801259a:	e031      	b.n	8012600 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	6a1b      	ldr	r3, [r3, #32]
 80125a0:	330b      	adds	r3, #11
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80125a8:	73bb      	strb	r3, [r7, #14]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	7bba      	ldrb	r2, [r7, #14]
 80125ae:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80125b0:	7bfb      	ldrb	r3, [r7, #15]
 80125b2:	2be5      	cmp	r3, #229	; 0xe5
 80125b4:	d011      	beq.n	80125da <dir_read+0x7e>
 80125b6:	7bfb      	ldrb	r3, [r7, #15]
 80125b8:	2b2e      	cmp	r3, #46	; 0x2e
 80125ba:	d00e      	beq.n	80125da <dir_read+0x7e>
 80125bc:	7bbb      	ldrb	r3, [r7, #14]
 80125be:	2b0f      	cmp	r3, #15
 80125c0:	d00b      	beq.n	80125da <dir_read+0x7e>
 80125c2:	7bbb      	ldrb	r3, [r7, #14]
 80125c4:	f023 0320 	bic.w	r3, r3, #32
 80125c8:	2b08      	cmp	r3, #8
 80125ca:	bf0c      	ite	eq
 80125cc:	2301      	moveq	r3, #1
 80125ce:	2300      	movne	r3, #0
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	461a      	mov	r2, r3
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	4293      	cmp	r3, r2
 80125d8:	d00f      	beq.n	80125fa <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80125da:	2100      	movs	r1, #0
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f7ff fe61 	bl	80122a4 <dir_next>
 80125e2:	4603      	mov	r3, r0
 80125e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80125e6:	7dfb      	ldrb	r3, [r7, #23]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d108      	bne.n	80125fe <dir_read+0xa2>
	while (dp->sect) {
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	69db      	ldr	r3, [r3, #28]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d1be      	bne.n	8012572 <dir_read+0x16>
 80125f4:	e004      	b.n	8012600 <dir_read+0xa4>
		if (res != FR_OK) break;
 80125f6:	bf00      	nop
 80125f8:	e002      	b.n	8012600 <dir_read+0xa4>
				break;
 80125fa:	bf00      	nop
 80125fc:	e000      	b.n	8012600 <dir_read+0xa4>
		if (res != FR_OK) break;
 80125fe:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012600:	7dfb      	ldrb	r3, [r7, #23]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d002      	beq.n	801260c <dir_read+0xb0>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2200      	movs	r2, #0
 801260a:	61da      	str	r2, [r3, #28]
	return res;
 801260c:	7dfb      	ldrb	r3, [r7, #23]
}
 801260e:	4618      	mov	r0, r3
 8012610:	3718      	adds	r7, #24
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}

08012616 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012616:	b580      	push	{r7, lr}
 8012618:	b086      	sub	sp, #24
 801261a:	af00      	add	r7, sp, #0
 801261c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012624:	2100      	movs	r1, #0
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f7ff fdb3 	bl	8012192 <dir_sdi>
 801262c:	4603      	mov	r3, r0
 801262e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012630:	7dfb      	ldrb	r3, [r7, #23]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d001      	beq.n	801263a <dir_find+0x24>
 8012636:	7dfb      	ldrb	r3, [r7, #23]
 8012638:	e03e      	b.n	80126b8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	69db      	ldr	r3, [r3, #28]
 801263e:	4619      	mov	r1, r3
 8012640:	6938      	ldr	r0, [r7, #16]
 8012642:	f7ff f9cd 	bl	80119e0 <move_window>
 8012646:	4603      	mov	r3, r0
 8012648:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801264a:	7dfb      	ldrb	r3, [r7, #23]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d12f      	bne.n	80126b0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6a1b      	ldr	r3, [r3, #32]
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012658:	7bfb      	ldrb	r3, [r7, #15]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d102      	bne.n	8012664 <dir_find+0x4e>
 801265e:	2304      	movs	r3, #4
 8012660:	75fb      	strb	r3, [r7, #23]
 8012662:	e028      	b.n	80126b6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6a1b      	ldr	r3, [r3, #32]
 8012668:	330b      	adds	r3, #11
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012670:	b2da      	uxtb	r2, r3
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6a1b      	ldr	r3, [r3, #32]
 801267a:	330b      	adds	r3, #11
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	f003 0308 	and.w	r3, r3, #8
 8012682:	2b00      	cmp	r3, #0
 8012684:	d10a      	bne.n	801269c <dir_find+0x86>
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6a18      	ldr	r0, [r3, #32]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	3324      	adds	r3, #36	; 0x24
 801268e:	220b      	movs	r2, #11
 8012690:	4619      	mov	r1, r3
 8012692:	f7fe ffb2 	bl	80115fa <mem_cmp>
 8012696:	4603      	mov	r3, r0
 8012698:	2b00      	cmp	r3, #0
 801269a:	d00b      	beq.n	80126b4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801269c:	2100      	movs	r1, #0
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f7ff fe00 	bl	80122a4 <dir_next>
 80126a4:	4603      	mov	r3, r0
 80126a6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80126a8:	7dfb      	ldrb	r3, [r7, #23]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d0c5      	beq.n	801263a <dir_find+0x24>
 80126ae:	e002      	b.n	80126b6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80126b0:	bf00      	nop
 80126b2:	e000      	b.n	80126b6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80126b4:	bf00      	nop

	return res;
 80126b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3718      	adds	r7, #24
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}

080126c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b084      	sub	sp, #16
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80126ce:	2101      	movs	r1, #1
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f7ff febd 	bl	8012450 <dir_alloc>
 80126d6:	4603      	mov	r3, r0
 80126d8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80126da:	7bfb      	ldrb	r3, [r7, #15]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d11c      	bne.n	801271a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	69db      	ldr	r3, [r3, #28]
 80126e4:	4619      	mov	r1, r3
 80126e6:	68b8      	ldr	r0, [r7, #8]
 80126e8:	f7ff f97a 	bl	80119e0 <move_window>
 80126ec:	4603      	mov	r3, r0
 80126ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80126f0:	7bfb      	ldrb	r3, [r7, #15]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d111      	bne.n	801271a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6a1b      	ldr	r3, [r3, #32]
 80126fa:	2220      	movs	r2, #32
 80126fc:	2100      	movs	r1, #0
 80126fe:	4618      	mov	r0, r3
 8012700:	f7fe ff61 	bl	80115c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6a18      	ldr	r0, [r3, #32]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	3324      	adds	r3, #36	; 0x24
 801270c:	220b      	movs	r2, #11
 801270e:	4619      	mov	r1, r3
 8012710:	f7fe ff38 	bl	8011584 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	2201      	movs	r2, #1
 8012718:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801271a:	7bfb      	ldrb	r3, [r7, #15]
}
 801271c:	4618      	mov	r0, r3
 801271e:	3710      	adds	r7, #16
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}

08012724 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b084      	sub	sp, #16
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	69db      	ldr	r3, [r3, #28]
 8012736:	4619      	mov	r1, r3
 8012738:	68f8      	ldr	r0, [r7, #12]
 801273a:	f7ff f951 	bl	80119e0 <move_window>
 801273e:	4603      	mov	r3, r0
 8012740:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012742:	7afb      	ldrb	r3, [r7, #11]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d106      	bne.n	8012756 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6a1b      	ldr	r3, [r3, #32]
 801274c:	22e5      	movs	r2, #229	; 0xe5
 801274e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	2201      	movs	r2, #1
 8012754:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012756:	7afb      	ldrb	r3, [r7, #11]
}
 8012758:	4618      	mov	r0, r3
 801275a:	3710      	adds	r7, #16
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}

08012760 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b088      	sub	sp, #32
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
 8012768:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	60fb      	str	r3, [r7, #12]
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	3324      	adds	r3, #36	; 0x24
 8012774:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012776:	220b      	movs	r2, #11
 8012778:	2120      	movs	r1, #32
 801277a:	68b8      	ldr	r0, [r7, #8]
 801277c:	f7fe ff23 	bl	80115c6 <mem_set>
	si = i = 0; ni = 8;
 8012780:	2300      	movs	r3, #0
 8012782:	613b      	str	r3, [r7, #16]
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	617b      	str	r3, [r7, #20]
 8012788:	2308      	movs	r3, #8
 801278a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 801278c:	68fa      	ldr	r2, [r7, #12]
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	4413      	add	r3, r2
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	2b2e      	cmp	r3, #46	; 0x2e
 8012796:	d12f      	bne.n	80127f8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	1c5a      	adds	r2, r3, #1
 801279c:	617a      	str	r2, [r7, #20]
 801279e:	68fa      	ldr	r2, [r7, #12]
 80127a0:	4413      	add	r3, r2
 80127a2:	781b      	ldrb	r3, [r3, #0]
 80127a4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80127a6:	7ffb      	ldrb	r3, [r7, #31]
 80127a8:	2b2e      	cmp	r3, #46	; 0x2e
 80127aa:	d10a      	bne.n	80127c2 <create_name+0x62>
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	2b02      	cmp	r3, #2
 80127b0:	d807      	bhi.n	80127c2 <create_name+0x62>
			sfn[i++] = c;
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	1c5a      	adds	r2, r3, #1
 80127b6:	613a      	str	r2, [r7, #16]
 80127b8:	68ba      	ldr	r2, [r7, #8]
 80127ba:	4413      	add	r3, r2
 80127bc:	7ffa      	ldrb	r2, [r7, #31]
 80127be:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80127c0:	e7ea      	b.n	8012798 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80127c2:	7ffb      	ldrb	r3, [r7, #31]
 80127c4:	2b2f      	cmp	r3, #47	; 0x2f
 80127c6:	d007      	beq.n	80127d8 <create_name+0x78>
 80127c8:	7ffb      	ldrb	r3, [r7, #31]
 80127ca:	2b5c      	cmp	r3, #92	; 0x5c
 80127cc:	d004      	beq.n	80127d8 <create_name+0x78>
 80127ce:	7ffb      	ldrb	r3, [r7, #31]
 80127d0:	2b20      	cmp	r3, #32
 80127d2:	d901      	bls.n	80127d8 <create_name+0x78>
 80127d4:	2306      	movs	r3, #6
 80127d6:	e084      	b.n	80128e2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80127d8:	68fa      	ldr	r2, [r7, #12]
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	441a      	add	r2, r3
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80127e2:	7ffb      	ldrb	r3, [r7, #31]
 80127e4:	2b20      	cmp	r3, #32
 80127e6:	d801      	bhi.n	80127ec <create_name+0x8c>
 80127e8:	2224      	movs	r2, #36	; 0x24
 80127ea:	e000      	b.n	80127ee <create_name+0x8e>
 80127ec:	2220      	movs	r2, #32
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	330b      	adds	r3, #11
 80127f2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80127f4:	2300      	movs	r3, #0
 80127f6:	e074      	b.n	80128e2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	1c5a      	adds	r2, r3, #1
 80127fc:	617a      	str	r2, [r7, #20]
 80127fe:	68fa      	ldr	r2, [r7, #12]
 8012800:	4413      	add	r3, r2
 8012802:	781b      	ldrb	r3, [r3, #0]
 8012804:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012806:	7ffb      	ldrb	r3, [r7, #31]
 8012808:	2b20      	cmp	r3, #32
 801280a:	d94e      	bls.n	80128aa <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801280c:	7ffb      	ldrb	r3, [r7, #31]
 801280e:	2b2f      	cmp	r3, #47	; 0x2f
 8012810:	d006      	beq.n	8012820 <create_name+0xc0>
 8012812:	7ffb      	ldrb	r3, [r7, #31]
 8012814:	2b5c      	cmp	r3, #92	; 0x5c
 8012816:	d110      	bne.n	801283a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012818:	e002      	b.n	8012820 <create_name+0xc0>
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	3301      	adds	r3, #1
 801281e:	617b      	str	r3, [r7, #20]
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	4413      	add	r3, r2
 8012826:	781b      	ldrb	r3, [r3, #0]
 8012828:	2b2f      	cmp	r3, #47	; 0x2f
 801282a:	d0f6      	beq.n	801281a <create_name+0xba>
 801282c:	68fa      	ldr	r2, [r7, #12]
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	4413      	add	r3, r2
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	2b5c      	cmp	r3, #92	; 0x5c
 8012836:	d0f0      	beq.n	801281a <create_name+0xba>
			break;
 8012838:	e038      	b.n	80128ac <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801283a:	7ffb      	ldrb	r3, [r7, #31]
 801283c:	2b2e      	cmp	r3, #46	; 0x2e
 801283e:	d003      	beq.n	8012848 <create_name+0xe8>
 8012840:	693a      	ldr	r2, [r7, #16]
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	429a      	cmp	r2, r3
 8012846:	d30c      	bcc.n	8012862 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012848:	69bb      	ldr	r3, [r7, #24]
 801284a:	2b0b      	cmp	r3, #11
 801284c:	d002      	beq.n	8012854 <create_name+0xf4>
 801284e:	7ffb      	ldrb	r3, [r7, #31]
 8012850:	2b2e      	cmp	r3, #46	; 0x2e
 8012852:	d001      	beq.n	8012858 <create_name+0xf8>
 8012854:	2306      	movs	r3, #6
 8012856:	e044      	b.n	80128e2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012858:	2308      	movs	r3, #8
 801285a:	613b      	str	r3, [r7, #16]
 801285c:	230b      	movs	r3, #11
 801285e:	61bb      	str	r3, [r7, #24]
			continue;
 8012860:	e022      	b.n	80128a8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012862:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012866:	2b00      	cmp	r3, #0
 8012868:	da04      	bge.n	8012874 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801286a:	7ffb      	ldrb	r3, [r7, #31]
 801286c:	3b80      	subs	r3, #128	; 0x80
 801286e:	4a1f      	ldr	r2, [pc, #124]	; (80128ec <create_name+0x18c>)
 8012870:	5cd3      	ldrb	r3, [r2, r3]
 8012872:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012874:	7ffb      	ldrb	r3, [r7, #31]
 8012876:	4619      	mov	r1, r3
 8012878:	481d      	ldr	r0, [pc, #116]	; (80128f0 <create_name+0x190>)
 801287a:	f7fe fee5 	bl	8011648 <chk_chr>
 801287e:	4603      	mov	r3, r0
 8012880:	2b00      	cmp	r3, #0
 8012882:	d001      	beq.n	8012888 <create_name+0x128>
 8012884:	2306      	movs	r3, #6
 8012886:	e02c      	b.n	80128e2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012888:	7ffb      	ldrb	r3, [r7, #31]
 801288a:	2b60      	cmp	r3, #96	; 0x60
 801288c:	d905      	bls.n	801289a <create_name+0x13a>
 801288e:	7ffb      	ldrb	r3, [r7, #31]
 8012890:	2b7a      	cmp	r3, #122	; 0x7a
 8012892:	d802      	bhi.n	801289a <create_name+0x13a>
 8012894:	7ffb      	ldrb	r3, [r7, #31]
 8012896:	3b20      	subs	r3, #32
 8012898:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	1c5a      	adds	r2, r3, #1
 801289e:	613a      	str	r2, [r7, #16]
 80128a0:	68ba      	ldr	r2, [r7, #8]
 80128a2:	4413      	add	r3, r2
 80128a4:	7ffa      	ldrb	r2, [r7, #31]
 80128a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80128a8:	e7a6      	b.n	80127f8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80128aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	441a      	add	r2, r3
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d101      	bne.n	80128c0 <create_name+0x160>
 80128bc:	2306      	movs	r3, #6
 80128be:	e010      	b.n	80128e2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	2be5      	cmp	r3, #229	; 0xe5
 80128c6:	d102      	bne.n	80128ce <create_name+0x16e>
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	2205      	movs	r2, #5
 80128cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80128ce:	7ffb      	ldrb	r3, [r7, #31]
 80128d0:	2b20      	cmp	r3, #32
 80128d2:	d801      	bhi.n	80128d8 <create_name+0x178>
 80128d4:	2204      	movs	r2, #4
 80128d6:	e000      	b.n	80128da <create_name+0x17a>
 80128d8:	2200      	movs	r2, #0
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	330b      	adds	r3, #11
 80128de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80128e0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80128e2:	4618      	mov	r0, r3
 80128e4:	3720      	adds	r7, #32
 80128e6:	46bd      	mov	sp, r7
 80128e8:	bd80      	pop	{r7, pc}
 80128ea:	bf00      	nop
 80128ec:	08018ea4 	.word	0x08018ea4
 80128f0:	08018e54 	.word	0x08018e54

080128f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b086      	sub	sp, #24
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	2b2f      	cmp	r3, #47	; 0x2f
 801290e:	d00b      	beq.n	8012928 <follow_path+0x34>
 8012910:	683b      	ldr	r3, [r7, #0]
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	2b5c      	cmp	r3, #92	; 0x5c
 8012916:	d007      	beq.n	8012928 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	699a      	ldr	r2, [r3, #24]
 801291c:	693b      	ldr	r3, [r7, #16]
 801291e:	609a      	str	r2, [r3, #8]
 8012920:	e00d      	b.n	801293e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	3301      	adds	r3, #1
 8012926:	603b      	str	r3, [r7, #0]
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	2b2f      	cmp	r3, #47	; 0x2f
 801292e:	d0f8      	beq.n	8012922 <follow_path+0x2e>
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	2b5c      	cmp	r3, #92	; 0x5c
 8012936:	d0f4      	beq.n	8012922 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	2200      	movs	r2, #0
 801293c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	2b1f      	cmp	r3, #31
 8012944:	d80a      	bhi.n	801295c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2280      	movs	r2, #128	; 0x80
 801294a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801294e:	2100      	movs	r1, #0
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f7ff fc1e 	bl	8012192 <dir_sdi>
 8012956:	4603      	mov	r3, r0
 8012958:	75fb      	strb	r3, [r7, #23]
 801295a:	e05b      	b.n	8012a14 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801295c:	463b      	mov	r3, r7
 801295e:	4619      	mov	r1, r3
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f7ff fefd 	bl	8012760 <create_name>
 8012966:	4603      	mov	r3, r0
 8012968:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801296a:	7dfb      	ldrb	r3, [r7, #23]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d14c      	bne.n	8012a0a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f7ff fe50 	bl	8012616 <dir_find>
 8012976:	4603      	mov	r3, r0
 8012978:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012980:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012982:	7dfb      	ldrb	r3, [r7, #23]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d01b      	beq.n	80129c0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012988:	7dfb      	ldrb	r3, [r7, #23]
 801298a:	2b04      	cmp	r3, #4
 801298c:	d13f      	bne.n	8012a0e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801298e:	7afb      	ldrb	r3, [r7, #11]
 8012990:	f003 0320 	and.w	r3, r3, #32
 8012994:	2b00      	cmp	r3, #0
 8012996:	d00b      	beq.n	80129b0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012998:	7afb      	ldrb	r3, [r7, #11]
 801299a:	f003 0304 	and.w	r3, r3, #4
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d031      	beq.n	8012a06 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2280      	movs	r2, #128	; 0x80
 80129a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80129aa:	2300      	movs	r3, #0
 80129ac:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80129ae:	e02e      	b.n	8012a0e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80129b0:	7afb      	ldrb	r3, [r7, #11]
 80129b2:	f003 0304 	and.w	r3, r3, #4
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d129      	bne.n	8012a0e <follow_path+0x11a>
 80129ba:	2305      	movs	r3, #5
 80129bc:	75fb      	strb	r3, [r7, #23]
				break;
 80129be:	e026      	b.n	8012a0e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80129c0:	7afb      	ldrb	r3, [r7, #11]
 80129c2:	f003 0304 	and.w	r3, r3, #4
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d123      	bne.n	8012a12 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	799b      	ldrb	r3, [r3, #6]
 80129ce:	f003 0310 	and.w	r3, r3, #16
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d102      	bne.n	80129dc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80129d6:	2305      	movs	r3, #5
 80129d8:	75fb      	strb	r3, [r7, #23]
 80129da:	e01b      	b.n	8012a14 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	695b      	ldr	r3, [r3, #20]
 80129e6:	68fa      	ldr	r2, [r7, #12]
 80129e8:	8992      	ldrh	r2, [r2, #12]
 80129ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80129ee:	fb02 f200 	mul.w	r2, r2, r0
 80129f2:	1a9b      	subs	r3, r3, r2
 80129f4:	440b      	add	r3, r1
 80129f6:	4619      	mov	r1, r3
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	f7ff fd70 	bl	80124de <ld_clust>
 80129fe:	4602      	mov	r2, r0
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	609a      	str	r2, [r3, #8]
 8012a04:	e7aa      	b.n	801295c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012a06:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012a08:	e7a8      	b.n	801295c <follow_path+0x68>
			if (res != FR_OK) break;
 8012a0a:	bf00      	nop
 8012a0c:	e002      	b.n	8012a14 <follow_path+0x120>
				break;
 8012a0e:	bf00      	nop
 8012a10:	e000      	b.n	8012a14 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012a12:	bf00      	nop
			}
		}
	}

	return res;
 8012a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3718      	adds	r7, #24
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd80      	pop	{r7, pc}

08012a1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012a1e:	b480      	push	{r7}
 8012a20:	b087      	sub	sp, #28
 8012a22:	af00      	add	r7, sp, #0
 8012a24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012a26:	f04f 33ff 	mov.w	r3, #4294967295
 8012a2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d031      	beq.n	8012a98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	617b      	str	r3, [r7, #20]
 8012a3a:	e002      	b.n	8012a42 <get_ldnumber+0x24>
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	617b      	str	r3, [r7, #20]
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	2b20      	cmp	r3, #32
 8012a48:	d903      	bls.n	8012a52 <get_ldnumber+0x34>
 8012a4a:	697b      	ldr	r3, [r7, #20]
 8012a4c:	781b      	ldrb	r3, [r3, #0]
 8012a4e:	2b3a      	cmp	r3, #58	; 0x3a
 8012a50:	d1f4      	bne.n	8012a3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	2b3a      	cmp	r3, #58	; 0x3a
 8012a58:	d11c      	bne.n	8012a94 <get_ldnumber+0x76>
			tp = *path;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	1c5a      	adds	r2, r3, #1
 8012a64:	60fa      	str	r2, [r7, #12]
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	3b30      	subs	r3, #48	; 0x30
 8012a6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	2b09      	cmp	r3, #9
 8012a70:	d80e      	bhi.n	8012a90 <get_ldnumber+0x72>
 8012a72:	68fa      	ldr	r2, [r7, #12]
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d10a      	bne.n	8012a90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d107      	bne.n	8012a90 <get_ldnumber+0x72>
					vol = (int)i;
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	3301      	adds	r3, #1
 8012a88:	617b      	str	r3, [r7, #20]
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	697a      	ldr	r2, [r7, #20]
 8012a8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	e002      	b.n	8012a9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012a94:	2300      	movs	r3, #0
 8012a96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012a98:	693b      	ldr	r3, [r7, #16]
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	371c      	adds	r7, #28
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa4:	4770      	bx	lr
	...

08012aa8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	70da      	strb	r2, [r3, #3]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f04f 32ff 	mov.w	r2, #4294967295
 8012abe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012ac0:	6839      	ldr	r1, [r7, #0]
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f7fe ff8c 	bl	80119e0 <move_window>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d001      	beq.n	8012ad2 <check_fs+0x2a>
 8012ace:	2304      	movs	r3, #4
 8012ad0:	e038      	b.n	8012b44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	3338      	adds	r3, #56	; 0x38
 8012ad6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012ada:	4618      	mov	r0, r3
 8012adc:	f7fe fcd0 	bl	8011480 <ld_word>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d001      	beq.n	8012af0 <check_fs+0x48>
 8012aec:	2303      	movs	r3, #3
 8012aee:	e029      	b.n	8012b44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012af6:	2be9      	cmp	r3, #233	; 0xe9
 8012af8:	d009      	beq.n	8012b0e <check_fs+0x66>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012b00:	2beb      	cmp	r3, #235	; 0xeb
 8012b02:	d11e      	bne.n	8012b42 <check_fs+0x9a>
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012b0a:	2b90      	cmp	r3, #144	; 0x90
 8012b0c:	d119      	bne.n	8012b42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	3338      	adds	r3, #56	; 0x38
 8012b12:	3336      	adds	r3, #54	; 0x36
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7fe fccb 	bl	80114b0 <ld_dword>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012b20:	4a0a      	ldr	r2, [pc, #40]	; (8012b4c <check_fs+0xa4>)
 8012b22:	4293      	cmp	r3, r2
 8012b24:	d101      	bne.n	8012b2a <check_fs+0x82>
 8012b26:	2300      	movs	r3, #0
 8012b28:	e00c      	b.n	8012b44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	3338      	adds	r3, #56	; 0x38
 8012b2e:	3352      	adds	r3, #82	; 0x52
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7fe fcbd 	bl	80114b0 <ld_dword>
 8012b36:	4602      	mov	r2, r0
 8012b38:	4b05      	ldr	r3, [pc, #20]	; (8012b50 <check_fs+0xa8>)
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d101      	bne.n	8012b42 <check_fs+0x9a>
 8012b3e:	2300      	movs	r3, #0
 8012b40:	e000      	b.n	8012b44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012b42:	2302      	movs	r3, #2
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	3708      	adds	r7, #8
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	00544146 	.word	0x00544146
 8012b50:	33544146 	.word	0x33544146

08012b54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b096      	sub	sp, #88	; 0x58
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	60f8      	str	r0, [r7, #12]
 8012b5c:	60b9      	str	r1, [r7, #8]
 8012b5e:	4613      	mov	r3, r2
 8012b60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	2200      	movs	r2, #0
 8012b66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012b68:	68f8      	ldr	r0, [r7, #12]
 8012b6a:	f7ff ff58 	bl	8012a1e <get_ldnumber>
 8012b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	da01      	bge.n	8012b7a <find_volume+0x26>
 8012b76:	230b      	movs	r3, #11
 8012b78:	e268      	b.n	801304c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012b7a:	4ab0      	ldr	r2, [pc, #704]	; (8012e3c <find_volume+0x2e8>)
 8012b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d101      	bne.n	8012b8e <find_volume+0x3a>
 8012b8a:	230c      	movs	r3, #12
 8012b8c:	e25e      	b.n	801304c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012b94:	79fb      	ldrb	r3, [r7, #7]
 8012b96:	f023 0301 	bic.w	r3, r3, #1
 8012b9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d01a      	beq.n	8012bda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba6:	785b      	ldrb	r3, [r3, #1]
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7fe fbcb 	bl	8011344 <disk_status>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012bb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bb8:	f003 0301 	and.w	r3, r3, #1
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d10c      	bne.n	8012bda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012bc0:	79fb      	ldrb	r3, [r7, #7]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d007      	beq.n	8012bd6 <find_volume+0x82>
 8012bc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bca:	f003 0304 	and.w	r3, r3, #4
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d001      	beq.n	8012bd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012bd2:	230a      	movs	r3, #10
 8012bd4:	e23a      	b.n	801304c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	e238      	b.n	801304c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bdc:	2200      	movs	r2, #0
 8012bde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012be2:	b2da      	uxtb	r2, r3
 8012be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bea:	785b      	ldrb	r3, [r3, #1]
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7fe fbc3 	bl	8011378 <disk_initialize>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012bf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bfc:	f003 0301 	and.w	r3, r3, #1
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d001      	beq.n	8012c08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012c04:	2303      	movs	r3, #3
 8012c06:	e221      	b.n	801304c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012c08:	79fb      	ldrb	r3, [r7, #7]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d007      	beq.n	8012c1e <find_volume+0xca>
 8012c0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c12:	f003 0304 	and.w	r3, r3, #4
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d001      	beq.n	8012c1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012c1a:	230a      	movs	r3, #10
 8012c1c:	e216      	b.n	801304c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c20:	7858      	ldrb	r0, [r3, #1]
 8012c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c24:	330c      	adds	r3, #12
 8012c26:	461a      	mov	r2, r3
 8012c28:	2102      	movs	r1, #2
 8012c2a:	f7fe fc0b 	bl	8011444 <disk_ioctl>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d001      	beq.n	8012c38 <find_volume+0xe4>
 8012c34:	2301      	movs	r3, #1
 8012c36:	e209      	b.n	801304c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c3a:	899b      	ldrh	r3, [r3, #12]
 8012c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012c40:	d80d      	bhi.n	8012c5e <find_volume+0x10a>
 8012c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c44:	899b      	ldrh	r3, [r3, #12]
 8012c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c4a:	d308      	bcc.n	8012c5e <find_volume+0x10a>
 8012c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c4e:	899b      	ldrh	r3, [r3, #12]
 8012c50:	461a      	mov	r2, r3
 8012c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c54:	899b      	ldrh	r3, [r3, #12]
 8012c56:	3b01      	subs	r3, #1
 8012c58:	4013      	ands	r3, r2
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d001      	beq.n	8012c62 <find_volume+0x10e>
 8012c5e:	2301      	movs	r3, #1
 8012c60:	e1f4      	b.n	801304c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012c62:	2300      	movs	r3, #0
 8012c64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012c66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c6a:	f7ff ff1d 	bl	8012aa8 <check_fs>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012c74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c78:	2b02      	cmp	r3, #2
 8012c7a:	d14b      	bne.n	8012d14 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8012c80:	e01f      	b.n	8012cc2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c84:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c8a:	011b      	lsls	r3, r3, #4
 8012c8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012c90:	4413      	add	r3, r2
 8012c92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c96:	3304      	adds	r3, #4
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d006      	beq.n	8012cac <find_volume+0x158>
 8012c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca0:	3308      	adds	r3, #8
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7fe fc04 	bl	80114b0 <ld_dword>
 8012ca8:	4602      	mov	r2, r0
 8012caa:	e000      	b.n	8012cae <find_volume+0x15a>
 8012cac:	2200      	movs	r2, #0
 8012cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012cb6:	440b      	add	r3, r1
 8012cb8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cbe:	3301      	adds	r3, #1
 8012cc0:	643b      	str	r3, [r7, #64]	; 0x40
 8012cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cc4:	2b03      	cmp	r3, #3
 8012cc6:	d9dc      	bls.n	8012c82 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012cc8:	2300      	movs	r3, #0
 8012cca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d002      	beq.n	8012cd8 <find_volume+0x184>
 8012cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cd4:	3b01      	subs	r3, #1
 8012cd6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012ce0:	4413      	add	r3, r2
 8012ce2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012ce6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d005      	beq.n	8012cfa <find_volume+0x1a6>
 8012cee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012cf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012cf2:	f7ff fed9 	bl	8012aa8 <check_fs>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	e000      	b.n	8012cfc <find_volume+0x1a8>
 8012cfa:	2303      	movs	r3, #3
 8012cfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012d00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d905      	bls.n	8012d14 <find_volume+0x1c0>
 8012d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8012d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d10:	2b03      	cmp	r3, #3
 8012d12:	d9e1      	bls.n	8012cd8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012d14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d18:	2b04      	cmp	r3, #4
 8012d1a:	d101      	bne.n	8012d20 <find_volume+0x1cc>
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	e195      	b.n	801304c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012d20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d24:	2b01      	cmp	r3, #1
 8012d26:	d901      	bls.n	8012d2c <find_volume+0x1d8>
 8012d28:	230d      	movs	r3, #13
 8012d2a:	e18f      	b.n	801304c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2e:	3338      	adds	r3, #56	; 0x38
 8012d30:	330b      	adds	r3, #11
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7fe fba4 	bl	8011480 <ld_word>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3e:	899b      	ldrh	r3, [r3, #12]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d001      	beq.n	8012d48 <find_volume+0x1f4>
 8012d44:	230d      	movs	r3, #13
 8012d46:	e181      	b.n	801304c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4a:	3338      	adds	r3, #56	; 0x38
 8012d4c:	3316      	adds	r3, #22
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f7fe fb96 	bl	8011480 <ld_word>
 8012d54:	4603      	mov	r3, r0
 8012d56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d106      	bne.n	8012d6c <find_volume+0x218>
 8012d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d60:	3338      	adds	r3, #56	; 0x38
 8012d62:	3324      	adds	r3, #36	; 0x24
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7fe fba3 	bl	80114b0 <ld_dword>
 8012d6a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d70:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d74:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7e:	789b      	ldrb	r3, [r3, #2]
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d005      	beq.n	8012d90 <find_volume+0x23c>
 8012d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d86:	789b      	ldrb	r3, [r3, #2]
 8012d88:	2b02      	cmp	r3, #2
 8012d8a:	d001      	beq.n	8012d90 <find_volume+0x23c>
 8012d8c:	230d      	movs	r3, #13
 8012d8e:	e15d      	b.n	801304c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d92:	789b      	ldrb	r3, [r3, #2]
 8012d94:	461a      	mov	r2, r3
 8012d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d98:	fb02 f303 	mul.w	r3, r2, r3
 8012d9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dac:	895b      	ldrh	r3, [r3, #10]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d008      	beq.n	8012dc4 <find_volume+0x270>
 8012db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db4:	895b      	ldrh	r3, [r3, #10]
 8012db6:	461a      	mov	r2, r3
 8012db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dba:	895b      	ldrh	r3, [r3, #10]
 8012dbc:	3b01      	subs	r3, #1
 8012dbe:	4013      	ands	r3, r2
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d001      	beq.n	8012dc8 <find_volume+0x274>
 8012dc4:	230d      	movs	r3, #13
 8012dc6:	e141      	b.n	801304c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dca:	3338      	adds	r3, #56	; 0x38
 8012dcc:	3311      	adds	r3, #17
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7fe fb56 	bl	8011480 <ld_word>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dde:	891b      	ldrh	r3, [r3, #8]
 8012de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012de2:	8992      	ldrh	r2, [r2, #12]
 8012de4:	0952      	lsrs	r2, r2, #5
 8012de6:	b292      	uxth	r2, r2
 8012de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012dec:	fb02 f201 	mul.w	r2, r2, r1
 8012df0:	1a9b      	subs	r3, r3, r2
 8012df2:	b29b      	uxth	r3, r3
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d001      	beq.n	8012dfc <find_volume+0x2a8>
 8012df8:	230d      	movs	r3, #13
 8012dfa:	e127      	b.n	801304c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dfe:	3338      	adds	r3, #56	; 0x38
 8012e00:	3313      	adds	r3, #19
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fe fb3c 	bl	8011480 <ld_word>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d106      	bne.n	8012e20 <find_volume+0x2cc>
 8012e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e14:	3338      	adds	r3, #56	; 0x38
 8012e16:	3320      	adds	r3, #32
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7fe fb49 	bl	80114b0 <ld_dword>
 8012e1e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e22:	3338      	adds	r3, #56	; 0x38
 8012e24:	330e      	adds	r3, #14
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7fe fb2a 	bl	8011480 <ld_word>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012e30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d104      	bne.n	8012e40 <find_volume+0x2ec>
 8012e36:	230d      	movs	r3, #13
 8012e38:	e108      	b.n	801304c <find_volume+0x4f8>
 8012e3a:	bf00      	nop
 8012e3c:	200481a4 	.word	0x200481a4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012e40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e44:	4413      	add	r3, r2
 8012e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e48:	8911      	ldrh	r1, [r2, #8]
 8012e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e4c:	8992      	ldrh	r2, [r2, #12]
 8012e4e:	0952      	lsrs	r2, r2, #5
 8012e50:	b292      	uxth	r2, r2
 8012e52:	fbb1 f2f2 	udiv	r2, r1, r2
 8012e56:	b292      	uxth	r2, r2
 8012e58:	4413      	add	r3, r2
 8012e5a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d201      	bcs.n	8012e68 <find_volume+0x314>
 8012e64:	230d      	movs	r3, #13
 8012e66:	e0f1      	b.n	801304c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6c:	1ad3      	subs	r3, r2, r3
 8012e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e70:	8952      	ldrh	r2, [r2, #10]
 8012e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e76:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d101      	bne.n	8012e82 <find_volume+0x32e>
 8012e7e:	230d      	movs	r3, #13
 8012e80:	e0e4      	b.n	801304c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012e82:	2303      	movs	r3, #3
 8012e84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012e8e:	4293      	cmp	r3, r2
 8012e90:	d802      	bhi.n	8012e98 <find_volume+0x344>
 8012e92:	2302      	movs	r3, #2
 8012e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e9a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	d802      	bhi.n	8012ea8 <find_volume+0x354>
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eaa:	1c9a      	adds	r2, r3, #2
 8012eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eae:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012eb4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012eb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eba:	441a      	add	r2, r3
 8012ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebe:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012ec0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec4:	441a      	add	r2, r3
 8012ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012eca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ece:	2b03      	cmp	r3, #3
 8012ed0:	d11e      	bne.n	8012f10 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed4:	3338      	adds	r3, #56	; 0x38
 8012ed6:	332a      	adds	r3, #42	; 0x2a
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7fe fad1 	bl	8011480 <ld_word>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d001      	beq.n	8012ee8 <find_volume+0x394>
 8012ee4:	230d      	movs	r3, #13
 8012ee6:	e0b1      	b.n	801304c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eea:	891b      	ldrh	r3, [r3, #8]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d001      	beq.n	8012ef4 <find_volume+0x3a0>
 8012ef0:	230d      	movs	r3, #13
 8012ef2:	e0ab      	b.n	801304c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef6:	3338      	adds	r3, #56	; 0x38
 8012ef8:	332c      	adds	r3, #44	; 0x2c
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7fe fad8 	bl	80114b0 <ld_dword>
 8012f00:	4602      	mov	r2, r0
 8012f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f04:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f08:	69db      	ldr	r3, [r3, #28]
 8012f0a:	009b      	lsls	r3, r3, #2
 8012f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8012f0e:	e01f      	b.n	8012f50 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f12:	891b      	ldrh	r3, [r3, #8]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d101      	bne.n	8012f1c <find_volume+0x3c8>
 8012f18:	230d      	movs	r3, #13
 8012f1a:	e097      	b.n	801304c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f22:	441a      	add	r2, r3
 8012f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f26:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012f28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f2c:	2b02      	cmp	r3, #2
 8012f2e:	d103      	bne.n	8012f38 <find_volume+0x3e4>
 8012f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f32:	69db      	ldr	r3, [r3, #28]
 8012f34:	005b      	lsls	r3, r3, #1
 8012f36:	e00a      	b.n	8012f4e <find_volume+0x3fa>
 8012f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3a:	69da      	ldr	r2, [r3, #28]
 8012f3c:	4613      	mov	r3, r2
 8012f3e:	005b      	lsls	r3, r3, #1
 8012f40:	4413      	add	r3, r2
 8012f42:	085a      	lsrs	r2, r3, #1
 8012f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f46:	69db      	ldr	r3, [r3, #28]
 8012f48:	f003 0301 	and.w	r3, r3, #1
 8012f4c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012f4e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f52:	6a1a      	ldr	r2, [r3, #32]
 8012f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f56:	899b      	ldrh	r3, [r3, #12]
 8012f58:	4619      	mov	r1, r3
 8012f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f5c:	440b      	add	r3, r1
 8012f5e:	3b01      	subs	r3, #1
 8012f60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012f62:	8989      	ldrh	r1, [r1, #12]
 8012f64:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d201      	bcs.n	8012f70 <find_volume+0x41c>
 8012f6c:	230d      	movs	r3, #13
 8012f6e:	e06d      	b.n	801304c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f72:	f04f 32ff 	mov.w	r2, #4294967295
 8012f76:	615a      	str	r2, [r3, #20]
 8012f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7a:	695a      	ldr	r2, [r3, #20]
 8012f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f82:	2280      	movs	r2, #128	; 0x80
 8012f84:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012f86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f8a:	2b03      	cmp	r3, #3
 8012f8c:	d149      	bne.n	8013022 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f90:	3338      	adds	r3, #56	; 0x38
 8012f92:	3330      	adds	r3, #48	; 0x30
 8012f94:	4618      	mov	r0, r3
 8012f96:	f7fe fa73 	bl	8011480 <ld_word>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	2b01      	cmp	r3, #1
 8012f9e:	d140      	bne.n	8013022 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	4619      	mov	r1, r3
 8012fa6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012fa8:	f7fe fd1a 	bl	80119e0 <move_window>
 8012fac:	4603      	mov	r3, r0
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d137      	bne.n	8013022 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fba:	3338      	adds	r3, #56	; 0x38
 8012fbc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7fe fa5d 	bl	8011480 <ld_word>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	461a      	mov	r2, r3
 8012fca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d127      	bne.n	8013022 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd4:	3338      	adds	r3, #56	; 0x38
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7fe fa6a 	bl	80114b0 <ld_dword>
 8012fdc:	4602      	mov	r2, r0
 8012fde:	4b1d      	ldr	r3, [pc, #116]	; (8013054 <find_volume+0x500>)
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d11e      	bne.n	8013022 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe6:	3338      	adds	r3, #56	; 0x38
 8012fe8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012fec:	4618      	mov	r0, r3
 8012fee:	f7fe fa5f 	bl	80114b0 <ld_dword>
 8012ff2:	4602      	mov	r2, r0
 8012ff4:	4b18      	ldr	r3, [pc, #96]	; (8013058 <find_volume+0x504>)
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d113      	bne.n	8013022 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffc:	3338      	adds	r3, #56	; 0x38
 8012ffe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013002:	4618      	mov	r0, r3
 8013004:	f7fe fa54 	bl	80114b0 <ld_dword>
 8013008:	4602      	mov	r2, r0
 801300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013010:	3338      	adds	r3, #56	; 0x38
 8013012:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013016:	4618      	mov	r0, r3
 8013018:	f7fe fa4a 	bl	80114b0 <ld_dword>
 801301c:	4602      	mov	r2, r0
 801301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013020:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013024:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013028:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801302a:	4b0c      	ldr	r3, [pc, #48]	; (801305c <find_volume+0x508>)
 801302c:	881b      	ldrh	r3, [r3, #0]
 801302e:	3301      	adds	r3, #1
 8013030:	b29a      	uxth	r2, r3
 8013032:	4b0a      	ldr	r3, [pc, #40]	; (801305c <find_volume+0x508>)
 8013034:	801a      	strh	r2, [r3, #0]
 8013036:	4b09      	ldr	r3, [pc, #36]	; (801305c <find_volume+0x508>)
 8013038:	881a      	ldrh	r2, [r3, #0]
 801303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013040:	2200      	movs	r2, #0
 8013042:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013044:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013046:	f7fe fc63 	bl	8011910 <clear_lock>
#endif
	return FR_OK;
 801304a:	2300      	movs	r3, #0
}
 801304c:	4618      	mov	r0, r3
 801304e:	3758      	adds	r7, #88	; 0x58
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}
 8013054:	41615252 	.word	0x41615252
 8013058:	61417272 	.word	0x61417272
 801305c:	200481a8 	.word	0x200481a8

08013060 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801306a:	2309      	movs	r3, #9
 801306c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d01c      	beq.n	80130ae <validate+0x4e>
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d018      	beq.n	80130ae <validate+0x4e>
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	781b      	ldrb	r3, [r3, #0]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d013      	beq.n	80130ae <validate+0x4e>
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	889a      	ldrh	r2, [r3, #4]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	88db      	ldrh	r3, [r3, #6]
 8013090:	429a      	cmp	r2, r3
 8013092:	d10c      	bne.n	80130ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	785b      	ldrb	r3, [r3, #1]
 801309a:	4618      	mov	r0, r3
 801309c:	f7fe f952 	bl	8011344 <disk_status>
 80130a0:	4603      	mov	r3, r0
 80130a2:	f003 0301 	and.w	r3, r3, #1
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d101      	bne.n	80130ae <validate+0x4e>
			res = FR_OK;
 80130aa:	2300      	movs	r3, #0
 80130ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80130ae:	7bfb      	ldrb	r3, [r7, #15]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d102      	bne.n	80130ba <validate+0x5a>
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	e000      	b.n	80130bc <validate+0x5c>
 80130ba:	2300      	movs	r3, #0
 80130bc:	683a      	ldr	r2, [r7, #0]
 80130be:	6013      	str	r3, [r2, #0]
	return res;
 80130c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3710      	adds	r7, #16
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
	...

080130cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b088      	sub	sp, #32
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	4613      	mov	r3, r2
 80130d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80130de:	f107 0310 	add.w	r3, r7, #16
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7ff fc9b 	bl	8012a1e <get_ldnumber>
 80130e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80130ea:	69fb      	ldr	r3, [r7, #28]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	da01      	bge.n	80130f4 <f_mount+0x28>
 80130f0:	230b      	movs	r3, #11
 80130f2:	e02b      	b.n	801314c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80130f4:	4a17      	ldr	r2, [pc, #92]	; (8013154 <f_mount+0x88>)
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80130fe:	69bb      	ldr	r3, [r7, #24]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d005      	beq.n	8013110 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013104:	69b8      	ldr	r0, [r7, #24]
 8013106:	f7fe fc03 	bl	8011910 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	2200      	movs	r2, #0
 801310e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d002      	beq.n	801311c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	2200      	movs	r2, #0
 801311a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801311c:	68fa      	ldr	r2, [r7, #12]
 801311e:	490d      	ldr	r1, [pc, #52]	; (8013154 <f_mount+0x88>)
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d002      	beq.n	8013132 <f_mount+0x66>
 801312c:	79fb      	ldrb	r3, [r7, #7]
 801312e:	2b01      	cmp	r3, #1
 8013130:	d001      	beq.n	8013136 <f_mount+0x6a>
 8013132:	2300      	movs	r3, #0
 8013134:	e00a      	b.n	801314c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013136:	f107 010c 	add.w	r1, r7, #12
 801313a:	f107 0308 	add.w	r3, r7, #8
 801313e:	2200      	movs	r2, #0
 8013140:	4618      	mov	r0, r3
 8013142:	f7ff fd07 	bl	8012b54 <find_volume>
 8013146:	4603      	mov	r3, r0
 8013148:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801314a:	7dfb      	ldrb	r3, [r7, #23]
}
 801314c:	4618      	mov	r0, r3
 801314e:	3720      	adds	r7, #32
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}
 8013154:	200481a4 	.word	0x200481a4

08013158 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b098      	sub	sp, #96	; 0x60
 801315c:	af00      	add	r7, sp, #0
 801315e:	60f8      	str	r0, [r7, #12]
 8013160:	60b9      	str	r1, [r7, #8]
 8013162:	4613      	mov	r3, r2
 8013164:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d101      	bne.n	8013170 <f_open+0x18>
 801316c:	2309      	movs	r3, #9
 801316e:	e1ba      	b.n	80134e6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013170:	79fb      	ldrb	r3, [r7, #7]
 8013172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013176:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013178:	79fa      	ldrb	r2, [r7, #7]
 801317a:	f107 0110 	add.w	r1, r7, #16
 801317e:	f107 0308 	add.w	r3, r7, #8
 8013182:	4618      	mov	r0, r3
 8013184:	f7ff fce6 	bl	8012b54 <find_volume>
 8013188:	4603      	mov	r3, r0
 801318a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801318e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013192:	2b00      	cmp	r3, #0
 8013194:	f040 819e 	bne.w	80134d4 <f_open+0x37c>
		dj.obj.fs = fs;
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801319c:	68ba      	ldr	r2, [r7, #8]
 801319e:	f107 0314 	add.w	r3, r7, #20
 80131a2:	4611      	mov	r1, r2
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7ff fba5 	bl	80128f4 <follow_path>
 80131aa:	4603      	mov	r3, r0
 80131ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80131b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d11a      	bne.n	80131ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80131b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80131bc:	b25b      	sxtb	r3, r3
 80131be:	2b00      	cmp	r3, #0
 80131c0:	da03      	bge.n	80131ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80131c2:	2306      	movs	r3, #6
 80131c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80131c8:	e011      	b.n	80131ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80131ca:	79fb      	ldrb	r3, [r7, #7]
 80131cc:	f023 0301 	bic.w	r3, r3, #1
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	bf14      	ite	ne
 80131d4:	2301      	movne	r3, #1
 80131d6:	2300      	moveq	r3, #0
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	461a      	mov	r2, r3
 80131dc:	f107 0314 	add.w	r3, r7, #20
 80131e0:	4611      	mov	r1, r2
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7fe fa4c 	bl	8011680 <chk_lock>
 80131e8:	4603      	mov	r3, r0
 80131ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80131ee:	79fb      	ldrb	r3, [r7, #7]
 80131f0:	f003 031c 	and.w	r3, r3, #28
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d07e      	beq.n	80132f6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80131f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d017      	beq.n	8013230 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013200:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013204:	2b04      	cmp	r3, #4
 8013206:	d10e      	bne.n	8013226 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013208:	f7fe fa96 	bl	8011738 <enq_lock>
 801320c:	4603      	mov	r3, r0
 801320e:	2b00      	cmp	r3, #0
 8013210:	d006      	beq.n	8013220 <f_open+0xc8>
 8013212:	f107 0314 	add.w	r3, r7, #20
 8013216:	4618      	mov	r0, r3
 8013218:	f7ff fa52 	bl	80126c0 <dir_register>
 801321c:	4603      	mov	r3, r0
 801321e:	e000      	b.n	8013222 <f_open+0xca>
 8013220:	2312      	movs	r3, #18
 8013222:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013226:	79fb      	ldrb	r3, [r7, #7]
 8013228:	f043 0308 	orr.w	r3, r3, #8
 801322c:	71fb      	strb	r3, [r7, #7]
 801322e:	e010      	b.n	8013252 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013230:	7ebb      	ldrb	r3, [r7, #26]
 8013232:	f003 0311 	and.w	r3, r3, #17
 8013236:	2b00      	cmp	r3, #0
 8013238:	d003      	beq.n	8013242 <f_open+0xea>
					res = FR_DENIED;
 801323a:	2307      	movs	r3, #7
 801323c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013240:	e007      	b.n	8013252 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013242:	79fb      	ldrb	r3, [r7, #7]
 8013244:	f003 0304 	and.w	r3, r3, #4
 8013248:	2b00      	cmp	r3, #0
 801324a:	d002      	beq.n	8013252 <f_open+0xfa>
 801324c:	2308      	movs	r3, #8
 801324e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013252:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013256:	2b00      	cmp	r3, #0
 8013258:	d167      	bne.n	801332a <f_open+0x1d2>
 801325a:	79fb      	ldrb	r3, [r7, #7]
 801325c:	f003 0308 	and.w	r3, r3, #8
 8013260:	2b00      	cmp	r3, #0
 8013262:	d062      	beq.n	801332a <f_open+0x1d2>
				dw = GET_FATTIME();
 8013264:	4ba2      	ldr	r3, [pc, #648]	; (80134f0 <f_open+0x398>)
 8013266:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801326a:	330e      	adds	r3, #14
 801326c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801326e:	4618      	mov	r0, r3
 8013270:	f7fe f95c 	bl	801152c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013276:	3316      	adds	r3, #22
 8013278:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801327a:	4618      	mov	r0, r3
 801327c:	f7fe f956 	bl	801152c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013282:	330b      	adds	r3, #11
 8013284:	2220      	movs	r2, #32
 8013286:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801328c:	4611      	mov	r1, r2
 801328e:	4618      	mov	r0, r3
 8013290:	f7ff f925 	bl	80124de <ld_clust>
 8013294:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801329a:	2200      	movs	r2, #0
 801329c:	4618      	mov	r0, r3
 801329e:	f7ff f93d 	bl	801251c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80132a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132a4:	331c      	adds	r3, #28
 80132a6:	2100      	movs	r1, #0
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fe f93f 	bl	801152c <st_dword>
					fs->wflag = 1;
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	2201      	movs	r2, #1
 80132b2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80132b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d037      	beq.n	801332a <f_open+0x1d2>
						dw = fs->winsect;
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132be:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80132c0:	f107 0314 	add.w	r3, r7, #20
 80132c4:	2200      	movs	r2, #0
 80132c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7fe fe2d 	bl	8011f28 <remove_chain>
 80132ce:	4603      	mov	r3, r0
 80132d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80132d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d126      	bne.n	801332a <f_open+0x1d2>
							res = move_window(fs, dw);
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7fe fb7d 	bl	80119e0 <move_window>
 80132e6:	4603      	mov	r3, r0
 80132e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80132f0:	3a01      	subs	r2, #1
 80132f2:	611a      	str	r2, [r3, #16]
 80132f4:	e019      	b.n	801332a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80132f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d115      	bne.n	801332a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80132fe:	7ebb      	ldrb	r3, [r7, #26]
 8013300:	f003 0310 	and.w	r3, r3, #16
 8013304:	2b00      	cmp	r3, #0
 8013306:	d003      	beq.n	8013310 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013308:	2304      	movs	r3, #4
 801330a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801330e:	e00c      	b.n	801332a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013310:	79fb      	ldrb	r3, [r7, #7]
 8013312:	f003 0302 	and.w	r3, r3, #2
 8013316:	2b00      	cmp	r3, #0
 8013318:	d007      	beq.n	801332a <f_open+0x1d2>
 801331a:	7ebb      	ldrb	r3, [r7, #26]
 801331c:	f003 0301 	and.w	r3, r3, #1
 8013320:	2b00      	cmp	r3, #0
 8013322:	d002      	beq.n	801332a <f_open+0x1d2>
						res = FR_DENIED;
 8013324:	2307      	movs	r3, #7
 8013326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801332a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801332e:	2b00      	cmp	r3, #0
 8013330:	d128      	bne.n	8013384 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013332:	79fb      	ldrb	r3, [r7, #7]
 8013334:	f003 0308 	and.w	r3, r3, #8
 8013338:	2b00      	cmp	r3, #0
 801333a:	d003      	beq.n	8013344 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801333c:	79fb      	ldrb	r3, [r7, #7]
 801333e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013342:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801334c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013352:	79fb      	ldrb	r3, [r7, #7]
 8013354:	f023 0301 	bic.w	r3, r3, #1
 8013358:	2b00      	cmp	r3, #0
 801335a:	bf14      	ite	ne
 801335c:	2301      	movne	r3, #1
 801335e:	2300      	moveq	r3, #0
 8013360:	b2db      	uxtb	r3, r3
 8013362:	461a      	mov	r2, r3
 8013364:	f107 0314 	add.w	r3, r7, #20
 8013368:	4611      	mov	r1, r2
 801336a:	4618      	mov	r0, r3
 801336c:	f7fe fa06 	bl	801177c <inc_lock>
 8013370:	4602      	mov	r2, r0
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	691b      	ldr	r3, [r3, #16]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d102      	bne.n	8013384 <f_open+0x22c>
 801337e:	2302      	movs	r3, #2
 8013380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013388:	2b00      	cmp	r3, #0
 801338a:	f040 80a3 	bne.w	80134d4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013392:	4611      	mov	r1, r2
 8013394:	4618      	mov	r0, r3
 8013396:	f7ff f8a2 	bl	80124de <ld_clust>
 801339a:	4602      	mov	r2, r0
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80133a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133a2:	331c      	adds	r3, #28
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7fe f883 	bl	80114b0 <ld_dword>
 80133aa:	4602      	mov	r2, r0
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	2200      	movs	r2, #0
 80133b4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80133b6:	693a      	ldr	r2, [r7, #16]
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	88da      	ldrh	r2, [r3, #6]
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	79fa      	ldrb	r2, [r7, #7]
 80133c8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2200      	movs	r2, #0
 80133ce:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	2200      	movs	r2, #0
 80133d4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2200      	movs	r2, #0
 80133da:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	3330      	adds	r3, #48	; 0x30
 80133e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80133e4:	2100      	movs	r1, #0
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7fe f8ed 	bl	80115c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80133ec:	79fb      	ldrb	r3, [r7, #7]
 80133ee:	f003 0320 	and.w	r3, r3, #32
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d06e      	beq.n	80134d4 <f_open+0x37c>
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	68db      	ldr	r3, [r3, #12]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d06a      	beq.n	80134d4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	68da      	ldr	r2, [r3, #12]
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	895b      	ldrh	r3, [r3, #10]
 801340a:	461a      	mov	r2, r3
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	899b      	ldrh	r3, [r3, #12]
 8013410:	fb03 f302 	mul.w	r3, r3, r2
 8013414:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	689b      	ldr	r3, [r3, #8]
 801341a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	68db      	ldr	r3, [r3, #12]
 8013420:	657b      	str	r3, [r7, #84]	; 0x54
 8013422:	e016      	b.n	8013452 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013428:	4618      	mov	r0, r3
 801342a:	f7fe fb96 	bl	8011b5a <get_fat>
 801342e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013432:	2b01      	cmp	r3, #1
 8013434:	d802      	bhi.n	801343c <f_open+0x2e4>
 8013436:	2302      	movs	r3, #2
 8013438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801343c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013442:	d102      	bne.n	801344a <f_open+0x2f2>
 8013444:	2301      	movs	r3, #1
 8013446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801344a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801344c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801344e:	1ad3      	subs	r3, r2, r3
 8013450:	657b      	str	r3, [r7, #84]	; 0x54
 8013452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013456:	2b00      	cmp	r3, #0
 8013458:	d103      	bne.n	8013462 <f_open+0x30a>
 801345a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801345c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801345e:	429a      	cmp	r2, r3
 8013460:	d8e0      	bhi.n	8013424 <f_open+0x2cc>
				}
				fp->clust = clst;
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013466:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801346c:	2b00      	cmp	r3, #0
 801346e:	d131      	bne.n	80134d4 <f_open+0x37c>
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	899b      	ldrh	r3, [r3, #12]
 8013474:	461a      	mov	r2, r3
 8013476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013478:	fbb3 f1f2 	udiv	r1, r3, r2
 801347c:	fb02 f201 	mul.w	r2, r2, r1
 8013480:	1a9b      	subs	r3, r3, r2
 8013482:	2b00      	cmp	r3, #0
 8013484:	d026      	beq.n	80134d4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801348a:	4618      	mov	r0, r3
 801348c:	f7fe fb46 	bl	8011b1c <clust2sect>
 8013490:	6478      	str	r0, [r7, #68]	; 0x44
 8013492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013494:	2b00      	cmp	r3, #0
 8013496:	d103      	bne.n	80134a0 <f_open+0x348>
						res = FR_INT_ERR;
 8013498:	2302      	movs	r3, #2
 801349a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801349e:	e019      	b.n	80134d4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	899b      	ldrh	r3, [r3, #12]
 80134a4:	461a      	mov	r2, r3
 80134a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80134ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134ae:	441a      	add	r2, r3
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	7858      	ldrb	r0, [r3, #1]
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	6a1a      	ldr	r2, [r3, #32]
 80134c2:	2301      	movs	r3, #1
 80134c4:	f7fd ff7e 	bl	80113c4 <disk_read>
 80134c8:	4603      	mov	r3, r0
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d002      	beq.n	80134d4 <f_open+0x37c>
 80134ce:	2301      	movs	r3, #1
 80134d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80134d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d002      	beq.n	80134e2 <f_open+0x38a>
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	2200      	movs	r2, #0
 80134e0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80134e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3760      	adds	r7, #96	; 0x60
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bd80      	pop	{r7, pc}
 80134ee:	bf00      	nop
 80134f0:	274a0000 	.word	0x274a0000

080134f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b08e      	sub	sp, #56	; 0x38
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	60b9      	str	r1, [r7, #8]
 80134fe:	607a      	str	r2, [r7, #4]
 8013500:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	2200      	movs	r2, #0
 801350a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	f107 0214 	add.w	r2, r7, #20
 8013512:	4611      	mov	r1, r2
 8013514:	4618      	mov	r0, r3
 8013516:	f7ff fda3 	bl	8013060 <validate>
 801351a:	4603      	mov	r3, r0
 801351c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013520:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013524:	2b00      	cmp	r3, #0
 8013526:	d107      	bne.n	8013538 <f_read+0x44>
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	7d5b      	ldrb	r3, [r3, #21]
 801352c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013530:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013534:	2b00      	cmp	r3, #0
 8013536:	d002      	beq.n	801353e <f_read+0x4a>
 8013538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801353c:	e135      	b.n	80137aa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	7d1b      	ldrb	r3, [r3, #20]
 8013542:	f003 0301 	and.w	r3, r3, #1
 8013546:	2b00      	cmp	r3, #0
 8013548:	d101      	bne.n	801354e <f_read+0x5a>
 801354a:	2307      	movs	r3, #7
 801354c:	e12d      	b.n	80137aa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	68da      	ldr	r2, [r3, #12]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	699b      	ldr	r3, [r3, #24]
 8013556:	1ad3      	subs	r3, r2, r3
 8013558:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801355a:	687a      	ldr	r2, [r7, #4]
 801355c:	6a3b      	ldr	r3, [r7, #32]
 801355e:	429a      	cmp	r2, r3
 8013560:	f240 811e 	bls.w	80137a0 <f_read+0x2ac>
 8013564:	6a3b      	ldr	r3, [r7, #32]
 8013566:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013568:	e11a      	b.n	80137a0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	699b      	ldr	r3, [r3, #24]
 801356e:	697a      	ldr	r2, [r7, #20]
 8013570:	8992      	ldrh	r2, [r2, #12]
 8013572:	fbb3 f1f2 	udiv	r1, r3, r2
 8013576:	fb02 f201 	mul.w	r2, r2, r1
 801357a:	1a9b      	subs	r3, r3, r2
 801357c:	2b00      	cmp	r3, #0
 801357e:	f040 80d5 	bne.w	801372c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	699b      	ldr	r3, [r3, #24]
 8013586:	697a      	ldr	r2, [r7, #20]
 8013588:	8992      	ldrh	r2, [r2, #12]
 801358a:	fbb3 f3f2 	udiv	r3, r3, r2
 801358e:	697a      	ldr	r2, [r7, #20]
 8013590:	8952      	ldrh	r2, [r2, #10]
 8013592:	3a01      	subs	r2, #1
 8013594:	4013      	ands	r3, r2
 8013596:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013598:	69fb      	ldr	r3, [r7, #28]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d12f      	bne.n	80135fe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	699b      	ldr	r3, [r3, #24]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d103      	bne.n	80135ae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	633b      	str	r3, [r7, #48]	; 0x30
 80135ac:	e013      	b.n	80135d6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d007      	beq.n	80135c6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	699b      	ldr	r3, [r3, #24]
 80135ba:	4619      	mov	r1, r3
 80135bc:	68f8      	ldr	r0, [r7, #12]
 80135be:	f7fe fdb0 	bl	8012122 <clmt_clust>
 80135c2:	6338      	str	r0, [r7, #48]	; 0x30
 80135c4:	e007      	b.n	80135d6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80135c6:	68fa      	ldr	r2, [r7, #12]
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	69db      	ldr	r3, [r3, #28]
 80135cc:	4619      	mov	r1, r3
 80135ce:	4610      	mov	r0, r2
 80135d0:	f7fe fac3 	bl	8011b5a <get_fat>
 80135d4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80135d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d8:	2b01      	cmp	r3, #1
 80135da:	d804      	bhi.n	80135e6 <f_read+0xf2>
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	2202      	movs	r2, #2
 80135e0:	755a      	strb	r2, [r3, #21]
 80135e2:	2302      	movs	r3, #2
 80135e4:	e0e1      	b.n	80137aa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80135e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ec:	d104      	bne.n	80135f8 <f_read+0x104>
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2201      	movs	r2, #1
 80135f2:	755a      	strb	r2, [r3, #21]
 80135f4:	2301      	movs	r3, #1
 80135f6:	e0d8      	b.n	80137aa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135fc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80135fe:	697a      	ldr	r2, [r7, #20]
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	69db      	ldr	r3, [r3, #28]
 8013604:	4619      	mov	r1, r3
 8013606:	4610      	mov	r0, r2
 8013608:	f7fe fa88 	bl	8011b1c <clust2sect>
 801360c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801360e:	69bb      	ldr	r3, [r7, #24]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d104      	bne.n	801361e <f_read+0x12a>
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	2202      	movs	r2, #2
 8013618:	755a      	strb	r2, [r3, #21]
 801361a:	2302      	movs	r3, #2
 801361c:	e0c5      	b.n	80137aa <f_read+0x2b6>
			sect += csect;
 801361e:	69ba      	ldr	r2, [r7, #24]
 8013620:	69fb      	ldr	r3, [r7, #28]
 8013622:	4413      	add	r3, r2
 8013624:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	899b      	ldrh	r3, [r3, #12]
 801362a:	461a      	mov	r2, r3
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013632:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013636:	2b00      	cmp	r3, #0
 8013638:	d041      	beq.n	80136be <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801363a:	69fa      	ldr	r2, [r7, #28]
 801363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363e:	4413      	add	r3, r2
 8013640:	697a      	ldr	r2, [r7, #20]
 8013642:	8952      	ldrh	r2, [r2, #10]
 8013644:	4293      	cmp	r3, r2
 8013646:	d905      	bls.n	8013654 <f_read+0x160>
					cc = fs->csize - csect;
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	895b      	ldrh	r3, [r3, #10]
 801364c:	461a      	mov	r2, r3
 801364e:	69fb      	ldr	r3, [r7, #28]
 8013650:	1ad3      	subs	r3, r2, r3
 8013652:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	7858      	ldrb	r0, [r3, #1]
 8013658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365a:	69ba      	ldr	r2, [r7, #24]
 801365c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801365e:	f7fd feb1 	bl	80113c4 <disk_read>
 8013662:	4603      	mov	r3, r0
 8013664:	2b00      	cmp	r3, #0
 8013666:	d004      	beq.n	8013672 <f_read+0x17e>
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	2201      	movs	r2, #1
 801366c:	755a      	strb	r2, [r3, #21]
 801366e:	2301      	movs	r3, #1
 8013670:	e09b      	b.n	80137aa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	7d1b      	ldrb	r3, [r3, #20]
 8013676:	b25b      	sxtb	r3, r3
 8013678:	2b00      	cmp	r3, #0
 801367a:	da18      	bge.n	80136ae <f_read+0x1ba>
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	6a1a      	ldr	r2, [r3, #32]
 8013680:	69bb      	ldr	r3, [r7, #24]
 8013682:	1ad3      	subs	r3, r2, r3
 8013684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013686:	429a      	cmp	r2, r3
 8013688:	d911      	bls.n	80136ae <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	6a1a      	ldr	r2, [r3, #32]
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	1ad3      	subs	r3, r2, r3
 8013692:	697a      	ldr	r2, [r7, #20]
 8013694:	8992      	ldrh	r2, [r2, #12]
 8013696:	fb02 f303 	mul.w	r3, r2, r3
 801369a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801369c:	18d0      	adds	r0, r2, r3
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	899b      	ldrh	r3, [r3, #12]
 80136a8:	461a      	mov	r2, r3
 80136aa:	f7fd ff6b 	bl	8011584 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	899b      	ldrh	r3, [r3, #12]
 80136b2:	461a      	mov	r2, r3
 80136b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b6:	fb02 f303 	mul.w	r3, r2, r3
 80136ba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80136bc:	e05c      	b.n	8013778 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	6a1b      	ldr	r3, [r3, #32]
 80136c2:	69ba      	ldr	r2, [r7, #24]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d02e      	beq.n	8013726 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	7d1b      	ldrb	r3, [r3, #20]
 80136cc:	b25b      	sxtb	r3, r3
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	da18      	bge.n	8013704 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	7858      	ldrb	r0, [r3, #1]
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	6a1a      	ldr	r2, [r3, #32]
 80136e0:	2301      	movs	r3, #1
 80136e2:	f7fd fe8f 	bl	8011404 <disk_write>
 80136e6:	4603      	mov	r3, r0
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d004      	beq.n	80136f6 <f_read+0x202>
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2201      	movs	r2, #1
 80136f0:	755a      	strb	r2, [r3, #21]
 80136f2:	2301      	movs	r3, #1
 80136f4:	e059      	b.n	80137aa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	7d1b      	ldrb	r3, [r3, #20]
 80136fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80136fe:	b2da      	uxtb	r2, r3
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	7858      	ldrb	r0, [r3, #1]
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801370e:	2301      	movs	r3, #1
 8013710:	69ba      	ldr	r2, [r7, #24]
 8013712:	f7fd fe57 	bl	80113c4 <disk_read>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d004      	beq.n	8013726 <f_read+0x232>
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	2201      	movs	r2, #1
 8013720:	755a      	strb	r2, [r3, #21]
 8013722:	2301      	movs	r3, #1
 8013724:	e041      	b.n	80137aa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	69ba      	ldr	r2, [r7, #24]
 801372a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	899b      	ldrh	r3, [r3, #12]
 8013730:	4618      	mov	r0, r3
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	699b      	ldr	r3, [r3, #24]
 8013736:	697a      	ldr	r2, [r7, #20]
 8013738:	8992      	ldrh	r2, [r2, #12]
 801373a:	fbb3 f1f2 	udiv	r1, r3, r2
 801373e:	fb02 f201 	mul.w	r2, r2, r1
 8013742:	1a9b      	subs	r3, r3, r2
 8013744:	1ac3      	subs	r3, r0, r3
 8013746:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	429a      	cmp	r2, r3
 801374e:	d901      	bls.n	8013754 <f_read+0x260>
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	699b      	ldr	r3, [r3, #24]
 801375e:	697a      	ldr	r2, [r7, #20]
 8013760:	8992      	ldrh	r2, [r2, #12]
 8013762:	fbb3 f0f2 	udiv	r0, r3, r2
 8013766:	fb02 f200 	mul.w	r2, r2, r0
 801376a:	1a9b      	subs	r3, r3, r2
 801376c:	440b      	add	r3, r1
 801376e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013770:	4619      	mov	r1, r3
 8013772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013774:	f7fd ff06 	bl	8011584 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801377c:	4413      	add	r3, r2
 801377e:	627b      	str	r3, [r7, #36]	; 0x24
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	699a      	ldr	r2, [r3, #24]
 8013784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013786:	441a      	add	r2, r3
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	619a      	str	r2, [r3, #24]
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013792:	441a      	add	r2, r3
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	601a      	str	r2, [r3, #0]
 8013798:	687a      	ldr	r2, [r7, #4]
 801379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801379c:	1ad3      	subs	r3, r2, r3
 801379e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	f47f aee1 	bne.w	801356a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80137a8:	2300      	movs	r3, #0
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3738      	adds	r7, #56	; 0x38
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}

080137b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80137b2:	b580      	push	{r7, lr}
 80137b4:	b08c      	sub	sp, #48	; 0x30
 80137b6:	af00      	add	r7, sp, #0
 80137b8:	60f8      	str	r0, [r7, #12]
 80137ba:	60b9      	str	r1, [r7, #8]
 80137bc:	607a      	str	r2, [r7, #4]
 80137be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	2200      	movs	r2, #0
 80137c8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	f107 0210 	add.w	r2, r7, #16
 80137d0:	4611      	mov	r1, r2
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7ff fc44 	bl	8013060 <validate>
 80137d8:	4603      	mov	r3, r0
 80137da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80137de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d107      	bne.n	80137f6 <f_write+0x44>
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	7d5b      	ldrb	r3, [r3, #21]
 80137ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80137ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d002      	beq.n	80137fc <f_write+0x4a>
 80137f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137fa:	e16a      	b.n	8013ad2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	7d1b      	ldrb	r3, [r3, #20]
 8013800:	f003 0302 	and.w	r3, r3, #2
 8013804:	2b00      	cmp	r3, #0
 8013806:	d101      	bne.n	801380c <f_write+0x5a>
 8013808:	2307      	movs	r3, #7
 801380a:	e162      	b.n	8013ad2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	699a      	ldr	r2, [r3, #24]
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	441a      	add	r2, r3
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	699b      	ldr	r3, [r3, #24]
 8013818:	429a      	cmp	r2, r3
 801381a:	f080 814c 	bcs.w	8013ab6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	699b      	ldr	r3, [r3, #24]
 8013822:	43db      	mvns	r3, r3
 8013824:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013826:	e146      	b.n	8013ab6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	699b      	ldr	r3, [r3, #24]
 801382c:	693a      	ldr	r2, [r7, #16]
 801382e:	8992      	ldrh	r2, [r2, #12]
 8013830:	fbb3 f1f2 	udiv	r1, r3, r2
 8013834:	fb02 f201 	mul.w	r2, r2, r1
 8013838:	1a9b      	subs	r3, r3, r2
 801383a:	2b00      	cmp	r3, #0
 801383c:	f040 80f1 	bne.w	8013a22 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	699b      	ldr	r3, [r3, #24]
 8013844:	693a      	ldr	r2, [r7, #16]
 8013846:	8992      	ldrh	r2, [r2, #12]
 8013848:	fbb3 f3f2 	udiv	r3, r3, r2
 801384c:	693a      	ldr	r2, [r7, #16]
 801384e:	8952      	ldrh	r2, [r2, #10]
 8013850:	3a01      	subs	r2, #1
 8013852:	4013      	ands	r3, r2
 8013854:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013856:	69bb      	ldr	r3, [r7, #24]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d143      	bne.n	80138e4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	699b      	ldr	r3, [r3, #24]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d10c      	bne.n	801387e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801386c:	2b00      	cmp	r3, #0
 801386e:	d11a      	bne.n	80138a6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	2100      	movs	r1, #0
 8013874:	4618      	mov	r0, r3
 8013876:	f7fe fbbc 	bl	8011ff2 <create_chain>
 801387a:	62b8      	str	r0, [r7, #40]	; 0x28
 801387c:	e013      	b.n	80138a6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013882:	2b00      	cmp	r3, #0
 8013884:	d007      	beq.n	8013896 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	699b      	ldr	r3, [r3, #24]
 801388a:	4619      	mov	r1, r3
 801388c:	68f8      	ldr	r0, [r7, #12]
 801388e:	f7fe fc48 	bl	8012122 <clmt_clust>
 8013892:	62b8      	str	r0, [r7, #40]	; 0x28
 8013894:	e007      	b.n	80138a6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013896:	68fa      	ldr	r2, [r7, #12]
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	69db      	ldr	r3, [r3, #28]
 801389c:	4619      	mov	r1, r3
 801389e:	4610      	mov	r0, r2
 80138a0:	f7fe fba7 	bl	8011ff2 <create_chain>
 80138a4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80138a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	f000 8109 	beq.w	8013ac0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80138ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	d104      	bne.n	80138be <f_write+0x10c>
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	2202      	movs	r2, #2
 80138b8:	755a      	strb	r2, [r3, #21]
 80138ba:	2302      	movs	r3, #2
 80138bc:	e109      	b.n	8013ad2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138c4:	d104      	bne.n	80138d0 <f_write+0x11e>
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	2201      	movs	r2, #1
 80138ca:	755a      	strb	r2, [r3, #21]
 80138cc:	2301      	movs	r3, #1
 80138ce:	e100      	b.n	8013ad2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138d4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	689b      	ldr	r3, [r3, #8]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d102      	bne.n	80138e4 <f_write+0x132>
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138e2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	7d1b      	ldrb	r3, [r3, #20]
 80138e8:	b25b      	sxtb	r3, r3
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	da18      	bge.n	8013920 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	7858      	ldrb	r0, [r3, #1]
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	6a1a      	ldr	r2, [r3, #32]
 80138fc:	2301      	movs	r3, #1
 80138fe:	f7fd fd81 	bl	8011404 <disk_write>
 8013902:	4603      	mov	r3, r0
 8013904:	2b00      	cmp	r3, #0
 8013906:	d004      	beq.n	8013912 <f_write+0x160>
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	2201      	movs	r2, #1
 801390c:	755a      	strb	r2, [r3, #21]
 801390e:	2301      	movs	r3, #1
 8013910:	e0df      	b.n	8013ad2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	7d1b      	ldrb	r3, [r3, #20]
 8013916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801391a:	b2da      	uxtb	r2, r3
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013920:	693a      	ldr	r2, [r7, #16]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	69db      	ldr	r3, [r3, #28]
 8013926:	4619      	mov	r1, r3
 8013928:	4610      	mov	r0, r2
 801392a:	f7fe f8f7 	bl	8011b1c <clust2sect>
 801392e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d104      	bne.n	8013940 <f_write+0x18e>
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	2202      	movs	r2, #2
 801393a:	755a      	strb	r2, [r3, #21]
 801393c:	2302      	movs	r3, #2
 801393e:	e0c8      	b.n	8013ad2 <f_write+0x320>
			sect += csect;
 8013940:	697a      	ldr	r2, [r7, #20]
 8013942:	69bb      	ldr	r3, [r7, #24]
 8013944:	4413      	add	r3, r2
 8013946:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013948:	693b      	ldr	r3, [r7, #16]
 801394a:	899b      	ldrh	r3, [r3, #12]
 801394c:	461a      	mov	r2, r3
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	fbb3 f3f2 	udiv	r3, r3, r2
 8013954:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013956:	6a3b      	ldr	r3, [r7, #32]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d043      	beq.n	80139e4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801395c:	69ba      	ldr	r2, [r7, #24]
 801395e:	6a3b      	ldr	r3, [r7, #32]
 8013960:	4413      	add	r3, r2
 8013962:	693a      	ldr	r2, [r7, #16]
 8013964:	8952      	ldrh	r2, [r2, #10]
 8013966:	4293      	cmp	r3, r2
 8013968:	d905      	bls.n	8013976 <f_write+0x1c4>
					cc = fs->csize - csect;
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	895b      	ldrh	r3, [r3, #10]
 801396e:	461a      	mov	r2, r3
 8013970:	69bb      	ldr	r3, [r7, #24]
 8013972:	1ad3      	subs	r3, r2, r3
 8013974:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	7858      	ldrb	r0, [r3, #1]
 801397a:	6a3b      	ldr	r3, [r7, #32]
 801397c:	697a      	ldr	r2, [r7, #20]
 801397e:	69f9      	ldr	r1, [r7, #28]
 8013980:	f7fd fd40 	bl	8011404 <disk_write>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d004      	beq.n	8013994 <f_write+0x1e2>
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	2201      	movs	r2, #1
 801398e:	755a      	strb	r2, [r3, #21]
 8013990:	2301      	movs	r3, #1
 8013992:	e09e      	b.n	8013ad2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	6a1a      	ldr	r2, [r3, #32]
 8013998:	697b      	ldr	r3, [r7, #20]
 801399a:	1ad3      	subs	r3, r2, r3
 801399c:	6a3a      	ldr	r2, [r7, #32]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d918      	bls.n	80139d4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	6a1a      	ldr	r2, [r3, #32]
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	1ad3      	subs	r3, r2, r3
 80139b0:	693a      	ldr	r2, [r7, #16]
 80139b2:	8992      	ldrh	r2, [r2, #12]
 80139b4:	fb02 f303 	mul.w	r3, r2, r3
 80139b8:	69fa      	ldr	r2, [r7, #28]
 80139ba:	18d1      	adds	r1, r2, r3
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	899b      	ldrh	r3, [r3, #12]
 80139c0:	461a      	mov	r2, r3
 80139c2:	f7fd fddf 	bl	8011584 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	7d1b      	ldrb	r3, [r3, #20]
 80139ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139ce:	b2da      	uxtb	r2, r3
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	899b      	ldrh	r3, [r3, #12]
 80139d8:	461a      	mov	r2, r3
 80139da:	6a3b      	ldr	r3, [r7, #32]
 80139dc:	fb02 f303 	mul.w	r3, r2, r3
 80139e0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80139e2:	e04b      	b.n	8013a7c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	6a1b      	ldr	r3, [r3, #32]
 80139e8:	697a      	ldr	r2, [r7, #20]
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d016      	beq.n	8013a1c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	699a      	ldr	r2, [r3, #24]
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d210      	bcs.n	8013a1c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80139fa:	693b      	ldr	r3, [r7, #16]
 80139fc:	7858      	ldrb	r0, [r3, #1]
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a04:	2301      	movs	r3, #1
 8013a06:	697a      	ldr	r2, [r7, #20]
 8013a08:	f7fd fcdc 	bl	80113c4 <disk_read>
 8013a0c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d004      	beq.n	8013a1c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2201      	movs	r2, #1
 8013a16:	755a      	strb	r2, [r3, #21]
 8013a18:	2301      	movs	r3, #1
 8013a1a:	e05a      	b.n	8013ad2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	697a      	ldr	r2, [r7, #20]
 8013a20:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	899b      	ldrh	r3, [r3, #12]
 8013a26:	4618      	mov	r0, r3
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	699b      	ldr	r3, [r3, #24]
 8013a2c:	693a      	ldr	r2, [r7, #16]
 8013a2e:	8992      	ldrh	r2, [r2, #12]
 8013a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a34:	fb02 f201 	mul.w	r2, r2, r1
 8013a38:	1a9b      	subs	r3, r3, r2
 8013a3a:	1ac3      	subs	r3, r0, r3
 8013a3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d901      	bls.n	8013a4a <f_write+0x298>
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	699b      	ldr	r3, [r3, #24]
 8013a54:	693a      	ldr	r2, [r7, #16]
 8013a56:	8992      	ldrh	r2, [r2, #12]
 8013a58:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a5c:	fb02 f200 	mul.w	r2, r2, r0
 8013a60:	1a9b      	subs	r3, r3, r2
 8013a62:	440b      	add	r3, r1
 8013a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a66:	69f9      	ldr	r1, [r7, #28]
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f7fd fd8b 	bl	8011584 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	7d1b      	ldrb	r3, [r3, #20]
 8013a72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013a76:	b2da      	uxtb	r2, r3
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013a7c:	69fa      	ldr	r2, [r7, #28]
 8013a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a80:	4413      	add	r3, r2
 8013a82:	61fb      	str	r3, [r7, #28]
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	699a      	ldr	r2, [r3, #24]
 8013a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8a:	441a      	add	r2, r3
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	619a      	str	r2, [r3, #24]
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	68da      	ldr	r2, [r3, #12]
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	699b      	ldr	r3, [r3, #24]
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	bf38      	it	cc
 8013a9c:	461a      	movcc	r2, r3
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	60da      	str	r2, [r3, #12]
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	681a      	ldr	r2, [r3, #0]
 8013aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa8:	441a      	add	r2, r3
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	601a      	str	r2, [r3, #0]
 8013aae:	687a      	ldr	r2, [r7, #4]
 8013ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab2:	1ad3      	subs	r3, r2, r3
 8013ab4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	f47f aeb5 	bne.w	8013828 <f_write+0x76>
 8013abe:	e000      	b.n	8013ac2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013ac0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	7d1b      	ldrb	r3, [r3, #20]
 8013ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013aca:	b2da      	uxtb	r2, r3
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013ad0:	2300      	movs	r3, #0
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3730      	adds	r7, #48	; 0x30
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
	...

08013adc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b086      	sub	sp, #24
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f107 0208 	add.w	r2, r7, #8
 8013aea:	4611      	mov	r1, r2
 8013aec:	4618      	mov	r0, r3
 8013aee:	f7ff fab7 	bl	8013060 <validate>
 8013af2:	4603      	mov	r3, r0
 8013af4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013af6:	7dfb      	ldrb	r3, [r7, #23]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d167      	bne.n	8013bcc <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	7d1b      	ldrb	r3, [r3, #20]
 8013b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d061      	beq.n	8013bcc <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	7d1b      	ldrb	r3, [r3, #20]
 8013b0c:	b25b      	sxtb	r3, r3
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	da15      	bge.n	8013b3e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	7858      	ldrb	r0, [r3, #1]
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6a1a      	ldr	r2, [r3, #32]
 8013b20:	2301      	movs	r3, #1
 8013b22:	f7fd fc6f 	bl	8011404 <disk_write>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d001      	beq.n	8013b30 <f_sync+0x54>
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	e04e      	b.n	8013bce <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	7d1b      	ldrb	r3, [r3, #20]
 8013b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b38:	b2da      	uxtb	r2, r3
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013b3e:	4b26      	ldr	r3, [pc, #152]	; (8013bd8 <f_sync+0xfc>)
 8013b40:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013b42:	68ba      	ldr	r2, [r7, #8]
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b48:	4619      	mov	r1, r3
 8013b4a:	4610      	mov	r0, r2
 8013b4c:	f7fd ff48 	bl	80119e0 <move_window>
 8013b50:	4603      	mov	r3, r0
 8013b52:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013b54:	7dfb      	ldrb	r3, [r7, #23]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d138      	bne.n	8013bcc <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b5e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	330b      	adds	r3, #11
 8013b64:	781a      	ldrb	r2, [r3, #0]
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	330b      	adds	r3, #11
 8013b6a:	f042 0220 	orr.w	r2, r2, #32
 8013b6e:	b2d2      	uxtb	r2, r2
 8013b70:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6818      	ldr	r0, [r3, #0]
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	689b      	ldr	r3, [r3, #8]
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	68f9      	ldr	r1, [r7, #12]
 8013b7e:	f7fe fccd 	bl	801251c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	f103 021c 	add.w	r2, r3, #28
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	4610      	mov	r0, r2
 8013b90:	f7fd fccc 	bl	801152c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	3316      	adds	r3, #22
 8013b98:	6939      	ldr	r1, [r7, #16]
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7fd fcc6 	bl	801152c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	3312      	adds	r3, #18
 8013ba4:	2100      	movs	r1, #0
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7fd fca5 	bl	80114f6 <st_word>
					fs->wflag = 1;
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	2201      	movs	r2, #1
 8013bb0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7fd ff41 	bl	8011a3c <sync_fs>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	7d1b      	ldrb	r3, [r3, #20]
 8013bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013bc6:	b2da      	uxtb	r2, r3
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3718      	adds	r7, #24
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bd80      	pop	{r7, pc}
 8013bd6:	bf00      	nop
 8013bd8:	274a0000 	.word	0x274a0000

08013bdc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b084      	sub	sp, #16
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f7ff ff79 	bl	8013adc <f_sync>
 8013bea:	4603      	mov	r3, r0
 8013bec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013bee:	7bfb      	ldrb	r3, [r7, #15]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d118      	bne.n	8013c26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f107 0208 	add.w	r2, r7, #8
 8013bfa:	4611      	mov	r1, r2
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7ff fa2f 	bl	8013060 <validate>
 8013c02:	4603      	mov	r3, r0
 8013c04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013c06:	7bfb      	ldrb	r3, [r7, #15]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d10c      	bne.n	8013c26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	691b      	ldr	r3, [r3, #16]
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7fd fe41 	bl	8011898 <dec_lock>
 8013c16:	4603      	mov	r3, r0
 8013c18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013c1a:	7bfb      	ldrb	r3, [r7, #15]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d102      	bne.n	8013c26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2200      	movs	r2, #0
 8013c24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3710      	adds	r7, #16
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}

08013c30 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013c30:	b590      	push	{r4, r7, lr}
 8013c32:	b091      	sub	sp, #68	; 0x44
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013c38:	f107 0108 	add.w	r1, r7, #8
 8013c3c:	1d3b      	adds	r3, r7, #4
 8013c3e:	2200      	movs	r2, #0
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7fe ff87 	bl	8012b54 <find_volume>
 8013c46:	4603      	mov	r3, r0
 8013c48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013c4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d131      	bne.n	8013cb8 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013c58:	687a      	ldr	r2, [r7, #4]
 8013c5a:	f107 030c 	add.w	r3, r7, #12
 8013c5e:	4611      	mov	r1, r2
 8013c60:	4618      	mov	r0, r3
 8013c62:	f7fe fe47 	bl	80128f4 <follow_path>
 8013c66:	4603      	mov	r3, r0
 8013c68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013c6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d11a      	bne.n	8013caa <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013c74:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013c78:	b25b      	sxtb	r3, r3
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	da03      	bge.n	8013c86 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	697a      	ldr	r2, [r7, #20]
 8013c82:	619a      	str	r2, [r3, #24]
 8013c84:	e011      	b.n	8013caa <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013c86:	7cbb      	ldrb	r3, [r7, #18]
 8013c88:	f003 0310 	and.w	r3, r3, #16
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d009      	beq.n	8013ca4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c94:	68bc      	ldr	r4, [r7, #8]
 8013c96:	4611      	mov	r1, r2
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f7fe fc20 	bl	80124de <ld_clust>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	61a3      	str	r3, [r4, #24]
 8013ca2:	e002      	b.n	8013caa <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013ca4:	2305      	movs	r3, #5
 8013ca6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013caa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013cae:	2b04      	cmp	r3, #4
 8013cb0:	d102      	bne.n	8013cb8 <f_chdir+0x88>
 8013cb2:	2305      	movs	r3, #5
 8013cb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013cb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3744      	adds	r7, #68	; 0x44
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd90      	pop	{r4, r7, pc}

08013cc4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b090      	sub	sp, #64	; 0x40
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f107 0208 	add.w	r2, r7, #8
 8013cd4:	4611      	mov	r1, r2
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7ff f9c2 	bl	8013060 <validate>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013ce2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d103      	bne.n	8013cf2 <f_lseek+0x2e>
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	7d5b      	ldrb	r3, [r3, #21]
 8013cee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013cf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d002      	beq.n	8013d00 <f_lseek+0x3c>
 8013cfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013cfe:	e201      	b.n	8014104 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	f000 80d9 	beq.w	8013ebc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013d0a:	683b      	ldr	r3, [r7, #0]
 8013d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d10:	d15a      	bne.n	8013dc8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d16:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d1a:	1d1a      	adds	r2, r3, #4
 8013d1c:	627a      	str	r2, [r7, #36]	; 0x24
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	617b      	str	r3, [r7, #20]
 8013d22:	2302      	movs	r3, #2
 8013d24:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	689b      	ldr	r3, [r3, #8]
 8013d2a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d03a      	beq.n	8013da8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d34:	613b      	str	r3, [r7, #16]
 8013d36:	2300      	movs	r3, #0
 8013d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d3c:	3302      	adds	r3, #2
 8013d3e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d42:	60fb      	str	r3, [r7, #12]
 8013d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d46:	3301      	adds	r3, #1
 8013d48:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fd ff03 	bl	8011b5a <get_fat>
 8013d54:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d58:	2b01      	cmp	r3, #1
 8013d5a:	d804      	bhi.n	8013d66 <f_lseek+0xa2>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2202      	movs	r2, #2
 8013d60:	755a      	strb	r2, [r3, #21]
 8013d62:	2302      	movs	r3, #2
 8013d64:	e1ce      	b.n	8014104 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d6c:	d104      	bne.n	8013d78 <f_lseek+0xb4>
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	2201      	movs	r2, #1
 8013d72:	755a      	strb	r2, [r3, #21]
 8013d74:	2301      	movs	r3, #1
 8013d76:	e1c5      	b.n	8014104 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	3301      	adds	r3, #1
 8013d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d0de      	beq.n	8013d40 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d809      	bhi.n	8013d9e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8c:	1d1a      	adds	r2, r3, #4
 8013d8e:	627a      	str	r2, [r7, #36]	; 0x24
 8013d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d92:	601a      	str	r2, [r3, #0]
 8013d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d96:	1d1a      	adds	r2, r3, #4
 8013d98:	627a      	str	r2, [r7, #36]	; 0x24
 8013d9a:	693a      	ldr	r2, [r7, #16]
 8013d9c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	69db      	ldr	r3, [r3, #28]
 8013da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d3c4      	bcc.n	8013d32 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dae:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d803      	bhi.n	8013dc0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dba:	2200      	movs	r2, #0
 8013dbc:	601a      	str	r2, [r3, #0]
 8013dbe:	e19f      	b.n	8014100 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013dc0:	2311      	movs	r3, #17
 8013dc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013dc6:	e19b      	b.n	8014100 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	683a      	ldr	r2, [r7, #0]
 8013dce:	429a      	cmp	r2, r3
 8013dd0:	d902      	bls.n	8013dd8 <f_lseek+0x114>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	683a      	ldr	r2, [r7, #0]
 8013ddc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	f000 818d 	beq.w	8014100 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013de6:	683b      	ldr	r3, [r7, #0]
 8013de8:	3b01      	subs	r3, #1
 8013dea:	4619      	mov	r1, r3
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f7fe f998 	bl	8012122 <clmt_clust>
 8013df2:	4602      	mov	r2, r0
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013df8:	68ba      	ldr	r2, [r7, #8]
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	69db      	ldr	r3, [r3, #28]
 8013dfe:	4619      	mov	r1, r3
 8013e00:	4610      	mov	r0, r2
 8013e02:	f7fd fe8b 	bl	8011b1c <clust2sect>
 8013e06:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013e08:	69bb      	ldr	r3, [r7, #24]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d104      	bne.n	8013e18 <f_lseek+0x154>
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	2202      	movs	r2, #2
 8013e12:	755a      	strb	r2, [r3, #21]
 8013e14:	2302      	movs	r3, #2
 8013e16:	e175      	b.n	8014104 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	3b01      	subs	r3, #1
 8013e1c:	68ba      	ldr	r2, [r7, #8]
 8013e1e:	8992      	ldrh	r2, [r2, #12]
 8013e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e24:	68ba      	ldr	r2, [r7, #8]
 8013e26:	8952      	ldrh	r2, [r2, #10]
 8013e28:	3a01      	subs	r2, #1
 8013e2a:	4013      	ands	r3, r2
 8013e2c:	69ba      	ldr	r2, [r7, #24]
 8013e2e:	4413      	add	r3, r2
 8013e30:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	699b      	ldr	r3, [r3, #24]
 8013e36:	68ba      	ldr	r2, [r7, #8]
 8013e38:	8992      	ldrh	r2, [r2, #12]
 8013e3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e3e:	fb02 f201 	mul.w	r2, r2, r1
 8013e42:	1a9b      	subs	r3, r3, r2
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	f000 815b 	beq.w	8014100 <f_lseek+0x43c>
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	6a1b      	ldr	r3, [r3, #32]
 8013e4e:	69ba      	ldr	r2, [r7, #24]
 8013e50:	429a      	cmp	r2, r3
 8013e52:	f000 8155 	beq.w	8014100 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	7d1b      	ldrb	r3, [r3, #20]
 8013e5a:	b25b      	sxtb	r3, r3
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	da18      	bge.n	8013e92 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	7858      	ldrb	r0, [r3, #1]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	6a1a      	ldr	r2, [r3, #32]
 8013e6e:	2301      	movs	r3, #1
 8013e70:	f7fd fac8 	bl	8011404 <disk_write>
 8013e74:	4603      	mov	r3, r0
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d004      	beq.n	8013e84 <f_lseek+0x1c0>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	755a      	strb	r2, [r3, #21]
 8013e80:	2301      	movs	r3, #1
 8013e82:	e13f      	b.n	8014104 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	7d1b      	ldrb	r3, [r3, #20]
 8013e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e8c:	b2da      	uxtb	r2, r3
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	7858      	ldrb	r0, [r3, #1]
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	69ba      	ldr	r2, [r7, #24]
 8013ea0:	f7fd fa90 	bl	80113c4 <disk_read>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d004      	beq.n	8013eb4 <f_lseek+0x1f0>
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2201      	movs	r2, #1
 8013eae:	755a      	strb	r2, [r3, #21]
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	e127      	b.n	8014104 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	69ba      	ldr	r2, [r7, #24]
 8013eb8:	621a      	str	r2, [r3, #32]
 8013eba:	e121      	b.n	8014100 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	68db      	ldr	r3, [r3, #12]
 8013ec0:	683a      	ldr	r2, [r7, #0]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d908      	bls.n	8013ed8 <f_lseek+0x214>
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	7d1b      	ldrb	r3, [r3, #20]
 8013eca:	f003 0302 	and.w	r3, r3, #2
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d102      	bne.n	8013ed8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	68db      	ldr	r3, [r3, #12]
 8013ed6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	699b      	ldr	r3, [r3, #24]
 8013edc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ee6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013ee8:	683b      	ldr	r3, [r7, #0]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	f000 80b5 	beq.w	801405a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	895b      	ldrh	r3, [r3, #10]
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	899b      	ldrh	r3, [r3, #12]
 8013efa:	fb03 f302 	mul.w	r3, r3, r2
 8013efe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013f00:	6a3b      	ldr	r3, [r7, #32]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d01b      	beq.n	8013f3e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	1e5a      	subs	r2, r3, #1
 8013f0a:	69fb      	ldr	r3, [r7, #28]
 8013f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013f10:	6a3b      	ldr	r3, [r7, #32]
 8013f12:	1e59      	subs	r1, r3, #1
 8013f14:	69fb      	ldr	r3, [r7, #28]
 8013f16:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d30f      	bcc.n	8013f3e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013f1e:	6a3b      	ldr	r3, [r7, #32]
 8013f20:	1e5a      	subs	r2, r3, #1
 8013f22:	69fb      	ldr	r3, [r7, #28]
 8013f24:	425b      	negs	r3, r3
 8013f26:	401a      	ands	r2, r3
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	699b      	ldr	r3, [r3, #24]
 8013f30:	683a      	ldr	r2, [r7, #0]
 8013f32:	1ad3      	subs	r3, r2, r3
 8013f34:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	69db      	ldr	r3, [r3, #28]
 8013f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8013f3c:	e022      	b.n	8013f84 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	689b      	ldr	r3, [r3, #8]
 8013f42:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d119      	bne.n	8013f7e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2100      	movs	r1, #0
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7fe f84f 	bl	8011ff2 <create_chain>
 8013f54:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f58:	2b01      	cmp	r3, #1
 8013f5a:	d104      	bne.n	8013f66 <f_lseek+0x2a2>
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2202      	movs	r2, #2
 8013f60:	755a      	strb	r2, [r3, #21]
 8013f62:	2302      	movs	r3, #2
 8013f64:	e0ce      	b.n	8014104 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f6c:	d104      	bne.n	8013f78 <f_lseek+0x2b4>
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2201      	movs	r2, #1
 8013f72:	755a      	strb	r2, [r3, #21]
 8013f74:	2301      	movs	r3, #1
 8013f76:	e0c5      	b.n	8014104 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f7c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f82:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d067      	beq.n	801405a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013f8a:	e03a      	b.n	8014002 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013f8c:	683a      	ldr	r2, [r7, #0]
 8013f8e:	69fb      	ldr	r3, [r7, #28]
 8013f90:	1ad3      	subs	r3, r2, r3
 8013f92:	603b      	str	r3, [r7, #0]
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	699a      	ldr	r2, [r3, #24]
 8013f98:	69fb      	ldr	r3, [r7, #28]
 8013f9a:	441a      	add	r2, r3
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	7d1b      	ldrb	r3, [r3, #20]
 8013fa4:	f003 0302 	and.w	r3, r3, #2
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d00b      	beq.n	8013fc4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7fe f81e 	bl	8011ff2 <create_chain>
 8013fb6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d108      	bne.n	8013fd0 <f_lseek+0x30c>
							ofs = 0; break;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	603b      	str	r3, [r7, #0]
 8013fc2:	e022      	b.n	801400a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7fd fdc6 	bl	8011b5a <get_fat>
 8013fce:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fd6:	d104      	bne.n	8013fe2 <f_lseek+0x31e>
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2201      	movs	r2, #1
 8013fdc:	755a      	strb	r2, [r3, #21]
 8013fde:	2301      	movs	r3, #1
 8013fe0:	e090      	b.n	8014104 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe4:	2b01      	cmp	r3, #1
 8013fe6:	d904      	bls.n	8013ff2 <f_lseek+0x32e>
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	69db      	ldr	r3, [r3, #28]
 8013fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	d304      	bcc.n	8013ffc <f_lseek+0x338>
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	2202      	movs	r2, #2
 8013ff6:	755a      	strb	r2, [r3, #21]
 8013ff8:	2302      	movs	r3, #2
 8013ffa:	e083      	b.n	8014104 <f_lseek+0x440>
					fp->clust = clst;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014000:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014002:	683a      	ldr	r2, [r7, #0]
 8014004:	69fb      	ldr	r3, [r7, #28]
 8014006:	429a      	cmp	r2, r3
 8014008:	d8c0      	bhi.n	8013f8c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	699a      	ldr	r2, [r3, #24]
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	441a      	add	r2, r3
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	899b      	ldrh	r3, [r3, #12]
 801401a:	461a      	mov	r2, r3
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014022:	fb02 f201 	mul.w	r2, r2, r1
 8014026:	1a9b      	subs	r3, r3, r2
 8014028:	2b00      	cmp	r3, #0
 801402a:	d016      	beq.n	801405a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014030:	4618      	mov	r0, r3
 8014032:	f7fd fd73 	bl	8011b1c <clust2sect>
 8014036:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801403a:	2b00      	cmp	r3, #0
 801403c:	d104      	bne.n	8014048 <f_lseek+0x384>
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	2202      	movs	r2, #2
 8014042:	755a      	strb	r2, [r3, #21]
 8014044:	2302      	movs	r3, #2
 8014046:	e05d      	b.n	8014104 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	899b      	ldrh	r3, [r3, #12]
 801404c:	461a      	mov	r2, r3
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	fbb3 f3f2 	udiv	r3, r3, r2
 8014054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014056:	4413      	add	r3, r2
 8014058:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	699a      	ldr	r2, [r3, #24]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	68db      	ldr	r3, [r3, #12]
 8014062:	429a      	cmp	r2, r3
 8014064:	d90a      	bls.n	801407c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	699a      	ldr	r2, [r3, #24]
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	7d1b      	ldrb	r3, [r3, #20]
 8014072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014076:	b2da      	uxtb	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	699b      	ldr	r3, [r3, #24]
 8014080:	68ba      	ldr	r2, [r7, #8]
 8014082:	8992      	ldrh	r2, [r2, #12]
 8014084:	fbb3 f1f2 	udiv	r1, r3, r2
 8014088:	fb02 f201 	mul.w	r2, r2, r1
 801408c:	1a9b      	subs	r3, r3, r2
 801408e:	2b00      	cmp	r3, #0
 8014090:	d036      	beq.n	8014100 <f_lseek+0x43c>
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	6a1b      	ldr	r3, [r3, #32]
 8014096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014098:	429a      	cmp	r2, r3
 801409a:	d031      	beq.n	8014100 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	7d1b      	ldrb	r3, [r3, #20]
 80140a0:	b25b      	sxtb	r3, r3
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	da18      	bge.n	80140d8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	7858      	ldrb	r0, [r3, #1]
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6a1a      	ldr	r2, [r3, #32]
 80140b4:	2301      	movs	r3, #1
 80140b6:	f7fd f9a5 	bl	8011404 <disk_write>
 80140ba:	4603      	mov	r3, r0
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d004      	beq.n	80140ca <f_lseek+0x406>
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2201      	movs	r2, #1
 80140c4:	755a      	strb	r2, [r3, #21]
 80140c6:	2301      	movs	r3, #1
 80140c8:	e01c      	b.n	8014104 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	7d1b      	ldrb	r3, [r3, #20]
 80140ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140d2:	b2da      	uxtb	r2, r3
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	7858      	ldrb	r0, [r3, #1]
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140e2:	2301      	movs	r3, #1
 80140e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140e6:	f7fd f96d 	bl	80113c4 <disk_read>
 80140ea:	4603      	mov	r3, r0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d004      	beq.n	80140fa <f_lseek+0x436>
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2201      	movs	r2, #1
 80140f4:	755a      	strb	r2, [r3, #21]
 80140f6:	2301      	movs	r3, #1
 80140f8:	e004      	b.n	8014104 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140fe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014100:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014104:	4618      	mov	r0, r3
 8014106:	3740      	adds	r7, #64	; 0x40
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}

0801410c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b09e      	sub	sp, #120	; 0x78
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014114:	2300      	movs	r3, #0
 8014116:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014118:	f107 010c 	add.w	r1, r7, #12
 801411c:	1d3b      	adds	r3, r7, #4
 801411e:	2202      	movs	r2, #2
 8014120:	4618      	mov	r0, r3
 8014122:	f7fe fd17 	bl	8012b54 <find_volume>
 8014126:	4603      	mov	r3, r0
 8014128:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014130:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014134:	2b00      	cmp	r3, #0
 8014136:	f040 80a4 	bne.w	8014282 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014140:	4611      	mov	r1, r2
 8014142:	4618      	mov	r0, r3
 8014144:	f7fe fbd6 	bl	80128f4 <follow_path>
 8014148:	4603      	mov	r3, r0
 801414a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801414e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014152:	2b00      	cmp	r3, #0
 8014154:	d108      	bne.n	8014168 <f_unlink+0x5c>
 8014156:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801415a:	f003 0320 	and.w	r3, r3, #32
 801415e:	2b00      	cmp	r3, #0
 8014160:	d002      	beq.n	8014168 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8014162:	2306      	movs	r3, #6
 8014164:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014168:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801416c:	2b00      	cmp	r3, #0
 801416e:	d108      	bne.n	8014182 <f_unlink+0x76>
 8014170:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014174:	2102      	movs	r1, #2
 8014176:	4618      	mov	r0, r3
 8014178:	f7fd fa82 	bl	8011680 <chk_lock>
 801417c:	4603      	mov	r3, r0
 801417e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014182:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014186:	2b00      	cmp	r3, #0
 8014188:	d17b      	bne.n	8014282 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801418a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801418e:	b25b      	sxtb	r3, r3
 8014190:	2b00      	cmp	r3, #0
 8014192:	da03      	bge.n	801419c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8014194:	2306      	movs	r3, #6
 8014196:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801419a:	e008      	b.n	80141ae <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801419c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80141a0:	f003 0301 	and.w	r3, r3, #1
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d002      	beq.n	80141ae <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80141a8:	2307      	movs	r3, #7
 80141aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80141ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d13d      	bne.n	8014232 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80141ba:	4611      	mov	r1, r2
 80141bc:	4618      	mov	r0, r3
 80141be:	f7fe f98e 	bl	80124de <ld_clust>
 80141c2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80141c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80141c8:	f003 0310 	and.w	r3, r3, #16
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d030      	beq.n	8014232 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	699b      	ldr	r3, [r3, #24]
 80141d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d103      	bne.n	80141e2 <f_unlink+0xd6>
						res = FR_DENIED;
 80141da:	2307      	movs	r3, #7
 80141dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80141e0:	e027      	b.n	8014232 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80141e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80141e8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80141ea:	f107 0310 	add.w	r3, r7, #16
 80141ee:	2100      	movs	r1, #0
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7fd ffce 	bl	8012192 <dir_sdi>
 80141f6:	4603      	mov	r3, r0
 80141f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80141fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014200:	2b00      	cmp	r3, #0
 8014202:	d116      	bne.n	8014232 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014204:	f107 0310 	add.w	r3, r7, #16
 8014208:	2100      	movs	r1, #0
 801420a:	4618      	mov	r0, r3
 801420c:	f7fe f9a6 	bl	801255c <dir_read>
 8014210:	4603      	mov	r3, r0
 8014212:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014216:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801421a:	2b00      	cmp	r3, #0
 801421c:	d102      	bne.n	8014224 <f_unlink+0x118>
 801421e:	2307      	movs	r3, #7
 8014220:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014224:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014228:	2b04      	cmp	r3, #4
 801422a:	d102      	bne.n	8014232 <f_unlink+0x126>
 801422c:	2300      	movs	r3, #0
 801422e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8014232:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014236:	2b00      	cmp	r3, #0
 8014238:	d123      	bne.n	8014282 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801423a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801423e:	4618      	mov	r0, r3
 8014240:	f7fe fa70 	bl	8012724 <dir_remove>
 8014244:	4603      	mov	r3, r0
 8014246:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801424a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801424e:	2b00      	cmp	r3, #0
 8014250:	d10c      	bne.n	801426c <f_unlink+0x160>
 8014252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014254:	2b00      	cmp	r3, #0
 8014256:	d009      	beq.n	801426c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014258:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801425c:	2200      	movs	r2, #0
 801425e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014260:	4618      	mov	r0, r3
 8014262:	f7fd fe61 	bl	8011f28 <remove_chain>
 8014266:	4603      	mov	r3, r0
 8014268:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801426c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014270:	2b00      	cmp	r3, #0
 8014272:	d106      	bne.n	8014282 <f_unlink+0x176>
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	4618      	mov	r0, r3
 8014278:	f7fd fbe0 	bl	8011a3c <sync_fs>
 801427c:	4603      	mov	r3, r0
 801427e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014282:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8014286:	4618      	mov	r0, r3
 8014288:	3778      	adds	r7, #120	; 0x78
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
	...

08014290 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b096      	sub	sp, #88	; 0x58
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014298:	f107 0108 	add.w	r1, r7, #8
 801429c:	1d3b      	adds	r3, r7, #4
 801429e:	2202      	movs	r2, #2
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7fe fc57 	bl	8012b54 <find_volume>
 80142a6:	4603      	mov	r3, r0
 80142a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80142b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	f040 80fe 	bne.w	80144b6 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80142ba:	687a      	ldr	r2, [r7, #4]
 80142bc:	f107 030c 	add.w	r3, r7, #12
 80142c0:	4611      	mov	r1, r2
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7fe fb16 	bl	80128f4 <follow_path>
 80142c8:	4603      	mov	r3, r0
 80142ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80142ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d102      	bne.n	80142dc <f_mkdir+0x4c>
 80142d6:	2308      	movs	r3, #8
 80142d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80142dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142e0:	2b04      	cmp	r3, #4
 80142e2:	d108      	bne.n	80142f6 <f_mkdir+0x66>
 80142e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80142e8:	f003 0320 	and.w	r3, r3, #32
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d002      	beq.n	80142f6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80142f0:	2306      	movs	r3, #6
 80142f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80142f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142fa:	2b04      	cmp	r3, #4
 80142fc:	f040 80db 	bne.w	80144b6 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014300:	f107 030c 	add.w	r3, r7, #12
 8014304:	2100      	movs	r1, #0
 8014306:	4618      	mov	r0, r3
 8014308:	f7fd fe73 	bl	8011ff2 <create_chain>
 801430c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	895b      	ldrh	r3, [r3, #10]
 8014312:	461a      	mov	r2, r3
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	899b      	ldrh	r3, [r3, #12]
 8014318:	fb03 f302 	mul.w	r3, r3, r2
 801431c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801431e:	2300      	movs	r3, #0
 8014320:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014326:	2b00      	cmp	r3, #0
 8014328:	d102      	bne.n	8014330 <f_mkdir+0xa0>
 801432a:	2307      	movs	r3, #7
 801432c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014332:	2b01      	cmp	r3, #1
 8014334:	d102      	bne.n	801433c <f_mkdir+0xac>
 8014336:	2302      	movs	r3, #2
 8014338:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801433c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014342:	d102      	bne.n	801434a <f_mkdir+0xba>
 8014344:	2301      	movs	r3, #1
 8014346:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801434a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801434e:	2b00      	cmp	r3, #0
 8014350:	d106      	bne.n	8014360 <f_mkdir+0xd0>
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	4618      	mov	r0, r3
 8014356:	f7fd faff 	bl	8011958 <sync_window>
 801435a:	4603      	mov	r3, r0
 801435c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014360:	4b58      	ldr	r3, [pc, #352]	; (80144c4 <f_mkdir+0x234>)
 8014362:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014364:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014368:	2b00      	cmp	r3, #0
 801436a:	d16c      	bne.n	8014446 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014370:	4618      	mov	r0, r3
 8014372:	f7fd fbd3 	bl	8011b1c <clust2sect>
 8014376:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	3338      	adds	r3, #56	; 0x38
 801437c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	899b      	ldrh	r3, [r3, #12]
 8014382:	461a      	mov	r2, r3
 8014384:	2100      	movs	r1, #0
 8014386:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014388:	f7fd f91d 	bl	80115c6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801438c:	220b      	movs	r2, #11
 801438e:	2120      	movs	r1, #32
 8014390:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014392:	f7fd f918 	bl	80115c6 <mem_set>
					dir[DIR_Name] = '.';
 8014396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014398:	222e      	movs	r2, #46	; 0x2e
 801439a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801439c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801439e:	330b      	adds	r3, #11
 80143a0:	2210      	movs	r2, #16
 80143a2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80143a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143a6:	3316      	adds	r3, #22
 80143a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7fd f8be 	bl	801152c <st_dword>
					st_clust(fs, dir, dcl);
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80143b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80143b6:	4618      	mov	r0, r3
 80143b8:	f7fe f8b0 	bl	801251c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80143bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143be:	3320      	adds	r3, #32
 80143c0:	2220      	movs	r2, #32
 80143c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7fd f8dd 	bl	8011584 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80143ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143cc:	3321      	adds	r3, #33	; 0x21
 80143ce:	222e      	movs	r2, #46	; 0x2e
 80143d0:	701a      	strb	r2, [r3, #0]
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	781b      	ldrb	r3, [r3, #0]
 80143da:	2b03      	cmp	r3, #3
 80143dc:	d106      	bne.n	80143ec <f_mkdir+0x15c>
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d101      	bne.n	80143ec <f_mkdir+0x15c>
 80143e8:	2300      	movs	r3, #0
 80143ea:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80143ec:	68b8      	ldr	r0, [r7, #8]
 80143ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143f0:	3320      	adds	r3, #32
 80143f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80143f4:	4619      	mov	r1, r3
 80143f6:	f7fe f891 	bl	801251c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	895b      	ldrh	r3, [r3, #10]
 80143fe:	653b      	str	r3, [r7, #80]	; 0x50
 8014400:	e01c      	b.n	801443c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8014402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014404:	1c5a      	adds	r2, r3, #1
 8014406:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014408:	68ba      	ldr	r2, [r7, #8]
 801440a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	2201      	movs	r2, #1
 8014410:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	4618      	mov	r0, r3
 8014416:	f7fd fa9f 	bl	8011958 <sync_window>
 801441a:	4603      	mov	r3, r0
 801441c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014424:	2b00      	cmp	r3, #0
 8014426:	d10d      	bne.n	8014444 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	899b      	ldrh	r3, [r3, #12]
 801442c:	461a      	mov	r2, r3
 801442e:	2100      	movs	r1, #0
 8014430:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014432:	f7fd f8c8 	bl	80115c6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014438:	3b01      	subs	r3, #1
 801443a:	653b      	str	r3, [r7, #80]	; 0x50
 801443c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801443e:	2b00      	cmp	r3, #0
 8014440:	d1df      	bne.n	8014402 <f_mkdir+0x172>
 8014442:	e000      	b.n	8014446 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8014444:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014446:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801444a:	2b00      	cmp	r3, #0
 801444c:	d107      	bne.n	801445e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801444e:	f107 030c 	add.w	r3, r7, #12
 8014452:	4618      	mov	r0, r3
 8014454:	f7fe f934 	bl	80126c0 <dir_register>
 8014458:	4603      	mov	r3, r0
 801445a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801445e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014462:	2b00      	cmp	r3, #0
 8014464:	d120      	bne.n	80144a8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014468:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801446a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801446c:	3316      	adds	r3, #22
 801446e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014470:	4618      	mov	r0, r3
 8014472:	f7fd f85b 	bl	801152c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801447a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801447c:	4618      	mov	r0, r3
 801447e:	f7fe f84d 	bl	801251c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014484:	330b      	adds	r3, #11
 8014486:	2210      	movs	r2, #16
 8014488:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	2201      	movs	r2, #1
 801448e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014494:	2b00      	cmp	r3, #0
 8014496:	d10e      	bne.n	80144b6 <f_mkdir+0x226>
					res = sync_fs(fs);
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	4618      	mov	r0, r3
 801449c:	f7fd face 	bl	8011a3c <sync_fs>
 80144a0:	4603      	mov	r3, r0
 80144a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80144a6:	e006      	b.n	80144b6 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80144a8:	f107 030c 	add.w	r3, r7, #12
 80144ac:	2200      	movs	r2, #0
 80144ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7fd fd39 	bl	8011f28 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80144b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3758      	adds	r7, #88	; 0x58
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	274a0000 	.word	0x274a0000

080144c8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b088      	sub	sp, #32
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	60f8      	str	r0, [r7, #12]
 80144d0:	60b9      	str	r1, [r7, #8]
 80144d2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80144d4:	2300      	movs	r3, #0
 80144d6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80144dc:	e017      	b.n	801450e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80144de:	f107 0310 	add.w	r3, r7, #16
 80144e2:	f107 0114 	add.w	r1, r7, #20
 80144e6:	2201      	movs	r2, #1
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f7ff f803 	bl	80134f4 <f_read>
		if (rc != 1) break;
 80144ee:	693b      	ldr	r3, [r7, #16]
 80144f0:	2b01      	cmp	r3, #1
 80144f2:	d112      	bne.n	801451a <f_gets+0x52>
		c = s[0];
 80144f4:	7d3b      	ldrb	r3, [r7, #20]
 80144f6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80144f8:	69bb      	ldr	r3, [r7, #24]
 80144fa:	1c5a      	adds	r2, r3, #1
 80144fc:	61ba      	str	r2, [r7, #24]
 80144fe:	7dfa      	ldrb	r2, [r7, #23]
 8014500:	701a      	strb	r2, [r3, #0]
		n++;
 8014502:	69fb      	ldr	r3, [r7, #28]
 8014504:	3301      	adds	r3, #1
 8014506:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014508:	7dfb      	ldrb	r3, [r7, #23]
 801450a:	2b0a      	cmp	r3, #10
 801450c:	d007      	beq.n	801451e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	3b01      	subs	r3, #1
 8014512:	69fa      	ldr	r2, [r7, #28]
 8014514:	429a      	cmp	r2, r3
 8014516:	dbe2      	blt.n	80144de <f_gets+0x16>
 8014518:	e002      	b.n	8014520 <f_gets+0x58>
		if (rc != 1) break;
 801451a:	bf00      	nop
 801451c:	e000      	b.n	8014520 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801451e:	bf00      	nop
	}
	*p = 0;
 8014520:	69bb      	ldr	r3, [r7, #24]
 8014522:	2200      	movs	r2, #0
 8014524:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014526:	69fb      	ldr	r3, [r7, #28]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d001      	beq.n	8014530 <f_gets+0x68>
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	e000      	b.n	8014532 <f_gets+0x6a>
 8014530:	2300      	movs	r3, #0
}
 8014532:	4618      	mov	r0, r3
 8014534:	3720      	adds	r7, #32
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}
	...

0801453c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801453c:	b480      	push	{r7}
 801453e:	b087      	sub	sp, #28
 8014540:	af00      	add	r7, sp, #0
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	60b9      	str	r1, [r7, #8]
 8014546:	4613      	mov	r3, r2
 8014548:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801454a:	2301      	movs	r3, #1
 801454c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801454e:	2300      	movs	r3, #0
 8014550:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014552:	4b1f      	ldr	r3, [pc, #124]	; (80145d0 <FATFS_LinkDriverEx+0x94>)
 8014554:	7a5b      	ldrb	r3, [r3, #9]
 8014556:	b2db      	uxtb	r3, r3
 8014558:	2b00      	cmp	r3, #0
 801455a:	d131      	bne.n	80145c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801455c:	4b1c      	ldr	r3, [pc, #112]	; (80145d0 <FATFS_LinkDriverEx+0x94>)
 801455e:	7a5b      	ldrb	r3, [r3, #9]
 8014560:	b2db      	uxtb	r3, r3
 8014562:	461a      	mov	r2, r3
 8014564:	4b1a      	ldr	r3, [pc, #104]	; (80145d0 <FATFS_LinkDriverEx+0x94>)
 8014566:	2100      	movs	r1, #0
 8014568:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801456a:	4b19      	ldr	r3, [pc, #100]	; (80145d0 <FATFS_LinkDriverEx+0x94>)
 801456c:	7a5b      	ldrb	r3, [r3, #9]
 801456e:	b2db      	uxtb	r3, r3
 8014570:	4a17      	ldr	r2, [pc, #92]	; (80145d0 <FATFS_LinkDriverEx+0x94>)
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	4413      	add	r3, r2
 8014576:	68fa      	ldr	r2, [r7, #12]
 8014578:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801457a:	4b15      	ldr	r3, [pc, #84]	; (80145d0 <FATFS_LinkDriverEx+0x94>)
 801457c:	7a5b      	ldrb	r3, [r3, #9]
 801457e:	b2db      	uxtb	r3, r3
 8014580:	461a      	mov	r2, r3
 8014582:	4b13      	ldr	r3, [pc, #76]	; (80145d0 <FATFS_LinkDriverEx+0x94>)
 8014584:	4413      	add	r3, r2
 8014586:	79fa      	ldrb	r2, [r7, #7]
 8014588:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801458a:	4b11      	ldr	r3, [pc, #68]	; (80145d0 <FATFS_LinkDriverEx+0x94>)
 801458c:	7a5b      	ldrb	r3, [r3, #9]
 801458e:	b2db      	uxtb	r3, r3
 8014590:	1c5a      	adds	r2, r3, #1
 8014592:	b2d1      	uxtb	r1, r2
 8014594:	4a0e      	ldr	r2, [pc, #56]	; (80145d0 <FATFS_LinkDriverEx+0x94>)
 8014596:	7251      	strb	r1, [r2, #9]
 8014598:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801459a:	7dbb      	ldrb	r3, [r7, #22]
 801459c:	3330      	adds	r3, #48	; 0x30
 801459e:	b2da      	uxtb	r2, r3
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	3301      	adds	r3, #1
 80145a8:	223a      	movs	r2, #58	; 0x3a
 80145aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	3302      	adds	r3, #2
 80145b0:	222f      	movs	r2, #47	; 0x2f
 80145b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80145b4:	68bb      	ldr	r3, [r7, #8]
 80145b6:	3303      	adds	r3, #3
 80145b8:	2200      	movs	r2, #0
 80145ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80145bc:	2300      	movs	r3, #0
 80145be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80145c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	371c      	adds	r7, #28
 80145c6:	46bd      	mov	sp, r7
 80145c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145cc:	4770      	bx	lr
 80145ce:	bf00      	nop
 80145d0:	200481cc 	.word	0x200481cc

080145d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b082      	sub	sp, #8
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80145de:	2200      	movs	r2, #0
 80145e0:	6839      	ldr	r1, [r7, #0]
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f7ff ffaa 	bl	801453c <FATFS_LinkDriverEx>
 80145e8:	4603      	mov	r3, r0
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3708      	adds	r7, #8
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}

080145f2 <__cxa_guard_acquire>:
 80145f2:	6803      	ldr	r3, [r0, #0]
 80145f4:	07db      	lsls	r3, r3, #31
 80145f6:	d406      	bmi.n	8014606 <__cxa_guard_acquire+0x14>
 80145f8:	7843      	ldrb	r3, [r0, #1]
 80145fa:	b103      	cbz	r3, 80145fe <__cxa_guard_acquire+0xc>
 80145fc:	deff      	udf	#255	; 0xff
 80145fe:	2301      	movs	r3, #1
 8014600:	7043      	strb	r3, [r0, #1]
 8014602:	4618      	mov	r0, r3
 8014604:	4770      	bx	lr
 8014606:	2000      	movs	r0, #0
 8014608:	4770      	bx	lr

0801460a <__cxa_guard_release>:
 801460a:	2301      	movs	r3, #1
 801460c:	6003      	str	r3, [r0, #0]
 801460e:	4770      	bx	lr

08014610 <__errno>:
 8014610:	4b01      	ldr	r3, [pc, #4]	; (8014618 <__errno+0x8>)
 8014612:	6818      	ldr	r0, [r3, #0]
 8014614:	4770      	bx	lr
 8014616:	bf00      	nop
 8014618:	2000000c 	.word	0x2000000c

0801461c <__libc_init_array>:
 801461c:	b570      	push	{r4, r5, r6, lr}
 801461e:	4e0d      	ldr	r6, [pc, #52]	; (8014654 <__libc_init_array+0x38>)
 8014620:	4c0d      	ldr	r4, [pc, #52]	; (8014658 <__libc_init_array+0x3c>)
 8014622:	1ba4      	subs	r4, r4, r6
 8014624:	10a4      	asrs	r4, r4, #2
 8014626:	2500      	movs	r5, #0
 8014628:	42a5      	cmp	r5, r4
 801462a:	d109      	bne.n	8014640 <__libc_init_array+0x24>
 801462c:	4e0b      	ldr	r6, [pc, #44]	; (801465c <__libc_init_array+0x40>)
 801462e:	4c0c      	ldr	r4, [pc, #48]	; (8014660 <__libc_init_array+0x44>)
 8014630:	f004 f9e8 	bl	8018a04 <_init>
 8014634:	1ba4      	subs	r4, r4, r6
 8014636:	10a4      	asrs	r4, r4, #2
 8014638:	2500      	movs	r5, #0
 801463a:	42a5      	cmp	r5, r4
 801463c:	d105      	bne.n	801464a <__libc_init_array+0x2e>
 801463e:	bd70      	pop	{r4, r5, r6, pc}
 8014640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014644:	4798      	blx	r3
 8014646:	3501      	adds	r5, #1
 8014648:	e7ee      	b.n	8014628 <__libc_init_array+0xc>
 801464a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801464e:	4798      	blx	r3
 8014650:	3501      	adds	r5, #1
 8014652:	e7f2      	b.n	801463a <__libc_init_array+0x1e>
 8014654:	0801925c 	.word	0x0801925c
 8014658:	0801925c 	.word	0x0801925c
 801465c:	0801925c 	.word	0x0801925c
 8014660:	08019264 	.word	0x08019264

08014664 <memset>:
 8014664:	4402      	add	r2, r0
 8014666:	4603      	mov	r3, r0
 8014668:	4293      	cmp	r3, r2
 801466a:	d100      	bne.n	801466e <memset+0xa>
 801466c:	4770      	bx	lr
 801466e:	f803 1b01 	strb.w	r1, [r3], #1
 8014672:	e7f9      	b.n	8014668 <memset+0x4>

08014674 <__cvt>:
 8014674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014678:	ec55 4b10 	vmov	r4, r5, d0
 801467c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801467e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014682:	2d00      	cmp	r5, #0
 8014684:	460e      	mov	r6, r1
 8014686:	4691      	mov	r9, r2
 8014688:	4619      	mov	r1, r3
 801468a:	bfb8      	it	lt
 801468c:	4622      	movlt	r2, r4
 801468e:	462b      	mov	r3, r5
 8014690:	f027 0720 	bic.w	r7, r7, #32
 8014694:	bfbb      	ittet	lt
 8014696:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801469a:	461d      	movlt	r5, r3
 801469c:	2300      	movge	r3, #0
 801469e:	232d      	movlt	r3, #45	; 0x2d
 80146a0:	bfb8      	it	lt
 80146a2:	4614      	movlt	r4, r2
 80146a4:	2f46      	cmp	r7, #70	; 0x46
 80146a6:	700b      	strb	r3, [r1, #0]
 80146a8:	d004      	beq.n	80146b4 <__cvt+0x40>
 80146aa:	2f45      	cmp	r7, #69	; 0x45
 80146ac:	d100      	bne.n	80146b0 <__cvt+0x3c>
 80146ae:	3601      	adds	r6, #1
 80146b0:	2102      	movs	r1, #2
 80146b2:	e000      	b.n	80146b6 <__cvt+0x42>
 80146b4:	2103      	movs	r1, #3
 80146b6:	ab03      	add	r3, sp, #12
 80146b8:	9301      	str	r3, [sp, #4]
 80146ba:	ab02      	add	r3, sp, #8
 80146bc:	9300      	str	r3, [sp, #0]
 80146be:	4632      	mov	r2, r6
 80146c0:	4653      	mov	r3, sl
 80146c2:	ec45 4b10 	vmov	d0, r4, r5
 80146c6:	f001 fdff 	bl	80162c8 <_dtoa_r>
 80146ca:	2f47      	cmp	r7, #71	; 0x47
 80146cc:	4680      	mov	r8, r0
 80146ce:	d102      	bne.n	80146d6 <__cvt+0x62>
 80146d0:	f019 0f01 	tst.w	r9, #1
 80146d4:	d026      	beq.n	8014724 <__cvt+0xb0>
 80146d6:	2f46      	cmp	r7, #70	; 0x46
 80146d8:	eb08 0906 	add.w	r9, r8, r6
 80146dc:	d111      	bne.n	8014702 <__cvt+0x8e>
 80146de:	f898 3000 	ldrb.w	r3, [r8]
 80146e2:	2b30      	cmp	r3, #48	; 0x30
 80146e4:	d10a      	bne.n	80146fc <__cvt+0x88>
 80146e6:	2200      	movs	r2, #0
 80146e8:	2300      	movs	r3, #0
 80146ea:	4620      	mov	r0, r4
 80146ec:	4629      	mov	r1, r5
 80146ee:	f7ec fa03 	bl	8000af8 <__aeabi_dcmpeq>
 80146f2:	b918      	cbnz	r0, 80146fc <__cvt+0x88>
 80146f4:	f1c6 0601 	rsb	r6, r6, #1
 80146f8:	f8ca 6000 	str.w	r6, [sl]
 80146fc:	f8da 3000 	ldr.w	r3, [sl]
 8014700:	4499      	add	r9, r3
 8014702:	2200      	movs	r2, #0
 8014704:	2300      	movs	r3, #0
 8014706:	4620      	mov	r0, r4
 8014708:	4629      	mov	r1, r5
 801470a:	f7ec f9f5 	bl	8000af8 <__aeabi_dcmpeq>
 801470e:	b938      	cbnz	r0, 8014720 <__cvt+0xac>
 8014710:	2230      	movs	r2, #48	; 0x30
 8014712:	9b03      	ldr	r3, [sp, #12]
 8014714:	454b      	cmp	r3, r9
 8014716:	d205      	bcs.n	8014724 <__cvt+0xb0>
 8014718:	1c59      	adds	r1, r3, #1
 801471a:	9103      	str	r1, [sp, #12]
 801471c:	701a      	strb	r2, [r3, #0]
 801471e:	e7f8      	b.n	8014712 <__cvt+0x9e>
 8014720:	f8cd 900c 	str.w	r9, [sp, #12]
 8014724:	9b03      	ldr	r3, [sp, #12]
 8014726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014728:	eba3 0308 	sub.w	r3, r3, r8
 801472c:	4640      	mov	r0, r8
 801472e:	6013      	str	r3, [r2, #0]
 8014730:	b004      	add	sp, #16
 8014732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014736 <__exponent>:
 8014736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014738:	2900      	cmp	r1, #0
 801473a:	4604      	mov	r4, r0
 801473c:	bfba      	itte	lt
 801473e:	4249      	neglt	r1, r1
 8014740:	232d      	movlt	r3, #45	; 0x2d
 8014742:	232b      	movge	r3, #43	; 0x2b
 8014744:	2909      	cmp	r1, #9
 8014746:	f804 2b02 	strb.w	r2, [r4], #2
 801474a:	7043      	strb	r3, [r0, #1]
 801474c:	dd20      	ble.n	8014790 <__exponent+0x5a>
 801474e:	f10d 0307 	add.w	r3, sp, #7
 8014752:	461f      	mov	r7, r3
 8014754:	260a      	movs	r6, #10
 8014756:	fb91 f5f6 	sdiv	r5, r1, r6
 801475a:	fb06 1115 	mls	r1, r6, r5, r1
 801475e:	3130      	adds	r1, #48	; 0x30
 8014760:	2d09      	cmp	r5, #9
 8014762:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014766:	f103 32ff 	add.w	r2, r3, #4294967295
 801476a:	4629      	mov	r1, r5
 801476c:	dc09      	bgt.n	8014782 <__exponent+0x4c>
 801476e:	3130      	adds	r1, #48	; 0x30
 8014770:	3b02      	subs	r3, #2
 8014772:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014776:	42bb      	cmp	r3, r7
 8014778:	4622      	mov	r2, r4
 801477a:	d304      	bcc.n	8014786 <__exponent+0x50>
 801477c:	1a10      	subs	r0, r2, r0
 801477e:	b003      	add	sp, #12
 8014780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014782:	4613      	mov	r3, r2
 8014784:	e7e7      	b.n	8014756 <__exponent+0x20>
 8014786:	f813 2b01 	ldrb.w	r2, [r3], #1
 801478a:	f804 2b01 	strb.w	r2, [r4], #1
 801478e:	e7f2      	b.n	8014776 <__exponent+0x40>
 8014790:	2330      	movs	r3, #48	; 0x30
 8014792:	4419      	add	r1, r3
 8014794:	7083      	strb	r3, [r0, #2]
 8014796:	1d02      	adds	r2, r0, #4
 8014798:	70c1      	strb	r1, [r0, #3]
 801479a:	e7ef      	b.n	801477c <__exponent+0x46>

0801479c <_printf_float>:
 801479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a0:	b08d      	sub	sp, #52	; 0x34
 80147a2:	460c      	mov	r4, r1
 80147a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80147a8:	4616      	mov	r6, r2
 80147aa:	461f      	mov	r7, r3
 80147ac:	4605      	mov	r5, r0
 80147ae:	f002 fe7d 	bl	80174ac <_localeconv_r>
 80147b2:	6803      	ldr	r3, [r0, #0]
 80147b4:	9304      	str	r3, [sp, #16]
 80147b6:	4618      	mov	r0, r3
 80147b8:	f7eb fd22 	bl	8000200 <strlen>
 80147bc:	2300      	movs	r3, #0
 80147be:	930a      	str	r3, [sp, #40]	; 0x28
 80147c0:	f8d8 3000 	ldr.w	r3, [r8]
 80147c4:	9005      	str	r0, [sp, #20]
 80147c6:	3307      	adds	r3, #7
 80147c8:	f023 0307 	bic.w	r3, r3, #7
 80147cc:	f103 0208 	add.w	r2, r3, #8
 80147d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80147d4:	f8d4 b000 	ldr.w	fp, [r4]
 80147d8:	f8c8 2000 	str.w	r2, [r8]
 80147dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80147e4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80147e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80147ec:	9307      	str	r3, [sp, #28]
 80147ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80147f2:	f04f 32ff 	mov.w	r2, #4294967295
 80147f6:	4ba7      	ldr	r3, [pc, #668]	; (8014a94 <_printf_float+0x2f8>)
 80147f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80147fc:	f7ec f9ae 	bl	8000b5c <__aeabi_dcmpun>
 8014800:	bb70      	cbnz	r0, 8014860 <_printf_float+0xc4>
 8014802:	f04f 32ff 	mov.w	r2, #4294967295
 8014806:	4ba3      	ldr	r3, [pc, #652]	; (8014a94 <_printf_float+0x2f8>)
 8014808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801480c:	f7ec f988 	bl	8000b20 <__aeabi_dcmple>
 8014810:	bb30      	cbnz	r0, 8014860 <_printf_float+0xc4>
 8014812:	2200      	movs	r2, #0
 8014814:	2300      	movs	r3, #0
 8014816:	4640      	mov	r0, r8
 8014818:	4649      	mov	r1, r9
 801481a:	f7ec f977 	bl	8000b0c <__aeabi_dcmplt>
 801481e:	b110      	cbz	r0, 8014826 <_printf_float+0x8a>
 8014820:	232d      	movs	r3, #45	; 0x2d
 8014822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014826:	4a9c      	ldr	r2, [pc, #624]	; (8014a98 <_printf_float+0x2fc>)
 8014828:	4b9c      	ldr	r3, [pc, #624]	; (8014a9c <_printf_float+0x300>)
 801482a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801482e:	bf8c      	ite	hi
 8014830:	4690      	movhi	r8, r2
 8014832:	4698      	movls	r8, r3
 8014834:	2303      	movs	r3, #3
 8014836:	f02b 0204 	bic.w	r2, fp, #4
 801483a:	6123      	str	r3, [r4, #16]
 801483c:	6022      	str	r2, [r4, #0]
 801483e:	f04f 0900 	mov.w	r9, #0
 8014842:	9700      	str	r7, [sp, #0]
 8014844:	4633      	mov	r3, r6
 8014846:	aa0b      	add	r2, sp, #44	; 0x2c
 8014848:	4621      	mov	r1, r4
 801484a:	4628      	mov	r0, r5
 801484c:	f000 f9e6 	bl	8014c1c <_printf_common>
 8014850:	3001      	adds	r0, #1
 8014852:	f040 808d 	bne.w	8014970 <_printf_float+0x1d4>
 8014856:	f04f 30ff 	mov.w	r0, #4294967295
 801485a:	b00d      	add	sp, #52	; 0x34
 801485c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014860:	4642      	mov	r2, r8
 8014862:	464b      	mov	r3, r9
 8014864:	4640      	mov	r0, r8
 8014866:	4649      	mov	r1, r9
 8014868:	f7ec f978 	bl	8000b5c <__aeabi_dcmpun>
 801486c:	b110      	cbz	r0, 8014874 <_printf_float+0xd8>
 801486e:	4a8c      	ldr	r2, [pc, #560]	; (8014aa0 <_printf_float+0x304>)
 8014870:	4b8c      	ldr	r3, [pc, #560]	; (8014aa4 <_printf_float+0x308>)
 8014872:	e7da      	b.n	801482a <_printf_float+0x8e>
 8014874:	6861      	ldr	r1, [r4, #4]
 8014876:	1c4b      	adds	r3, r1, #1
 8014878:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801487c:	a80a      	add	r0, sp, #40	; 0x28
 801487e:	d13e      	bne.n	80148fe <_printf_float+0x162>
 8014880:	2306      	movs	r3, #6
 8014882:	6063      	str	r3, [r4, #4]
 8014884:	2300      	movs	r3, #0
 8014886:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801488a:	ab09      	add	r3, sp, #36	; 0x24
 801488c:	9300      	str	r3, [sp, #0]
 801488e:	ec49 8b10 	vmov	d0, r8, r9
 8014892:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014896:	6022      	str	r2, [r4, #0]
 8014898:	f8cd a004 	str.w	sl, [sp, #4]
 801489c:	6861      	ldr	r1, [r4, #4]
 801489e:	4628      	mov	r0, r5
 80148a0:	f7ff fee8 	bl	8014674 <__cvt>
 80148a4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80148a8:	2b47      	cmp	r3, #71	; 0x47
 80148aa:	4680      	mov	r8, r0
 80148ac:	d109      	bne.n	80148c2 <_printf_float+0x126>
 80148ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148b0:	1cd8      	adds	r0, r3, #3
 80148b2:	db02      	blt.n	80148ba <_printf_float+0x11e>
 80148b4:	6862      	ldr	r2, [r4, #4]
 80148b6:	4293      	cmp	r3, r2
 80148b8:	dd47      	ble.n	801494a <_printf_float+0x1ae>
 80148ba:	f1aa 0a02 	sub.w	sl, sl, #2
 80148be:	fa5f fa8a 	uxtb.w	sl, sl
 80148c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80148c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80148c8:	d824      	bhi.n	8014914 <_printf_float+0x178>
 80148ca:	3901      	subs	r1, #1
 80148cc:	4652      	mov	r2, sl
 80148ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80148d2:	9109      	str	r1, [sp, #36]	; 0x24
 80148d4:	f7ff ff2f 	bl	8014736 <__exponent>
 80148d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80148da:	1813      	adds	r3, r2, r0
 80148dc:	2a01      	cmp	r2, #1
 80148de:	4681      	mov	r9, r0
 80148e0:	6123      	str	r3, [r4, #16]
 80148e2:	dc02      	bgt.n	80148ea <_printf_float+0x14e>
 80148e4:	6822      	ldr	r2, [r4, #0]
 80148e6:	07d1      	lsls	r1, r2, #31
 80148e8:	d501      	bpl.n	80148ee <_printf_float+0x152>
 80148ea:	3301      	adds	r3, #1
 80148ec:	6123      	str	r3, [r4, #16]
 80148ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d0a5      	beq.n	8014842 <_printf_float+0xa6>
 80148f6:	232d      	movs	r3, #45	; 0x2d
 80148f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148fc:	e7a1      	b.n	8014842 <_printf_float+0xa6>
 80148fe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014902:	f000 8177 	beq.w	8014bf4 <_printf_float+0x458>
 8014906:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801490a:	d1bb      	bne.n	8014884 <_printf_float+0xe8>
 801490c:	2900      	cmp	r1, #0
 801490e:	d1b9      	bne.n	8014884 <_printf_float+0xe8>
 8014910:	2301      	movs	r3, #1
 8014912:	e7b6      	b.n	8014882 <_printf_float+0xe6>
 8014914:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014918:	d119      	bne.n	801494e <_printf_float+0x1b2>
 801491a:	2900      	cmp	r1, #0
 801491c:	6863      	ldr	r3, [r4, #4]
 801491e:	dd0c      	ble.n	801493a <_printf_float+0x19e>
 8014920:	6121      	str	r1, [r4, #16]
 8014922:	b913      	cbnz	r3, 801492a <_printf_float+0x18e>
 8014924:	6822      	ldr	r2, [r4, #0]
 8014926:	07d2      	lsls	r2, r2, #31
 8014928:	d502      	bpl.n	8014930 <_printf_float+0x194>
 801492a:	3301      	adds	r3, #1
 801492c:	440b      	add	r3, r1
 801492e:	6123      	str	r3, [r4, #16]
 8014930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014932:	65a3      	str	r3, [r4, #88]	; 0x58
 8014934:	f04f 0900 	mov.w	r9, #0
 8014938:	e7d9      	b.n	80148ee <_printf_float+0x152>
 801493a:	b913      	cbnz	r3, 8014942 <_printf_float+0x1a6>
 801493c:	6822      	ldr	r2, [r4, #0]
 801493e:	07d0      	lsls	r0, r2, #31
 8014940:	d501      	bpl.n	8014946 <_printf_float+0x1aa>
 8014942:	3302      	adds	r3, #2
 8014944:	e7f3      	b.n	801492e <_printf_float+0x192>
 8014946:	2301      	movs	r3, #1
 8014948:	e7f1      	b.n	801492e <_printf_float+0x192>
 801494a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801494e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014952:	4293      	cmp	r3, r2
 8014954:	db05      	blt.n	8014962 <_printf_float+0x1c6>
 8014956:	6822      	ldr	r2, [r4, #0]
 8014958:	6123      	str	r3, [r4, #16]
 801495a:	07d1      	lsls	r1, r2, #31
 801495c:	d5e8      	bpl.n	8014930 <_printf_float+0x194>
 801495e:	3301      	adds	r3, #1
 8014960:	e7e5      	b.n	801492e <_printf_float+0x192>
 8014962:	2b00      	cmp	r3, #0
 8014964:	bfd4      	ite	le
 8014966:	f1c3 0302 	rsble	r3, r3, #2
 801496a:	2301      	movgt	r3, #1
 801496c:	4413      	add	r3, r2
 801496e:	e7de      	b.n	801492e <_printf_float+0x192>
 8014970:	6823      	ldr	r3, [r4, #0]
 8014972:	055a      	lsls	r2, r3, #21
 8014974:	d407      	bmi.n	8014986 <_printf_float+0x1ea>
 8014976:	6923      	ldr	r3, [r4, #16]
 8014978:	4642      	mov	r2, r8
 801497a:	4631      	mov	r1, r6
 801497c:	4628      	mov	r0, r5
 801497e:	47b8      	blx	r7
 8014980:	3001      	adds	r0, #1
 8014982:	d12b      	bne.n	80149dc <_printf_float+0x240>
 8014984:	e767      	b.n	8014856 <_printf_float+0xba>
 8014986:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801498a:	f240 80dc 	bls.w	8014b46 <_printf_float+0x3aa>
 801498e:	2200      	movs	r2, #0
 8014990:	2300      	movs	r3, #0
 8014992:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014996:	f7ec f8af 	bl	8000af8 <__aeabi_dcmpeq>
 801499a:	2800      	cmp	r0, #0
 801499c:	d033      	beq.n	8014a06 <_printf_float+0x26a>
 801499e:	2301      	movs	r3, #1
 80149a0:	4a41      	ldr	r2, [pc, #260]	; (8014aa8 <_printf_float+0x30c>)
 80149a2:	4631      	mov	r1, r6
 80149a4:	4628      	mov	r0, r5
 80149a6:	47b8      	blx	r7
 80149a8:	3001      	adds	r0, #1
 80149aa:	f43f af54 	beq.w	8014856 <_printf_float+0xba>
 80149ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80149b2:	429a      	cmp	r2, r3
 80149b4:	db02      	blt.n	80149bc <_printf_float+0x220>
 80149b6:	6823      	ldr	r3, [r4, #0]
 80149b8:	07d8      	lsls	r0, r3, #31
 80149ba:	d50f      	bpl.n	80149dc <_printf_float+0x240>
 80149bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149c0:	4631      	mov	r1, r6
 80149c2:	4628      	mov	r0, r5
 80149c4:	47b8      	blx	r7
 80149c6:	3001      	adds	r0, #1
 80149c8:	f43f af45 	beq.w	8014856 <_printf_float+0xba>
 80149cc:	f04f 0800 	mov.w	r8, #0
 80149d0:	f104 091a 	add.w	r9, r4, #26
 80149d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149d6:	3b01      	subs	r3, #1
 80149d8:	4543      	cmp	r3, r8
 80149da:	dc09      	bgt.n	80149f0 <_printf_float+0x254>
 80149dc:	6823      	ldr	r3, [r4, #0]
 80149de:	079b      	lsls	r3, r3, #30
 80149e0:	f100 8103 	bmi.w	8014bea <_printf_float+0x44e>
 80149e4:	68e0      	ldr	r0, [r4, #12]
 80149e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149e8:	4298      	cmp	r0, r3
 80149ea:	bfb8      	it	lt
 80149ec:	4618      	movlt	r0, r3
 80149ee:	e734      	b.n	801485a <_printf_float+0xbe>
 80149f0:	2301      	movs	r3, #1
 80149f2:	464a      	mov	r2, r9
 80149f4:	4631      	mov	r1, r6
 80149f6:	4628      	mov	r0, r5
 80149f8:	47b8      	blx	r7
 80149fa:	3001      	adds	r0, #1
 80149fc:	f43f af2b 	beq.w	8014856 <_printf_float+0xba>
 8014a00:	f108 0801 	add.w	r8, r8, #1
 8014a04:	e7e6      	b.n	80149d4 <_printf_float+0x238>
 8014a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	dc2b      	bgt.n	8014a64 <_printf_float+0x2c8>
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	4a26      	ldr	r2, [pc, #152]	; (8014aa8 <_printf_float+0x30c>)
 8014a10:	4631      	mov	r1, r6
 8014a12:	4628      	mov	r0, r5
 8014a14:	47b8      	blx	r7
 8014a16:	3001      	adds	r0, #1
 8014a18:	f43f af1d 	beq.w	8014856 <_printf_float+0xba>
 8014a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a1e:	b923      	cbnz	r3, 8014a2a <_printf_float+0x28e>
 8014a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a22:	b913      	cbnz	r3, 8014a2a <_printf_float+0x28e>
 8014a24:	6823      	ldr	r3, [r4, #0]
 8014a26:	07d9      	lsls	r1, r3, #31
 8014a28:	d5d8      	bpl.n	80149dc <_printf_float+0x240>
 8014a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a2e:	4631      	mov	r1, r6
 8014a30:	4628      	mov	r0, r5
 8014a32:	47b8      	blx	r7
 8014a34:	3001      	adds	r0, #1
 8014a36:	f43f af0e 	beq.w	8014856 <_printf_float+0xba>
 8014a3a:	f04f 0900 	mov.w	r9, #0
 8014a3e:	f104 0a1a 	add.w	sl, r4, #26
 8014a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a44:	425b      	negs	r3, r3
 8014a46:	454b      	cmp	r3, r9
 8014a48:	dc01      	bgt.n	8014a4e <_printf_float+0x2b2>
 8014a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a4c:	e794      	b.n	8014978 <_printf_float+0x1dc>
 8014a4e:	2301      	movs	r3, #1
 8014a50:	4652      	mov	r2, sl
 8014a52:	4631      	mov	r1, r6
 8014a54:	4628      	mov	r0, r5
 8014a56:	47b8      	blx	r7
 8014a58:	3001      	adds	r0, #1
 8014a5a:	f43f aefc 	beq.w	8014856 <_printf_float+0xba>
 8014a5e:	f109 0901 	add.w	r9, r9, #1
 8014a62:	e7ee      	b.n	8014a42 <_printf_float+0x2a6>
 8014a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	bfa8      	it	ge
 8014a6c:	461a      	movge	r2, r3
 8014a6e:	2a00      	cmp	r2, #0
 8014a70:	4691      	mov	r9, r2
 8014a72:	dd07      	ble.n	8014a84 <_printf_float+0x2e8>
 8014a74:	4613      	mov	r3, r2
 8014a76:	4631      	mov	r1, r6
 8014a78:	4642      	mov	r2, r8
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	47b8      	blx	r7
 8014a7e:	3001      	adds	r0, #1
 8014a80:	f43f aee9 	beq.w	8014856 <_printf_float+0xba>
 8014a84:	f104 031a 	add.w	r3, r4, #26
 8014a88:	f04f 0b00 	mov.w	fp, #0
 8014a8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014a90:	9306      	str	r3, [sp, #24]
 8014a92:	e015      	b.n	8014ac0 <_printf_float+0x324>
 8014a94:	7fefffff 	.word	0x7fefffff
 8014a98:	08018f28 	.word	0x08018f28
 8014a9c:	08018f24 	.word	0x08018f24
 8014aa0:	08018f30 	.word	0x08018f30
 8014aa4:	08018f2c 	.word	0x08018f2c
 8014aa8:	080190eb 	.word	0x080190eb
 8014aac:	2301      	movs	r3, #1
 8014aae:	9a06      	ldr	r2, [sp, #24]
 8014ab0:	4631      	mov	r1, r6
 8014ab2:	4628      	mov	r0, r5
 8014ab4:	47b8      	blx	r7
 8014ab6:	3001      	adds	r0, #1
 8014ab8:	f43f aecd 	beq.w	8014856 <_printf_float+0xba>
 8014abc:	f10b 0b01 	add.w	fp, fp, #1
 8014ac0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014ac4:	ebaa 0309 	sub.w	r3, sl, r9
 8014ac8:	455b      	cmp	r3, fp
 8014aca:	dcef      	bgt.n	8014aac <_printf_float+0x310>
 8014acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	44d0      	add	r8, sl
 8014ad4:	db15      	blt.n	8014b02 <_printf_float+0x366>
 8014ad6:	6823      	ldr	r3, [r4, #0]
 8014ad8:	07da      	lsls	r2, r3, #31
 8014ada:	d412      	bmi.n	8014b02 <_printf_float+0x366>
 8014adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ade:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ae0:	eba3 020a 	sub.w	r2, r3, sl
 8014ae4:	eba3 0a01 	sub.w	sl, r3, r1
 8014ae8:	4592      	cmp	sl, r2
 8014aea:	bfa8      	it	ge
 8014aec:	4692      	movge	sl, r2
 8014aee:	f1ba 0f00 	cmp.w	sl, #0
 8014af2:	dc0e      	bgt.n	8014b12 <_printf_float+0x376>
 8014af4:	f04f 0800 	mov.w	r8, #0
 8014af8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014afc:	f104 091a 	add.w	r9, r4, #26
 8014b00:	e019      	b.n	8014b36 <_printf_float+0x39a>
 8014b02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b06:	4631      	mov	r1, r6
 8014b08:	4628      	mov	r0, r5
 8014b0a:	47b8      	blx	r7
 8014b0c:	3001      	adds	r0, #1
 8014b0e:	d1e5      	bne.n	8014adc <_printf_float+0x340>
 8014b10:	e6a1      	b.n	8014856 <_printf_float+0xba>
 8014b12:	4653      	mov	r3, sl
 8014b14:	4642      	mov	r2, r8
 8014b16:	4631      	mov	r1, r6
 8014b18:	4628      	mov	r0, r5
 8014b1a:	47b8      	blx	r7
 8014b1c:	3001      	adds	r0, #1
 8014b1e:	d1e9      	bne.n	8014af4 <_printf_float+0x358>
 8014b20:	e699      	b.n	8014856 <_printf_float+0xba>
 8014b22:	2301      	movs	r3, #1
 8014b24:	464a      	mov	r2, r9
 8014b26:	4631      	mov	r1, r6
 8014b28:	4628      	mov	r0, r5
 8014b2a:	47b8      	blx	r7
 8014b2c:	3001      	adds	r0, #1
 8014b2e:	f43f ae92 	beq.w	8014856 <_printf_float+0xba>
 8014b32:	f108 0801 	add.w	r8, r8, #1
 8014b36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014b3a:	1a9b      	subs	r3, r3, r2
 8014b3c:	eba3 030a 	sub.w	r3, r3, sl
 8014b40:	4543      	cmp	r3, r8
 8014b42:	dcee      	bgt.n	8014b22 <_printf_float+0x386>
 8014b44:	e74a      	b.n	80149dc <_printf_float+0x240>
 8014b46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b48:	2a01      	cmp	r2, #1
 8014b4a:	dc01      	bgt.n	8014b50 <_printf_float+0x3b4>
 8014b4c:	07db      	lsls	r3, r3, #31
 8014b4e:	d53a      	bpl.n	8014bc6 <_printf_float+0x42a>
 8014b50:	2301      	movs	r3, #1
 8014b52:	4642      	mov	r2, r8
 8014b54:	4631      	mov	r1, r6
 8014b56:	4628      	mov	r0, r5
 8014b58:	47b8      	blx	r7
 8014b5a:	3001      	adds	r0, #1
 8014b5c:	f43f ae7b 	beq.w	8014856 <_printf_float+0xba>
 8014b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b64:	4631      	mov	r1, r6
 8014b66:	4628      	mov	r0, r5
 8014b68:	47b8      	blx	r7
 8014b6a:	3001      	adds	r0, #1
 8014b6c:	f108 0801 	add.w	r8, r8, #1
 8014b70:	f43f ae71 	beq.w	8014856 <_printf_float+0xba>
 8014b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b76:	2200      	movs	r2, #0
 8014b78:	f103 3aff 	add.w	sl, r3, #4294967295
 8014b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014b80:	2300      	movs	r3, #0
 8014b82:	f7eb ffb9 	bl	8000af8 <__aeabi_dcmpeq>
 8014b86:	b9c8      	cbnz	r0, 8014bbc <_printf_float+0x420>
 8014b88:	4653      	mov	r3, sl
 8014b8a:	4642      	mov	r2, r8
 8014b8c:	4631      	mov	r1, r6
 8014b8e:	4628      	mov	r0, r5
 8014b90:	47b8      	blx	r7
 8014b92:	3001      	adds	r0, #1
 8014b94:	d10e      	bne.n	8014bb4 <_printf_float+0x418>
 8014b96:	e65e      	b.n	8014856 <_printf_float+0xba>
 8014b98:	2301      	movs	r3, #1
 8014b9a:	4652      	mov	r2, sl
 8014b9c:	4631      	mov	r1, r6
 8014b9e:	4628      	mov	r0, r5
 8014ba0:	47b8      	blx	r7
 8014ba2:	3001      	adds	r0, #1
 8014ba4:	f43f ae57 	beq.w	8014856 <_printf_float+0xba>
 8014ba8:	f108 0801 	add.w	r8, r8, #1
 8014bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bae:	3b01      	subs	r3, #1
 8014bb0:	4543      	cmp	r3, r8
 8014bb2:	dcf1      	bgt.n	8014b98 <_printf_float+0x3fc>
 8014bb4:	464b      	mov	r3, r9
 8014bb6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014bba:	e6de      	b.n	801497a <_printf_float+0x1de>
 8014bbc:	f04f 0800 	mov.w	r8, #0
 8014bc0:	f104 0a1a 	add.w	sl, r4, #26
 8014bc4:	e7f2      	b.n	8014bac <_printf_float+0x410>
 8014bc6:	2301      	movs	r3, #1
 8014bc8:	e7df      	b.n	8014b8a <_printf_float+0x3ee>
 8014bca:	2301      	movs	r3, #1
 8014bcc:	464a      	mov	r2, r9
 8014bce:	4631      	mov	r1, r6
 8014bd0:	4628      	mov	r0, r5
 8014bd2:	47b8      	blx	r7
 8014bd4:	3001      	adds	r0, #1
 8014bd6:	f43f ae3e 	beq.w	8014856 <_printf_float+0xba>
 8014bda:	f108 0801 	add.w	r8, r8, #1
 8014bde:	68e3      	ldr	r3, [r4, #12]
 8014be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014be2:	1a9b      	subs	r3, r3, r2
 8014be4:	4543      	cmp	r3, r8
 8014be6:	dcf0      	bgt.n	8014bca <_printf_float+0x42e>
 8014be8:	e6fc      	b.n	80149e4 <_printf_float+0x248>
 8014bea:	f04f 0800 	mov.w	r8, #0
 8014bee:	f104 0919 	add.w	r9, r4, #25
 8014bf2:	e7f4      	b.n	8014bde <_printf_float+0x442>
 8014bf4:	2900      	cmp	r1, #0
 8014bf6:	f43f ae8b 	beq.w	8014910 <_printf_float+0x174>
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014c00:	ab09      	add	r3, sp, #36	; 0x24
 8014c02:	9300      	str	r3, [sp, #0]
 8014c04:	ec49 8b10 	vmov	d0, r8, r9
 8014c08:	6022      	str	r2, [r4, #0]
 8014c0a:	f8cd a004 	str.w	sl, [sp, #4]
 8014c0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014c12:	4628      	mov	r0, r5
 8014c14:	f7ff fd2e 	bl	8014674 <__cvt>
 8014c18:	4680      	mov	r8, r0
 8014c1a:	e648      	b.n	80148ae <_printf_float+0x112>

08014c1c <_printf_common>:
 8014c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c20:	4691      	mov	r9, r2
 8014c22:	461f      	mov	r7, r3
 8014c24:	688a      	ldr	r2, [r1, #8]
 8014c26:	690b      	ldr	r3, [r1, #16]
 8014c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014c2c:	4293      	cmp	r3, r2
 8014c2e:	bfb8      	it	lt
 8014c30:	4613      	movlt	r3, r2
 8014c32:	f8c9 3000 	str.w	r3, [r9]
 8014c36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014c3a:	4606      	mov	r6, r0
 8014c3c:	460c      	mov	r4, r1
 8014c3e:	b112      	cbz	r2, 8014c46 <_printf_common+0x2a>
 8014c40:	3301      	adds	r3, #1
 8014c42:	f8c9 3000 	str.w	r3, [r9]
 8014c46:	6823      	ldr	r3, [r4, #0]
 8014c48:	0699      	lsls	r1, r3, #26
 8014c4a:	bf42      	ittt	mi
 8014c4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014c50:	3302      	addmi	r3, #2
 8014c52:	f8c9 3000 	strmi.w	r3, [r9]
 8014c56:	6825      	ldr	r5, [r4, #0]
 8014c58:	f015 0506 	ands.w	r5, r5, #6
 8014c5c:	d107      	bne.n	8014c6e <_printf_common+0x52>
 8014c5e:	f104 0a19 	add.w	sl, r4, #25
 8014c62:	68e3      	ldr	r3, [r4, #12]
 8014c64:	f8d9 2000 	ldr.w	r2, [r9]
 8014c68:	1a9b      	subs	r3, r3, r2
 8014c6a:	42ab      	cmp	r3, r5
 8014c6c:	dc28      	bgt.n	8014cc0 <_printf_common+0xa4>
 8014c6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014c72:	6822      	ldr	r2, [r4, #0]
 8014c74:	3300      	adds	r3, #0
 8014c76:	bf18      	it	ne
 8014c78:	2301      	movne	r3, #1
 8014c7a:	0692      	lsls	r2, r2, #26
 8014c7c:	d42d      	bmi.n	8014cda <_printf_common+0xbe>
 8014c7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c82:	4639      	mov	r1, r7
 8014c84:	4630      	mov	r0, r6
 8014c86:	47c0      	blx	r8
 8014c88:	3001      	adds	r0, #1
 8014c8a:	d020      	beq.n	8014cce <_printf_common+0xb2>
 8014c8c:	6823      	ldr	r3, [r4, #0]
 8014c8e:	68e5      	ldr	r5, [r4, #12]
 8014c90:	f8d9 2000 	ldr.w	r2, [r9]
 8014c94:	f003 0306 	and.w	r3, r3, #6
 8014c98:	2b04      	cmp	r3, #4
 8014c9a:	bf08      	it	eq
 8014c9c:	1aad      	subeq	r5, r5, r2
 8014c9e:	68a3      	ldr	r3, [r4, #8]
 8014ca0:	6922      	ldr	r2, [r4, #16]
 8014ca2:	bf0c      	ite	eq
 8014ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ca8:	2500      	movne	r5, #0
 8014caa:	4293      	cmp	r3, r2
 8014cac:	bfc4      	itt	gt
 8014cae:	1a9b      	subgt	r3, r3, r2
 8014cb0:	18ed      	addgt	r5, r5, r3
 8014cb2:	f04f 0900 	mov.w	r9, #0
 8014cb6:	341a      	adds	r4, #26
 8014cb8:	454d      	cmp	r5, r9
 8014cba:	d11a      	bne.n	8014cf2 <_printf_common+0xd6>
 8014cbc:	2000      	movs	r0, #0
 8014cbe:	e008      	b.n	8014cd2 <_printf_common+0xb6>
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	4652      	mov	r2, sl
 8014cc4:	4639      	mov	r1, r7
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	47c0      	blx	r8
 8014cca:	3001      	adds	r0, #1
 8014ccc:	d103      	bne.n	8014cd6 <_printf_common+0xba>
 8014cce:	f04f 30ff 	mov.w	r0, #4294967295
 8014cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cd6:	3501      	adds	r5, #1
 8014cd8:	e7c3      	b.n	8014c62 <_printf_common+0x46>
 8014cda:	18e1      	adds	r1, r4, r3
 8014cdc:	1c5a      	adds	r2, r3, #1
 8014cde:	2030      	movs	r0, #48	; 0x30
 8014ce0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014ce4:	4422      	add	r2, r4
 8014ce6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014cea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014cee:	3302      	adds	r3, #2
 8014cf0:	e7c5      	b.n	8014c7e <_printf_common+0x62>
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	4622      	mov	r2, r4
 8014cf6:	4639      	mov	r1, r7
 8014cf8:	4630      	mov	r0, r6
 8014cfa:	47c0      	blx	r8
 8014cfc:	3001      	adds	r0, #1
 8014cfe:	d0e6      	beq.n	8014cce <_printf_common+0xb2>
 8014d00:	f109 0901 	add.w	r9, r9, #1
 8014d04:	e7d8      	b.n	8014cb8 <_printf_common+0x9c>
	...

08014d08 <_printf_i>:
 8014d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014d10:	460c      	mov	r4, r1
 8014d12:	7e09      	ldrb	r1, [r1, #24]
 8014d14:	b085      	sub	sp, #20
 8014d16:	296e      	cmp	r1, #110	; 0x6e
 8014d18:	4617      	mov	r7, r2
 8014d1a:	4606      	mov	r6, r0
 8014d1c:	4698      	mov	r8, r3
 8014d1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d20:	f000 80b3 	beq.w	8014e8a <_printf_i+0x182>
 8014d24:	d822      	bhi.n	8014d6c <_printf_i+0x64>
 8014d26:	2963      	cmp	r1, #99	; 0x63
 8014d28:	d036      	beq.n	8014d98 <_printf_i+0x90>
 8014d2a:	d80a      	bhi.n	8014d42 <_printf_i+0x3a>
 8014d2c:	2900      	cmp	r1, #0
 8014d2e:	f000 80b9 	beq.w	8014ea4 <_printf_i+0x19c>
 8014d32:	2958      	cmp	r1, #88	; 0x58
 8014d34:	f000 8083 	beq.w	8014e3e <_printf_i+0x136>
 8014d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014d40:	e032      	b.n	8014da8 <_printf_i+0xa0>
 8014d42:	2964      	cmp	r1, #100	; 0x64
 8014d44:	d001      	beq.n	8014d4a <_printf_i+0x42>
 8014d46:	2969      	cmp	r1, #105	; 0x69
 8014d48:	d1f6      	bne.n	8014d38 <_printf_i+0x30>
 8014d4a:	6820      	ldr	r0, [r4, #0]
 8014d4c:	6813      	ldr	r3, [r2, #0]
 8014d4e:	0605      	lsls	r5, r0, #24
 8014d50:	f103 0104 	add.w	r1, r3, #4
 8014d54:	d52a      	bpl.n	8014dac <_printf_i+0xa4>
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	6011      	str	r1, [r2, #0]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	da03      	bge.n	8014d66 <_printf_i+0x5e>
 8014d5e:	222d      	movs	r2, #45	; 0x2d
 8014d60:	425b      	negs	r3, r3
 8014d62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014d66:	486f      	ldr	r0, [pc, #444]	; (8014f24 <_printf_i+0x21c>)
 8014d68:	220a      	movs	r2, #10
 8014d6a:	e039      	b.n	8014de0 <_printf_i+0xd8>
 8014d6c:	2973      	cmp	r1, #115	; 0x73
 8014d6e:	f000 809d 	beq.w	8014eac <_printf_i+0x1a4>
 8014d72:	d808      	bhi.n	8014d86 <_printf_i+0x7e>
 8014d74:	296f      	cmp	r1, #111	; 0x6f
 8014d76:	d020      	beq.n	8014dba <_printf_i+0xb2>
 8014d78:	2970      	cmp	r1, #112	; 0x70
 8014d7a:	d1dd      	bne.n	8014d38 <_printf_i+0x30>
 8014d7c:	6823      	ldr	r3, [r4, #0]
 8014d7e:	f043 0320 	orr.w	r3, r3, #32
 8014d82:	6023      	str	r3, [r4, #0]
 8014d84:	e003      	b.n	8014d8e <_printf_i+0x86>
 8014d86:	2975      	cmp	r1, #117	; 0x75
 8014d88:	d017      	beq.n	8014dba <_printf_i+0xb2>
 8014d8a:	2978      	cmp	r1, #120	; 0x78
 8014d8c:	d1d4      	bne.n	8014d38 <_printf_i+0x30>
 8014d8e:	2378      	movs	r3, #120	; 0x78
 8014d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014d94:	4864      	ldr	r0, [pc, #400]	; (8014f28 <_printf_i+0x220>)
 8014d96:	e055      	b.n	8014e44 <_printf_i+0x13c>
 8014d98:	6813      	ldr	r3, [r2, #0]
 8014d9a:	1d19      	adds	r1, r3, #4
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	6011      	str	r1, [r2, #0]
 8014da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014da8:	2301      	movs	r3, #1
 8014daa:	e08c      	b.n	8014ec6 <_printf_i+0x1be>
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	6011      	str	r1, [r2, #0]
 8014db0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014db4:	bf18      	it	ne
 8014db6:	b21b      	sxthne	r3, r3
 8014db8:	e7cf      	b.n	8014d5a <_printf_i+0x52>
 8014dba:	6813      	ldr	r3, [r2, #0]
 8014dbc:	6825      	ldr	r5, [r4, #0]
 8014dbe:	1d18      	adds	r0, r3, #4
 8014dc0:	6010      	str	r0, [r2, #0]
 8014dc2:	0628      	lsls	r0, r5, #24
 8014dc4:	d501      	bpl.n	8014dca <_printf_i+0xc2>
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	e002      	b.n	8014dd0 <_printf_i+0xc8>
 8014dca:	0668      	lsls	r0, r5, #25
 8014dcc:	d5fb      	bpl.n	8014dc6 <_printf_i+0xbe>
 8014dce:	881b      	ldrh	r3, [r3, #0]
 8014dd0:	4854      	ldr	r0, [pc, #336]	; (8014f24 <_printf_i+0x21c>)
 8014dd2:	296f      	cmp	r1, #111	; 0x6f
 8014dd4:	bf14      	ite	ne
 8014dd6:	220a      	movne	r2, #10
 8014dd8:	2208      	moveq	r2, #8
 8014dda:	2100      	movs	r1, #0
 8014ddc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014de0:	6865      	ldr	r5, [r4, #4]
 8014de2:	60a5      	str	r5, [r4, #8]
 8014de4:	2d00      	cmp	r5, #0
 8014de6:	f2c0 8095 	blt.w	8014f14 <_printf_i+0x20c>
 8014dea:	6821      	ldr	r1, [r4, #0]
 8014dec:	f021 0104 	bic.w	r1, r1, #4
 8014df0:	6021      	str	r1, [r4, #0]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d13d      	bne.n	8014e72 <_printf_i+0x16a>
 8014df6:	2d00      	cmp	r5, #0
 8014df8:	f040 808e 	bne.w	8014f18 <_printf_i+0x210>
 8014dfc:	4665      	mov	r5, ip
 8014dfe:	2a08      	cmp	r2, #8
 8014e00:	d10b      	bne.n	8014e1a <_printf_i+0x112>
 8014e02:	6823      	ldr	r3, [r4, #0]
 8014e04:	07db      	lsls	r3, r3, #31
 8014e06:	d508      	bpl.n	8014e1a <_printf_i+0x112>
 8014e08:	6923      	ldr	r3, [r4, #16]
 8014e0a:	6862      	ldr	r2, [r4, #4]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	bfde      	ittt	le
 8014e10:	2330      	movle	r3, #48	; 0x30
 8014e12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014e16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014e1a:	ebac 0305 	sub.w	r3, ip, r5
 8014e1e:	6123      	str	r3, [r4, #16]
 8014e20:	f8cd 8000 	str.w	r8, [sp]
 8014e24:	463b      	mov	r3, r7
 8014e26:	aa03      	add	r2, sp, #12
 8014e28:	4621      	mov	r1, r4
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	f7ff fef6 	bl	8014c1c <_printf_common>
 8014e30:	3001      	adds	r0, #1
 8014e32:	d14d      	bne.n	8014ed0 <_printf_i+0x1c8>
 8014e34:	f04f 30ff 	mov.w	r0, #4294967295
 8014e38:	b005      	add	sp, #20
 8014e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e3e:	4839      	ldr	r0, [pc, #228]	; (8014f24 <_printf_i+0x21c>)
 8014e40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014e44:	6813      	ldr	r3, [r2, #0]
 8014e46:	6821      	ldr	r1, [r4, #0]
 8014e48:	1d1d      	adds	r5, r3, #4
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	6015      	str	r5, [r2, #0]
 8014e4e:	060a      	lsls	r2, r1, #24
 8014e50:	d50b      	bpl.n	8014e6a <_printf_i+0x162>
 8014e52:	07ca      	lsls	r2, r1, #31
 8014e54:	bf44      	itt	mi
 8014e56:	f041 0120 	orrmi.w	r1, r1, #32
 8014e5a:	6021      	strmi	r1, [r4, #0]
 8014e5c:	b91b      	cbnz	r3, 8014e66 <_printf_i+0x15e>
 8014e5e:	6822      	ldr	r2, [r4, #0]
 8014e60:	f022 0220 	bic.w	r2, r2, #32
 8014e64:	6022      	str	r2, [r4, #0]
 8014e66:	2210      	movs	r2, #16
 8014e68:	e7b7      	b.n	8014dda <_printf_i+0xd2>
 8014e6a:	064d      	lsls	r5, r1, #25
 8014e6c:	bf48      	it	mi
 8014e6e:	b29b      	uxthmi	r3, r3
 8014e70:	e7ef      	b.n	8014e52 <_printf_i+0x14a>
 8014e72:	4665      	mov	r5, ip
 8014e74:	fbb3 f1f2 	udiv	r1, r3, r2
 8014e78:	fb02 3311 	mls	r3, r2, r1, r3
 8014e7c:	5cc3      	ldrb	r3, [r0, r3]
 8014e7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014e82:	460b      	mov	r3, r1
 8014e84:	2900      	cmp	r1, #0
 8014e86:	d1f5      	bne.n	8014e74 <_printf_i+0x16c>
 8014e88:	e7b9      	b.n	8014dfe <_printf_i+0xf6>
 8014e8a:	6813      	ldr	r3, [r2, #0]
 8014e8c:	6825      	ldr	r5, [r4, #0]
 8014e8e:	6961      	ldr	r1, [r4, #20]
 8014e90:	1d18      	adds	r0, r3, #4
 8014e92:	6010      	str	r0, [r2, #0]
 8014e94:	0628      	lsls	r0, r5, #24
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	d501      	bpl.n	8014e9e <_printf_i+0x196>
 8014e9a:	6019      	str	r1, [r3, #0]
 8014e9c:	e002      	b.n	8014ea4 <_printf_i+0x19c>
 8014e9e:	066a      	lsls	r2, r5, #25
 8014ea0:	d5fb      	bpl.n	8014e9a <_printf_i+0x192>
 8014ea2:	8019      	strh	r1, [r3, #0]
 8014ea4:	2300      	movs	r3, #0
 8014ea6:	6123      	str	r3, [r4, #16]
 8014ea8:	4665      	mov	r5, ip
 8014eaa:	e7b9      	b.n	8014e20 <_printf_i+0x118>
 8014eac:	6813      	ldr	r3, [r2, #0]
 8014eae:	1d19      	adds	r1, r3, #4
 8014eb0:	6011      	str	r1, [r2, #0]
 8014eb2:	681d      	ldr	r5, [r3, #0]
 8014eb4:	6862      	ldr	r2, [r4, #4]
 8014eb6:	2100      	movs	r1, #0
 8014eb8:	4628      	mov	r0, r5
 8014eba:	f7eb f9a9 	bl	8000210 <memchr>
 8014ebe:	b108      	cbz	r0, 8014ec4 <_printf_i+0x1bc>
 8014ec0:	1b40      	subs	r0, r0, r5
 8014ec2:	6060      	str	r0, [r4, #4]
 8014ec4:	6863      	ldr	r3, [r4, #4]
 8014ec6:	6123      	str	r3, [r4, #16]
 8014ec8:	2300      	movs	r3, #0
 8014eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ece:	e7a7      	b.n	8014e20 <_printf_i+0x118>
 8014ed0:	6923      	ldr	r3, [r4, #16]
 8014ed2:	462a      	mov	r2, r5
 8014ed4:	4639      	mov	r1, r7
 8014ed6:	4630      	mov	r0, r6
 8014ed8:	47c0      	blx	r8
 8014eda:	3001      	adds	r0, #1
 8014edc:	d0aa      	beq.n	8014e34 <_printf_i+0x12c>
 8014ede:	6823      	ldr	r3, [r4, #0]
 8014ee0:	079b      	lsls	r3, r3, #30
 8014ee2:	d413      	bmi.n	8014f0c <_printf_i+0x204>
 8014ee4:	68e0      	ldr	r0, [r4, #12]
 8014ee6:	9b03      	ldr	r3, [sp, #12]
 8014ee8:	4298      	cmp	r0, r3
 8014eea:	bfb8      	it	lt
 8014eec:	4618      	movlt	r0, r3
 8014eee:	e7a3      	b.n	8014e38 <_printf_i+0x130>
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	464a      	mov	r2, r9
 8014ef4:	4639      	mov	r1, r7
 8014ef6:	4630      	mov	r0, r6
 8014ef8:	47c0      	blx	r8
 8014efa:	3001      	adds	r0, #1
 8014efc:	d09a      	beq.n	8014e34 <_printf_i+0x12c>
 8014efe:	3501      	adds	r5, #1
 8014f00:	68e3      	ldr	r3, [r4, #12]
 8014f02:	9a03      	ldr	r2, [sp, #12]
 8014f04:	1a9b      	subs	r3, r3, r2
 8014f06:	42ab      	cmp	r3, r5
 8014f08:	dcf2      	bgt.n	8014ef0 <_printf_i+0x1e8>
 8014f0a:	e7eb      	b.n	8014ee4 <_printf_i+0x1dc>
 8014f0c:	2500      	movs	r5, #0
 8014f0e:	f104 0919 	add.w	r9, r4, #25
 8014f12:	e7f5      	b.n	8014f00 <_printf_i+0x1f8>
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d1ac      	bne.n	8014e72 <_printf_i+0x16a>
 8014f18:	7803      	ldrb	r3, [r0, #0]
 8014f1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014f1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f22:	e76c      	b.n	8014dfe <_printf_i+0xf6>
 8014f24:	08018f34 	.word	0x08018f34
 8014f28:	08018f45 	.word	0x08018f45

08014f2c <_scanf_float>:
 8014f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f30:	469a      	mov	sl, r3
 8014f32:	688b      	ldr	r3, [r1, #8]
 8014f34:	4616      	mov	r6, r2
 8014f36:	1e5a      	subs	r2, r3, #1
 8014f38:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014f3c:	b087      	sub	sp, #28
 8014f3e:	bf83      	ittte	hi
 8014f40:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8014f44:	189b      	addhi	r3, r3, r2
 8014f46:	9301      	strhi	r3, [sp, #4]
 8014f48:	2300      	movls	r3, #0
 8014f4a:	bf86      	itte	hi
 8014f4c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014f50:	608b      	strhi	r3, [r1, #8]
 8014f52:	9301      	strls	r3, [sp, #4]
 8014f54:	680b      	ldr	r3, [r1, #0]
 8014f56:	4688      	mov	r8, r1
 8014f58:	f04f 0b00 	mov.w	fp, #0
 8014f5c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8014f60:	f848 3b1c 	str.w	r3, [r8], #28
 8014f64:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8014f68:	4607      	mov	r7, r0
 8014f6a:	460c      	mov	r4, r1
 8014f6c:	4645      	mov	r5, r8
 8014f6e:	465a      	mov	r2, fp
 8014f70:	46d9      	mov	r9, fp
 8014f72:	f8cd b008 	str.w	fp, [sp, #8]
 8014f76:	68a1      	ldr	r1, [r4, #8]
 8014f78:	b181      	cbz	r1, 8014f9c <_scanf_float+0x70>
 8014f7a:	6833      	ldr	r3, [r6, #0]
 8014f7c:	781b      	ldrb	r3, [r3, #0]
 8014f7e:	2b49      	cmp	r3, #73	; 0x49
 8014f80:	d071      	beq.n	8015066 <_scanf_float+0x13a>
 8014f82:	d84d      	bhi.n	8015020 <_scanf_float+0xf4>
 8014f84:	2b39      	cmp	r3, #57	; 0x39
 8014f86:	d840      	bhi.n	801500a <_scanf_float+0xde>
 8014f88:	2b31      	cmp	r3, #49	; 0x31
 8014f8a:	f080 8088 	bcs.w	801509e <_scanf_float+0x172>
 8014f8e:	2b2d      	cmp	r3, #45	; 0x2d
 8014f90:	f000 8090 	beq.w	80150b4 <_scanf_float+0x188>
 8014f94:	d815      	bhi.n	8014fc2 <_scanf_float+0x96>
 8014f96:	2b2b      	cmp	r3, #43	; 0x2b
 8014f98:	f000 808c 	beq.w	80150b4 <_scanf_float+0x188>
 8014f9c:	f1b9 0f00 	cmp.w	r9, #0
 8014fa0:	d003      	beq.n	8014faa <_scanf_float+0x7e>
 8014fa2:	6823      	ldr	r3, [r4, #0]
 8014fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014fa8:	6023      	str	r3, [r4, #0]
 8014faa:	3a01      	subs	r2, #1
 8014fac:	2a01      	cmp	r2, #1
 8014fae:	f200 80ea 	bhi.w	8015186 <_scanf_float+0x25a>
 8014fb2:	4545      	cmp	r5, r8
 8014fb4:	f200 80dc 	bhi.w	8015170 <_scanf_float+0x244>
 8014fb8:	2601      	movs	r6, #1
 8014fba:	4630      	mov	r0, r6
 8014fbc:	b007      	add	sp, #28
 8014fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8014fc4:	f000 809f 	beq.w	8015106 <_scanf_float+0x1da>
 8014fc8:	2b30      	cmp	r3, #48	; 0x30
 8014fca:	d1e7      	bne.n	8014f9c <_scanf_float+0x70>
 8014fcc:	6820      	ldr	r0, [r4, #0]
 8014fce:	f410 7f80 	tst.w	r0, #256	; 0x100
 8014fd2:	d064      	beq.n	801509e <_scanf_float+0x172>
 8014fd4:	9b01      	ldr	r3, [sp, #4]
 8014fd6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8014fda:	6020      	str	r0, [r4, #0]
 8014fdc:	f109 0901 	add.w	r9, r9, #1
 8014fe0:	b11b      	cbz	r3, 8014fea <_scanf_float+0xbe>
 8014fe2:	3b01      	subs	r3, #1
 8014fe4:	3101      	adds	r1, #1
 8014fe6:	9301      	str	r3, [sp, #4]
 8014fe8:	60a1      	str	r1, [r4, #8]
 8014fea:	68a3      	ldr	r3, [r4, #8]
 8014fec:	3b01      	subs	r3, #1
 8014fee:	60a3      	str	r3, [r4, #8]
 8014ff0:	6923      	ldr	r3, [r4, #16]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	6123      	str	r3, [r4, #16]
 8014ff6:	6873      	ldr	r3, [r6, #4]
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	6073      	str	r3, [r6, #4]
 8014ffe:	f340 80ac 	ble.w	801515a <_scanf_float+0x22e>
 8015002:	6833      	ldr	r3, [r6, #0]
 8015004:	3301      	adds	r3, #1
 8015006:	6033      	str	r3, [r6, #0]
 8015008:	e7b5      	b.n	8014f76 <_scanf_float+0x4a>
 801500a:	2b45      	cmp	r3, #69	; 0x45
 801500c:	f000 8085 	beq.w	801511a <_scanf_float+0x1ee>
 8015010:	2b46      	cmp	r3, #70	; 0x46
 8015012:	d06a      	beq.n	80150ea <_scanf_float+0x1be>
 8015014:	2b41      	cmp	r3, #65	; 0x41
 8015016:	d1c1      	bne.n	8014f9c <_scanf_float+0x70>
 8015018:	2a01      	cmp	r2, #1
 801501a:	d1bf      	bne.n	8014f9c <_scanf_float+0x70>
 801501c:	2202      	movs	r2, #2
 801501e:	e046      	b.n	80150ae <_scanf_float+0x182>
 8015020:	2b65      	cmp	r3, #101	; 0x65
 8015022:	d07a      	beq.n	801511a <_scanf_float+0x1ee>
 8015024:	d818      	bhi.n	8015058 <_scanf_float+0x12c>
 8015026:	2b54      	cmp	r3, #84	; 0x54
 8015028:	d066      	beq.n	80150f8 <_scanf_float+0x1cc>
 801502a:	d811      	bhi.n	8015050 <_scanf_float+0x124>
 801502c:	2b4e      	cmp	r3, #78	; 0x4e
 801502e:	d1b5      	bne.n	8014f9c <_scanf_float+0x70>
 8015030:	2a00      	cmp	r2, #0
 8015032:	d146      	bne.n	80150c2 <_scanf_float+0x196>
 8015034:	f1b9 0f00 	cmp.w	r9, #0
 8015038:	d145      	bne.n	80150c6 <_scanf_float+0x19a>
 801503a:	6821      	ldr	r1, [r4, #0]
 801503c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015040:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015044:	d13f      	bne.n	80150c6 <_scanf_float+0x19a>
 8015046:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801504a:	6021      	str	r1, [r4, #0]
 801504c:	2201      	movs	r2, #1
 801504e:	e02e      	b.n	80150ae <_scanf_float+0x182>
 8015050:	2b59      	cmp	r3, #89	; 0x59
 8015052:	d01e      	beq.n	8015092 <_scanf_float+0x166>
 8015054:	2b61      	cmp	r3, #97	; 0x61
 8015056:	e7de      	b.n	8015016 <_scanf_float+0xea>
 8015058:	2b6e      	cmp	r3, #110	; 0x6e
 801505a:	d0e9      	beq.n	8015030 <_scanf_float+0x104>
 801505c:	d815      	bhi.n	801508a <_scanf_float+0x15e>
 801505e:	2b66      	cmp	r3, #102	; 0x66
 8015060:	d043      	beq.n	80150ea <_scanf_float+0x1be>
 8015062:	2b69      	cmp	r3, #105	; 0x69
 8015064:	d19a      	bne.n	8014f9c <_scanf_float+0x70>
 8015066:	f1bb 0f00 	cmp.w	fp, #0
 801506a:	d138      	bne.n	80150de <_scanf_float+0x1b2>
 801506c:	f1b9 0f00 	cmp.w	r9, #0
 8015070:	d197      	bne.n	8014fa2 <_scanf_float+0x76>
 8015072:	6821      	ldr	r1, [r4, #0]
 8015074:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015078:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801507c:	d195      	bne.n	8014faa <_scanf_float+0x7e>
 801507e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015082:	6021      	str	r1, [r4, #0]
 8015084:	f04f 0b01 	mov.w	fp, #1
 8015088:	e011      	b.n	80150ae <_scanf_float+0x182>
 801508a:	2b74      	cmp	r3, #116	; 0x74
 801508c:	d034      	beq.n	80150f8 <_scanf_float+0x1cc>
 801508e:	2b79      	cmp	r3, #121	; 0x79
 8015090:	d184      	bne.n	8014f9c <_scanf_float+0x70>
 8015092:	f1bb 0f07 	cmp.w	fp, #7
 8015096:	d181      	bne.n	8014f9c <_scanf_float+0x70>
 8015098:	f04f 0b08 	mov.w	fp, #8
 801509c:	e007      	b.n	80150ae <_scanf_float+0x182>
 801509e:	eb12 0f0b 	cmn.w	r2, fp
 80150a2:	f47f af7b 	bne.w	8014f9c <_scanf_float+0x70>
 80150a6:	6821      	ldr	r1, [r4, #0]
 80150a8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80150ac:	6021      	str	r1, [r4, #0]
 80150ae:	702b      	strb	r3, [r5, #0]
 80150b0:	3501      	adds	r5, #1
 80150b2:	e79a      	b.n	8014fea <_scanf_float+0xbe>
 80150b4:	6821      	ldr	r1, [r4, #0]
 80150b6:	0608      	lsls	r0, r1, #24
 80150b8:	f57f af70 	bpl.w	8014f9c <_scanf_float+0x70>
 80150bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80150c0:	e7f4      	b.n	80150ac <_scanf_float+0x180>
 80150c2:	2a02      	cmp	r2, #2
 80150c4:	d047      	beq.n	8015156 <_scanf_float+0x22a>
 80150c6:	f1bb 0f01 	cmp.w	fp, #1
 80150ca:	d003      	beq.n	80150d4 <_scanf_float+0x1a8>
 80150cc:	f1bb 0f04 	cmp.w	fp, #4
 80150d0:	f47f af64 	bne.w	8014f9c <_scanf_float+0x70>
 80150d4:	f10b 0b01 	add.w	fp, fp, #1
 80150d8:	fa5f fb8b 	uxtb.w	fp, fp
 80150dc:	e7e7      	b.n	80150ae <_scanf_float+0x182>
 80150de:	f1bb 0f03 	cmp.w	fp, #3
 80150e2:	d0f7      	beq.n	80150d4 <_scanf_float+0x1a8>
 80150e4:	f1bb 0f05 	cmp.w	fp, #5
 80150e8:	e7f2      	b.n	80150d0 <_scanf_float+0x1a4>
 80150ea:	f1bb 0f02 	cmp.w	fp, #2
 80150ee:	f47f af55 	bne.w	8014f9c <_scanf_float+0x70>
 80150f2:	f04f 0b03 	mov.w	fp, #3
 80150f6:	e7da      	b.n	80150ae <_scanf_float+0x182>
 80150f8:	f1bb 0f06 	cmp.w	fp, #6
 80150fc:	f47f af4e 	bne.w	8014f9c <_scanf_float+0x70>
 8015100:	f04f 0b07 	mov.w	fp, #7
 8015104:	e7d3      	b.n	80150ae <_scanf_float+0x182>
 8015106:	6821      	ldr	r1, [r4, #0]
 8015108:	0588      	lsls	r0, r1, #22
 801510a:	f57f af47 	bpl.w	8014f9c <_scanf_float+0x70>
 801510e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015112:	6021      	str	r1, [r4, #0]
 8015114:	f8cd 9008 	str.w	r9, [sp, #8]
 8015118:	e7c9      	b.n	80150ae <_scanf_float+0x182>
 801511a:	6821      	ldr	r1, [r4, #0]
 801511c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015120:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015124:	d006      	beq.n	8015134 <_scanf_float+0x208>
 8015126:	0548      	lsls	r0, r1, #21
 8015128:	f57f af38 	bpl.w	8014f9c <_scanf_float+0x70>
 801512c:	f1b9 0f00 	cmp.w	r9, #0
 8015130:	f43f af3b 	beq.w	8014faa <_scanf_float+0x7e>
 8015134:	0588      	lsls	r0, r1, #22
 8015136:	bf58      	it	pl
 8015138:	9802      	ldrpl	r0, [sp, #8]
 801513a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801513e:	bf58      	it	pl
 8015140:	eba9 0000 	subpl.w	r0, r9, r0
 8015144:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015148:	bf58      	it	pl
 801514a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801514e:	6021      	str	r1, [r4, #0]
 8015150:	f04f 0900 	mov.w	r9, #0
 8015154:	e7ab      	b.n	80150ae <_scanf_float+0x182>
 8015156:	2203      	movs	r2, #3
 8015158:	e7a9      	b.n	80150ae <_scanf_float+0x182>
 801515a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801515e:	9205      	str	r2, [sp, #20]
 8015160:	4631      	mov	r1, r6
 8015162:	4638      	mov	r0, r7
 8015164:	4798      	blx	r3
 8015166:	9a05      	ldr	r2, [sp, #20]
 8015168:	2800      	cmp	r0, #0
 801516a:	f43f af04 	beq.w	8014f76 <_scanf_float+0x4a>
 801516e:	e715      	b.n	8014f9c <_scanf_float+0x70>
 8015170:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015174:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015178:	4632      	mov	r2, r6
 801517a:	4638      	mov	r0, r7
 801517c:	4798      	blx	r3
 801517e:	6923      	ldr	r3, [r4, #16]
 8015180:	3b01      	subs	r3, #1
 8015182:	6123      	str	r3, [r4, #16]
 8015184:	e715      	b.n	8014fb2 <_scanf_float+0x86>
 8015186:	f10b 33ff 	add.w	r3, fp, #4294967295
 801518a:	2b06      	cmp	r3, #6
 801518c:	d80a      	bhi.n	80151a4 <_scanf_float+0x278>
 801518e:	f1bb 0f02 	cmp.w	fp, #2
 8015192:	d968      	bls.n	8015266 <_scanf_float+0x33a>
 8015194:	f1ab 0b03 	sub.w	fp, fp, #3
 8015198:	fa5f fb8b 	uxtb.w	fp, fp
 801519c:	eba5 0b0b 	sub.w	fp, r5, fp
 80151a0:	455d      	cmp	r5, fp
 80151a2:	d14b      	bne.n	801523c <_scanf_float+0x310>
 80151a4:	6823      	ldr	r3, [r4, #0]
 80151a6:	05da      	lsls	r2, r3, #23
 80151a8:	d51f      	bpl.n	80151ea <_scanf_float+0x2be>
 80151aa:	055b      	lsls	r3, r3, #21
 80151ac:	d468      	bmi.n	8015280 <_scanf_float+0x354>
 80151ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80151b2:	6923      	ldr	r3, [r4, #16]
 80151b4:	2965      	cmp	r1, #101	; 0x65
 80151b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80151ba:	f105 3bff 	add.w	fp, r5, #4294967295
 80151be:	6123      	str	r3, [r4, #16]
 80151c0:	d00d      	beq.n	80151de <_scanf_float+0x2b2>
 80151c2:	2945      	cmp	r1, #69	; 0x45
 80151c4:	d00b      	beq.n	80151de <_scanf_float+0x2b2>
 80151c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80151ca:	4632      	mov	r2, r6
 80151cc:	4638      	mov	r0, r7
 80151ce:	4798      	blx	r3
 80151d0:	6923      	ldr	r3, [r4, #16]
 80151d2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80151d6:	3b01      	subs	r3, #1
 80151d8:	f1a5 0b02 	sub.w	fp, r5, #2
 80151dc:	6123      	str	r3, [r4, #16]
 80151de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80151e2:	4632      	mov	r2, r6
 80151e4:	4638      	mov	r0, r7
 80151e6:	4798      	blx	r3
 80151e8:	465d      	mov	r5, fp
 80151ea:	6826      	ldr	r6, [r4, #0]
 80151ec:	f016 0610 	ands.w	r6, r6, #16
 80151f0:	d17a      	bne.n	80152e8 <_scanf_float+0x3bc>
 80151f2:	702e      	strb	r6, [r5, #0]
 80151f4:	6823      	ldr	r3, [r4, #0]
 80151f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80151fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80151fe:	d142      	bne.n	8015286 <_scanf_float+0x35a>
 8015200:	9b02      	ldr	r3, [sp, #8]
 8015202:	eba9 0303 	sub.w	r3, r9, r3
 8015206:	425a      	negs	r2, r3
 8015208:	2b00      	cmp	r3, #0
 801520a:	d149      	bne.n	80152a0 <_scanf_float+0x374>
 801520c:	2200      	movs	r2, #0
 801520e:	4641      	mov	r1, r8
 8015210:	4638      	mov	r0, r7
 8015212:	f000 ff0d 	bl	8016030 <_strtod_r>
 8015216:	6825      	ldr	r5, [r4, #0]
 8015218:	f8da 3000 	ldr.w	r3, [sl]
 801521c:	f015 0f02 	tst.w	r5, #2
 8015220:	f103 0204 	add.w	r2, r3, #4
 8015224:	ec59 8b10 	vmov	r8, r9, d0
 8015228:	f8ca 2000 	str.w	r2, [sl]
 801522c:	d043      	beq.n	80152b6 <_scanf_float+0x38a>
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	e9c3 8900 	strd	r8, r9, [r3]
 8015234:	68e3      	ldr	r3, [r4, #12]
 8015236:	3301      	adds	r3, #1
 8015238:	60e3      	str	r3, [r4, #12]
 801523a:	e6be      	b.n	8014fba <_scanf_float+0x8e>
 801523c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015240:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015244:	4632      	mov	r2, r6
 8015246:	4638      	mov	r0, r7
 8015248:	4798      	blx	r3
 801524a:	6923      	ldr	r3, [r4, #16]
 801524c:	3b01      	subs	r3, #1
 801524e:	6123      	str	r3, [r4, #16]
 8015250:	e7a6      	b.n	80151a0 <_scanf_float+0x274>
 8015252:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015256:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801525a:	4632      	mov	r2, r6
 801525c:	4638      	mov	r0, r7
 801525e:	4798      	blx	r3
 8015260:	6923      	ldr	r3, [r4, #16]
 8015262:	3b01      	subs	r3, #1
 8015264:	6123      	str	r3, [r4, #16]
 8015266:	4545      	cmp	r5, r8
 8015268:	d8f3      	bhi.n	8015252 <_scanf_float+0x326>
 801526a:	e6a5      	b.n	8014fb8 <_scanf_float+0x8c>
 801526c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015270:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015274:	4632      	mov	r2, r6
 8015276:	4638      	mov	r0, r7
 8015278:	4798      	blx	r3
 801527a:	6923      	ldr	r3, [r4, #16]
 801527c:	3b01      	subs	r3, #1
 801527e:	6123      	str	r3, [r4, #16]
 8015280:	4545      	cmp	r5, r8
 8015282:	d8f3      	bhi.n	801526c <_scanf_float+0x340>
 8015284:	e698      	b.n	8014fb8 <_scanf_float+0x8c>
 8015286:	9b03      	ldr	r3, [sp, #12]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d0bf      	beq.n	801520c <_scanf_float+0x2e0>
 801528c:	9904      	ldr	r1, [sp, #16]
 801528e:	230a      	movs	r3, #10
 8015290:	4632      	mov	r2, r6
 8015292:	3101      	adds	r1, #1
 8015294:	4638      	mov	r0, r7
 8015296:	f000 ff57 	bl	8016148 <_strtol_r>
 801529a:	9b03      	ldr	r3, [sp, #12]
 801529c:	9d04      	ldr	r5, [sp, #16]
 801529e:	1ac2      	subs	r2, r0, r3
 80152a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80152a4:	429d      	cmp	r5, r3
 80152a6:	bf28      	it	cs
 80152a8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80152ac:	490f      	ldr	r1, [pc, #60]	; (80152ec <_scanf_float+0x3c0>)
 80152ae:	4628      	mov	r0, r5
 80152b0:	f000 f858 	bl	8015364 <siprintf>
 80152b4:	e7aa      	b.n	801520c <_scanf_float+0x2e0>
 80152b6:	f015 0504 	ands.w	r5, r5, #4
 80152ba:	d1b8      	bne.n	801522e <_scanf_float+0x302>
 80152bc:	681f      	ldr	r7, [r3, #0]
 80152be:	ee10 2a10 	vmov	r2, s0
 80152c2:	464b      	mov	r3, r9
 80152c4:	ee10 0a10 	vmov	r0, s0
 80152c8:	4649      	mov	r1, r9
 80152ca:	f7eb fc47 	bl	8000b5c <__aeabi_dcmpun>
 80152ce:	b128      	cbz	r0, 80152dc <_scanf_float+0x3b0>
 80152d0:	4628      	mov	r0, r5
 80152d2:	f000 f80d 	bl	80152f0 <nanf>
 80152d6:	ed87 0a00 	vstr	s0, [r7]
 80152da:	e7ab      	b.n	8015234 <_scanf_float+0x308>
 80152dc:	4640      	mov	r0, r8
 80152de:	4649      	mov	r1, r9
 80152e0:	f7eb fc9a 	bl	8000c18 <__aeabi_d2f>
 80152e4:	6038      	str	r0, [r7, #0]
 80152e6:	e7a5      	b.n	8015234 <_scanf_float+0x308>
 80152e8:	2600      	movs	r6, #0
 80152ea:	e666      	b.n	8014fba <_scanf_float+0x8e>
 80152ec:	08018f56 	.word	0x08018f56

080152f0 <nanf>:
 80152f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80152f8 <nanf+0x8>
 80152f4:	4770      	bx	lr
 80152f6:	bf00      	nop
 80152f8:	7fc00000 	.word	0x7fc00000

080152fc <sniprintf>:
 80152fc:	b40c      	push	{r2, r3}
 80152fe:	b530      	push	{r4, r5, lr}
 8015300:	4b17      	ldr	r3, [pc, #92]	; (8015360 <sniprintf+0x64>)
 8015302:	1e0c      	subs	r4, r1, #0
 8015304:	b09d      	sub	sp, #116	; 0x74
 8015306:	681d      	ldr	r5, [r3, #0]
 8015308:	da08      	bge.n	801531c <sniprintf+0x20>
 801530a:	238b      	movs	r3, #139	; 0x8b
 801530c:	602b      	str	r3, [r5, #0]
 801530e:	f04f 30ff 	mov.w	r0, #4294967295
 8015312:	b01d      	add	sp, #116	; 0x74
 8015314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015318:	b002      	add	sp, #8
 801531a:	4770      	bx	lr
 801531c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015320:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015324:	bf14      	ite	ne
 8015326:	f104 33ff 	addne.w	r3, r4, #4294967295
 801532a:	4623      	moveq	r3, r4
 801532c:	9304      	str	r3, [sp, #16]
 801532e:	9307      	str	r3, [sp, #28]
 8015330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015334:	9002      	str	r0, [sp, #8]
 8015336:	9006      	str	r0, [sp, #24]
 8015338:	f8ad 3016 	strh.w	r3, [sp, #22]
 801533c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801533e:	ab21      	add	r3, sp, #132	; 0x84
 8015340:	a902      	add	r1, sp, #8
 8015342:	4628      	mov	r0, r5
 8015344:	9301      	str	r3, [sp, #4]
 8015346:	f002 fdf3 	bl	8017f30 <_svfiprintf_r>
 801534a:	1c43      	adds	r3, r0, #1
 801534c:	bfbc      	itt	lt
 801534e:	238b      	movlt	r3, #139	; 0x8b
 8015350:	602b      	strlt	r3, [r5, #0]
 8015352:	2c00      	cmp	r4, #0
 8015354:	d0dd      	beq.n	8015312 <sniprintf+0x16>
 8015356:	9b02      	ldr	r3, [sp, #8]
 8015358:	2200      	movs	r2, #0
 801535a:	701a      	strb	r2, [r3, #0]
 801535c:	e7d9      	b.n	8015312 <sniprintf+0x16>
 801535e:	bf00      	nop
 8015360:	2000000c 	.word	0x2000000c

08015364 <siprintf>:
 8015364:	b40e      	push	{r1, r2, r3}
 8015366:	b500      	push	{lr}
 8015368:	b09c      	sub	sp, #112	; 0x70
 801536a:	ab1d      	add	r3, sp, #116	; 0x74
 801536c:	9002      	str	r0, [sp, #8]
 801536e:	9006      	str	r0, [sp, #24]
 8015370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015374:	4809      	ldr	r0, [pc, #36]	; (801539c <siprintf+0x38>)
 8015376:	9107      	str	r1, [sp, #28]
 8015378:	9104      	str	r1, [sp, #16]
 801537a:	4909      	ldr	r1, [pc, #36]	; (80153a0 <siprintf+0x3c>)
 801537c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015380:	9105      	str	r1, [sp, #20]
 8015382:	6800      	ldr	r0, [r0, #0]
 8015384:	9301      	str	r3, [sp, #4]
 8015386:	a902      	add	r1, sp, #8
 8015388:	f002 fdd2 	bl	8017f30 <_svfiprintf_r>
 801538c:	9b02      	ldr	r3, [sp, #8]
 801538e:	2200      	movs	r2, #0
 8015390:	701a      	strb	r2, [r3, #0]
 8015392:	b01c      	add	sp, #112	; 0x70
 8015394:	f85d eb04 	ldr.w	lr, [sp], #4
 8015398:	b003      	add	sp, #12
 801539a:	4770      	bx	lr
 801539c:	2000000c 	.word	0x2000000c
 80153a0:	ffff0208 	.word	0xffff0208

080153a4 <siscanf>:
 80153a4:	b40e      	push	{r1, r2, r3}
 80153a6:	b530      	push	{r4, r5, lr}
 80153a8:	b09c      	sub	sp, #112	; 0x70
 80153aa:	ac1f      	add	r4, sp, #124	; 0x7c
 80153ac:	f44f 7201 	mov.w	r2, #516	; 0x204
 80153b0:	f854 5b04 	ldr.w	r5, [r4], #4
 80153b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80153b8:	9002      	str	r0, [sp, #8]
 80153ba:	9006      	str	r0, [sp, #24]
 80153bc:	f7ea ff20 	bl	8000200 <strlen>
 80153c0:	4b0b      	ldr	r3, [pc, #44]	; (80153f0 <siscanf+0x4c>)
 80153c2:	9003      	str	r0, [sp, #12]
 80153c4:	9007      	str	r0, [sp, #28]
 80153c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80153c8:	480a      	ldr	r0, [pc, #40]	; (80153f4 <siscanf+0x50>)
 80153ca:	9401      	str	r4, [sp, #4]
 80153cc:	2300      	movs	r3, #0
 80153ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80153d0:	9314      	str	r3, [sp, #80]	; 0x50
 80153d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80153da:	462a      	mov	r2, r5
 80153dc:	4623      	mov	r3, r4
 80153de:	a902      	add	r1, sp, #8
 80153e0:	6800      	ldr	r0, [r0, #0]
 80153e2:	f002 fef7 	bl	80181d4 <__ssvfiscanf_r>
 80153e6:	b01c      	add	sp, #112	; 0x70
 80153e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80153ec:	b003      	add	sp, #12
 80153ee:	4770      	bx	lr
 80153f0:	080153f9 	.word	0x080153f9
 80153f4:	2000000c 	.word	0x2000000c

080153f8 <__seofread>:
 80153f8:	2000      	movs	r0, #0
 80153fa:	4770      	bx	lr

080153fc <strcpy>:
 80153fc:	4603      	mov	r3, r0
 80153fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015402:	f803 2b01 	strb.w	r2, [r3], #1
 8015406:	2a00      	cmp	r2, #0
 8015408:	d1f9      	bne.n	80153fe <strcpy+0x2>
 801540a:	4770      	bx	lr

0801540c <sulp>:
 801540c:	b570      	push	{r4, r5, r6, lr}
 801540e:	4604      	mov	r4, r0
 8015410:	460d      	mov	r5, r1
 8015412:	ec45 4b10 	vmov	d0, r4, r5
 8015416:	4616      	mov	r6, r2
 8015418:	f002 fb46 	bl	8017aa8 <__ulp>
 801541c:	ec51 0b10 	vmov	r0, r1, d0
 8015420:	b17e      	cbz	r6, 8015442 <sulp+0x36>
 8015422:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015426:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801542a:	2b00      	cmp	r3, #0
 801542c:	dd09      	ble.n	8015442 <sulp+0x36>
 801542e:	051b      	lsls	r3, r3, #20
 8015430:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015434:	2400      	movs	r4, #0
 8015436:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801543a:	4622      	mov	r2, r4
 801543c:	462b      	mov	r3, r5
 801543e:	f7eb f8f3 	bl	8000628 <__aeabi_dmul>
 8015442:	bd70      	pop	{r4, r5, r6, pc}
 8015444:	0000      	movs	r0, r0
	...

08015448 <_strtod_l>:
 8015448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801544c:	461f      	mov	r7, r3
 801544e:	b0a1      	sub	sp, #132	; 0x84
 8015450:	2300      	movs	r3, #0
 8015452:	4681      	mov	r9, r0
 8015454:	4638      	mov	r0, r7
 8015456:	460e      	mov	r6, r1
 8015458:	9217      	str	r2, [sp, #92]	; 0x5c
 801545a:	931c      	str	r3, [sp, #112]	; 0x70
 801545c:	f002 f824 	bl	80174a8 <__localeconv_l>
 8015460:	4680      	mov	r8, r0
 8015462:	6800      	ldr	r0, [r0, #0]
 8015464:	f7ea fecc 	bl	8000200 <strlen>
 8015468:	f04f 0a00 	mov.w	sl, #0
 801546c:	4604      	mov	r4, r0
 801546e:	f04f 0b00 	mov.w	fp, #0
 8015472:	961b      	str	r6, [sp, #108]	; 0x6c
 8015474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015476:	781a      	ldrb	r2, [r3, #0]
 8015478:	2a0d      	cmp	r2, #13
 801547a:	d832      	bhi.n	80154e2 <_strtod_l+0x9a>
 801547c:	2a09      	cmp	r2, #9
 801547e:	d236      	bcs.n	80154ee <_strtod_l+0xa6>
 8015480:	2a00      	cmp	r2, #0
 8015482:	d03e      	beq.n	8015502 <_strtod_l+0xba>
 8015484:	2300      	movs	r3, #0
 8015486:	930d      	str	r3, [sp, #52]	; 0x34
 8015488:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801548a:	782b      	ldrb	r3, [r5, #0]
 801548c:	2b30      	cmp	r3, #48	; 0x30
 801548e:	f040 80ac 	bne.w	80155ea <_strtod_l+0x1a2>
 8015492:	786b      	ldrb	r3, [r5, #1]
 8015494:	2b58      	cmp	r3, #88	; 0x58
 8015496:	d001      	beq.n	801549c <_strtod_l+0x54>
 8015498:	2b78      	cmp	r3, #120	; 0x78
 801549a:	d167      	bne.n	801556c <_strtod_l+0x124>
 801549c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801549e:	9301      	str	r3, [sp, #4]
 80154a0:	ab1c      	add	r3, sp, #112	; 0x70
 80154a2:	9300      	str	r3, [sp, #0]
 80154a4:	9702      	str	r7, [sp, #8]
 80154a6:	ab1d      	add	r3, sp, #116	; 0x74
 80154a8:	4a88      	ldr	r2, [pc, #544]	; (80156cc <_strtod_l+0x284>)
 80154aa:	a91b      	add	r1, sp, #108	; 0x6c
 80154ac:	4648      	mov	r0, r9
 80154ae:	f001 fd12 	bl	8016ed6 <__gethex>
 80154b2:	f010 0407 	ands.w	r4, r0, #7
 80154b6:	4606      	mov	r6, r0
 80154b8:	d005      	beq.n	80154c6 <_strtod_l+0x7e>
 80154ba:	2c06      	cmp	r4, #6
 80154bc:	d12b      	bne.n	8015516 <_strtod_l+0xce>
 80154be:	3501      	adds	r5, #1
 80154c0:	2300      	movs	r3, #0
 80154c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80154c4:	930d      	str	r3, [sp, #52]	; 0x34
 80154c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	f040 859a 	bne.w	8016002 <_strtod_l+0xbba>
 80154ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154d0:	b1e3      	cbz	r3, 801550c <_strtod_l+0xc4>
 80154d2:	4652      	mov	r2, sl
 80154d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80154d8:	ec43 2b10 	vmov	d0, r2, r3
 80154dc:	b021      	add	sp, #132	; 0x84
 80154de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154e2:	2a2b      	cmp	r2, #43	; 0x2b
 80154e4:	d015      	beq.n	8015512 <_strtod_l+0xca>
 80154e6:	2a2d      	cmp	r2, #45	; 0x2d
 80154e8:	d004      	beq.n	80154f4 <_strtod_l+0xac>
 80154ea:	2a20      	cmp	r2, #32
 80154ec:	d1ca      	bne.n	8015484 <_strtod_l+0x3c>
 80154ee:	3301      	adds	r3, #1
 80154f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80154f2:	e7bf      	b.n	8015474 <_strtod_l+0x2c>
 80154f4:	2201      	movs	r2, #1
 80154f6:	920d      	str	r2, [sp, #52]	; 0x34
 80154f8:	1c5a      	adds	r2, r3, #1
 80154fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80154fc:	785b      	ldrb	r3, [r3, #1]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d1c2      	bne.n	8015488 <_strtod_l+0x40>
 8015502:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015504:	961b      	str	r6, [sp, #108]	; 0x6c
 8015506:	2b00      	cmp	r3, #0
 8015508:	f040 8579 	bne.w	8015ffe <_strtod_l+0xbb6>
 801550c:	4652      	mov	r2, sl
 801550e:	465b      	mov	r3, fp
 8015510:	e7e2      	b.n	80154d8 <_strtod_l+0x90>
 8015512:	2200      	movs	r2, #0
 8015514:	e7ef      	b.n	80154f6 <_strtod_l+0xae>
 8015516:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015518:	b13a      	cbz	r2, 801552a <_strtod_l+0xe2>
 801551a:	2135      	movs	r1, #53	; 0x35
 801551c:	a81e      	add	r0, sp, #120	; 0x78
 801551e:	f002 fbbb 	bl	8017c98 <__copybits>
 8015522:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015524:	4648      	mov	r0, r9
 8015526:	f002 f828 	bl	801757a <_Bfree>
 801552a:	3c01      	subs	r4, #1
 801552c:	2c04      	cmp	r4, #4
 801552e:	d806      	bhi.n	801553e <_strtod_l+0xf6>
 8015530:	e8df f004 	tbb	[pc, r4]
 8015534:	1714030a 	.word	0x1714030a
 8015538:	0a          	.byte	0x0a
 8015539:	00          	.byte	0x00
 801553a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801553e:	0730      	lsls	r0, r6, #28
 8015540:	d5c1      	bpl.n	80154c6 <_strtod_l+0x7e>
 8015542:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015546:	e7be      	b.n	80154c6 <_strtod_l+0x7e>
 8015548:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801554c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801554e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015552:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015556:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801555a:	e7f0      	b.n	801553e <_strtod_l+0xf6>
 801555c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80156d0 <_strtod_l+0x288>
 8015560:	e7ed      	b.n	801553e <_strtod_l+0xf6>
 8015562:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015566:	f04f 3aff 	mov.w	sl, #4294967295
 801556a:	e7e8      	b.n	801553e <_strtod_l+0xf6>
 801556c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801556e:	1c5a      	adds	r2, r3, #1
 8015570:	921b      	str	r2, [sp, #108]	; 0x6c
 8015572:	785b      	ldrb	r3, [r3, #1]
 8015574:	2b30      	cmp	r3, #48	; 0x30
 8015576:	d0f9      	beq.n	801556c <_strtod_l+0x124>
 8015578:	2b00      	cmp	r3, #0
 801557a:	d0a4      	beq.n	80154c6 <_strtod_l+0x7e>
 801557c:	2301      	movs	r3, #1
 801557e:	2500      	movs	r5, #0
 8015580:	9306      	str	r3, [sp, #24]
 8015582:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015584:	9308      	str	r3, [sp, #32]
 8015586:	9507      	str	r5, [sp, #28]
 8015588:	9505      	str	r5, [sp, #20]
 801558a:	220a      	movs	r2, #10
 801558c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801558e:	7807      	ldrb	r7, [r0, #0]
 8015590:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015594:	b2d9      	uxtb	r1, r3
 8015596:	2909      	cmp	r1, #9
 8015598:	d929      	bls.n	80155ee <_strtod_l+0x1a6>
 801559a:	4622      	mov	r2, r4
 801559c:	f8d8 1000 	ldr.w	r1, [r8]
 80155a0:	f003 f902 	bl	80187a8 <strncmp>
 80155a4:	2800      	cmp	r0, #0
 80155a6:	d031      	beq.n	801560c <_strtod_l+0x1c4>
 80155a8:	2000      	movs	r0, #0
 80155aa:	9c05      	ldr	r4, [sp, #20]
 80155ac:	9004      	str	r0, [sp, #16]
 80155ae:	463b      	mov	r3, r7
 80155b0:	4602      	mov	r2, r0
 80155b2:	2b65      	cmp	r3, #101	; 0x65
 80155b4:	d001      	beq.n	80155ba <_strtod_l+0x172>
 80155b6:	2b45      	cmp	r3, #69	; 0x45
 80155b8:	d114      	bne.n	80155e4 <_strtod_l+0x19c>
 80155ba:	b924      	cbnz	r4, 80155c6 <_strtod_l+0x17e>
 80155bc:	b910      	cbnz	r0, 80155c4 <_strtod_l+0x17c>
 80155be:	9b06      	ldr	r3, [sp, #24]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d09e      	beq.n	8015502 <_strtod_l+0xba>
 80155c4:	2400      	movs	r4, #0
 80155c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80155c8:	1c73      	adds	r3, r6, #1
 80155ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80155cc:	7873      	ldrb	r3, [r6, #1]
 80155ce:	2b2b      	cmp	r3, #43	; 0x2b
 80155d0:	d078      	beq.n	80156c4 <_strtod_l+0x27c>
 80155d2:	2b2d      	cmp	r3, #45	; 0x2d
 80155d4:	d070      	beq.n	80156b8 <_strtod_l+0x270>
 80155d6:	f04f 0c00 	mov.w	ip, #0
 80155da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80155de:	2f09      	cmp	r7, #9
 80155e0:	d97c      	bls.n	80156dc <_strtod_l+0x294>
 80155e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80155e4:	f04f 0e00 	mov.w	lr, #0
 80155e8:	e09a      	b.n	8015720 <_strtod_l+0x2d8>
 80155ea:	2300      	movs	r3, #0
 80155ec:	e7c7      	b.n	801557e <_strtod_l+0x136>
 80155ee:	9905      	ldr	r1, [sp, #20]
 80155f0:	2908      	cmp	r1, #8
 80155f2:	bfdd      	ittte	le
 80155f4:	9907      	ldrle	r1, [sp, #28]
 80155f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80155fa:	9307      	strle	r3, [sp, #28]
 80155fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015600:	9b05      	ldr	r3, [sp, #20]
 8015602:	3001      	adds	r0, #1
 8015604:	3301      	adds	r3, #1
 8015606:	9305      	str	r3, [sp, #20]
 8015608:	901b      	str	r0, [sp, #108]	; 0x6c
 801560a:	e7bf      	b.n	801558c <_strtod_l+0x144>
 801560c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801560e:	191a      	adds	r2, r3, r4
 8015610:	921b      	str	r2, [sp, #108]	; 0x6c
 8015612:	9a05      	ldr	r2, [sp, #20]
 8015614:	5d1b      	ldrb	r3, [r3, r4]
 8015616:	2a00      	cmp	r2, #0
 8015618:	d037      	beq.n	801568a <_strtod_l+0x242>
 801561a:	9c05      	ldr	r4, [sp, #20]
 801561c:	4602      	mov	r2, r0
 801561e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015622:	2909      	cmp	r1, #9
 8015624:	d913      	bls.n	801564e <_strtod_l+0x206>
 8015626:	2101      	movs	r1, #1
 8015628:	9104      	str	r1, [sp, #16]
 801562a:	e7c2      	b.n	80155b2 <_strtod_l+0x16a>
 801562c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801562e:	1c5a      	adds	r2, r3, #1
 8015630:	921b      	str	r2, [sp, #108]	; 0x6c
 8015632:	785b      	ldrb	r3, [r3, #1]
 8015634:	3001      	adds	r0, #1
 8015636:	2b30      	cmp	r3, #48	; 0x30
 8015638:	d0f8      	beq.n	801562c <_strtod_l+0x1e4>
 801563a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801563e:	2a08      	cmp	r2, #8
 8015640:	f200 84e4 	bhi.w	801600c <_strtod_l+0xbc4>
 8015644:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015646:	9208      	str	r2, [sp, #32]
 8015648:	4602      	mov	r2, r0
 801564a:	2000      	movs	r0, #0
 801564c:	4604      	mov	r4, r0
 801564e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015652:	f100 0101 	add.w	r1, r0, #1
 8015656:	d012      	beq.n	801567e <_strtod_l+0x236>
 8015658:	440a      	add	r2, r1
 801565a:	eb00 0c04 	add.w	ip, r0, r4
 801565e:	4621      	mov	r1, r4
 8015660:	270a      	movs	r7, #10
 8015662:	458c      	cmp	ip, r1
 8015664:	d113      	bne.n	801568e <_strtod_l+0x246>
 8015666:	1821      	adds	r1, r4, r0
 8015668:	2908      	cmp	r1, #8
 801566a:	f104 0401 	add.w	r4, r4, #1
 801566e:	4404      	add	r4, r0
 8015670:	dc19      	bgt.n	80156a6 <_strtod_l+0x25e>
 8015672:	9b07      	ldr	r3, [sp, #28]
 8015674:	210a      	movs	r1, #10
 8015676:	fb01 e303 	mla	r3, r1, r3, lr
 801567a:	9307      	str	r3, [sp, #28]
 801567c:	2100      	movs	r1, #0
 801567e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015680:	1c58      	adds	r0, r3, #1
 8015682:	901b      	str	r0, [sp, #108]	; 0x6c
 8015684:	785b      	ldrb	r3, [r3, #1]
 8015686:	4608      	mov	r0, r1
 8015688:	e7c9      	b.n	801561e <_strtod_l+0x1d6>
 801568a:	9805      	ldr	r0, [sp, #20]
 801568c:	e7d3      	b.n	8015636 <_strtod_l+0x1ee>
 801568e:	2908      	cmp	r1, #8
 8015690:	f101 0101 	add.w	r1, r1, #1
 8015694:	dc03      	bgt.n	801569e <_strtod_l+0x256>
 8015696:	9b07      	ldr	r3, [sp, #28]
 8015698:	437b      	muls	r3, r7
 801569a:	9307      	str	r3, [sp, #28]
 801569c:	e7e1      	b.n	8015662 <_strtod_l+0x21a>
 801569e:	2910      	cmp	r1, #16
 80156a0:	bfd8      	it	le
 80156a2:	437d      	mulle	r5, r7
 80156a4:	e7dd      	b.n	8015662 <_strtod_l+0x21a>
 80156a6:	2c10      	cmp	r4, #16
 80156a8:	bfdc      	itt	le
 80156aa:	210a      	movle	r1, #10
 80156ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80156b0:	e7e4      	b.n	801567c <_strtod_l+0x234>
 80156b2:	2301      	movs	r3, #1
 80156b4:	9304      	str	r3, [sp, #16]
 80156b6:	e781      	b.n	80155bc <_strtod_l+0x174>
 80156b8:	f04f 0c01 	mov.w	ip, #1
 80156bc:	1cb3      	adds	r3, r6, #2
 80156be:	931b      	str	r3, [sp, #108]	; 0x6c
 80156c0:	78b3      	ldrb	r3, [r6, #2]
 80156c2:	e78a      	b.n	80155da <_strtod_l+0x192>
 80156c4:	f04f 0c00 	mov.w	ip, #0
 80156c8:	e7f8      	b.n	80156bc <_strtod_l+0x274>
 80156ca:	bf00      	nop
 80156cc:	08018f5c 	.word	0x08018f5c
 80156d0:	7ff00000 	.word	0x7ff00000
 80156d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156d6:	1c5f      	adds	r7, r3, #1
 80156d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80156da:	785b      	ldrb	r3, [r3, #1]
 80156dc:	2b30      	cmp	r3, #48	; 0x30
 80156de:	d0f9      	beq.n	80156d4 <_strtod_l+0x28c>
 80156e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80156e4:	2f08      	cmp	r7, #8
 80156e6:	f63f af7d 	bhi.w	80155e4 <_strtod_l+0x19c>
 80156ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80156ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156f0:	930a      	str	r3, [sp, #40]	; 0x28
 80156f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156f4:	1c5f      	adds	r7, r3, #1
 80156f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80156f8:	785b      	ldrb	r3, [r3, #1]
 80156fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80156fe:	f1b8 0f09 	cmp.w	r8, #9
 8015702:	d937      	bls.n	8015774 <_strtod_l+0x32c>
 8015704:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015706:	1a7f      	subs	r7, r7, r1
 8015708:	2f08      	cmp	r7, #8
 801570a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801570e:	dc37      	bgt.n	8015780 <_strtod_l+0x338>
 8015710:	45be      	cmp	lr, r7
 8015712:	bfa8      	it	ge
 8015714:	46be      	movge	lr, r7
 8015716:	f1bc 0f00 	cmp.w	ip, #0
 801571a:	d001      	beq.n	8015720 <_strtod_l+0x2d8>
 801571c:	f1ce 0e00 	rsb	lr, lr, #0
 8015720:	2c00      	cmp	r4, #0
 8015722:	d151      	bne.n	80157c8 <_strtod_l+0x380>
 8015724:	2800      	cmp	r0, #0
 8015726:	f47f aece 	bne.w	80154c6 <_strtod_l+0x7e>
 801572a:	9a06      	ldr	r2, [sp, #24]
 801572c:	2a00      	cmp	r2, #0
 801572e:	f47f aeca 	bne.w	80154c6 <_strtod_l+0x7e>
 8015732:	9a04      	ldr	r2, [sp, #16]
 8015734:	2a00      	cmp	r2, #0
 8015736:	f47f aee4 	bne.w	8015502 <_strtod_l+0xba>
 801573a:	2b4e      	cmp	r3, #78	; 0x4e
 801573c:	d027      	beq.n	801578e <_strtod_l+0x346>
 801573e:	dc21      	bgt.n	8015784 <_strtod_l+0x33c>
 8015740:	2b49      	cmp	r3, #73	; 0x49
 8015742:	f47f aede 	bne.w	8015502 <_strtod_l+0xba>
 8015746:	49a0      	ldr	r1, [pc, #640]	; (80159c8 <_strtod_l+0x580>)
 8015748:	a81b      	add	r0, sp, #108	; 0x6c
 801574a:	f001 fdf7 	bl	801733c <__match>
 801574e:	2800      	cmp	r0, #0
 8015750:	f43f aed7 	beq.w	8015502 <_strtod_l+0xba>
 8015754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015756:	499d      	ldr	r1, [pc, #628]	; (80159cc <_strtod_l+0x584>)
 8015758:	3b01      	subs	r3, #1
 801575a:	a81b      	add	r0, sp, #108	; 0x6c
 801575c:	931b      	str	r3, [sp, #108]	; 0x6c
 801575e:	f001 fded 	bl	801733c <__match>
 8015762:	b910      	cbnz	r0, 801576a <_strtod_l+0x322>
 8015764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015766:	3301      	adds	r3, #1
 8015768:	931b      	str	r3, [sp, #108]	; 0x6c
 801576a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80159e0 <_strtod_l+0x598>
 801576e:	f04f 0a00 	mov.w	sl, #0
 8015772:	e6a8      	b.n	80154c6 <_strtod_l+0x7e>
 8015774:	210a      	movs	r1, #10
 8015776:	fb01 3e0e 	mla	lr, r1, lr, r3
 801577a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801577e:	e7b8      	b.n	80156f2 <_strtod_l+0x2aa>
 8015780:	46be      	mov	lr, r7
 8015782:	e7c8      	b.n	8015716 <_strtod_l+0x2ce>
 8015784:	2b69      	cmp	r3, #105	; 0x69
 8015786:	d0de      	beq.n	8015746 <_strtod_l+0x2fe>
 8015788:	2b6e      	cmp	r3, #110	; 0x6e
 801578a:	f47f aeba 	bne.w	8015502 <_strtod_l+0xba>
 801578e:	4990      	ldr	r1, [pc, #576]	; (80159d0 <_strtod_l+0x588>)
 8015790:	a81b      	add	r0, sp, #108	; 0x6c
 8015792:	f001 fdd3 	bl	801733c <__match>
 8015796:	2800      	cmp	r0, #0
 8015798:	f43f aeb3 	beq.w	8015502 <_strtod_l+0xba>
 801579c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801579e:	781b      	ldrb	r3, [r3, #0]
 80157a0:	2b28      	cmp	r3, #40	; 0x28
 80157a2:	d10e      	bne.n	80157c2 <_strtod_l+0x37a>
 80157a4:	aa1e      	add	r2, sp, #120	; 0x78
 80157a6:	498b      	ldr	r1, [pc, #556]	; (80159d4 <_strtod_l+0x58c>)
 80157a8:	a81b      	add	r0, sp, #108	; 0x6c
 80157aa:	f001 fddb 	bl	8017364 <__hexnan>
 80157ae:	2805      	cmp	r0, #5
 80157b0:	d107      	bne.n	80157c2 <_strtod_l+0x37a>
 80157b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80157b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80157b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80157bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80157c0:	e681      	b.n	80154c6 <_strtod_l+0x7e>
 80157c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80159e8 <_strtod_l+0x5a0>
 80157c6:	e7d2      	b.n	801576e <_strtod_l+0x326>
 80157c8:	ebae 0302 	sub.w	r3, lr, r2
 80157cc:	9306      	str	r3, [sp, #24]
 80157ce:	9b05      	ldr	r3, [sp, #20]
 80157d0:	9807      	ldr	r0, [sp, #28]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	bf08      	it	eq
 80157d6:	4623      	moveq	r3, r4
 80157d8:	2c10      	cmp	r4, #16
 80157da:	9305      	str	r3, [sp, #20]
 80157dc:	46a0      	mov	r8, r4
 80157de:	bfa8      	it	ge
 80157e0:	f04f 0810 	movge.w	r8, #16
 80157e4:	f7ea fea6 	bl	8000534 <__aeabi_ui2d>
 80157e8:	2c09      	cmp	r4, #9
 80157ea:	4682      	mov	sl, r0
 80157ec:	468b      	mov	fp, r1
 80157ee:	dc13      	bgt.n	8015818 <_strtod_l+0x3d0>
 80157f0:	9b06      	ldr	r3, [sp, #24]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	f43f ae67 	beq.w	80154c6 <_strtod_l+0x7e>
 80157f8:	9b06      	ldr	r3, [sp, #24]
 80157fa:	dd7a      	ble.n	80158f2 <_strtod_l+0x4aa>
 80157fc:	2b16      	cmp	r3, #22
 80157fe:	dc61      	bgt.n	80158c4 <_strtod_l+0x47c>
 8015800:	4a75      	ldr	r2, [pc, #468]	; (80159d8 <_strtod_l+0x590>)
 8015802:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015806:	e9de 0100 	ldrd	r0, r1, [lr]
 801580a:	4652      	mov	r2, sl
 801580c:	465b      	mov	r3, fp
 801580e:	f7ea ff0b 	bl	8000628 <__aeabi_dmul>
 8015812:	4682      	mov	sl, r0
 8015814:	468b      	mov	fp, r1
 8015816:	e656      	b.n	80154c6 <_strtod_l+0x7e>
 8015818:	4b6f      	ldr	r3, [pc, #444]	; (80159d8 <_strtod_l+0x590>)
 801581a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801581e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015822:	f7ea ff01 	bl	8000628 <__aeabi_dmul>
 8015826:	4606      	mov	r6, r0
 8015828:	4628      	mov	r0, r5
 801582a:	460f      	mov	r7, r1
 801582c:	f7ea fe82 	bl	8000534 <__aeabi_ui2d>
 8015830:	4602      	mov	r2, r0
 8015832:	460b      	mov	r3, r1
 8015834:	4630      	mov	r0, r6
 8015836:	4639      	mov	r1, r7
 8015838:	f7ea fd40 	bl	80002bc <__adddf3>
 801583c:	2c0f      	cmp	r4, #15
 801583e:	4682      	mov	sl, r0
 8015840:	468b      	mov	fp, r1
 8015842:	ddd5      	ble.n	80157f0 <_strtod_l+0x3a8>
 8015844:	9b06      	ldr	r3, [sp, #24]
 8015846:	eba4 0808 	sub.w	r8, r4, r8
 801584a:	4498      	add	r8, r3
 801584c:	f1b8 0f00 	cmp.w	r8, #0
 8015850:	f340 8096 	ble.w	8015980 <_strtod_l+0x538>
 8015854:	f018 030f 	ands.w	r3, r8, #15
 8015858:	d00a      	beq.n	8015870 <_strtod_l+0x428>
 801585a:	495f      	ldr	r1, [pc, #380]	; (80159d8 <_strtod_l+0x590>)
 801585c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015860:	4652      	mov	r2, sl
 8015862:	465b      	mov	r3, fp
 8015864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015868:	f7ea fede 	bl	8000628 <__aeabi_dmul>
 801586c:	4682      	mov	sl, r0
 801586e:	468b      	mov	fp, r1
 8015870:	f038 080f 	bics.w	r8, r8, #15
 8015874:	d073      	beq.n	801595e <_strtod_l+0x516>
 8015876:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801587a:	dd47      	ble.n	801590c <_strtod_l+0x4c4>
 801587c:	2400      	movs	r4, #0
 801587e:	46a0      	mov	r8, r4
 8015880:	9407      	str	r4, [sp, #28]
 8015882:	9405      	str	r4, [sp, #20]
 8015884:	2322      	movs	r3, #34	; 0x22
 8015886:	f8df b158 	ldr.w	fp, [pc, #344]	; 80159e0 <_strtod_l+0x598>
 801588a:	f8c9 3000 	str.w	r3, [r9]
 801588e:	f04f 0a00 	mov.w	sl, #0
 8015892:	9b07      	ldr	r3, [sp, #28]
 8015894:	2b00      	cmp	r3, #0
 8015896:	f43f ae16 	beq.w	80154c6 <_strtod_l+0x7e>
 801589a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801589c:	4648      	mov	r0, r9
 801589e:	f001 fe6c 	bl	801757a <_Bfree>
 80158a2:	9905      	ldr	r1, [sp, #20]
 80158a4:	4648      	mov	r0, r9
 80158a6:	f001 fe68 	bl	801757a <_Bfree>
 80158aa:	4641      	mov	r1, r8
 80158ac:	4648      	mov	r0, r9
 80158ae:	f001 fe64 	bl	801757a <_Bfree>
 80158b2:	9907      	ldr	r1, [sp, #28]
 80158b4:	4648      	mov	r0, r9
 80158b6:	f001 fe60 	bl	801757a <_Bfree>
 80158ba:	4621      	mov	r1, r4
 80158bc:	4648      	mov	r0, r9
 80158be:	f001 fe5c 	bl	801757a <_Bfree>
 80158c2:	e600      	b.n	80154c6 <_strtod_l+0x7e>
 80158c4:	9a06      	ldr	r2, [sp, #24]
 80158c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80158ca:	4293      	cmp	r3, r2
 80158cc:	dbba      	blt.n	8015844 <_strtod_l+0x3fc>
 80158ce:	4d42      	ldr	r5, [pc, #264]	; (80159d8 <_strtod_l+0x590>)
 80158d0:	f1c4 040f 	rsb	r4, r4, #15
 80158d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80158d8:	4652      	mov	r2, sl
 80158da:	465b      	mov	r3, fp
 80158dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158e0:	f7ea fea2 	bl	8000628 <__aeabi_dmul>
 80158e4:	9b06      	ldr	r3, [sp, #24]
 80158e6:	1b1c      	subs	r4, r3, r4
 80158e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80158ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80158f0:	e78d      	b.n	801580e <_strtod_l+0x3c6>
 80158f2:	f113 0f16 	cmn.w	r3, #22
 80158f6:	dba5      	blt.n	8015844 <_strtod_l+0x3fc>
 80158f8:	4a37      	ldr	r2, [pc, #220]	; (80159d8 <_strtod_l+0x590>)
 80158fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80158fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015902:	4650      	mov	r0, sl
 8015904:	4659      	mov	r1, fp
 8015906:	f7ea ffb9 	bl	800087c <__aeabi_ddiv>
 801590a:	e782      	b.n	8015812 <_strtod_l+0x3ca>
 801590c:	2300      	movs	r3, #0
 801590e:	4e33      	ldr	r6, [pc, #204]	; (80159dc <_strtod_l+0x594>)
 8015910:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015914:	4650      	mov	r0, sl
 8015916:	4659      	mov	r1, fp
 8015918:	461d      	mov	r5, r3
 801591a:	f1b8 0f01 	cmp.w	r8, #1
 801591e:	dc21      	bgt.n	8015964 <_strtod_l+0x51c>
 8015920:	b10b      	cbz	r3, 8015926 <_strtod_l+0x4de>
 8015922:	4682      	mov	sl, r0
 8015924:	468b      	mov	fp, r1
 8015926:	4b2d      	ldr	r3, [pc, #180]	; (80159dc <_strtod_l+0x594>)
 8015928:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801592c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015930:	4652      	mov	r2, sl
 8015932:	465b      	mov	r3, fp
 8015934:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015938:	f7ea fe76 	bl	8000628 <__aeabi_dmul>
 801593c:	4b28      	ldr	r3, [pc, #160]	; (80159e0 <_strtod_l+0x598>)
 801593e:	460a      	mov	r2, r1
 8015940:	400b      	ands	r3, r1
 8015942:	4928      	ldr	r1, [pc, #160]	; (80159e4 <_strtod_l+0x59c>)
 8015944:	428b      	cmp	r3, r1
 8015946:	4682      	mov	sl, r0
 8015948:	d898      	bhi.n	801587c <_strtod_l+0x434>
 801594a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801594e:	428b      	cmp	r3, r1
 8015950:	bf86      	itte	hi
 8015952:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80159ec <_strtod_l+0x5a4>
 8015956:	f04f 3aff 	movhi.w	sl, #4294967295
 801595a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801595e:	2300      	movs	r3, #0
 8015960:	9304      	str	r3, [sp, #16]
 8015962:	e077      	b.n	8015a54 <_strtod_l+0x60c>
 8015964:	f018 0f01 	tst.w	r8, #1
 8015968:	d006      	beq.n	8015978 <_strtod_l+0x530>
 801596a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015972:	f7ea fe59 	bl	8000628 <__aeabi_dmul>
 8015976:	2301      	movs	r3, #1
 8015978:	3501      	adds	r5, #1
 801597a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801597e:	e7cc      	b.n	801591a <_strtod_l+0x4d2>
 8015980:	d0ed      	beq.n	801595e <_strtod_l+0x516>
 8015982:	f1c8 0800 	rsb	r8, r8, #0
 8015986:	f018 020f 	ands.w	r2, r8, #15
 801598a:	d00a      	beq.n	80159a2 <_strtod_l+0x55a>
 801598c:	4b12      	ldr	r3, [pc, #72]	; (80159d8 <_strtod_l+0x590>)
 801598e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015992:	4650      	mov	r0, sl
 8015994:	4659      	mov	r1, fp
 8015996:	e9d3 2300 	ldrd	r2, r3, [r3]
 801599a:	f7ea ff6f 	bl	800087c <__aeabi_ddiv>
 801599e:	4682      	mov	sl, r0
 80159a0:	468b      	mov	fp, r1
 80159a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80159a6:	d0da      	beq.n	801595e <_strtod_l+0x516>
 80159a8:	f1b8 0f1f 	cmp.w	r8, #31
 80159ac:	dd20      	ble.n	80159f0 <_strtod_l+0x5a8>
 80159ae:	2400      	movs	r4, #0
 80159b0:	46a0      	mov	r8, r4
 80159b2:	9407      	str	r4, [sp, #28]
 80159b4:	9405      	str	r4, [sp, #20]
 80159b6:	2322      	movs	r3, #34	; 0x22
 80159b8:	f04f 0a00 	mov.w	sl, #0
 80159bc:	f04f 0b00 	mov.w	fp, #0
 80159c0:	f8c9 3000 	str.w	r3, [r9]
 80159c4:	e765      	b.n	8015892 <_strtod_l+0x44a>
 80159c6:	bf00      	nop
 80159c8:	08018f29 	.word	0x08018f29
 80159cc:	08018fb3 	.word	0x08018fb3
 80159d0:	08018f31 	.word	0x08018f31
 80159d4:	08018f70 	.word	0x08018f70
 80159d8:	08018ff0 	.word	0x08018ff0
 80159dc:	08018fc8 	.word	0x08018fc8
 80159e0:	7ff00000 	.word	0x7ff00000
 80159e4:	7ca00000 	.word	0x7ca00000
 80159e8:	fff80000 	.word	0xfff80000
 80159ec:	7fefffff 	.word	0x7fefffff
 80159f0:	f018 0310 	ands.w	r3, r8, #16
 80159f4:	bf18      	it	ne
 80159f6:	236a      	movne	r3, #106	; 0x6a
 80159f8:	4da0      	ldr	r5, [pc, #640]	; (8015c7c <_strtod_l+0x834>)
 80159fa:	9304      	str	r3, [sp, #16]
 80159fc:	4650      	mov	r0, sl
 80159fe:	4659      	mov	r1, fp
 8015a00:	2300      	movs	r3, #0
 8015a02:	f1b8 0f00 	cmp.w	r8, #0
 8015a06:	f300 810a 	bgt.w	8015c1e <_strtod_l+0x7d6>
 8015a0a:	b10b      	cbz	r3, 8015a10 <_strtod_l+0x5c8>
 8015a0c:	4682      	mov	sl, r0
 8015a0e:	468b      	mov	fp, r1
 8015a10:	9b04      	ldr	r3, [sp, #16]
 8015a12:	b1bb      	cbz	r3, 8015a44 <_strtod_l+0x5fc>
 8015a14:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015a18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	4659      	mov	r1, fp
 8015a20:	dd10      	ble.n	8015a44 <_strtod_l+0x5fc>
 8015a22:	2b1f      	cmp	r3, #31
 8015a24:	f340 8107 	ble.w	8015c36 <_strtod_l+0x7ee>
 8015a28:	2b34      	cmp	r3, #52	; 0x34
 8015a2a:	bfde      	ittt	le
 8015a2c:	3b20      	suble	r3, #32
 8015a2e:	f04f 32ff 	movle.w	r2, #4294967295
 8015a32:	fa02 f303 	lslle.w	r3, r2, r3
 8015a36:	f04f 0a00 	mov.w	sl, #0
 8015a3a:	bfcc      	ite	gt
 8015a3c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015a40:	ea03 0b01 	andle.w	fp, r3, r1
 8015a44:	2200      	movs	r2, #0
 8015a46:	2300      	movs	r3, #0
 8015a48:	4650      	mov	r0, sl
 8015a4a:	4659      	mov	r1, fp
 8015a4c:	f7eb f854 	bl	8000af8 <__aeabi_dcmpeq>
 8015a50:	2800      	cmp	r0, #0
 8015a52:	d1ac      	bne.n	80159ae <_strtod_l+0x566>
 8015a54:	9b07      	ldr	r3, [sp, #28]
 8015a56:	9300      	str	r3, [sp, #0]
 8015a58:	9a05      	ldr	r2, [sp, #20]
 8015a5a:	9908      	ldr	r1, [sp, #32]
 8015a5c:	4623      	mov	r3, r4
 8015a5e:	4648      	mov	r0, r9
 8015a60:	f001 fddd 	bl	801761e <__s2b>
 8015a64:	9007      	str	r0, [sp, #28]
 8015a66:	2800      	cmp	r0, #0
 8015a68:	f43f af08 	beq.w	801587c <_strtod_l+0x434>
 8015a6c:	9a06      	ldr	r2, [sp, #24]
 8015a6e:	9b06      	ldr	r3, [sp, #24]
 8015a70:	2a00      	cmp	r2, #0
 8015a72:	f1c3 0300 	rsb	r3, r3, #0
 8015a76:	bfa8      	it	ge
 8015a78:	2300      	movge	r3, #0
 8015a7a:	930e      	str	r3, [sp, #56]	; 0x38
 8015a7c:	2400      	movs	r4, #0
 8015a7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015a82:	9316      	str	r3, [sp, #88]	; 0x58
 8015a84:	46a0      	mov	r8, r4
 8015a86:	9b07      	ldr	r3, [sp, #28]
 8015a88:	4648      	mov	r0, r9
 8015a8a:	6859      	ldr	r1, [r3, #4]
 8015a8c:	f001 fd41 	bl	8017512 <_Balloc>
 8015a90:	9005      	str	r0, [sp, #20]
 8015a92:	2800      	cmp	r0, #0
 8015a94:	f43f aef6 	beq.w	8015884 <_strtod_l+0x43c>
 8015a98:	9b07      	ldr	r3, [sp, #28]
 8015a9a:	691a      	ldr	r2, [r3, #16]
 8015a9c:	3202      	adds	r2, #2
 8015a9e:	f103 010c 	add.w	r1, r3, #12
 8015aa2:	0092      	lsls	r2, r2, #2
 8015aa4:	300c      	adds	r0, #12
 8015aa6:	f001 fd29 	bl	80174fc <memcpy>
 8015aaa:	aa1e      	add	r2, sp, #120	; 0x78
 8015aac:	a91d      	add	r1, sp, #116	; 0x74
 8015aae:	ec4b ab10 	vmov	d0, sl, fp
 8015ab2:	4648      	mov	r0, r9
 8015ab4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015ab8:	f002 f86c 	bl	8017b94 <__d2b>
 8015abc:	901c      	str	r0, [sp, #112]	; 0x70
 8015abe:	2800      	cmp	r0, #0
 8015ac0:	f43f aee0 	beq.w	8015884 <_strtod_l+0x43c>
 8015ac4:	2101      	movs	r1, #1
 8015ac6:	4648      	mov	r0, r9
 8015ac8:	f001 fe35 	bl	8017736 <__i2b>
 8015acc:	4680      	mov	r8, r0
 8015ace:	2800      	cmp	r0, #0
 8015ad0:	f43f aed8 	beq.w	8015884 <_strtod_l+0x43c>
 8015ad4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015ad6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015ad8:	2e00      	cmp	r6, #0
 8015ada:	bfab      	itete	ge
 8015adc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015ade:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015ae0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015ae2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015ae4:	bfac      	ite	ge
 8015ae6:	18f7      	addge	r7, r6, r3
 8015ae8:	1b9d      	sublt	r5, r3, r6
 8015aea:	9b04      	ldr	r3, [sp, #16]
 8015aec:	1af6      	subs	r6, r6, r3
 8015aee:	4416      	add	r6, r2
 8015af0:	4b63      	ldr	r3, [pc, #396]	; (8015c80 <_strtod_l+0x838>)
 8015af2:	3e01      	subs	r6, #1
 8015af4:	429e      	cmp	r6, r3
 8015af6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015afa:	f280 80af 	bge.w	8015c5c <_strtod_l+0x814>
 8015afe:	1b9b      	subs	r3, r3, r6
 8015b00:	2b1f      	cmp	r3, #31
 8015b02:	eba2 0203 	sub.w	r2, r2, r3
 8015b06:	f04f 0101 	mov.w	r1, #1
 8015b0a:	f300 809b 	bgt.w	8015c44 <_strtod_l+0x7fc>
 8015b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8015b12:	930f      	str	r3, [sp, #60]	; 0x3c
 8015b14:	2300      	movs	r3, #0
 8015b16:	930a      	str	r3, [sp, #40]	; 0x28
 8015b18:	18be      	adds	r6, r7, r2
 8015b1a:	9b04      	ldr	r3, [sp, #16]
 8015b1c:	42b7      	cmp	r7, r6
 8015b1e:	4415      	add	r5, r2
 8015b20:	441d      	add	r5, r3
 8015b22:	463b      	mov	r3, r7
 8015b24:	bfa8      	it	ge
 8015b26:	4633      	movge	r3, r6
 8015b28:	42ab      	cmp	r3, r5
 8015b2a:	bfa8      	it	ge
 8015b2c:	462b      	movge	r3, r5
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	bfc2      	ittt	gt
 8015b32:	1af6      	subgt	r6, r6, r3
 8015b34:	1aed      	subgt	r5, r5, r3
 8015b36:	1aff      	subgt	r7, r7, r3
 8015b38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b3a:	b1bb      	cbz	r3, 8015b6c <_strtod_l+0x724>
 8015b3c:	4641      	mov	r1, r8
 8015b3e:	461a      	mov	r2, r3
 8015b40:	4648      	mov	r0, r9
 8015b42:	f001 fe97 	bl	8017874 <__pow5mult>
 8015b46:	4680      	mov	r8, r0
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	f43f ae9b 	beq.w	8015884 <_strtod_l+0x43c>
 8015b4e:	4601      	mov	r1, r0
 8015b50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015b52:	4648      	mov	r0, r9
 8015b54:	f001 fdf8 	bl	8017748 <__multiply>
 8015b58:	900c      	str	r0, [sp, #48]	; 0x30
 8015b5a:	2800      	cmp	r0, #0
 8015b5c:	f43f ae92 	beq.w	8015884 <_strtod_l+0x43c>
 8015b60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015b62:	4648      	mov	r0, r9
 8015b64:	f001 fd09 	bl	801757a <_Bfree>
 8015b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015b6a:	931c      	str	r3, [sp, #112]	; 0x70
 8015b6c:	2e00      	cmp	r6, #0
 8015b6e:	dc7a      	bgt.n	8015c66 <_strtod_l+0x81e>
 8015b70:	9b06      	ldr	r3, [sp, #24]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	dd08      	ble.n	8015b88 <_strtod_l+0x740>
 8015b76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015b78:	9905      	ldr	r1, [sp, #20]
 8015b7a:	4648      	mov	r0, r9
 8015b7c:	f001 fe7a 	bl	8017874 <__pow5mult>
 8015b80:	9005      	str	r0, [sp, #20]
 8015b82:	2800      	cmp	r0, #0
 8015b84:	f43f ae7e 	beq.w	8015884 <_strtod_l+0x43c>
 8015b88:	2d00      	cmp	r5, #0
 8015b8a:	dd08      	ble.n	8015b9e <_strtod_l+0x756>
 8015b8c:	462a      	mov	r2, r5
 8015b8e:	9905      	ldr	r1, [sp, #20]
 8015b90:	4648      	mov	r0, r9
 8015b92:	f001 febd 	bl	8017910 <__lshift>
 8015b96:	9005      	str	r0, [sp, #20]
 8015b98:	2800      	cmp	r0, #0
 8015b9a:	f43f ae73 	beq.w	8015884 <_strtod_l+0x43c>
 8015b9e:	2f00      	cmp	r7, #0
 8015ba0:	dd08      	ble.n	8015bb4 <_strtod_l+0x76c>
 8015ba2:	4641      	mov	r1, r8
 8015ba4:	463a      	mov	r2, r7
 8015ba6:	4648      	mov	r0, r9
 8015ba8:	f001 feb2 	bl	8017910 <__lshift>
 8015bac:	4680      	mov	r8, r0
 8015bae:	2800      	cmp	r0, #0
 8015bb0:	f43f ae68 	beq.w	8015884 <_strtod_l+0x43c>
 8015bb4:	9a05      	ldr	r2, [sp, #20]
 8015bb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015bb8:	4648      	mov	r0, r9
 8015bba:	f001 ff17 	bl	80179ec <__mdiff>
 8015bbe:	4604      	mov	r4, r0
 8015bc0:	2800      	cmp	r0, #0
 8015bc2:	f43f ae5f 	beq.w	8015884 <_strtod_l+0x43c>
 8015bc6:	68c3      	ldr	r3, [r0, #12]
 8015bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8015bca:	2300      	movs	r3, #0
 8015bcc:	60c3      	str	r3, [r0, #12]
 8015bce:	4641      	mov	r1, r8
 8015bd0:	f001 fef2 	bl	80179b8 <__mcmp>
 8015bd4:	2800      	cmp	r0, #0
 8015bd6:	da55      	bge.n	8015c84 <_strtod_l+0x83c>
 8015bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bda:	b9e3      	cbnz	r3, 8015c16 <_strtod_l+0x7ce>
 8015bdc:	f1ba 0f00 	cmp.w	sl, #0
 8015be0:	d119      	bne.n	8015c16 <_strtod_l+0x7ce>
 8015be2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015be6:	b9b3      	cbnz	r3, 8015c16 <_strtod_l+0x7ce>
 8015be8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015bec:	0d1b      	lsrs	r3, r3, #20
 8015bee:	051b      	lsls	r3, r3, #20
 8015bf0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015bf4:	d90f      	bls.n	8015c16 <_strtod_l+0x7ce>
 8015bf6:	6963      	ldr	r3, [r4, #20]
 8015bf8:	b913      	cbnz	r3, 8015c00 <_strtod_l+0x7b8>
 8015bfa:	6923      	ldr	r3, [r4, #16]
 8015bfc:	2b01      	cmp	r3, #1
 8015bfe:	dd0a      	ble.n	8015c16 <_strtod_l+0x7ce>
 8015c00:	4621      	mov	r1, r4
 8015c02:	2201      	movs	r2, #1
 8015c04:	4648      	mov	r0, r9
 8015c06:	f001 fe83 	bl	8017910 <__lshift>
 8015c0a:	4641      	mov	r1, r8
 8015c0c:	4604      	mov	r4, r0
 8015c0e:	f001 fed3 	bl	80179b8 <__mcmp>
 8015c12:	2800      	cmp	r0, #0
 8015c14:	dc67      	bgt.n	8015ce6 <_strtod_l+0x89e>
 8015c16:	9b04      	ldr	r3, [sp, #16]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d171      	bne.n	8015d00 <_strtod_l+0x8b8>
 8015c1c:	e63d      	b.n	801589a <_strtod_l+0x452>
 8015c1e:	f018 0f01 	tst.w	r8, #1
 8015c22:	d004      	beq.n	8015c2e <_strtod_l+0x7e6>
 8015c24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015c28:	f7ea fcfe 	bl	8000628 <__aeabi_dmul>
 8015c2c:	2301      	movs	r3, #1
 8015c2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015c32:	3508      	adds	r5, #8
 8015c34:	e6e5      	b.n	8015a02 <_strtod_l+0x5ba>
 8015c36:	f04f 32ff 	mov.w	r2, #4294967295
 8015c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8015c3e:	ea03 0a0a 	and.w	sl, r3, sl
 8015c42:	e6ff      	b.n	8015a44 <_strtod_l+0x5fc>
 8015c44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015c48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015c4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015c50:	36e2      	adds	r6, #226	; 0xe2
 8015c52:	fa01 f306 	lsl.w	r3, r1, r6
 8015c56:	930a      	str	r3, [sp, #40]	; 0x28
 8015c58:	910f      	str	r1, [sp, #60]	; 0x3c
 8015c5a:	e75d      	b.n	8015b18 <_strtod_l+0x6d0>
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8015c60:	2301      	movs	r3, #1
 8015c62:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c64:	e758      	b.n	8015b18 <_strtod_l+0x6d0>
 8015c66:	4632      	mov	r2, r6
 8015c68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015c6a:	4648      	mov	r0, r9
 8015c6c:	f001 fe50 	bl	8017910 <__lshift>
 8015c70:	901c      	str	r0, [sp, #112]	; 0x70
 8015c72:	2800      	cmp	r0, #0
 8015c74:	f47f af7c 	bne.w	8015b70 <_strtod_l+0x728>
 8015c78:	e604      	b.n	8015884 <_strtod_l+0x43c>
 8015c7a:	bf00      	nop
 8015c7c:	08018f88 	.word	0x08018f88
 8015c80:	fffffc02 	.word	0xfffffc02
 8015c84:	465d      	mov	r5, fp
 8015c86:	f040 8086 	bne.w	8015d96 <_strtod_l+0x94e>
 8015c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015c90:	b32a      	cbz	r2, 8015cde <_strtod_l+0x896>
 8015c92:	4aaf      	ldr	r2, [pc, #700]	; (8015f50 <_strtod_l+0xb08>)
 8015c94:	4293      	cmp	r3, r2
 8015c96:	d153      	bne.n	8015d40 <_strtod_l+0x8f8>
 8015c98:	9b04      	ldr	r3, [sp, #16]
 8015c9a:	4650      	mov	r0, sl
 8015c9c:	b1d3      	cbz	r3, 8015cd4 <_strtod_l+0x88c>
 8015c9e:	4aad      	ldr	r2, [pc, #692]	; (8015f54 <_strtod_l+0xb0c>)
 8015ca0:	402a      	ands	r2, r5
 8015ca2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8015caa:	d816      	bhi.n	8015cda <_strtod_l+0x892>
 8015cac:	0d12      	lsrs	r2, r2, #20
 8015cae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8015cb6:	4298      	cmp	r0, r3
 8015cb8:	d142      	bne.n	8015d40 <_strtod_l+0x8f8>
 8015cba:	4ba7      	ldr	r3, [pc, #668]	; (8015f58 <_strtod_l+0xb10>)
 8015cbc:	429d      	cmp	r5, r3
 8015cbe:	d102      	bne.n	8015cc6 <_strtod_l+0x87e>
 8015cc0:	3001      	adds	r0, #1
 8015cc2:	f43f addf 	beq.w	8015884 <_strtod_l+0x43c>
 8015cc6:	4ba3      	ldr	r3, [pc, #652]	; (8015f54 <_strtod_l+0xb0c>)
 8015cc8:	402b      	ands	r3, r5
 8015cca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015cce:	f04f 0a00 	mov.w	sl, #0
 8015cd2:	e7a0      	b.n	8015c16 <_strtod_l+0x7ce>
 8015cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8015cd8:	e7ed      	b.n	8015cb6 <_strtod_l+0x86e>
 8015cda:	460b      	mov	r3, r1
 8015cdc:	e7eb      	b.n	8015cb6 <_strtod_l+0x86e>
 8015cde:	bb7b      	cbnz	r3, 8015d40 <_strtod_l+0x8f8>
 8015ce0:	f1ba 0f00 	cmp.w	sl, #0
 8015ce4:	d12c      	bne.n	8015d40 <_strtod_l+0x8f8>
 8015ce6:	9904      	ldr	r1, [sp, #16]
 8015ce8:	4a9a      	ldr	r2, [pc, #616]	; (8015f54 <_strtod_l+0xb0c>)
 8015cea:	465b      	mov	r3, fp
 8015cec:	b1f1      	cbz	r1, 8015d2c <_strtod_l+0x8e4>
 8015cee:	ea02 010b 	and.w	r1, r2, fp
 8015cf2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015cf6:	dc19      	bgt.n	8015d2c <_strtod_l+0x8e4>
 8015cf8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015cfc:	f77f ae5b 	ble.w	80159b6 <_strtod_l+0x56e>
 8015d00:	4a96      	ldr	r2, [pc, #600]	; (8015f5c <_strtod_l+0xb14>)
 8015d02:	2300      	movs	r3, #0
 8015d04:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015d08:	4650      	mov	r0, sl
 8015d0a:	4659      	mov	r1, fp
 8015d0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015d10:	f7ea fc8a 	bl	8000628 <__aeabi_dmul>
 8015d14:	4682      	mov	sl, r0
 8015d16:	468b      	mov	fp, r1
 8015d18:	2900      	cmp	r1, #0
 8015d1a:	f47f adbe 	bne.w	801589a <_strtod_l+0x452>
 8015d1e:	2800      	cmp	r0, #0
 8015d20:	f47f adbb 	bne.w	801589a <_strtod_l+0x452>
 8015d24:	2322      	movs	r3, #34	; 0x22
 8015d26:	f8c9 3000 	str.w	r3, [r9]
 8015d2a:	e5b6      	b.n	801589a <_strtod_l+0x452>
 8015d2c:	4013      	ands	r3, r2
 8015d2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015d32:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015d36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015d3a:	f04f 3aff 	mov.w	sl, #4294967295
 8015d3e:	e76a      	b.n	8015c16 <_strtod_l+0x7ce>
 8015d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d42:	b193      	cbz	r3, 8015d6a <_strtod_l+0x922>
 8015d44:	422b      	tst	r3, r5
 8015d46:	f43f af66 	beq.w	8015c16 <_strtod_l+0x7ce>
 8015d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d4c:	9a04      	ldr	r2, [sp, #16]
 8015d4e:	4650      	mov	r0, sl
 8015d50:	4659      	mov	r1, fp
 8015d52:	b173      	cbz	r3, 8015d72 <_strtod_l+0x92a>
 8015d54:	f7ff fb5a 	bl	801540c <sulp>
 8015d58:	4602      	mov	r2, r0
 8015d5a:	460b      	mov	r3, r1
 8015d5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015d60:	f7ea faac 	bl	80002bc <__adddf3>
 8015d64:	4682      	mov	sl, r0
 8015d66:	468b      	mov	fp, r1
 8015d68:	e755      	b.n	8015c16 <_strtod_l+0x7ce>
 8015d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d6c:	ea13 0f0a 	tst.w	r3, sl
 8015d70:	e7e9      	b.n	8015d46 <_strtod_l+0x8fe>
 8015d72:	f7ff fb4b 	bl	801540c <sulp>
 8015d76:	4602      	mov	r2, r0
 8015d78:	460b      	mov	r3, r1
 8015d7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015d7e:	f7ea fa9b 	bl	80002b8 <__aeabi_dsub>
 8015d82:	2200      	movs	r2, #0
 8015d84:	2300      	movs	r3, #0
 8015d86:	4682      	mov	sl, r0
 8015d88:	468b      	mov	fp, r1
 8015d8a:	f7ea feb5 	bl	8000af8 <__aeabi_dcmpeq>
 8015d8e:	2800      	cmp	r0, #0
 8015d90:	f47f ae11 	bne.w	80159b6 <_strtod_l+0x56e>
 8015d94:	e73f      	b.n	8015c16 <_strtod_l+0x7ce>
 8015d96:	4641      	mov	r1, r8
 8015d98:	4620      	mov	r0, r4
 8015d9a:	f001 ff4a 	bl	8017c32 <__ratio>
 8015d9e:	ec57 6b10 	vmov	r6, r7, d0
 8015da2:	2200      	movs	r2, #0
 8015da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015da8:	ee10 0a10 	vmov	r0, s0
 8015dac:	4639      	mov	r1, r7
 8015dae:	f7ea feb7 	bl	8000b20 <__aeabi_dcmple>
 8015db2:	2800      	cmp	r0, #0
 8015db4:	d077      	beq.n	8015ea6 <_strtod_l+0xa5e>
 8015db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d04a      	beq.n	8015e52 <_strtod_l+0xa0a>
 8015dbc:	4b68      	ldr	r3, [pc, #416]	; (8015f60 <_strtod_l+0xb18>)
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015dc4:	4f66      	ldr	r7, [pc, #408]	; (8015f60 <_strtod_l+0xb18>)
 8015dc6:	2600      	movs	r6, #0
 8015dc8:	4b62      	ldr	r3, [pc, #392]	; (8015f54 <_strtod_l+0xb0c>)
 8015dca:	402b      	ands	r3, r5
 8015dcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8015dce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015dd0:	4b64      	ldr	r3, [pc, #400]	; (8015f64 <_strtod_l+0xb1c>)
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	f040 80ce 	bne.w	8015f74 <_strtod_l+0xb2c>
 8015dd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015ddc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015de0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015de4:	ec4b ab10 	vmov	d0, sl, fp
 8015de8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015dec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015df0:	f001 fe5a 	bl	8017aa8 <__ulp>
 8015df4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015df8:	ec53 2b10 	vmov	r2, r3, d0
 8015dfc:	f7ea fc14 	bl	8000628 <__aeabi_dmul>
 8015e00:	4652      	mov	r2, sl
 8015e02:	465b      	mov	r3, fp
 8015e04:	f7ea fa5a 	bl	80002bc <__adddf3>
 8015e08:	460b      	mov	r3, r1
 8015e0a:	4952      	ldr	r1, [pc, #328]	; (8015f54 <_strtod_l+0xb0c>)
 8015e0c:	4a56      	ldr	r2, [pc, #344]	; (8015f68 <_strtod_l+0xb20>)
 8015e0e:	4019      	ands	r1, r3
 8015e10:	4291      	cmp	r1, r2
 8015e12:	4682      	mov	sl, r0
 8015e14:	d95b      	bls.n	8015ece <_strtod_l+0xa86>
 8015e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	d103      	bne.n	8015e28 <_strtod_l+0x9e0>
 8015e20:	9b08      	ldr	r3, [sp, #32]
 8015e22:	3301      	adds	r3, #1
 8015e24:	f43f ad2e 	beq.w	8015884 <_strtod_l+0x43c>
 8015e28:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8015f58 <_strtod_l+0xb10>
 8015e2c:	f04f 3aff 	mov.w	sl, #4294967295
 8015e30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e32:	4648      	mov	r0, r9
 8015e34:	f001 fba1 	bl	801757a <_Bfree>
 8015e38:	9905      	ldr	r1, [sp, #20]
 8015e3a:	4648      	mov	r0, r9
 8015e3c:	f001 fb9d 	bl	801757a <_Bfree>
 8015e40:	4641      	mov	r1, r8
 8015e42:	4648      	mov	r0, r9
 8015e44:	f001 fb99 	bl	801757a <_Bfree>
 8015e48:	4621      	mov	r1, r4
 8015e4a:	4648      	mov	r0, r9
 8015e4c:	f001 fb95 	bl	801757a <_Bfree>
 8015e50:	e619      	b.n	8015a86 <_strtod_l+0x63e>
 8015e52:	f1ba 0f00 	cmp.w	sl, #0
 8015e56:	d11a      	bne.n	8015e8e <_strtod_l+0xa46>
 8015e58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015e5c:	b9eb      	cbnz	r3, 8015e9a <_strtod_l+0xa52>
 8015e5e:	2200      	movs	r2, #0
 8015e60:	4b3f      	ldr	r3, [pc, #252]	; (8015f60 <_strtod_l+0xb18>)
 8015e62:	4630      	mov	r0, r6
 8015e64:	4639      	mov	r1, r7
 8015e66:	f7ea fe51 	bl	8000b0c <__aeabi_dcmplt>
 8015e6a:	b9c8      	cbnz	r0, 8015ea0 <_strtod_l+0xa58>
 8015e6c:	4630      	mov	r0, r6
 8015e6e:	4639      	mov	r1, r7
 8015e70:	2200      	movs	r2, #0
 8015e72:	4b3e      	ldr	r3, [pc, #248]	; (8015f6c <_strtod_l+0xb24>)
 8015e74:	f7ea fbd8 	bl	8000628 <__aeabi_dmul>
 8015e78:	4606      	mov	r6, r0
 8015e7a:	460f      	mov	r7, r1
 8015e7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015e80:	9618      	str	r6, [sp, #96]	; 0x60
 8015e82:	9319      	str	r3, [sp, #100]	; 0x64
 8015e84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015e88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015e8c:	e79c      	b.n	8015dc8 <_strtod_l+0x980>
 8015e8e:	f1ba 0f01 	cmp.w	sl, #1
 8015e92:	d102      	bne.n	8015e9a <_strtod_l+0xa52>
 8015e94:	2d00      	cmp	r5, #0
 8015e96:	f43f ad8e 	beq.w	80159b6 <_strtod_l+0x56e>
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	4b34      	ldr	r3, [pc, #208]	; (8015f70 <_strtod_l+0xb28>)
 8015e9e:	e78f      	b.n	8015dc0 <_strtod_l+0x978>
 8015ea0:	2600      	movs	r6, #0
 8015ea2:	4f32      	ldr	r7, [pc, #200]	; (8015f6c <_strtod_l+0xb24>)
 8015ea4:	e7ea      	b.n	8015e7c <_strtod_l+0xa34>
 8015ea6:	4b31      	ldr	r3, [pc, #196]	; (8015f6c <_strtod_l+0xb24>)
 8015ea8:	4630      	mov	r0, r6
 8015eaa:	4639      	mov	r1, r7
 8015eac:	2200      	movs	r2, #0
 8015eae:	f7ea fbbb 	bl	8000628 <__aeabi_dmul>
 8015eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015eb4:	4606      	mov	r6, r0
 8015eb6:	460f      	mov	r7, r1
 8015eb8:	b933      	cbnz	r3, 8015ec8 <_strtod_l+0xa80>
 8015eba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015ebe:	9010      	str	r0, [sp, #64]	; 0x40
 8015ec0:	9311      	str	r3, [sp, #68]	; 0x44
 8015ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015ec6:	e7df      	b.n	8015e88 <_strtod_l+0xa40>
 8015ec8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015ecc:	e7f9      	b.n	8015ec2 <_strtod_l+0xa7a>
 8015ece:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015ed2:	9b04      	ldr	r3, [sp, #16]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d1ab      	bne.n	8015e30 <_strtod_l+0x9e8>
 8015ed8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015edc:	0d1b      	lsrs	r3, r3, #20
 8015ede:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015ee0:	051b      	lsls	r3, r3, #20
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	465d      	mov	r5, fp
 8015ee6:	d1a3      	bne.n	8015e30 <_strtod_l+0x9e8>
 8015ee8:	4639      	mov	r1, r7
 8015eea:	4630      	mov	r0, r6
 8015eec:	f7ea fe4c 	bl	8000b88 <__aeabi_d2iz>
 8015ef0:	f7ea fb30 	bl	8000554 <__aeabi_i2d>
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	4602      	mov	r2, r0
 8015ef8:	4639      	mov	r1, r7
 8015efa:	4630      	mov	r0, r6
 8015efc:	f7ea f9dc 	bl	80002b8 <__aeabi_dsub>
 8015f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f02:	4606      	mov	r6, r0
 8015f04:	460f      	mov	r7, r1
 8015f06:	b933      	cbnz	r3, 8015f16 <_strtod_l+0xace>
 8015f08:	f1ba 0f00 	cmp.w	sl, #0
 8015f0c:	d103      	bne.n	8015f16 <_strtod_l+0xace>
 8015f0e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8015f12:	2d00      	cmp	r5, #0
 8015f14:	d06d      	beq.n	8015ff2 <_strtod_l+0xbaa>
 8015f16:	a30a      	add	r3, pc, #40	; (adr r3, 8015f40 <_strtod_l+0xaf8>)
 8015f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f1c:	4630      	mov	r0, r6
 8015f1e:	4639      	mov	r1, r7
 8015f20:	f7ea fdf4 	bl	8000b0c <__aeabi_dcmplt>
 8015f24:	2800      	cmp	r0, #0
 8015f26:	f47f acb8 	bne.w	801589a <_strtod_l+0x452>
 8015f2a:	a307      	add	r3, pc, #28	; (adr r3, 8015f48 <_strtod_l+0xb00>)
 8015f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f30:	4630      	mov	r0, r6
 8015f32:	4639      	mov	r1, r7
 8015f34:	f7ea fe08 	bl	8000b48 <__aeabi_dcmpgt>
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	f43f af79 	beq.w	8015e30 <_strtod_l+0x9e8>
 8015f3e:	e4ac      	b.n	801589a <_strtod_l+0x452>
 8015f40:	94a03595 	.word	0x94a03595
 8015f44:	3fdfffff 	.word	0x3fdfffff
 8015f48:	35afe535 	.word	0x35afe535
 8015f4c:	3fe00000 	.word	0x3fe00000
 8015f50:	000fffff 	.word	0x000fffff
 8015f54:	7ff00000 	.word	0x7ff00000
 8015f58:	7fefffff 	.word	0x7fefffff
 8015f5c:	39500000 	.word	0x39500000
 8015f60:	3ff00000 	.word	0x3ff00000
 8015f64:	7fe00000 	.word	0x7fe00000
 8015f68:	7c9fffff 	.word	0x7c9fffff
 8015f6c:	3fe00000 	.word	0x3fe00000
 8015f70:	bff00000 	.word	0xbff00000
 8015f74:	9b04      	ldr	r3, [sp, #16]
 8015f76:	b333      	cbz	r3, 8015fc6 <_strtod_l+0xb7e>
 8015f78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015f7e:	d822      	bhi.n	8015fc6 <_strtod_l+0xb7e>
 8015f80:	a327      	add	r3, pc, #156	; (adr r3, 8016020 <_strtod_l+0xbd8>)
 8015f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f86:	4630      	mov	r0, r6
 8015f88:	4639      	mov	r1, r7
 8015f8a:	f7ea fdc9 	bl	8000b20 <__aeabi_dcmple>
 8015f8e:	b1a0      	cbz	r0, 8015fba <_strtod_l+0xb72>
 8015f90:	4639      	mov	r1, r7
 8015f92:	4630      	mov	r0, r6
 8015f94:	f7ea fe20 	bl	8000bd8 <__aeabi_d2uiz>
 8015f98:	2800      	cmp	r0, #0
 8015f9a:	bf08      	it	eq
 8015f9c:	2001      	moveq	r0, #1
 8015f9e:	f7ea fac9 	bl	8000534 <__aeabi_ui2d>
 8015fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fa4:	4606      	mov	r6, r0
 8015fa6:	460f      	mov	r7, r1
 8015fa8:	bb03      	cbnz	r3, 8015fec <_strtod_l+0xba4>
 8015faa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015fae:	9012      	str	r0, [sp, #72]	; 0x48
 8015fb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8015fb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015fb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015fbe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015fc2:	1a9b      	subs	r3, r3, r2
 8015fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fc6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8015fca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8015fce:	f001 fd6b 	bl	8017aa8 <__ulp>
 8015fd2:	4650      	mov	r0, sl
 8015fd4:	ec53 2b10 	vmov	r2, r3, d0
 8015fd8:	4659      	mov	r1, fp
 8015fda:	f7ea fb25 	bl	8000628 <__aeabi_dmul>
 8015fde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015fe2:	f7ea f96b 	bl	80002bc <__adddf3>
 8015fe6:	4682      	mov	sl, r0
 8015fe8:	468b      	mov	fp, r1
 8015fea:	e772      	b.n	8015ed2 <_strtod_l+0xa8a>
 8015fec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8015ff0:	e7df      	b.n	8015fb2 <_strtod_l+0xb6a>
 8015ff2:	a30d      	add	r3, pc, #52	; (adr r3, 8016028 <_strtod_l+0xbe0>)
 8015ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ff8:	f7ea fd88 	bl	8000b0c <__aeabi_dcmplt>
 8015ffc:	e79c      	b.n	8015f38 <_strtod_l+0xaf0>
 8015ffe:	2300      	movs	r3, #0
 8016000:	930d      	str	r3, [sp, #52]	; 0x34
 8016002:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016006:	6013      	str	r3, [r2, #0]
 8016008:	f7ff ba61 	b.w	80154ce <_strtod_l+0x86>
 801600c:	2b65      	cmp	r3, #101	; 0x65
 801600e:	f04f 0200 	mov.w	r2, #0
 8016012:	f43f ab4e 	beq.w	80156b2 <_strtod_l+0x26a>
 8016016:	2101      	movs	r1, #1
 8016018:	4614      	mov	r4, r2
 801601a:	9104      	str	r1, [sp, #16]
 801601c:	f7ff bacb 	b.w	80155b6 <_strtod_l+0x16e>
 8016020:	ffc00000 	.word	0xffc00000
 8016024:	41dfffff 	.word	0x41dfffff
 8016028:	94a03595 	.word	0x94a03595
 801602c:	3fcfffff 	.word	0x3fcfffff

08016030 <_strtod_r>:
 8016030:	4b05      	ldr	r3, [pc, #20]	; (8016048 <_strtod_r+0x18>)
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	b410      	push	{r4}
 8016036:	6a1b      	ldr	r3, [r3, #32]
 8016038:	4c04      	ldr	r4, [pc, #16]	; (801604c <_strtod_r+0x1c>)
 801603a:	2b00      	cmp	r3, #0
 801603c:	bf08      	it	eq
 801603e:	4623      	moveq	r3, r4
 8016040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016044:	f7ff ba00 	b.w	8015448 <_strtod_l>
 8016048:	2000000c 	.word	0x2000000c
 801604c:	20000070 	.word	0x20000070

08016050 <_strtol_l.isra.0>:
 8016050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016054:	4680      	mov	r8, r0
 8016056:	4689      	mov	r9, r1
 8016058:	4692      	mov	sl, r2
 801605a:	461e      	mov	r6, r3
 801605c:	460f      	mov	r7, r1
 801605e:	463d      	mov	r5, r7
 8016060:	9808      	ldr	r0, [sp, #32]
 8016062:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016066:	f001 fa0d 	bl	8017484 <__locale_ctype_ptr_l>
 801606a:	4420      	add	r0, r4
 801606c:	7843      	ldrb	r3, [r0, #1]
 801606e:	f013 0308 	ands.w	r3, r3, #8
 8016072:	d132      	bne.n	80160da <_strtol_l.isra.0+0x8a>
 8016074:	2c2d      	cmp	r4, #45	; 0x2d
 8016076:	d132      	bne.n	80160de <_strtol_l.isra.0+0x8e>
 8016078:	787c      	ldrb	r4, [r7, #1]
 801607a:	1cbd      	adds	r5, r7, #2
 801607c:	2201      	movs	r2, #1
 801607e:	2e00      	cmp	r6, #0
 8016080:	d05d      	beq.n	801613e <_strtol_l.isra.0+0xee>
 8016082:	2e10      	cmp	r6, #16
 8016084:	d109      	bne.n	801609a <_strtol_l.isra.0+0x4a>
 8016086:	2c30      	cmp	r4, #48	; 0x30
 8016088:	d107      	bne.n	801609a <_strtol_l.isra.0+0x4a>
 801608a:	782b      	ldrb	r3, [r5, #0]
 801608c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016090:	2b58      	cmp	r3, #88	; 0x58
 8016092:	d14f      	bne.n	8016134 <_strtol_l.isra.0+0xe4>
 8016094:	786c      	ldrb	r4, [r5, #1]
 8016096:	2610      	movs	r6, #16
 8016098:	3502      	adds	r5, #2
 801609a:	2a00      	cmp	r2, #0
 801609c:	bf14      	ite	ne
 801609e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80160a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80160a6:	2700      	movs	r7, #0
 80160a8:	fbb1 fcf6 	udiv	ip, r1, r6
 80160ac:	4638      	mov	r0, r7
 80160ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 80160b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80160b6:	2b09      	cmp	r3, #9
 80160b8:	d817      	bhi.n	80160ea <_strtol_l.isra.0+0x9a>
 80160ba:	461c      	mov	r4, r3
 80160bc:	42a6      	cmp	r6, r4
 80160be:	dd23      	ble.n	8016108 <_strtol_l.isra.0+0xb8>
 80160c0:	1c7b      	adds	r3, r7, #1
 80160c2:	d007      	beq.n	80160d4 <_strtol_l.isra.0+0x84>
 80160c4:	4584      	cmp	ip, r0
 80160c6:	d31c      	bcc.n	8016102 <_strtol_l.isra.0+0xb2>
 80160c8:	d101      	bne.n	80160ce <_strtol_l.isra.0+0x7e>
 80160ca:	45a6      	cmp	lr, r4
 80160cc:	db19      	blt.n	8016102 <_strtol_l.isra.0+0xb2>
 80160ce:	fb00 4006 	mla	r0, r0, r6, r4
 80160d2:	2701      	movs	r7, #1
 80160d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80160d8:	e7eb      	b.n	80160b2 <_strtol_l.isra.0+0x62>
 80160da:	462f      	mov	r7, r5
 80160dc:	e7bf      	b.n	801605e <_strtol_l.isra.0+0xe>
 80160de:	2c2b      	cmp	r4, #43	; 0x2b
 80160e0:	bf04      	itt	eq
 80160e2:	1cbd      	addeq	r5, r7, #2
 80160e4:	787c      	ldrbeq	r4, [r7, #1]
 80160e6:	461a      	mov	r2, r3
 80160e8:	e7c9      	b.n	801607e <_strtol_l.isra.0+0x2e>
 80160ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80160ee:	2b19      	cmp	r3, #25
 80160f0:	d801      	bhi.n	80160f6 <_strtol_l.isra.0+0xa6>
 80160f2:	3c37      	subs	r4, #55	; 0x37
 80160f4:	e7e2      	b.n	80160bc <_strtol_l.isra.0+0x6c>
 80160f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80160fa:	2b19      	cmp	r3, #25
 80160fc:	d804      	bhi.n	8016108 <_strtol_l.isra.0+0xb8>
 80160fe:	3c57      	subs	r4, #87	; 0x57
 8016100:	e7dc      	b.n	80160bc <_strtol_l.isra.0+0x6c>
 8016102:	f04f 37ff 	mov.w	r7, #4294967295
 8016106:	e7e5      	b.n	80160d4 <_strtol_l.isra.0+0x84>
 8016108:	1c7b      	adds	r3, r7, #1
 801610a:	d108      	bne.n	801611e <_strtol_l.isra.0+0xce>
 801610c:	2322      	movs	r3, #34	; 0x22
 801610e:	f8c8 3000 	str.w	r3, [r8]
 8016112:	4608      	mov	r0, r1
 8016114:	f1ba 0f00 	cmp.w	sl, #0
 8016118:	d107      	bne.n	801612a <_strtol_l.isra.0+0xda>
 801611a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801611e:	b102      	cbz	r2, 8016122 <_strtol_l.isra.0+0xd2>
 8016120:	4240      	negs	r0, r0
 8016122:	f1ba 0f00 	cmp.w	sl, #0
 8016126:	d0f8      	beq.n	801611a <_strtol_l.isra.0+0xca>
 8016128:	b10f      	cbz	r7, 801612e <_strtol_l.isra.0+0xde>
 801612a:	f105 39ff 	add.w	r9, r5, #4294967295
 801612e:	f8ca 9000 	str.w	r9, [sl]
 8016132:	e7f2      	b.n	801611a <_strtol_l.isra.0+0xca>
 8016134:	2430      	movs	r4, #48	; 0x30
 8016136:	2e00      	cmp	r6, #0
 8016138:	d1af      	bne.n	801609a <_strtol_l.isra.0+0x4a>
 801613a:	2608      	movs	r6, #8
 801613c:	e7ad      	b.n	801609a <_strtol_l.isra.0+0x4a>
 801613e:	2c30      	cmp	r4, #48	; 0x30
 8016140:	d0a3      	beq.n	801608a <_strtol_l.isra.0+0x3a>
 8016142:	260a      	movs	r6, #10
 8016144:	e7a9      	b.n	801609a <_strtol_l.isra.0+0x4a>
	...

08016148 <_strtol_r>:
 8016148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801614a:	4c06      	ldr	r4, [pc, #24]	; (8016164 <_strtol_r+0x1c>)
 801614c:	4d06      	ldr	r5, [pc, #24]	; (8016168 <_strtol_r+0x20>)
 801614e:	6824      	ldr	r4, [r4, #0]
 8016150:	6a24      	ldr	r4, [r4, #32]
 8016152:	2c00      	cmp	r4, #0
 8016154:	bf08      	it	eq
 8016156:	462c      	moveq	r4, r5
 8016158:	9400      	str	r4, [sp, #0]
 801615a:	f7ff ff79 	bl	8016050 <_strtol_l.isra.0>
 801615e:	b003      	add	sp, #12
 8016160:	bd30      	pop	{r4, r5, pc}
 8016162:	bf00      	nop
 8016164:	2000000c 	.word	0x2000000c
 8016168:	20000070 	.word	0x20000070

0801616c <_vsiprintf_r>:
 801616c:	b500      	push	{lr}
 801616e:	b09b      	sub	sp, #108	; 0x6c
 8016170:	9100      	str	r1, [sp, #0]
 8016172:	9104      	str	r1, [sp, #16]
 8016174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016178:	9105      	str	r1, [sp, #20]
 801617a:	9102      	str	r1, [sp, #8]
 801617c:	4905      	ldr	r1, [pc, #20]	; (8016194 <_vsiprintf_r+0x28>)
 801617e:	9103      	str	r1, [sp, #12]
 8016180:	4669      	mov	r1, sp
 8016182:	f001 fed5 	bl	8017f30 <_svfiprintf_r>
 8016186:	9b00      	ldr	r3, [sp, #0]
 8016188:	2200      	movs	r2, #0
 801618a:	701a      	strb	r2, [r3, #0]
 801618c:	b01b      	add	sp, #108	; 0x6c
 801618e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016192:	bf00      	nop
 8016194:	ffff0208 	.word	0xffff0208

08016198 <vsiprintf>:
 8016198:	4613      	mov	r3, r2
 801619a:	460a      	mov	r2, r1
 801619c:	4601      	mov	r1, r0
 801619e:	4802      	ldr	r0, [pc, #8]	; (80161a8 <vsiprintf+0x10>)
 80161a0:	6800      	ldr	r0, [r0, #0]
 80161a2:	f7ff bfe3 	b.w	801616c <_vsiprintf_r>
 80161a6:	bf00      	nop
 80161a8:	2000000c 	.word	0x2000000c

080161ac <quorem>:
 80161ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161b0:	6903      	ldr	r3, [r0, #16]
 80161b2:	690c      	ldr	r4, [r1, #16]
 80161b4:	42a3      	cmp	r3, r4
 80161b6:	4680      	mov	r8, r0
 80161b8:	f2c0 8082 	blt.w	80162c0 <quorem+0x114>
 80161bc:	3c01      	subs	r4, #1
 80161be:	f101 0714 	add.w	r7, r1, #20
 80161c2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80161c6:	f100 0614 	add.w	r6, r0, #20
 80161ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80161ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80161d2:	eb06 030c 	add.w	r3, r6, ip
 80161d6:	3501      	adds	r5, #1
 80161d8:	eb07 090c 	add.w	r9, r7, ip
 80161dc:	9301      	str	r3, [sp, #4]
 80161de:	fbb0 f5f5 	udiv	r5, r0, r5
 80161e2:	b395      	cbz	r5, 801624a <quorem+0x9e>
 80161e4:	f04f 0a00 	mov.w	sl, #0
 80161e8:	4638      	mov	r0, r7
 80161ea:	46b6      	mov	lr, r6
 80161ec:	46d3      	mov	fp, sl
 80161ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80161f2:	b293      	uxth	r3, r2
 80161f4:	fb05 a303 	mla	r3, r5, r3, sl
 80161f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	ebab 0303 	sub.w	r3, fp, r3
 8016202:	0c12      	lsrs	r2, r2, #16
 8016204:	f8de b000 	ldr.w	fp, [lr]
 8016208:	fb05 a202 	mla	r2, r5, r2, sl
 801620c:	fa13 f38b 	uxtah	r3, r3, fp
 8016210:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016214:	fa1f fb82 	uxth.w	fp, r2
 8016218:	f8de 2000 	ldr.w	r2, [lr]
 801621c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016224:	b29b      	uxth	r3, r3
 8016226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801622a:	4581      	cmp	r9, r0
 801622c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016230:	f84e 3b04 	str.w	r3, [lr], #4
 8016234:	d2db      	bcs.n	80161ee <quorem+0x42>
 8016236:	f856 300c 	ldr.w	r3, [r6, ip]
 801623a:	b933      	cbnz	r3, 801624a <quorem+0x9e>
 801623c:	9b01      	ldr	r3, [sp, #4]
 801623e:	3b04      	subs	r3, #4
 8016240:	429e      	cmp	r6, r3
 8016242:	461a      	mov	r2, r3
 8016244:	d330      	bcc.n	80162a8 <quorem+0xfc>
 8016246:	f8c8 4010 	str.w	r4, [r8, #16]
 801624a:	4640      	mov	r0, r8
 801624c:	f001 fbb4 	bl	80179b8 <__mcmp>
 8016250:	2800      	cmp	r0, #0
 8016252:	db25      	blt.n	80162a0 <quorem+0xf4>
 8016254:	3501      	adds	r5, #1
 8016256:	4630      	mov	r0, r6
 8016258:	f04f 0c00 	mov.w	ip, #0
 801625c:	f857 2b04 	ldr.w	r2, [r7], #4
 8016260:	f8d0 e000 	ldr.w	lr, [r0]
 8016264:	b293      	uxth	r3, r2
 8016266:	ebac 0303 	sub.w	r3, ip, r3
 801626a:	0c12      	lsrs	r2, r2, #16
 801626c:	fa13 f38e 	uxtah	r3, r3, lr
 8016270:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016278:	b29b      	uxth	r3, r3
 801627a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801627e:	45b9      	cmp	r9, r7
 8016280:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016284:	f840 3b04 	str.w	r3, [r0], #4
 8016288:	d2e8      	bcs.n	801625c <quorem+0xb0>
 801628a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801628e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016292:	b92a      	cbnz	r2, 80162a0 <quorem+0xf4>
 8016294:	3b04      	subs	r3, #4
 8016296:	429e      	cmp	r6, r3
 8016298:	461a      	mov	r2, r3
 801629a:	d30b      	bcc.n	80162b4 <quorem+0x108>
 801629c:	f8c8 4010 	str.w	r4, [r8, #16]
 80162a0:	4628      	mov	r0, r5
 80162a2:	b003      	add	sp, #12
 80162a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a8:	6812      	ldr	r2, [r2, #0]
 80162aa:	3b04      	subs	r3, #4
 80162ac:	2a00      	cmp	r2, #0
 80162ae:	d1ca      	bne.n	8016246 <quorem+0x9a>
 80162b0:	3c01      	subs	r4, #1
 80162b2:	e7c5      	b.n	8016240 <quorem+0x94>
 80162b4:	6812      	ldr	r2, [r2, #0]
 80162b6:	3b04      	subs	r3, #4
 80162b8:	2a00      	cmp	r2, #0
 80162ba:	d1ef      	bne.n	801629c <quorem+0xf0>
 80162bc:	3c01      	subs	r4, #1
 80162be:	e7ea      	b.n	8016296 <quorem+0xea>
 80162c0:	2000      	movs	r0, #0
 80162c2:	e7ee      	b.n	80162a2 <quorem+0xf6>
 80162c4:	0000      	movs	r0, r0
	...

080162c8 <_dtoa_r>:
 80162c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162cc:	ec57 6b10 	vmov	r6, r7, d0
 80162d0:	b097      	sub	sp, #92	; 0x5c
 80162d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80162d4:	9106      	str	r1, [sp, #24]
 80162d6:	4604      	mov	r4, r0
 80162d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80162da:	9312      	str	r3, [sp, #72]	; 0x48
 80162dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80162e0:	e9cd 6700 	strd	r6, r7, [sp]
 80162e4:	b93d      	cbnz	r5, 80162f6 <_dtoa_r+0x2e>
 80162e6:	2010      	movs	r0, #16
 80162e8:	f001 f8ee 	bl	80174c8 <malloc>
 80162ec:	6260      	str	r0, [r4, #36]	; 0x24
 80162ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80162f2:	6005      	str	r5, [r0, #0]
 80162f4:	60c5      	str	r5, [r0, #12]
 80162f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80162f8:	6819      	ldr	r1, [r3, #0]
 80162fa:	b151      	cbz	r1, 8016312 <_dtoa_r+0x4a>
 80162fc:	685a      	ldr	r2, [r3, #4]
 80162fe:	604a      	str	r2, [r1, #4]
 8016300:	2301      	movs	r3, #1
 8016302:	4093      	lsls	r3, r2
 8016304:	608b      	str	r3, [r1, #8]
 8016306:	4620      	mov	r0, r4
 8016308:	f001 f937 	bl	801757a <_Bfree>
 801630c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801630e:	2200      	movs	r2, #0
 8016310:	601a      	str	r2, [r3, #0]
 8016312:	1e3b      	subs	r3, r7, #0
 8016314:	bfbb      	ittet	lt
 8016316:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801631a:	9301      	strlt	r3, [sp, #4]
 801631c:	2300      	movge	r3, #0
 801631e:	2201      	movlt	r2, #1
 8016320:	bfac      	ite	ge
 8016322:	f8c8 3000 	strge.w	r3, [r8]
 8016326:	f8c8 2000 	strlt.w	r2, [r8]
 801632a:	4baf      	ldr	r3, [pc, #700]	; (80165e8 <_dtoa_r+0x320>)
 801632c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016330:	ea33 0308 	bics.w	r3, r3, r8
 8016334:	d114      	bne.n	8016360 <_dtoa_r+0x98>
 8016336:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016338:	f242 730f 	movw	r3, #9999	; 0x270f
 801633c:	6013      	str	r3, [r2, #0]
 801633e:	9b00      	ldr	r3, [sp, #0]
 8016340:	b923      	cbnz	r3, 801634c <_dtoa_r+0x84>
 8016342:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016346:	2800      	cmp	r0, #0
 8016348:	f000 8542 	beq.w	8016dd0 <_dtoa_r+0xb08>
 801634c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801634e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80165fc <_dtoa_r+0x334>
 8016352:	2b00      	cmp	r3, #0
 8016354:	f000 8544 	beq.w	8016de0 <_dtoa_r+0xb18>
 8016358:	f10b 0303 	add.w	r3, fp, #3
 801635c:	f000 bd3e 	b.w	8016ddc <_dtoa_r+0xb14>
 8016360:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016364:	2200      	movs	r2, #0
 8016366:	2300      	movs	r3, #0
 8016368:	4630      	mov	r0, r6
 801636a:	4639      	mov	r1, r7
 801636c:	f7ea fbc4 	bl	8000af8 <__aeabi_dcmpeq>
 8016370:	4681      	mov	r9, r0
 8016372:	b168      	cbz	r0, 8016390 <_dtoa_r+0xc8>
 8016374:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016376:	2301      	movs	r3, #1
 8016378:	6013      	str	r3, [r2, #0]
 801637a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801637c:	2b00      	cmp	r3, #0
 801637e:	f000 8524 	beq.w	8016dca <_dtoa_r+0xb02>
 8016382:	4b9a      	ldr	r3, [pc, #616]	; (80165ec <_dtoa_r+0x324>)
 8016384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016386:	f103 3bff 	add.w	fp, r3, #4294967295
 801638a:	6013      	str	r3, [r2, #0]
 801638c:	f000 bd28 	b.w	8016de0 <_dtoa_r+0xb18>
 8016390:	aa14      	add	r2, sp, #80	; 0x50
 8016392:	a915      	add	r1, sp, #84	; 0x54
 8016394:	ec47 6b10 	vmov	d0, r6, r7
 8016398:	4620      	mov	r0, r4
 801639a:	f001 fbfb 	bl	8017b94 <__d2b>
 801639e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80163a2:	9004      	str	r0, [sp, #16]
 80163a4:	2d00      	cmp	r5, #0
 80163a6:	d07c      	beq.n	80164a2 <_dtoa_r+0x1da>
 80163a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80163ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80163b0:	46b2      	mov	sl, r6
 80163b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80163b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80163ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80163be:	2200      	movs	r2, #0
 80163c0:	4b8b      	ldr	r3, [pc, #556]	; (80165f0 <_dtoa_r+0x328>)
 80163c2:	4650      	mov	r0, sl
 80163c4:	4659      	mov	r1, fp
 80163c6:	f7e9 ff77 	bl	80002b8 <__aeabi_dsub>
 80163ca:	a381      	add	r3, pc, #516	; (adr r3, 80165d0 <_dtoa_r+0x308>)
 80163cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d0:	f7ea f92a 	bl	8000628 <__aeabi_dmul>
 80163d4:	a380      	add	r3, pc, #512	; (adr r3, 80165d8 <_dtoa_r+0x310>)
 80163d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163da:	f7e9 ff6f 	bl	80002bc <__adddf3>
 80163de:	4606      	mov	r6, r0
 80163e0:	4628      	mov	r0, r5
 80163e2:	460f      	mov	r7, r1
 80163e4:	f7ea f8b6 	bl	8000554 <__aeabi_i2d>
 80163e8:	a37d      	add	r3, pc, #500	; (adr r3, 80165e0 <_dtoa_r+0x318>)
 80163ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163ee:	f7ea f91b 	bl	8000628 <__aeabi_dmul>
 80163f2:	4602      	mov	r2, r0
 80163f4:	460b      	mov	r3, r1
 80163f6:	4630      	mov	r0, r6
 80163f8:	4639      	mov	r1, r7
 80163fa:	f7e9 ff5f 	bl	80002bc <__adddf3>
 80163fe:	4606      	mov	r6, r0
 8016400:	460f      	mov	r7, r1
 8016402:	f7ea fbc1 	bl	8000b88 <__aeabi_d2iz>
 8016406:	2200      	movs	r2, #0
 8016408:	4682      	mov	sl, r0
 801640a:	2300      	movs	r3, #0
 801640c:	4630      	mov	r0, r6
 801640e:	4639      	mov	r1, r7
 8016410:	f7ea fb7c 	bl	8000b0c <__aeabi_dcmplt>
 8016414:	b148      	cbz	r0, 801642a <_dtoa_r+0x162>
 8016416:	4650      	mov	r0, sl
 8016418:	f7ea f89c 	bl	8000554 <__aeabi_i2d>
 801641c:	4632      	mov	r2, r6
 801641e:	463b      	mov	r3, r7
 8016420:	f7ea fb6a 	bl	8000af8 <__aeabi_dcmpeq>
 8016424:	b908      	cbnz	r0, 801642a <_dtoa_r+0x162>
 8016426:	f10a 3aff 	add.w	sl, sl, #4294967295
 801642a:	f1ba 0f16 	cmp.w	sl, #22
 801642e:	d859      	bhi.n	80164e4 <_dtoa_r+0x21c>
 8016430:	4970      	ldr	r1, [pc, #448]	; (80165f4 <_dtoa_r+0x32c>)
 8016432:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016436:	e9dd 2300 	ldrd	r2, r3, [sp]
 801643a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801643e:	f7ea fb83 	bl	8000b48 <__aeabi_dcmpgt>
 8016442:	2800      	cmp	r0, #0
 8016444:	d050      	beq.n	80164e8 <_dtoa_r+0x220>
 8016446:	f10a 3aff 	add.w	sl, sl, #4294967295
 801644a:	2300      	movs	r3, #0
 801644c:	930f      	str	r3, [sp, #60]	; 0x3c
 801644e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016450:	1b5d      	subs	r5, r3, r5
 8016452:	f1b5 0801 	subs.w	r8, r5, #1
 8016456:	bf49      	itett	mi
 8016458:	f1c5 0301 	rsbmi	r3, r5, #1
 801645c:	2300      	movpl	r3, #0
 801645e:	9305      	strmi	r3, [sp, #20]
 8016460:	f04f 0800 	movmi.w	r8, #0
 8016464:	bf58      	it	pl
 8016466:	9305      	strpl	r3, [sp, #20]
 8016468:	f1ba 0f00 	cmp.w	sl, #0
 801646c:	db3e      	blt.n	80164ec <_dtoa_r+0x224>
 801646e:	2300      	movs	r3, #0
 8016470:	44d0      	add	r8, sl
 8016472:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016476:	9307      	str	r3, [sp, #28]
 8016478:	9b06      	ldr	r3, [sp, #24]
 801647a:	2b09      	cmp	r3, #9
 801647c:	f200 8090 	bhi.w	80165a0 <_dtoa_r+0x2d8>
 8016480:	2b05      	cmp	r3, #5
 8016482:	bfc4      	itt	gt
 8016484:	3b04      	subgt	r3, #4
 8016486:	9306      	strgt	r3, [sp, #24]
 8016488:	9b06      	ldr	r3, [sp, #24]
 801648a:	f1a3 0302 	sub.w	r3, r3, #2
 801648e:	bfcc      	ite	gt
 8016490:	2500      	movgt	r5, #0
 8016492:	2501      	movle	r5, #1
 8016494:	2b03      	cmp	r3, #3
 8016496:	f200 808f 	bhi.w	80165b8 <_dtoa_r+0x2f0>
 801649a:	e8df f003 	tbb	[pc, r3]
 801649e:	7f7d      	.short	0x7f7d
 80164a0:	7131      	.short	0x7131
 80164a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80164a6:	441d      	add	r5, r3
 80164a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80164ac:	2820      	cmp	r0, #32
 80164ae:	dd13      	ble.n	80164d8 <_dtoa_r+0x210>
 80164b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80164b4:	9b00      	ldr	r3, [sp, #0]
 80164b6:	fa08 f800 	lsl.w	r8, r8, r0
 80164ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80164be:	fa23 f000 	lsr.w	r0, r3, r0
 80164c2:	ea48 0000 	orr.w	r0, r8, r0
 80164c6:	f7ea f835 	bl	8000534 <__aeabi_ui2d>
 80164ca:	2301      	movs	r3, #1
 80164cc:	4682      	mov	sl, r0
 80164ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80164d2:	3d01      	subs	r5, #1
 80164d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80164d6:	e772      	b.n	80163be <_dtoa_r+0xf6>
 80164d8:	9b00      	ldr	r3, [sp, #0]
 80164da:	f1c0 0020 	rsb	r0, r0, #32
 80164de:	fa03 f000 	lsl.w	r0, r3, r0
 80164e2:	e7f0      	b.n	80164c6 <_dtoa_r+0x1fe>
 80164e4:	2301      	movs	r3, #1
 80164e6:	e7b1      	b.n	801644c <_dtoa_r+0x184>
 80164e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80164ea:	e7b0      	b.n	801644e <_dtoa_r+0x186>
 80164ec:	9b05      	ldr	r3, [sp, #20]
 80164ee:	eba3 030a 	sub.w	r3, r3, sl
 80164f2:	9305      	str	r3, [sp, #20]
 80164f4:	f1ca 0300 	rsb	r3, sl, #0
 80164f8:	9307      	str	r3, [sp, #28]
 80164fa:	2300      	movs	r3, #0
 80164fc:	930e      	str	r3, [sp, #56]	; 0x38
 80164fe:	e7bb      	b.n	8016478 <_dtoa_r+0x1b0>
 8016500:	2301      	movs	r3, #1
 8016502:	930a      	str	r3, [sp, #40]	; 0x28
 8016504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016506:	2b00      	cmp	r3, #0
 8016508:	dd59      	ble.n	80165be <_dtoa_r+0x2f6>
 801650a:	9302      	str	r3, [sp, #8]
 801650c:	4699      	mov	r9, r3
 801650e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016510:	2200      	movs	r2, #0
 8016512:	6072      	str	r2, [r6, #4]
 8016514:	2204      	movs	r2, #4
 8016516:	f102 0014 	add.w	r0, r2, #20
 801651a:	4298      	cmp	r0, r3
 801651c:	6871      	ldr	r1, [r6, #4]
 801651e:	d953      	bls.n	80165c8 <_dtoa_r+0x300>
 8016520:	4620      	mov	r0, r4
 8016522:	f000 fff6 	bl	8017512 <_Balloc>
 8016526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016528:	6030      	str	r0, [r6, #0]
 801652a:	f1b9 0f0e 	cmp.w	r9, #14
 801652e:	f8d3 b000 	ldr.w	fp, [r3]
 8016532:	f200 80e6 	bhi.w	8016702 <_dtoa_r+0x43a>
 8016536:	2d00      	cmp	r5, #0
 8016538:	f000 80e3 	beq.w	8016702 <_dtoa_r+0x43a>
 801653c:	ed9d 7b00 	vldr	d7, [sp]
 8016540:	f1ba 0f00 	cmp.w	sl, #0
 8016544:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016548:	dd74      	ble.n	8016634 <_dtoa_r+0x36c>
 801654a:	4a2a      	ldr	r2, [pc, #168]	; (80165f4 <_dtoa_r+0x32c>)
 801654c:	f00a 030f 	and.w	r3, sl, #15
 8016550:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016554:	ed93 7b00 	vldr	d7, [r3]
 8016558:	ea4f 162a 	mov.w	r6, sl, asr #4
 801655c:	06f0      	lsls	r0, r6, #27
 801655e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016562:	d565      	bpl.n	8016630 <_dtoa_r+0x368>
 8016564:	4b24      	ldr	r3, [pc, #144]	; (80165f8 <_dtoa_r+0x330>)
 8016566:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801656a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801656e:	f7ea f985 	bl	800087c <__aeabi_ddiv>
 8016572:	e9cd 0100 	strd	r0, r1, [sp]
 8016576:	f006 060f 	and.w	r6, r6, #15
 801657a:	2503      	movs	r5, #3
 801657c:	4f1e      	ldr	r7, [pc, #120]	; (80165f8 <_dtoa_r+0x330>)
 801657e:	e04c      	b.n	801661a <_dtoa_r+0x352>
 8016580:	2301      	movs	r3, #1
 8016582:	930a      	str	r3, [sp, #40]	; 0x28
 8016584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016586:	4453      	add	r3, sl
 8016588:	f103 0901 	add.w	r9, r3, #1
 801658c:	9302      	str	r3, [sp, #8]
 801658e:	464b      	mov	r3, r9
 8016590:	2b01      	cmp	r3, #1
 8016592:	bfb8      	it	lt
 8016594:	2301      	movlt	r3, #1
 8016596:	e7ba      	b.n	801650e <_dtoa_r+0x246>
 8016598:	2300      	movs	r3, #0
 801659a:	e7b2      	b.n	8016502 <_dtoa_r+0x23a>
 801659c:	2300      	movs	r3, #0
 801659e:	e7f0      	b.n	8016582 <_dtoa_r+0x2ba>
 80165a0:	2501      	movs	r5, #1
 80165a2:	2300      	movs	r3, #0
 80165a4:	9306      	str	r3, [sp, #24]
 80165a6:	950a      	str	r5, [sp, #40]	; 0x28
 80165a8:	f04f 33ff 	mov.w	r3, #4294967295
 80165ac:	9302      	str	r3, [sp, #8]
 80165ae:	4699      	mov	r9, r3
 80165b0:	2200      	movs	r2, #0
 80165b2:	2312      	movs	r3, #18
 80165b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80165b6:	e7aa      	b.n	801650e <_dtoa_r+0x246>
 80165b8:	2301      	movs	r3, #1
 80165ba:	930a      	str	r3, [sp, #40]	; 0x28
 80165bc:	e7f4      	b.n	80165a8 <_dtoa_r+0x2e0>
 80165be:	2301      	movs	r3, #1
 80165c0:	9302      	str	r3, [sp, #8]
 80165c2:	4699      	mov	r9, r3
 80165c4:	461a      	mov	r2, r3
 80165c6:	e7f5      	b.n	80165b4 <_dtoa_r+0x2ec>
 80165c8:	3101      	adds	r1, #1
 80165ca:	6071      	str	r1, [r6, #4]
 80165cc:	0052      	lsls	r2, r2, #1
 80165ce:	e7a2      	b.n	8016516 <_dtoa_r+0x24e>
 80165d0:	636f4361 	.word	0x636f4361
 80165d4:	3fd287a7 	.word	0x3fd287a7
 80165d8:	8b60c8b3 	.word	0x8b60c8b3
 80165dc:	3fc68a28 	.word	0x3fc68a28
 80165e0:	509f79fb 	.word	0x509f79fb
 80165e4:	3fd34413 	.word	0x3fd34413
 80165e8:	7ff00000 	.word	0x7ff00000
 80165ec:	080190ec 	.word	0x080190ec
 80165f0:	3ff80000 	.word	0x3ff80000
 80165f4:	08018ff0 	.word	0x08018ff0
 80165f8:	08018fc8 	.word	0x08018fc8
 80165fc:	08018fb9 	.word	0x08018fb9
 8016600:	07f1      	lsls	r1, r6, #31
 8016602:	d508      	bpl.n	8016616 <_dtoa_r+0x34e>
 8016604:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016608:	e9d7 2300 	ldrd	r2, r3, [r7]
 801660c:	f7ea f80c 	bl	8000628 <__aeabi_dmul>
 8016610:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016614:	3501      	adds	r5, #1
 8016616:	1076      	asrs	r6, r6, #1
 8016618:	3708      	adds	r7, #8
 801661a:	2e00      	cmp	r6, #0
 801661c:	d1f0      	bne.n	8016600 <_dtoa_r+0x338>
 801661e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016622:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016626:	f7ea f929 	bl	800087c <__aeabi_ddiv>
 801662a:	e9cd 0100 	strd	r0, r1, [sp]
 801662e:	e01a      	b.n	8016666 <_dtoa_r+0x39e>
 8016630:	2502      	movs	r5, #2
 8016632:	e7a3      	b.n	801657c <_dtoa_r+0x2b4>
 8016634:	f000 80a0 	beq.w	8016778 <_dtoa_r+0x4b0>
 8016638:	f1ca 0600 	rsb	r6, sl, #0
 801663c:	4b9f      	ldr	r3, [pc, #636]	; (80168bc <_dtoa_r+0x5f4>)
 801663e:	4fa0      	ldr	r7, [pc, #640]	; (80168c0 <_dtoa_r+0x5f8>)
 8016640:	f006 020f 	and.w	r2, r6, #15
 8016644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801664c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016650:	f7e9 ffea 	bl	8000628 <__aeabi_dmul>
 8016654:	e9cd 0100 	strd	r0, r1, [sp]
 8016658:	1136      	asrs	r6, r6, #4
 801665a:	2300      	movs	r3, #0
 801665c:	2502      	movs	r5, #2
 801665e:	2e00      	cmp	r6, #0
 8016660:	d17f      	bne.n	8016762 <_dtoa_r+0x49a>
 8016662:	2b00      	cmp	r3, #0
 8016664:	d1e1      	bne.n	801662a <_dtoa_r+0x362>
 8016666:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016668:	2b00      	cmp	r3, #0
 801666a:	f000 8087 	beq.w	801677c <_dtoa_r+0x4b4>
 801666e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016672:	2200      	movs	r2, #0
 8016674:	4b93      	ldr	r3, [pc, #588]	; (80168c4 <_dtoa_r+0x5fc>)
 8016676:	4630      	mov	r0, r6
 8016678:	4639      	mov	r1, r7
 801667a:	f7ea fa47 	bl	8000b0c <__aeabi_dcmplt>
 801667e:	2800      	cmp	r0, #0
 8016680:	d07c      	beq.n	801677c <_dtoa_r+0x4b4>
 8016682:	f1b9 0f00 	cmp.w	r9, #0
 8016686:	d079      	beq.n	801677c <_dtoa_r+0x4b4>
 8016688:	9b02      	ldr	r3, [sp, #8]
 801668a:	2b00      	cmp	r3, #0
 801668c:	dd35      	ble.n	80166fa <_dtoa_r+0x432>
 801668e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016692:	9308      	str	r3, [sp, #32]
 8016694:	4639      	mov	r1, r7
 8016696:	2200      	movs	r2, #0
 8016698:	4b8b      	ldr	r3, [pc, #556]	; (80168c8 <_dtoa_r+0x600>)
 801669a:	4630      	mov	r0, r6
 801669c:	f7e9 ffc4 	bl	8000628 <__aeabi_dmul>
 80166a0:	e9cd 0100 	strd	r0, r1, [sp]
 80166a4:	9f02      	ldr	r7, [sp, #8]
 80166a6:	3501      	adds	r5, #1
 80166a8:	4628      	mov	r0, r5
 80166aa:	f7e9 ff53 	bl	8000554 <__aeabi_i2d>
 80166ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80166b2:	f7e9 ffb9 	bl	8000628 <__aeabi_dmul>
 80166b6:	2200      	movs	r2, #0
 80166b8:	4b84      	ldr	r3, [pc, #528]	; (80168cc <_dtoa_r+0x604>)
 80166ba:	f7e9 fdff 	bl	80002bc <__adddf3>
 80166be:	4605      	mov	r5, r0
 80166c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80166c4:	2f00      	cmp	r7, #0
 80166c6:	d15d      	bne.n	8016784 <_dtoa_r+0x4bc>
 80166c8:	2200      	movs	r2, #0
 80166ca:	4b81      	ldr	r3, [pc, #516]	; (80168d0 <_dtoa_r+0x608>)
 80166cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80166d0:	f7e9 fdf2 	bl	80002b8 <__aeabi_dsub>
 80166d4:	462a      	mov	r2, r5
 80166d6:	4633      	mov	r3, r6
 80166d8:	e9cd 0100 	strd	r0, r1, [sp]
 80166dc:	f7ea fa34 	bl	8000b48 <__aeabi_dcmpgt>
 80166e0:	2800      	cmp	r0, #0
 80166e2:	f040 8288 	bne.w	8016bf6 <_dtoa_r+0x92e>
 80166e6:	462a      	mov	r2, r5
 80166e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80166ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80166f0:	f7ea fa0c 	bl	8000b0c <__aeabi_dcmplt>
 80166f4:	2800      	cmp	r0, #0
 80166f6:	f040 827c 	bne.w	8016bf2 <_dtoa_r+0x92a>
 80166fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80166fe:	e9cd 2300 	strd	r2, r3, [sp]
 8016702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016704:	2b00      	cmp	r3, #0
 8016706:	f2c0 8150 	blt.w	80169aa <_dtoa_r+0x6e2>
 801670a:	f1ba 0f0e 	cmp.w	sl, #14
 801670e:	f300 814c 	bgt.w	80169aa <_dtoa_r+0x6e2>
 8016712:	4b6a      	ldr	r3, [pc, #424]	; (80168bc <_dtoa_r+0x5f4>)
 8016714:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016718:	ed93 7b00 	vldr	d7, [r3]
 801671c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801671e:	2b00      	cmp	r3, #0
 8016720:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016724:	f280 80d8 	bge.w	80168d8 <_dtoa_r+0x610>
 8016728:	f1b9 0f00 	cmp.w	r9, #0
 801672c:	f300 80d4 	bgt.w	80168d8 <_dtoa_r+0x610>
 8016730:	f040 825e 	bne.w	8016bf0 <_dtoa_r+0x928>
 8016734:	2200      	movs	r2, #0
 8016736:	4b66      	ldr	r3, [pc, #408]	; (80168d0 <_dtoa_r+0x608>)
 8016738:	ec51 0b17 	vmov	r0, r1, d7
 801673c:	f7e9 ff74 	bl	8000628 <__aeabi_dmul>
 8016740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016744:	f7ea f9f6 	bl	8000b34 <__aeabi_dcmpge>
 8016748:	464f      	mov	r7, r9
 801674a:	464e      	mov	r6, r9
 801674c:	2800      	cmp	r0, #0
 801674e:	f040 8234 	bne.w	8016bba <_dtoa_r+0x8f2>
 8016752:	2331      	movs	r3, #49	; 0x31
 8016754:	f10b 0501 	add.w	r5, fp, #1
 8016758:	f88b 3000 	strb.w	r3, [fp]
 801675c:	f10a 0a01 	add.w	sl, sl, #1
 8016760:	e22f      	b.n	8016bc2 <_dtoa_r+0x8fa>
 8016762:	07f2      	lsls	r2, r6, #31
 8016764:	d505      	bpl.n	8016772 <_dtoa_r+0x4aa>
 8016766:	e9d7 2300 	ldrd	r2, r3, [r7]
 801676a:	f7e9 ff5d 	bl	8000628 <__aeabi_dmul>
 801676e:	3501      	adds	r5, #1
 8016770:	2301      	movs	r3, #1
 8016772:	1076      	asrs	r6, r6, #1
 8016774:	3708      	adds	r7, #8
 8016776:	e772      	b.n	801665e <_dtoa_r+0x396>
 8016778:	2502      	movs	r5, #2
 801677a:	e774      	b.n	8016666 <_dtoa_r+0x39e>
 801677c:	f8cd a020 	str.w	sl, [sp, #32]
 8016780:	464f      	mov	r7, r9
 8016782:	e791      	b.n	80166a8 <_dtoa_r+0x3e0>
 8016784:	4b4d      	ldr	r3, [pc, #308]	; (80168bc <_dtoa_r+0x5f4>)
 8016786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801678a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801678e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016790:	2b00      	cmp	r3, #0
 8016792:	d047      	beq.n	8016824 <_dtoa_r+0x55c>
 8016794:	4602      	mov	r2, r0
 8016796:	460b      	mov	r3, r1
 8016798:	2000      	movs	r0, #0
 801679a:	494e      	ldr	r1, [pc, #312]	; (80168d4 <_dtoa_r+0x60c>)
 801679c:	f7ea f86e 	bl	800087c <__aeabi_ddiv>
 80167a0:	462a      	mov	r2, r5
 80167a2:	4633      	mov	r3, r6
 80167a4:	f7e9 fd88 	bl	80002b8 <__aeabi_dsub>
 80167a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80167ac:	465d      	mov	r5, fp
 80167ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167b2:	f7ea f9e9 	bl	8000b88 <__aeabi_d2iz>
 80167b6:	4606      	mov	r6, r0
 80167b8:	f7e9 fecc 	bl	8000554 <__aeabi_i2d>
 80167bc:	4602      	mov	r2, r0
 80167be:	460b      	mov	r3, r1
 80167c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167c4:	f7e9 fd78 	bl	80002b8 <__aeabi_dsub>
 80167c8:	3630      	adds	r6, #48	; 0x30
 80167ca:	f805 6b01 	strb.w	r6, [r5], #1
 80167ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80167d2:	e9cd 0100 	strd	r0, r1, [sp]
 80167d6:	f7ea f999 	bl	8000b0c <__aeabi_dcmplt>
 80167da:	2800      	cmp	r0, #0
 80167dc:	d163      	bne.n	80168a6 <_dtoa_r+0x5de>
 80167de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167e2:	2000      	movs	r0, #0
 80167e4:	4937      	ldr	r1, [pc, #220]	; (80168c4 <_dtoa_r+0x5fc>)
 80167e6:	f7e9 fd67 	bl	80002b8 <__aeabi_dsub>
 80167ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80167ee:	f7ea f98d 	bl	8000b0c <__aeabi_dcmplt>
 80167f2:	2800      	cmp	r0, #0
 80167f4:	f040 80b7 	bne.w	8016966 <_dtoa_r+0x69e>
 80167f8:	eba5 030b 	sub.w	r3, r5, fp
 80167fc:	429f      	cmp	r7, r3
 80167fe:	f77f af7c 	ble.w	80166fa <_dtoa_r+0x432>
 8016802:	2200      	movs	r2, #0
 8016804:	4b30      	ldr	r3, [pc, #192]	; (80168c8 <_dtoa_r+0x600>)
 8016806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801680a:	f7e9 ff0d 	bl	8000628 <__aeabi_dmul>
 801680e:	2200      	movs	r2, #0
 8016810:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016814:	4b2c      	ldr	r3, [pc, #176]	; (80168c8 <_dtoa_r+0x600>)
 8016816:	e9dd 0100 	ldrd	r0, r1, [sp]
 801681a:	f7e9 ff05 	bl	8000628 <__aeabi_dmul>
 801681e:	e9cd 0100 	strd	r0, r1, [sp]
 8016822:	e7c4      	b.n	80167ae <_dtoa_r+0x4e6>
 8016824:	462a      	mov	r2, r5
 8016826:	4633      	mov	r3, r6
 8016828:	f7e9 fefe 	bl	8000628 <__aeabi_dmul>
 801682c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016830:	eb0b 0507 	add.w	r5, fp, r7
 8016834:	465e      	mov	r6, fp
 8016836:	e9dd 0100 	ldrd	r0, r1, [sp]
 801683a:	f7ea f9a5 	bl	8000b88 <__aeabi_d2iz>
 801683e:	4607      	mov	r7, r0
 8016840:	f7e9 fe88 	bl	8000554 <__aeabi_i2d>
 8016844:	3730      	adds	r7, #48	; 0x30
 8016846:	4602      	mov	r2, r0
 8016848:	460b      	mov	r3, r1
 801684a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801684e:	f7e9 fd33 	bl	80002b8 <__aeabi_dsub>
 8016852:	f806 7b01 	strb.w	r7, [r6], #1
 8016856:	42ae      	cmp	r6, r5
 8016858:	e9cd 0100 	strd	r0, r1, [sp]
 801685c:	f04f 0200 	mov.w	r2, #0
 8016860:	d126      	bne.n	80168b0 <_dtoa_r+0x5e8>
 8016862:	4b1c      	ldr	r3, [pc, #112]	; (80168d4 <_dtoa_r+0x60c>)
 8016864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016868:	f7e9 fd28 	bl	80002bc <__adddf3>
 801686c:	4602      	mov	r2, r0
 801686e:	460b      	mov	r3, r1
 8016870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016874:	f7ea f968 	bl	8000b48 <__aeabi_dcmpgt>
 8016878:	2800      	cmp	r0, #0
 801687a:	d174      	bne.n	8016966 <_dtoa_r+0x69e>
 801687c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016880:	2000      	movs	r0, #0
 8016882:	4914      	ldr	r1, [pc, #80]	; (80168d4 <_dtoa_r+0x60c>)
 8016884:	f7e9 fd18 	bl	80002b8 <__aeabi_dsub>
 8016888:	4602      	mov	r2, r0
 801688a:	460b      	mov	r3, r1
 801688c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016890:	f7ea f93c 	bl	8000b0c <__aeabi_dcmplt>
 8016894:	2800      	cmp	r0, #0
 8016896:	f43f af30 	beq.w	80166fa <_dtoa_r+0x432>
 801689a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801689e:	2b30      	cmp	r3, #48	; 0x30
 80168a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80168a4:	d002      	beq.n	80168ac <_dtoa_r+0x5e4>
 80168a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80168aa:	e04a      	b.n	8016942 <_dtoa_r+0x67a>
 80168ac:	4615      	mov	r5, r2
 80168ae:	e7f4      	b.n	801689a <_dtoa_r+0x5d2>
 80168b0:	4b05      	ldr	r3, [pc, #20]	; (80168c8 <_dtoa_r+0x600>)
 80168b2:	f7e9 feb9 	bl	8000628 <__aeabi_dmul>
 80168b6:	e9cd 0100 	strd	r0, r1, [sp]
 80168ba:	e7bc      	b.n	8016836 <_dtoa_r+0x56e>
 80168bc:	08018ff0 	.word	0x08018ff0
 80168c0:	08018fc8 	.word	0x08018fc8
 80168c4:	3ff00000 	.word	0x3ff00000
 80168c8:	40240000 	.word	0x40240000
 80168cc:	401c0000 	.word	0x401c0000
 80168d0:	40140000 	.word	0x40140000
 80168d4:	3fe00000 	.word	0x3fe00000
 80168d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80168dc:	465d      	mov	r5, fp
 80168de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80168e2:	4630      	mov	r0, r6
 80168e4:	4639      	mov	r1, r7
 80168e6:	f7e9 ffc9 	bl	800087c <__aeabi_ddiv>
 80168ea:	f7ea f94d 	bl	8000b88 <__aeabi_d2iz>
 80168ee:	4680      	mov	r8, r0
 80168f0:	f7e9 fe30 	bl	8000554 <__aeabi_i2d>
 80168f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80168f8:	f7e9 fe96 	bl	8000628 <__aeabi_dmul>
 80168fc:	4602      	mov	r2, r0
 80168fe:	460b      	mov	r3, r1
 8016900:	4630      	mov	r0, r6
 8016902:	4639      	mov	r1, r7
 8016904:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016908:	f7e9 fcd6 	bl	80002b8 <__aeabi_dsub>
 801690c:	f805 6b01 	strb.w	r6, [r5], #1
 8016910:	eba5 060b 	sub.w	r6, r5, fp
 8016914:	45b1      	cmp	r9, r6
 8016916:	4602      	mov	r2, r0
 8016918:	460b      	mov	r3, r1
 801691a:	d139      	bne.n	8016990 <_dtoa_r+0x6c8>
 801691c:	f7e9 fcce 	bl	80002bc <__adddf3>
 8016920:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016924:	4606      	mov	r6, r0
 8016926:	460f      	mov	r7, r1
 8016928:	f7ea f90e 	bl	8000b48 <__aeabi_dcmpgt>
 801692c:	b9c8      	cbnz	r0, 8016962 <_dtoa_r+0x69a>
 801692e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016932:	4630      	mov	r0, r6
 8016934:	4639      	mov	r1, r7
 8016936:	f7ea f8df 	bl	8000af8 <__aeabi_dcmpeq>
 801693a:	b110      	cbz	r0, 8016942 <_dtoa_r+0x67a>
 801693c:	f018 0f01 	tst.w	r8, #1
 8016940:	d10f      	bne.n	8016962 <_dtoa_r+0x69a>
 8016942:	9904      	ldr	r1, [sp, #16]
 8016944:	4620      	mov	r0, r4
 8016946:	f000 fe18 	bl	801757a <_Bfree>
 801694a:	2300      	movs	r3, #0
 801694c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801694e:	702b      	strb	r3, [r5, #0]
 8016950:	f10a 0301 	add.w	r3, sl, #1
 8016954:	6013      	str	r3, [r2, #0]
 8016956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016958:	2b00      	cmp	r3, #0
 801695a:	f000 8241 	beq.w	8016de0 <_dtoa_r+0xb18>
 801695e:	601d      	str	r5, [r3, #0]
 8016960:	e23e      	b.n	8016de0 <_dtoa_r+0xb18>
 8016962:	f8cd a020 	str.w	sl, [sp, #32]
 8016966:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801696a:	2a39      	cmp	r2, #57	; 0x39
 801696c:	f105 33ff 	add.w	r3, r5, #4294967295
 8016970:	d108      	bne.n	8016984 <_dtoa_r+0x6bc>
 8016972:	459b      	cmp	fp, r3
 8016974:	d10a      	bne.n	801698c <_dtoa_r+0x6c4>
 8016976:	9b08      	ldr	r3, [sp, #32]
 8016978:	3301      	adds	r3, #1
 801697a:	9308      	str	r3, [sp, #32]
 801697c:	2330      	movs	r3, #48	; 0x30
 801697e:	f88b 3000 	strb.w	r3, [fp]
 8016982:	465b      	mov	r3, fp
 8016984:	781a      	ldrb	r2, [r3, #0]
 8016986:	3201      	adds	r2, #1
 8016988:	701a      	strb	r2, [r3, #0]
 801698a:	e78c      	b.n	80168a6 <_dtoa_r+0x5de>
 801698c:	461d      	mov	r5, r3
 801698e:	e7ea      	b.n	8016966 <_dtoa_r+0x69e>
 8016990:	2200      	movs	r2, #0
 8016992:	4b9b      	ldr	r3, [pc, #620]	; (8016c00 <_dtoa_r+0x938>)
 8016994:	f7e9 fe48 	bl	8000628 <__aeabi_dmul>
 8016998:	2200      	movs	r2, #0
 801699a:	2300      	movs	r3, #0
 801699c:	4606      	mov	r6, r0
 801699e:	460f      	mov	r7, r1
 80169a0:	f7ea f8aa 	bl	8000af8 <__aeabi_dcmpeq>
 80169a4:	2800      	cmp	r0, #0
 80169a6:	d09a      	beq.n	80168de <_dtoa_r+0x616>
 80169a8:	e7cb      	b.n	8016942 <_dtoa_r+0x67a>
 80169aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169ac:	2a00      	cmp	r2, #0
 80169ae:	f000 808b 	beq.w	8016ac8 <_dtoa_r+0x800>
 80169b2:	9a06      	ldr	r2, [sp, #24]
 80169b4:	2a01      	cmp	r2, #1
 80169b6:	dc6e      	bgt.n	8016a96 <_dtoa_r+0x7ce>
 80169b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80169ba:	2a00      	cmp	r2, #0
 80169bc:	d067      	beq.n	8016a8e <_dtoa_r+0x7c6>
 80169be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80169c2:	9f07      	ldr	r7, [sp, #28]
 80169c4:	9d05      	ldr	r5, [sp, #20]
 80169c6:	9a05      	ldr	r2, [sp, #20]
 80169c8:	2101      	movs	r1, #1
 80169ca:	441a      	add	r2, r3
 80169cc:	4620      	mov	r0, r4
 80169ce:	9205      	str	r2, [sp, #20]
 80169d0:	4498      	add	r8, r3
 80169d2:	f000 feb0 	bl	8017736 <__i2b>
 80169d6:	4606      	mov	r6, r0
 80169d8:	2d00      	cmp	r5, #0
 80169da:	dd0c      	ble.n	80169f6 <_dtoa_r+0x72e>
 80169dc:	f1b8 0f00 	cmp.w	r8, #0
 80169e0:	dd09      	ble.n	80169f6 <_dtoa_r+0x72e>
 80169e2:	4545      	cmp	r5, r8
 80169e4:	9a05      	ldr	r2, [sp, #20]
 80169e6:	462b      	mov	r3, r5
 80169e8:	bfa8      	it	ge
 80169ea:	4643      	movge	r3, r8
 80169ec:	1ad2      	subs	r2, r2, r3
 80169ee:	9205      	str	r2, [sp, #20]
 80169f0:	1aed      	subs	r5, r5, r3
 80169f2:	eba8 0803 	sub.w	r8, r8, r3
 80169f6:	9b07      	ldr	r3, [sp, #28]
 80169f8:	b1eb      	cbz	r3, 8016a36 <_dtoa_r+0x76e>
 80169fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d067      	beq.n	8016ad0 <_dtoa_r+0x808>
 8016a00:	b18f      	cbz	r7, 8016a26 <_dtoa_r+0x75e>
 8016a02:	4631      	mov	r1, r6
 8016a04:	463a      	mov	r2, r7
 8016a06:	4620      	mov	r0, r4
 8016a08:	f000 ff34 	bl	8017874 <__pow5mult>
 8016a0c:	9a04      	ldr	r2, [sp, #16]
 8016a0e:	4601      	mov	r1, r0
 8016a10:	4606      	mov	r6, r0
 8016a12:	4620      	mov	r0, r4
 8016a14:	f000 fe98 	bl	8017748 <__multiply>
 8016a18:	9904      	ldr	r1, [sp, #16]
 8016a1a:	9008      	str	r0, [sp, #32]
 8016a1c:	4620      	mov	r0, r4
 8016a1e:	f000 fdac 	bl	801757a <_Bfree>
 8016a22:	9b08      	ldr	r3, [sp, #32]
 8016a24:	9304      	str	r3, [sp, #16]
 8016a26:	9b07      	ldr	r3, [sp, #28]
 8016a28:	1bda      	subs	r2, r3, r7
 8016a2a:	d004      	beq.n	8016a36 <_dtoa_r+0x76e>
 8016a2c:	9904      	ldr	r1, [sp, #16]
 8016a2e:	4620      	mov	r0, r4
 8016a30:	f000 ff20 	bl	8017874 <__pow5mult>
 8016a34:	9004      	str	r0, [sp, #16]
 8016a36:	2101      	movs	r1, #1
 8016a38:	4620      	mov	r0, r4
 8016a3a:	f000 fe7c 	bl	8017736 <__i2b>
 8016a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a40:	4607      	mov	r7, r0
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	f000 81d0 	beq.w	8016de8 <_dtoa_r+0xb20>
 8016a48:	461a      	mov	r2, r3
 8016a4a:	4601      	mov	r1, r0
 8016a4c:	4620      	mov	r0, r4
 8016a4e:	f000 ff11 	bl	8017874 <__pow5mult>
 8016a52:	9b06      	ldr	r3, [sp, #24]
 8016a54:	2b01      	cmp	r3, #1
 8016a56:	4607      	mov	r7, r0
 8016a58:	dc40      	bgt.n	8016adc <_dtoa_r+0x814>
 8016a5a:	9b00      	ldr	r3, [sp, #0]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d139      	bne.n	8016ad4 <_dtoa_r+0x80c>
 8016a60:	9b01      	ldr	r3, [sp, #4]
 8016a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d136      	bne.n	8016ad8 <_dtoa_r+0x810>
 8016a6a:	9b01      	ldr	r3, [sp, #4]
 8016a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016a70:	0d1b      	lsrs	r3, r3, #20
 8016a72:	051b      	lsls	r3, r3, #20
 8016a74:	b12b      	cbz	r3, 8016a82 <_dtoa_r+0x7ba>
 8016a76:	9b05      	ldr	r3, [sp, #20]
 8016a78:	3301      	adds	r3, #1
 8016a7a:	9305      	str	r3, [sp, #20]
 8016a7c:	f108 0801 	add.w	r8, r8, #1
 8016a80:	2301      	movs	r3, #1
 8016a82:	9307      	str	r3, [sp, #28]
 8016a84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d12a      	bne.n	8016ae0 <_dtoa_r+0x818>
 8016a8a:	2001      	movs	r0, #1
 8016a8c:	e030      	b.n	8016af0 <_dtoa_r+0x828>
 8016a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016a94:	e795      	b.n	80169c2 <_dtoa_r+0x6fa>
 8016a96:	9b07      	ldr	r3, [sp, #28]
 8016a98:	f109 37ff 	add.w	r7, r9, #4294967295
 8016a9c:	42bb      	cmp	r3, r7
 8016a9e:	bfbf      	itttt	lt
 8016aa0:	9b07      	ldrlt	r3, [sp, #28]
 8016aa2:	9707      	strlt	r7, [sp, #28]
 8016aa4:	1afa      	sublt	r2, r7, r3
 8016aa6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016aa8:	bfbb      	ittet	lt
 8016aaa:	189b      	addlt	r3, r3, r2
 8016aac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016aae:	1bdf      	subge	r7, r3, r7
 8016ab0:	2700      	movlt	r7, #0
 8016ab2:	f1b9 0f00 	cmp.w	r9, #0
 8016ab6:	bfb5      	itete	lt
 8016ab8:	9b05      	ldrlt	r3, [sp, #20]
 8016aba:	9d05      	ldrge	r5, [sp, #20]
 8016abc:	eba3 0509 	sublt.w	r5, r3, r9
 8016ac0:	464b      	movge	r3, r9
 8016ac2:	bfb8      	it	lt
 8016ac4:	2300      	movlt	r3, #0
 8016ac6:	e77e      	b.n	80169c6 <_dtoa_r+0x6fe>
 8016ac8:	9f07      	ldr	r7, [sp, #28]
 8016aca:	9d05      	ldr	r5, [sp, #20]
 8016acc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016ace:	e783      	b.n	80169d8 <_dtoa_r+0x710>
 8016ad0:	9a07      	ldr	r2, [sp, #28]
 8016ad2:	e7ab      	b.n	8016a2c <_dtoa_r+0x764>
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	e7d4      	b.n	8016a82 <_dtoa_r+0x7ba>
 8016ad8:	9b00      	ldr	r3, [sp, #0]
 8016ada:	e7d2      	b.n	8016a82 <_dtoa_r+0x7ba>
 8016adc:	2300      	movs	r3, #0
 8016ade:	9307      	str	r3, [sp, #28]
 8016ae0:	693b      	ldr	r3, [r7, #16]
 8016ae2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016ae6:	6918      	ldr	r0, [r3, #16]
 8016ae8:	f000 fdd7 	bl	801769a <__hi0bits>
 8016aec:	f1c0 0020 	rsb	r0, r0, #32
 8016af0:	4440      	add	r0, r8
 8016af2:	f010 001f 	ands.w	r0, r0, #31
 8016af6:	d047      	beq.n	8016b88 <_dtoa_r+0x8c0>
 8016af8:	f1c0 0320 	rsb	r3, r0, #32
 8016afc:	2b04      	cmp	r3, #4
 8016afe:	dd3b      	ble.n	8016b78 <_dtoa_r+0x8b0>
 8016b00:	9b05      	ldr	r3, [sp, #20]
 8016b02:	f1c0 001c 	rsb	r0, r0, #28
 8016b06:	4403      	add	r3, r0
 8016b08:	9305      	str	r3, [sp, #20]
 8016b0a:	4405      	add	r5, r0
 8016b0c:	4480      	add	r8, r0
 8016b0e:	9b05      	ldr	r3, [sp, #20]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	dd05      	ble.n	8016b20 <_dtoa_r+0x858>
 8016b14:	461a      	mov	r2, r3
 8016b16:	9904      	ldr	r1, [sp, #16]
 8016b18:	4620      	mov	r0, r4
 8016b1a:	f000 fef9 	bl	8017910 <__lshift>
 8016b1e:	9004      	str	r0, [sp, #16]
 8016b20:	f1b8 0f00 	cmp.w	r8, #0
 8016b24:	dd05      	ble.n	8016b32 <_dtoa_r+0x86a>
 8016b26:	4639      	mov	r1, r7
 8016b28:	4642      	mov	r2, r8
 8016b2a:	4620      	mov	r0, r4
 8016b2c:	f000 fef0 	bl	8017910 <__lshift>
 8016b30:	4607      	mov	r7, r0
 8016b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b34:	b353      	cbz	r3, 8016b8c <_dtoa_r+0x8c4>
 8016b36:	4639      	mov	r1, r7
 8016b38:	9804      	ldr	r0, [sp, #16]
 8016b3a:	f000 ff3d 	bl	80179b8 <__mcmp>
 8016b3e:	2800      	cmp	r0, #0
 8016b40:	da24      	bge.n	8016b8c <_dtoa_r+0x8c4>
 8016b42:	2300      	movs	r3, #0
 8016b44:	220a      	movs	r2, #10
 8016b46:	9904      	ldr	r1, [sp, #16]
 8016b48:	4620      	mov	r0, r4
 8016b4a:	f000 fd2d 	bl	80175a8 <__multadd>
 8016b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b50:	9004      	str	r0, [sp, #16]
 8016b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	f000 814d 	beq.w	8016df6 <_dtoa_r+0xb2e>
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	4631      	mov	r1, r6
 8016b60:	220a      	movs	r2, #10
 8016b62:	4620      	mov	r0, r4
 8016b64:	f000 fd20 	bl	80175a8 <__multadd>
 8016b68:	9b02      	ldr	r3, [sp, #8]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	4606      	mov	r6, r0
 8016b6e:	dc4f      	bgt.n	8016c10 <_dtoa_r+0x948>
 8016b70:	9b06      	ldr	r3, [sp, #24]
 8016b72:	2b02      	cmp	r3, #2
 8016b74:	dd4c      	ble.n	8016c10 <_dtoa_r+0x948>
 8016b76:	e011      	b.n	8016b9c <_dtoa_r+0x8d4>
 8016b78:	d0c9      	beq.n	8016b0e <_dtoa_r+0x846>
 8016b7a:	9a05      	ldr	r2, [sp, #20]
 8016b7c:	331c      	adds	r3, #28
 8016b7e:	441a      	add	r2, r3
 8016b80:	9205      	str	r2, [sp, #20]
 8016b82:	441d      	add	r5, r3
 8016b84:	4498      	add	r8, r3
 8016b86:	e7c2      	b.n	8016b0e <_dtoa_r+0x846>
 8016b88:	4603      	mov	r3, r0
 8016b8a:	e7f6      	b.n	8016b7a <_dtoa_r+0x8b2>
 8016b8c:	f1b9 0f00 	cmp.w	r9, #0
 8016b90:	dc38      	bgt.n	8016c04 <_dtoa_r+0x93c>
 8016b92:	9b06      	ldr	r3, [sp, #24]
 8016b94:	2b02      	cmp	r3, #2
 8016b96:	dd35      	ble.n	8016c04 <_dtoa_r+0x93c>
 8016b98:	f8cd 9008 	str.w	r9, [sp, #8]
 8016b9c:	9b02      	ldr	r3, [sp, #8]
 8016b9e:	b963      	cbnz	r3, 8016bba <_dtoa_r+0x8f2>
 8016ba0:	4639      	mov	r1, r7
 8016ba2:	2205      	movs	r2, #5
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f000 fcff 	bl	80175a8 <__multadd>
 8016baa:	4601      	mov	r1, r0
 8016bac:	4607      	mov	r7, r0
 8016bae:	9804      	ldr	r0, [sp, #16]
 8016bb0:	f000 ff02 	bl	80179b8 <__mcmp>
 8016bb4:	2800      	cmp	r0, #0
 8016bb6:	f73f adcc 	bgt.w	8016752 <_dtoa_r+0x48a>
 8016bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bbc:	465d      	mov	r5, fp
 8016bbe:	ea6f 0a03 	mvn.w	sl, r3
 8016bc2:	f04f 0900 	mov.w	r9, #0
 8016bc6:	4639      	mov	r1, r7
 8016bc8:	4620      	mov	r0, r4
 8016bca:	f000 fcd6 	bl	801757a <_Bfree>
 8016bce:	2e00      	cmp	r6, #0
 8016bd0:	f43f aeb7 	beq.w	8016942 <_dtoa_r+0x67a>
 8016bd4:	f1b9 0f00 	cmp.w	r9, #0
 8016bd8:	d005      	beq.n	8016be6 <_dtoa_r+0x91e>
 8016bda:	45b1      	cmp	r9, r6
 8016bdc:	d003      	beq.n	8016be6 <_dtoa_r+0x91e>
 8016bde:	4649      	mov	r1, r9
 8016be0:	4620      	mov	r0, r4
 8016be2:	f000 fcca 	bl	801757a <_Bfree>
 8016be6:	4631      	mov	r1, r6
 8016be8:	4620      	mov	r0, r4
 8016bea:	f000 fcc6 	bl	801757a <_Bfree>
 8016bee:	e6a8      	b.n	8016942 <_dtoa_r+0x67a>
 8016bf0:	2700      	movs	r7, #0
 8016bf2:	463e      	mov	r6, r7
 8016bf4:	e7e1      	b.n	8016bba <_dtoa_r+0x8f2>
 8016bf6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016bfa:	463e      	mov	r6, r7
 8016bfc:	e5a9      	b.n	8016752 <_dtoa_r+0x48a>
 8016bfe:	bf00      	nop
 8016c00:	40240000 	.word	0x40240000
 8016c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c06:	f8cd 9008 	str.w	r9, [sp, #8]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	f000 80fa 	beq.w	8016e04 <_dtoa_r+0xb3c>
 8016c10:	2d00      	cmp	r5, #0
 8016c12:	dd05      	ble.n	8016c20 <_dtoa_r+0x958>
 8016c14:	4631      	mov	r1, r6
 8016c16:	462a      	mov	r2, r5
 8016c18:	4620      	mov	r0, r4
 8016c1a:	f000 fe79 	bl	8017910 <__lshift>
 8016c1e:	4606      	mov	r6, r0
 8016c20:	9b07      	ldr	r3, [sp, #28]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d04c      	beq.n	8016cc0 <_dtoa_r+0x9f8>
 8016c26:	6871      	ldr	r1, [r6, #4]
 8016c28:	4620      	mov	r0, r4
 8016c2a:	f000 fc72 	bl	8017512 <_Balloc>
 8016c2e:	6932      	ldr	r2, [r6, #16]
 8016c30:	3202      	adds	r2, #2
 8016c32:	4605      	mov	r5, r0
 8016c34:	0092      	lsls	r2, r2, #2
 8016c36:	f106 010c 	add.w	r1, r6, #12
 8016c3a:	300c      	adds	r0, #12
 8016c3c:	f000 fc5e 	bl	80174fc <memcpy>
 8016c40:	2201      	movs	r2, #1
 8016c42:	4629      	mov	r1, r5
 8016c44:	4620      	mov	r0, r4
 8016c46:	f000 fe63 	bl	8017910 <__lshift>
 8016c4a:	9b00      	ldr	r3, [sp, #0]
 8016c4c:	f8cd b014 	str.w	fp, [sp, #20]
 8016c50:	f003 0301 	and.w	r3, r3, #1
 8016c54:	46b1      	mov	r9, r6
 8016c56:	9307      	str	r3, [sp, #28]
 8016c58:	4606      	mov	r6, r0
 8016c5a:	4639      	mov	r1, r7
 8016c5c:	9804      	ldr	r0, [sp, #16]
 8016c5e:	f7ff faa5 	bl	80161ac <quorem>
 8016c62:	4649      	mov	r1, r9
 8016c64:	4605      	mov	r5, r0
 8016c66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016c6a:	9804      	ldr	r0, [sp, #16]
 8016c6c:	f000 fea4 	bl	80179b8 <__mcmp>
 8016c70:	4632      	mov	r2, r6
 8016c72:	9000      	str	r0, [sp, #0]
 8016c74:	4639      	mov	r1, r7
 8016c76:	4620      	mov	r0, r4
 8016c78:	f000 feb8 	bl	80179ec <__mdiff>
 8016c7c:	68c3      	ldr	r3, [r0, #12]
 8016c7e:	4602      	mov	r2, r0
 8016c80:	bb03      	cbnz	r3, 8016cc4 <_dtoa_r+0x9fc>
 8016c82:	4601      	mov	r1, r0
 8016c84:	9008      	str	r0, [sp, #32]
 8016c86:	9804      	ldr	r0, [sp, #16]
 8016c88:	f000 fe96 	bl	80179b8 <__mcmp>
 8016c8c:	9a08      	ldr	r2, [sp, #32]
 8016c8e:	4603      	mov	r3, r0
 8016c90:	4611      	mov	r1, r2
 8016c92:	4620      	mov	r0, r4
 8016c94:	9308      	str	r3, [sp, #32]
 8016c96:	f000 fc70 	bl	801757a <_Bfree>
 8016c9a:	9b08      	ldr	r3, [sp, #32]
 8016c9c:	b9a3      	cbnz	r3, 8016cc8 <_dtoa_r+0xa00>
 8016c9e:	9a06      	ldr	r2, [sp, #24]
 8016ca0:	b992      	cbnz	r2, 8016cc8 <_dtoa_r+0xa00>
 8016ca2:	9a07      	ldr	r2, [sp, #28]
 8016ca4:	b982      	cbnz	r2, 8016cc8 <_dtoa_r+0xa00>
 8016ca6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016caa:	d029      	beq.n	8016d00 <_dtoa_r+0xa38>
 8016cac:	9b00      	ldr	r3, [sp, #0]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	dd01      	ble.n	8016cb6 <_dtoa_r+0x9ee>
 8016cb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016cb6:	9b05      	ldr	r3, [sp, #20]
 8016cb8:	1c5d      	adds	r5, r3, #1
 8016cba:	f883 8000 	strb.w	r8, [r3]
 8016cbe:	e782      	b.n	8016bc6 <_dtoa_r+0x8fe>
 8016cc0:	4630      	mov	r0, r6
 8016cc2:	e7c2      	b.n	8016c4a <_dtoa_r+0x982>
 8016cc4:	2301      	movs	r3, #1
 8016cc6:	e7e3      	b.n	8016c90 <_dtoa_r+0x9c8>
 8016cc8:	9a00      	ldr	r2, [sp, #0]
 8016cca:	2a00      	cmp	r2, #0
 8016ccc:	db04      	blt.n	8016cd8 <_dtoa_r+0xa10>
 8016cce:	d125      	bne.n	8016d1c <_dtoa_r+0xa54>
 8016cd0:	9a06      	ldr	r2, [sp, #24]
 8016cd2:	bb1a      	cbnz	r2, 8016d1c <_dtoa_r+0xa54>
 8016cd4:	9a07      	ldr	r2, [sp, #28]
 8016cd6:	bb0a      	cbnz	r2, 8016d1c <_dtoa_r+0xa54>
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	ddec      	ble.n	8016cb6 <_dtoa_r+0x9ee>
 8016cdc:	2201      	movs	r2, #1
 8016cde:	9904      	ldr	r1, [sp, #16]
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	f000 fe15 	bl	8017910 <__lshift>
 8016ce6:	4639      	mov	r1, r7
 8016ce8:	9004      	str	r0, [sp, #16]
 8016cea:	f000 fe65 	bl	80179b8 <__mcmp>
 8016cee:	2800      	cmp	r0, #0
 8016cf0:	dc03      	bgt.n	8016cfa <_dtoa_r+0xa32>
 8016cf2:	d1e0      	bne.n	8016cb6 <_dtoa_r+0x9ee>
 8016cf4:	f018 0f01 	tst.w	r8, #1
 8016cf8:	d0dd      	beq.n	8016cb6 <_dtoa_r+0x9ee>
 8016cfa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016cfe:	d1d8      	bne.n	8016cb2 <_dtoa_r+0x9ea>
 8016d00:	9b05      	ldr	r3, [sp, #20]
 8016d02:	9a05      	ldr	r2, [sp, #20]
 8016d04:	1c5d      	adds	r5, r3, #1
 8016d06:	2339      	movs	r3, #57	; 0x39
 8016d08:	7013      	strb	r3, [r2, #0]
 8016d0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016d0e:	2b39      	cmp	r3, #57	; 0x39
 8016d10:	f105 32ff 	add.w	r2, r5, #4294967295
 8016d14:	d04f      	beq.n	8016db6 <_dtoa_r+0xaee>
 8016d16:	3301      	adds	r3, #1
 8016d18:	7013      	strb	r3, [r2, #0]
 8016d1a:	e754      	b.n	8016bc6 <_dtoa_r+0x8fe>
 8016d1c:	9a05      	ldr	r2, [sp, #20]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	f102 0501 	add.w	r5, r2, #1
 8016d24:	dd06      	ble.n	8016d34 <_dtoa_r+0xa6c>
 8016d26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016d2a:	d0e9      	beq.n	8016d00 <_dtoa_r+0xa38>
 8016d2c:	f108 0801 	add.w	r8, r8, #1
 8016d30:	9b05      	ldr	r3, [sp, #20]
 8016d32:	e7c2      	b.n	8016cba <_dtoa_r+0x9f2>
 8016d34:	9a02      	ldr	r2, [sp, #8]
 8016d36:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016d3a:	eba5 030b 	sub.w	r3, r5, fp
 8016d3e:	4293      	cmp	r3, r2
 8016d40:	d021      	beq.n	8016d86 <_dtoa_r+0xabe>
 8016d42:	2300      	movs	r3, #0
 8016d44:	220a      	movs	r2, #10
 8016d46:	9904      	ldr	r1, [sp, #16]
 8016d48:	4620      	mov	r0, r4
 8016d4a:	f000 fc2d 	bl	80175a8 <__multadd>
 8016d4e:	45b1      	cmp	r9, r6
 8016d50:	9004      	str	r0, [sp, #16]
 8016d52:	f04f 0300 	mov.w	r3, #0
 8016d56:	f04f 020a 	mov.w	r2, #10
 8016d5a:	4649      	mov	r1, r9
 8016d5c:	4620      	mov	r0, r4
 8016d5e:	d105      	bne.n	8016d6c <_dtoa_r+0xaa4>
 8016d60:	f000 fc22 	bl	80175a8 <__multadd>
 8016d64:	4681      	mov	r9, r0
 8016d66:	4606      	mov	r6, r0
 8016d68:	9505      	str	r5, [sp, #20]
 8016d6a:	e776      	b.n	8016c5a <_dtoa_r+0x992>
 8016d6c:	f000 fc1c 	bl	80175a8 <__multadd>
 8016d70:	4631      	mov	r1, r6
 8016d72:	4681      	mov	r9, r0
 8016d74:	2300      	movs	r3, #0
 8016d76:	220a      	movs	r2, #10
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f000 fc15 	bl	80175a8 <__multadd>
 8016d7e:	4606      	mov	r6, r0
 8016d80:	e7f2      	b.n	8016d68 <_dtoa_r+0xaa0>
 8016d82:	f04f 0900 	mov.w	r9, #0
 8016d86:	2201      	movs	r2, #1
 8016d88:	9904      	ldr	r1, [sp, #16]
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	f000 fdc0 	bl	8017910 <__lshift>
 8016d90:	4639      	mov	r1, r7
 8016d92:	9004      	str	r0, [sp, #16]
 8016d94:	f000 fe10 	bl	80179b8 <__mcmp>
 8016d98:	2800      	cmp	r0, #0
 8016d9a:	dcb6      	bgt.n	8016d0a <_dtoa_r+0xa42>
 8016d9c:	d102      	bne.n	8016da4 <_dtoa_r+0xadc>
 8016d9e:	f018 0f01 	tst.w	r8, #1
 8016da2:	d1b2      	bne.n	8016d0a <_dtoa_r+0xa42>
 8016da4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016da8:	2b30      	cmp	r3, #48	; 0x30
 8016daa:	f105 32ff 	add.w	r2, r5, #4294967295
 8016dae:	f47f af0a 	bne.w	8016bc6 <_dtoa_r+0x8fe>
 8016db2:	4615      	mov	r5, r2
 8016db4:	e7f6      	b.n	8016da4 <_dtoa_r+0xadc>
 8016db6:	4593      	cmp	fp, r2
 8016db8:	d105      	bne.n	8016dc6 <_dtoa_r+0xafe>
 8016dba:	2331      	movs	r3, #49	; 0x31
 8016dbc:	f10a 0a01 	add.w	sl, sl, #1
 8016dc0:	f88b 3000 	strb.w	r3, [fp]
 8016dc4:	e6ff      	b.n	8016bc6 <_dtoa_r+0x8fe>
 8016dc6:	4615      	mov	r5, r2
 8016dc8:	e79f      	b.n	8016d0a <_dtoa_r+0xa42>
 8016dca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016e30 <_dtoa_r+0xb68>
 8016dce:	e007      	b.n	8016de0 <_dtoa_r+0xb18>
 8016dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016dd2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016e34 <_dtoa_r+0xb6c>
 8016dd6:	b11b      	cbz	r3, 8016de0 <_dtoa_r+0xb18>
 8016dd8:	f10b 0308 	add.w	r3, fp, #8
 8016ddc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016dde:	6013      	str	r3, [r2, #0]
 8016de0:	4658      	mov	r0, fp
 8016de2:	b017      	add	sp, #92	; 0x5c
 8016de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016de8:	9b06      	ldr	r3, [sp, #24]
 8016dea:	2b01      	cmp	r3, #1
 8016dec:	f77f ae35 	ble.w	8016a5a <_dtoa_r+0x792>
 8016df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016df2:	9307      	str	r3, [sp, #28]
 8016df4:	e649      	b.n	8016a8a <_dtoa_r+0x7c2>
 8016df6:	9b02      	ldr	r3, [sp, #8]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	dc03      	bgt.n	8016e04 <_dtoa_r+0xb3c>
 8016dfc:	9b06      	ldr	r3, [sp, #24]
 8016dfe:	2b02      	cmp	r3, #2
 8016e00:	f73f aecc 	bgt.w	8016b9c <_dtoa_r+0x8d4>
 8016e04:	465d      	mov	r5, fp
 8016e06:	4639      	mov	r1, r7
 8016e08:	9804      	ldr	r0, [sp, #16]
 8016e0a:	f7ff f9cf 	bl	80161ac <quorem>
 8016e0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016e12:	f805 8b01 	strb.w	r8, [r5], #1
 8016e16:	9a02      	ldr	r2, [sp, #8]
 8016e18:	eba5 030b 	sub.w	r3, r5, fp
 8016e1c:	429a      	cmp	r2, r3
 8016e1e:	ddb0      	ble.n	8016d82 <_dtoa_r+0xaba>
 8016e20:	2300      	movs	r3, #0
 8016e22:	220a      	movs	r2, #10
 8016e24:	9904      	ldr	r1, [sp, #16]
 8016e26:	4620      	mov	r0, r4
 8016e28:	f000 fbbe 	bl	80175a8 <__multadd>
 8016e2c:	9004      	str	r0, [sp, #16]
 8016e2e:	e7ea      	b.n	8016e06 <_dtoa_r+0xb3e>
 8016e30:	080190eb 	.word	0x080190eb
 8016e34:	08018fb0 	.word	0x08018fb0

08016e38 <rshift>:
 8016e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e3a:	6906      	ldr	r6, [r0, #16]
 8016e3c:	114b      	asrs	r3, r1, #5
 8016e3e:	429e      	cmp	r6, r3
 8016e40:	f100 0414 	add.w	r4, r0, #20
 8016e44:	dd30      	ble.n	8016ea8 <rshift+0x70>
 8016e46:	f011 011f 	ands.w	r1, r1, #31
 8016e4a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8016e4e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016e52:	d108      	bne.n	8016e66 <rshift+0x2e>
 8016e54:	4621      	mov	r1, r4
 8016e56:	42b2      	cmp	r2, r6
 8016e58:	460b      	mov	r3, r1
 8016e5a:	d211      	bcs.n	8016e80 <rshift+0x48>
 8016e5c:	f852 3b04 	ldr.w	r3, [r2], #4
 8016e60:	f841 3b04 	str.w	r3, [r1], #4
 8016e64:	e7f7      	b.n	8016e56 <rshift+0x1e>
 8016e66:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8016e6a:	f1c1 0c20 	rsb	ip, r1, #32
 8016e6e:	40cd      	lsrs	r5, r1
 8016e70:	3204      	adds	r2, #4
 8016e72:	4623      	mov	r3, r4
 8016e74:	42b2      	cmp	r2, r6
 8016e76:	4617      	mov	r7, r2
 8016e78:	d30c      	bcc.n	8016e94 <rshift+0x5c>
 8016e7a:	601d      	str	r5, [r3, #0]
 8016e7c:	b105      	cbz	r5, 8016e80 <rshift+0x48>
 8016e7e:	3304      	adds	r3, #4
 8016e80:	1b1a      	subs	r2, r3, r4
 8016e82:	42a3      	cmp	r3, r4
 8016e84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016e88:	bf08      	it	eq
 8016e8a:	2300      	moveq	r3, #0
 8016e8c:	6102      	str	r2, [r0, #16]
 8016e8e:	bf08      	it	eq
 8016e90:	6143      	streq	r3, [r0, #20]
 8016e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e94:	683f      	ldr	r7, [r7, #0]
 8016e96:	fa07 f70c 	lsl.w	r7, r7, ip
 8016e9a:	433d      	orrs	r5, r7
 8016e9c:	f843 5b04 	str.w	r5, [r3], #4
 8016ea0:	f852 5b04 	ldr.w	r5, [r2], #4
 8016ea4:	40cd      	lsrs	r5, r1
 8016ea6:	e7e5      	b.n	8016e74 <rshift+0x3c>
 8016ea8:	4623      	mov	r3, r4
 8016eaa:	e7e9      	b.n	8016e80 <rshift+0x48>

08016eac <__hexdig_fun>:
 8016eac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016eb0:	2b09      	cmp	r3, #9
 8016eb2:	d802      	bhi.n	8016eba <__hexdig_fun+0xe>
 8016eb4:	3820      	subs	r0, #32
 8016eb6:	b2c0      	uxtb	r0, r0
 8016eb8:	4770      	bx	lr
 8016eba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016ebe:	2b05      	cmp	r3, #5
 8016ec0:	d801      	bhi.n	8016ec6 <__hexdig_fun+0x1a>
 8016ec2:	3847      	subs	r0, #71	; 0x47
 8016ec4:	e7f7      	b.n	8016eb6 <__hexdig_fun+0xa>
 8016ec6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016eca:	2b05      	cmp	r3, #5
 8016ecc:	d801      	bhi.n	8016ed2 <__hexdig_fun+0x26>
 8016ece:	3827      	subs	r0, #39	; 0x27
 8016ed0:	e7f1      	b.n	8016eb6 <__hexdig_fun+0xa>
 8016ed2:	2000      	movs	r0, #0
 8016ed4:	4770      	bx	lr

08016ed6 <__gethex>:
 8016ed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eda:	b08b      	sub	sp, #44	; 0x2c
 8016edc:	468a      	mov	sl, r1
 8016ede:	9002      	str	r0, [sp, #8]
 8016ee0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016ee2:	9306      	str	r3, [sp, #24]
 8016ee4:	4690      	mov	r8, r2
 8016ee6:	f000 fadf 	bl	80174a8 <__localeconv_l>
 8016eea:	6803      	ldr	r3, [r0, #0]
 8016eec:	9303      	str	r3, [sp, #12]
 8016eee:	4618      	mov	r0, r3
 8016ef0:	f7e9 f986 	bl	8000200 <strlen>
 8016ef4:	9b03      	ldr	r3, [sp, #12]
 8016ef6:	9001      	str	r0, [sp, #4]
 8016ef8:	4403      	add	r3, r0
 8016efa:	f04f 0b00 	mov.w	fp, #0
 8016efe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016f02:	9307      	str	r3, [sp, #28]
 8016f04:	f8da 3000 	ldr.w	r3, [sl]
 8016f08:	3302      	adds	r3, #2
 8016f0a:	461f      	mov	r7, r3
 8016f0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016f10:	2830      	cmp	r0, #48	; 0x30
 8016f12:	d06c      	beq.n	8016fee <__gethex+0x118>
 8016f14:	f7ff ffca 	bl	8016eac <__hexdig_fun>
 8016f18:	4604      	mov	r4, r0
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	d16a      	bne.n	8016ff4 <__gethex+0x11e>
 8016f1e:	9a01      	ldr	r2, [sp, #4]
 8016f20:	9903      	ldr	r1, [sp, #12]
 8016f22:	4638      	mov	r0, r7
 8016f24:	f001 fc40 	bl	80187a8 <strncmp>
 8016f28:	2800      	cmp	r0, #0
 8016f2a:	d166      	bne.n	8016ffa <__gethex+0x124>
 8016f2c:	9b01      	ldr	r3, [sp, #4]
 8016f2e:	5cf8      	ldrb	r0, [r7, r3]
 8016f30:	18fe      	adds	r6, r7, r3
 8016f32:	f7ff ffbb 	bl	8016eac <__hexdig_fun>
 8016f36:	2800      	cmp	r0, #0
 8016f38:	d062      	beq.n	8017000 <__gethex+0x12a>
 8016f3a:	4633      	mov	r3, r6
 8016f3c:	7818      	ldrb	r0, [r3, #0]
 8016f3e:	2830      	cmp	r0, #48	; 0x30
 8016f40:	461f      	mov	r7, r3
 8016f42:	f103 0301 	add.w	r3, r3, #1
 8016f46:	d0f9      	beq.n	8016f3c <__gethex+0x66>
 8016f48:	f7ff ffb0 	bl	8016eac <__hexdig_fun>
 8016f4c:	fab0 f580 	clz	r5, r0
 8016f50:	096d      	lsrs	r5, r5, #5
 8016f52:	4634      	mov	r4, r6
 8016f54:	f04f 0b01 	mov.w	fp, #1
 8016f58:	463a      	mov	r2, r7
 8016f5a:	4616      	mov	r6, r2
 8016f5c:	3201      	adds	r2, #1
 8016f5e:	7830      	ldrb	r0, [r6, #0]
 8016f60:	f7ff ffa4 	bl	8016eac <__hexdig_fun>
 8016f64:	2800      	cmp	r0, #0
 8016f66:	d1f8      	bne.n	8016f5a <__gethex+0x84>
 8016f68:	9a01      	ldr	r2, [sp, #4]
 8016f6a:	9903      	ldr	r1, [sp, #12]
 8016f6c:	4630      	mov	r0, r6
 8016f6e:	f001 fc1b 	bl	80187a8 <strncmp>
 8016f72:	b950      	cbnz	r0, 8016f8a <__gethex+0xb4>
 8016f74:	b954      	cbnz	r4, 8016f8c <__gethex+0xb6>
 8016f76:	9b01      	ldr	r3, [sp, #4]
 8016f78:	18f4      	adds	r4, r6, r3
 8016f7a:	4622      	mov	r2, r4
 8016f7c:	4616      	mov	r6, r2
 8016f7e:	3201      	adds	r2, #1
 8016f80:	7830      	ldrb	r0, [r6, #0]
 8016f82:	f7ff ff93 	bl	8016eac <__hexdig_fun>
 8016f86:	2800      	cmp	r0, #0
 8016f88:	d1f8      	bne.n	8016f7c <__gethex+0xa6>
 8016f8a:	b10c      	cbz	r4, 8016f90 <__gethex+0xba>
 8016f8c:	1ba4      	subs	r4, r4, r6
 8016f8e:	00a4      	lsls	r4, r4, #2
 8016f90:	7833      	ldrb	r3, [r6, #0]
 8016f92:	2b50      	cmp	r3, #80	; 0x50
 8016f94:	d001      	beq.n	8016f9a <__gethex+0xc4>
 8016f96:	2b70      	cmp	r3, #112	; 0x70
 8016f98:	d140      	bne.n	801701c <__gethex+0x146>
 8016f9a:	7873      	ldrb	r3, [r6, #1]
 8016f9c:	2b2b      	cmp	r3, #43	; 0x2b
 8016f9e:	d031      	beq.n	8017004 <__gethex+0x12e>
 8016fa0:	2b2d      	cmp	r3, #45	; 0x2d
 8016fa2:	d033      	beq.n	801700c <__gethex+0x136>
 8016fa4:	1c71      	adds	r1, r6, #1
 8016fa6:	f04f 0900 	mov.w	r9, #0
 8016faa:	7808      	ldrb	r0, [r1, #0]
 8016fac:	f7ff ff7e 	bl	8016eac <__hexdig_fun>
 8016fb0:	1e43      	subs	r3, r0, #1
 8016fb2:	b2db      	uxtb	r3, r3
 8016fb4:	2b18      	cmp	r3, #24
 8016fb6:	d831      	bhi.n	801701c <__gethex+0x146>
 8016fb8:	f1a0 0210 	sub.w	r2, r0, #16
 8016fbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016fc0:	f7ff ff74 	bl	8016eac <__hexdig_fun>
 8016fc4:	1e43      	subs	r3, r0, #1
 8016fc6:	b2db      	uxtb	r3, r3
 8016fc8:	2b18      	cmp	r3, #24
 8016fca:	d922      	bls.n	8017012 <__gethex+0x13c>
 8016fcc:	f1b9 0f00 	cmp.w	r9, #0
 8016fd0:	d000      	beq.n	8016fd4 <__gethex+0xfe>
 8016fd2:	4252      	negs	r2, r2
 8016fd4:	4414      	add	r4, r2
 8016fd6:	f8ca 1000 	str.w	r1, [sl]
 8016fda:	b30d      	cbz	r5, 8017020 <__gethex+0x14a>
 8016fdc:	f1bb 0f00 	cmp.w	fp, #0
 8016fe0:	bf0c      	ite	eq
 8016fe2:	2706      	moveq	r7, #6
 8016fe4:	2700      	movne	r7, #0
 8016fe6:	4638      	mov	r0, r7
 8016fe8:	b00b      	add	sp, #44	; 0x2c
 8016fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fee:	f10b 0b01 	add.w	fp, fp, #1
 8016ff2:	e78a      	b.n	8016f0a <__gethex+0x34>
 8016ff4:	2500      	movs	r5, #0
 8016ff6:	462c      	mov	r4, r5
 8016ff8:	e7ae      	b.n	8016f58 <__gethex+0x82>
 8016ffa:	463e      	mov	r6, r7
 8016ffc:	2501      	movs	r5, #1
 8016ffe:	e7c7      	b.n	8016f90 <__gethex+0xba>
 8017000:	4604      	mov	r4, r0
 8017002:	e7fb      	b.n	8016ffc <__gethex+0x126>
 8017004:	f04f 0900 	mov.w	r9, #0
 8017008:	1cb1      	adds	r1, r6, #2
 801700a:	e7ce      	b.n	8016faa <__gethex+0xd4>
 801700c:	f04f 0901 	mov.w	r9, #1
 8017010:	e7fa      	b.n	8017008 <__gethex+0x132>
 8017012:	230a      	movs	r3, #10
 8017014:	fb03 0202 	mla	r2, r3, r2, r0
 8017018:	3a10      	subs	r2, #16
 801701a:	e7cf      	b.n	8016fbc <__gethex+0xe6>
 801701c:	4631      	mov	r1, r6
 801701e:	e7da      	b.n	8016fd6 <__gethex+0x100>
 8017020:	1bf3      	subs	r3, r6, r7
 8017022:	3b01      	subs	r3, #1
 8017024:	4629      	mov	r1, r5
 8017026:	2b07      	cmp	r3, #7
 8017028:	dc49      	bgt.n	80170be <__gethex+0x1e8>
 801702a:	9802      	ldr	r0, [sp, #8]
 801702c:	f000 fa71 	bl	8017512 <_Balloc>
 8017030:	9b01      	ldr	r3, [sp, #4]
 8017032:	f100 0914 	add.w	r9, r0, #20
 8017036:	f04f 0b00 	mov.w	fp, #0
 801703a:	f1c3 0301 	rsb	r3, r3, #1
 801703e:	4605      	mov	r5, r0
 8017040:	f8cd 9010 	str.w	r9, [sp, #16]
 8017044:	46da      	mov	sl, fp
 8017046:	9308      	str	r3, [sp, #32]
 8017048:	42b7      	cmp	r7, r6
 801704a:	d33b      	bcc.n	80170c4 <__gethex+0x1ee>
 801704c:	9804      	ldr	r0, [sp, #16]
 801704e:	f840 ab04 	str.w	sl, [r0], #4
 8017052:	eba0 0009 	sub.w	r0, r0, r9
 8017056:	1080      	asrs	r0, r0, #2
 8017058:	6128      	str	r0, [r5, #16]
 801705a:	0147      	lsls	r7, r0, #5
 801705c:	4650      	mov	r0, sl
 801705e:	f000 fb1c 	bl	801769a <__hi0bits>
 8017062:	f8d8 6000 	ldr.w	r6, [r8]
 8017066:	1a3f      	subs	r7, r7, r0
 8017068:	42b7      	cmp	r7, r6
 801706a:	dd64      	ble.n	8017136 <__gethex+0x260>
 801706c:	1bbf      	subs	r7, r7, r6
 801706e:	4639      	mov	r1, r7
 8017070:	4628      	mov	r0, r5
 8017072:	f000 fe2b 	bl	8017ccc <__any_on>
 8017076:	4682      	mov	sl, r0
 8017078:	b178      	cbz	r0, 801709a <__gethex+0x1c4>
 801707a:	1e7b      	subs	r3, r7, #1
 801707c:	1159      	asrs	r1, r3, #5
 801707e:	f003 021f 	and.w	r2, r3, #31
 8017082:	f04f 0a01 	mov.w	sl, #1
 8017086:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801708a:	fa0a f202 	lsl.w	r2, sl, r2
 801708e:	420a      	tst	r2, r1
 8017090:	d003      	beq.n	801709a <__gethex+0x1c4>
 8017092:	4553      	cmp	r3, sl
 8017094:	dc46      	bgt.n	8017124 <__gethex+0x24e>
 8017096:	f04f 0a02 	mov.w	sl, #2
 801709a:	4639      	mov	r1, r7
 801709c:	4628      	mov	r0, r5
 801709e:	f7ff fecb 	bl	8016e38 <rshift>
 80170a2:	443c      	add	r4, r7
 80170a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80170a8:	42a3      	cmp	r3, r4
 80170aa:	da52      	bge.n	8017152 <__gethex+0x27c>
 80170ac:	4629      	mov	r1, r5
 80170ae:	9802      	ldr	r0, [sp, #8]
 80170b0:	f000 fa63 	bl	801757a <_Bfree>
 80170b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80170b6:	2300      	movs	r3, #0
 80170b8:	6013      	str	r3, [r2, #0]
 80170ba:	27a3      	movs	r7, #163	; 0xa3
 80170bc:	e793      	b.n	8016fe6 <__gethex+0x110>
 80170be:	3101      	adds	r1, #1
 80170c0:	105b      	asrs	r3, r3, #1
 80170c2:	e7b0      	b.n	8017026 <__gethex+0x150>
 80170c4:	1e73      	subs	r3, r6, #1
 80170c6:	9305      	str	r3, [sp, #20]
 80170c8:	9a07      	ldr	r2, [sp, #28]
 80170ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80170ce:	4293      	cmp	r3, r2
 80170d0:	d018      	beq.n	8017104 <__gethex+0x22e>
 80170d2:	f1bb 0f20 	cmp.w	fp, #32
 80170d6:	d107      	bne.n	80170e8 <__gethex+0x212>
 80170d8:	9b04      	ldr	r3, [sp, #16]
 80170da:	f8c3 a000 	str.w	sl, [r3]
 80170de:	3304      	adds	r3, #4
 80170e0:	f04f 0a00 	mov.w	sl, #0
 80170e4:	9304      	str	r3, [sp, #16]
 80170e6:	46d3      	mov	fp, sl
 80170e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80170ec:	f7ff fede 	bl	8016eac <__hexdig_fun>
 80170f0:	f000 000f 	and.w	r0, r0, #15
 80170f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80170f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80170fc:	f10b 0b04 	add.w	fp, fp, #4
 8017100:	9b05      	ldr	r3, [sp, #20]
 8017102:	e00d      	b.n	8017120 <__gethex+0x24a>
 8017104:	9b05      	ldr	r3, [sp, #20]
 8017106:	9a08      	ldr	r2, [sp, #32]
 8017108:	4413      	add	r3, r2
 801710a:	42bb      	cmp	r3, r7
 801710c:	d3e1      	bcc.n	80170d2 <__gethex+0x1fc>
 801710e:	4618      	mov	r0, r3
 8017110:	9a01      	ldr	r2, [sp, #4]
 8017112:	9903      	ldr	r1, [sp, #12]
 8017114:	9309      	str	r3, [sp, #36]	; 0x24
 8017116:	f001 fb47 	bl	80187a8 <strncmp>
 801711a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801711c:	2800      	cmp	r0, #0
 801711e:	d1d8      	bne.n	80170d2 <__gethex+0x1fc>
 8017120:	461e      	mov	r6, r3
 8017122:	e791      	b.n	8017048 <__gethex+0x172>
 8017124:	1eb9      	subs	r1, r7, #2
 8017126:	4628      	mov	r0, r5
 8017128:	f000 fdd0 	bl	8017ccc <__any_on>
 801712c:	2800      	cmp	r0, #0
 801712e:	d0b2      	beq.n	8017096 <__gethex+0x1c0>
 8017130:	f04f 0a03 	mov.w	sl, #3
 8017134:	e7b1      	b.n	801709a <__gethex+0x1c4>
 8017136:	da09      	bge.n	801714c <__gethex+0x276>
 8017138:	1bf7      	subs	r7, r6, r7
 801713a:	4629      	mov	r1, r5
 801713c:	463a      	mov	r2, r7
 801713e:	9802      	ldr	r0, [sp, #8]
 8017140:	f000 fbe6 	bl	8017910 <__lshift>
 8017144:	1be4      	subs	r4, r4, r7
 8017146:	4605      	mov	r5, r0
 8017148:	f100 0914 	add.w	r9, r0, #20
 801714c:	f04f 0a00 	mov.w	sl, #0
 8017150:	e7a8      	b.n	80170a4 <__gethex+0x1ce>
 8017152:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017156:	42a0      	cmp	r0, r4
 8017158:	dd6a      	ble.n	8017230 <__gethex+0x35a>
 801715a:	1b04      	subs	r4, r0, r4
 801715c:	42a6      	cmp	r6, r4
 801715e:	dc2e      	bgt.n	80171be <__gethex+0x2e8>
 8017160:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017164:	2b02      	cmp	r3, #2
 8017166:	d022      	beq.n	80171ae <__gethex+0x2d8>
 8017168:	2b03      	cmp	r3, #3
 801716a:	d024      	beq.n	80171b6 <__gethex+0x2e0>
 801716c:	2b01      	cmp	r3, #1
 801716e:	d115      	bne.n	801719c <__gethex+0x2c6>
 8017170:	42a6      	cmp	r6, r4
 8017172:	d113      	bne.n	801719c <__gethex+0x2c6>
 8017174:	2e01      	cmp	r6, #1
 8017176:	dc0b      	bgt.n	8017190 <__gethex+0x2ba>
 8017178:	9a06      	ldr	r2, [sp, #24]
 801717a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801717e:	6013      	str	r3, [r2, #0]
 8017180:	2301      	movs	r3, #1
 8017182:	612b      	str	r3, [r5, #16]
 8017184:	f8c9 3000 	str.w	r3, [r9]
 8017188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801718a:	2762      	movs	r7, #98	; 0x62
 801718c:	601d      	str	r5, [r3, #0]
 801718e:	e72a      	b.n	8016fe6 <__gethex+0x110>
 8017190:	1e71      	subs	r1, r6, #1
 8017192:	4628      	mov	r0, r5
 8017194:	f000 fd9a 	bl	8017ccc <__any_on>
 8017198:	2800      	cmp	r0, #0
 801719a:	d1ed      	bne.n	8017178 <__gethex+0x2a2>
 801719c:	4629      	mov	r1, r5
 801719e:	9802      	ldr	r0, [sp, #8]
 80171a0:	f000 f9eb 	bl	801757a <_Bfree>
 80171a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80171a6:	2300      	movs	r3, #0
 80171a8:	6013      	str	r3, [r2, #0]
 80171aa:	2750      	movs	r7, #80	; 0x50
 80171ac:	e71b      	b.n	8016fe6 <__gethex+0x110>
 80171ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d0e1      	beq.n	8017178 <__gethex+0x2a2>
 80171b4:	e7f2      	b.n	801719c <__gethex+0x2c6>
 80171b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d1dd      	bne.n	8017178 <__gethex+0x2a2>
 80171bc:	e7ee      	b.n	801719c <__gethex+0x2c6>
 80171be:	1e67      	subs	r7, r4, #1
 80171c0:	f1ba 0f00 	cmp.w	sl, #0
 80171c4:	d131      	bne.n	801722a <__gethex+0x354>
 80171c6:	b127      	cbz	r7, 80171d2 <__gethex+0x2fc>
 80171c8:	4639      	mov	r1, r7
 80171ca:	4628      	mov	r0, r5
 80171cc:	f000 fd7e 	bl	8017ccc <__any_on>
 80171d0:	4682      	mov	sl, r0
 80171d2:	117a      	asrs	r2, r7, #5
 80171d4:	2301      	movs	r3, #1
 80171d6:	f007 071f 	and.w	r7, r7, #31
 80171da:	fa03 f707 	lsl.w	r7, r3, r7
 80171de:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80171e2:	4621      	mov	r1, r4
 80171e4:	421f      	tst	r7, r3
 80171e6:	4628      	mov	r0, r5
 80171e8:	bf18      	it	ne
 80171ea:	f04a 0a02 	orrne.w	sl, sl, #2
 80171ee:	1b36      	subs	r6, r6, r4
 80171f0:	f7ff fe22 	bl	8016e38 <rshift>
 80171f4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80171f8:	2702      	movs	r7, #2
 80171fa:	f1ba 0f00 	cmp.w	sl, #0
 80171fe:	d048      	beq.n	8017292 <__gethex+0x3bc>
 8017200:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017204:	2b02      	cmp	r3, #2
 8017206:	d015      	beq.n	8017234 <__gethex+0x35e>
 8017208:	2b03      	cmp	r3, #3
 801720a:	d017      	beq.n	801723c <__gethex+0x366>
 801720c:	2b01      	cmp	r3, #1
 801720e:	d109      	bne.n	8017224 <__gethex+0x34e>
 8017210:	f01a 0f02 	tst.w	sl, #2
 8017214:	d006      	beq.n	8017224 <__gethex+0x34e>
 8017216:	f8d9 3000 	ldr.w	r3, [r9]
 801721a:	ea4a 0a03 	orr.w	sl, sl, r3
 801721e:	f01a 0f01 	tst.w	sl, #1
 8017222:	d10e      	bne.n	8017242 <__gethex+0x36c>
 8017224:	f047 0710 	orr.w	r7, r7, #16
 8017228:	e033      	b.n	8017292 <__gethex+0x3bc>
 801722a:	f04f 0a01 	mov.w	sl, #1
 801722e:	e7d0      	b.n	80171d2 <__gethex+0x2fc>
 8017230:	2701      	movs	r7, #1
 8017232:	e7e2      	b.n	80171fa <__gethex+0x324>
 8017234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017236:	f1c3 0301 	rsb	r3, r3, #1
 801723a:	9315      	str	r3, [sp, #84]	; 0x54
 801723c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801723e:	2b00      	cmp	r3, #0
 8017240:	d0f0      	beq.n	8017224 <__gethex+0x34e>
 8017242:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017246:	f105 0314 	add.w	r3, r5, #20
 801724a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801724e:	eb03 010a 	add.w	r1, r3, sl
 8017252:	f04f 0c00 	mov.w	ip, #0
 8017256:	4618      	mov	r0, r3
 8017258:	f853 2b04 	ldr.w	r2, [r3], #4
 801725c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017260:	d01c      	beq.n	801729c <__gethex+0x3c6>
 8017262:	3201      	adds	r2, #1
 8017264:	6002      	str	r2, [r0, #0]
 8017266:	2f02      	cmp	r7, #2
 8017268:	f105 0314 	add.w	r3, r5, #20
 801726c:	d138      	bne.n	80172e0 <__gethex+0x40a>
 801726e:	f8d8 2000 	ldr.w	r2, [r8]
 8017272:	3a01      	subs	r2, #1
 8017274:	42b2      	cmp	r2, r6
 8017276:	d10a      	bne.n	801728e <__gethex+0x3b8>
 8017278:	1171      	asrs	r1, r6, #5
 801727a:	2201      	movs	r2, #1
 801727c:	f006 061f 	and.w	r6, r6, #31
 8017280:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017284:	fa02 f606 	lsl.w	r6, r2, r6
 8017288:	421e      	tst	r6, r3
 801728a:	bf18      	it	ne
 801728c:	4617      	movne	r7, r2
 801728e:	f047 0720 	orr.w	r7, r7, #32
 8017292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017294:	601d      	str	r5, [r3, #0]
 8017296:	9b06      	ldr	r3, [sp, #24]
 8017298:	601c      	str	r4, [r3, #0]
 801729a:	e6a4      	b.n	8016fe6 <__gethex+0x110>
 801729c:	4299      	cmp	r1, r3
 801729e:	f843 cc04 	str.w	ip, [r3, #-4]
 80172a2:	d8d8      	bhi.n	8017256 <__gethex+0x380>
 80172a4:	68ab      	ldr	r3, [r5, #8]
 80172a6:	4599      	cmp	r9, r3
 80172a8:	db12      	blt.n	80172d0 <__gethex+0x3fa>
 80172aa:	6869      	ldr	r1, [r5, #4]
 80172ac:	9802      	ldr	r0, [sp, #8]
 80172ae:	3101      	adds	r1, #1
 80172b0:	f000 f92f 	bl	8017512 <_Balloc>
 80172b4:	692a      	ldr	r2, [r5, #16]
 80172b6:	3202      	adds	r2, #2
 80172b8:	f105 010c 	add.w	r1, r5, #12
 80172bc:	4683      	mov	fp, r0
 80172be:	0092      	lsls	r2, r2, #2
 80172c0:	300c      	adds	r0, #12
 80172c2:	f000 f91b 	bl	80174fc <memcpy>
 80172c6:	4629      	mov	r1, r5
 80172c8:	9802      	ldr	r0, [sp, #8]
 80172ca:	f000 f956 	bl	801757a <_Bfree>
 80172ce:	465d      	mov	r5, fp
 80172d0:	692b      	ldr	r3, [r5, #16]
 80172d2:	1c5a      	adds	r2, r3, #1
 80172d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80172d8:	612a      	str	r2, [r5, #16]
 80172da:	2201      	movs	r2, #1
 80172dc:	615a      	str	r2, [r3, #20]
 80172de:	e7c2      	b.n	8017266 <__gethex+0x390>
 80172e0:	692a      	ldr	r2, [r5, #16]
 80172e2:	454a      	cmp	r2, r9
 80172e4:	dd0b      	ble.n	80172fe <__gethex+0x428>
 80172e6:	2101      	movs	r1, #1
 80172e8:	4628      	mov	r0, r5
 80172ea:	f7ff fda5 	bl	8016e38 <rshift>
 80172ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80172f2:	3401      	adds	r4, #1
 80172f4:	42a3      	cmp	r3, r4
 80172f6:	f6ff aed9 	blt.w	80170ac <__gethex+0x1d6>
 80172fa:	2701      	movs	r7, #1
 80172fc:	e7c7      	b.n	801728e <__gethex+0x3b8>
 80172fe:	f016 061f 	ands.w	r6, r6, #31
 8017302:	d0fa      	beq.n	80172fa <__gethex+0x424>
 8017304:	449a      	add	sl, r3
 8017306:	f1c6 0620 	rsb	r6, r6, #32
 801730a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801730e:	f000 f9c4 	bl	801769a <__hi0bits>
 8017312:	42b0      	cmp	r0, r6
 8017314:	dbe7      	blt.n	80172e6 <__gethex+0x410>
 8017316:	e7f0      	b.n	80172fa <__gethex+0x424>

08017318 <L_shift>:
 8017318:	f1c2 0208 	rsb	r2, r2, #8
 801731c:	0092      	lsls	r2, r2, #2
 801731e:	b570      	push	{r4, r5, r6, lr}
 8017320:	f1c2 0620 	rsb	r6, r2, #32
 8017324:	6843      	ldr	r3, [r0, #4]
 8017326:	6804      	ldr	r4, [r0, #0]
 8017328:	fa03 f506 	lsl.w	r5, r3, r6
 801732c:	432c      	orrs	r4, r5
 801732e:	40d3      	lsrs	r3, r2
 8017330:	6004      	str	r4, [r0, #0]
 8017332:	f840 3f04 	str.w	r3, [r0, #4]!
 8017336:	4288      	cmp	r0, r1
 8017338:	d3f4      	bcc.n	8017324 <L_shift+0xc>
 801733a:	bd70      	pop	{r4, r5, r6, pc}

0801733c <__match>:
 801733c:	b530      	push	{r4, r5, lr}
 801733e:	6803      	ldr	r3, [r0, #0]
 8017340:	3301      	adds	r3, #1
 8017342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017346:	b914      	cbnz	r4, 801734e <__match+0x12>
 8017348:	6003      	str	r3, [r0, #0]
 801734a:	2001      	movs	r0, #1
 801734c:	bd30      	pop	{r4, r5, pc}
 801734e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017352:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017356:	2d19      	cmp	r5, #25
 8017358:	bf98      	it	ls
 801735a:	3220      	addls	r2, #32
 801735c:	42a2      	cmp	r2, r4
 801735e:	d0f0      	beq.n	8017342 <__match+0x6>
 8017360:	2000      	movs	r0, #0
 8017362:	e7f3      	b.n	801734c <__match+0x10>

08017364 <__hexnan>:
 8017364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017368:	680b      	ldr	r3, [r1, #0]
 801736a:	6801      	ldr	r1, [r0, #0]
 801736c:	115f      	asrs	r7, r3, #5
 801736e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017372:	f013 031f 	ands.w	r3, r3, #31
 8017376:	b087      	sub	sp, #28
 8017378:	bf18      	it	ne
 801737a:	3704      	addne	r7, #4
 801737c:	2500      	movs	r5, #0
 801737e:	1f3e      	subs	r6, r7, #4
 8017380:	4682      	mov	sl, r0
 8017382:	4690      	mov	r8, r2
 8017384:	9301      	str	r3, [sp, #4]
 8017386:	f847 5c04 	str.w	r5, [r7, #-4]
 801738a:	46b1      	mov	r9, r6
 801738c:	4634      	mov	r4, r6
 801738e:	9502      	str	r5, [sp, #8]
 8017390:	46ab      	mov	fp, r5
 8017392:	784a      	ldrb	r2, [r1, #1]
 8017394:	1c4b      	adds	r3, r1, #1
 8017396:	9303      	str	r3, [sp, #12]
 8017398:	b342      	cbz	r2, 80173ec <__hexnan+0x88>
 801739a:	4610      	mov	r0, r2
 801739c:	9105      	str	r1, [sp, #20]
 801739e:	9204      	str	r2, [sp, #16]
 80173a0:	f7ff fd84 	bl	8016eac <__hexdig_fun>
 80173a4:	2800      	cmp	r0, #0
 80173a6:	d143      	bne.n	8017430 <__hexnan+0xcc>
 80173a8:	9a04      	ldr	r2, [sp, #16]
 80173aa:	9905      	ldr	r1, [sp, #20]
 80173ac:	2a20      	cmp	r2, #32
 80173ae:	d818      	bhi.n	80173e2 <__hexnan+0x7e>
 80173b0:	9b02      	ldr	r3, [sp, #8]
 80173b2:	459b      	cmp	fp, r3
 80173b4:	dd13      	ble.n	80173de <__hexnan+0x7a>
 80173b6:	454c      	cmp	r4, r9
 80173b8:	d206      	bcs.n	80173c8 <__hexnan+0x64>
 80173ba:	2d07      	cmp	r5, #7
 80173bc:	dc04      	bgt.n	80173c8 <__hexnan+0x64>
 80173be:	462a      	mov	r2, r5
 80173c0:	4649      	mov	r1, r9
 80173c2:	4620      	mov	r0, r4
 80173c4:	f7ff ffa8 	bl	8017318 <L_shift>
 80173c8:	4544      	cmp	r4, r8
 80173ca:	d944      	bls.n	8017456 <__hexnan+0xf2>
 80173cc:	2300      	movs	r3, #0
 80173ce:	f1a4 0904 	sub.w	r9, r4, #4
 80173d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80173d6:	f8cd b008 	str.w	fp, [sp, #8]
 80173da:	464c      	mov	r4, r9
 80173dc:	461d      	mov	r5, r3
 80173de:	9903      	ldr	r1, [sp, #12]
 80173e0:	e7d7      	b.n	8017392 <__hexnan+0x2e>
 80173e2:	2a29      	cmp	r2, #41	; 0x29
 80173e4:	d14a      	bne.n	801747c <__hexnan+0x118>
 80173e6:	3102      	adds	r1, #2
 80173e8:	f8ca 1000 	str.w	r1, [sl]
 80173ec:	f1bb 0f00 	cmp.w	fp, #0
 80173f0:	d044      	beq.n	801747c <__hexnan+0x118>
 80173f2:	454c      	cmp	r4, r9
 80173f4:	d206      	bcs.n	8017404 <__hexnan+0xa0>
 80173f6:	2d07      	cmp	r5, #7
 80173f8:	dc04      	bgt.n	8017404 <__hexnan+0xa0>
 80173fa:	462a      	mov	r2, r5
 80173fc:	4649      	mov	r1, r9
 80173fe:	4620      	mov	r0, r4
 8017400:	f7ff ff8a 	bl	8017318 <L_shift>
 8017404:	4544      	cmp	r4, r8
 8017406:	d928      	bls.n	801745a <__hexnan+0xf6>
 8017408:	4643      	mov	r3, r8
 801740a:	f854 2b04 	ldr.w	r2, [r4], #4
 801740e:	f843 2b04 	str.w	r2, [r3], #4
 8017412:	42a6      	cmp	r6, r4
 8017414:	d2f9      	bcs.n	801740a <__hexnan+0xa6>
 8017416:	2200      	movs	r2, #0
 8017418:	f843 2b04 	str.w	r2, [r3], #4
 801741c:	429e      	cmp	r6, r3
 801741e:	d2fb      	bcs.n	8017418 <__hexnan+0xb4>
 8017420:	6833      	ldr	r3, [r6, #0]
 8017422:	b91b      	cbnz	r3, 801742c <__hexnan+0xc8>
 8017424:	4546      	cmp	r6, r8
 8017426:	d127      	bne.n	8017478 <__hexnan+0x114>
 8017428:	2301      	movs	r3, #1
 801742a:	6033      	str	r3, [r6, #0]
 801742c:	2005      	movs	r0, #5
 801742e:	e026      	b.n	801747e <__hexnan+0x11a>
 8017430:	3501      	adds	r5, #1
 8017432:	2d08      	cmp	r5, #8
 8017434:	f10b 0b01 	add.w	fp, fp, #1
 8017438:	dd06      	ble.n	8017448 <__hexnan+0xe4>
 801743a:	4544      	cmp	r4, r8
 801743c:	d9cf      	bls.n	80173de <__hexnan+0x7a>
 801743e:	2300      	movs	r3, #0
 8017440:	f844 3c04 	str.w	r3, [r4, #-4]
 8017444:	2501      	movs	r5, #1
 8017446:	3c04      	subs	r4, #4
 8017448:	6822      	ldr	r2, [r4, #0]
 801744a:	f000 000f 	and.w	r0, r0, #15
 801744e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017452:	6020      	str	r0, [r4, #0]
 8017454:	e7c3      	b.n	80173de <__hexnan+0x7a>
 8017456:	2508      	movs	r5, #8
 8017458:	e7c1      	b.n	80173de <__hexnan+0x7a>
 801745a:	9b01      	ldr	r3, [sp, #4]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d0df      	beq.n	8017420 <__hexnan+0xbc>
 8017460:	f04f 32ff 	mov.w	r2, #4294967295
 8017464:	f1c3 0320 	rsb	r3, r3, #32
 8017468:	fa22 f303 	lsr.w	r3, r2, r3
 801746c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017470:	401a      	ands	r2, r3
 8017472:	f847 2c04 	str.w	r2, [r7, #-4]
 8017476:	e7d3      	b.n	8017420 <__hexnan+0xbc>
 8017478:	3e04      	subs	r6, #4
 801747a:	e7d1      	b.n	8017420 <__hexnan+0xbc>
 801747c:	2004      	movs	r0, #4
 801747e:	b007      	add	sp, #28
 8017480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017484 <__locale_ctype_ptr_l>:
 8017484:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017488:	4770      	bx	lr
	...

0801748c <__locale_ctype_ptr>:
 801748c:	4b04      	ldr	r3, [pc, #16]	; (80174a0 <__locale_ctype_ptr+0x14>)
 801748e:	4a05      	ldr	r2, [pc, #20]	; (80174a4 <__locale_ctype_ptr+0x18>)
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	6a1b      	ldr	r3, [r3, #32]
 8017494:	2b00      	cmp	r3, #0
 8017496:	bf08      	it	eq
 8017498:	4613      	moveq	r3, r2
 801749a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801749e:	4770      	bx	lr
 80174a0:	2000000c 	.word	0x2000000c
 80174a4:	20000070 	.word	0x20000070

080174a8 <__localeconv_l>:
 80174a8:	30f0      	adds	r0, #240	; 0xf0
 80174aa:	4770      	bx	lr

080174ac <_localeconv_r>:
 80174ac:	4b04      	ldr	r3, [pc, #16]	; (80174c0 <_localeconv_r+0x14>)
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	6a18      	ldr	r0, [r3, #32]
 80174b2:	4b04      	ldr	r3, [pc, #16]	; (80174c4 <_localeconv_r+0x18>)
 80174b4:	2800      	cmp	r0, #0
 80174b6:	bf08      	it	eq
 80174b8:	4618      	moveq	r0, r3
 80174ba:	30f0      	adds	r0, #240	; 0xf0
 80174bc:	4770      	bx	lr
 80174be:	bf00      	nop
 80174c0:	2000000c 	.word	0x2000000c
 80174c4:	20000070 	.word	0x20000070

080174c8 <malloc>:
 80174c8:	4b02      	ldr	r3, [pc, #8]	; (80174d4 <malloc+0xc>)
 80174ca:	4601      	mov	r1, r0
 80174cc:	6818      	ldr	r0, [r3, #0]
 80174ce:	f000 bc7b 	b.w	8017dc8 <_malloc_r>
 80174d2:	bf00      	nop
 80174d4:	2000000c 	.word	0x2000000c

080174d8 <__ascii_mbtowc>:
 80174d8:	b082      	sub	sp, #8
 80174da:	b901      	cbnz	r1, 80174de <__ascii_mbtowc+0x6>
 80174dc:	a901      	add	r1, sp, #4
 80174de:	b142      	cbz	r2, 80174f2 <__ascii_mbtowc+0x1a>
 80174e0:	b14b      	cbz	r3, 80174f6 <__ascii_mbtowc+0x1e>
 80174e2:	7813      	ldrb	r3, [r2, #0]
 80174e4:	600b      	str	r3, [r1, #0]
 80174e6:	7812      	ldrb	r2, [r2, #0]
 80174e8:	1c10      	adds	r0, r2, #0
 80174ea:	bf18      	it	ne
 80174ec:	2001      	movne	r0, #1
 80174ee:	b002      	add	sp, #8
 80174f0:	4770      	bx	lr
 80174f2:	4610      	mov	r0, r2
 80174f4:	e7fb      	b.n	80174ee <__ascii_mbtowc+0x16>
 80174f6:	f06f 0001 	mvn.w	r0, #1
 80174fa:	e7f8      	b.n	80174ee <__ascii_mbtowc+0x16>

080174fc <memcpy>:
 80174fc:	b510      	push	{r4, lr}
 80174fe:	1e43      	subs	r3, r0, #1
 8017500:	440a      	add	r2, r1
 8017502:	4291      	cmp	r1, r2
 8017504:	d100      	bne.n	8017508 <memcpy+0xc>
 8017506:	bd10      	pop	{r4, pc}
 8017508:	f811 4b01 	ldrb.w	r4, [r1], #1
 801750c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017510:	e7f7      	b.n	8017502 <memcpy+0x6>

08017512 <_Balloc>:
 8017512:	b570      	push	{r4, r5, r6, lr}
 8017514:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017516:	4604      	mov	r4, r0
 8017518:	460e      	mov	r6, r1
 801751a:	b93d      	cbnz	r5, 801752c <_Balloc+0x1a>
 801751c:	2010      	movs	r0, #16
 801751e:	f7ff ffd3 	bl	80174c8 <malloc>
 8017522:	6260      	str	r0, [r4, #36]	; 0x24
 8017524:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017528:	6005      	str	r5, [r0, #0]
 801752a:	60c5      	str	r5, [r0, #12]
 801752c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801752e:	68eb      	ldr	r3, [r5, #12]
 8017530:	b183      	cbz	r3, 8017554 <_Balloc+0x42>
 8017532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017534:	68db      	ldr	r3, [r3, #12]
 8017536:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801753a:	b9b8      	cbnz	r0, 801756c <_Balloc+0x5a>
 801753c:	2101      	movs	r1, #1
 801753e:	fa01 f506 	lsl.w	r5, r1, r6
 8017542:	1d6a      	adds	r2, r5, #5
 8017544:	0092      	lsls	r2, r2, #2
 8017546:	4620      	mov	r0, r4
 8017548:	f000 fbe1 	bl	8017d0e <_calloc_r>
 801754c:	b160      	cbz	r0, 8017568 <_Balloc+0x56>
 801754e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017552:	e00e      	b.n	8017572 <_Balloc+0x60>
 8017554:	2221      	movs	r2, #33	; 0x21
 8017556:	2104      	movs	r1, #4
 8017558:	4620      	mov	r0, r4
 801755a:	f000 fbd8 	bl	8017d0e <_calloc_r>
 801755e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017560:	60e8      	str	r0, [r5, #12]
 8017562:	68db      	ldr	r3, [r3, #12]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d1e4      	bne.n	8017532 <_Balloc+0x20>
 8017568:	2000      	movs	r0, #0
 801756a:	bd70      	pop	{r4, r5, r6, pc}
 801756c:	6802      	ldr	r2, [r0, #0]
 801756e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017572:	2300      	movs	r3, #0
 8017574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017578:	e7f7      	b.n	801756a <_Balloc+0x58>

0801757a <_Bfree>:
 801757a:	b570      	push	{r4, r5, r6, lr}
 801757c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801757e:	4606      	mov	r6, r0
 8017580:	460d      	mov	r5, r1
 8017582:	b93c      	cbnz	r4, 8017594 <_Bfree+0x1a>
 8017584:	2010      	movs	r0, #16
 8017586:	f7ff ff9f 	bl	80174c8 <malloc>
 801758a:	6270      	str	r0, [r6, #36]	; 0x24
 801758c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017590:	6004      	str	r4, [r0, #0]
 8017592:	60c4      	str	r4, [r0, #12]
 8017594:	b13d      	cbz	r5, 80175a6 <_Bfree+0x2c>
 8017596:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017598:	686a      	ldr	r2, [r5, #4]
 801759a:	68db      	ldr	r3, [r3, #12]
 801759c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80175a0:	6029      	str	r1, [r5, #0]
 80175a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80175a6:	bd70      	pop	{r4, r5, r6, pc}

080175a8 <__multadd>:
 80175a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175ac:	690d      	ldr	r5, [r1, #16]
 80175ae:	461f      	mov	r7, r3
 80175b0:	4606      	mov	r6, r0
 80175b2:	460c      	mov	r4, r1
 80175b4:	f101 0c14 	add.w	ip, r1, #20
 80175b8:	2300      	movs	r3, #0
 80175ba:	f8dc 0000 	ldr.w	r0, [ip]
 80175be:	b281      	uxth	r1, r0
 80175c0:	fb02 7101 	mla	r1, r2, r1, r7
 80175c4:	0c0f      	lsrs	r7, r1, #16
 80175c6:	0c00      	lsrs	r0, r0, #16
 80175c8:	fb02 7000 	mla	r0, r2, r0, r7
 80175cc:	b289      	uxth	r1, r1
 80175ce:	3301      	adds	r3, #1
 80175d0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80175d4:	429d      	cmp	r5, r3
 80175d6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80175da:	f84c 1b04 	str.w	r1, [ip], #4
 80175de:	dcec      	bgt.n	80175ba <__multadd+0x12>
 80175e0:	b1d7      	cbz	r7, 8017618 <__multadd+0x70>
 80175e2:	68a3      	ldr	r3, [r4, #8]
 80175e4:	42ab      	cmp	r3, r5
 80175e6:	dc12      	bgt.n	801760e <__multadd+0x66>
 80175e8:	6861      	ldr	r1, [r4, #4]
 80175ea:	4630      	mov	r0, r6
 80175ec:	3101      	adds	r1, #1
 80175ee:	f7ff ff90 	bl	8017512 <_Balloc>
 80175f2:	6922      	ldr	r2, [r4, #16]
 80175f4:	3202      	adds	r2, #2
 80175f6:	f104 010c 	add.w	r1, r4, #12
 80175fa:	4680      	mov	r8, r0
 80175fc:	0092      	lsls	r2, r2, #2
 80175fe:	300c      	adds	r0, #12
 8017600:	f7ff ff7c 	bl	80174fc <memcpy>
 8017604:	4621      	mov	r1, r4
 8017606:	4630      	mov	r0, r6
 8017608:	f7ff ffb7 	bl	801757a <_Bfree>
 801760c:	4644      	mov	r4, r8
 801760e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017612:	3501      	adds	r5, #1
 8017614:	615f      	str	r7, [r3, #20]
 8017616:	6125      	str	r5, [r4, #16]
 8017618:	4620      	mov	r0, r4
 801761a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801761e <__s2b>:
 801761e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017622:	460c      	mov	r4, r1
 8017624:	4615      	mov	r5, r2
 8017626:	461f      	mov	r7, r3
 8017628:	2209      	movs	r2, #9
 801762a:	3308      	adds	r3, #8
 801762c:	4606      	mov	r6, r0
 801762e:	fb93 f3f2 	sdiv	r3, r3, r2
 8017632:	2100      	movs	r1, #0
 8017634:	2201      	movs	r2, #1
 8017636:	429a      	cmp	r2, r3
 8017638:	db20      	blt.n	801767c <__s2b+0x5e>
 801763a:	4630      	mov	r0, r6
 801763c:	f7ff ff69 	bl	8017512 <_Balloc>
 8017640:	9b08      	ldr	r3, [sp, #32]
 8017642:	6143      	str	r3, [r0, #20]
 8017644:	2d09      	cmp	r5, #9
 8017646:	f04f 0301 	mov.w	r3, #1
 801764a:	6103      	str	r3, [r0, #16]
 801764c:	dd19      	ble.n	8017682 <__s2b+0x64>
 801764e:	f104 0809 	add.w	r8, r4, #9
 8017652:	46c1      	mov	r9, r8
 8017654:	442c      	add	r4, r5
 8017656:	f819 3b01 	ldrb.w	r3, [r9], #1
 801765a:	4601      	mov	r1, r0
 801765c:	3b30      	subs	r3, #48	; 0x30
 801765e:	220a      	movs	r2, #10
 8017660:	4630      	mov	r0, r6
 8017662:	f7ff ffa1 	bl	80175a8 <__multadd>
 8017666:	45a1      	cmp	r9, r4
 8017668:	d1f5      	bne.n	8017656 <__s2b+0x38>
 801766a:	eb08 0405 	add.w	r4, r8, r5
 801766e:	3c08      	subs	r4, #8
 8017670:	1b2d      	subs	r5, r5, r4
 8017672:	1963      	adds	r3, r4, r5
 8017674:	42bb      	cmp	r3, r7
 8017676:	db07      	blt.n	8017688 <__s2b+0x6a>
 8017678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801767c:	0052      	lsls	r2, r2, #1
 801767e:	3101      	adds	r1, #1
 8017680:	e7d9      	b.n	8017636 <__s2b+0x18>
 8017682:	340a      	adds	r4, #10
 8017684:	2509      	movs	r5, #9
 8017686:	e7f3      	b.n	8017670 <__s2b+0x52>
 8017688:	f814 3b01 	ldrb.w	r3, [r4], #1
 801768c:	4601      	mov	r1, r0
 801768e:	3b30      	subs	r3, #48	; 0x30
 8017690:	220a      	movs	r2, #10
 8017692:	4630      	mov	r0, r6
 8017694:	f7ff ff88 	bl	80175a8 <__multadd>
 8017698:	e7eb      	b.n	8017672 <__s2b+0x54>

0801769a <__hi0bits>:
 801769a:	0c02      	lsrs	r2, r0, #16
 801769c:	0412      	lsls	r2, r2, #16
 801769e:	4603      	mov	r3, r0
 80176a0:	b9b2      	cbnz	r2, 80176d0 <__hi0bits+0x36>
 80176a2:	0403      	lsls	r3, r0, #16
 80176a4:	2010      	movs	r0, #16
 80176a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80176aa:	bf04      	itt	eq
 80176ac:	021b      	lsleq	r3, r3, #8
 80176ae:	3008      	addeq	r0, #8
 80176b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80176b4:	bf04      	itt	eq
 80176b6:	011b      	lsleq	r3, r3, #4
 80176b8:	3004      	addeq	r0, #4
 80176ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80176be:	bf04      	itt	eq
 80176c0:	009b      	lsleq	r3, r3, #2
 80176c2:	3002      	addeq	r0, #2
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	db06      	blt.n	80176d6 <__hi0bits+0x3c>
 80176c8:	005b      	lsls	r3, r3, #1
 80176ca:	d503      	bpl.n	80176d4 <__hi0bits+0x3a>
 80176cc:	3001      	adds	r0, #1
 80176ce:	4770      	bx	lr
 80176d0:	2000      	movs	r0, #0
 80176d2:	e7e8      	b.n	80176a6 <__hi0bits+0xc>
 80176d4:	2020      	movs	r0, #32
 80176d6:	4770      	bx	lr

080176d8 <__lo0bits>:
 80176d8:	6803      	ldr	r3, [r0, #0]
 80176da:	f013 0207 	ands.w	r2, r3, #7
 80176de:	4601      	mov	r1, r0
 80176e0:	d00b      	beq.n	80176fa <__lo0bits+0x22>
 80176e2:	07da      	lsls	r2, r3, #31
 80176e4:	d423      	bmi.n	801772e <__lo0bits+0x56>
 80176e6:	0798      	lsls	r0, r3, #30
 80176e8:	bf49      	itett	mi
 80176ea:	085b      	lsrmi	r3, r3, #1
 80176ec:	089b      	lsrpl	r3, r3, #2
 80176ee:	2001      	movmi	r0, #1
 80176f0:	600b      	strmi	r3, [r1, #0]
 80176f2:	bf5c      	itt	pl
 80176f4:	600b      	strpl	r3, [r1, #0]
 80176f6:	2002      	movpl	r0, #2
 80176f8:	4770      	bx	lr
 80176fa:	b298      	uxth	r0, r3
 80176fc:	b9a8      	cbnz	r0, 801772a <__lo0bits+0x52>
 80176fe:	0c1b      	lsrs	r3, r3, #16
 8017700:	2010      	movs	r0, #16
 8017702:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017706:	bf04      	itt	eq
 8017708:	0a1b      	lsreq	r3, r3, #8
 801770a:	3008      	addeq	r0, #8
 801770c:	071a      	lsls	r2, r3, #28
 801770e:	bf04      	itt	eq
 8017710:	091b      	lsreq	r3, r3, #4
 8017712:	3004      	addeq	r0, #4
 8017714:	079a      	lsls	r2, r3, #30
 8017716:	bf04      	itt	eq
 8017718:	089b      	lsreq	r3, r3, #2
 801771a:	3002      	addeq	r0, #2
 801771c:	07da      	lsls	r2, r3, #31
 801771e:	d402      	bmi.n	8017726 <__lo0bits+0x4e>
 8017720:	085b      	lsrs	r3, r3, #1
 8017722:	d006      	beq.n	8017732 <__lo0bits+0x5a>
 8017724:	3001      	adds	r0, #1
 8017726:	600b      	str	r3, [r1, #0]
 8017728:	4770      	bx	lr
 801772a:	4610      	mov	r0, r2
 801772c:	e7e9      	b.n	8017702 <__lo0bits+0x2a>
 801772e:	2000      	movs	r0, #0
 8017730:	4770      	bx	lr
 8017732:	2020      	movs	r0, #32
 8017734:	4770      	bx	lr

08017736 <__i2b>:
 8017736:	b510      	push	{r4, lr}
 8017738:	460c      	mov	r4, r1
 801773a:	2101      	movs	r1, #1
 801773c:	f7ff fee9 	bl	8017512 <_Balloc>
 8017740:	2201      	movs	r2, #1
 8017742:	6144      	str	r4, [r0, #20]
 8017744:	6102      	str	r2, [r0, #16]
 8017746:	bd10      	pop	{r4, pc}

08017748 <__multiply>:
 8017748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801774c:	4614      	mov	r4, r2
 801774e:	690a      	ldr	r2, [r1, #16]
 8017750:	6923      	ldr	r3, [r4, #16]
 8017752:	429a      	cmp	r2, r3
 8017754:	bfb8      	it	lt
 8017756:	460b      	movlt	r3, r1
 8017758:	4688      	mov	r8, r1
 801775a:	bfbc      	itt	lt
 801775c:	46a0      	movlt	r8, r4
 801775e:	461c      	movlt	r4, r3
 8017760:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017764:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017768:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801776c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017770:	eb07 0609 	add.w	r6, r7, r9
 8017774:	42b3      	cmp	r3, r6
 8017776:	bfb8      	it	lt
 8017778:	3101      	addlt	r1, #1
 801777a:	f7ff feca 	bl	8017512 <_Balloc>
 801777e:	f100 0514 	add.w	r5, r0, #20
 8017782:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017786:	462b      	mov	r3, r5
 8017788:	2200      	movs	r2, #0
 801778a:	4573      	cmp	r3, lr
 801778c:	d316      	bcc.n	80177bc <__multiply+0x74>
 801778e:	f104 0214 	add.w	r2, r4, #20
 8017792:	f108 0114 	add.w	r1, r8, #20
 8017796:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801779a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801779e:	9300      	str	r3, [sp, #0]
 80177a0:	9b00      	ldr	r3, [sp, #0]
 80177a2:	9201      	str	r2, [sp, #4]
 80177a4:	4293      	cmp	r3, r2
 80177a6:	d80c      	bhi.n	80177c2 <__multiply+0x7a>
 80177a8:	2e00      	cmp	r6, #0
 80177aa:	dd03      	ble.n	80177b4 <__multiply+0x6c>
 80177ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d05d      	beq.n	8017870 <__multiply+0x128>
 80177b4:	6106      	str	r6, [r0, #16]
 80177b6:	b003      	add	sp, #12
 80177b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177bc:	f843 2b04 	str.w	r2, [r3], #4
 80177c0:	e7e3      	b.n	801778a <__multiply+0x42>
 80177c2:	f8b2 b000 	ldrh.w	fp, [r2]
 80177c6:	f1bb 0f00 	cmp.w	fp, #0
 80177ca:	d023      	beq.n	8017814 <__multiply+0xcc>
 80177cc:	4689      	mov	r9, r1
 80177ce:	46ac      	mov	ip, r5
 80177d0:	f04f 0800 	mov.w	r8, #0
 80177d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80177d8:	f8dc a000 	ldr.w	sl, [ip]
 80177dc:	b2a3      	uxth	r3, r4
 80177de:	fa1f fa8a 	uxth.w	sl, sl
 80177e2:	fb0b a303 	mla	r3, fp, r3, sl
 80177e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80177ea:	f8dc 4000 	ldr.w	r4, [ip]
 80177ee:	4443      	add	r3, r8
 80177f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80177f4:	fb0b 840a 	mla	r4, fp, sl, r8
 80177f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80177fc:	46e2      	mov	sl, ip
 80177fe:	b29b      	uxth	r3, r3
 8017800:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017804:	454f      	cmp	r7, r9
 8017806:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801780a:	f84a 3b04 	str.w	r3, [sl], #4
 801780e:	d82b      	bhi.n	8017868 <__multiply+0x120>
 8017810:	f8cc 8004 	str.w	r8, [ip, #4]
 8017814:	9b01      	ldr	r3, [sp, #4]
 8017816:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801781a:	3204      	adds	r2, #4
 801781c:	f1ba 0f00 	cmp.w	sl, #0
 8017820:	d020      	beq.n	8017864 <__multiply+0x11c>
 8017822:	682b      	ldr	r3, [r5, #0]
 8017824:	4689      	mov	r9, r1
 8017826:	46a8      	mov	r8, r5
 8017828:	f04f 0b00 	mov.w	fp, #0
 801782c:	f8b9 c000 	ldrh.w	ip, [r9]
 8017830:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017834:	fb0a 440c 	mla	r4, sl, ip, r4
 8017838:	445c      	add	r4, fp
 801783a:	46c4      	mov	ip, r8
 801783c:	b29b      	uxth	r3, r3
 801783e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017842:	f84c 3b04 	str.w	r3, [ip], #4
 8017846:	f859 3b04 	ldr.w	r3, [r9], #4
 801784a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801784e:	0c1b      	lsrs	r3, r3, #16
 8017850:	fb0a b303 	mla	r3, sl, r3, fp
 8017854:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017858:	454f      	cmp	r7, r9
 801785a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801785e:	d805      	bhi.n	801786c <__multiply+0x124>
 8017860:	f8c8 3004 	str.w	r3, [r8, #4]
 8017864:	3504      	adds	r5, #4
 8017866:	e79b      	b.n	80177a0 <__multiply+0x58>
 8017868:	46d4      	mov	ip, sl
 801786a:	e7b3      	b.n	80177d4 <__multiply+0x8c>
 801786c:	46e0      	mov	r8, ip
 801786e:	e7dd      	b.n	801782c <__multiply+0xe4>
 8017870:	3e01      	subs	r6, #1
 8017872:	e799      	b.n	80177a8 <__multiply+0x60>

08017874 <__pow5mult>:
 8017874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017878:	4615      	mov	r5, r2
 801787a:	f012 0203 	ands.w	r2, r2, #3
 801787e:	4606      	mov	r6, r0
 8017880:	460f      	mov	r7, r1
 8017882:	d007      	beq.n	8017894 <__pow5mult+0x20>
 8017884:	3a01      	subs	r2, #1
 8017886:	4c21      	ldr	r4, [pc, #132]	; (801790c <__pow5mult+0x98>)
 8017888:	2300      	movs	r3, #0
 801788a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801788e:	f7ff fe8b 	bl	80175a8 <__multadd>
 8017892:	4607      	mov	r7, r0
 8017894:	10ad      	asrs	r5, r5, #2
 8017896:	d035      	beq.n	8017904 <__pow5mult+0x90>
 8017898:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801789a:	b93c      	cbnz	r4, 80178ac <__pow5mult+0x38>
 801789c:	2010      	movs	r0, #16
 801789e:	f7ff fe13 	bl	80174c8 <malloc>
 80178a2:	6270      	str	r0, [r6, #36]	; 0x24
 80178a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80178a8:	6004      	str	r4, [r0, #0]
 80178aa:	60c4      	str	r4, [r0, #12]
 80178ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80178b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80178b4:	b94c      	cbnz	r4, 80178ca <__pow5mult+0x56>
 80178b6:	f240 2171 	movw	r1, #625	; 0x271
 80178ba:	4630      	mov	r0, r6
 80178bc:	f7ff ff3b 	bl	8017736 <__i2b>
 80178c0:	2300      	movs	r3, #0
 80178c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80178c6:	4604      	mov	r4, r0
 80178c8:	6003      	str	r3, [r0, #0]
 80178ca:	f04f 0800 	mov.w	r8, #0
 80178ce:	07eb      	lsls	r3, r5, #31
 80178d0:	d50a      	bpl.n	80178e8 <__pow5mult+0x74>
 80178d2:	4639      	mov	r1, r7
 80178d4:	4622      	mov	r2, r4
 80178d6:	4630      	mov	r0, r6
 80178d8:	f7ff ff36 	bl	8017748 <__multiply>
 80178dc:	4639      	mov	r1, r7
 80178de:	4681      	mov	r9, r0
 80178e0:	4630      	mov	r0, r6
 80178e2:	f7ff fe4a 	bl	801757a <_Bfree>
 80178e6:	464f      	mov	r7, r9
 80178e8:	106d      	asrs	r5, r5, #1
 80178ea:	d00b      	beq.n	8017904 <__pow5mult+0x90>
 80178ec:	6820      	ldr	r0, [r4, #0]
 80178ee:	b938      	cbnz	r0, 8017900 <__pow5mult+0x8c>
 80178f0:	4622      	mov	r2, r4
 80178f2:	4621      	mov	r1, r4
 80178f4:	4630      	mov	r0, r6
 80178f6:	f7ff ff27 	bl	8017748 <__multiply>
 80178fa:	6020      	str	r0, [r4, #0]
 80178fc:	f8c0 8000 	str.w	r8, [r0]
 8017900:	4604      	mov	r4, r0
 8017902:	e7e4      	b.n	80178ce <__pow5mult+0x5a>
 8017904:	4638      	mov	r0, r7
 8017906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801790a:	bf00      	nop
 801790c:	080190b8 	.word	0x080190b8

08017910 <__lshift>:
 8017910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017914:	460c      	mov	r4, r1
 8017916:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801791a:	6923      	ldr	r3, [r4, #16]
 801791c:	6849      	ldr	r1, [r1, #4]
 801791e:	eb0a 0903 	add.w	r9, sl, r3
 8017922:	68a3      	ldr	r3, [r4, #8]
 8017924:	4607      	mov	r7, r0
 8017926:	4616      	mov	r6, r2
 8017928:	f109 0501 	add.w	r5, r9, #1
 801792c:	42ab      	cmp	r3, r5
 801792e:	db32      	blt.n	8017996 <__lshift+0x86>
 8017930:	4638      	mov	r0, r7
 8017932:	f7ff fdee 	bl	8017512 <_Balloc>
 8017936:	2300      	movs	r3, #0
 8017938:	4680      	mov	r8, r0
 801793a:	f100 0114 	add.w	r1, r0, #20
 801793e:	461a      	mov	r2, r3
 8017940:	4553      	cmp	r3, sl
 8017942:	db2b      	blt.n	801799c <__lshift+0x8c>
 8017944:	6920      	ldr	r0, [r4, #16]
 8017946:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801794a:	f104 0314 	add.w	r3, r4, #20
 801794e:	f016 021f 	ands.w	r2, r6, #31
 8017952:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017956:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801795a:	d025      	beq.n	80179a8 <__lshift+0x98>
 801795c:	f1c2 0e20 	rsb	lr, r2, #32
 8017960:	2000      	movs	r0, #0
 8017962:	681e      	ldr	r6, [r3, #0]
 8017964:	468a      	mov	sl, r1
 8017966:	4096      	lsls	r6, r2
 8017968:	4330      	orrs	r0, r6
 801796a:	f84a 0b04 	str.w	r0, [sl], #4
 801796e:	f853 0b04 	ldr.w	r0, [r3], #4
 8017972:	459c      	cmp	ip, r3
 8017974:	fa20 f00e 	lsr.w	r0, r0, lr
 8017978:	d814      	bhi.n	80179a4 <__lshift+0x94>
 801797a:	6048      	str	r0, [r1, #4]
 801797c:	b108      	cbz	r0, 8017982 <__lshift+0x72>
 801797e:	f109 0502 	add.w	r5, r9, #2
 8017982:	3d01      	subs	r5, #1
 8017984:	4638      	mov	r0, r7
 8017986:	f8c8 5010 	str.w	r5, [r8, #16]
 801798a:	4621      	mov	r1, r4
 801798c:	f7ff fdf5 	bl	801757a <_Bfree>
 8017990:	4640      	mov	r0, r8
 8017992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017996:	3101      	adds	r1, #1
 8017998:	005b      	lsls	r3, r3, #1
 801799a:	e7c7      	b.n	801792c <__lshift+0x1c>
 801799c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80179a0:	3301      	adds	r3, #1
 80179a2:	e7cd      	b.n	8017940 <__lshift+0x30>
 80179a4:	4651      	mov	r1, sl
 80179a6:	e7dc      	b.n	8017962 <__lshift+0x52>
 80179a8:	3904      	subs	r1, #4
 80179aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80179ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80179b2:	459c      	cmp	ip, r3
 80179b4:	d8f9      	bhi.n	80179aa <__lshift+0x9a>
 80179b6:	e7e4      	b.n	8017982 <__lshift+0x72>

080179b8 <__mcmp>:
 80179b8:	6903      	ldr	r3, [r0, #16]
 80179ba:	690a      	ldr	r2, [r1, #16]
 80179bc:	1a9b      	subs	r3, r3, r2
 80179be:	b530      	push	{r4, r5, lr}
 80179c0:	d10c      	bne.n	80179dc <__mcmp+0x24>
 80179c2:	0092      	lsls	r2, r2, #2
 80179c4:	3014      	adds	r0, #20
 80179c6:	3114      	adds	r1, #20
 80179c8:	1884      	adds	r4, r0, r2
 80179ca:	4411      	add	r1, r2
 80179cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80179d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80179d4:	4295      	cmp	r5, r2
 80179d6:	d003      	beq.n	80179e0 <__mcmp+0x28>
 80179d8:	d305      	bcc.n	80179e6 <__mcmp+0x2e>
 80179da:	2301      	movs	r3, #1
 80179dc:	4618      	mov	r0, r3
 80179de:	bd30      	pop	{r4, r5, pc}
 80179e0:	42a0      	cmp	r0, r4
 80179e2:	d3f3      	bcc.n	80179cc <__mcmp+0x14>
 80179e4:	e7fa      	b.n	80179dc <__mcmp+0x24>
 80179e6:	f04f 33ff 	mov.w	r3, #4294967295
 80179ea:	e7f7      	b.n	80179dc <__mcmp+0x24>

080179ec <__mdiff>:
 80179ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179f0:	460d      	mov	r5, r1
 80179f2:	4607      	mov	r7, r0
 80179f4:	4611      	mov	r1, r2
 80179f6:	4628      	mov	r0, r5
 80179f8:	4614      	mov	r4, r2
 80179fa:	f7ff ffdd 	bl	80179b8 <__mcmp>
 80179fe:	1e06      	subs	r6, r0, #0
 8017a00:	d108      	bne.n	8017a14 <__mdiff+0x28>
 8017a02:	4631      	mov	r1, r6
 8017a04:	4638      	mov	r0, r7
 8017a06:	f7ff fd84 	bl	8017512 <_Balloc>
 8017a0a:	2301      	movs	r3, #1
 8017a0c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a14:	bfa4      	itt	ge
 8017a16:	4623      	movge	r3, r4
 8017a18:	462c      	movge	r4, r5
 8017a1a:	4638      	mov	r0, r7
 8017a1c:	6861      	ldr	r1, [r4, #4]
 8017a1e:	bfa6      	itte	ge
 8017a20:	461d      	movge	r5, r3
 8017a22:	2600      	movge	r6, #0
 8017a24:	2601      	movlt	r6, #1
 8017a26:	f7ff fd74 	bl	8017512 <_Balloc>
 8017a2a:	692b      	ldr	r3, [r5, #16]
 8017a2c:	60c6      	str	r6, [r0, #12]
 8017a2e:	6926      	ldr	r6, [r4, #16]
 8017a30:	f105 0914 	add.w	r9, r5, #20
 8017a34:	f104 0214 	add.w	r2, r4, #20
 8017a38:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017a3c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017a40:	f100 0514 	add.w	r5, r0, #20
 8017a44:	f04f 0e00 	mov.w	lr, #0
 8017a48:	f852 ab04 	ldr.w	sl, [r2], #4
 8017a4c:	f859 4b04 	ldr.w	r4, [r9], #4
 8017a50:	fa1e f18a 	uxtah	r1, lr, sl
 8017a54:	b2a3      	uxth	r3, r4
 8017a56:	1ac9      	subs	r1, r1, r3
 8017a58:	0c23      	lsrs	r3, r4, #16
 8017a5a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017a5e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017a62:	b289      	uxth	r1, r1
 8017a64:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017a68:	45c8      	cmp	r8, r9
 8017a6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017a6e:	4694      	mov	ip, r2
 8017a70:	f845 3b04 	str.w	r3, [r5], #4
 8017a74:	d8e8      	bhi.n	8017a48 <__mdiff+0x5c>
 8017a76:	45bc      	cmp	ip, r7
 8017a78:	d304      	bcc.n	8017a84 <__mdiff+0x98>
 8017a7a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017a7e:	b183      	cbz	r3, 8017aa2 <__mdiff+0xb6>
 8017a80:	6106      	str	r6, [r0, #16]
 8017a82:	e7c5      	b.n	8017a10 <__mdiff+0x24>
 8017a84:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017a88:	fa1e f381 	uxtah	r3, lr, r1
 8017a8c:	141a      	asrs	r2, r3, #16
 8017a8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017a92:	b29b      	uxth	r3, r3
 8017a94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017a98:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017a9c:	f845 3b04 	str.w	r3, [r5], #4
 8017aa0:	e7e9      	b.n	8017a76 <__mdiff+0x8a>
 8017aa2:	3e01      	subs	r6, #1
 8017aa4:	e7e9      	b.n	8017a7a <__mdiff+0x8e>
	...

08017aa8 <__ulp>:
 8017aa8:	4b12      	ldr	r3, [pc, #72]	; (8017af4 <__ulp+0x4c>)
 8017aaa:	ee10 2a90 	vmov	r2, s1
 8017aae:	401a      	ands	r2, r3
 8017ab0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	dd04      	ble.n	8017ac2 <__ulp+0x1a>
 8017ab8:	2000      	movs	r0, #0
 8017aba:	4619      	mov	r1, r3
 8017abc:	ec41 0b10 	vmov	d0, r0, r1
 8017ac0:	4770      	bx	lr
 8017ac2:	425b      	negs	r3, r3
 8017ac4:	151b      	asrs	r3, r3, #20
 8017ac6:	2b13      	cmp	r3, #19
 8017ac8:	f04f 0000 	mov.w	r0, #0
 8017acc:	f04f 0100 	mov.w	r1, #0
 8017ad0:	dc04      	bgt.n	8017adc <__ulp+0x34>
 8017ad2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017ad6:	fa42 f103 	asr.w	r1, r2, r3
 8017ada:	e7ef      	b.n	8017abc <__ulp+0x14>
 8017adc:	3b14      	subs	r3, #20
 8017ade:	2b1e      	cmp	r3, #30
 8017ae0:	f04f 0201 	mov.w	r2, #1
 8017ae4:	bfda      	itte	le
 8017ae6:	f1c3 031f 	rsble	r3, r3, #31
 8017aea:	fa02 f303 	lslle.w	r3, r2, r3
 8017aee:	4613      	movgt	r3, r2
 8017af0:	4618      	mov	r0, r3
 8017af2:	e7e3      	b.n	8017abc <__ulp+0x14>
 8017af4:	7ff00000 	.word	0x7ff00000

08017af8 <__b2d>:
 8017af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017afa:	6905      	ldr	r5, [r0, #16]
 8017afc:	f100 0714 	add.w	r7, r0, #20
 8017b00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017b04:	1f2e      	subs	r6, r5, #4
 8017b06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	f7ff fdc5 	bl	801769a <__hi0bits>
 8017b10:	f1c0 0320 	rsb	r3, r0, #32
 8017b14:	280a      	cmp	r0, #10
 8017b16:	600b      	str	r3, [r1, #0]
 8017b18:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017b90 <__b2d+0x98>
 8017b1c:	dc14      	bgt.n	8017b48 <__b2d+0x50>
 8017b1e:	f1c0 0e0b 	rsb	lr, r0, #11
 8017b22:	fa24 f10e 	lsr.w	r1, r4, lr
 8017b26:	42b7      	cmp	r7, r6
 8017b28:	ea41 030c 	orr.w	r3, r1, ip
 8017b2c:	bf34      	ite	cc
 8017b2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017b32:	2100      	movcs	r1, #0
 8017b34:	3015      	adds	r0, #21
 8017b36:	fa04 f000 	lsl.w	r0, r4, r0
 8017b3a:	fa21 f10e 	lsr.w	r1, r1, lr
 8017b3e:	ea40 0201 	orr.w	r2, r0, r1
 8017b42:	ec43 2b10 	vmov	d0, r2, r3
 8017b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b48:	42b7      	cmp	r7, r6
 8017b4a:	bf3a      	itte	cc
 8017b4c:	f1a5 0608 	subcc.w	r6, r5, #8
 8017b50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017b54:	2100      	movcs	r1, #0
 8017b56:	380b      	subs	r0, #11
 8017b58:	d015      	beq.n	8017b86 <__b2d+0x8e>
 8017b5a:	4084      	lsls	r4, r0
 8017b5c:	f1c0 0520 	rsb	r5, r0, #32
 8017b60:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017b64:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017b68:	42be      	cmp	r6, r7
 8017b6a:	fa21 fc05 	lsr.w	ip, r1, r5
 8017b6e:	ea44 030c 	orr.w	r3, r4, ip
 8017b72:	bf8c      	ite	hi
 8017b74:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017b78:	2400      	movls	r4, #0
 8017b7a:	fa01 f000 	lsl.w	r0, r1, r0
 8017b7e:	40ec      	lsrs	r4, r5
 8017b80:	ea40 0204 	orr.w	r2, r0, r4
 8017b84:	e7dd      	b.n	8017b42 <__b2d+0x4a>
 8017b86:	ea44 030c 	orr.w	r3, r4, ip
 8017b8a:	460a      	mov	r2, r1
 8017b8c:	e7d9      	b.n	8017b42 <__b2d+0x4a>
 8017b8e:	bf00      	nop
 8017b90:	3ff00000 	.word	0x3ff00000

08017b94 <__d2b>:
 8017b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017b98:	460e      	mov	r6, r1
 8017b9a:	2101      	movs	r1, #1
 8017b9c:	ec59 8b10 	vmov	r8, r9, d0
 8017ba0:	4615      	mov	r5, r2
 8017ba2:	f7ff fcb6 	bl	8017512 <_Balloc>
 8017ba6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017baa:	4607      	mov	r7, r0
 8017bac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017bb0:	bb34      	cbnz	r4, 8017c00 <__d2b+0x6c>
 8017bb2:	9301      	str	r3, [sp, #4]
 8017bb4:	f1b8 0300 	subs.w	r3, r8, #0
 8017bb8:	d027      	beq.n	8017c0a <__d2b+0x76>
 8017bba:	a802      	add	r0, sp, #8
 8017bbc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017bc0:	f7ff fd8a 	bl	80176d8 <__lo0bits>
 8017bc4:	9900      	ldr	r1, [sp, #0]
 8017bc6:	b1f0      	cbz	r0, 8017c06 <__d2b+0x72>
 8017bc8:	9a01      	ldr	r2, [sp, #4]
 8017bca:	f1c0 0320 	rsb	r3, r0, #32
 8017bce:	fa02 f303 	lsl.w	r3, r2, r3
 8017bd2:	430b      	orrs	r3, r1
 8017bd4:	40c2      	lsrs	r2, r0
 8017bd6:	617b      	str	r3, [r7, #20]
 8017bd8:	9201      	str	r2, [sp, #4]
 8017bda:	9b01      	ldr	r3, [sp, #4]
 8017bdc:	61bb      	str	r3, [r7, #24]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	bf14      	ite	ne
 8017be2:	2102      	movne	r1, #2
 8017be4:	2101      	moveq	r1, #1
 8017be6:	6139      	str	r1, [r7, #16]
 8017be8:	b1c4      	cbz	r4, 8017c1c <__d2b+0x88>
 8017bea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017bee:	4404      	add	r4, r0
 8017bf0:	6034      	str	r4, [r6, #0]
 8017bf2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017bf6:	6028      	str	r0, [r5, #0]
 8017bf8:	4638      	mov	r0, r7
 8017bfa:	b003      	add	sp, #12
 8017bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017c04:	e7d5      	b.n	8017bb2 <__d2b+0x1e>
 8017c06:	6179      	str	r1, [r7, #20]
 8017c08:	e7e7      	b.n	8017bda <__d2b+0x46>
 8017c0a:	a801      	add	r0, sp, #4
 8017c0c:	f7ff fd64 	bl	80176d8 <__lo0bits>
 8017c10:	9b01      	ldr	r3, [sp, #4]
 8017c12:	617b      	str	r3, [r7, #20]
 8017c14:	2101      	movs	r1, #1
 8017c16:	6139      	str	r1, [r7, #16]
 8017c18:	3020      	adds	r0, #32
 8017c1a:	e7e5      	b.n	8017be8 <__d2b+0x54>
 8017c1c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017c20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017c24:	6030      	str	r0, [r6, #0]
 8017c26:	6918      	ldr	r0, [r3, #16]
 8017c28:	f7ff fd37 	bl	801769a <__hi0bits>
 8017c2c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017c30:	e7e1      	b.n	8017bf6 <__d2b+0x62>

08017c32 <__ratio>:
 8017c32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c36:	4688      	mov	r8, r1
 8017c38:	4669      	mov	r1, sp
 8017c3a:	4681      	mov	r9, r0
 8017c3c:	f7ff ff5c 	bl	8017af8 <__b2d>
 8017c40:	a901      	add	r1, sp, #4
 8017c42:	4640      	mov	r0, r8
 8017c44:	ec57 6b10 	vmov	r6, r7, d0
 8017c48:	f7ff ff56 	bl	8017af8 <__b2d>
 8017c4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017c50:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017c54:	eba3 0c02 	sub.w	ip, r3, r2
 8017c58:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017c5c:	1a9b      	subs	r3, r3, r2
 8017c5e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017c62:	ec5b ab10 	vmov	sl, fp, d0
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	bfce      	itee	gt
 8017c6a:	463a      	movgt	r2, r7
 8017c6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017c70:	465a      	movle	r2, fp
 8017c72:	4659      	mov	r1, fp
 8017c74:	463d      	mov	r5, r7
 8017c76:	bfd4      	ite	le
 8017c78:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017c7c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017c80:	4630      	mov	r0, r6
 8017c82:	ee10 2a10 	vmov	r2, s0
 8017c86:	460b      	mov	r3, r1
 8017c88:	4629      	mov	r1, r5
 8017c8a:	f7e8 fdf7 	bl	800087c <__aeabi_ddiv>
 8017c8e:	ec41 0b10 	vmov	d0, r0, r1
 8017c92:	b003      	add	sp, #12
 8017c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017c98 <__copybits>:
 8017c98:	3901      	subs	r1, #1
 8017c9a:	b510      	push	{r4, lr}
 8017c9c:	1149      	asrs	r1, r1, #5
 8017c9e:	6914      	ldr	r4, [r2, #16]
 8017ca0:	3101      	adds	r1, #1
 8017ca2:	f102 0314 	add.w	r3, r2, #20
 8017ca6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017caa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017cae:	42a3      	cmp	r3, r4
 8017cb0:	4602      	mov	r2, r0
 8017cb2:	d303      	bcc.n	8017cbc <__copybits+0x24>
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	428a      	cmp	r2, r1
 8017cb8:	d305      	bcc.n	8017cc6 <__copybits+0x2e>
 8017cba:	bd10      	pop	{r4, pc}
 8017cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cc0:	f840 2b04 	str.w	r2, [r0], #4
 8017cc4:	e7f3      	b.n	8017cae <__copybits+0x16>
 8017cc6:	f842 3b04 	str.w	r3, [r2], #4
 8017cca:	e7f4      	b.n	8017cb6 <__copybits+0x1e>

08017ccc <__any_on>:
 8017ccc:	f100 0214 	add.w	r2, r0, #20
 8017cd0:	6900      	ldr	r0, [r0, #16]
 8017cd2:	114b      	asrs	r3, r1, #5
 8017cd4:	4298      	cmp	r0, r3
 8017cd6:	b510      	push	{r4, lr}
 8017cd8:	db11      	blt.n	8017cfe <__any_on+0x32>
 8017cda:	dd0a      	ble.n	8017cf2 <__any_on+0x26>
 8017cdc:	f011 011f 	ands.w	r1, r1, #31
 8017ce0:	d007      	beq.n	8017cf2 <__any_on+0x26>
 8017ce2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017ce6:	fa24 f001 	lsr.w	r0, r4, r1
 8017cea:	fa00 f101 	lsl.w	r1, r0, r1
 8017cee:	428c      	cmp	r4, r1
 8017cf0:	d10b      	bne.n	8017d0a <__any_on+0x3e>
 8017cf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017cf6:	4293      	cmp	r3, r2
 8017cf8:	d803      	bhi.n	8017d02 <__any_on+0x36>
 8017cfa:	2000      	movs	r0, #0
 8017cfc:	bd10      	pop	{r4, pc}
 8017cfe:	4603      	mov	r3, r0
 8017d00:	e7f7      	b.n	8017cf2 <__any_on+0x26>
 8017d02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017d06:	2900      	cmp	r1, #0
 8017d08:	d0f5      	beq.n	8017cf6 <__any_on+0x2a>
 8017d0a:	2001      	movs	r0, #1
 8017d0c:	e7f6      	b.n	8017cfc <__any_on+0x30>

08017d0e <_calloc_r>:
 8017d0e:	b538      	push	{r3, r4, r5, lr}
 8017d10:	fb02 f401 	mul.w	r4, r2, r1
 8017d14:	4621      	mov	r1, r4
 8017d16:	f000 f857 	bl	8017dc8 <_malloc_r>
 8017d1a:	4605      	mov	r5, r0
 8017d1c:	b118      	cbz	r0, 8017d26 <_calloc_r+0x18>
 8017d1e:	4622      	mov	r2, r4
 8017d20:	2100      	movs	r1, #0
 8017d22:	f7fc fc9f 	bl	8014664 <memset>
 8017d26:	4628      	mov	r0, r5
 8017d28:	bd38      	pop	{r3, r4, r5, pc}
	...

08017d2c <_free_r>:
 8017d2c:	b538      	push	{r3, r4, r5, lr}
 8017d2e:	4605      	mov	r5, r0
 8017d30:	2900      	cmp	r1, #0
 8017d32:	d045      	beq.n	8017dc0 <_free_r+0x94>
 8017d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d38:	1f0c      	subs	r4, r1, #4
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	bfb8      	it	lt
 8017d3e:	18e4      	addlt	r4, r4, r3
 8017d40:	f000 fe30 	bl	80189a4 <__malloc_lock>
 8017d44:	4a1f      	ldr	r2, [pc, #124]	; (8017dc4 <_free_r+0x98>)
 8017d46:	6813      	ldr	r3, [r2, #0]
 8017d48:	4610      	mov	r0, r2
 8017d4a:	b933      	cbnz	r3, 8017d5a <_free_r+0x2e>
 8017d4c:	6063      	str	r3, [r4, #4]
 8017d4e:	6014      	str	r4, [r2, #0]
 8017d50:	4628      	mov	r0, r5
 8017d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d56:	f000 be26 	b.w	80189a6 <__malloc_unlock>
 8017d5a:	42a3      	cmp	r3, r4
 8017d5c:	d90c      	bls.n	8017d78 <_free_r+0x4c>
 8017d5e:	6821      	ldr	r1, [r4, #0]
 8017d60:	1862      	adds	r2, r4, r1
 8017d62:	4293      	cmp	r3, r2
 8017d64:	bf04      	itt	eq
 8017d66:	681a      	ldreq	r2, [r3, #0]
 8017d68:	685b      	ldreq	r3, [r3, #4]
 8017d6a:	6063      	str	r3, [r4, #4]
 8017d6c:	bf04      	itt	eq
 8017d6e:	1852      	addeq	r2, r2, r1
 8017d70:	6022      	streq	r2, [r4, #0]
 8017d72:	6004      	str	r4, [r0, #0]
 8017d74:	e7ec      	b.n	8017d50 <_free_r+0x24>
 8017d76:	4613      	mov	r3, r2
 8017d78:	685a      	ldr	r2, [r3, #4]
 8017d7a:	b10a      	cbz	r2, 8017d80 <_free_r+0x54>
 8017d7c:	42a2      	cmp	r2, r4
 8017d7e:	d9fa      	bls.n	8017d76 <_free_r+0x4a>
 8017d80:	6819      	ldr	r1, [r3, #0]
 8017d82:	1858      	adds	r0, r3, r1
 8017d84:	42a0      	cmp	r0, r4
 8017d86:	d10b      	bne.n	8017da0 <_free_r+0x74>
 8017d88:	6820      	ldr	r0, [r4, #0]
 8017d8a:	4401      	add	r1, r0
 8017d8c:	1858      	adds	r0, r3, r1
 8017d8e:	4282      	cmp	r2, r0
 8017d90:	6019      	str	r1, [r3, #0]
 8017d92:	d1dd      	bne.n	8017d50 <_free_r+0x24>
 8017d94:	6810      	ldr	r0, [r2, #0]
 8017d96:	6852      	ldr	r2, [r2, #4]
 8017d98:	605a      	str	r2, [r3, #4]
 8017d9a:	4401      	add	r1, r0
 8017d9c:	6019      	str	r1, [r3, #0]
 8017d9e:	e7d7      	b.n	8017d50 <_free_r+0x24>
 8017da0:	d902      	bls.n	8017da8 <_free_r+0x7c>
 8017da2:	230c      	movs	r3, #12
 8017da4:	602b      	str	r3, [r5, #0]
 8017da6:	e7d3      	b.n	8017d50 <_free_r+0x24>
 8017da8:	6820      	ldr	r0, [r4, #0]
 8017daa:	1821      	adds	r1, r4, r0
 8017dac:	428a      	cmp	r2, r1
 8017dae:	bf04      	itt	eq
 8017db0:	6811      	ldreq	r1, [r2, #0]
 8017db2:	6852      	ldreq	r2, [r2, #4]
 8017db4:	6062      	str	r2, [r4, #4]
 8017db6:	bf04      	itt	eq
 8017db8:	1809      	addeq	r1, r1, r0
 8017dba:	6021      	streq	r1, [r4, #0]
 8017dbc:	605c      	str	r4, [r3, #4]
 8017dbe:	e7c7      	b.n	8017d50 <_free_r+0x24>
 8017dc0:	bd38      	pop	{r3, r4, r5, pc}
 8017dc2:	bf00      	nop
 8017dc4:	200481d8 	.word	0x200481d8

08017dc8 <_malloc_r>:
 8017dc8:	b570      	push	{r4, r5, r6, lr}
 8017dca:	1ccd      	adds	r5, r1, #3
 8017dcc:	f025 0503 	bic.w	r5, r5, #3
 8017dd0:	3508      	adds	r5, #8
 8017dd2:	2d0c      	cmp	r5, #12
 8017dd4:	bf38      	it	cc
 8017dd6:	250c      	movcc	r5, #12
 8017dd8:	2d00      	cmp	r5, #0
 8017dda:	4606      	mov	r6, r0
 8017ddc:	db01      	blt.n	8017de2 <_malloc_r+0x1a>
 8017dde:	42a9      	cmp	r1, r5
 8017de0:	d903      	bls.n	8017dea <_malloc_r+0x22>
 8017de2:	230c      	movs	r3, #12
 8017de4:	6033      	str	r3, [r6, #0]
 8017de6:	2000      	movs	r0, #0
 8017de8:	bd70      	pop	{r4, r5, r6, pc}
 8017dea:	f000 fddb 	bl	80189a4 <__malloc_lock>
 8017dee:	4a21      	ldr	r2, [pc, #132]	; (8017e74 <_malloc_r+0xac>)
 8017df0:	6814      	ldr	r4, [r2, #0]
 8017df2:	4621      	mov	r1, r4
 8017df4:	b991      	cbnz	r1, 8017e1c <_malloc_r+0x54>
 8017df6:	4c20      	ldr	r4, [pc, #128]	; (8017e78 <_malloc_r+0xb0>)
 8017df8:	6823      	ldr	r3, [r4, #0]
 8017dfa:	b91b      	cbnz	r3, 8017e04 <_malloc_r+0x3c>
 8017dfc:	4630      	mov	r0, r6
 8017dfe:	f000 fc91 	bl	8018724 <_sbrk_r>
 8017e02:	6020      	str	r0, [r4, #0]
 8017e04:	4629      	mov	r1, r5
 8017e06:	4630      	mov	r0, r6
 8017e08:	f000 fc8c 	bl	8018724 <_sbrk_r>
 8017e0c:	1c43      	adds	r3, r0, #1
 8017e0e:	d124      	bne.n	8017e5a <_malloc_r+0x92>
 8017e10:	230c      	movs	r3, #12
 8017e12:	6033      	str	r3, [r6, #0]
 8017e14:	4630      	mov	r0, r6
 8017e16:	f000 fdc6 	bl	80189a6 <__malloc_unlock>
 8017e1a:	e7e4      	b.n	8017de6 <_malloc_r+0x1e>
 8017e1c:	680b      	ldr	r3, [r1, #0]
 8017e1e:	1b5b      	subs	r3, r3, r5
 8017e20:	d418      	bmi.n	8017e54 <_malloc_r+0x8c>
 8017e22:	2b0b      	cmp	r3, #11
 8017e24:	d90f      	bls.n	8017e46 <_malloc_r+0x7e>
 8017e26:	600b      	str	r3, [r1, #0]
 8017e28:	50cd      	str	r5, [r1, r3]
 8017e2a:	18cc      	adds	r4, r1, r3
 8017e2c:	4630      	mov	r0, r6
 8017e2e:	f000 fdba 	bl	80189a6 <__malloc_unlock>
 8017e32:	f104 000b 	add.w	r0, r4, #11
 8017e36:	1d23      	adds	r3, r4, #4
 8017e38:	f020 0007 	bic.w	r0, r0, #7
 8017e3c:	1ac3      	subs	r3, r0, r3
 8017e3e:	d0d3      	beq.n	8017de8 <_malloc_r+0x20>
 8017e40:	425a      	negs	r2, r3
 8017e42:	50e2      	str	r2, [r4, r3]
 8017e44:	e7d0      	b.n	8017de8 <_malloc_r+0x20>
 8017e46:	428c      	cmp	r4, r1
 8017e48:	684b      	ldr	r3, [r1, #4]
 8017e4a:	bf16      	itet	ne
 8017e4c:	6063      	strne	r3, [r4, #4]
 8017e4e:	6013      	streq	r3, [r2, #0]
 8017e50:	460c      	movne	r4, r1
 8017e52:	e7eb      	b.n	8017e2c <_malloc_r+0x64>
 8017e54:	460c      	mov	r4, r1
 8017e56:	6849      	ldr	r1, [r1, #4]
 8017e58:	e7cc      	b.n	8017df4 <_malloc_r+0x2c>
 8017e5a:	1cc4      	adds	r4, r0, #3
 8017e5c:	f024 0403 	bic.w	r4, r4, #3
 8017e60:	42a0      	cmp	r0, r4
 8017e62:	d005      	beq.n	8017e70 <_malloc_r+0xa8>
 8017e64:	1a21      	subs	r1, r4, r0
 8017e66:	4630      	mov	r0, r6
 8017e68:	f000 fc5c 	bl	8018724 <_sbrk_r>
 8017e6c:	3001      	adds	r0, #1
 8017e6e:	d0cf      	beq.n	8017e10 <_malloc_r+0x48>
 8017e70:	6025      	str	r5, [r4, #0]
 8017e72:	e7db      	b.n	8017e2c <_malloc_r+0x64>
 8017e74:	200481d8 	.word	0x200481d8
 8017e78:	200481dc 	.word	0x200481dc

08017e7c <__ssputs_r>:
 8017e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e80:	688e      	ldr	r6, [r1, #8]
 8017e82:	429e      	cmp	r6, r3
 8017e84:	4682      	mov	sl, r0
 8017e86:	460c      	mov	r4, r1
 8017e88:	4690      	mov	r8, r2
 8017e8a:	4699      	mov	r9, r3
 8017e8c:	d837      	bhi.n	8017efe <__ssputs_r+0x82>
 8017e8e:	898a      	ldrh	r2, [r1, #12]
 8017e90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017e94:	d031      	beq.n	8017efa <__ssputs_r+0x7e>
 8017e96:	6825      	ldr	r5, [r4, #0]
 8017e98:	6909      	ldr	r1, [r1, #16]
 8017e9a:	1a6f      	subs	r7, r5, r1
 8017e9c:	6965      	ldr	r5, [r4, #20]
 8017e9e:	2302      	movs	r3, #2
 8017ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ea4:	fb95 f5f3 	sdiv	r5, r5, r3
 8017ea8:	f109 0301 	add.w	r3, r9, #1
 8017eac:	443b      	add	r3, r7
 8017eae:	429d      	cmp	r5, r3
 8017eb0:	bf38      	it	cc
 8017eb2:	461d      	movcc	r5, r3
 8017eb4:	0553      	lsls	r3, r2, #21
 8017eb6:	d530      	bpl.n	8017f1a <__ssputs_r+0x9e>
 8017eb8:	4629      	mov	r1, r5
 8017eba:	f7ff ff85 	bl	8017dc8 <_malloc_r>
 8017ebe:	4606      	mov	r6, r0
 8017ec0:	b950      	cbnz	r0, 8017ed8 <__ssputs_r+0x5c>
 8017ec2:	230c      	movs	r3, #12
 8017ec4:	f8ca 3000 	str.w	r3, [sl]
 8017ec8:	89a3      	ldrh	r3, [r4, #12]
 8017eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ece:	81a3      	strh	r3, [r4, #12]
 8017ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ed8:	463a      	mov	r2, r7
 8017eda:	6921      	ldr	r1, [r4, #16]
 8017edc:	f7ff fb0e 	bl	80174fc <memcpy>
 8017ee0:	89a3      	ldrh	r3, [r4, #12]
 8017ee2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017eea:	81a3      	strh	r3, [r4, #12]
 8017eec:	6126      	str	r6, [r4, #16]
 8017eee:	6165      	str	r5, [r4, #20]
 8017ef0:	443e      	add	r6, r7
 8017ef2:	1bed      	subs	r5, r5, r7
 8017ef4:	6026      	str	r6, [r4, #0]
 8017ef6:	60a5      	str	r5, [r4, #8]
 8017ef8:	464e      	mov	r6, r9
 8017efa:	454e      	cmp	r6, r9
 8017efc:	d900      	bls.n	8017f00 <__ssputs_r+0x84>
 8017efe:	464e      	mov	r6, r9
 8017f00:	4632      	mov	r2, r6
 8017f02:	4641      	mov	r1, r8
 8017f04:	6820      	ldr	r0, [r4, #0]
 8017f06:	f000 fd34 	bl	8018972 <memmove>
 8017f0a:	68a3      	ldr	r3, [r4, #8]
 8017f0c:	1b9b      	subs	r3, r3, r6
 8017f0e:	60a3      	str	r3, [r4, #8]
 8017f10:	6823      	ldr	r3, [r4, #0]
 8017f12:	441e      	add	r6, r3
 8017f14:	6026      	str	r6, [r4, #0]
 8017f16:	2000      	movs	r0, #0
 8017f18:	e7dc      	b.n	8017ed4 <__ssputs_r+0x58>
 8017f1a:	462a      	mov	r2, r5
 8017f1c:	f000 fd44 	bl	80189a8 <_realloc_r>
 8017f20:	4606      	mov	r6, r0
 8017f22:	2800      	cmp	r0, #0
 8017f24:	d1e2      	bne.n	8017eec <__ssputs_r+0x70>
 8017f26:	6921      	ldr	r1, [r4, #16]
 8017f28:	4650      	mov	r0, sl
 8017f2a:	f7ff feff 	bl	8017d2c <_free_r>
 8017f2e:	e7c8      	b.n	8017ec2 <__ssputs_r+0x46>

08017f30 <_svfiprintf_r>:
 8017f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f34:	461d      	mov	r5, r3
 8017f36:	898b      	ldrh	r3, [r1, #12]
 8017f38:	061f      	lsls	r7, r3, #24
 8017f3a:	b09d      	sub	sp, #116	; 0x74
 8017f3c:	4680      	mov	r8, r0
 8017f3e:	460c      	mov	r4, r1
 8017f40:	4616      	mov	r6, r2
 8017f42:	d50f      	bpl.n	8017f64 <_svfiprintf_r+0x34>
 8017f44:	690b      	ldr	r3, [r1, #16]
 8017f46:	b96b      	cbnz	r3, 8017f64 <_svfiprintf_r+0x34>
 8017f48:	2140      	movs	r1, #64	; 0x40
 8017f4a:	f7ff ff3d 	bl	8017dc8 <_malloc_r>
 8017f4e:	6020      	str	r0, [r4, #0]
 8017f50:	6120      	str	r0, [r4, #16]
 8017f52:	b928      	cbnz	r0, 8017f60 <_svfiprintf_r+0x30>
 8017f54:	230c      	movs	r3, #12
 8017f56:	f8c8 3000 	str.w	r3, [r8]
 8017f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8017f5e:	e0c8      	b.n	80180f2 <_svfiprintf_r+0x1c2>
 8017f60:	2340      	movs	r3, #64	; 0x40
 8017f62:	6163      	str	r3, [r4, #20]
 8017f64:	2300      	movs	r3, #0
 8017f66:	9309      	str	r3, [sp, #36]	; 0x24
 8017f68:	2320      	movs	r3, #32
 8017f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017f6e:	2330      	movs	r3, #48	; 0x30
 8017f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017f74:	9503      	str	r5, [sp, #12]
 8017f76:	f04f 0b01 	mov.w	fp, #1
 8017f7a:	4637      	mov	r7, r6
 8017f7c:	463d      	mov	r5, r7
 8017f7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017f82:	b10b      	cbz	r3, 8017f88 <_svfiprintf_r+0x58>
 8017f84:	2b25      	cmp	r3, #37	; 0x25
 8017f86:	d13e      	bne.n	8018006 <_svfiprintf_r+0xd6>
 8017f88:	ebb7 0a06 	subs.w	sl, r7, r6
 8017f8c:	d00b      	beq.n	8017fa6 <_svfiprintf_r+0x76>
 8017f8e:	4653      	mov	r3, sl
 8017f90:	4632      	mov	r2, r6
 8017f92:	4621      	mov	r1, r4
 8017f94:	4640      	mov	r0, r8
 8017f96:	f7ff ff71 	bl	8017e7c <__ssputs_r>
 8017f9a:	3001      	adds	r0, #1
 8017f9c:	f000 80a4 	beq.w	80180e8 <_svfiprintf_r+0x1b8>
 8017fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fa2:	4453      	add	r3, sl
 8017fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8017fa6:	783b      	ldrb	r3, [r7, #0]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	f000 809d 	beq.w	80180e8 <_svfiprintf_r+0x1b8>
 8017fae:	2300      	movs	r3, #0
 8017fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8017fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017fb8:	9304      	str	r3, [sp, #16]
 8017fba:	9307      	str	r3, [sp, #28]
 8017fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8017fc2:	462f      	mov	r7, r5
 8017fc4:	2205      	movs	r2, #5
 8017fc6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017fca:	4850      	ldr	r0, [pc, #320]	; (801810c <_svfiprintf_r+0x1dc>)
 8017fcc:	f7e8 f920 	bl	8000210 <memchr>
 8017fd0:	9b04      	ldr	r3, [sp, #16]
 8017fd2:	b9d0      	cbnz	r0, 801800a <_svfiprintf_r+0xda>
 8017fd4:	06d9      	lsls	r1, r3, #27
 8017fd6:	bf44      	itt	mi
 8017fd8:	2220      	movmi	r2, #32
 8017fda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017fde:	071a      	lsls	r2, r3, #28
 8017fe0:	bf44      	itt	mi
 8017fe2:	222b      	movmi	r2, #43	; 0x2b
 8017fe4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017fe8:	782a      	ldrb	r2, [r5, #0]
 8017fea:	2a2a      	cmp	r2, #42	; 0x2a
 8017fec:	d015      	beq.n	801801a <_svfiprintf_r+0xea>
 8017fee:	9a07      	ldr	r2, [sp, #28]
 8017ff0:	462f      	mov	r7, r5
 8017ff2:	2000      	movs	r0, #0
 8017ff4:	250a      	movs	r5, #10
 8017ff6:	4639      	mov	r1, r7
 8017ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017ffc:	3b30      	subs	r3, #48	; 0x30
 8017ffe:	2b09      	cmp	r3, #9
 8018000:	d94d      	bls.n	801809e <_svfiprintf_r+0x16e>
 8018002:	b1b8      	cbz	r0, 8018034 <_svfiprintf_r+0x104>
 8018004:	e00f      	b.n	8018026 <_svfiprintf_r+0xf6>
 8018006:	462f      	mov	r7, r5
 8018008:	e7b8      	b.n	8017f7c <_svfiprintf_r+0x4c>
 801800a:	4a40      	ldr	r2, [pc, #256]	; (801810c <_svfiprintf_r+0x1dc>)
 801800c:	1a80      	subs	r0, r0, r2
 801800e:	fa0b f000 	lsl.w	r0, fp, r0
 8018012:	4318      	orrs	r0, r3
 8018014:	9004      	str	r0, [sp, #16]
 8018016:	463d      	mov	r5, r7
 8018018:	e7d3      	b.n	8017fc2 <_svfiprintf_r+0x92>
 801801a:	9a03      	ldr	r2, [sp, #12]
 801801c:	1d11      	adds	r1, r2, #4
 801801e:	6812      	ldr	r2, [r2, #0]
 8018020:	9103      	str	r1, [sp, #12]
 8018022:	2a00      	cmp	r2, #0
 8018024:	db01      	blt.n	801802a <_svfiprintf_r+0xfa>
 8018026:	9207      	str	r2, [sp, #28]
 8018028:	e004      	b.n	8018034 <_svfiprintf_r+0x104>
 801802a:	4252      	negs	r2, r2
 801802c:	f043 0302 	orr.w	r3, r3, #2
 8018030:	9207      	str	r2, [sp, #28]
 8018032:	9304      	str	r3, [sp, #16]
 8018034:	783b      	ldrb	r3, [r7, #0]
 8018036:	2b2e      	cmp	r3, #46	; 0x2e
 8018038:	d10c      	bne.n	8018054 <_svfiprintf_r+0x124>
 801803a:	787b      	ldrb	r3, [r7, #1]
 801803c:	2b2a      	cmp	r3, #42	; 0x2a
 801803e:	d133      	bne.n	80180a8 <_svfiprintf_r+0x178>
 8018040:	9b03      	ldr	r3, [sp, #12]
 8018042:	1d1a      	adds	r2, r3, #4
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	9203      	str	r2, [sp, #12]
 8018048:	2b00      	cmp	r3, #0
 801804a:	bfb8      	it	lt
 801804c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018050:	3702      	adds	r7, #2
 8018052:	9305      	str	r3, [sp, #20]
 8018054:	4d2e      	ldr	r5, [pc, #184]	; (8018110 <_svfiprintf_r+0x1e0>)
 8018056:	7839      	ldrb	r1, [r7, #0]
 8018058:	2203      	movs	r2, #3
 801805a:	4628      	mov	r0, r5
 801805c:	f7e8 f8d8 	bl	8000210 <memchr>
 8018060:	b138      	cbz	r0, 8018072 <_svfiprintf_r+0x142>
 8018062:	2340      	movs	r3, #64	; 0x40
 8018064:	1b40      	subs	r0, r0, r5
 8018066:	fa03 f000 	lsl.w	r0, r3, r0
 801806a:	9b04      	ldr	r3, [sp, #16]
 801806c:	4303      	orrs	r3, r0
 801806e:	3701      	adds	r7, #1
 8018070:	9304      	str	r3, [sp, #16]
 8018072:	7839      	ldrb	r1, [r7, #0]
 8018074:	4827      	ldr	r0, [pc, #156]	; (8018114 <_svfiprintf_r+0x1e4>)
 8018076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801807a:	2206      	movs	r2, #6
 801807c:	1c7e      	adds	r6, r7, #1
 801807e:	f7e8 f8c7 	bl	8000210 <memchr>
 8018082:	2800      	cmp	r0, #0
 8018084:	d038      	beq.n	80180f8 <_svfiprintf_r+0x1c8>
 8018086:	4b24      	ldr	r3, [pc, #144]	; (8018118 <_svfiprintf_r+0x1e8>)
 8018088:	bb13      	cbnz	r3, 80180d0 <_svfiprintf_r+0x1a0>
 801808a:	9b03      	ldr	r3, [sp, #12]
 801808c:	3307      	adds	r3, #7
 801808e:	f023 0307 	bic.w	r3, r3, #7
 8018092:	3308      	adds	r3, #8
 8018094:	9303      	str	r3, [sp, #12]
 8018096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018098:	444b      	add	r3, r9
 801809a:	9309      	str	r3, [sp, #36]	; 0x24
 801809c:	e76d      	b.n	8017f7a <_svfiprintf_r+0x4a>
 801809e:	fb05 3202 	mla	r2, r5, r2, r3
 80180a2:	2001      	movs	r0, #1
 80180a4:	460f      	mov	r7, r1
 80180a6:	e7a6      	b.n	8017ff6 <_svfiprintf_r+0xc6>
 80180a8:	2300      	movs	r3, #0
 80180aa:	3701      	adds	r7, #1
 80180ac:	9305      	str	r3, [sp, #20]
 80180ae:	4619      	mov	r1, r3
 80180b0:	250a      	movs	r5, #10
 80180b2:	4638      	mov	r0, r7
 80180b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180b8:	3a30      	subs	r2, #48	; 0x30
 80180ba:	2a09      	cmp	r2, #9
 80180bc:	d903      	bls.n	80180c6 <_svfiprintf_r+0x196>
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d0c8      	beq.n	8018054 <_svfiprintf_r+0x124>
 80180c2:	9105      	str	r1, [sp, #20]
 80180c4:	e7c6      	b.n	8018054 <_svfiprintf_r+0x124>
 80180c6:	fb05 2101 	mla	r1, r5, r1, r2
 80180ca:	2301      	movs	r3, #1
 80180cc:	4607      	mov	r7, r0
 80180ce:	e7f0      	b.n	80180b2 <_svfiprintf_r+0x182>
 80180d0:	ab03      	add	r3, sp, #12
 80180d2:	9300      	str	r3, [sp, #0]
 80180d4:	4622      	mov	r2, r4
 80180d6:	4b11      	ldr	r3, [pc, #68]	; (801811c <_svfiprintf_r+0x1ec>)
 80180d8:	a904      	add	r1, sp, #16
 80180da:	4640      	mov	r0, r8
 80180dc:	f7fc fb5e 	bl	801479c <_printf_float>
 80180e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80180e4:	4681      	mov	r9, r0
 80180e6:	d1d6      	bne.n	8018096 <_svfiprintf_r+0x166>
 80180e8:	89a3      	ldrh	r3, [r4, #12]
 80180ea:	065b      	lsls	r3, r3, #25
 80180ec:	f53f af35 	bmi.w	8017f5a <_svfiprintf_r+0x2a>
 80180f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80180f2:	b01d      	add	sp, #116	; 0x74
 80180f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180f8:	ab03      	add	r3, sp, #12
 80180fa:	9300      	str	r3, [sp, #0]
 80180fc:	4622      	mov	r2, r4
 80180fe:	4b07      	ldr	r3, [pc, #28]	; (801811c <_svfiprintf_r+0x1ec>)
 8018100:	a904      	add	r1, sp, #16
 8018102:	4640      	mov	r0, r8
 8018104:	f7fc fe00 	bl	8014d08 <_printf_i>
 8018108:	e7ea      	b.n	80180e0 <_svfiprintf_r+0x1b0>
 801810a:	bf00      	nop
 801810c:	080190c4 	.word	0x080190c4
 8018110:	080190ca 	.word	0x080190ca
 8018114:	080190ce 	.word	0x080190ce
 8018118:	0801479d 	.word	0x0801479d
 801811c:	08017e7d 	.word	0x08017e7d

08018120 <_sungetc_r>:
 8018120:	b538      	push	{r3, r4, r5, lr}
 8018122:	1c4b      	adds	r3, r1, #1
 8018124:	4614      	mov	r4, r2
 8018126:	d103      	bne.n	8018130 <_sungetc_r+0x10>
 8018128:	f04f 35ff 	mov.w	r5, #4294967295
 801812c:	4628      	mov	r0, r5
 801812e:	bd38      	pop	{r3, r4, r5, pc}
 8018130:	8993      	ldrh	r3, [r2, #12]
 8018132:	f023 0320 	bic.w	r3, r3, #32
 8018136:	8193      	strh	r3, [r2, #12]
 8018138:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801813a:	6852      	ldr	r2, [r2, #4]
 801813c:	b2cd      	uxtb	r5, r1
 801813e:	b18b      	cbz	r3, 8018164 <_sungetc_r+0x44>
 8018140:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018142:	4293      	cmp	r3, r2
 8018144:	dd08      	ble.n	8018158 <_sungetc_r+0x38>
 8018146:	6823      	ldr	r3, [r4, #0]
 8018148:	1e5a      	subs	r2, r3, #1
 801814a:	6022      	str	r2, [r4, #0]
 801814c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018150:	6863      	ldr	r3, [r4, #4]
 8018152:	3301      	adds	r3, #1
 8018154:	6063      	str	r3, [r4, #4]
 8018156:	e7e9      	b.n	801812c <_sungetc_r+0xc>
 8018158:	4621      	mov	r1, r4
 801815a:	f000 fbc3 	bl	80188e4 <__submore>
 801815e:	2800      	cmp	r0, #0
 8018160:	d0f1      	beq.n	8018146 <_sungetc_r+0x26>
 8018162:	e7e1      	b.n	8018128 <_sungetc_r+0x8>
 8018164:	6921      	ldr	r1, [r4, #16]
 8018166:	6823      	ldr	r3, [r4, #0]
 8018168:	b151      	cbz	r1, 8018180 <_sungetc_r+0x60>
 801816a:	4299      	cmp	r1, r3
 801816c:	d208      	bcs.n	8018180 <_sungetc_r+0x60>
 801816e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018172:	42a9      	cmp	r1, r5
 8018174:	d104      	bne.n	8018180 <_sungetc_r+0x60>
 8018176:	3b01      	subs	r3, #1
 8018178:	3201      	adds	r2, #1
 801817a:	6023      	str	r3, [r4, #0]
 801817c:	6062      	str	r2, [r4, #4]
 801817e:	e7d5      	b.n	801812c <_sungetc_r+0xc>
 8018180:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018188:	6363      	str	r3, [r4, #52]	; 0x34
 801818a:	2303      	movs	r3, #3
 801818c:	63a3      	str	r3, [r4, #56]	; 0x38
 801818e:	4623      	mov	r3, r4
 8018190:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018194:	6023      	str	r3, [r4, #0]
 8018196:	2301      	movs	r3, #1
 8018198:	e7dc      	b.n	8018154 <_sungetc_r+0x34>

0801819a <__ssrefill_r>:
 801819a:	b510      	push	{r4, lr}
 801819c:	460c      	mov	r4, r1
 801819e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80181a0:	b169      	cbz	r1, 80181be <__ssrefill_r+0x24>
 80181a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80181a6:	4299      	cmp	r1, r3
 80181a8:	d001      	beq.n	80181ae <__ssrefill_r+0x14>
 80181aa:	f7ff fdbf 	bl	8017d2c <_free_r>
 80181ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80181b0:	6063      	str	r3, [r4, #4]
 80181b2:	2000      	movs	r0, #0
 80181b4:	6360      	str	r0, [r4, #52]	; 0x34
 80181b6:	b113      	cbz	r3, 80181be <__ssrefill_r+0x24>
 80181b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80181ba:	6023      	str	r3, [r4, #0]
 80181bc:	bd10      	pop	{r4, pc}
 80181be:	6923      	ldr	r3, [r4, #16]
 80181c0:	6023      	str	r3, [r4, #0]
 80181c2:	2300      	movs	r3, #0
 80181c4:	6063      	str	r3, [r4, #4]
 80181c6:	89a3      	ldrh	r3, [r4, #12]
 80181c8:	f043 0320 	orr.w	r3, r3, #32
 80181cc:	81a3      	strh	r3, [r4, #12]
 80181ce:	f04f 30ff 	mov.w	r0, #4294967295
 80181d2:	e7f3      	b.n	80181bc <__ssrefill_r+0x22>

080181d4 <__ssvfiscanf_r>:
 80181d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181d8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80181dc:	460c      	mov	r4, r1
 80181de:	2100      	movs	r1, #0
 80181e0:	9144      	str	r1, [sp, #272]	; 0x110
 80181e2:	9145      	str	r1, [sp, #276]	; 0x114
 80181e4:	499f      	ldr	r1, [pc, #636]	; (8018464 <__ssvfiscanf_r+0x290>)
 80181e6:	91a0      	str	r1, [sp, #640]	; 0x280
 80181e8:	f10d 0804 	add.w	r8, sp, #4
 80181ec:	499e      	ldr	r1, [pc, #632]	; (8018468 <__ssvfiscanf_r+0x294>)
 80181ee:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801846c <__ssvfiscanf_r+0x298>
 80181f2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80181f6:	4606      	mov	r6, r0
 80181f8:	4692      	mov	sl, r2
 80181fa:	91a1      	str	r1, [sp, #644]	; 0x284
 80181fc:	9300      	str	r3, [sp, #0]
 80181fe:	270a      	movs	r7, #10
 8018200:	f89a 3000 	ldrb.w	r3, [sl]
 8018204:	2b00      	cmp	r3, #0
 8018206:	f000 812a 	beq.w	801845e <__ssvfiscanf_r+0x28a>
 801820a:	4655      	mov	r5, sl
 801820c:	f7ff f93e 	bl	801748c <__locale_ctype_ptr>
 8018210:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018214:	4458      	add	r0, fp
 8018216:	7843      	ldrb	r3, [r0, #1]
 8018218:	f013 0308 	ands.w	r3, r3, #8
 801821c:	d01c      	beq.n	8018258 <__ssvfiscanf_r+0x84>
 801821e:	6863      	ldr	r3, [r4, #4]
 8018220:	2b00      	cmp	r3, #0
 8018222:	dd12      	ble.n	801824a <__ssvfiscanf_r+0x76>
 8018224:	f7ff f932 	bl	801748c <__locale_ctype_ptr>
 8018228:	6823      	ldr	r3, [r4, #0]
 801822a:	781a      	ldrb	r2, [r3, #0]
 801822c:	4410      	add	r0, r2
 801822e:	7842      	ldrb	r2, [r0, #1]
 8018230:	0712      	lsls	r2, r2, #28
 8018232:	d401      	bmi.n	8018238 <__ssvfiscanf_r+0x64>
 8018234:	46aa      	mov	sl, r5
 8018236:	e7e3      	b.n	8018200 <__ssvfiscanf_r+0x2c>
 8018238:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801823a:	3201      	adds	r2, #1
 801823c:	9245      	str	r2, [sp, #276]	; 0x114
 801823e:	6862      	ldr	r2, [r4, #4]
 8018240:	3301      	adds	r3, #1
 8018242:	3a01      	subs	r2, #1
 8018244:	6062      	str	r2, [r4, #4]
 8018246:	6023      	str	r3, [r4, #0]
 8018248:	e7e9      	b.n	801821e <__ssvfiscanf_r+0x4a>
 801824a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801824c:	4621      	mov	r1, r4
 801824e:	4630      	mov	r0, r6
 8018250:	4798      	blx	r3
 8018252:	2800      	cmp	r0, #0
 8018254:	d0e6      	beq.n	8018224 <__ssvfiscanf_r+0x50>
 8018256:	e7ed      	b.n	8018234 <__ssvfiscanf_r+0x60>
 8018258:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801825c:	f040 8082 	bne.w	8018364 <__ssvfiscanf_r+0x190>
 8018260:	9343      	str	r3, [sp, #268]	; 0x10c
 8018262:	9341      	str	r3, [sp, #260]	; 0x104
 8018264:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018268:	2b2a      	cmp	r3, #42	; 0x2a
 801826a:	d103      	bne.n	8018274 <__ssvfiscanf_r+0xa0>
 801826c:	2310      	movs	r3, #16
 801826e:	9341      	str	r3, [sp, #260]	; 0x104
 8018270:	f10a 0502 	add.w	r5, sl, #2
 8018274:	46aa      	mov	sl, r5
 8018276:	f815 1b01 	ldrb.w	r1, [r5], #1
 801827a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801827e:	2a09      	cmp	r2, #9
 8018280:	d922      	bls.n	80182c8 <__ssvfiscanf_r+0xf4>
 8018282:	2203      	movs	r2, #3
 8018284:	4879      	ldr	r0, [pc, #484]	; (801846c <__ssvfiscanf_r+0x298>)
 8018286:	f7e7 ffc3 	bl	8000210 <memchr>
 801828a:	b138      	cbz	r0, 801829c <__ssvfiscanf_r+0xc8>
 801828c:	eba0 0309 	sub.w	r3, r0, r9
 8018290:	2001      	movs	r0, #1
 8018292:	4098      	lsls	r0, r3
 8018294:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018296:	4318      	orrs	r0, r3
 8018298:	9041      	str	r0, [sp, #260]	; 0x104
 801829a:	46aa      	mov	sl, r5
 801829c:	f89a 3000 	ldrb.w	r3, [sl]
 80182a0:	2b67      	cmp	r3, #103	; 0x67
 80182a2:	f10a 0501 	add.w	r5, sl, #1
 80182a6:	d82b      	bhi.n	8018300 <__ssvfiscanf_r+0x12c>
 80182a8:	2b65      	cmp	r3, #101	; 0x65
 80182aa:	f080 809f 	bcs.w	80183ec <__ssvfiscanf_r+0x218>
 80182ae:	2b47      	cmp	r3, #71	; 0x47
 80182b0:	d810      	bhi.n	80182d4 <__ssvfiscanf_r+0x100>
 80182b2:	2b45      	cmp	r3, #69	; 0x45
 80182b4:	f080 809a 	bcs.w	80183ec <__ssvfiscanf_r+0x218>
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d06c      	beq.n	8018396 <__ssvfiscanf_r+0x1c2>
 80182bc:	2b25      	cmp	r3, #37	; 0x25
 80182be:	d051      	beq.n	8018364 <__ssvfiscanf_r+0x190>
 80182c0:	2303      	movs	r3, #3
 80182c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80182c4:	9742      	str	r7, [sp, #264]	; 0x108
 80182c6:	e027      	b.n	8018318 <__ssvfiscanf_r+0x144>
 80182c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80182ca:	fb07 1303 	mla	r3, r7, r3, r1
 80182ce:	3b30      	subs	r3, #48	; 0x30
 80182d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80182d2:	e7cf      	b.n	8018274 <__ssvfiscanf_r+0xa0>
 80182d4:	2b5b      	cmp	r3, #91	; 0x5b
 80182d6:	d06a      	beq.n	80183ae <__ssvfiscanf_r+0x1da>
 80182d8:	d80c      	bhi.n	80182f4 <__ssvfiscanf_r+0x120>
 80182da:	2b58      	cmp	r3, #88	; 0x58
 80182dc:	d1f0      	bne.n	80182c0 <__ssvfiscanf_r+0xec>
 80182de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80182e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80182e4:	9241      	str	r2, [sp, #260]	; 0x104
 80182e6:	2210      	movs	r2, #16
 80182e8:	9242      	str	r2, [sp, #264]	; 0x108
 80182ea:	2b6e      	cmp	r3, #110	; 0x6e
 80182ec:	bf8c      	ite	hi
 80182ee:	2304      	movhi	r3, #4
 80182f0:	2303      	movls	r3, #3
 80182f2:	e010      	b.n	8018316 <__ssvfiscanf_r+0x142>
 80182f4:	2b63      	cmp	r3, #99	; 0x63
 80182f6:	d065      	beq.n	80183c4 <__ssvfiscanf_r+0x1f0>
 80182f8:	2b64      	cmp	r3, #100	; 0x64
 80182fa:	d1e1      	bne.n	80182c0 <__ssvfiscanf_r+0xec>
 80182fc:	9742      	str	r7, [sp, #264]	; 0x108
 80182fe:	e7f4      	b.n	80182ea <__ssvfiscanf_r+0x116>
 8018300:	2b70      	cmp	r3, #112	; 0x70
 8018302:	d04b      	beq.n	801839c <__ssvfiscanf_r+0x1c8>
 8018304:	d826      	bhi.n	8018354 <__ssvfiscanf_r+0x180>
 8018306:	2b6e      	cmp	r3, #110	; 0x6e
 8018308:	d062      	beq.n	80183d0 <__ssvfiscanf_r+0x1fc>
 801830a:	d84c      	bhi.n	80183a6 <__ssvfiscanf_r+0x1d2>
 801830c:	2b69      	cmp	r3, #105	; 0x69
 801830e:	d1d7      	bne.n	80182c0 <__ssvfiscanf_r+0xec>
 8018310:	2300      	movs	r3, #0
 8018312:	9342      	str	r3, [sp, #264]	; 0x108
 8018314:	2303      	movs	r3, #3
 8018316:	9347      	str	r3, [sp, #284]	; 0x11c
 8018318:	6863      	ldr	r3, [r4, #4]
 801831a:	2b00      	cmp	r3, #0
 801831c:	dd68      	ble.n	80183f0 <__ssvfiscanf_r+0x21c>
 801831e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018320:	0659      	lsls	r1, r3, #25
 8018322:	d407      	bmi.n	8018334 <__ssvfiscanf_r+0x160>
 8018324:	f7ff f8b2 	bl	801748c <__locale_ctype_ptr>
 8018328:	6823      	ldr	r3, [r4, #0]
 801832a:	781a      	ldrb	r2, [r3, #0]
 801832c:	4410      	add	r0, r2
 801832e:	7842      	ldrb	r2, [r0, #1]
 8018330:	0712      	lsls	r2, r2, #28
 8018332:	d464      	bmi.n	80183fe <__ssvfiscanf_r+0x22a>
 8018334:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018336:	2b02      	cmp	r3, #2
 8018338:	dc73      	bgt.n	8018422 <__ssvfiscanf_r+0x24e>
 801833a:	466b      	mov	r3, sp
 801833c:	4622      	mov	r2, r4
 801833e:	a941      	add	r1, sp, #260	; 0x104
 8018340:	4630      	mov	r0, r6
 8018342:	f000 f897 	bl	8018474 <_scanf_chars>
 8018346:	2801      	cmp	r0, #1
 8018348:	f000 8089 	beq.w	801845e <__ssvfiscanf_r+0x28a>
 801834c:	2802      	cmp	r0, #2
 801834e:	f47f af71 	bne.w	8018234 <__ssvfiscanf_r+0x60>
 8018352:	e01d      	b.n	8018390 <__ssvfiscanf_r+0x1bc>
 8018354:	2b75      	cmp	r3, #117	; 0x75
 8018356:	d0d1      	beq.n	80182fc <__ssvfiscanf_r+0x128>
 8018358:	2b78      	cmp	r3, #120	; 0x78
 801835a:	d0c0      	beq.n	80182de <__ssvfiscanf_r+0x10a>
 801835c:	2b73      	cmp	r3, #115	; 0x73
 801835e:	d1af      	bne.n	80182c0 <__ssvfiscanf_r+0xec>
 8018360:	2302      	movs	r3, #2
 8018362:	e7d8      	b.n	8018316 <__ssvfiscanf_r+0x142>
 8018364:	6863      	ldr	r3, [r4, #4]
 8018366:	2b00      	cmp	r3, #0
 8018368:	dd0c      	ble.n	8018384 <__ssvfiscanf_r+0x1b0>
 801836a:	6823      	ldr	r3, [r4, #0]
 801836c:	781a      	ldrb	r2, [r3, #0]
 801836e:	455a      	cmp	r2, fp
 8018370:	d175      	bne.n	801845e <__ssvfiscanf_r+0x28a>
 8018372:	3301      	adds	r3, #1
 8018374:	6862      	ldr	r2, [r4, #4]
 8018376:	6023      	str	r3, [r4, #0]
 8018378:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801837a:	3a01      	subs	r2, #1
 801837c:	3301      	adds	r3, #1
 801837e:	6062      	str	r2, [r4, #4]
 8018380:	9345      	str	r3, [sp, #276]	; 0x114
 8018382:	e757      	b.n	8018234 <__ssvfiscanf_r+0x60>
 8018384:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018386:	4621      	mov	r1, r4
 8018388:	4630      	mov	r0, r6
 801838a:	4798      	blx	r3
 801838c:	2800      	cmp	r0, #0
 801838e:	d0ec      	beq.n	801836a <__ssvfiscanf_r+0x196>
 8018390:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018392:	2800      	cmp	r0, #0
 8018394:	d159      	bne.n	801844a <__ssvfiscanf_r+0x276>
 8018396:	f04f 30ff 	mov.w	r0, #4294967295
 801839a:	e05c      	b.n	8018456 <__ssvfiscanf_r+0x282>
 801839c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801839e:	f042 0220 	orr.w	r2, r2, #32
 80183a2:	9241      	str	r2, [sp, #260]	; 0x104
 80183a4:	e79b      	b.n	80182de <__ssvfiscanf_r+0x10a>
 80183a6:	2308      	movs	r3, #8
 80183a8:	9342      	str	r3, [sp, #264]	; 0x108
 80183aa:	2304      	movs	r3, #4
 80183ac:	e7b3      	b.n	8018316 <__ssvfiscanf_r+0x142>
 80183ae:	4629      	mov	r1, r5
 80183b0:	4640      	mov	r0, r8
 80183b2:	f000 f9c7 	bl	8018744 <__sccl>
 80183b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80183b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183bc:	9341      	str	r3, [sp, #260]	; 0x104
 80183be:	4605      	mov	r5, r0
 80183c0:	2301      	movs	r3, #1
 80183c2:	e7a8      	b.n	8018316 <__ssvfiscanf_r+0x142>
 80183c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80183c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183ca:	9341      	str	r3, [sp, #260]	; 0x104
 80183cc:	2300      	movs	r3, #0
 80183ce:	e7a2      	b.n	8018316 <__ssvfiscanf_r+0x142>
 80183d0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80183d2:	06c3      	lsls	r3, r0, #27
 80183d4:	f53f af2e 	bmi.w	8018234 <__ssvfiscanf_r+0x60>
 80183d8:	9b00      	ldr	r3, [sp, #0]
 80183da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80183dc:	1d19      	adds	r1, r3, #4
 80183de:	9100      	str	r1, [sp, #0]
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	07c0      	lsls	r0, r0, #31
 80183e4:	bf4c      	ite	mi
 80183e6:	801a      	strhmi	r2, [r3, #0]
 80183e8:	601a      	strpl	r2, [r3, #0]
 80183ea:	e723      	b.n	8018234 <__ssvfiscanf_r+0x60>
 80183ec:	2305      	movs	r3, #5
 80183ee:	e792      	b.n	8018316 <__ssvfiscanf_r+0x142>
 80183f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80183f2:	4621      	mov	r1, r4
 80183f4:	4630      	mov	r0, r6
 80183f6:	4798      	blx	r3
 80183f8:	2800      	cmp	r0, #0
 80183fa:	d090      	beq.n	801831e <__ssvfiscanf_r+0x14a>
 80183fc:	e7c8      	b.n	8018390 <__ssvfiscanf_r+0x1bc>
 80183fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018400:	3201      	adds	r2, #1
 8018402:	9245      	str	r2, [sp, #276]	; 0x114
 8018404:	6862      	ldr	r2, [r4, #4]
 8018406:	3a01      	subs	r2, #1
 8018408:	2a00      	cmp	r2, #0
 801840a:	6062      	str	r2, [r4, #4]
 801840c:	dd02      	ble.n	8018414 <__ssvfiscanf_r+0x240>
 801840e:	3301      	adds	r3, #1
 8018410:	6023      	str	r3, [r4, #0]
 8018412:	e787      	b.n	8018324 <__ssvfiscanf_r+0x150>
 8018414:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018416:	4621      	mov	r1, r4
 8018418:	4630      	mov	r0, r6
 801841a:	4798      	blx	r3
 801841c:	2800      	cmp	r0, #0
 801841e:	d081      	beq.n	8018324 <__ssvfiscanf_r+0x150>
 8018420:	e7b6      	b.n	8018390 <__ssvfiscanf_r+0x1bc>
 8018422:	2b04      	cmp	r3, #4
 8018424:	dc06      	bgt.n	8018434 <__ssvfiscanf_r+0x260>
 8018426:	466b      	mov	r3, sp
 8018428:	4622      	mov	r2, r4
 801842a:	a941      	add	r1, sp, #260	; 0x104
 801842c:	4630      	mov	r0, r6
 801842e:	f000 f885 	bl	801853c <_scanf_i>
 8018432:	e788      	b.n	8018346 <__ssvfiscanf_r+0x172>
 8018434:	4b0e      	ldr	r3, [pc, #56]	; (8018470 <__ssvfiscanf_r+0x29c>)
 8018436:	2b00      	cmp	r3, #0
 8018438:	f43f aefc 	beq.w	8018234 <__ssvfiscanf_r+0x60>
 801843c:	466b      	mov	r3, sp
 801843e:	4622      	mov	r2, r4
 8018440:	a941      	add	r1, sp, #260	; 0x104
 8018442:	4630      	mov	r0, r6
 8018444:	f7fc fd72 	bl	8014f2c <_scanf_float>
 8018448:	e77d      	b.n	8018346 <__ssvfiscanf_r+0x172>
 801844a:	89a3      	ldrh	r3, [r4, #12]
 801844c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018450:	bf18      	it	ne
 8018452:	f04f 30ff 	movne.w	r0, #4294967295
 8018456:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801845e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018460:	e7f9      	b.n	8018456 <__ssvfiscanf_r+0x282>
 8018462:	bf00      	nop
 8018464:	08018121 	.word	0x08018121
 8018468:	0801819b 	.word	0x0801819b
 801846c:	080190ca 	.word	0x080190ca
 8018470:	08014f2d 	.word	0x08014f2d

08018474 <_scanf_chars>:
 8018474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018478:	4615      	mov	r5, r2
 801847a:	688a      	ldr	r2, [r1, #8]
 801847c:	4680      	mov	r8, r0
 801847e:	460c      	mov	r4, r1
 8018480:	b932      	cbnz	r2, 8018490 <_scanf_chars+0x1c>
 8018482:	698a      	ldr	r2, [r1, #24]
 8018484:	2a00      	cmp	r2, #0
 8018486:	bf14      	ite	ne
 8018488:	f04f 32ff 	movne.w	r2, #4294967295
 801848c:	2201      	moveq	r2, #1
 801848e:	608a      	str	r2, [r1, #8]
 8018490:	6822      	ldr	r2, [r4, #0]
 8018492:	06d1      	lsls	r1, r2, #27
 8018494:	bf5f      	itttt	pl
 8018496:	681a      	ldrpl	r2, [r3, #0]
 8018498:	1d11      	addpl	r1, r2, #4
 801849a:	6019      	strpl	r1, [r3, #0]
 801849c:	6817      	ldrpl	r7, [r2, #0]
 801849e:	2600      	movs	r6, #0
 80184a0:	69a3      	ldr	r3, [r4, #24]
 80184a2:	b1db      	cbz	r3, 80184dc <_scanf_chars+0x68>
 80184a4:	2b01      	cmp	r3, #1
 80184a6:	d107      	bne.n	80184b8 <_scanf_chars+0x44>
 80184a8:	682b      	ldr	r3, [r5, #0]
 80184aa:	6962      	ldr	r2, [r4, #20]
 80184ac:	781b      	ldrb	r3, [r3, #0]
 80184ae:	5cd3      	ldrb	r3, [r2, r3]
 80184b0:	b9a3      	cbnz	r3, 80184dc <_scanf_chars+0x68>
 80184b2:	2e00      	cmp	r6, #0
 80184b4:	d132      	bne.n	801851c <_scanf_chars+0xa8>
 80184b6:	e006      	b.n	80184c6 <_scanf_chars+0x52>
 80184b8:	2b02      	cmp	r3, #2
 80184ba:	d007      	beq.n	80184cc <_scanf_chars+0x58>
 80184bc:	2e00      	cmp	r6, #0
 80184be:	d12d      	bne.n	801851c <_scanf_chars+0xa8>
 80184c0:	69a3      	ldr	r3, [r4, #24]
 80184c2:	2b01      	cmp	r3, #1
 80184c4:	d12a      	bne.n	801851c <_scanf_chars+0xa8>
 80184c6:	2001      	movs	r0, #1
 80184c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184cc:	f7fe ffde 	bl	801748c <__locale_ctype_ptr>
 80184d0:	682b      	ldr	r3, [r5, #0]
 80184d2:	781b      	ldrb	r3, [r3, #0]
 80184d4:	4418      	add	r0, r3
 80184d6:	7843      	ldrb	r3, [r0, #1]
 80184d8:	071b      	lsls	r3, r3, #28
 80184da:	d4ef      	bmi.n	80184bc <_scanf_chars+0x48>
 80184dc:	6823      	ldr	r3, [r4, #0]
 80184de:	06da      	lsls	r2, r3, #27
 80184e0:	bf5e      	ittt	pl
 80184e2:	682b      	ldrpl	r3, [r5, #0]
 80184e4:	781b      	ldrbpl	r3, [r3, #0]
 80184e6:	703b      	strbpl	r3, [r7, #0]
 80184e8:	682a      	ldr	r2, [r5, #0]
 80184ea:	686b      	ldr	r3, [r5, #4]
 80184ec:	f102 0201 	add.w	r2, r2, #1
 80184f0:	602a      	str	r2, [r5, #0]
 80184f2:	68a2      	ldr	r2, [r4, #8]
 80184f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80184f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80184fc:	606b      	str	r3, [r5, #4]
 80184fe:	f106 0601 	add.w	r6, r6, #1
 8018502:	bf58      	it	pl
 8018504:	3701      	addpl	r7, #1
 8018506:	60a2      	str	r2, [r4, #8]
 8018508:	b142      	cbz	r2, 801851c <_scanf_chars+0xa8>
 801850a:	2b00      	cmp	r3, #0
 801850c:	dcc8      	bgt.n	80184a0 <_scanf_chars+0x2c>
 801850e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018512:	4629      	mov	r1, r5
 8018514:	4640      	mov	r0, r8
 8018516:	4798      	blx	r3
 8018518:	2800      	cmp	r0, #0
 801851a:	d0c1      	beq.n	80184a0 <_scanf_chars+0x2c>
 801851c:	6823      	ldr	r3, [r4, #0]
 801851e:	f013 0310 	ands.w	r3, r3, #16
 8018522:	d105      	bne.n	8018530 <_scanf_chars+0xbc>
 8018524:	68e2      	ldr	r2, [r4, #12]
 8018526:	3201      	adds	r2, #1
 8018528:	60e2      	str	r2, [r4, #12]
 801852a:	69a2      	ldr	r2, [r4, #24]
 801852c:	b102      	cbz	r2, 8018530 <_scanf_chars+0xbc>
 801852e:	703b      	strb	r3, [r7, #0]
 8018530:	6923      	ldr	r3, [r4, #16]
 8018532:	441e      	add	r6, r3
 8018534:	6126      	str	r6, [r4, #16]
 8018536:	2000      	movs	r0, #0
 8018538:	e7c6      	b.n	80184c8 <_scanf_chars+0x54>
	...

0801853c <_scanf_i>:
 801853c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018540:	469a      	mov	sl, r3
 8018542:	4b74      	ldr	r3, [pc, #464]	; (8018714 <_scanf_i+0x1d8>)
 8018544:	460c      	mov	r4, r1
 8018546:	4683      	mov	fp, r0
 8018548:	4616      	mov	r6, r2
 801854a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801854e:	b087      	sub	sp, #28
 8018550:	ab03      	add	r3, sp, #12
 8018552:	68a7      	ldr	r7, [r4, #8]
 8018554:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018558:	4b6f      	ldr	r3, [pc, #444]	; (8018718 <_scanf_i+0x1dc>)
 801855a:	69a1      	ldr	r1, [r4, #24]
 801855c:	4a6f      	ldr	r2, [pc, #444]	; (801871c <_scanf_i+0x1e0>)
 801855e:	2903      	cmp	r1, #3
 8018560:	bf08      	it	eq
 8018562:	461a      	moveq	r2, r3
 8018564:	1e7b      	subs	r3, r7, #1
 8018566:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801856a:	bf84      	itt	hi
 801856c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018570:	60a3      	strhi	r3, [r4, #8]
 8018572:	6823      	ldr	r3, [r4, #0]
 8018574:	9200      	str	r2, [sp, #0]
 8018576:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801857a:	bf88      	it	hi
 801857c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018580:	f104 091c 	add.w	r9, r4, #28
 8018584:	6023      	str	r3, [r4, #0]
 8018586:	bf8c      	ite	hi
 8018588:	197f      	addhi	r7, r7, r5
 801858a:	2700      	movls	r7, #0
 801858c:	464b      	mov	r3, r9
 801858e:	f04f 0800 	mov.w	r8, #0
 8018592:	9301      	str	r3, [sp, #4]
 8018594:	6831      	ldr	r1, [r6, #0]
 8018596:	ab03      	add	r3, sp, #12
 8018598:	2202      	movs	r2, #2
 801859a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801859e:	7809      	ldrb	r1, [r1, #0]
 80185a0:	f7e7 fe36 	bl	8000210 <memchr>
 80185a4:	9b01      	ldr	r3, [sp, #4]
 80185a6:	b330      	cbz	r0, 80185f6 <_scanf_i+0xba>
 80185a8:	f1b8 0f01 	cmp.w	r8, #1
 80185ac:	d15a      	bne.n	8018664 <_scanf_i+0x128>
 80185ae:	6862      	ldr	r2, [r4, #4]
 80185b0:	b92a      	cbnz	r2, 80185be <_scanf_i+0x82>
 80185b2:	6822      	ldr	r2, [r4, #0]
 80185b4:	2108      	movs	r1, #8
 80185b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80185ba:	6061      	str	r1, [r4, #4]
 80185bc:	6022      	str	r2, [r4, #0]
 80185be:	6822      	ldr	r2, [r4, #0]
 80185c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80185c4:	6022      	str	r2, [r4, #0]
 80185c6:	68a2      	ldr	r2, [r4, #8]
 80185c8:	1e51      	subs	r1, r2, #1
 80185ca:	60a1      	str	r1, [r4, #8]
 80185cc:	b19a      	cbz	r2, 80185f6 <_scanf_i+0xba>
 80185ce:	6832      	ldr	r2, [r6, #0]
 80185d0:	1c51      	adds	r1, r2, #1
 80185d2:	6031      	str	r1, [r6, #0]
 80185d4:	7812      	ldrb	r2, [r2, #0]
 80185d6:	701a      	strb	r2, [r3, #0]
 80185d8:	1c5d      	adds	r5, r3, #1
 80185da:	6873      	ldr	r3, [r6, #4]
 80185dc:	3b01      	subs	r3, #1
 80185de:	2b00      	cmp	r3, #0
 80185e0:	6073      	str	r3, [r6, #4]
 80185e2:	dc07      	bgt.n	80185f4 <_scanf_i+0xb8>
 80185e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80185e8:	4631      	mov	r1, r6
 80185ea:	4658      	mov	r0, fp
 80185ec:	4798      	blx	r3
 80185ee:	2800      	cmp	r0, #0
 80185f0:	f040 8086 	bne.w	8018700 <_scanf_i+0x1c4>
 80185f4:	462b      	mov	r3, r5
 80185f6:	f108 0801 	add.w	r8, r8, #1
 80185fa:	f1b8 0f03 	cmp.w	r8, #3
 80185fe:	d1c8      	bne.n	8018592 <_scanf_i+0x56>
 8018600:	6862      	ldr	r2, [r4, #4]
 8018602:	b90a      	cbnz	r2, 8018608 <_scanf_i+0xcc>
 8018604:	220a      	movs	r2, #10
 8018606:	6062      	str	r2, [r4, #4]
 8018608:	6862      	ldr	r2, [r4, #4]
 801860a:	4945      	ldr	r1, [pc, #276]	; (8018720 <_scanf_i+0x1e4>)
 801860c:	6960      	ldr	r0, [r4, #20]
 801860e:	9301      	str	r3, [sp, #4]
 8018610:	1a89      	subs	r1, r1, r2
 8018612:	f000 f897 	bl	8018744 <__sccl>
 8018616:	9b01      	ldr	r3, [sp, #4]
 8018618:	f04f 0800 	mov.w	r8, #0
 801861c:	461d      	mov	r5, r3
 801861e:	68a3      	ldr	r3, [r4, #8]
 8018620:	6822      	ldr	r2, [r4, #0]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d03a      	beq.n	801869c <_scanf_i+0x160>
 8018626:	6831      	ldr	r1, [r6, #0]
 8018628:	6960      	ldr	r0, [r4, #20]
 801862a:	f891 c000 	ldrb.w	ip, [r1]
 801862e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018632:	2800      	cmp	r0, #0
 8018634:	d032      	beq.n	801869c <_scanf_i+0x160>
 8018636:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801863a:	d121      	bne.n	8018680 <_scanf_i+0x144>
 801863c:	0510      	lsls	r0, r2, #20
 801863e:	d51f      	bpl.n	8018680 <_scanf_i+0x144>
 8018640:	f108 0801 	add.w	r8, r8, #1
 8018644:	b117      	cbz	r7, 801864c <_scanf_i+0x110>
 8018646:	3301      	adds	r3, #1
 8018648:	3f01      	subs	r7, #1
 801864a:	60a3      	str	r3, [r4, #8]
 801864c:	6873      	ldr	r3, [r6, #4]
 801864e:	3b01      	subs	r3, #1
 8018650:	2b00      	cmp	r3, #0
 8018652:	6073      	str	r3, [r6, #4]
 8018654:	dd1b      	ble.n	801868e <_scanf_i+0x152>
 8018656:	6833      	ldr	r3, [r6, #0]
 8018658:	3301      	adds	r3, #1
 801865a:	6033      	str	r3, [r6, #0]
 801865c:	68a3      	ldr	r3, [r4, #8]
 801865e:	3b01      	subs	r3, #1
 8018660:	60a3      	str	r3, [r4, #8]
 8018662:	e7dc      	b.n	801861e <_scanf_i+0xe2>
 8018664:	f1b8 0f02 	cmp.w	r8, #2
 8018668:	d1ad      	bne.n	80185c6 <_scanf_i+0x8a>
 801866a:	6822      	ldr	r2, [r4, #0]
 801866c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018670:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018674:	d1bf      	bne.n	80185f6 <_scanf_i+0xba>
 8018676:	2110      	movs	r1, #16
 8018678:	6061      	str	r1, [r4, #4]
 801867a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801867e:	e7a1      	b.n	80185c4 <_scanf_i+0x88>
 8018680:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018684:	6022      	str	r2, [r4, #0]
 8018686:	780b      	ldrb	r3, [r1, #0]
 8018688:	702b      	strb	r3, [r5, #0]
 801868a:	3501      	adds	r5, #1
 801868c:	e7de      	b.n	801864c <_scanf_i+0x110>
 801868e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018692:	4631      	mov	r1, r6
 8018694:	4658      	mov	r0, fp
 8018696:	4798      	blx	r3
 8018698:	2800      	cmp	r0, #0
 801869a:	d0df      	beq.n	801865c <_scanf_i+0x120>
 801869c:	6823      	ldr	r3, [r4, #0]
 801869e:	05d9      	lsls	r1, r3, #23
 80186a0:	d50c      	bpl.n	80186bc <_scanf_i+0x180>
 80186a2:	454d      	cmp	r5, r9
 80186a4:	d908      	bls.n	80186b8 <_scanf_i+0x17c>
 80186a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80186aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80186ae:	4632      	mov	r2, r6
 80186b0:	4658      	mov	r0, fp
 80186b2:	4798      	blx	r3
 80186b4:	1e6f      	subs	r7, r5, #1
 80186b6:	463d      	mov	r5, r7
 80186b8:	454d      	cmp	r5, r9
 80186ba:	d029      	beq.n	8018710 <_scanf_i+0x1d4>
 80186bc:	6822      	ldr	r2, [r4, #0]
 80186be:	f012 0210 	ands.w	r2, r2, #16
 80186c2:	d113      	bne.n	80186ec <_scanf_i+0x1b0>
 80186c4:	702a      	strb	r2, [r5, #0]
 80186c6:	6863      	ldr	r3, [r4, #4]
 80186c8:	9e00      	ldr	r6, [sp, #0]
 80186ca:	4649      	mov	r1, r9
 80186cc:	4658      	mov	r0, fp
 80186ce:	47b0      	blx	r6
 80186d0:	f8da 3000 	ldr.w	r3, [sl]
 80186d4:	6821      	ldr	r1, [r4, #0]
 80186d6:	1d1a      	adds	r2, r3, #4
 80186d8:	f8ca 2000 	str.w	r2, [sl]
 80186dc:	f011 0f20 	tst.w	r1, #32
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	d010      	beq.n	8018706 <_scanf_i+0x1ca>
 80186e4:	6018      	str	r0, [r3, #0]
 80186e6:	68e3      	ldr	r3, [r4, #12]
 80186e8:	3301      	adds	r3, #1
 80186ea:	60e3      	str	r3, [r4, #12]
 80186ec:	eba5 0509 	sub.w	r5, r5, r9
 80186f0:	44a8      	add	r8, r5
 80186f2:	6925      	ldr	r5, [r4, #16]
 80186f4:	4445      	add	r5, r8
 80186f6:	6125      	str	r5, [r4, #16]
 80186f8:	2000      	movs	r0, #0
 80186fa:	b007      	add	sp, #28
 80186fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018700:	f04f 0800 	mov.w	r8, #0
 8018704:	e7ca      	b.n	801869c <_scanf_i+0x160>
 8018706:	07ca      	lsls	r2, r1, #31
 8018708:	bf4c      	ite	mi
 801870a:	8018      	strhmi	r0, [r3, #0]
 801870c:	6018      	strpl	r0, [r3, #0]
 801870e:	e7ea      	b.n	80186e6 <_scanf_i+0x1aa>
 8018710:	2001      	movs	r0, #1
 8018712:	e7f2      	b.n	80186fa <_scanf_i+0x1be>
 8018714:	08018e64 	.word	0x08018e64
 8018718:	08016149 	.word	0x08016149
 801871c:	080188c1 	.word	0x080188c1
 8018720:	080190e5 	.word	0x080190e5

08018724 <_sbrk_r>:
 8018724:	b538      	push	{r3, r4, r5, lr}
 8018726:	4c06      	ldr	r4, [pc, #24]	; (8018740 <_sbrk_r+0x1c>)
 8018728:	2300      	movs	r3, #0
 801872a:	4605      	mov	r5, r0
 801872c:	4608      	mov	r0, r1
 801872e:	6023      	str	r3, [r4, #0]
 8018730:	f7ef f82a 	bl	8007788 <_sbrk>
 8018734:	1c43      	adds	r3, r0, #1
 8018736:	d102      	bne.n	801873e <_sbrk_r+0x1a>
 8018738:	6823      	ldr	r3, [r4, #0]
 801873a:	b103      	cbz	r3, 801873e <_sbrk_r+0x1a>
 801873c:	602b      	str	r3, [r5, #0]
 801873e:	bd38      	pop	{r3, r4, r5, pc}
 8018740:	2004cb74 	.word	0x2004cb74

08018744 <__sccl>:
 8018744:	b570      	push	{r4, r5, r6, lr}
 8018746:	780b      	ldrb	r3, [r1, #0]
 8018748:	2b5e      	cmp	r3, #94	; 0x5e
 801874a:	bf13      	iteet	ne
 801874c:	1c4a      	addne	r2, r1, #1
 801874e:	1c8a      	addeq	r2, r1, #2
 8018750:	784b      	ldrbeq	r3, [r1, #1]
 8018752:	2100      	movne	r1, #0
 8018754:	bf08      	it	eq
 8018756:	2101      	moveq	r1, #1
 8018758:	1e44      	subs	r4, r0, #1
 801875a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801875e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018762:	42ac      	cmp	r4, r5
 8018764:	d1fb      	bne.n	801875e <__sccl+0x1a>
 8018766:	b913      	cbnz	r3, 801876e <__sccl+0x2a>
 8018768:	3a01      	subs	r2, #1
 801876a:	4610      	mov	r0, r2
 801876c:	bd70      	pop	{r4, r5, r6, pc}
 801876e:	f081 0401 	eor.w	r4, r1, #1
 8018772:	54c4      	strb	r4, [r0, r3]
 8018774:	1c51      	adds	r1, r2, #1
 8018776:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801877a:	2d2d      	cmp	r5, #45	; 0x2d
 801877c:	f101 36ff 	add.w	r6, r1, #4294967295
 8018780:	460a      	mov	r2, r1
 8018782:	d006      	beq.n	8018792 <__sccl+0x4e>
 8018784:	2d5d      	cmp	r5, #93	; 0x5d
 8018786:	d0f0      	beq.n	801876a <__sccl+0x26>
 8018788:	b90d      	cbnz	r5, 801878e <__sccl+0x4a>
 801878a:	4632      	mov	r2, r6
 801878c:	e7ed      	b.n	801876a <__sccl+0x26>
 801878e:	462b      	mov	r3, r5
 8018790:	e7ef      	b.n	8018772 <__sccl+0x2e>
 8018792:	780e      	ldrb	r6, [r1, #0]
 8018794:	2e5d      	cmp	r6, #93	; 0x5d
 8018796:	d0fa      	beq.n	801878e <__sccl+0x4a>
 8018798:	42b3      	cmp	r3, r6
 801879a:	dcf8      	bgt.n	801878e <__sccl+0x4a>
 801879c:	3301      	adds	r3, #1
 801879e:	429e      	cmp	r6, r3
 80187a0:	54c4      	strb	r4, [r0, r3]
 80187a2:	dcfb      	bgt.n	801879c <__sccl+0x58>
 80187a4:	3102      	adds	r1, #2
 80187a6:	e7e6      	b.n	8018776 <__sccl+0x32>

080187a8 <strncmp>:
 80187a8:	b510      	push	{r4, lr}
 80187aa:	b16a      	cbz	r2, 80187c8 <strncmp+0x20>
 80187ac:	3901      	subs	r1, #1
 80187ae:	1884      	adds	r4, r0, r2
 80187b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80187b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80187b8:	4293      	cmp	r3, r2
 80187ba:	d103      	bne.n	80187c4 <strncmp+0x1c>
 80187bc:	42a0      	cmp	r0, r4
 80187be:	d001      	beq.n	80187c4 <strncmp+0x1c>
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d1f5      	bne.n	80187b0 <strncmp+0x8>
 80187c4:	1a98      	subs	r0, r3, r2
 80187c6:	bd10      	pop	{r4, pc}
 80187c8:	4610      	mov	r0, r2
 80187ca:	e7fc      	b.n	80187c6 <strncmp+0x1e>

080187cc <_strtoul_l.isra.0>:
 80187cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187d0:	4680      	mov	r8, r0
 80187d2:	4689      	mov	r9, r1
 80187d4:	4692      	mov	sl, r2
 80187d6:	461e      	mov	r6, r3
 80187d8:	460f      	mov	r7, r1
 80187da:	463d      	mov	r5, r7
 80187dc:	9808      	ldr	r0, [sp, #32]
 80187de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80187e2:	f7fe fe4f 	bl	8017484 <__locale_ctype_ptr_l>
 80187e6:	4420      	add	r0, r4
 80187e8:	7843      	ldrb	r3, [r0, #1]
 80187ea:	f013 0308 	ands.w	r3, r3, #8
 80187ee:	d130      	bne.n	8018852 <_strtoul_l.isra.0+0x86>
 80187f0:	2c2d      	cmp	r4, #45	; 0x2d
 80187f2:	d130      	bne.n	8018856 <_strtoul_l.isra.0+0x8a>
 80187f4:	787c      	ldrb	r4, [r7, #1]
 80187f6:	1cbd      	adds	r5, r7, #2
 80187f8:	2101      	movs	r1, #1
 80187fa:	2e00      	cmp	r6, #0
 80187fc:	d05c      	beq.n	80188b8 <_strtoul_l.isra.0+0xec>
 80187fe:	2e10      	cmp	r6, #16
 8018800:	d109      	bne.n	8018816 <_strtoul_l.isra.0+0x4a>
 8018802:	2c30      	cmp	r4, #48	; 0x30
 8018804:	d107      	bne.n	8018816 <_strtoul_l.isra.0+0x4a>
 8018806:	782b      	ldrb	r3, [r5, #0]
 8018808:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801880c:	2b58      	cmp	r3, #88	; 0x58
 801880e:	d14e      	bne.n	80188ae <_strtoul_l.isra.0+0xe2>
 8018810:	786c      	ldrb	r4, [r5, #1]
 8018812:	2610      	movs	r6, #16
 8018814:	3502      	adds	r5, #2
 8018816:	f04f 32ff 	mov.w	r2, #4294967295
 801881a:	2300      	movs	r3, #0
 801881c:	fbb2 f2f6 	udiv	r2, r2, r6
 8018820:	fb06 fc02 	mul.w	ip, r6, r2
 8018824:	ea6f 0c0c 	mvn.w	ip, ip
 8018828:	4618      	mov	r0, r3
 801882a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801882e:	2f09      	cmp	r7, #9
 8018830:	d817      	bhi.n	8018862 <_strtoul_l.isra.0+0x96>
 8018832:	463c      	mov	r4, r7
 8018834:	42a6      	cmp	r6, r4
 8018836:	dd23      	ble.n	8018880 <_strtoul_l.isra.0+0xb4>
 8018838:	2b00      	cmp	r3, #0
 801883a:	db1e      	blt.n	801887a <_strtoul_l.isra.0+0xae>
 801883c:	4282      	cmp	r2, r0
 801883e:	d31c      	bcc.n	801887a <_strtoul_l.isra.0+0xae>
 8018840:	d101      	bne.n	8018846 <_strtoul_l.isra.0+0x7a>
 8018842:	45a4      	cmp	ip, r4
 8018844:	db19      	blt.n	801887a <_strtoul_l.isra.0+0xae>
 8018846:	fb00 4006 	mla	r0, r0, r6, r4
 801884a:	2301      	movs	r3, #1
 801884c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018850:	e7eb      	b.n	801882a <_strtoul_l.isra.0+0x5e>
 8018852:	462f      	mov	r7, r5
 8018854:	e7c1      	b.n	80187da <_strtoul_l.isra.0+0xe>
 8018856:	2c2b      	cmp	r4, #43	; 0x2b
 8018858:	bf04      	itt	eq
 801885a:	1cbd      	addeq	r5, r7, #2
 801885c:	787c      	ldrbeq	r4, [r7, #1]
 801885e:	4619      	mov	r1, r3
 8018860:	e7cb      	b.n	80187fa <_strtoul_l.isra.0+0x2e>
 8018862:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018866:	2f19      	cmp	r7, #25
 8018868:	d801      	bhi.n	801886e <_strtoul_l.isra.0+0xa2>
 801886a:	3c37      	subs	r4, #55	; 0x37
 801886c:	e7e2      	b.n	8018834 <_strtoul_l.isra.0+0x68>
 801886e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018872:	2f19      	cmp	r7, #25
 8018874:	d804      	bhi.n	8018880 <_strtoul_l.isra.0+0xb4>
 8018876:	3c57      	subs	r4, #87	; 0x57
 8018878:	e7dc      	b.n	8018834 <_strtoul_l.isra.0+0x68>
 801887a:	f04f 33ff 	mov.w	r3, #4294967295
 801887e:	e7e5      	b.n	801884c <_strtoul_l.isra.0+0x80>
 8018880:	2b00      	cmp	r3, #0
 8018882:	da09      	bge.n	8018898 <_strtoul_l.isra.0+0xcc>
 8018884:	2322      	movs	r3, #34	; 0x22
 8018886:	f8c8 3000 	str.w	r3, [r8]
 801888a:	f04f 30ff 	mov.w	r0, #4294967295
 801888e:	f1ba 0f00 	cmp.w	sl, #0
 8018892:	d107      	bne.n	80188a4 <_strtoul_l.isra.0+0xd8>
 8018894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018898:	b101      	cbz	r1, 801889c <_strtoul_l.isra.0+0xd0>
 801889a:	4240      	negs	r0, r0
 801889c:	f1ba 0f00 	cmp.w	sl, #0
 80188a0:	d0f8      	beq.n	8018894 <_strtoul_l.isra.0+0xc8>
 80188a2:	b10b      	cbz	r3, 80188a8 <_strtoul_l.isra.0+0xdc>
 80188a4:	f105 39ff 	add.w	r9, r5, #4294967295
 80188a8:	f8ca 9000 	str.w	r9, [sl]
 80188ac:	e7f2      	b.n	8018894 <_strtoul_l.isra.0+0xc8>
 80188ae:	2430      	movs	r4, #48	; 0x30
 80188b0:	2e00      	cmp	r6, #0
 80188b2:	d1b0      	bne.n	8018816 <_strtoul_l.isra.0+0x4a>
 80188b4:	2608      	movs	r6, #8
 80188b6:	e7ae      	b.n	8018816 <_strtoul_l.isra.0+0x4a>
 80188b8:	2c30      	cmp	r4, #48	; 0x30
 80188ba:	d0a4      	beq.n	8018806 <_strtoul_l.isra.0+0x3a>
 80188bc:	260a      	movs	r6, #10
 80188be:	e7aa      	b.n	8018816 <_strtoul_l.isra.0+0x4a>

080188c0 <_strtoul_r>:
 80188c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188c2:	4c06      	ldr	r4, [pc, #24]	; (80188dc <_strtoul_r+0x1c>)
 80188c4:	4d06      	ldr	r5, [pc, #24]	; (80188e0 <_strtoul_r+0x20>)
 80188c6:	6824      	ldr	r4, [r4, #0]
 80188c8:	6a24      	ldr	r4, [r4, #32]
 80188ca:	2c00      	cmp	r4, #0
 80188cc:	bf08      	it	eq
 80188ce:	462c      	moveq	r4, r5
 80188d0:	9400      	str	r4, [sp, #0]
 80188d2:	f7ff ff7b 	bl	80187cc <_strtoul_l.isra.0>
 80188d6:	b003      	add	sp, #12
 80188d8:	bd30      	pop	{r4, r5, pc}
 80188da:	bf00      	nop
 80188dc:	2000000c 	.word	0x2000000c
 80188e0:	20000070 	.word	0x20000070

080188e4 <__submore>:
 80188e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188e8:	460c      	mov	r4, r1
 80188ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80188ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80188f0:	4299      	cmp	r1, r3
 80188f2:	d11d      	bne.n	8018930 <__submore+0x4c>
 80188f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80188f8:	f7ff fa66 	bl	8017dc8 <_malloc_r>
 80188fc:	b918      	cbnz	r0, 8018906 <__submore+0x22>
 80188fe:	f04f 30ff 	mov.w	r0, #4294967295
 8018902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801890a:	63a3      	str	r3, [r4, #56]	; 0x38
 801890c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018910:	6360      	str	r0, [r4, #52]	; 0x34
 8018912:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018916:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801891a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801891e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018922:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018926:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801892a:	6020      	str	r0, [r4, #0]
 801892c:	2000      	movs	r0, #0
 801892e:	e7e8      	b.n	8018902 <__submore+0x1e>
 8018930:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018932:	0077      	lsls	r7, r6, #1
 8018934:	463a      	mov	r2, r7
 8018936:	f000 f837 	bl	80189a8 <_realloc_r>
 801893a:	4605      	mov	r5, r0
 801893c:	2800      	cmp	r0, #0
 801893e:	d0de      	beq.n	80188fe <__submore+0x1a>
 8018940:	eb00 0806 	add.w	r8, r0, r6
 8018944:	4601      	mov	r1, r0
 8018946:	4632      	mov	r2, r6
 8018948:	4640      	mov	r0, r8
 801894a:	f7fe fdd7 	bl	80174fc <memcpy>
 801894e:	f8c4 8000 	str.w	r8, [r4]
 8018952:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018956:	e7e9      	b.n	801892c <__submore+0x48>

08018958 <__ascii_wctomb>:
 8018958:	b149      	cbz	r1, 801896e <__ascii_wctomb+0x16>
 801895a:	2aff      	cmp	r2, #255	; 0xff
 801895c:	bf85      	ittet	hi
 801895e:	238a      	movhi	r3, #138	; 0x8a
 8018960:	6003      	strhi	r3, [r0, #0]
 8018962:	700a      	strbls	r2, [r1, #0]
 8018964:	f04f 30ff 	movhi.w	r0, #4294967295
 8018968:	bf98      	it	ls
 801896a:	2001      	movls	r0, #1
 801896c:	4770      	bx	lr
 801896e:	4608      	mov	r0, r1
 8018970:	4770      	bx	lr

08018972 <memmove>:
 8018972:	4288      	cmp	r0, r1
 8018974:	b510      	push	{r4, lr}
 8018976:	eb01 0302 	add.w	r3, r1, r2
 801897a:	d807      	bhi.n	801898c <memmove+0x1a>
 801897c:	1e42      	subs	r2, r0, #1
 801897e:	4299      	cmp	r1, r3
 8018980:	d00a      	beq.n	8018998 <memmove+0x26>
 8018982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018986:	f802 4f01 	strb.w	r4, [r2, #1]!
 801898a:	e7f8      	b.n	801897e <memmove+0xc>
 801898c:	4283      	cmp	r3, r0
 801898e:	d9f5      	bls.n	801897c <memmove+0xa>
 8018990:	1881      	adds	r1, r0, r2
 8018992:	1ad2      	subs	r2, r2, r3
 8018994:	42d3      	cmn	r3, r2
 8018996:	d100      	bne.n	801899a <memmove+0x28>
 8018998:	bd10      	pop	{r4, pc}
 801899a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801899e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80189a2:	e7f7      	b.n	8018994 <memmove+0x22>

080189a4 <__malloc_lock>:
 80189a4:	4770      	bx	lr

080189a6 <__malloc_unlock>:
 80189a6:	4770      	bx	lr

080189a8 <_realloc_r>:
 80189a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189aa:	4607      	mov	r7, r0
 80189ac:	4614      	mov	r4, r2
 80189ae:	460e      	mov	r6, r1
 80189b0:	b921      	cbnz	r1, 80189bc <_realloc_r+0x14>
 80189b2:	4611      	mov	r1, r2
 80189b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80189b8:	f7ff ba06 	b.w	8017dc8 <_malloc_r>
 80189bc:	b922      	cbnz	r2, 80189c8 <_realloc_r+0x20>
 80189be:	f7ff f9b5 	bl	8017d2c <_free_r>
 80189c2:	4625      	mov	r5, r4
 80189c4:	4628      	mov	r0, r5
 80189c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189c8:	f000 f814 	bl	80189f4 <_malloc_usable_size_r>
 80189cc:	42a0      	cmp	r0, r4
 80189ce:	d20f      	bcs.n	80189f0 <_realloc_r+0x48>
 80189d0:	4621      	mov	r1, r4
 80189d2:	4638      	mov	r0, r7
 80189d4:	f7ff f9f8 	bl	8017dc8 <_malloc_r>
 80189d8:	4605      	mov	r5, r0
 80189da:	2800      	cmp	r0, #0
 80189dc:	d0f2      	beq.n	80189c4 <_realloc_r+0x1c>
 80189de:	4631      	mov	r1, r6
 80189e0:	4622      	mov	r2, r4
 80189e2:	f7fe fd8b 	bl	80174fc <memcpy>
 80189e6:	4631      	mov	r1, r6
 80189e8:	4638      	mov	r0, r7
 80189ea:	f7ff f99f 	bl	8017d2c <_free_r>
 80189ee:	e7e9      	b.n	80189c4 <_realloc_r+0x1c>
 80189f0:	4635      	mov	r5, r6
 80189f2:	e7e7      	b.n	80189c4 <_realloc_r+0x1c>

080189f4 <_malloc_usable_size_r>:
 80189f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189f8:	1f18      	subs	r0, r3, #4
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	bfbc      	itt	lt
 80189fe:	580b      	ldrlt	r3, [r1, r0]
 8018a00:	18c0      	addlt	r0, r0, r3
 8018a02:	4770      	bx	lr

08018a04 <_init>:
 8018a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a06:	bf00      	nop
 8018a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a0a:	bc08      	pop	{r3}
 8018a0c:	469e      	mov	lr, r3
 8018a0e:	4770      	bx	lr

08018a10 <_fini>:
 8018a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a12:	bf00      	nop
 8018a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a16:	bc08      	pop	{r3}
 8018a18:	469e      	mov	lr, r3
 8018a1a:	4770      	bx	lr
