
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e40  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  08018000  08018000  00028000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018b0c  08018b0c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018b0c  08018b0c  00028b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018b14  08018b14  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018b14  08018b14  00028b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018b1c  08018b1c  00028b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018b20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037dd0  200001e0  08018cfc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20037fb0  08018cfc  00037fb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003846d  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007ae6  00000000  00000000  00068679  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002238  00000000  00000000  00070160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f68  00000000  00000000  00072398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003776a  00000000  00000000  00074300  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025d42  00000000  00000000  000aba6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110c18  00000000  00000000  000d17ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e23c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6a4  00000000  00000000  001e2440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017fe8 	.word	0x08017fe8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017fe8 	.word	0x08017fe8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 ff58 	bl	8008e8c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20035aa4 	.word	0x20035aa4

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 ff40 	bl	8008e8c <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20035aa4 	.word	0x20035aa4

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 fdc9 	bl	8008bb8 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 fb30 	bl	800768c <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fb2a 	bl	800768c <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fb24 	bl	800768c <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fb1e 	bl	800768c <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 fb18 	bl	800768c <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 fb12 	bl	800768c <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 fb0c 	bl	800768c <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 fb06 	bl	800768c <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 fb00 	bl	800768c <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 fafa 	bl	800768c <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 faee 	bl	800768c <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 fae8 	bl	800768c <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 feb5 	bl	8014e98 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <_ZN7Encoder4initEv+0x30>)
 80011b0:	f00b fd04 	bl	800cbbc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4808      	ldr	r0, [pc, #32]	; (80011d8 <_ZN7Encoder4initEv+0x34>)
 80011b8:	f00b fd00 	bl	800cbbc <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_ZN7Encoder4initEv+0x38>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <_ZN7Encoder4initEv+0x3c>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20035cf8 	.word	0x20035cf8
 80011d8:	200359dc 	.word	0x200359dc
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40010400 	.word	0x40010400
 80011e4:	00000000 	.word	0x00000000

080011e8 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f0:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1c8>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fc:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <_ZN7Encoder9updateCntEv+0x1d4>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001224:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122c:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <_ZN7Encoder9updateCntEv+0x1d8>)
 8001234:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f99d 	bl	8000578 <__aeabi_f2d>
 800123e:	a356      	add	r3, pc, #344	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9f0 	bl	8000628 <__aeabi_dmul>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4625      	mov	r5, r4
 800124e:	461c      	mov	r4, r3
 8001250:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f98f 	bl	8000578 <__aeabi_f2d>
 800125a:	a351      	add	r3, pc, #324	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f9e2 	bl	8000628 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f826 	bl	80002bc <__adddf3>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f7ff fcce 	bl	8000c18 <__aeabi_d2f>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f977 	bl	8000578 <__aeabi_f2d>
 800128a:	a343      	add	r3, pc, #268	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff f9ca 	bl	8000628 <__aeabi_dmul>
 8001294:	4603      	mov	r3, r0
 8001296:	460c      	mov	r4, r1
 8001298:	4625      	mov	r5, r4
 800129a:	461c      	mov	r4, r3
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f969 	bl	8000578 <__aeabi_f2d>
 80012a6:	a33e      	add	r3, pc, #248	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9bc 	bl	8000628 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7ff f800 	bl	80002bc <__adddf3>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4618      	mov	r0, r3
 80012c2:	4621      	mov	r1, r4
 80012c4:	f7ff fca8 	bl	8000c18 <__aeabi_d2f>
 80012c8:	4602      	mov	r2, r0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a3e      	ldr	r2, [pc, #248]	; (80013cc <_ZN7Encoder9updateCntEv+0x1e4>)
 80012d4:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 80012dc:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a39      	ldr	r2, [pc, #228]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 80012e4:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edd3 7a01 	vldr	s15, [r3, #4]
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	ed93 7a00 	vldr	s14, [r3]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edd3 7a01 	vldr	s15, [r3, #4]
 800131e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001322:	ee17 0a90 	vmov	r0, s15
 8001326:	f7ff f927 	bl	8000578 <__aeabi_f2d>
 800132a:	a31f      	add	r3, pc, #124	; (adr r3, 80013a8 <_ZN7Encoder9updateCntEv+0x1c0>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f97a 	bl	8000628 <__aeabi_dmul>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	4618      	mov	r0, r3
 800133a:	4621      	mov	r1, r4
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001344:	f7ff fa9a 	bl	800087c <__aeabi_ddiv>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	f7ff fc62 	bl	8000c18 <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edd3 7a02 	vldr	s15, [r3, #8]
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	edc3 7a05 	vstr	s15, [r3, #20]
	cross_line_ignore_distance_ += distance_;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed93 7a06 	vldr	s14, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edd3 7a02 	vldr	s15, [r3, #8]
 800137c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	edc3 7a06 	vstr	s15, [r3, #24]
	monitor_distance = total_distance_;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <_ZN7Encoder9updateCntEv+0x1e8>)
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bdb0      	pop	{r4, r5, r7, pc}
 8001396:	bf00      	nop
 8001398:	9999999a 	.word	0x9999999a
 800139c:	3fa99999 	.word	0x3fa99999
 80013a0:	66666666 	.word	0x66666666
 80013a4:	3fee6666 	.word	0x3fee6666
 80013a8:	1ab1d998 	.word	0x1ab1d998
 80013ac:	3f7830b5 	.word	0x3f7830b5
 80013b0:	40010000 	.word	0x40010000
 80013b4:	47000000 	.word	0x47000000
 80013b8:	3f912547 	.word	0x3f912547
 80013bc:	40010400 	.word	0x40010400
 80013c0:	20000200 	.word	0x20000200
 80013c4:	20000208 	.word	0x20000208
 80013c8:	2000020c 	.word	0x2000020c
 80013cc:	20000204 	.word	0x20000204
 80013d0:	200001fc 	.word	0x200001fc

080013d4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	return distance_;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	ee07 3a90 	vmov	s15, r3
}
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	ee07 3a90 	vmov	s15, r3
}
 800142a:	eeb0 0a67 	vmov.f32	s0, s15
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <_ZN7Encoder8clearCntEv+0x3c>)
 800146e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_ZN7Encoder8clearCntEv+0x40>)
 8001476:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40010000 	.word	0x40010000
 8001494:	40010400 	.word	0x40010400

08001498 <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	ee07 3a90 	vmov	s15, r3
}
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f978 	bl	8001804 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001514:	f000 f98c 	bl	8001830 <fopen_folder_and_file>

	return ret;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <user_fclose+0x1c>)
 8001530:	f010 f89e 	bl	8011670 <f_close>

	return ret;
 8001534:	79fb      	ldrb	r3, [r7, #7]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200348e8 	.word	0x200348e8

08001544 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af02      	add	r7, sp, #8
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	80fb      	strh	r3, [r7, #6]
 8001550:	4613      	mov	r3, r2
 8001552:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001558:	2300      	movs	r3, #0
 800155a:	81fb      	strh	r3, [r7, #14]
 800155c:	e030      	b.n	80015c0 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800155e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f804 	bl	8000578 <__aeabi_f2d>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	e9cd 3400 	strd	r3, r4, [sp]
 8001578:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <sd_write_float+0x94>)
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4817      	ldr	r0, [pc, #92]	; (80015dc <sd_write_float+0x98>)
 800157e:	f012 fcfb 	bl	8013f78 <sniprintf>

		if(state == ADD_WRITE){
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <sd_write_float+0x9c>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4619      	mov	r1, r3
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <sd_write_float+0x9c>)
 8001590:	f010 f8e2 	bl	8011758 <f_lseek>
 8001594:	e003      	b.n	800159e <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001596:	2100      	movs	r1, #0
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <sd_write_float+0x9c>)
 800159a:	f010 f8dd 	bl	8011758 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800159e:	480f      	ldr	r0, [pc, #60]	; (80015dc <sd_write_float+0x98>)
 80015a0:	f7fe fe2e 	bl	8000200 <strlen>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <sd_write_float+0xa0>)
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <sd_write_float+0x98>)
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <sd_write_float+0x9c>)
 80015ac:	f00f fe4b 	bl	8011246 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015b0:	f000 f958 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	81fb      	strh	r3, [r7, #14]
 80015c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbc8      	blt.n	800155e <sd_write_float+0x1a>
	}
	return ret;
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08018000 	.word	0x08018000
 80015dc:	20034858 	.word	0x20034858
 80015e0:	200348e8 	.word	0x200348e8
 80015e4:	200348d8 	.word	0x200348d8

080015e8 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f900 	bl	8001804 <create_path>

	if(state == OVER_WRITE){
 8001604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <sd_write_array_float+0x36>
		f_chdir(dirpath);
 800160c:	4822      	ldr	r0, [pc, #136]	; (8001698 <sd_write_array_float+0xb0>)
 800160e:	f010 f859 	bl	80116c4 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001612:	4822      	ldr	r0, [pc, #136]	; (800169c <sd_write_array_float+0xb4>)
 8001614:	f010 fac4 	bl	8011ba0 <f_unlink>
		f_chdir("..");
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <sd_write_array_float+0xb8>)
 800161a:	f010 f853 	bl	80116c4 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800161e:	f000 f907 	bl	8001830 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001622:	2300      	movs	r3, #0
 8001624:	82fb      	strh	r3, [r7, #22]
 8001626:	e028      	b.n	800167a <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001628:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff9f 	bl	8000578 <__aeabi_f2d>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	e9cd 3400 	strd	r3, r4, [sp]
 8001642:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <sd_write_array_float+0xbc>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <sd_write_array_float+0xc0>)
 8001648:	f012 fc96 	bl	8013f78 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <sd_write_array_float+0xc4>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4619      	mov	r1, r3
 8001652:	4816      	ldr	r0, [pc, #88]	; (80016ac <sd_write_array_float+0xc4>)
 8001654:	f010 f880 	bl	8011758 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <sd_write_array_float+0xc0>)
 800165a:	f7fe fdd1 	bl	8000200 <strlen>
 800165e:	4602      	mov	r2, r0
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <sd_write_array_float+0xc8>)
 8001662:	4911      	ldr	r1, [pc, #68]	; (80016a8 <sd_write_array_float+0xc0>)
 8001664:	4811      	ldr	r0, [pc, #68]	; (80016ac <sd_write_array_float+0xc4>)
 8001666:	f00f fdee 	bl	8011246 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800166a:	f000 f8fb 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 800166e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001672:	b29b      	uxth	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	82fb      	strh	r3, [r7, #22]
 800167a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbd0      	blt.n	8001628 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001686:	4809      	ldr	r0, [pc, #36]	; (80016ac <sd_write_array_float+0xc4>)
 8001688:	f00f fff2 	bl	8011670 <f_close>

	return ret;
 800168c:	7d7b      	ldrb	r3, [r7, #21]
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	20034758 	.word	0x20034758
 800169c:	20033618 	.word	0x20033618
 80016a0:	0801801c 	.word	0x0801801c
 80016a4:	08018000 	.word	0x08018000
 80016a8:	20034858 	.word	0x20034858
 80016ac:	200348e8 	.word	0x200348e8
 80016b0:	200348d8 	.word	0x200348d8

080016b4 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f898 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016d4:	f000 f8ac 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016d8:	e019      	b.n	800170e <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4913      	ldr	r1, [pc, #76]	; (8001734 <sd_read_array_float+0x80>)
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <sd_read_array_float+0x84>)
 80016ea:	f012 fc99 	bl	8014020 <siscanf>
		i++;
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	429a      	cmp	r2, r3
 8001704:	db03      	blt.n	800170e <sd_read_array_float+0x5a>
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	3b01      	subs	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <sd_read_array_float+0x88>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <sd_read_array_float+0x84>)
 8001714:	f010 fc22 	bl	8011f5c <f_gets>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1dd      	bne.n	80016da <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800171e:	f000 f8a1 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <sd_read_array_float+0x88>)
 8001724:	f00f ffa4 	bl	8011670 <f_close>

	return ret;
 8001728:	7d7b      	ldrb	r3, [r7, #21]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	0801800c 	.word	0x0801800c
 8001738:	20034858 	.word	0x20034858
 800173c:	200348e8 	.word	0x200348e8

08001740 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f852 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001760:	f000 f866 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001764:	e019      	b.n	800179a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4913      	ldr	r1, [pc, #76]	; (80017c0 <sd_read_array_double+0x80>)
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <sd_read_array_double+0x84>)
 8001776:	f012 fc53 	bl	8014020 <siscanf>
		i++;
 800177a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177e:	b29b      	uxth	r3, r3
 8001780:	3301      	adds	r3, #1
 8001782:	b29b      	uxth	r3, r3
 8001784:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800178a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178e:	429a      	cmp	r2, r3
 8001790:	db03      	blt.n	800179a <sd_read_array_double+0x5a>
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	3b01      	subs	r3, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <sd_read_array_double+0x88>)
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <sd_read_array_double+0x84>)
 80017a0:	f010 fbdc 	bl	8011f5c <f_gets>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1dd      	bne.n	8001766 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017aa:	f000 f85b 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <sd_read_array_double+0x88>)
 80017b0:	f00f ff5e 	bl	8011670 <f_close>

	return ret;
 80017b4:	7d7b      	ldrb	r3, [r7, #21]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	08018018 	.word	0x08018018
 80017c4:	20034858 	.word	0x20034858
 80017c8:	200348e8 	.word	0x200348e8

080017cc <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017d6:	2201      	movs	r2, #1
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <sd_mount+0x30>)
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <sd_mount+0x34>)
 80017dc:	f00f f9c0 	bl	8010b60 <f_mount>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <sd_mount+0x20>
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e001      	b.n	80017f0 <sd_mount+0x24>
	else ret = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	71fb      	strb	r3, [r7, #7]

	return ret;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	08018028 	.word	0x08018028
 8001800:	20033718 	.word	0x20033718

08001804 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <create_path+0x24>)
 8001812:	f012 fc74 	bl	80140fe <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <create_path+0x28>)
 800181a:	f012 fc70 	bl	80140fe <strcpy>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20034758 	.word	0x20034758
 800182c:	20033618 	.word	0x20033618

08001830 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <fopen_folder_and_file+0x24>)
 8001836:	f010 fa75 	bl	8011d24 <f_mkdir>

	f_chdir(dirpath);
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <fopen_folder_and_file+0x24>)
 800183c:	f00f ff42 	bl	80116c4 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001840:	2213      	movs	r2, #19
 8001842:	4905      	ldr	r1, [pc, #20]	; (8001858 <fopen_folder_and_file+0x28>)
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <fopen_folder_and_file+0x2c>)
 8001846:	f00f f9d1 	bl	8010bec <f_open>

	f_chdir("..");
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <fopen_folder_and_file+0x30>)
 800184c:	f00f ff3a 	bl	80116c4 <f_chdir>


}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20034758 	.word	0x20034758
 8001858:	20033618 	.word	0x20033618
 800185c:	200348e8 	.word	0x200348e8
 8001860:	0801801c 	.word	0x0801801c

08001864 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e007      	b.n	8001880 <bufclear+0x1c>
		buffer[i] = '\0';
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <bufclear+0x30>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3301      	adds	r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b7f      	cmp	r3, #127	; 0x7f
 8001884:	ddf4      	ble.n	8001870 <bufclear+0xc>
	}
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20034858 	.word	0x20034858

08001898 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <read_byte+0x54>)
 80018b4:	f007 f980 	bl	8008bb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018b8:	f107 010f 	add.w	r1, r7, #15
 80018bc:	2364      	movs	r3, #100	; 0x64
 80018be:	2201      	movs	r2, #1
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <read_byte+0x58>)
 80018c2:	f00a fb41 	bl	800bf48 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018c6:	f107 010e 	add.w	r1, r7, #14
 80018ca:	2364      	movs	r3, #100	; 0x64
 80018cc:	2201      	movs	r2, #1
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <read_byte+0x58>)
 80018d0:	f00a fc6e 	bl	800c1b0 <HAL_SPI_Receive>
	CS_SET;
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <read_byte+0x54>)
 80018dc:	f007 f96c 	bl	8008bb8 <HAL_GPIO_WritePin>

	return val;
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40020400 	.word	0x40020400
 80018f0:	20035984 	.word	0x20035984

080018f4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <write_byte+0x54>)
 8001916:	f007 f94f 	bl	8008bb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800191a:	f107 010f 	add.w	r1, r7, #15
 800191e:	2364      	movs	r3, #100	; 0x64
 8001920:	2201      	movs	r2, #1
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <write_byte+0x58>)
 8001924:	f00a fb10 	bl	800bf48 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001928:	1db9      	adds	r1, r7, #6
 800192a:	2364      	movs	r3, #100	; 0x64
 800192c:	2201      	movs	r2, #1
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <write_byte+0x58>)
 8001930:	f00a fb0a 	bl	800bf48 <HAL_SPI_Transmit>
	CS_SET;
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <write_byte+0x54>)
 800193c:	f007 f93c 	bl	8008bb8 <HAL_GPIO_WritePin>
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020400 	.word	0x40020400
 800194c:	20035984 	.word	0x20035984

08001950 <IMU_init>:

uint16_t IMU_init() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff ff9c 	bl	8001898 <read_byte>
 8001960:	4603      	mov	r3, r0
 8001962:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	2be0      	cmp	r3, #224	; 0xe0
 8001968:	d119      	bne.n	800199e <IMU_init+0x4e>
		ret = 1;
 800196a:	2301      	movs	r3, #1
 800196c:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800196e:	2101      	movs	r1, #1
 8001970:	2006      	movs	r0, #6
 8001972:	f7ff ffbf 	bl	80018f4 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001976:	2110      	movs	r1, #16
 8001978:	2003      	movs	r0, #3
 800197a:	f7ff ffbb 	bl	80018f4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800197e:	2120      	movs	r1, #32
 8001980:	207f      	movs	r0, #127	; 0x7f
 8001982:	f7ff ffb7 	bl	80018f4 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001986:	2106      	movs	r1, #6
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff ffb3 	bl	80018f4 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800198e:	2106      	movs	r1, #6
 8001990:	2014      	movs	r0, #20
 8001992:	f7ff ffaf 	bl	80018f4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001996:	2100      	movs	r1, #0
 8001998:	207f      	movs	r0, #127	; 0x7f
 800199a:	f7ff ffab 	bl	80018f4 <write_byte>
	}
	return ret;
 800199e:	88fb      	ldrh	r3, [r7, #6]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <read_gyro_data>:

void read_gyro_data() {
 80019a8:	b598      	push	{r3, r4, r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019ac:	2033      	movs	r0, #51	; 0x33
 80019ae:	f7ff ff73 	bl	8001898 <read_byte>
 80019b2:	4603      	mov	r3, r0
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21c      	sxth	r4, r3
 80019b8:	2034      	movs	r0, #52	; 0x34
 80019ba:	f7ff ff6d 	bl	8001898 <read_byte>
 80019be:	4603      	mov	r3, r0
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4323      	orrs	r3, r4
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <read_gyro_data+0x64>)
 80019c8:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019ca:	2035      	movs	r0, #53	; 0x35
 80019cc:	f7ff ff64 	bl	8001898 <read_byte>
 80019d0:	4603      	mov	r3, r0
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21c      	sxth	r4, r3
 80019d6:	2036      	movs	r0, #54	; 0x36
 80019d8:	f7ff ff5e 	bl	8001898 <read_byte>
 80019dc:	4603      	mov	r3, r0
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4323      	orrs	r3, r4
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <read_gyro_data+0x68>)
 80019e6:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80019e8:	2037      	movs	r0, #55	; 0x37
 80019ea:	f7ff ff55 	bl	8001898 <read_byte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21c      	sxth	r4, r3
 80019f4:	2038      	movs	r0, #56	; 0x38
 80019f6:	f7ff ff4f 	bl	8001898 <read_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4323      	orrs	r3, r4
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <read_gyro_data+0x6c>)
 8001a04:	801a      	strh	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	bd98      	pop	{r3, r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20035920 	.word	0x20035920
 8001a10:	2003591e 	.word	0x2003591e
 8001a14:	20035918 	.word	0x20035918

08001a18 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	805a      	strh	r2, [r3, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	809a      	strh	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	80da      	strh	r2, [r3, #6]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	811a      	strh	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	815a      	strh	r2, [r3, #10]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
{

}
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a64:	f7ff ff74 	bl	8001950 <IMU_init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001a6c:	89fb      	ldrh	r3, [r7, #14]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <_ZN3IMU4initEv+0x50>)
 8001a72:	f012 f9eb 	bl	8013e4c <iprintf>

	lcd_clear();
 8001a76:	f7ff fb13 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fb1f 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a82:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <_ZN3IMU4initEv+0x54>)
 8001a84:	f7ff fb46 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fb18 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <_ZN3IMU4initEv+0x58>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a9e:	f005 fdf5 	bl	800768c <HAL_Delay>

}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	0801802c 	.word	0x0801802c
 8001ab0:	0801803c 	.word	0x0801803c
 8001ab4:	08018048 	.word	0x08018048

08001ab8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ac0:	f7ff ff72 	bl	80019a8 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ace:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <_ZN3IMU12updateValuesEv+0xa8>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd33 	bl	8000554 <__aeabi_i2d>
 8001aee:	a316      	add	r3, pc, #88	; (adr r3, 8001b48 <_ZN3IMU12updateValuesEv+0x90>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fd98 	bl	8000628 <__aeabi_dmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	4625      	mov	r5, r4
 8001afe:	461c      	mov	r4, r3
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <_ZN3IMU12updateValuesEv+0xac>)
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd24 	bl	8000554 <__aeabi_i2d>
 8001b0c:	a310      	add	r3, pc, #64	; (adr r3, 8001b50 <_ZN3IMU12updateValuesEv+0x98>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fd89 	bl	8000628 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fbcd 	bl	80002bc <__adddf3>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f7ff f82d 	bl	8000b88 <__aeabi_d2iz>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <_ZN3IMU12updateValuesEv+0xac>)
 8001b3e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bdb0      	pop	{r4, r5, r7, pc}
 8001b48:	eb851eb8 	.word	0xeb851eb8
 8001b4c:	3f9eb851 	.word	0x3f9eb851
 8001b50:	70a3d70a 	.word	0x70a3d70a
 8001b54:	3fef0a3d 	.word	0x3fef0a3d
 8001b58:	20035920 	.word	0x20035920
 8001b5c:	2003591e 	.word	0x2003591e
 8001b60:	20035918 	.word	0x20035918
 8001b64:	20000210 	.word	0x20000210

08001b68 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b88:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7fe fcf3 	bl	8000578 <__aeabi_f2d>
 8001b92:	a316      	add	r3, pc, #88	; (adr r3, 8001bec <_ZN3IMU8getOmegaEv+0x84>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fe70 	bl	800087c <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ba6:	a313      	add	r3, pc, #76	; (adr r3, 8001bf4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fd3a 	bl	8000628 <__aeabi_dmul>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4621      	mov	r1, r4
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bc2:	f7fe fe5b 	bl	800087c <__aeabi_ddiv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4621      	mov	r1, r4
 8001bce:	f7ff f823 	bl	8000c18 <__aeabi_d2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	ee07 3a90 	vmov	s15, r3
}
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	40668000 	.word	0x40668000
 8001bec:	66666666 	.word	0x66666666
 8001bf0:	40306666 	.word	0x40306666
 8001bf4:	54411744 	.word	0x54411744
 8001bf8:	400921fb 	.word	0x400921fb

08001bfc <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c04:	466b      	mov	r3, sp
 8001c06:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c0c:	f005 fd3e 	bl	800768c <HAL_Delay>
	lcd_clear();
 8001c10:	f7ff fa46 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c14:	2100      	movs	r1, #0
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff fa52 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c1c:	4840      	ldr	r0, [pc, #256]	; (8001d20 <_ZN3IMU11calibrationEv+0x124>)
 8001c1e:	f7ff fa79 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c22:	2101      	movs	r1, #1
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fa4b 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c2a:	483e      	ldr	r0, [pc, #248]	; (8001d24 <_ZN3IMU11calibrationEv+0x128>)
 8001c2c:	f7ff fa72 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c34:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c36:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c3a:	1e5d      	subs	r5, r3, #1
 8001c3c:	61bd      	str	r5, [r7, #24]
 8001c3e:	462b      	mov	r3, r5
 8001c40:	3301      	adds	r3, #1
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	f04f 0400 	mov.w	r4, #0
 8001c50:	0154      	lsls	r4, r2, #5
 8001c52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c56:	014b      	lsls	r3, r1, #5
 8001c58:	462b      	mov	r3, r5
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	f04f 0400 	mov.w	r4, #0
 8001c6a:	0154      	lsls	r4, r2, #5
 8001c6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c70:	014b      	lsls	r3, r1, #5
 8001c72:	462b      	mov	r3, r5
 8001c74:	3301      	adds	r3, #1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3303      	adds	r3, #3
 8001c7a:	3307      	adds	r3, #7
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	ebad 0d03 	sub.w	sp, sp, r3
 8001c84:	466b      	mov	r3, sp
 8001c86:	3303      	adds	r3, #3
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c8e:	2300      	movs	r3, #0
 8001c90:	83fb      	strh	r3, [r7, #30]
 8001c92:	8bfa      	ldrh	r2, [r7, #30]
 8001c94:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	da13      	bge.n	8001cc4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	ee07 2a90 	vmov	s15, r2
 8001ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f005 fce8 	bl	800768c <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001cbc:	8bfb      	ldrh	r3, [r7, #30]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	83fb      	strh	r3, [r7, #30]
 8001cc2:	e7e6      	b.n	8001c92 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	462b      	mov	r3, r5
 8001ccc:	3301      	adds	r3, #1
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d00e      	beq.n	8001cfa <_ZN3IMU11calibrationEv+0xfe>
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf8:	e7ec      	b.n	8001cd4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001cfa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d14:	46b5      	mov	sp, r6
}
 8001d16:	bf00      	nop
 8001d18:	372c      	adds	r7, #44	; 0x2c
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	0801804c 	.word	0x0801804c
 8001d24:	08018058 	.word	0x08018058

08001d28 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460a      	mov	r2, r1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	b299      	uxth	r1, r3
 8001d3c:	1dfa      	adds	r2, r7, #7
 8001d3e:	2364      	movs	r3, #100	; 0x64
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2301      	movs	r3, #1
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <INA260_read+0x50>)
 8001d46:	f007 f8a1 	bl	8008e8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	b299      	uxth	r1, r3
 8001d4e:	f107 020c 	add.w	r2, r7, #12
 8001d52:	2364      	movs	r3, #100	; 0x64
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2302      	movs	r3, #2
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <INA260_read+0x50>)
 8001d5a:	f007 f995 	bl	8009088 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d5e:	7b3b      	ldrb	r3, [r7, #12]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d6e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20035b38 	.word	0x20035b38

08001d7c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	4604      	mov	r4, r0
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71bb      	strb	r3, [r7, #6]
 8001d92:	460b      	mov	r3, r1
 8001d94:	717b      	strb	r3, [r7, #5]
 8001d96:	4613      	mov	r3, r2
 8001d98:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	733b      	strb	r3, [r7, #12]
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	737b      	strb	r3, [r7, #13]
 8001da2:	797b      	ldrb	r3, [r7, #5]
 8001da4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001da6:	793b      	ldrb	r3, [r7, #4]
 8001da8:	b299      	uxth	r1, r3
 8001daa:	f107 020c 	add.w	r2, r7, #12
 8001dae:	2364      	movs	r3, #100	; 0x64
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2303      	movs	r3, #3
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <INA260_write+0x48>)
 8001db6:	f007 f869 	bl	8008e8c <HAL_I2C_Master_Transmit>
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20035b38 	.word	0x20035b38

08001dc8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	71bb      	strb	r3, [r7, #6]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dda:	797b      	ldrb	r3, [r7, #5]
 8001ddc:	79ba      	ldrb	r2, [r7, #6]
 8001dde:	79f9      	ldrb	r1, [r7, #7]
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff ffcb 	bl	8001d7c <INA260_write>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	21df      	movs	r1, #223	; 0xdf
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff ffe2 	bl	8001dc8 <setConfig>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
{

}
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e34:	482a      	ldr	r0, [pc, #168]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e36:	f006 fea7 	bl	8008b88 <HAL_GPIO_ReadPin>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <_ZN8JoyStick8getValueEv+0x2e>
 8001e4a:	89fb      	ldrh	r3, [r7, #14]
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e52:	2101      	movs	r1, #1
 8001e54:	4823      	ldr	r0, [pc, #140]	; (8001ee4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e56:	f006 fe97 	bl	8008b88 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <_ZN8JoyStick8getValueEv+0x4e>
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e76:	481a      	ldr	r0, [pc, #104]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e78:	f006 fe86 	bl	8008b88 <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <_ZN8JoyStick8getValueEv+0x70>
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e94:	2104      	movs	r1, #4
 8001e96:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e98:	f006 fe76 	bl	8008b88 <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf0c      	ite	eq
 8001ea2:	2301      	moveq	r3, #1
 8001ea4:	2300      	movne	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <_ZN8JoyStick8getValueEv+0x90>
 8001eac:	89fb      	ldrh	r3, [r7, #14]
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001eb8:	f006 fe66 	bl	8008b88 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf0c      	ite	eq
 8001ec2:	2301      	moveq	r3, #1
 8001ec4:	2300      	movne	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <_ZN8JoyStick8getValueEv+0xb0>
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	f043 0310 	orr.w	r3, r3, #16
 8001ed2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40020c00 	.word	0x40020c00
 8001ee8:	40020400 	.word	0x40020400

08001eec <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b52      	cmp	r3, #82	; 0x52
 8001efc:	d112      	bne.n	8001f24 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f04:	4856      	ldr	r0, [pc, #344]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f006 fe57 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	4853      	ldr	r0, [pc, #332]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 fe51 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1c:	4850      	ldr	r0, [pc, #320]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 fe4b 	bl	8008bb8 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f22:	e098      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b47      	cmp	r3, #71	; 0x47
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	484b      	ldr	r0, [pc, #300]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f006 fe41 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4848      	ldr	r0, [pc, #288]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 fe3b 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	4845      	ldr	r0, [pc, #276]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 fe35 	bl	8008bb8 <HAL_GPIO_WritePin>
}
 8001f4e:	e082      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b42      	cmp	r3, #66	; 0x42
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	4840      	ldr	r0, [pc, #256]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f006 fe2b 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	483d      	ldr	r0, [pc, #244]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 fe25 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	483a      	ldr	r0, [pc, #232]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 fe1f 	bl	8008bb8 <HAL_GPIO_WritePin>
}
 8001f7a:	e06c      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b43      	cmp	r3, #67	; 0x43
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	4835      	ldr	r0, [pc, #212]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f006 fe15 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	4832      	ldr	r0, [pc, #200]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 fe0f 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	482f      	ldr	r0, [pc, #188]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 fe09 	bl	8008bb8 <HAL_GPIO_WritePin>
}
 8001fa6:	e056      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b4d      	cmp	r3, #77	; 0x4d
 8001fac:	d112      	bne.n	8001fd4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	482a      	ldr	r0, [pc, #168]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f006 fdff 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4827      	ldr	r0, [pc, #156]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 fdf9 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	4824      	ldr	r0, [pc, #144]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 fdf3 	bl	8008bb8 <HAL_GPIO_WritePin>
}
 8001fd2:	e040      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b59      	cmp	r3, #89	; 0x59
 8001fd8:	d112      	bne.n	8002000 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	481f      	ldr	r0, [pc, #124]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f006 fde9 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	481c      	ldr	r0, [pc, #112]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f006 fde3 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4819      	ldr	r0, [pc, #100]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f006 fddd 	bl	8008bb8 <HAL_GPIO_WritePin>
}
 8001ffe:	e02a      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	2b57      	cmp	r3, #87	; 0x57
 8002004:	d112      	bne.n	800202c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200c:	4814      	ldr	r0, [pc, #80]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800200e:	f006 fdd3 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002018:	4811      	ldr	r0, [pc, #68]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800201a:	f006 fdcd 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002024:	480e      	ldr	r0, [pc, #56]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002026:	f006 fdc7 	bl	8008bb8 <HAL_GPIO_WritePin>
}
 800202a:	e014      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	2b7e      	cmp	r3, #126	; 0x7e
 8002030:	d111      	bne.n	8002056 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002038:	4809      	ldr	r0, [pc, #36]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800203a:	f006 fdbd 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002044:	4806      	ldr	r0, [pc, #24]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002046:	f006 fdb7 	bl	8008bb8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002052:	f006 fdb1 	bl	8008bb8 <HAL_GPIO_WritePin>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40020000 	.word	0x40020000

08002064 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
 8002070:	4613      	mov	r3, r2
 8002072:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d106      	bne.n	800208a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002082:	4813      	ldr	r0, [pc, #76]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 8002084:	f006 fd98 	bl	8008bb8 <HAL_GPIO_WritePin>
 8002088:	e009      	b.n	800209e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800208a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 800209a:	f006 fd8d 	bl	8008bb8 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800209e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d106      	bne.n	80020b4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 80020ae:	f006 fd83 	bl	8008bb8 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020b2:	e009      	b.n	80020c8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c2:	4803      	ldr	r0, [pc, #12]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 80020c4:	f006 fd78 	bl	8008bb8 <HAL_GPIO_WritePin>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40020000 	.word	0x40020000

080020d4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b092      	sub	sp, #72	; 0x48
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fe92 	bl	8001e0c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	647b      	str	r3, [r7, #68]	; 0x44
 80020f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f2:	331c      	adds	r3, #28
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
 80020f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d008      	beq.n	8002110 <_ZN10LineSensorC1Ev+0x3c>
 80020fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	2200      	movs	r2, #0
 8002106:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210a:	3302      	adds	r3, #2
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
 800210e:	e7f2      	b.n	80020f6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	3338      	adds	r3, #56	; 0x38
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	429a      	cmp	r2, r3
 8002128:	d009      	beq.n	800213e <_ZN10LineSensorC1Ev+0x6a>
 800212a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212c:	623b      	str	r3, [r7, #32]
		s = 0;
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002138:	3304      	adds	r3, #4
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
 800213c:	e7f1      	b.n	8002122 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3338      	adds	r3, #56	; 0x38
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	429a      	cmp	r2, r3
 8002156:	d009      	beq.n	800216c <_ZN10LineSensorC1Ev+0x98>
 8002158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215a:	617b      	str	r3, [r7, #20]
		m = 0;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002166:	3304      	adds	r3, #4
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216a:	e7f1      	b.n	8002150 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	3338      	adds	r3, #56	; 0x38
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	429a      	cmp	r2, r3
 8002184:	d009      	beq.n	800219a <_ZN10LineSensorC1Ev+0xc6>
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	60bb      	str	r3, [r7, #8]
		s = 1;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002190:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002194:	3304      	adds	r3, #4
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
 8002198:	e7f1      	b.n	800217e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	3748      	adds	r7, #72	; 0x48
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	220e      	movs	r2, #14
 80021b0:	4619      	mov	r1, r3
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021b4:	f005 fad0 	bl	8007758 <HAL_ADC_Start_DMA>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20035a5c 	.word	0x20035a5c

080021c4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b0d      	cmp	r3, #13
 80021d4:	dc2f      	bgt.n	8002236 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3392      	adds	r3, #146	; 0x92
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3304      	adds	r3, #4
 80021e2:	ed93 7a00 	vldr	s14, [r3]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	33a0      	adds	r3, #160	; 0xa0
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	1a5b      	subs	r3, r3, r1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	440b      	add	r3, r1
 8002222:	3306      	adds	r3, #6
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3304      	adds	r3, #4
 800222a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3301      	adds	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e7cc      	b.n	80021d0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002240:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b09      	cmp	r3, #9
 8002248:	d902      	bls.n	8002250 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]


}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	2000021c 	.word	0x2000021c

08002260 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800226e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002272:	2b0d      	cmp	r3, #13
 8002274:	f200 80b8 	bhi.w	80023e8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800227e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002282:	2b09      	cmp	r3, #9
 8002284:	d81c      	bhi.n	80022c0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002286:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800228a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800228e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4423      	add	r3, r4
 800229e:	3306      	adds	r3, #6
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4403      	add	r3, r0
 80022a4:	3304      	adds	r3, #4
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	008b      	lsls	r3, r1, #2
 80022aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ae:	440b      	add	r3, r1
 80022b0:	3b30      	subs	r3, #48	; 0x30
 80022b2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022b8:	3301      	adds	r3, #1
 80022ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022be:	e7de      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	d84d      	bhi.n	800236a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022d2:	3301      	adds	r3, #1
 80022d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d83e      	bhi.n	800235e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ea:	4413      	add	r3, r2
 80022ec:	3b30      	subs	r3, #48	; 0x30
 80022ee:	ed93 7a00 	vldr	s14, [r3]
 80022f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fc:	4413      	add	r3, r2
 80022fe:	3b30      	subs	r3, #48	; 0x30
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230c:	d521      	bpl.n	8002352 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800230e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002318:	4413      	add	r3, r2
 800231a:	3b30      	subs	r3, #48	; 0x30
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002320:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002324:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002328:	0092      	lsls	r2, r2, #2
 800232a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800232e:	440a      	add	r2, r1
 8002330:	3a30      	subs	r2, #48	; 0x30
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233a:	440b      	add	r3, r1
 800233c:	3b30      	subs	r3, #48	; 0x30
 800233e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002340:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800234a:	4413      	add	r3, r2
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002350:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002352:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002356:	3301      	adds	r3, #1
 8002358:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800235c:	e7bc      	b.n	80022d8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800235e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002362:	3301      	adds	r3, #1
 8002364:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002368:	e7ad      	b.n	80022c6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f903 	bl	8000578 <__aeabi_f2d>
 8002372:	a32a      	add	r3, pc, #168	; (adr r3, 800241c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fe f956 	bl	8000628 <__aeabi_dmul>
 800237c:	4603      	mov	r3, r0
 800237e:	460c      	mov	r4, r1
 8002380:	4625      	mov	r5, r4
 8002382:	461c      	mov	r4, r3
 8002384:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002388:	4a21      	ldr	r2, [pc, #132]	; (8002410 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8f1 	bl	8000578 <__aeabi_f2d>
 8002396:	a31c      	add	r3, pc, #112	; (adr r3, 8002408 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe f944 	bl	8000628 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4620      	mov	r0, r4
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7fd ff88 	bl	80002bc <__adddf3>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	461a      	mov	r2, r3
 80023b2:	4623      	mov	r3, r4
 80023b4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fc2c 	bl	8000c18 <__aeabi_d2f>
 80023c0:	4601      	mov	r1, r0
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e0:	3301      	adds	r3, #1
 80023e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023e6:	e742      	b.n	800226e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 80023f0:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	3738      	adds	r7, #56	; 0x38
 8002400:	46bd      	mov	sp, r7
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	f3af 8000 	nop.w
 8002408:	66666666 	.word	0x66666666
 800240c:	3fee6666 	.word	0x3fee6666
 8002410:	20000220 	.word	0x20000220
 8002414:	20000214 	.word	0x20000214
 8002418:	20000218 	.word	0x20000218
 800241c:	9999999a 	.word	0x9999999a
 8002420:	3fa99999 	.word	0x3fa99999

08002424 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b0a9      	sub	sp, #164	; 0xa4
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800242c:	2064      	movs	r0, #100	; 0x64
 800242e:	f005 f92d 	bl	800768c <HAL_Delay>

	lcd_clear();
 8002432:	f7fe fe35 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002436:	2100      	movs	r1, #0
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fe41 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800243e:	48b1      	ldr	r0, [pc, #708]	; (8002704 <_ZN10LineSensor11calibrationEv+0x2e0>)
 8002440:	f7fe fe68 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002444:	2101      	movs	r1, #1
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe fe3a 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800244c:	48ae      	ldr	r0, [pc, #696]	; (8002708 <_ZN10LineSensor11calibrationEv+0x2e4>)
 800244e:	f7fe fe61 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002452:	2300      	movs	r3, #0
 8002454:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002458:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800245c:	2b0d      	cmp	r3, #13
 800245e:	d823      	bhi.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002460:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002464:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	32b0      	adds	r2, #176	; 0xb0
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	440a      	add	r2, r1
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002478:	440b      	add	r3, r1
 800247a:	3b60      	subs	r3, #96	; 0x60
 800247c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800247e:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002482:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	32b0      	adds	r2, #176	; 0xb0
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	440a      	add	r2, r1
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002496:	440b      	add	r3, r1
 8002498:	3b98      	subs	r3, #152	; 0x98
 800249a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800249c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80024a6:	e7d7      	b.n	8002458 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fcb8 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d079      	beq.n	80025b8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80024ca:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ce:	2b0d      	cmp	r3, #13
 80024d0:	d850      	bhi.n	8002574 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024dc:	4413      	add	r3, r2
 80024de:	3b60      	subs	r3, #96	; 0x60
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	33b0      	adds	r3, #176	; 0xb0
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	d50f      	bpl.n	800251e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024fe:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002502:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	32b0      	adds	r2, #176	; 0xb0
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	440a      	add	r2, r1
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002516:	440b      	add	r3, r1
 8002518:	3b60      	subs	r3, #96	; 0x60
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e024      	b.n	8002568 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800251e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002528:	4413      	add	r3, r2
 800252a:	3b98      	subs	r3, #152	; 0x98
 800252c:	ed93 7a00 	vldr	s14, [r3]
 8002530:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	33b0      	adds	r3, #176	; 0xb0
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	dd0e      	ble.n	8002568 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800254a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800254e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	32b0      	adds	r2, #176	; 0xb0
 8002556:	0092      	lsls	r2, r2, #2
 8002558:	440a      	add	r2, r1
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002562:	440b      	add	r3, r1
 8002564:	3b98      	subs	r3, #152	; 0x98
 8002566:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002568:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800256c:	3301      	adds	r3, #1
 800256e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002572:	e7aa      	b.n	80024ca <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800257a:	4618      	mov	r0, r3
 800257c:	f001 fb02 	bl	8003b84 <_ZN12RotarySwitch8getValueEv>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002596:	2201      	movs	r2, #1
 8002598:	f04f 31ff 	mov.w	r1, #4294967295
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fd61 	bl	8002064 <_ZN3LED2LREaa>
 80025a2:	e781      	b.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025aa:	2200      	movs	r2, #0
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fd57 	bl	8002064 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025b6:	e777      	b.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>

		}
	}

	for(const auto &m : max_values){
 80025b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80025c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025cc:	3338      	adds	r3, #56	; 0x38
 80025ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80025d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025da:	429a      	cmp	r2, r3
 80025dc:	d016      	beq.n	800260c <_ZN10LineSensor11calibrationEv+0x1e8>
 80025de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 80025e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffc3 	bl	8000578 <__aeabi_f2d>
 80025f2:	4603      	mov	r3, r0
 80025f4:	460c      	mov	r4, r1
 80025f6:	461a      	mov	r2, r3
 80025f8:	4623      	mov	r3, r4
 80025fa:	4844      	ldr	r0, [pc, #272]	; (800270c <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025fc:	f011 fc26 	bl	8013e4c <iprintf>
	for(const auto &m : max_values){
 8002600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002604:	3304      	adds	r3, #4
 8002606:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800260a:	e7e2      	b.n	80025d2 <_ZN10LineSensor11calibrationEv+0x1ae>
	}
		printf("\n");
 800260c:	200a      	movs	r0, #10
 800260e:	f011 fc35 	bl	8013e7c <putchar>
	for(const auto &m : min_values){
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800261a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800261e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002626:	3338      	adds	r3, #56	; 0x38
 8002628:	67fb      	str	r3, [r7, #124]	; 0x7c
 800262a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800262e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002630:	429a      	cmp	r2, r3
 8002632:	d014      	beq.n	800265e <_ZN10LineSensor11calibrationEv+0x23a>
 8002634:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002638:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 800263a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ff9a 	bl	8000578 <__aeabi_f2d>
 8002644:	4603      	mov	r3, r0
 8002646:	460c      	mov	r4, r1
 8002648:	461a      	mov	r2, r3
 800264a:	4623      	mov	r3, r4
 800264c:	482f      	ldr	r0, [pc, #188]	; (800270c <_ZN10LineSensor11calibrationEv+0x2e8>)
 800264e:	f011 fbfd 	bl	8013e4c <iprintf>
	for(const auto &m : min_values){
 8002652:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002656:	3304      	adds	r3, #4
 8002658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x206>
	}
		printf("\n");
 800265e:	200a      	movs	r0, #10
 8002660:	f011 fc0c 	bl	8013e7c <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002664:	2300      	movs	r3, #0
 8002666:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800266a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800266e:	2b0d      	cmp	r3, #13
 8002670:	d826      	bhi.n	80026c0 <_ZN10LineSensor11calibrationEv+0x29c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002672:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800267c:	4413      	add	r3, r2
 800267e:	3b60      	subs	r3, #96	; 0x60
 8002680:	ed93 7a00 	vldr	s14, [r3]
 8002684:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800268e:	4413      	add	r3, r2
 8002690:	3b98      	subs	r3, #152	; 0x98
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800269a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800269e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002710 <_ZN10LineSensor11calibrationEv+0x2ec>
 80026a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	3392      	adds	r3, #146	; 0x92
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	3304      	adds	r3, #4
 80026b0:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80026b8:	3301      	adds	r3, #1
 80026ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80026be:	e7d4      	b.n	800266a <_ZN10LineSensor11calibrationEv+0x246>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026c6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026ca:	2b0d      	cmp	r3, #13
 80026cc:	d815      	bhi.n	80026fa <_ZN10LineSensor11calibrationEv+0x2d6>
		offset_values_[i] = min_values[i];
 80026ce:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80026d2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80026dc:	440a      	add	r2, r1
 80026de:	3a98      	subs	r2, #152	; 0x98
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	33a0      	adds	r3, #160	; 0xa0
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3304      	adds	r3, #4
 80026ec:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026ee:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026f2:	3301      	adds	r3, #1
 80026f4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026f8:	e7e5      	b.n	80026c6 <_ZN10LineSensor11calibrationEv+0x2a2>
	}


}
 80026fa:	bf00      	nop
 80026fc:	37a4      	adds	r7, #164	; 0xa4
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	bf00      	nop
 8002704:	08018064 	.word	0x08018064
 8002708:	08018070 	.word	0x08018070
 800270c:	0801807c 	.word	0x0801807c
 8002710:	447a0000 	.word	0x447a0000

08002714 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	uint8_t out_cnt = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
	static uint8_t cnt = 0;

	for(const auto & s : sensor){
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	3338      	adds	r3, #56	; 0x38
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	429a      	cmp	r2, r3
 8002738:	d012      	beq.n	8002760 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60bb      	str	r3, [r7, #8]
		if(s >= 700) out_cnt++;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800279c <_ZN10LineSensor13emergencyStopEv+0x88>
 8002748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	db02      	blt.n	8002758 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002752:	7ffb      	ldrb	r3, [r7, #31]
 8002754:	3301      	adds	r3, #1
 8002756:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	3304      	adds	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e7e8      	b.n	8002732 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(out_cnt >= AD_DATA_SIZE){
 8002760:	7ffb      	ldrb	r3, [r7, #31]
 8002762:	2b0d      	cmp	r3, #13
 8002764:	d906      	bls.n	8002774 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 8002770:	701a      	strb	r2, [r3, #0]
 8002772:	e002      	b.n	800277a <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
	}

	if(cnt >= 100){
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <_ZN10LineSensor13emergencyStopEv+0x8c>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b63      	cmp	r3, #99	; 0x63
 8002780:	d902      	bls.n	8002788 <_ZN10LineSensor13emergencyStopEv+0x74>
		flag = true;
 8002782:	2301      	movs	r3, #1
 8002784:	75fb      	strb	r3, [r7, #23]
 8002786:	e001      	b.n	800278c <_ZN10LineSensor13emergencyStopEv+0x78>
	}
	else flag = false;
 8002788:	2300      	movs	r3, #0
 800278a:	75fb      	strb	r3, [r7, #23]

	return flag;
 800278c:	7dfb      	ldrb	r3, [r7, #23]

}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	442f0000 	.word	0x442f0000
 80027a0:	20000258 	.word	0x20000258

080027a4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>:

float mon_diff, mon_diff_lpf;

uint16_t mon_store_cnt;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger) :
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0), target_velocity_(0), logging_flag_(false)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	621a      	str	r2, [r3, #32]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	675a      	str	r2, [r3, #116]	; 0x74
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
{
	motor_ = motor;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a3a      	ldr	r2, [r7, #32]
 8002820:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002826:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282c:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002832:	61da      	str	r2, [r3, #28]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002834:	2300      	movs	r3, #0
 8002836:	82fb      	strh	r3, [r7, #22]
 8002838:	8afb      	ldrh	r3, [r7, #22]
 800283a:	f241 726f 	movw	r2, #5999	; 0x176f
 800283e:	4293      	cmp	r3, r2
 8002840:	d80c      	bhi.n	800285c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xb8>
		velocityTable[i] = 0;
 8002842:	8afb      	ldrh	r3, [r7, #22]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	331e      	adds	r3, #30
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3304      	adds	r3, #4
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002854:	8afb      	ldrh	r3, [r7, #22]
 8002856:	3301      	adds	r3, #1
 8002858:	82fb      	strh	r3, [r7, #22]
 800285a:	e7ed      	b.n	8002838 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0x94>
	}
}
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4618      	mov	r0, r3
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	0000      	movs	r0, r0
 800286c:	0000      	movs	r0, r0
	...

08002870 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80028a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80028ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 80028b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80028c4:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80028d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80028e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80028f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80028fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002908:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002918:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 800291c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <_ZN9LineTrace9calcErrorEv+0x130>)
 8002924:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe25 	bl	8000578 <__aeabi_f2d>
 800292e:	a318      	add	r3, pc, #96	; (adr r3, 8002990 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fe78 	bl	8000628 <__aeabi_dmul>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	4625      	mov	r5, r4
 800293e:	461c      	mov	r4, r3
 8002940:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fe17 	bl	8000578 <__aeabi_f2d>
 800294a:	a313      	add	r3, pc, #76	; (adr r3, 8002998 <_ZN9LineTrace9calcErrorEv+0x128>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	f7fd fe6a 	bl	8000628 <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4620      	mov	r0, r4
 800295a:	4629      	mov	r1, r5
 800295c:	f7fd fcae 	bl	80002bc <__adddf3>
 8002960:	4603      	mov	r3, r0
 8002962:	460c      	mov	r4, r1
 8002964:	4618      	mov	r0, r3
 8002966:	4621      	mov	r1, r4
 8002968:	f7fe f956 	bl	8000c18 <__aeabi_d2f>
 800296c:	4603      	mov	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a0d      	ldr	r2, [pc, #52]	; (80029a8 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002974:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <_ZN9LineTrace9calcErrorEv+0x134>)
 800297a:	6013      	str	r3, [r2, #0]

	return diff;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	ee07 3a90 	vmov	s15, r3

}
 8002982:	eeb0 0a67 	vmov.f32	s0, s15
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bdb0      	pop	{r4, r5, r7, pc}
 800298c:	f3af 8000 	nop.w
 8002990:	47ae147b 	.word	0x47ae147b
 8002994:	3fb47ae1 	.word	0x3fb47ae1
 8002998:	d70a3d71 	.word	0xd70a3d71
 800299c:	3fed70a3 	.word	0x3fed70a3
 80029a0:	2000025c 	.word	0x2000025c
 80029a4:	20000268 	.word	0x20000268
 80029a8:	20000260 	.word	0x20000260
 80029ac:	00000000 	.word	0x00000000

080029b0 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff59 	bl	8002870 <_ZN9LineTrace9calcErrorEv>
 80029be:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 80029cc:	4b3c      	ldr	r3, [pc, #240]	; (8002ac0 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	p = kp_ * diff;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	edd3 7a08 	vldr	s15, [r3, #32]
 80029e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80029e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ea:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029f4:	4b33      	ldr	r3, [pc, #204]	; (8002ac4 <_ZN9LineTrace8pidTraceEv+0x114>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	edd7 6a05 	vldr	s13, [r7, #20]
 80029fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a06:	ee17 0a90 	vmov	r0, s15
 8002a0a:	f7fd fdb5 	bl	8000578 <__aeabi_f2d>
 8002a0e:	a32a      	add	r3, pc, #168	; (adr r3, 8002ab8 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd ff32 	bl	800087c <__aeabi_ddiv>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	460c      	mov	r4, r1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4621      	mov	r1, r4
 8002a20:	f7fe f8fa 	bl	8000c18 <__aeabi_d2f>
 8002a24:	4603      	mov	r3, r0
 8002a26:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fda3 	bl	8000578 <__aeabi_f2d>
 8002a32:	4604      	mov	r4, r0
 8002a34:	460d      	mov	r5, r1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a44:	ee17 0a90 	vmov	r0, s15
 8002a48:	f7fd fd96 	bl	8000578 <__aeabi_f2d>
 8002a4c:	a31a      	add	r3, pc, #104	; (adr r3, 8002ab8 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fd fde9 	bl	8000628 <__aeabi_dmul>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	f7fd fc2d 	bl	80002bc <__adddf3>
 8002a62:	4603      	mov	r3, r0
 8002a64:	460c      	mov	r4, r1
 8002a66:	4618      	mov	r0, r3
 8002a68:	4621      	mov	r1, r4
 8002a6a:	f7fe f8d5 	bl	8000c18 <__aeabi_d2f>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a72:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002a74:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002a98:	edd7 0a02 	vldr	s1, [r7, #8]
 8002a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f001 fbdd 	bl	8004260 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002aa6:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	6013      	str	r3, [r2, #0]

}
 8002aac:	bf00      	nop
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab4:	f3af 8000 	nop.w
 8002ab8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002abc:	3f50624d 	.word	0x3f50624d
 8002ac0:	20000270 	.word	0x20000270
 8002ac4:	2000026c 	.word	0x2000026c

08002ac8 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalCnt();
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fcdf 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
	odometry_->clearPotition();
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fea0 	bl	8003824 <_ZN8Odometry13clearPotitionEv>
	//logger_->start();

	logging_flag_ = true;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fc82 	bl	800340a <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002b30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b40:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b48:	edc7 7a04 	vstr	s15, [r7, #16]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b74:	edc7 7a03 	vstr	s15, [r7, #12]
	bool flag = false;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	75fb      	strb	r3, [r7, #23]

	if(sensor_edge_val_l < 500 && sensor_edge_val_r < 500){
 8002b7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b80:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002bd0 <_ZN9LineTrace11isCrossLineEv+0xb8>
 8002b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8c:	d50f      	bpl.n	8002bae <_ZN9LineTrace11isCrossLineEv+0x96>
 8002b8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b92:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002bd0 <_ZN9LineTrace11isCrossLineEv+0xb8>
 8002b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	d506      	bpl.n	8002bae <_ZN9LineTrace11isCrossLineEv+0x96>
		cnt++;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002baa:	801a      	strh	r2, [r3, #0]
 8002bac:	e002      	b.n	8002bb4 <_ZN9LineTrace11isCrossLineEv+0x9c>
	}
	else{
		cnt = 0;
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 5){
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d901      	bls.n	8002bc0 <_ZN9LineTrace11isCrossLineEv+0xa8>
		flag = true;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	75fb      	strb	r3, [r7, #23]
		//cnt = 0;
	}

	return flag;
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	43fa0000 	.word	0x43fa0000
 8002bd4:	20000274 	.word	0x20000274

08002bd8 <_ZN9LineTrace4initEv>:

}

// -------public---------- //
void LineTrace::init()
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2201      	movs	r2, #1
 8002be6:	4912      	ldr	r1, [pc, #72]	; (8002c30 <_ZN9LineTrace4initEv+0x58>)
 8002be8:	4812      	ldr	r0, [pc, #72]	; (8002c34 <_ZN9LineTrace4initEv+0x5c>)
 8002bea:	f7fe fd63 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8002bee:	f107 0310 	add.w	r3, r7, #16
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4910      	ldr	r1, [pc, #64]	; (8002c38 <_ZN9LineTrace4initEv+0x60>)
 8002bf6:	480f      	ldr	r0, [pc, #60]	; (8002c34 <_ZN9LineTrace4initEv+0x5c>)
 8002bf8:	f7fe fd5c 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	2201      	movs	r2, #1
 8002c02:	490e      	ldr	r1, [pc, #56]	; (8002c3c <_ZN9LineTrace4initEv+0x64>)
 8002c04:	480b      	ldr	r0, [pc, #44]	; (8002c34 <_ZN9LineTrace4initEv+0x5c>)
 8002c06:	f7fe fd55 	bl	80016b4 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002c0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c12:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c16:	eeb0 1a66 	vmov.f32	s2, s13
 8002c1a:	eef0 0a47 	vmov.f32	s1, s14
 8002c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f80c 	bl	8002c40 <_ZN9LineTrace7setGainEfff>

}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	080180bc 	.word	0x080180bc
 8002c34:	080180c4 	.word	0x080180c4
 8002c38:	080180cc 	.word	0x080180cc
 8002c3c:	080180d4 	.word	0x080180d4

08002c40 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c4c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002c50:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	621a      	str	r2, [r3, #32]
	ki_ = ki;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
	kd_ = kd;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
	return kp_;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	ee07 3a90 	vmov	s15, r3
}
 8002c82:	eeb0 0a67 	vmov.f32	s0, s15
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	return ki_;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	ee07 3a90 	vmov	s15, r3
}
 8002ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
	return kd_;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	ee07 3a90 	vmov	s15, r3
}
 8002cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d053      	beq.n	8002dc2 <_ZN9LineTrace4flipEv+0xba>
		// ---- line following processing -----//
		pidTrace();
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fe48 	bl	80029b0 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff fef9 	bl	8002b18 <_ZN9LineTrace11isCrossLineEv>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d011      	beq.n	8002d50 <_ZN9LineTrace4flipEv+0x48>
			led_.LR(1, -1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	f04f 32ff 	mov.w	r2, #4294967295
 8002d34:	2101      	movs	r1, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f994 	bl	8002064 <_ZN3LED2LREaa>
			side_sensor_->enableIgnore();
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 f825 	bl	8003d90 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fbc9 	bl	80014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}
		else{
		}
		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 f835 	bl	8003dc4 <_ZN10SideSensor13getIgnoreFlagEv>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00f      	beq.n	8002d80 <_ZN9LineTrace4flipEv+0x78>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe fbad 	bl	80014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8002d6a:	eeb0 7a40 	vmov.f32	s14, s0
 8002d6e:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002dcc <_ZN9LineTrace4flipEv+0xc4>
 8002d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7a:	db01      	blt.n	8002d80 <_ZN9LineTrace4flipEv+0x78>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <_ZN9LineTrace4flipEv+0x7a>
 8002d80:	2300      	movs	r3, #0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <_ZN9LineTrace4flipEv+0x98>
			side_sensor_->disableIgnore();
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 f80d 	bl	8003daa <_ZN10SideSensor13disableIgnoreEv>
			led_.LR(0, -1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	330c      	adds	r3, #12
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	2100      	movs	r1, #0
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f962 	bl	8002064 <_ZN3LED2LREaa>
		}

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fcb5 	bl	8002714 <_ZN10LineSensor13emergencyStopEv>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <_ZN9LineTrace4flipEv+0xba>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	eddf 0a06 	vldr	s1, [pc, #24]	; 8002dd0 <_ZN9LineTrace4flipEv+0xc8>
 8002db8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8002dd0 <_ZN9LineTrace4flipEv+0xc8>
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fa4f 	bl	8004260 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	43480000 	.word	0x43480000
 8002dd0:	00000000 	.word	0x00000000

08002dd4 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i_reset_flag_ = true;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	velocity_ctrl_->start();
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 fa8e 	bl	8004312 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 ffb8 	bl	8003d70 <_ZN10SideSensor17resetWhiteLineCntEv>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	velocity_ctrl_->stop();
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f001 fa8b 	bl	8004338 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	330c      	adds	r3, #12
 8002e26:	2201      	movs	r2, #1
 8002e28:	f04f 31ff 	mov.w	r1, #4294967295
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f919 	bl	8002064 <_ZN3LED2LREaa>
	logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69d8      	ldr	r0, [r3, #28]
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <_ZN9LineTrace4stopEv+0x5c>)
 8002e38:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <_ZN9LineTrace4stopEv+0x60>)
 8002e3a:	490c      	ldr	r1, [pc, #48]	; (8002e6c <_ZN9LineTrace4stopEv+0x64>)
 8002e3c:	f000 fa35 	bl	80032aa <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
	led_.LR(-1, 0);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	330c      	adds	r3, #12
 8002e44:	2200      	movs	r2, #0
 8002e46:	f04f 31ff 	mov.w	r1, #4294967295
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff f90a 	bl	8002064 <_ZN3LED2LREaa>
	logger_->resetLogs();
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fa4b 	bl	80032f0 <_ZN6Logger9resetLogsEv>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	080180dc 	.word	0x080180dc
 8002e68:	080180e8 	.word	0x080180e8
 8002e6c:	080180f8 	.word	0x080180f8

08002e70 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	737b      	strb	r3, [r7, #13]
	start();
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ffa7 	bl	8002dd4 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8002e86:	7b7b      	ldrb	r3, [r7, #13]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d148      	bne.n	8002f1e <_ZN9LineTrace7runningEv+0xae>
		switch(stage){
 8002e8c:	89fb      	ldrh	r3, [r7, #14]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <_ZN9LineTrace7runningEv+0x28>
 8002e92:	2b0a      	cmp	r3, #10
 8002e94:	d020      	beq.n	8002ed8 <_ZN9LineTrace7runningEv+0x68>
 8002e96:	e041      	b.n	8002f1c <_ZN9LineTrace7runningEv+0xac>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 ff5b 	bl	8003d58 <_ZN10SideSensor16getWhiteLineCntREv>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d031      	beq.n	8002f16 <_ZN9LineTrace7runningEv+0xa6>
				loggerStart();
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fe08 	bl	8002ac8 <_ZN9LineTrace11loggerStartEv>
				encoder_->clearCrossLineIgnoreDistance();
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fb10 	bl	80014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				led_.LR(1, -1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eca:	2101      	movs	r1, #1
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff f8c9 	bl	8002064 <_ZN3LED2LREaa>
				stage = 10;
 8002ed2:	230a      	movs	r3, #10
 8002ed4:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8002ed6:	e01e      	b.n	8002f16 <_ZN9LineTrace7runningEv+0xa6>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 ff3b 	bl	8003d58 <_ZN10SideSensor16getWhiteLineCntREv>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d013      	beq.n	8002f1a <_ZN9LineTrace7runningEv+0xaa>
				loggerStop();
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff fdfe 	bl	8002af4 <_ZN9LineTrace10loggerStopEv>
				HAL_Delay(100); //Run through after the goal
 8002ef8:	2064      	movs	r0, #100	; 0x64
 8002efa:	f004 fbc7 	bl	800768c <HAL_Delay>

				setTargetVelocity(0);
 8002efe:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002f2c <_ZN9LineTrace7runningEv+0xbc>
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff fef1 	bl	8002cea <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8002f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f0c:	f004 fbbe 	bl	800768c <HAL_Delay>

				goal_flag = true;
 8002f10:	2301      	movs	r3, #1
 8002f12:	737b      	strb	r3, [r7, #13]

			}

			break;
 8002f14:	e001      	b.n	8002f1a <_ZN9LineTrace7runningEv+0xaa>
			break;
 8002f16:	bf00      	nop
 8002f18:	e7b5      	b.n	8002e86 <_ZN9LineTrace7runningEv+0x16>
			break;
 8002f1a:	bf00      	nop
	while(goal_flag == false){
 8002f1c:	e7b3      	b.n	8002e86 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ff72 	bl	8002e08 <_ZN9LineTrace4stopEv>

}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	00000000 	.word	0x00000000

08002f30 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	ed2d 8b02 	vpush	{d8}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true && encoder_->getTotalDistance() >= 10){
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00f      	beq.n	8002f66 <_ZN9LineTrace9storeLogsEv+0x36>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fa65 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8002f50:	eeb0 7a40 	vmov.f32	s14, s0
 8002f54:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f60:	db01      	blt.n	8002f66 <_ZN9LineTrace9storeLogsEv+0x36>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <_ZN9LineTrace9storeLogsEv+0x38>
 8002f66:	2300      	movs	r3, #0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d02b      	beq.n	8002fc4 <_ZN9LineTrace9storeLogsEv+0x94>
		logger_->storeDistanceAndTheta(encoder_->getTotalDistance(), odometry_->getTheta());
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69dc      	ldr	r4, [r3, #28]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fa50 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8002f7a:	eeb0 8a40 	vmov.f32	s16, s0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fc3d 	bl	8003802 <_ZN8Odometry8getThetaEv>
 8002f88:	ec53 2b10 	vmov	r2, r3, d0
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7fd fe42 	bl	8000c18 <__aeabi_d2f>
 8002f94:	4603      	mov	r3, r0
 8002f96:	ee00 3a90 	vmov	s1, r3
 8002f9a:	eeb0 0a48 	vmov.f32	s0, s16
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f000 f911 	bl	80031c6 <_ZN6Logger21storeDistanceAndThetaEff>
		encoder_->clearTotalCnt();
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fa75 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
		odometry_->clearPotition();
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fc36 	bl	8003824 <_ZN8Odometry13clearPotitionEv>
		mon_store_cnt++;
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <_ZN9LineTrace9storeLogsEv+0xa0>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <_ZN9LineTrace9storeLogsEv+0xa0>)
 8002fc2:	801a      	strh	r2, [r3, #0]
	}
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	ecbd 8b02 	vpop	{d8}
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	20000264 	.word	0x20000264

08002fd4 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002fe2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002ff0:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	801a      	strh	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002ffe:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003002:	2200      	movs	r2, #0
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800300c:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003010:	2200      	movs	r2, #0
 8003012:	801a      	strh	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800302c:	2300      	movs	r3, #0
 800302e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8003030:	f7fe fbcc 	bl	80017cc <sd_mount>
 8003034:	4603      	mov	r3, r0
 8003036:	2b01      	cmp	r3, #1
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d019      	beq.n	8003078 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 8003044:	481b      	ldr	r0, [pc, #108]	; (80030b4 <_ZN6Logger10sdCardInitEv+0x90>)
 8003046:	f010 ff89 	bl	8013f5c <puts>

	  lcd_clear();
 800304a:	f7fe f829 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800304e:	2100      	movs	r1, #0
 8003050:	2000      	movs	r0, #0
 8003052:	f7fe f835 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003056:	4818      	ldr	r0, [pc, #96]	; (80030b8 <_ZN6Logger10sdCardInitEv+0x94>)
 8003058:	f7fe f85c 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800305c:	2101      	movs	r1, #1
 800305e:	2000      	movs	r0, #0
 8003060:	f7fe f82e 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8003064:	4815      	ldr	r0, [pc, #84]	; (80030bc <_ZN6Logger10sdCardInitEv+0x98>)
 8003066:	f7fe f855 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800306a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800306e:	f004 fb0d 	bl	800768c <HAL_Delay>

	  ret = true;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e018      	b.n	80030aa <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8003078:	4811      	ldr	r0, [pc, #68]	; (80030c0 <_ZN6Logger10sdCardInitEv+0x9c>)
 800307a:	f010 ff6f 	bl	8013f5c <puts>

	  lcd_clear();
 800307e:	f7fe f80f 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003082:	2100      	movs	r1, #0
 8003084:	2000      	movs	r0, #0
 8003086:	f7fe f81b 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800308a:	480b      	ldr	r0, [pc, #44]	; (80030b8 <_ZN6Logger10sdCardInitEv+0x94>)
 800308c:	f7fe f842 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003090:	2101      	movs	r1, #1
 8003092:	2000      	movs	r0, #0
 8003094:	f7fe f814 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8003098:	480a      	ldr	r0, [pc, #40]	; (80030c4 <_ZN6Logger10sdCardInitEv+0xa0>)
 800309a:	f7fe f83b 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800309e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030a2:	f004 faf3 	bl	800768c <HAL_Delay>

	  ret = false;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	08018104 	.word	0x08018104
 80030b8:	08018114 	.word	0x08018114
 80030bc:	08018120 	.word	0x08018120
 80030c0:	08018128 	.word	0x08018128
 80030c4:	08018138 	.word	0x08018138

080030c8 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030da:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d029      	beq.n	8003138 <_ZN6Logger8storeLogEf+0x70>
		store_data_float_[log_index_tim_] = data;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030ea:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003100:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003110:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003114:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800311c:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	f241 3287 	movw	r2, #4999	; 0x1387
 8003126:	4293      	cmp	r3, r2
 8003128:	d906      	bls.n	8003138 <_ZN6Logger8storeLogEf+0x70>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003130:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003134:	2200      	movs	r2, #0
 8003136:	801a      	strh	r2, [r3, #0]
	}
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003156:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d02c      	beq.n	80031ba <_ZN6Logger9storeLog2Ef+0x76>
		store_data_float2_[log_index_tim2_] = data;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003166:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003172:	3308      	adds	r3, #8
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003182:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003192:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003196:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800319e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	f241 3287 	movw	r2, #4999	; 0x1387
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d906      	bls.n	80031ba <_ZN6Logger9storeLog2Ef+0x76>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80031b2:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80031b6:	2200      	movs	r2, #0
 80031b8:	801a      	strh	r2, [r3, #0]
	}
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	ed87 0a02 	vstr	s0, [r7, #8]
 80031d2:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80031dc:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80031e8:	3310      	adds	r3, #16
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80031f8:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003212:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003222:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003226:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800322e:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	f241 726f 	movw	r2, #5999	; 0x176f
 8003238:	4293      	cmp	r3, r2
 800323a:	d906      	bls.n	800324a <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003242:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003246:	2200      	movs	r2, #0
 8003248:	801a      	strh	r2, [r3, #0]
	//}
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af02      	add	r7, sp, #8
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	2300      	movs	r3, #0
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	4613      	mov	r3, r2
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	68b8      	ldr	r0, [r7, #8]
 8003272:	f7fe f9b9 	bl	80015e8 <sd_write_array_float>
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af02      	add	r7, sp, #8
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003290:	3320      	adds	r3, #32
 8003292:	2200      	movs	r2, #0
 8003294:	9200      	str	r2, [sp, #0]
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	68b8      	ldr	r0, [r7, #8]
 800329e:	f7fe f9a3 	bl	80015e8 <sd_write_array_float>
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af02      	add	r7, sp, #8
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80032be:	3340      	adds	r3, #64	; 0x40
 80032c0:	2200      	movs	r2, #0
 80032c2:	9200      	str	r2, [sp, #0]
 80032c4:	f241 7270 	movw	r2, #6000	; 0x1770
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	68b8      	ldr	r0, [r7, #8]
 80032cc:	f7fe f98c 	bl	80015e8 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 80032d6:	2300      	movs	r3, #0
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	4613      	mov	r3, r2
 80032dc:	f241 7270 	movw	r2, #6000	; 0x1770
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	68b8      	ldr	r0, [r7, #8]
 80032e4:	f7fe f980 	bl	80015e8 <sd_write_array_float>
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZN6Logger9resetLogsEv>:
	user_fclose();
}
*/

void Logger::resetLogs()
{
 80032f0:	b480      	push	{r7}
 80032f2:	b093      	sub	sp, #76	; 0x4c
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	637b      	str	r3, [r7, #52]	; 0x34
 80032fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003302:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003306:	3320      	adds	r3, #32
 8003308:	633b      	str	r3, [r7, #48]	; 0x30
 800330a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800330c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330e:	429a      	cmp	r2, r3
 8003310:	d009      	beq.n	8003326 <_ZN6Logger9resetLogsEv+0x36>
 8003312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
		log = 0;
 8003316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 800331e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003320:	3304      	adds	r3, #4
 8003322:	647b      	str	r3, [r7, #68]	; 0x44
 8003324:	e7f1      	b.n	800330a <_ZN6Logger9resetLogsEv+0x1a>
	}
	for(auto &log : store_data_float2_){
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800332c:	3320      	adds	r3, #32
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	643b      	str	r3, [r7, #64]	; 0x40
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800333a:	3320      	adds	r3, #32
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
 800333e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	429a      	cmp	r2, r3
 8003344:	d009      	beq.n	800335a <_ZN6Logger9resetLogsEv+0x6a>
 8003346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003348:	623b      	str	r3, [r7, #32]
		log = 0;
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 8003352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003354:	3304      	adds	r3, #4
 8003356:	643b      	str	r3, [r7, #64]	; 0x40
 8003358:	e7f1      	b.n	800333e <_ZN6Logger9resetLogsEv+0x4e>
	/*
	for(auto &log : store_data_uint16_){
		log = 0;
	}
	*/
	for(auto &log : store_distance_){
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003360:	3340      	adds	r3, #64	; 0x40
 8003362:	61fb      	str	r3, [r7, #28]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800336e:	3340      	adds	r3, #64	; 0x40
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	429a      	cmp	r2, r3
 8003378:	d009      	beq.n	800338e <_ZN6Logger9resetLogsEv+0x9e>
 800337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337c:	617b      	str	r3, [r7, #20]
		log = 0;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance_){
 8003386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003388:	3304      	adds	r3, #4
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338c:	e7f1      	b.n	8003372 <_ZN6Logger9resetLogsEv+0x82>
	}
	for(auto &log : store_theta_){
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80033a0:	3340      	adds	r3, #64	; 0x40
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d009      	beq.n	80033c0 <_ZN6Logger9resetLogsEv+0xd0>
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	60bb      	str	r3, [r7, #8]
		log = 0;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta_){
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	3304      	adds	r3, #4
 80033bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80033be:	e7f1      	b.n	80033a4 <_ZN6Logger9resetLogsEv+0xb4>
	}

	log_index_tim_ = 0;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033c6:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80033ca:	2200      	movs	r2, #0
 80033cc:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033d4:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80033d8:	2200      	movs	r2, #0
 80033da:	801a      	strh	r2, [r3, #0]
}
 80033dc:	bf00      	nop
 80033de:	374c      	adds	r7, #76	; 0x4c
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <_ZN6Logger5startEv>:

void Logger::start()
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033f6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003418:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	801a      	strh	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	805a      	strh	r2, [r3, #2]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <_ZN5Motor4initEv>:

void Motor::init()
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003458:	2108      	movs	r1, #8
 800345a:	4805      	ldr	r0, [pc, #20]	; (8003470 <_ZN5Motor4initEv+0x20>)
 800345c:	f009 fade 	bl	800ca1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003460:	210c      	movs	r1, #12
 8003462:	4803      	ldr	r0, [pc, #12]	; (8003470 <_ZN5Motor4initEv+0x20>)
 8003464:	f009 fada 	bl	800ca1c <HAL_TIM_PWM_Start>

}
 8003468:	bf00      	nop
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20035a1c 	.word	0x20035a1c

08003474 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003482:	2b00      	cmp	r3, #0
 8003484:	da0d      	bge.n	80034a2 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8003486:	2200      	movs	r2, #0
 8003488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800348c:	481f      	ldr	r0, [pc, #124]	; (800350c <_ZN5Motor9motorCtrlEv+0x98>)
 800348e:	f005 fb93 	bl	8008bb8 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003498:	b29b      	uxth	r3, r3
 800349a:	425b      	negs	r3, r3
 800349c:	b29b      	uxth	r3, r3
 800349e:	81fb      	strh	r3, [r7, #14]
 80034a0:	e00a      	b.n	80034b8 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80034a2:	2201      	movs	r2, #1
 80034a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034a8:	4818      	ldr	r0, [pc, #96]	; (800350c <_ZN5Motor9motorCtrlEv+0x98>)
 80034aa:	f005 fb85 	bl	8008bb8 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	da0d      	bge.n	80034de <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80034c2:	2201      	movs	r2, #1
 80034c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034c8:	4810      	ldr	r0, [pc, #64]	; (800350c <_ZN5Motor9motorCtrlEv+0x98>)
 80034ca:	f005 fb75 	bl	8008bb8 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	425b      	negs	r3, r3
 80034d8:	b29b      	uxth	r3, r3
 80034da:	81bb      	strh	r3, [r7, #12]
 80034dc:	e00a      	b.n	80034f4 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80034de:	2200      	movs	r2, #0
 80034e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034e4:	4809      	ldr	r0, [pc, #36]	; (800350c <_ZN5Motor9motorCtrlEv+0x98>)
 80034e6:	f005 fb67 	bl	8008bb8 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80034f4:	89fa      	ldrh	r2, [r7, #14]
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <_ZN5Motor9motorCtrlEv+0x9c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80034fc:	89ba      	ldrh	r2, [r7, #12]
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <_ZN5Motor9motorCtrlEv+0x9c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40020c00 	.word	0x40020c00
 8003510:	20035a1c 	.word	0x20035a1c

08003514 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6178      	str	r0, [r7, #20]
 800351c:	ed87 0b02 	vstr	d0, [r7, #8]
 8003520:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	4b30      	ldr	r3, [pc, #192]	; (80035ec <_ZN5Motor8setRatioEdd+0xd8>)
 800352a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800352e:	f7fd fb0b 	bl	8000b48 <__aeabi_dcmpgt>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <_ZN5Motor8setRatioEdd+0x30>
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	4c2b      	ldr	r4, [pc, #172]	; (80035ec <_ZN5Motor8setRatioEdd+0xd8>)
 800353e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8003542:	e00e      	b.n	8003562 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <_ZN5Motor8setRatioEdd+0xdc>)
 800354a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800354e:	f7fd fadd 	bl	8000b0c <__aeabi_dcmplt>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <_ZN5Motor8setRatioEdd+0x4e>
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	4c24      	ldr	r4, [pc, #144]	; (80035f0 <_ZN5Motor8setRatioEdd+0xdc>)
 800355e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <_ZN5Motor8setRatioEdd+0xd8>)
 8003568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800356c:	f7fd faec 	bl	8000b48 <__aeabi_dcmpgt>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <_ZN5Motor8setRatioEdd+0x6e>
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	4c1c      	ldr	r4, [pc, #112]	; (80035ec <_ZN5Motor8setRatioEdd+0xd8>)
 800357c:	e9c7 3400 	strd	r3, r4, [r7]
 8003580:	e00e      	b.n	80035a0 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <_ZN5Motor8setRatioEdd+0xdc>)
 8003588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800358c:	f7fd fabe 	bl	8000b0c <__aeabi_dcmplt>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <_ZN5Motor8setRatioEdd+0x8c>
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	4c15      	ldr	r4, [pc, #84]	; (80035f0 <_ZN5Motor8setRatioEdd+0xdc>)
 800359c:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <_ZN5Motor8setRatioEdd+0xe0>)
 80035a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035aa:	f7fd f83d 	bl	8000628 <__aeabi_dmul>
 80035ae:	4603      	mov	r3, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	4618      	mov	r0, r3
 80035b4:	4621      	mov	r1, r4
 80035b6:	f7fd fae7 	bl	8000b88 <__aeabi_d2iz>
 80035ba:	4603      	mov	r3, r0
 80035bc:	b21a      	sxth	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <_ZN5Motor8setRatioEdd+0xe0>)
 80035c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035cc:	f7fd f82c 	bl	8000628 <__aeabi_dmul>
 80035d0:	4603      	mov	r3, r0
 80035d2:	460c      	mov	r4, r1
 80035d4:	4618      	mov	r0, r3
 80035d6:	4621      	mov	r1, r4
 80035d8:	f7fd fad6 	bl	8000b88 <__aeabi_d2iz>
 80035dc:	4603      	mov	r3, r0
 80035de:	b21a      	sxth	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	805a      	strh	r2, [r3, #2]

}
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd90      	pop	{r4, r7, pc}
 80035ec:	3ff00000 	.word	0x3ff00000
 80035f0:	bff00000 	.word	0xbff00000
 80035f4:	409c2000 	.word	0x409c2000

080035f8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 80035f8:	b490      	push	{r4, r7}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	f04f 0400 	mov.w	r4, #0
 8003610:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	f04f 0400 	mov.w	r4, #0
 800361e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f04f 0400 	mov.w	r4, #0
 800362c:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	609a      	str	r2, [r3, #8]
}
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bc90      	pop	{r4, r7}
 800364c:	4770      	bx	lr
	...

08003650 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8003650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fa82 	bl	8001b68 <_ZN3IMU8getOmegaEv>
 8003664:	ee10 3a10 	vmov	r3, s0
 8003668:	4618      	mov	r0, r3
 800366a:	f7fc ff85 	bl	8000578 <__aeabi_f2d>
 800366e:	4603      	mov	r3, r0
 8003670:	460c      	mov	r4, r1
 8003672:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd febe 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 8003680:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8003684:	a357      	add	r3, pc, #348	; (adr r3, 80037e4 <_ZN8Odometry12calcPotitionEv+0x194>)
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800368e:	f7fc ffcb 	bl	8000628 <__aeabi_dmul>
 8003692:	4603      	mov	r3, r0
 8003694:	460c      	mov	r4, r1
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7fc ff68 	bl	8000578 <__aeabi_f2d>
 80036a8:	4682      	mov	sl, r0
 80036aa:	468b      	mov	fp, r1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036c0:	f7fd f8dc 	bl	800087c <__aeabi_ddiv>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4640      	mov	r0, r8
 80036ca:	4649      	mov	r1, r9
 80036cc:	f7fc fdf6 	bl	80002bc <__adddf3>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	ec43 2b17 	vmov	d7, r2, r3
 80036d8:	eeb0 0a47 	vmov.f32	s0, s14
 80036dc:	eef0 0a67 	vmov.f32	s1, s15
 80036e0:	f00e fce2 	bl	80120a8 <cos>
 80036e4:	ec53 2b10 	vmov	r2, r3, d0
 80036e8:	4650      	mov	r0, sl
 80036ea:	4659      	mov	r1, fp
 80036ec:	f7fc ff9c 	bl	8000628 <__aeabi_dmul>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4620      	mov	r0, r4
 80036f6:	4629      	mov	r1, r5
 80036f8:	f7fc fde0 	bl	80002bc <__adddf3>
 80036fc:	4603      	mov	r3, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7fc ff33 	bl	8000578 <__aeabi_f2d>
 8003712:	4682      	mov	sl, r0
 8003714:	468b      	mov	fp, r1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800372a:	f7fd f8a7 	bl	800087c <__aeabi_ddiv>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4640      	mov	r0, r8
 8003734:	4649      	mov	r1, r9
 8003736:	f7fc fdc1 	bl	80002bc <__adddf3>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	ec43 2b17 	vmov	d7, r2, r3
 8003742:	eeb0 0a47 	vmov.f32	s0, s14
 8003746:	eef0 0a67 	vmov.f32	s1, s15
 800374a:	f00e fcf1 	bl	8012130 <sin>
 800374e:	ec53 2b10 	vmov	r2, r3, d0
 8003752:	4650      	mov	r0, sl
 8003754:	4659      	mov	r1, fp
 8003756:	f7fc ff67 	bl	8000628 <__aeabi_dmul>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4620      	mov	r0, r4
 8003760:	4629      	mov	r1, r5
 8003762:	f7fc fdab 	bl	80002bc <__adddf3>
 8003766:	4603      	mov	r3, r0
 8003768:	460c      	mov	r4, r1
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800377c:	461a      	mov	r2, r3
 800377e:	4623      	mov	r3, r4
 8003780:	f7fc fd9c 	bl	80002bc <__adddf3>
 8003784:	4603      	mov	r3, r0
 8003786:	460c      	mov	r4, r1
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003794:	4618      	mov	r0, r3
 8003796:	4621      	mov	r1, r4
 8003798:	f7fd fa3e 	bl	8000c18 <__aeabi_d2f>
 800379c:	4602      	mov	r2, r0
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <_ZN8Odometry12calcPotitionEv+0x188>)
 80037a0:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80037a8:	4618      	mov	r0, r3
 80037aa:	4621      	mov	r1, r4
 80037ac:	f7fd fa34 	bl	8000c18 <__aeabi_d2f>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <_ZN8Odometry12calcPotitionEv+0x18c>)
 80037b4:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80037bc:	4618      	mov	r0, r3
 80037be:	4621      	mov	r1, r4
 80037c0:	f7fd fa2a 	bl	8000c18 <__aeabi_d2f>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <_ZN8Odometry12calcPotitionEv+0x190>)
 80037c8:	601a      	str	r2, [r3, #0]
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037d4:	f3af 8000 	nop.w
 80037d8:	20000278 	.word	0x20000278
 80037dc:	2000027c 	.word	0x2000027c
 80037e0:	20000280 	.word	0x20000280
 80037e4:	d2f1a9fc 	.word	0xd2f1a9fc
 80037e8:	3f50624d 	.word	0x3f50624d

080037ec <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	calcPotition();
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff2b 	bl	8003650 <_ZN8Odometry12calcPotitionEv>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <_ZN8Odometry8getThetaEv>:
{
	return y_;
}

double Odometry::getTheta()
{
 8003802:	b490      	push	{r4, r7}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
	return theta_;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003810:	ec44 3b17 	vmov	d7, r3, r4
}
 8003814:	eeb0 0a47 	vmov.f32	s0, s14
 8003818:	eef0 0a67 	vmov.f32	s1, s15
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bc90      	pop	{r4, r7}
 8003822:	4770      	bx	lr

08003824 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8003824:	b490      	push	{r4, r7}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	x_ = 0;
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	f04f 0400 	mov.w	r4, #0
 8003836:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	f04f 0400 	mov.w	r4, #0
 8003844:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	f04f 0400 	mov.w	r4, #0
 8003852:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bc90      	pop	{r4, r7}
 800385e:	4770      	bx	lr

08003860 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8003860:	b490      	push	{r4, r7}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	f04f 0400 	mov.w	r4, #0
 8003878:	e9c2 3402 	strd	r3, r4, [r2, #8]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	f04f 0400 	mov.w	r4, #0
 8003886:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	f04f 0400 	mov.w	r4, #0
 8003894:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800389e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80038a2:	2200      	movs	r2, #0
 80038a4:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80038a6:	4a29      	ldr	r2, [pc, #164]	; (800394c <_ZN13PathFollowingC1Ev+0xec>)
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	f04f 0400 	mov.w	r4, #0
 80038b0:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80038b4:	4a25      	ldr	r2, [pc, #148]	; (800394c <_ZN13PathFollowingC1Ev+0xec>)
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	f04f 0400 	mov.w	r4, #0
 80038be:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80038c2:	4a22      	ldr	r2, [pc, #136]	; (800394c <_ZN13PathFollowingC1Ev+0xec>)
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	f04f 0400 	mov.w	r4, #0
 80038cc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80038d0:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <_ZN13PathFollowingC1Ev+0xf0>)
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	f04f 0400 	mov.w	r4, #0
 80038da:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80038de:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <_ZN13PathFollowingC1Ev+0xf0>)
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	f04f 0400 	mov.w	r4, #0
 80038e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <_ZN13PathFollowingC1Ev+0xf0>)
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	f04f 0400 	mov.w	r4, #0
 80038f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80038fa:	4a15      	ldr	r2, [pc, #84]	; (8003950 <_ZN13PathFollowingC1Ev+0xf0>)
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	f04f 0400 	mov.w	r4, #0
 8003904:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003908:	4a11      	ldr	r2, [pc, #68]	; (8003950 <_ZN13PathFollowingC1Ev+0xf0>)
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	f04f 0400 	mov.w	r4, #0
 8003912:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <_ZN13PathFollowingC1Ev+0xf0>)
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	f04f 0400 	mov.w	r4, #0
 8003920:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003924:	4a0b      	ldr	r2, [pc, #44]	; (8003954 <_ZN13PathFollowingC1Ev+0xf4>)
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	f04f 0400 	mov.w	r4, #0
 800392e:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003932:	4a08      	ldr	r2, [pc, #32]	; (8003954 <_ZN13PathFollowingC1Ev+0xf4>)
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	f04f 0400 	mov.w	r4, #0
 800393c:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bc90      	pop	{r4, r7}
 800394a:	4770      	bx	lr
 800394c:	20035f20 	.word	0x20035f20
 8003950:	20035eb0 	.word	0x20035eb0
 8003954:	20035f10 	.word	0x20035f10

08003958 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8003960:	f001 fce2 	bl	8005328 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8003964:	f107 0318 	add.w	r3, r7, #24
 8003968:	2201      	movs	r2, #1
 800396a:	4915      	ldr	r1, [pc, #84]	; (80039c0 <_ZN13PathFollowing4initEv+0x68>)
 800396c:	4815      	ldr	r0, [pc, #84]	; (80039c4 <_ZN13PathFollowing4initEv+0x6c>)
 800396e:	f7fd fee7 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8003972:	f107 0310 	add.w	r3, r7, #16
 8003976:	2201      	movs	r2, #1
 8003978:	4913      	ldr	r1, [pc, #76]	; (80039c8 <_ZN13PathFollowing4initEv+0x70>)
 800397a:	4812      	ldr	r0, [pc, #72]	; (80039c4 <_ZN13PathFollowing4initEv+0x6c>)
 800397c:	f7fd fee0 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8003980:	f107 0308 	add.w	r3, r7, #8
 8003984:	2201      	movs	r2, #1
 8003986:	4911      	ldr	r1, [pc, #68]	; (80039cc <_ZN13PathFollowing4initEv+0x74>)
 8003988:	480e      	ldr	r0, [pc, #56]	; (80039c4 <_ZN13PathFollowing4initEv+0x6c>)
 800398a:	f7fd fed9 	bl	8001740 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800398e:	ed97 7b06 	vldr	d7, [r7, #24]
 8003992:	ed97 6b04 	vldr	d6, [r7, #16]
 8003996:	ed97 5b02 	vldr	d5, [r7, #8]
 800399a:	eeb0 2a45 	vmov.f32	s4, s10
 800399e:	eef0 2a65 	vmov.f32	s5, s11
 80039a2:	eeb0 1a46 	vmov.f32	s2, s12
 80039a6:	eef0 1a66 	vmov.f32	s3, s13
 80039aa:	eeb0 0a47 	vmov.f32	s0, s14
 80039ae:	eef0 0a67 	vmov.f32	s1, s15
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f80c 	bl	80039d0 <_ZN13PathFollowing7setGainEddd>
}
 80039b8:	bf00      	nop
 80039ba:	3720      	adds	r7, #32
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08018140 	.word	0x08018140
 80039c4:	08018148 	.word	0x08018148
 80039c8:	08018150 	.word	0x08018150
 80039cc:	08018158 	.word	0x08018158

080039d0 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80039d0:	b490      	push	{r4, r7}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	61f8      	str	r0, [r7, #28]
 80039d8:	ed87 0b04 	vstr	d0, [r7, #16]
 80039dc:	ed87 1b02 	vstr	d1, [r7, #8]
 80039e0:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80039e4:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <_ZN13PathFollowing7setGainEddd+0x3c>)
 80039e6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80039ea:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80039ee:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <_ZN13PathFollowing7setGainEddd+0x3c>)
 80039f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80039f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80039f8:	4a04      	ldr	r2, [pc, #16]	; (8003a0c <_ZN13PathFollowing7setGainEddd+0x3c>)
 80039fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80039fe:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003a02:	bf00      	nop
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc90      	pop	{r4, r7}
 8003a0a:	4770      	bx	lr
 8003a0c:	20035f20 	.word	0x20035f20

08003a10 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003a10:	b490      	push	{r4, r7}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <_ZN13PathFollowing8getKxValEv+0x24>)
 8003a1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a1e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003a22:	eeb0 0a47 	vmov.f32	s0, s14
 8003a26:	eef0 0a67 	vmov.f32	s1, s15
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc90      	pop	{r4, r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20035f20 	.word	0x20035f20

08003a38 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003a38:	b490      	push	{r4, r7}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <_ZN13PathFollowing8getKyValEv+0x24>)
 8003a42:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003a46:	ec44 3b17 	vmov	d7, r3, r4
}
 8003a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a4e:	eef0 0a67 	vmov.f32	s1, s15
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc90      	pop	{r4, r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20035f20 	.word	0x20035f20

08003a60 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003a60:	b490      	push	{r4, r7}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <_ZN13PathFollowing8getKtValEv+0x24>)
 8003a6a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003a6e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003a72:	eeb0 0a47 	vmov.f32	s0, s14
 8003a76:	eef0 0a67 	vmov.f32	s1, s15
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc90      	pop	{r4, r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20035f20 	.word	0x20035f20

08003a88 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003a90:	2088      	movs	r0, #136	; 0x88
 8003a92:	f7fe f9ac 	bl	8001dee <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003a96:	2080      	movs	r0, #128	; 0x80
 8003a98:	f7fe f9a9 	bl	8001dee <INA260_init>
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	0000      	movs	r0, r0
	...

08003aa8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003ab0:	2188      	movs	r1, #136	; 0x88
 8003ab2:	2002      	movs	r0, #2
 8003ab4:	f7fe f938 	bl	8001d28 <INA260_read>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fd4a 	bl	8000554 <__aeabi_i2d>
 8003ac0:	a30c      	add	r3, pc, #48	; (adr r3, 8003af4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f7fc fdaf 	bl	8000628 <__aeabi_dmul>
 8003aca:	4603      	mov	r3, r0
 8003acc:	460c      	mov	r4, r1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	f7fd f8a1 	bl	8000c18 <__aeabi_d2f>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a03      	ldr	r2, [pc, #12]	; (8003af0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003ae2:	6013      	str	r3, [r2, #0]
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd90      	pop	{r4, r7, pc}
 8003aec:	f3af 8000 	nop.w
 8003af0:	20000284 	.word	0x20000284
 8003af4:	47ae147b 	.word	0x47ae147b
 8003af8:	3f547ae1 	.word	0x3f547ae1

08003afc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	ee07 3a90 	vmov	s15, r3

}
 8003b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	0000      	movs	r0, r0
 8003b1c:	0000      	movs	r0, r0
	...

08003b20 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc fd21 	bl	8000578 <__aeabi_f2d>
 8003b36:	a311      	add	r3, pc, #68	; (adr r3, 8003b7c <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f7fc ffe6 	bl	8000b0c <__aeabi_dcmplt>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	e002      	b.n	8003b5a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003b5a:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003b62:	2301      	movs	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003b66:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000288 	.word	0x20000288
 8003b7c:	9999999a 	.word	0x9999999a
 8003b80:	401d9999 	.word	0x401d9999

08003b84 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003b90:	2102      	movs	r1, #2
 8003b92:	4822      	ldr	r0, [pc, #136]	; (8003c1c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003b94:	f004 fff8 	bl	8008b88 <HAL_GPIO_ReadPin>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003ba8:	89fb      	ldrh	r3, [r7, #14]
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003bb0:	2108      	movs	r1, #8
 8003bb2:	481a      	ldr	r0, [pc, #104]	; (8003c1c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003bb4:	f004 ffe8 	bl	8008b88 <HAL_GPIO_ReadPin>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	bf0c      	ite	eq
 8003bbe:	2301      	moveq	r3, #1
 8003bc0:	2300      	movne	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003bc8:	89fb      	ldrh	r3, [r7, #14]
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003bd0:	2110      	movs	r1, #16
 8003bd2:	4812      	ldr	r0, [pc, #72]	; (8003c1c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003bd4:	f004 ffd8 	bl	8008b88 <HAL_GPIO_ReadPin>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bf0c      	ite	eq
 8003bde:	2301      	moveq	r3, #1
 8003be0:	2300      	movne	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003be8:	89fb      	ldrh	r3, [r7, #14]
 8003bea:	f043 0304 	orr.w	r3, r3, #4
 8003bee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003bf0:	2180      	movs	r1, #128	; 0x80
 8003bf2:	480a      	ldr	r0, [pc, #40]	; (8003c1c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003bf4:	f004 ffc8 	bl	8008b88 <HAL_GPIO_ReadPin>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	2300      	movne	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003c08:	89fb      	ldrh	r3, [r7, #14]
 8003c0a:	f043 0308 	orr.w	r3, r3, #8
 8003c0e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003c10:	89fb      	ldrh	r3, [r7, #14]

}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40020c00 	.word	0x40020c00

08003c20 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	805a      	strh	r2, [r3, #2]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	809a      	strh	r2, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	719a      	strb	r2, [r3, #6]
{

}
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <_ZN10SideSensor12updateStatusEt>:

void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if(ignore_flag_ == false){
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	799b      	ldrb	r3, [r3, #6]
 8003c60:	f083 0301 	eor.w	r3, r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d065      	beq.n	8003d36 <_ZN10SideSensor12updateStatusEt+0xe6>

		if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d111      	bne.n	8003c94 <_ZN10SideSensor12updateStatusEt+0x44>
 8003c70:	4b34      	ldr	r3, [pc, #208]	; (8003d44 <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	f083 0301 	eor.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <_ZN10SideSensor12updateStatusEt+0x44>
			status_ |= 0x01;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	801a      	strh	r2, [r3, #0]
			white_flag1 = true;
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e01a      	b.n	8003cca <_ZN10SideSensor12updateStatusEt+0x7a>
		}
		else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8003c94:	887b      	ldrh	r3, [r7, #2]
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d117      	bne.n	8003cca <_ZN10SideSensor12updateStatusEt+0x7a>
 8003c9a:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d013      	beq.n	8003cca <_ZN10SideSensor12updateStatusEt+0x7a>
			status_ ^= 0x01;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	f083 0301 	eor.w	r3, r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	801a      	strh	r2, [r3, #0]
			white_flag1 = false;
 8003cb0:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]

			white_line_cnt_r_++;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	889b      	ldrh	r3, [r3, #4]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	809a      	strh	r2, [r3, #4]
			mon_cnt_r = white_line_cnt_r_;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	889a      	ldrh	r2, [r3, #4]
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <_ZN10SideSensor12updateStatusEt+0xf8>)
 8003cc8:	801a      	strh	r2, [r3, #0]

		}

		if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd0:	d111      	bne.n	8003cf6 <_ZN10SideSensor12updateStatusEt+0xa6>
 8003cd2:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	f083 0301 	eor.w	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <_ZN10SideSensor12updateStatusEt+0xa6>
			status_ |= 0x02;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	f043 0302 	orr.w	r3, r3, #2
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	801a      	strh	r2, [r3, #0]
			white_flag2 = true;
 8003cee:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	e01b      	b.n	8003d2e <_ZN10SideSensor12updateStatusEt+0xde>
		}
		else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8003cf6:	887b      	ldrh	r3, [r7, #2]
 8003cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfc:	d117      	bne.n	8003d2e <_ZN10SideSensor12updateStatusEt+0xde>
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d013      	beq.n	8003d2e <_ZN10SideSensor12updateStatusEt+0xde>
			status_ ^= 0x02;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	f083 0302 	eor.w	r3, r3, #2
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	801a      	strh	r2, [r3, #0]
			white_flag2 = false;
 8003d14:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]

			white_line_cnt_l_++;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	885b      	ldrh	r3, [r3, #2]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	805a      	strh	r2, [r3, #2]
			mon_cnt_l = white_line_cnt_l_;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	885a      	ldrh	r2, [r3, #2]
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <_ZN10SideSensor12updateStatusEt+0x100>)
 8003d2c:	801a      	strh	r2, [r3, #0]
		}

		mon_status = status_;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	881a      	ldrh	r2, [r3, #0]
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <_ZN10SideSensor12updateStatusEt+0x104>)
 8003d34:	801a      	strh	r2, [r3, #0]
	}

}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000290 	.word	0x20000290
 8003d48:	2000028e 	.word	0x2000028e
 8003d4c:	20000291 	.word	0x20000291
 8003d50:	2000028c 	.word	0x2000028c
 8003d54:	2000028a 	.word	0x2000028a

08003d58 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	889b      	ldrh	r3, [r3, #4]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	809a      	strh	r2, [r3, #4]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	719a      	strb	r2, [r3, #6]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	719a      	strb	r2, [r3, #6]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	799b      	ldrb	r3, [r3, #6]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8003dec:	3308      	adds	r3, #8
 8003dee:	4611      	mov	r1, r2
 8003df0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003df4:	4618      	mov	r0, r3
 8003df6:	f00f f9d7 	bl	80131a8 <memcpy>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	0801817c 	.word	0x0801817c

08003e30 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d010      	beq.n	8003e68 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	ed97 0a00 	vldr	s0, [r7]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff f93a 	bl	80030c8 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e62:	4610      	mov	r0, r2
 8003e64:	f7ff f96e 	bl	8003144 <_ZN6Logger9storeLog2Ef>
	}

}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8003e7e:	4908      	ldr	r1, [pc, #32]	; (8003ea0 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff f9e8 	bl	8003256 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a06      	ldr	r2, [pc, #24]	; (8003ea4 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8003e8c:	4904      	ldr	r1, [pc, #16]	; (8003ea0 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff f9f5 	bl	800327e <_ZN6Logger9saveLogs2EPKcS1_>
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	08018370 	.word	0x08018370
 8003ea0:	0801837c 	.word	0x0801837c
 8003ea4:	08018388 	.word	0x08018388

08003ea8 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8003ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d046      	beq.n	8003f48 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3204      	adds	r2, #4
 8003ecc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003ee8:	3301      	adds	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ef8:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8003efa:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003f02:	2bf9      	cmp	r3, #249	; 0xf9
 8003f04:	d903      	bls.n	8003f0e <_ZN20SystemIdentification10updateMsigEv+0x66>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	22fa      	movs	r2, #250	; 0xfa
 8003f0a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685c      	ldr	r4, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fc fb2d 	bl	8000578 <__aeabi_f2d>
 8003f1e:	4605      	mov	r5, r0
 8003f20:	460e      	mov	r6, r1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003f28:	eef1 7a67 	vneg.f32	s15, s15
 8003f2c:	ee17 3a90 	vmov	r3, s15
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fc fb21 	bl	8000578 <__aeabi_f2d>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	ec43 2b11 	vmov	d1, r2, r3
 8003f3e:	ec46 5b10 	vmov	d0, r5, r6
 8003f42:	4620      	mov	r0, r4
 8003f44:	f7ff fae6 	bl	8003514 <_ZN5Motor8setRatioEdd>

	}

}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f50:	20000294 	.word	0x20000294

08003f54 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fa31 	bl	80033e8 <_ZN6Logger5startEv>
	processing_flag_ = true;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fa30 	bl	800340a <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003fd8 <_ZN20SystemIdentification4stopEv+0x40>
 8003fc2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003fd8 <_ZN20SystemIdentification4stopEv+0x40>
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff faa4 	bl	8003514 <_ZN5Motor8setRatioEdd>
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	f3af 8000 	nop.w
	...

08003fe0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	60da      	str	r2, [r3, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	615a      	str	r2, [r3, #20]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	619a      	str	r2, [r3, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	621a      	str	r2, [r3, #32]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	625a      	str	r2, [r3, #36]	; 0x24
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004084:	f107 020c 	add.w	r2, r7, #12
 8004088:	f107 0110 	add.w	r1, r7, #16
 800408c:	4618      	mov	r0, r3
 800408e:	f7fd f9a1 	bl	80013d4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8004092:	ed97 7a04 	vldr	s14, [r7, #16]
 8004096:	edd7 7a03 	vldr	s15, [r7, #12]
 800409a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800409e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80040a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040a6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f7fc fa64 	bl	8000578 <__aeabi_f2d>
 80040b0:	a30b      	add	r3, pc, #44	; (adr r3, 80040e0 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f7fc fab7 	bl	8000628 <__aeabi_dmul>
 80040ba:	4603      	mov	r3, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	4618      	mov	r0, r3
 80040c0:	4621      	mov	r1, r4
 80040c2:	f7fc fda9 	bl	8000c18 <__aeabi_d2f>
 80040c6:	4602      	mov	r2, r0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	ee07 3a90 	vmov	s15, r3
}
 80040d4:	eeb0 0a67 	vmov.f32	s0, s15
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd90      	pop	{r4, r7, pc}
 80040de:	bf00      	nop
 80040e0:	1ab1d998 	.word	0x1ab1d998
 80040e4:	3f7830b5 	.word	0x3f7830b5

080040e8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80040e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	ed93 7a00 	vldr	s14, [r3]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80040fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004100:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 800410e:	4b48      	ldr	r3, [pc, #288]	; (8004230 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	edd3 7a04 	vldr	s15, [r3, #16]
 8004124:	ed97 7a05 	vldr	s14, [r7, #20]
 8004128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8004130:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7fc fa1f 	bl	8000578 <__aeabi_f2d>
 800413a:	4604      	mov	r4, r0
 800413c:	460d      	mov	r5, r1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	ed93 7a06 	vldr	s14, [r3, #24]
 8004144:	edd7 7a05 	vldr	s15, [r7, #20]
 8004148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414c:	ee17 0a90 	vmov	r0, s15
 8004150:	f7fc fa12 	bl	8000578 <__aeabi_f2d>
 8004154:	a334      	add	r3, pc, #208	; (adr r3, 8004228 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f7fc fa65 	bl	8000628 <__aeabi_dmul>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4620      	mov	r0, r4
 8004164:	4629      	mov	r1, r5
 8004166:	f7fc f8a9 	bl	80002bc <__adddf3>
 800416a:	4603      	mov	r3, r0
 800416c:	460c      	mov	r4, r1
 800416e:	4618      	mov	r0, r3
 8004170:	4621      	mov	r1, r4
 8004172:	f7fc fd51 	bl	8000c18 <__aeabi_d2f>
 8004176:	4602      	mov	r2, r0
 8004178:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800417a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004182:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8004184:	edd3 7a00 	vldr	s15, [r3]
 8004188:	edd7 6a05 	vldr	s13, [r7, #20]
 800418c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004194:	ee17 0a90 	vmov	r0, s15
 8004198:	f7fc f9ee 	bl	8000578 <__aeabi_f2d>
 800419c:	a322      	add	r3, pc, #136	; (adr r3, 8004228 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f7fc fb6b 	bl	800087c <__aeabi_ddiv>
 80041a6:	4603      	mov	r3, r0
 80041a8:	460c      	mov	r4, r1
 80041aa:	4618      	mov	r0, r3
 80041ac:	4621      	mov	r1, r4
 80041ae:	f7fc fd33 	bl	8000c18 <__aeabi_d2f>
 80041b2:	4603      	mov	r3, r0
 80041b4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80041b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80041ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80041be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041c2:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80041c4:	edd3 7a00 	vldr	s15, [r3]
 80041c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041cc:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80041da:	edd7 7a02 	vldr	s15, [r7, #8]
 80041de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041e2:	ee17 0a90 	vmov	r0, s15
 80041e6:	f7fc f9c7 	bl	8000578 <__aeabi_f2d>
 80041ea:	4605      	mov	r5, r0
 80041ec:	460e      	mov	r6, r1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80041f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80041f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041fc:	ee17 0a90 	vmov	r0, s15
 8004200:	f7fc f9ba 	bl	8000578 <__aeabi_f2d>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	ec43 2b11 	vmov	d1, r2, r3
 800420c:	ec46 5b10 	vmov	d0, r5, r6
 8004210:	4620      	mov	r0, r4
 8004212:	f7ff f97f 	bl	8003514 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8004216:	4a07      	ldr	r2, [pc, #28]	; (8004234 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	6013      	str	r3, [r2, #0]
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004224:	f3af 8000 	nop.w
 8004228:	d2f1a9fc 	.word	0xd2f1a9fc
 800422c:	3f50624d 	.word	0x3f50624d
 8004230:	2000029c 	.word	0x2000029c
 8004234:	20000298 	.word	0x20000298

08004238 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	ed87 0a02 	vstr	s0, [r7, #8]
 8004244:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	605a      	str	r2, [r3, #4]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	ed87 0a02 	vstr	s0, [r7, #8]
 800426c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	ed87 0a02 	vstr	s0, [r7, #8]
 8004294:	edc7 0a01 	vstr	s1, [r7, #4]
 8004298:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	615a      	str	r2, [r3, #20]
}
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80042c6:	edc7 0a01 	vstr	s1, [r7, #4]
 80042ca:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	621a      	str	r2, [r3, #32]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff febf 	bl	8004078 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff feef 	bl	80040e8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800432a:	bf00      	nop
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004368 <_ZN12VelocityCtrl4stopEv+0x30>
 8004350:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004368 <_ZN12VelocityCtrl4stopEv+0x30>
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff f8dd 	bl	8003514 <_ZN5Motor8setRatioEdd>

}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	f3af 8000 	nop.w
	...

08004370 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004378:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800437c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d013      	beq.n	80043b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004388:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800438c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004390:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00b      	beq.n	80043b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004398:	e000      	b.n	800439c <ITM_SendChar+0x2c>
    {
      __NOP();
 800439a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800439c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f9      	beq.n	800439a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80043a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80043b0:	687b      	ldr	r3, [r7, #4]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e009      	b.n	80043e4 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	60ba      	str	r2, [r7, #8]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ffc9 	bl	8004370 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	3301      	adds	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	dbf1      	blt.n	80043d0 <_write+0x12>
  }
  return len;
 80043ec:	687b      	ldr	r3, [r7, #4]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	4618      	mov	r0, r3
 8004404:	f001 ff14 	bl	8006230 <cppExit>
}
 8004408:	bf00      	nop
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1e      	ldr	r2, [pc, #120]	; (8004498 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d10e      	bne.n	8004440 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8004422:	f001 fe95 	bl	8006150 <cppFlip1ms>

		tim6_timer++;
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a1b      	ldr	r2, [pc, #108]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800442e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1a      	ldr	r2, [pc, #104]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d902      	bls.n	8004440 <HAL_TIM_PeriodElapsedCallback+0x30>
 800443a:	4b18      	ldr	r3, [pc, #96]	; (800449c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a17      	ldr	r2, [pc, #92]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 800444a:	f001 fec9 	bl	80061e0 <cppFlip100ns>

		tim7_timer++;
 800444e:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3301      	adds	r3, #1
 8004454:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004456:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8004458:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d902      	bls.n	8004468 <HAL_TIM_PeriodElapsedCallback+0x58>
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0f      	ldr	r2, [pc, #60]	; (80044ac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d10e      	bne.n	8004490 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8004472:	f001 febf 	bl	80061f4 <cppFlip10ms>

		tim13_timer++;
 8004476:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3301      	adds	r3, #1
 800447c:	4a0c      	ldr	r2, [pc, #48]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800447e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a06      	ldr	r2, [pc, #24]	; (80044a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d902      	bls.n	8004490 <HAL_TIM_PeriodElapsedCallback+0x80>
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
	}

}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40001000 	.word	0x40001000
 800449c:	20035b8c 	.word	0x20035b8c
 80044a0:	0001869f 	.word	0x0001869f
 80044a4:	40001400 	.word	0x40001400
 80044a8:	20035bd0 	.word	0x20035bd0
 80044ac:	40001c00 	.word	0x40001c00
 80044b0:	20035bd4 	.word	0x20035bd4

080044b4 <init>:

void init()
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80044b8:	2201      	movs	r2, #1
 80044ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044be:	4808      	ldr	r0, [pc, #32]	; (80044e0 <init+0x2c>)
 80044c0:	f004 fb7a 	bl	8008bb8 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80044c4:	4807      	ldr	r0, [pc, #28]	; (80044e4 <init+0x30>)
 80044c6:	f008 fa5a 	bl	800c97e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80044ca:	4807      	ldr	r0, [pc, #28]	; (80044e8 <init+0x34>)
 80044cc:	f008 fa57 	bl	800c97e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80044d0:	4806      	ldr	r0, [pc, #24]	; (80044ec <init+0x38>)
 80044d2:	f008 fa54 	bl	800c97e <HAL_TIM_Base_Start_IT>

	cppInit();
 80044d6:	f001 fd91 	bl	8005ffc <cppInit>

	//path_following_initialize();

}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
 80044e4:	20035cb8 	.word	0x20035cb8
 80044e8:	20035e5c 	.word	0x20035e5c
 80044ec:	20035bd8 	.word	0x20035bd8

080044f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044f4:	f003 f858 	bl	80075a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044f8:	f000 f82a 	bl	8004550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044fc:	f000 fdbc 	bl	8005078 <MX_GPIO_Init>
  MX_DMA_Init();
 8004500:	f000 fd8a 	bl	8005018 <MX_DMA_Init>
  MX_I2C2_Init();
 8004504:	f000 f9e8 	bl	80048d8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8004508:	f000 fa14 	bl	8004934 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800450c:	f000 fa32 	bl	8004974 <MX_SPI2_Init>
  MX_TIM1_Init();
 8004510:	f000 fa66 	bl	80049e0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8004514:	f000 fb70 	bl	8004bf8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004518:	f000 fc3c 	bl	8004d94 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800451c:	f000 fd52 	bl	8004fc4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004520:	f00a fa00 	bl	800e924 <MX_FATFS_Init>
  MX_TIM6_Init();
 8004524:	f000 fbcc 	bl	8004cc0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8004528:	f000 f9a8 	bl	800487c <MX_I2C1_Init>
  MX_TIM3_Init();
 800452c:	f000 fb00 	bl	8004b30 <MX_TIM3_Init>
  MX_TIM10_Init();
 8004530:	f000 fc88 	bl	8004e44 <MX_TIM10_Init>
  MX_TIM11_Init();
 8004534:	f000 fcd4 	bl	8004ee0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8004538:	f000 f898 	bl	800466c <MX_ADC2_Init>
  MX_TIM7_Init();
 800453c:	f000 fbf6 	bl	8004d2c <MX_TIM7_Init>
  MX_TIM13_Init();
 8004540:	f000 fd1c 	bl	8004f7c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8004544:	f7ff ffb6 	bl	80044b4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8004548:	f001 fe82 	bl	8006250 <cppLoop>
 800454c:	e7fc      	b.n	8004548 <main+0x58>
	...

08004550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b0a4      	sub	sp, #144	; 0x90
 8004554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004556:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800455a:	2234      	movs	r2, #52	; 0x34
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f00e fe2d 	bl	80131be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004564:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004574:	f107 030c 	add.w	r3, r7, #12
 8004578:	223c      	movs	r2, #60	; 0x3c
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f00e fe1e 	bl	80131be <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <SystemClock_Config+0x114>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	4a36      	ldr	r2, [pc, #216]	; (8004664 <SystemClock_Config+0x114>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004590:	6413      	str	r3, [r2, #64]	; 0x40
 8004592:	4b34      	ldr	r3, [pc, #208]	; (8004664 <SystemClock_Config+0x114>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	4b31      	ldr	r3, [pc, #196]	; (8004668 <SystemClock_Config+0x118>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a30      	ldr	r2, [pc, #192]	; (8004668 <SystemClock_Config+0x118>)
 80045a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b2e      	ldr	r3, [pc, #184]	; (8004668 <SystemClock_Config+0x118>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045ba:	2301      	movs	r3, #1
 80045bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045c4:	2302      	movs	r3, #2
 80045c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80045cc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80045ce:	2308      	movs	r3, #8
 80045d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80045d2:	23b4      	movs	r3, #180	; 0xb4
 80045d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045d8:	2302      	movs	r3, #2
 80045da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80045de:	2308      	movs	r3, #8
 80045e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80045e4:	2302      	movs	r3, #2
 80045e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045ee:	4618      	mov	r0, r3
 80045f0:	f005 ff1c 	bl	800a42c <HAL_RCC_OscConfig>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80045fa:	f000 fe91 	bl	8005320 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80045fe:	f005 fa97 	bl	8009b30 <HAL_PWREx_EnableOverDrive>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004608:	f000 fe8a 	bl	8005320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800460c:	230f      	movs	r3, #15
 800460e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004610:	2302      	movs	r3, #2
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004614:	2300      	movs	r3, #0
 8004616:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004618:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800461c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800461e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004622:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004624:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004628:	2105      	movs	r1, #5
 800462a:	4618      	mov	r0, r3
 800462c:	f005 fad0 	bl	8009bd0 <HAL_RCC_ClockConfig>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004636:	f000 fe73 	bl	8005320 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800463a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800463e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004640:	2300      	movs	r3, #0
 8004642:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8004644:	2300      	movs	r3, #0
 8004646:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004648:	f107 030c 	add.w	r3, r7, #12
 800464c:	4618      	mov	r0, r3
 800464e:	f005 fcaf 	bl	8009fb0 <HAL_RCCEx_PeriphCLKConfig>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8004658:	f000 fe62 	bl	8005320 <Error_Handler>
  }
}
 800465c:	bf00      	nop
 800465e:	3790      	adds	r7, #144	; 0x90
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40023800 	.word	0x40023800
 8004668:	40007000 	.word	0x40007000

0800466c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004672:	463b      	mov	r3, r7
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800467e:	4b7c      	ldr	r3, [pc, #496]	; (8004870 <MX_ADC2_Init+0x204>)
 8004680:	4a7c      	ldr	r2, [pc, #496]	; (8004874 <MX_ADC2_Init+0x208>)
 8004682:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004684:	4b7a      	ldr	r3, [pc, #488]	; (8004870 <MX_ADC2_Init+0x204>)
 8004686:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800468a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800468c:	4b78      	ldr	r3, [pc, #480]	; (8004870 <MX_ADC2_Init+0x204>)
 800468e:	2200      	movs	r2, #0
 8004690:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8004692:	4b77      	ldr	r3, [pc, #476]	; (8004870 <MX_ADC2_Init+0x204>)
 8004694:	2201      	movs	r2, #1
 8004696:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004698:	4b75      	ldr	r3, [pc, #468]	; (8004870 <MX_ADC2_Init+0x204>)
 800469a:	2201      	movs	r2, #1
 800469c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800469e:	4b74      	ldr	r3, [pc, #464]	; (8004870 <MX_ADC2_Init+0x204>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80046a6:	4b72      	ldr	r3, [pc, #456]	; (8004870 <MX_ADC2_Init+0x204>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80046ac:	4b70      	ldr	r3, [pc, #448]	; (8004870 <MX_ADC2_Init+0x204>)
 80046ae:	4a72      	ldr	r2, [pc, #456]	; (8004878 <MX_ADC2_Init+0x20c>)
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046b2:	4b6f      	ldr	r3, [pc, #444]	; (8004870 <MX_ADC2_Init+0x204>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80046b8:	4b6d      	ldr	r3, [pc, #436]	; (8004870 <MX_ADC2_Init+0x204>)
 80046ba:	220e      	movs	r2, #14
 80046bc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80046be:	4b6c      	ldr	r3, [pc, #432]	; (8004870 <MX_ADC2_Init+0x204>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80046c6:	4b6a      	ldr	r3, [pc, #424]	; (8004870 <MX_ADC2_Init+0x204>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80046cc:	4868      	ldr	r0, [pc, #416]	; (8004870 <MX_ADC2_Init+0x204>)
 80046ce:	f002 ffff 	bl	80076d0 <HAL_ADC_Init>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80046d8:	f000 fe22 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80046dc:	230a      	movs	r3, #10
 80046de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80046e0:	2301      	movs	r3, #1
 80046e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80046e4:	2306      	movs	r3, #6
 80046e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046e8:	463b      	mov	r3, r7
 80046ea:	4619      	mov	r1, r3
 80046ec:	4860      	ldr	r0, [pc, #384]	; (8004870 <MX_ADC2_Init+0x204>)
 80046ee:	f003 f943 	bl	8007978 <HAL_ADC_ConfigChannel>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80046f8:	f000 fe12 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80046fc:	230b      	movs	r3, #11
 80046fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004700:	2302      	movs	r3, #2
 8004702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004704:	463b      	mov	r3, r7
 8004706:	4619      	mov	r1, r3
 8004708:	4859      	ldr	r0, [pc, #356]	; (8004870 <MX_ADC2_Init+0x204>)
 800470a:	f003 f935 	bl	8007978 <HAL_ADC_ConfigChannel>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004714:	f000 fe04 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004718:	230c      	movs	r3, #12
 800471a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800471c:	2303      	movs	r3, #3
 800471e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004720:	463b      	mov	r3, r7
 8004722:	4619      	mov	r1, r3
 8004724:	4852      	ldr	r0, [pc, #328]	; (8004870 <MX_ADC2_Init+0x204>)
 8004726:	f003 f927 	bl	8007978 <HAL_ADC_ConfigChannel>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004730:	f000 fdf6 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004734:	230d      	movs	r3, #13
 8004736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004738:	2304      	movs	r3, #4
 800473a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800473c:	463b      	mov	r3, r7
 800473e:	4619      	mov	r1, r3
 8004740:	484b      	ldr	r0, [pc, #300]	; (8004870 <MX_ADC2_Init+0x204>)
 8004742:	f003 f919 	bl	8007978 <HAL_ADC_ConfigChannel>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800474c:	f000 fde8 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004750:	2300      	movs	r3, #0
 8004752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004754:	2305      	movs	r3, #5
 8004756:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004758:	463b      	mov	r3, r7
 800475a:	4619      	mov	r1, r3
 800475c:	4844      	ldr	r0, [pc, #272]	; (8004870 <MX_ADC2_Init+0x204>)
 800475e:	f003 f90b 	bl	8007978 <HAL_ADC_ConfigChannel>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004768:	f000 fdda 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800476c:	2301      	movs	r3, #1
 800476e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004770:	2306      	movs	r3, #6
 8004772:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004774:	463b      	mov	r3, r7
 8004776:	4619      	mov	r1, r3
 8004778:	483d      	ldr	r0, [pc, #244]	; (8004870 <MX_ADC2_Init+0x204>)
 800477a:	f003 f8fd 	bl	8007978 <HAL_ADC_ConfigChannel>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004784:	f000 fdcc 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004788:	2302      	movs	r3, #2
 800478a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800478c:	2307      	movs	r3, #7
 800478e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004790:	463b      	mov	r3, r7
 8004792:	4619      	mov	r1, r3
 8004794:	4836      	ldr	r0, [pc, #216]	; (8004870 <MX_ADC2_Init+0x204>)
 8004796:	f003 f8ef 	bl	8007978 <HAL_ADC_ConfigChannel>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80047a0:	f000 fdbe 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80047a4:	2303      	movs	r3, #3
 80047a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80047a8:	2308      	movs	r3, #8
 80047aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047ac:	463b      	mov	r3, r7
 80047ae:	4619      	mov	r1, r3
 80047b0:	482f      	ldr	r0, [pc, #188]	; (8004870 <MX_ADC2_Init+0x204>)
 80047b2:	f003 f8e1 	bl	8007978 <HAL_ADC_ConfigChannel>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80047bc:	f000 fdb0 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80047c0:	2304      	movs	r3, #4
 80047c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80047c4:	2309      	movs	r3, #9
 80047c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047c8:	463b      	mov	r3, r7
 80047ca:	4619      	mov	r1, r3
 80047cc:	4828      	ldr	r0, [pc, #160]	; (8004870 <MX_ADC2_Init+0x204>)
 80047ce:	f003 f8d3 	bl	8007978 <HAL_ADC_ConfigChannel>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80047d8:	f000 fda2 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80047dc:	2305      	movs	r3, #5
 80047de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80047e0:	230a      	movs	r3, #10
 80047e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047e4:	463b      	mov	r3, r7
 80047e6:	4619      	mov	r1, r3
 80047e8:	4821      	ldr	r0, [pc, #132]	; (8004870 <MX_ADC2_Init+0x204>)
 80047ea:	f003 f8c5 	bl	8007978 <HAL_ADC_ConfigChannel>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80047f4:	f000 fd94 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80047f8:	2306      	movs	r3, #6
 80047fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80047fc:	230b      	movs	r3, #11
 80047fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004800:	463b      	mov	r3, r7
 8004802:	4619      	mov	r1, r3
 8004804:	481a      	ldr	r0, [pc, #104]	; (8004870 <MX_ADC2_Init+0x204>)
 8004806:	f003 f8b7 	bl	8007978 <HAL_ADC_ConfigChannel>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004810:	f000 fd86 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004814:	2307      	movs	r3, #7
 8004816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004818:	230c      	movs	r3, #12
 800481a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800481c:	463b      	mov	r3, r7
 800481e:	4619      	mov	r1, r3
 8004820:	4813      	ldr	r0, [pc, #76]	; (8004870 <MX_ADC2_Init+0x204>)
 8004822:	f003 f8a9 	bl	8007978 <HAL_ADC_ConfigChannel>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800482c:	f000 fd78 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004830:	2308      	movs	r3, #8
 8004832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8004834:	230d      	movs	r3, #13
 8004836:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004838:	463b      	mov	r3, r7
 800483a:	4619      	mov	r1, r3
 800483c:	480c      	ldr	r0, [pc, #48]	; (8004870 <MX_ADC2_Init+0x204>)
 800483e:	f003 f89b 	bl	8007978 <HAL_ADC_ConfigChannel>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004848:	f000 fd6a 	bl	8005320 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800484c:	2309      	movs	r3, #9
 800484e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004850:	230e      	movs	r3, #14
 8004852:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004854:	463b      	mov	r3, r7
 8004856:	4619      	mov	r1, r3
 8004858:	4805      	ldr	r0, [pc, #20]	; (8004870 <MX_ADC2_Init+0x204>)
 800485a:	f003 f88d 	bl	8007978 <HAL_ADC_ConfigChannel>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8004864:	f000 fd5c 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20035a5c 	.word	0x20035a5c
 8004874:	40012100 	.word	0x40012100
 8004878:	0f000001 	.word	0x0f000001

0800487c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004880:	4b12      	ldr	r3, [pc, #72]	; (80048cc <MX_I2C1_Init+0x50>)
 8004882:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <MX_I2C1_Init+0x54>)
 8004884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <MX_I2C1_Init+0x50>)
 8004888:	4a12      	ldr	r2, [pc, #72]	; (80048d4 <MX_I2C1_Init+0x58>)
 800488a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <MX_I2C1_Init+0x50>)
 800488e:	2200      	movs	r2, #0
 8004890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004892:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <MX_I2C1_Init+0x50>)
 8004894:	2200      	movs	r2, #0
 8004896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <MX_I2C1_Init+0x50>)
 800489a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800489e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <MX_I2C1_Init+0x50>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <MX_I2C1_Init+0x50>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <MX_I2C1_Init+0x50>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <MX_I2C1_Init+0x50>)
 80048b4:	2280      	movs	r2, #128	; 0x80
 80048b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048b8:	4804      	ldr	r0, [pc, #16]	; (80048cc <MX_I2C1_Init+0x50>)
 80048ba:	f004 f9af 	bl	8008c1c <HAL_I2C_Init>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80048c4:	f000 fd2c 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80048c8:	bf00      	nop
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20035aa4 	.word	0x20035aa4
 80048d0:	40005400 	.word	0x40005400
 80048d4:	000186a0 	.word	0x000186a0

080048d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80048dc:	4b12      	ldr	r3, [pc, #72]	; (8004928 <MX_I2C2_Init+0x50>)
 80048de:	4a13      	ldr	r2, [pc, #76]	; (800492c <MX_I2C2_Init+0x54>)
 80048e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80048e2:	4b11      	ldr	r3, [pc, #68]	; (8004928 <MX_I2C2_Init+0x50>)
 80048e4:	4a12      	ldr	r2, [pc, #72]	; (8004930 <MX_I2C2_Init+0x58>)
 80048e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80048e8:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <MX_I2C2_Init+0x50>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80048ee:	4b0e      	ldr	r3, [pc, #56]	; (8004928 <MX_I2C2_Init+0x50>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <MX_I2C2_Init+0x50>)
 80048f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <MX_I2C2_Init+0x50>)
 80048fe:	2200      	movs	r2, #0
 8004900:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <MX_I2C2_Init+0x50>)
 8004904:	2200      	movs	r2, #0
 8004906:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004908:	4b07      	ldr	r3, [pc, #28]	; (8004928 <MX_I2C2_Init+0x50>)
 800490a:	2200      	movs	r2, #0
 800490c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <MX_I2C2_Init+0x50>)
 8004910:	2280      	movs	r2, #128	; 0x80
 8004912:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004914:	4804      	ldr	r0, [pc, #16]	; (8004928 <MX_I2C2_Init+0x50>)
 8004916:	f004 f981 	bl	8008c1c <HAL_I2C_Init>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004920:	f000 fcfe 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004924:	bf00      	nop
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20035b38 	.word	0x20035b38
 800492c:	40005800 	.word	0x40005800
 8004930:	000186a0 	.word	0x000186a0

08004934 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <MX_SDIO_SD_Init+0x38>)
 800493a:	4a0d      	ldr	r2, [pc, #52]	; (8004970 <MX_SDIO_SD_Init+0x3c>)
 800493c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <MX_SDIO_SD_Init+0x38>)
 8004940:	2200      	movs	r2, #0
 8004942:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004944:	4b09      	ldr	r3, [pc, #36]	; (800496c <MX_SDIO_SD_Init+0x38>)
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <MX_SDIO_SD_Init+0x38>)
 800494c:	2200      	movs	r2, #0
 800494e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004950:	4b06      	ldr	r3, [pc, #24]	; (800496c <MX_SDIO_SD_Init+0x38>)
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <MX_SDIO_SD_Init+0x38>)
 8004958:	2200      	movs	r2, #0
 800495a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <MX_SDIO_SD_Init+0x38>)
 800495e:	2200      	movs	r2, #0
 8004960:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	20035d38 	.word	0x20035d38
 8004970:	40012c00 	.word	0x40012c00

08004974 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <MX_SPI2_Init+0x64>)
 800497a:	4a18      	ldr	r2, [pc, #96]	; (80049dc <MX_SPI2_Init+0x68>)
 800497c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800497e:	4b16      	ldr	r3, [pc, #88]	; (80049d8 <MX_SPI2_Init+0x64>)
 8004980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004984:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004986:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <MX_SPI2_Init+0x64>)
 8004988:	2200      	movs	r2, #0
 800498a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800498c:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <MX_SPI2_Init+0x64>)
 800498e:	2200      	movs	r2, #0
 8004990:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <MX_SPI2_Init+0x64>)
 8004994:	2202      	movs	r2, #2
 8004996:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <MX_SPI2_Init+0x64>)
 800499a:	2201      	movs	r2, #1
 800499c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <MX_SPI2_Init+0x64>)
 80049a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80049a6:	4b0c      	ldr	r3, [pc, #48]	; (80049d8 <MX_SPI2_Init+0x64>)
 80049a8:	2228      	movs	r2, #40	; 0x28
 80049aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <MX_SPI2_Init+0x64>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <MX_SPI2_Init+0x64>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b8:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <MX_SPI2_Init+0x64>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <MX_SPI2_Init+0x64>)
 80049c0:	220a      	movs	r2, #10
 80049c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80049c4:	4804      	ldr	r0, [pc, #16]	; (80049d8 <MX_SPI2_Init+0x64>)
 80049c6:	f007 fa5b 	bl	800be80 <HAL_SPI_Init>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80049d0:	f000 fca6 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80049d4:	bf00      	nop
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20035984 	.word	0x20035984
 80049dc:	40003800 	.word	0x40003800

080049e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b09a      	sub	sp, #104	; 0x68
 80049e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80049e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80049ea:	2224      	movs	r2, #36	; 0x24
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f00e fbe5 	bl	80131be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049fe:	f107 0320 	add.w	r3, r7, #32
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	605a      	str	r2, [r3, #4]
 8004a08:	609a      	str	r2, [r3, #8]
 8004a0a:	60da      	str	r2, [r3, #12]
 8004a0c:	611a      	str	r2, [r3, #16]
 8004a0e:	615a      	str	r2, [r3, #20]
 8004a10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a12:	463b      	mov	r3, r7
 8004a14:	2220      	movs	r2, #32
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f00e fbd0 	bl	80131be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a1e:	4b42      	ldr	r3, [pc, #264]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004a20:	4a42      	ldr	r2, [pc, #264]	; (8004b2c <MX_TIM1_Init+0x14c>)
 8004a22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004a24:	4b40      	ldr	r3, [pc, #256]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a2a:	4b3f      	ldr	r3, [pc, #252]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004a30:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a38:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a3e:	4b3a      	ldr	r3, [pc, #232]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a44:	4b38      	ldr	r3, [pc, #224]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a4a:	4837      	ldr	r0, [pc, #220]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004a4c:	f007 ffbb 	bl	800c9c6 <HAL_TIM_PWM_Init>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004a56:	f000 fc63 	bl	8005320 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004a62:	2301      	movs	r3, #1
 8004a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004a66:	2300      	movs	r3, #0
 8004a68:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004a72:	2301      	movs	r3, #1
 8004a74:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004a76:	2300      	movs	r3, #0
 8004a78:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004a7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a82:	4619      	mov	r1, r3
 8004a84:	4828      	ldr	r0, [pc, #160]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004a86:	f008 f807 	bl	800ca98 <HAL_TIM_Encoder_Init>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004a90:	f000 fc46 	bl	8005320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a94:	2300      	movs	r3, #0
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4821      	ldr	r0, [pc, #132]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004aa4:	f008 fd2e 	bl	800d504 <HAL_TIMEx_MasterConfigSynchronization>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004aae:	f000 fc37 	bl	8005320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ab2:	2360      	movs	r3, #96	; 0x60
 8004ab4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004aba:	2300      	movs	r3, #0
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004ace:	f107 0320 	add.w	r3, r7, #32
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4814      	ldr	r0, [pc, #80]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004ad8:	f008 f9b0 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004ae2:	f000 fc1d 	bl	8005320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004afe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b04:	463b      	mov	r3, r7
 8004b06:	4619      	mov	r1, r3
 8004b08:	4807      	ldr	r0, [pc, #28]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004b0a:	f008 fd77 	bl	800d5fc <HAL_TIMEx_ConfigBreakDeadTime>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004b14:	f000 fc04 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b18:	4803      	ldr	r0, [pc, #12]	; (8004b28 <MX_TIM1_Init+0x148>)
 8004b1a:	f000 fff1 	bl	8005b00 <HAL_TIM_MspPostInit>

}
 8004b1e:	bf00      	nop
 8004b20:	3768      	adds	r7, #104	; 0x68
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20035cf8 	.word	0x20035cf8
 8004b2c:	40010000 	.word	0x40010000

08004b30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b36:	f107 0320 	add.w	r3, r7, #32
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	60da      	str	r2, [r3, #12]
 8004b4c:	611a      	str	r2, [r3, #16]
 8004b4e:	615a      	str	r2, [r3, #20]
 8004b50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b52:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <MX_TIM3_Init+0xc0>)
 8004b54:	4a27      	ldr	r2, [pc, #156]	; (8004bf4 <MX_TIM3_Init+0xc4>)
 8004b56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004b58:	4b25      	ldr	r3, [pc, #148]	; (8004bf0 <MX_TIM3_Init+0xc0>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <MX_TIM3_Init+0xc0>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004b64:	4b22      	ldr	r3, [pc, #136]	; (8004bf0 <MX_TIM3_Init+0xc0>)
 8004b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b6c:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <MX_TIM3_Init+0xc0>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b72:	4b1f      	ldr	r3, [pc, #124]	; (8004bf0 <MX_TIM3_Init+0xc0>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004b78:	481d      	ldr	r0, [pc, #116]	; (8004bf0 <MX_TIM3_Init+0xc0>)
 8004b7a:	f007 ff24 	bl	800c9c6 <HAL_TIM_PWM_Init>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004b84:	f000 fbcc 	bl	8005320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b90:	f107 0320 	add.w	r3, r7, #32
 8004b94:	4619      	mov	r1, r3
 8004b96:	4816      	ldr	r0, [pc, #88]	; (8004bf0 <MX_TIM3_Init+0xc0>)
 8004b98:	f008 fcb4 	bl	800d504 <HAL_TIMEx_MasterConfigSynchronization>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004ba2:	f000 fbbd 	bl	8005320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ba6:	2360      	movs	r3, #96	; 0x60
 8004ba8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4619      	mov	r1, r3
 8004bbc:	480c      	ldr	r0, [pc, #48]	; (8004bf0 <MX_TIM3_Init+0xc0>)
 8004bbe:	f008 f93d 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004bc8:	f000 fbaa 	bl	8005320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004bcc:	1d3b      	adds	r3, r7, #4
 8004bce:	2204      	movs	r2, #4
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4807      	ldr	r0, [pc, #28]	; (8004bf0 <MX_TIM3_Init+0xc0>)
 8004bd4:	f008 f932 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004bde:	f000 fb9f 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004be2:	4803      	ldr	r0, [pc, #12]	; (8004bf0 <MX_TIM3_Init+0xc0>)
 8004be4:	f000 ff8c 	bl	8005b00 <HAL_TIM_MspPostInit>

}
 8004be8:	bf00      	nop
 8004bea:	3728      	adds	r7, #40	; 0x28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20035b90 	.word	0x20035b90
 8004bf4:	40000400 	.word	0x40000400

08004bf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bfe:	f107 0320 	add.w	r3, r7, #32
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c08:	1d3b      	adds	r3, r7, #4
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	609a      	str	r2, [r3, #8]
 8004c12:	60da      	str	r2, [r3, #12]
 8004c14:	611a      	str	r2, [r3, #16]
 8004c16:	615a      	str	r2, [r3, #20]
 8004c18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004c1a:	4b27      	ldr	r3, [pc, #156]	; (8004cb8 <MX_TIM4_Init+0xc0>)
 8004c1c:	4a27      	ldr	r2, [pc, #156]	; (8004cbc <MX_TIM4_Init+0xc4>)
 8004c1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004c20:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <MX_TIM4_Init+0xc0>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c26:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <MX_TIM4_Init+0xc0>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8004c2c:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <MX_TIM4_Init+0xc0>)
 8004c2e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004c32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c34:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <MX_TIM4_Init+0xc0>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c3a:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <MX_TIM4_Init+0xc0>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004c40:	481d      	ldr	r0, [pc, #116]	; (8004cb8 <MX_TIM4_Init+0xc0>)
 8004c42:	f007 fec0 	bl	800c9c6 <HAL_TIM_PWM_Init>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004c4c:	f000 fb68 	bl	8005320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c50:	2300      	movs	r3, #0
 8004c52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c58:	f107 0320 	add.w	r3, r7, #32
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4816      	ldr	r0, [pc, #88]	; (8004cb8 <MX_TIM4_Init+0xc0>)
 8004c60:	f008 fc50 	bl	800d504 <HAL_TIMEx_MasterConfigSynchronization>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004c6a:	f000 fb59 	bl	8005320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c6e:	2360      	movs	r3, #96	; 0x60
 8004c70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c7e:	1d3b      	adds	r3, r7, #4
 8004c80:	2208      	movs	r2, #8
 8004c82:	4619      	mov	r1, r3
 8004c84:	480c      	ldr	r0, [pc, #48]	; (8004cb8 <MX_TIM4_Init+0xc0>)
 8004c86:	f008 f8d9 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004c90:	f000 fb46 	bl	8005320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c94:	1d3b      	adds	r3, r7, #4
 8004c96:	220c      	movs	r2, #12
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4807      	ldr	r0, [pc, #28]	; (8004cb8 <MX_TIM4_Init+0xc0>)
 8004c9c:	f008 f8ce 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004ca6:	f000 fb3b 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004caa:	4803      	ldr	r0, [pc, #12]	; (8004cb8 <MX_TIM4_Init+0xc0>)
 8004cac:	f000 ff28 	bl	8005b00 <HAL_TIM_MspPostInit>

}
 8004cb0:	bf00      	nop
 8004cb2:	3728      	adds	r7, #40	; 0x28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	20035a1c 	.word	0x20035a1c
 8004cbc:	40000800 	.word	0x40000800

08004cc0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc6:	463b      	mov	r3, r7
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004cce:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <MX_TIM6_Init+0x64>)
 8004cd0:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <MX_TIM6_Init+0x68>)
 8004cd2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004cd4:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <MX_TIM6_Init+0x64>)
 8004cd6:	2259      	movs	r2, #89	; 0x59
 8004cd8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cda:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <MX_TIM6_Init+0x64>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004ce0:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <MX_TIM6_Init+0x64>)
 8004ce2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ce6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <MX_TIM6_Init+0x64>)
 8004cea:	2280      	movs	r2, #128	; 0x80
 8004cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004cee:	480d      	ldr	r0, [pc, #52]	; (8004d24 <MX_TIM6_Init+0x64>)
 8004cf0:	f007 fe1a 	bl	800c928 <HAL_TIM_Base_Init>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004cfa:	f000 fb11 	bl	8005320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004d06:	463b      	mov	r3, r7
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4806      	ldr	r0, [pc, #24]	; (8004d24 <MX_TIM6_Init+0x64>)
 8004d0c:	f008 fbfa 	bl	800d504 <HAL_TIMEx_MasterConfigSynchronization>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004d16:	f000 fb03 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20035cb8 	.word	0x20035cb8
 8004d28:	40001000 	.word	0x40001000

08004d2c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d32:	463b      	mov	r3, r7
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004d3a:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <MX_TIM7_Init+0x60>)
 8004d3c:	4a14      	ldr	r2, [pc, #80]	; (8004d90 <MX_TIM7_Init+0x64>)
 8004d3e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004d40:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <MX_TIM7_Init+0x60>)
 8004d42:	22b3      	movs	r2, #179	; 0xb3
 8004d44:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d46:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <MX_TIM7_Init+0x60>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8004d4c:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <MX_TIM7_Init+0x60>)
 8004d4e:	2231      	movs	r2, #49	; 0x31
 8004d50:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d52:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <MX_TIM7_Init+0x60>)
 8004d54:	2280      	movs	r2, #128	; 0x80
 8004d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004d58:	480c      	ldr	r0, [pc, #48]	; (8004d8c <MX_TIM7_Init+0x60>)
 8004d5a:	f007 fde5 	bl	800c928 <HAL_TIM_Base_Init>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004d64:	f000 fadc 	bl	8005320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004d70:	463b      	mov	r3, r7
 8004d72:	4619      	mov	r1, r3
 8004d74:	4805      	ldr	r0, [pc, #20]	; (8004d8c <MX_TIM7_Init+0x60>)
 8004d76:	f008 fbc5 	bl	800d504 <HAL_TIMEx_MasterConfigSynchronization>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004d80:	f000 face 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20035e5c 	.word	0x20035e5c
 8004d90:	40001400 	.word	0x40001400

08004d94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08c      	sub	sp, #48	; 0x30
 8004d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d9a:	f107 030c 	add.w	r3, r7, #12
 8004d9e:	2224      	movs	r2, #36	; 0x24
 8004da0:	2100      	movs	r1, #0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f00e fa0b 	bl	80131be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004da8:	1d3b      	adds	r3, r7, #4
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004db0:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <MX_TIM8_Init+0xa8>)
 8004db2:	4a23      	ldr	r2, [pc, #140]	; (8004e40 <MX_TIM8_Init+0xac>)
 8004db4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004db6:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <MX_TIM8_Init+0xa8>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004dbc:	4b1f      	ldr	r3, [pc, #124]	; (8004e3c <MX_TIM8_Init+0xa8>)
 8004dbe:	2210      	movs	r2, #16
 8004dc0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004dc2:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <MX_TIM8_Init+0xa8>)
 8004dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dc8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dca:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <MX_TIM8_Init+0xa8>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004dd0:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <MX_TIM8_Init+0xa8>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dd6:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <MX_TIM8_Init+0xa8>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004df0:	2300      	movs	r3, #0
 8004df2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004df4:	2301      	movs	r3, #1
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004e00:	f107 030c 	add.w	r3, r7, #12
 8004e04:	4619      	mov	r1, r3
 8004e06:	480d      	ldr	r0, [pc, #52]	; (8004e3c <MX_TIM8_Init+0xa8>)
 8004e08:	f007 fe46 	bl	800ca98 <HAL_TIM_Encoder_Init>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004e12:	f000 fa85 	bl	8005320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e16:	2300      	movs	r3, #0
 8004e18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004e1e:	1d3b      	adds	r3, r7, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4806      	ldr	r0, [pc, #24]	; (8004e3c <MX_TIM8_Init+0xa8>)
 8004e24:	f008 fb6e 	bl	800d504 <HAL_TIMEx_MasterConfigSynchronization>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004e2e:	f000 fa77 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004e32:	bf00      	nop
 8004e34:	3730      	adds	r7, #48	; 0x30
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200359dc 	.word	0x200359dc
 8004e40:	40010400 	.word	0x40010400

08004e44 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e4a:	1d3b      	adds	r3, r7, #4
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	609a      	str	r2, [r3, #8]
 8004e54:	60da      	str	r2, [r3, #12]
 8004e56:	611a      	str	r2, [r3, #16]
 8004e58:	615a      	str	r2, [r3, #20]
 8004e5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <MX_TIM10_Init+0x94>)
 8004e5e:	4a1f      	ldr	r2, [pc, #124]	; (8004edc <MX_TIM10_Init+0x98>)
 8004e60:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004e62:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <MX_TIM10_Init+0x94>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e68:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <MX_TIM10_Init+0x94>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004e6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <MX_TIM10_Init+0x94>)
 8004e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e74:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e76:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <MX_TIM10_Init+0x94>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e7c:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <MX_TIM10_Init+0x94>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004e82:	4815      	ldr	r0, [pc, #84]	; (8004ed8 <MX_TIM10_Init+0x94>)
 8004e84:	f007 fd50 	bl	800c928 <HAL_TIM_Base_Init>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004e8e:	f000 fa47 	bl	8005320 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004e92:	4811      	ldr	r0, [pc, #68]	; (8004ed8 <MX_TIM10_Init+0x94>)
 8004e94:	f007 fd97 	bl	800c9c6 <HAL_TIM_PWM_Init>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004e9e:	f000 fa3f 	bl	8005320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ea2:	2360      	movs	r3, #96	; 0x60
 8004ea4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004eb2:	1d3b      	adds	r3, r7, #4
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4807      	ldr	r0, [pc, #28]	; (8004ed8 <MX_TIM10_Init+0x94>)
 8004eba:	f007 ffbf 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004ec4:	f000 fa2c 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004ec8:	4803      	ldr	r0, [pc, #12]	; (8004ed8 <MX_TIM10_Init+0x94>)
 8004eca:	f000 fe19 	bl	8005b00 <HAL_TIM_MspPostInit>

}
 8004ece:	bf00      	nop
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20035af8 	.word	0x20035af8
 8004edc:	40014400 	.word	0x40014400

08004ee0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ee6:	1d3b      	adds	r3, r7, #4
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	611a      	str	r2, [r3, #16]
 8004ef4:	615a      	str	r2, [r3, #20]
 8004ef6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <MX_TIM11_Init+0x94>)
 8004efa:	4a1f      	ldr	r2, [pc, #124]	; (8004f78 <MX_TIM11_Init+0x98>)
 8004efc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <MX_TIM11_Init+0x94>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <MX_TIM11_Init+0x94>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004f0a:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <MX_TIM11_Init+0x94>)
 8004f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f10:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f12:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <MX_TIM11_Init+0x94>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f18:	4b16      	ldr	r3, [pc, #88]	; (8004f74 <MX_TIM11_Init+0x94>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004f1e:	4815      	ldr	r0, [pc, #84]	; (8004f74 <MX_TIM11_Init+0x94>)
 8004f20:	f007 fd02 	bl	800c928 <HAL_TIM_Base_Init>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004f2a:	f000 f9f9 	bl	8005320 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004f2e:	4811      	ldr	r0, [pc, #68]	; (8004f74 <MX_TIM11_Init+0x94>)
 8004f30:	f007 fd49 	bl	800c9c6 <HAL_TIM_PWM_Init>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004f3a:	f000 f9f1 	bl	8005320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f3e:	2360      	movs	r3, #96	; 0x60
 8004f40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f4e:	1d3b      	adds	r3, r7, #4
 8004f50:	2200      	movs	r2, #0
 8004f52:	4619      	mov	r1, r3
 8004f54:	4807      	ldr	r0, [pc, #28]	; (8004f74 <MX_TIM11_Init+0x94>)
 8004f56:	f007 ff71 	bl	800ce3c <HAL_TIM_PWM_ConfigChannel>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004f60:	f000 f9de 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004f64:	4803      	ldr	r0, [pc, #12]	; (8004f74 <MX_TIM11_Init+0x94>)
 8004f66:	f000 fdcb 	bl	8005b00 <HAL_TIM_MspPostInit>

}
 8004f6a:	bf00      	nop
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20035c18 	.word	0x20035c18
 8004f78:	40014800 	.word	0x40014800

08004f7c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004f80:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <MX_TIM13_Init+0x40>)
 8004f82:	4a0f      	ldr	r2, [pc, #60]	; (8004fc0 <MX_TIM13_Init+0x44>)
 8004f84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <MX_TIM13_Init+0x40>)
 8004f88:	2259      	movs	r2, #89	; 0x59
 8004f8a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <MX_TIM13_Init+0x40>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <MX_TIM13_Init+0x40>)
 8004f94:	f242 720f 	movw	r2, #9999	; 0x270f
 8004f98:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f9a:	4b08      	ldr	r3, [pc, #32]	; (8004fbc <MX_TIM13_Init+0x40>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <MX_TIM13_Init+0x40>)
 8004fa2:	2280      	movs	r2, #128	; 0x80
 8004fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004fa6:	4805      	ldr	r0, [pc, #20]	; (8004fbc <MX_TIM13_Init+0x40>)
 8004fa8:	f007 fcbe 	bl	800c928 <HAL_TIM_Base_Init>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004fb2:	f000 f9b5 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004fb6:	bf00      	nop
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20035bd8 	.word	0x20035bd8
 8004fc0:	40001c00 	.word	0x40001c00

08004fc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <MX_USART2_UART_Init+0x4c>)
 8004fca:	4a12      	ldr	r2, [pc, #72]	; (8005014 <MX_USART2_UART_Init+0x50>)
 8004fcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004fce:	4b10      	ldr	r3, [pc, #64]	; (8005010 <MX_USART2_UART_Init+0x4c>)
 8004fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004fd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <MX_USART2_UART_Init+0x4c>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004fdc:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <MX_USART2_UART_Init+0x4c>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <MX_USART2_UART_Init+0x4c>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004fe8:	4b09      	ldr	r3, [pc, #36]	; (8005010 <MX_USART2_UART_Init+0x4c>)
 8004fea:	220c      	movs	r2, #12
 8004fec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fee:	4b08      	ldr	r3, [pc, #32]	; (8005010 <MX_USART2_UART_Init+0x4c>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <MX_USART2_UART_Init+0x4c>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ffa:	4805      	ldr	r0, [pc, #20]	; (8005010 <MX_USART2_UART_Init+0x4c>)
 8004ffc:	f008 fb64 	bl	800d6c8 <HAL_UART_Init>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005006:	f000 f98b 	bl	8005320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20035dbc 	.word	0x20035dbc
 8005014:	40004400 	.word	0x40004400

08005018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800501e:	2300      	movs	r3, #0
 8005020:	607b      	str	r3, [r7, #4]
 8005022:	4b14      	ldr	r3, [pc, #80]	; (8005074 <MX_DMA_Init+0x5c>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	4a13      	ldr	r2, [pc, #76]	; (8005074 <MX_DMA_Init+0x5c>)
 8005028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800502c:	6313      	str	r3, [r2, #48]	; 0x30
 800502e:	4b11      	ldr	r3, [pc, #68]	; (8005074 <MX_DMA_Init+0x5c>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800503a:	2200      	movs	r2, #0
 800503c:	2100      	movs	r1, #0
 800503e:	203a      	movs	r0, #58	; 0x3a
 8005040:	f003 f825 	bl	800808e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005044:	203a      	movs	r0, #58	; 0x3a
 8005046:	f003 f83e 	bl	80080c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800504a:	2200      	movs	r2, #0
 800504c:	2100      	movs	r1, #0
 800504e:	203b      	movs	r0, #59	; 0x3b
 8005050:	f003 f81d 	bl	800808e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005054:	203b      	movs	r0, #59	; 0x3b
 8005056:	f003 f836 	bl	80080c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800505a:	2200      	movs	r2, #0
 800505c:	2100      	movs	r1, #0
 800505e:	2045      	movs	r0, #69	; 0x45
 8005060:	f003 f815 	bl	800808e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005064:	2045      	movs	r0, #69	; 0x45
 8005066:	f003 f82e 	bl	80080c6 <HAL_NVIC_EnableIRQ>

}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800

08005078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08c      	sub	sp, #48	; 0x30
 800507c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507e:	f107 031c 	add.w	r3, r7, #28
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	605a      	str	r2, [r3, #4]
 8005088:	609a      	str	r2, [r3, #8]
 800508a:	60da      	str	r2, [r3, #12]
 800508c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	4b9c      	ldr	r3, [pc, #624]	; (8005304 <MX_GPIO_Init+0x28c>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4a9b      	ldr	r2, [pc, #620]	; (8005304 <MX_GPIO_Init+0x28c>)
 8005098:	f043 0310 	orr.w	r3, r3, #16
 800509c:	6313      	str	r3, [r2, #48]	; 0x30
 800509e:	4b99      	ldr	r3, [pc, #612]	; (8005304 <MX_GPIO_Init+0x28c>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	4b95      	ldr	r3, [pc, #596]	; (8005304 <MX_GPIO_Init+0x28c>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	4a94      	ldr	r2, [pc, #592]	; (8005304 <MX_GPIO_Init+0x28c>)
 80050b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b8:	6313      	str	r3, [r2, #48]	; 0x30
 80050ba:	4b92      	ldr	r3, [pc, #584]	; (8005304 <MX_GPIO_Init+0x28c>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	4b8e      	ldr	r3, [pc, #568]	; (8005304 <MX_GPIO_Init+0x28c>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	4a8d      	ldr	r2, [pc, #564]	; (8005304 <MX_GPIO_Init+0x28c>)
 80050d0:	f043 0304 	orr.w	r3, r3, #4
 80050d4:	6313      	str	r3, [r2, #48]	; 0x30
 80050d6:	4b8b      	ldr	r3, [pc, #556]	; (8005304 <MX_GPIO_Init+0x28c>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	4b87      	ldr	r3, [pc, #540]	; (8005304 <MX_GPIO_Init+0x28c>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	4a86      	ldr	r2, [pc, #536]	; (8005304 <MX_GPIO_Init+0x28c>)
 80050ec:	f043 0301 	orr.w	r3, r3, #1
 80050f0:	6313      	str	r3, [r2, #48]	; 0x30
 80050f2:	4b84      	ldr	r3, [pc, #528]	; (8005304 <MX_GPIO_Init+0x28c>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	4b80      	ldr	r3, [pc, #512]	; (8005304 <MX_GPIO_Init+0x28c>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	4a7f      	ldr	r2, [pc, #508]	; (8005304 <MX_GPIO_Init+0x28c>)
 8005108:	f043 0302 	orr.w	r3, r3, #2
 800510c:	6313      	str	r3, [r2, #48]	; 0x30
 800510e:	4b7d      	ldr	r3, [pc, #500]	; (8005304 <MX_GPIO_Init+0x28c>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	607b      	str	r3, [r7, #4]
 800511e:	4b79      	ldr	r3, [pc, #484]	; (8005304 <MX_GPIO_Init+0x28c>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	4a78      	ldr	r2, [pc, #480]	; (8005304 <MX_GPIO_Init+0x28c>)
 8005124:	f043 0308 	orr.w	r3, r3, #8
 8005128:	6313      	str	r3, [r2, #48]	; 0x30
 800512a:	4b76      	ldr	r3, [pc, #472]	; (8005304 <MX_GPIO_Init+0x28c>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8005136:	2200      	movs	r2, #0
 8005138:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800513c:	4872      	ldr	r0, [pc, #456]	; (8005308 <MX_GPIO_Init+0x290>)
 800513e:	f003 fd3b 	bl	8008bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8005142:	2200      	movs	r2, #0
 8005144:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005148:	4870      	ldr	r0, [pc, #448]	; (800530c <MX_GPIO_Init+0x294>)
 800514a:	f003 fd35 	bl	8008bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800514e:	2200      	movs	r2, #0
 8005150:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005154:	486e      	ldr	r0, [pc, #440]	; (8005310 <MX_GPIO_Init+0x298>)
 8005156:	f003 fd2f 	bl	8008bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800515a:	2200      	movs	r2, #0
 800515c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8005160:	486c      	ldr	r0, [pc, #432]	; (8005314 <MX_GPIO_Init+0x29c>)
 8005162:	f003 fd29 	bl	8008bb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005166:	2304      	movs	r3, #4
 8005168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800516a:	4b6b      	ldr	r3, [pc, #428]	; (8005318 <MX_GPIO_Init+0x2a0>)
 800516c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516e:	2300      	movs	r3, #0
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005172:	f107 031c 	add.w	r3, r7, #28
 8005176:	4619      	mov	r1, r3
 8005178:	4863      	ldr	r0, [pc, #396]	; (8005308 <MX_GPIO_Init+0x290>)
 800517a:	f003 fb5b 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800517e:	230f      	movs	r3, #15
 8005180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005182:	2303      	movs	r3, #3
 8005184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005186:	2300      	movs	r3, #0
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800518a:	f107 031c 	add.w	r3, r7, #28
 800518e:	4619      	mov	r1, r3
 8005190:	4862      	ldr	r0, [pc, #392]	; (800531c <MX_GPIO_Init+0x2a4>)
 8005192:	f003 fb4f 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005196:	23e1      	movs	r3, #225	; 0xe1
 8005198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800519a:	2303      	movs	r3, #3
 800519c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a2:	f107 031c 	add.w	r3, r7, #28
 80051a6:	4619      	mov	r1, r3
 80051a8:	485a      	ldr	r0, [pc, #360]	; (8005314 <MX_GPIO_Init+0x29c>)
 80051aa:	f003 fb43 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80051ae:	2303      	movs	r3, #3
 80051b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051b2:	2303      	movs	r3, #3
 80051b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051ba:	f107 031c 	add.w	r3, r7, #28
 80051be:	4619      	mov	r1, r3
 80051c0:	4852      	ldr	r0, [pc, #328]	; (800530c <MX_GPIO_Init+0x294>)
 80051c2:	f003 fb37 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051c6:	2304      	movs	r3, #4
 80051c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051ca:	2300      	movs	r3, #0
 80051cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051ce:	2301      	movs	r3, #1
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d2:	f107 031c 	add.w	r3, r7, #28
 80051d6:	4619      	mov	r1, r3
 80051d8:	484c      	ldr	r0, [pc, #304]	; (800530c <MX_GPIO_Init+0x294>)
 80051da:	f003 fb2b 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80051de:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80051e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051e4:	2300      	movs	r3, #0
 80051e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051e8:	2301      	movs	r3, #1
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051ec:	f107 031c 	add.w	r3, r7, #28
 80051f0:	4619      	mov	r1, r3
 80051f2:	4845      	ldr	r0, [pc, #276]	; (8005308 <MX_GPIO_Init+0x290>)
 80051f4:	f003 fb1e 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80051f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051fe:	2301      	movs	r3, #1
 8005200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005202:	2300      	movs	r3, #0
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005206:	2300      	movs	r3, #0
 8005208:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800520a:	f107 031c 	add.w	r3, r7, #28
 800520e:	4619      	mov	r1, r3
 8005210:	483d      	ldr	r0, [pc, #244]	; (8005308 <MX_GPIO_Init+0x290>)
 8005212:	f003 fb0f 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800521a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800521c:	2301      	movs	r3, #1
 800521e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005220:	2300      	movs	r3, #0
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005224:	2300      	movs	r3, #0
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005228:	f107 031c 	add.w	r3, r7, #28
 800522c:	4619      	mov	r1, r3
 800522e:	4837      	ldr	r0, [pc, #220]	; (800530c <MX_GPIO_Init+0x294>)
 8005230:	f003 fb00 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800523a:	4b37      	ldr	r3, [pc, #220]	; (8005318 <MX_GPIO_Init+0x2a0>)
 800523c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523e:	2300      	movs	r3, #0
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005242:	f107 031c 	add.w	r3, r7, #28
 8005246:	4619      	mov	r1, r3
 8005248:	4831      	ldr	r0, [pc, #196]	; (8005310 <MX_GPIO_Init+0x298>)
 800524a:	f003 faf3 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800524e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005254:	2301      	movs	r3, #1
 8005256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005258:	2300      	movs	r3, #0
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800525c:	2300      	movs	r3, #0
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005260:	f107 031c 	add.w	r3, r7, #28
 8005264:	4619      	mov	r1, r3
 8005266:	482a      	ldr	r0, [pc, #168]	; (8005310 <MX_GPIO_Init+0x298>)
 8005268:	f003 fae4 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800526c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005272:	2301      	movs	r3, #1
 8005274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005276:	2301      	movs	r3, #1
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527a:	2300      	movs	r3, #0
 800527c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800527e:	f107 031c 	add.w	r3, r7, #28
 8005282:	4619      	mov	r1, r3
 8005284:	4822      	ldr	r0, [pc, #136]	; (8005310 <MX_GPIO_Init+0x298>)
 8005286:	f003 fad5 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800528a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800528e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005290:	2301      	movs	r3, #1
 8005292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005294:	2300      	movs	r3, #0
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005298:	2300      	movs	r3, #0
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800529c:	f107 031c 	add.w	r3, r7, #28
 80052a0:	4619      	mov	r1, r3
 80052a2:	481c      	ldr	r0, [pc, #112]	; (8005314 <MX_GPIO_Init+0x29c>)
 80052a4:	f003 fac6 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80052a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052ae:	2300      	movs	r3, #0
 80052b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052b6:	f107 031c 	add.w	r3, r7, #28
 80052ba:	4619      	mov	r1, r3
 80052bc:	4815      	ldr	r0, [pc, #84]	; (8005314 <MX_GPIO_Init+0x29c>)
 80052be:	f003 fab9 	bl	8008834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80052c2:	239b      	movs	r3, #155	; 0x9b
 80052c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052c6:	2300      	movs	r3, #0
 80052c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052ca:	2301      	movs	r3, #1
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052ce:	f107 031c 	add.w	r3, r7, #28
 80052d2:	4619      	mov	r1, r3
 80052d4:	480e      	ldr	r0, [pc, #56]	; (8005310 <MX_GPIO_Init+0x298>)
 80052d6:	f003 faad 	bl	8008834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80052da:	2200      	movs	r2, #0
 80052dc:	2100      	movs	r1, #0
 80052de:	2008      	movs	r0, #8
 80052e0:	f002 fed5 	bl	800808e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80052e4:	2008      	movs	r0, #8
 80052e6:	f002 feee 	bl	80080c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80052ea:	2200      	movs	r2, #0
 80052ec:	2100      	movs	r1, #0
 80052ee:	2017      	movs	r0, #23
 80052f0:	f002 fecd 	bl	800808e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80052f4:	2017      	movs	r0, #23
 80052f6:	f002 fee6 	bl	80080c6 <HAL_NVIC_EnableIRQ>

}
 80052fa:	bf00      	nop
 80052fc:	3730      	adds	r7, #48	; 0x30
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800
 8005308:	40021000 	.word	0x40021000
 800530c:	40020400 	.word	0x40020400
 8005310:	40020c00 	.word	0x40020c00
 8005314:	40020000 	.word	0x40020000
 8005318:	10310000 	.word	0x10310000
 800531c:	40020800 	.word	0x40020800

08005320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005324:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005326:	e7fe      	b.n	8005326 <Error_Handler+0x6>

08005328 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 800532c:	bf00      	nop
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	607b      	str	r3, [r7, #4]
 8005342:	4b10      	ldr	r3, [pc, #64]	; (8005384 <HAL_MspInit+0x4c>)
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	4a0f      	ldr	r2, [pc, #60]	; (8005384 <HAL_MspInit+0x4c>)
 8005348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800534c:	6453      	str	r3, [r2, #68]	; 0x44
 800534e:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <HAL_MspInit+0x4c>)
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	603b      	str	r3, [r7, #0]
 800535e:	4b09      	ldr	r3, [pc, #36]	; (8005384 <HAL_MspInit+0x4c>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	4a08      	ldr	r2, [pc, #32]	; (8005384 <HAL_MspInit+0x4c>)
 8005364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005368:	6413      	str	r3, [r2, #64]	; 0x40
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <HAL_MspInit+0x4c>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800

08005388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08c      	sub	sp, #48	; 0x30
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005390:	f107 031c 	add.w	r3, r7, #28
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	605a      	str	r2, [r3, #4]
 800539a:	609a      	str	r2, [r3, #8]
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a4a      	ldr	r2, [pc, #296]	; (80054d0 <HAL_ADC_MspInit+0x148>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	f040 808e 	bne.w	80054c8 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	4b48      	ldr	r3, [pc, #288]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 80053b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b4:	4a47      	ldr	r2, [pc, #284]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 80053b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053ba:	6453      	str	r3, [r2, #68]	; 0x44
 80053bc:	4b45      	ldr	r3, [pc, #276]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 80053be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	4b41      	ldr	r3, [pc, #260]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	4a40      	ldr	r2, [pc, #256]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 80053d2:	f043 0304 	orr.w	r3, r3, #4
 80053d6:	6313      	str	r3, [r2, #48]	; 0x30
 80053d8:	4b3e      	ldr	r3, [pc, #248]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	4b3a      	ldr	r3, [pc, #232]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	4a39      	ldr	r2, [pc, #228]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	6313      	str	r3, [r2, #48]	; 0x30
 80053f4:	4b37      	ldr	r3, [pc, #220]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	4b33      	ldr	r3, [pc, #204]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	4a32      	ldr	r2, [pc, #200]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 800540a:	f043 0302 	orr.w	r3, r3, #2
 800540e:	6313      	str	r3, [r2, #48]	; 0x30
 8005410:	4b30      	ldr	r3, [pc, #192]	; (80054d4 <HAL_ADC_MspInit+0x14c>)
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800541c:	230f      	movs	r3, #15
 800541e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005420:	2303      	movs	r3, #3
 8005422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005424:	2300      	movs	r3, #0
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005428:	f107 031c 	add.w	r3, r7, #28
 800542c:	4619      	mov	r1, r3
 800542e:	482a      	ldr	r0, [pc, #168]	; (80054d8 <HAL_ADC_MspInit+0x150>)
 8005430:	f003 fa00 	bl	8008834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005434:	23ff      	movs	r3, #255	; 0xff
 8005436:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005438:	2303      	movs	r3, #3
 800543a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543c:	2300      	movs	r3, #0
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005440:	f107 031c 	add.w	r3, r7, #28
 8005444:	4619      	mov	r1, r3
 8005446:	4825      	ldr	r0, [pc, #148]	; (80054dc <HAL_ADC_MspInit+0x154>)
 8005448:	f003 f9f4 	bl	8008834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800544c:	2303      	movs	r3, #3
 800544e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005450:	2303      	movs	r3, #3
 8005452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005454:	2300      	movs	r3, #0
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005458:	f107 031c 	add.w	r3, r7, #28
 800545c:	4619      	mov	r1, r3
 800545e:	4820      	ldr	r0, [pc, #128]	; (80054e0 <HAL_ADC_MspInit+0x158>)
 8005460:	f003 f9e8 	bl	8008834 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8005464:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 8005466:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <HAL_ADC_MspInit+0x160>)
 8005468:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800546a:	4b1e      	ldr	r3, [pc, #120]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 800546c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005470:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005472:	4b1c      	ldr	r3, [pc, #112]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 8005474:	2200      	movs	r2, #0
 8005476:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005478:	4b1a      	ldr	r3, [pc, #104]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 800547a:	2200      	movs	r2, #0
 800547c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800547e:	4b19      	ldr	r3, [pc, #100]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 8005480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005484:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005486:	4b17      	ldr	r3, [pc, #92]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 8005488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800548c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800548e:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 8005490:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005494:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005496:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 8005498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800549c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800549e:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 80054a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054a4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054a6:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80054ac:	480d      	ldr	r0, [pc, #52]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 80054ae:	f002 fe25 	bl	80080fc <HAL_DMA_Init>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80054b8:	f7ff ff32 	bl	8005320 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 80054c0:	639a      	str	r2, [r3, #56]	; 0x38
 80054c2:	4a08      	ldr	r2, [pc, #32]	; (80054e4 <HAL_ADC_MspInit+0x15c>)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80054c8:	bf00      	nop
 80054ca:	3730      	adds	r7, #48	; 0x30
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40012100 	.word	0x40012100
 80054d4:	40023800 	.word	0x40023800
 80054d8:	40020800 	.word	0x40020800
 80054dc:	40020000 	.word	0x40020000
 80054e0:	40020400 	.word	0x40020400
 80054e4:	20035dfc 	.word	0x20035dfc
 80054e8:	40026440 	.word	0x40026440

080054ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08c      	sub	sp, #48	; 0x30
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f4:	f107 031c 	add.w	r3, r7, #28
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a32      	ldr	r2, [pc, #200]	; (80055d4 <HAL_I2C_MspInit+0xe8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d12c      	bne.n	8005568 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	4b31      	ldr	r3, [pc, #196]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	4a30      	ldr	r2, [pc, #192]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 8005518:	f043 0302 	orr.w	r3, r3, #2
 800551c:	6313      	str	r3, [r2, #48]	; 0x30
 800551e:	4b2e      	ldr	r3, [pc, #184]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800552a:	23c0      	movs	r3, #192	; 0xc0
 800552c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800552e:	2312      	movs	r3, #18
 8005530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005532:	2301      	movs	r3, #1
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005536:	2303      	movs	r3, #3
 8005538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800553a:	2304      	movs	r3, #4
 800553c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800553e:	f107 031c 	add.w	r3, r7, #28
 8005542:	4619      	mov	r1, r3
 8005544:	4825      	ldr	r0, [pc, #148]	; (80055dc <HAL_I2C_MspInit+0xf0>)
 8005546:	f003 f975 	bl	8008834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	4b22      	ldr	r3, [pc, #136]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	4a21      	ldr	r2, [pc, #132]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 8005554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005558:	6413      	str	r3, [r2, #64]	; 0x40
 800555a:	4b1f      	ldr	r3, [pc, #124]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005566:	e031      	b.n	80055cc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <HAL_I2C_MspInit+0xf4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d12c      	bne.n	80055cc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	4b18      	ldr	r3, [pc, #96]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 800557c:	f043 0302 	orr.w	r3, r3, #2
 8005580:	6313      	str	r3, [r2, #48]	; 0x30
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800558e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005594:	2312      	movs	r3, #18
 8005596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005598:	2301      	movs	r3, #1
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800559c:	2303      	movs	r3, #3
 800559e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80055a0:	2304      	movs	r3, #4
 80055a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055a4:	f107 031c 	add.w	r3, r7, #28
 80055a8:	4619      	mov	r1, r3
 80055aa:	480c      	ldr	r0, [pc, #48]	; (80055dc <HAL_I2C_MspInit+0xf0>)
 80055ac:	f003 f942 	bl	8008834 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80055b0:	2300      	movs	r3, #0
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 80055b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b8:	4a07      	ldr	r2, [pc, #28]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 80055ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055be:	6413      	str	r3, [r2, #64]	; 0x40
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <HAL_I2C_MspInit+0xec>)
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
}
 80055cc:	bf00      	nop
 80055ce:	3730      	adds	r7, #48	; 0x30
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	40005400 	.word	0x40005400
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40020400 	.word	0x40020400
 80055e0:	40005800 	.word	0x40005800

080055e4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	; 0x28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ec:	f107 0314 	add.w	r3, r7, #20
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	609a      	str	r2, [r3, #8]
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a69      	ldr	r2, [pc, #420]	; (80057a8 <HAL_SD_MspInit+0x1c4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	f040 80cb 	bne.w	800579e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	4b67      	ldr	r3, [pc, #412]	; (80057ac <HAL_SD_MspInit+0x1c8>)
 800560e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005610:	4a66      	ldr	r2, [pc, #408]	; (80057ac <HAL_SD_MspInit+0x1c8>)
 8005612:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005616:	6453      	str	r3, [r2, #68]	; 0x44
 8005618:	4b64      	ldr	r3, [pc, #400]	; (80057ac <HAL_SD_MspInit+0x1c8>)
 800561a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	4b60      	ldr	r3, [pc, #384]	; (80057ac <HAL_SD_MspInit+0x1c8>)
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	4a5f      	ldr	r2, [pc, #380]	; (80057ac <HAL_SD_MspInit+0x1c8>)
 800562e:	f043 0304 	orr.w	r3, r3, #4
 8005632:	6313      	str	r3, [r2, #48]	; 0x30
 8005634:	4b5d      	ldr	r3, [pc, #372]	; (80057ac <HAL_SD_MspInit+0x1c8>)
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005640:	2300      	movs	r3, #0
 8005642:	60bb      	str	r3, [r7, #8]
 8005644:	4b59      	ldr	r3, [pc, #356]	; (80057ac <HAL_SD_MspInit+0x1c8>)
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	4a58      	ldr	r2, [pc, #352]	; (80057ac <HAL_SD_MspInit+0x1c8>)
 800564a:	f043 0308 	orr.w	r3, r3, #8
 800564e:	6313      	str	r3, [r2, #48]	; 0x30
 8005650:	4b56      	ldr	r3, [pc, #344]	; (80057ac <HAL_SD_MspInit+0x1c8>)
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800565c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005660:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005662:	2302      	movs	r3, #2
 8005664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800566a:	2303      	movs	r3, #3
 800566c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800566e:	230c      	movs	r3, #12
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005672:	f107 0314 	add.w	r3, r7, #20
 8005676:	4619      	mov	r1, r3
 8005678:	484d      	ldr	r0, [pc, #308]	; (80057b0 <HAL_SD_MspInit+0x1cc>)
 800567a:	f003 f8db 	bl	8008834 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800567e:	2304      	movs	r3, #4
 8005680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005682:	2302      	movs	r3, #2
 8005684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005686:	2300      	movs	r3, #0
 8005688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800568a:	2303      	movs	r3, #3
 800568c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800568e:	230c      	movs	r3, #12
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005692:	f107 0314 	add.w	r3, r7, #20
 8005696:	4619      	mov	r1, r3
 8005698:	4846      	ldr	r0, [pc, #280]	; (80057b4 <HAL_SD_MspInit+0x1d0>)
 800569a:	f003 f8cb 	bl	8008834 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800569e:	4b46      	ldr	r3, [pc, #280]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056a0:	4a46      	ldr	r2, [pc, #280]	; (80057bc <HAL_SD_MspInit+0x1d8>)
 80056a2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80056a4:	4b44      	ldr	r3, [pc, #272]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056aa:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056ac:	4b42      	ldr	r3, [pc, #264]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056b2:	4b41      	ldr	r3, [pc, #260]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056b8:	4b3f      	ldr	r3, [pc, #252]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056be:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80056c0:	4b3d      	ldr	r3, [pc, #244]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056c6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80056c8:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056ce:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80056d0:	4b39      	ldr	r3, [pc, #228]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056d2:	2220      	movs	r2, #32
 80056d4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80056d6:	4b38      	ldr	r3, [pc, #224]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80056dc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80056de:	4b36      	ldr	r3, [pc, #216]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056e0:	2204      	movs	r2, #4
 80056e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80056e4:	4b34      	ldr	r3, [pc, #208]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056e6:	2203      	movs	r2, #3
 80056e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80056ea:	4b33      	ldr	r3, [pc, #204]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80056f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80056f2:	4b31      	ldr	r3, [pc, #196]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80056f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80056fa:	482f      	ldr	r0, [pc, #188]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 80056fc:	f002 fcfe 	bl	80080fc <HAL_DMA_Init>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8005706:	f7ff fe0b 	bl	8005320 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2a      	ldr	r2, [pc, #168]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 800570e:	641a      	str	r2, [r3, #64]	; 0x40
 8005710:	4a29      	ldr	r2, [pc, #164]	; (80057b8 <HAL_SD_MspInit+0x1d4>)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005716:	4b2a      	ldr	r3, [pc, #168]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 8005718:	4a2a      	ldr	r2, [pc, #168]	; (80057c4 <HAL_SD_MspInit+0x1e0>)
 800571a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800571c:	4b28      	ldr	r3, [pc, #160]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 800571e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005722:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005724:	4b26      	ldr	r3, [pc, #152]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 8005726:	2240      	movs	r2, #64	; 0x40
 8005728:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800572a:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 800572c:	2200      	movs	r2, #0
 800572e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005730:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 8005732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005736:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 800573a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800573e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005740:	4b1f      	ldr	r3, [pc, #124]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 8005742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005746:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005748:	4b1d      	ldr	r3, [pc, #116]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 800574a:	2220      	movs	r2, #32
 800574c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800574e:	4b1c      	ldr	r3, [pc, #112]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 8005750:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005754:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005756:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 8005758:	2204      	movs	r2, #4
 800575a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800575c:	4b18      	ldr	r3, [pc, #96]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 800575e:	2203      	movs	r2, #3
 8005760:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005762:	4b17      	ldr	r3, [pc, #92]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 8005764:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005768:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 800576c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005772:	4813      	ldr	r0, [pc, #76]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 8005774:	f002 fcc2 	bl	80080fc <HAL_DMA_Init>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800577e:	f7ff fdcf 	bl	8005320 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a0e      	ldr	r2, [pc, #56]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 8005786:	63da      	str	r2, [r3, #60]	; 0x3c
 8005788:	4a0d      	ldr	r2, [pc, #52]	; (80057c0 <HAL_SD_MspInit+0x1dc>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800578e:	2200      	movs	r2, #0
 8005790:	2100      	movs	r1, #0
 8005792:	2031      	movs	r0, #49	; 0x31
 8005794:	f002 fc7b 	bl	800808e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005798:	2031      	movs	r0, #49	; 0x31
 800579a:	f002 fc94 	bl	80080c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800579e:	bf00      	nop
 80057a0:	3728      	adds	r7, #40	; 0x28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40023800 	.word	0x40023800
 80057b0:	40020800 	.word	0x40020800
 80057b4:	40020c00 	.word	0x40020c00
 80057b8:	20035924 	.word	0x20035924
 80057bc:	40026458 	.word	0x40026458
 80057c0:	20035c58 	.word	0x20035c58
 80057c4:	400264a0 	.word	0x400264a0

080057c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08a      	sub	sp, #40	; 0x28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057d0:	f107 0314 	add.w	r3, r7, #20
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	605a      	str	r2, [r3, #4]
 80057da:	609a      	str	r2, [r3, #8]
 80057dc:	60da      	str	r2, [r3, #12]
 80057de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a19      	ldr	r2, [pc, #100]	; (800584c <HAL_SPI_MspInit+0x84>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d12c      	bne.n	8005844 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80057ea:	2300      	movs	r3, #0
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	4b18      	ldr	r3, [pc, #96]	; (8005850 <HAL_SPI_MspInit+0x88>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	4a17      	ldr	r2, [pc, #92]	; (8005850 <HAL_SPI_MspInit+0x88>)
 80057f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057f8:	6413      	str	r3, [r2, #64]	; 0x40
 80057fa:	4b15      	ldr	r3, [pc, #84]	; (8005850 <HAL_SPI_MspInit+0x88>)
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005806:	2300      	movs	r3, #0
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	4b11      	ldr	r3, [pc, #68]	; (8005850 <HAL_SPI_MspInit+0x88>)
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	4a10      	ldr	r2, [pc, #64]	; (8005850 <HAL_SPI_MspInit+0x88>)
 8005810:	f043 0302 	orr.w	r3, r3, #2
 8005814:	6313      	str	r3, [r2, #48]	; 0x30
 8005816:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <HAL_SPI_MspInit+0x88>)
 8005818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005822:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005828:	2302      	movs	r3, #2
 800582a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800582c:	2300      	movs	r3, #0
 800582e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005830:	2303      	movs	r3, #3
 8005832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005834:	2305      	movs	r3, #5
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005838:	f107 0314 	add.w	r3, r7, #20
 800583c:	4619      	mov	r1, r3
 800583e:	4805      	ldr	r0, [pc, #20]	; (8005854 <HAL_SPI_MspInit+0x8c>)
 8005840:	f002 fff8 	bl	8008834 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005844:	bf00      	nop
 8005846:	3728      	adds	r7, #40	; 0x28
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40003800 	.word	0x40003800
 8005850:	40023800 	.word	0x40023800
 8005854:	40020400 	.word	0x40020400

08005858 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08c      	sub	sp, #48	; 0x30
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005860:	f107 031c 	add.w	r3, r7, #28
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	609a      	str	r2, [r3, #8]
 800586c:	60da      	str	r2, [r3, #12]
 800586e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2d      	ldr	r2, [pc, #180]	; (800592c <HAL_TIM_PWM_MspInit+0xd4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d12d      	bne.n	80058d6 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800587a:	2300      	movs	r3, #0
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	4b2c      	ldr	r3, [pc, #176]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	4a2b      	ldr	r2, [pc, #172]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	6453      	str	r3, [r2, #68]	; 0x44
 800588a:	4b29      	ldr	r3, [pc, #164]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	4b25      	ldr	r3, [pc, #148]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	4a24      	ldr	r2, [pc, #144]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 80058a0:	f043 0310 	orr.w	r3, r3, #16
 80058a4:	6313      	str	r3, [r2, #48]	; 0x30
 80058a6:	4b22      	ldr	r3, [pc, #136]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80058b2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80058b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b8:	2302      	movs	r3, #2
 80058ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058bc:	2300      	movs	r3, #0
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80058c4:	2301      	movs	r3, #1
 80058c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058c8:	f107 031c 	add.w	r3, r7, #28
 80058cc:	4619      	mov	r1, r3
 80058ce:	4819      	ldr	r0, [pc, #100]	; (8005934 <HAL_TIM_PWM_MspInit+0xdc>)
 80058d0:	f002 ffb0 	bl	8008834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80058d4:	e026      	b.n	8005924 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a17      	ldr	r2, [pc, #92]	; (8005938 <HAL_TIM_PWM_MspInit+0xe0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10e      	bne.n	80058fe <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058e0:	2300      	movs	r3, #0
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	4b12      	ldr	r3, [pc, #72]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	4a11      	ldr	r2, [pc, #68]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 80058ea:	f043 0302 	orr.w	r3, r3, #2
 80058ee:	6413      	str	r3, [r2, #64]	; 0x40
 80058f0:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	693b      	ldr	r3, [r7, #16]
}
 80058fc:	e012      	b.n	8005924 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a0e      	ldr	r2, [pc, #56]	; (800593c <HAL_TIM_PWM_MspInit+0xe4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d10d      	bne.n	8005924 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005908:	2300      	movs	r3, #0
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	4b08      	ldr	r3, [pc, #32]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	4a07      	ldr	r2, [pc, #28]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 8005912:	f043 0304 	orr.w	r3, r3, #4
 8005916:	6413      	str	r3, [r2, #64]	; 0x40
 8005918:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_TIM_PWM_MspInit+0xd8>)
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
}
 8005924:	bf00      	nop
 8005926:	3730      	adds	r7, #48	; 0x30
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40010000 	.word	0x40010000
 8005930:	40023800 	.word	0x40023800
 8005934:	40021000 	.word	0x40021000
 8005938:	40000400 	.word	0x40000400
 800593c:	40000800 	.word	0x40000800

08005940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a3e      	ldr	r2, [pc, #248]	; (8005a48 <HAL_TIM_Base_MspInit+0x108>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d116      	bne.n	8005980 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	4b3d      	ldr	r3, [pc, #244]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	4a3c      	ldr	r2, [pc, #240]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 800595c:	f043 0310 	orr.w	r3, r3, #16
 8005960:	6413      	str	r3, [r2, #64]	; 0x40
 8005962:	4b3a      	ldr	r3, [pc, #232]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	61fb      	str	r3, [r7, #28]
 800596c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800596e:	2200      	movs	r2, #0
 8005970:	2101      	movs	r1, #1
 8005972:	2036      	movs	r0, #54	; 0x36
 8005974:	f002 fb8b 	bl	800808e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005978:	2036      	movs	r0, #54	; 0x36
 800597a:	f002 fba4 	bl	80080c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800597e:	e05e      	b.n	8005a3e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a32      	ldr	r2, [pc, #200]	; (8005a50 <HAL_TIM_Base_MspInit+0x110>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d116      	bne.n	80059b8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800598a:	2300      	movs	r3, #0
 800598c:	61bb      	str	r3, [r7, #24]
 800598e:	4b2f      	ldr	r3, [pc, #188]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	4a2e      	ldr	r2, [pc, #184]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 8005994:	f043 0320 	orr.w	r3, r3, #32
 8005998:	6413      	str	r3, [r2, #64]	; 0x40
 800599a:	4b2c      	ldr	r3, [pc, #176]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80059a6:	2200      	movs	r2, #0
 80059a8:	2100      	movs	r1, #0
 80059aa:	2037      	movs	r0, #55	; 0x37
 80059ac:	f002 fb6f 	bl	800808e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80059b0:	2037      	movs	r0, #55	; 0x37
 80059b2:	f002 fb88 	bl	80080c6 <HAL_NVIC_EnableIRQ>
}
 80059b6:	e042      	b.n	8005a3e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a25      	ldr	r2, [pc, #148]	; (8005a54 <HAL_TIM_Base_MspInit+0x114>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10e      	bne.n	80059e0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	4b21      	ldr	r3, [pc, #132]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	4a20      	ldr	r2, [pc, #128]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 80059cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d0:	6453      	str	r3, [r2, #68]	; 0x44
 80059d2:	4b1e      	ldr	r3, [pc, #120]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 80059d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697b      	ldr	r3, [r7, #20]
}
 80059de:	e02e      	b.n	8005a3e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <HAL_TIM_Base_MspInit+0x118>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d10e      	bne.n	8005a08 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80059ea:	2300      	movs	r3, #0
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	4b17      	ldr	r3, [pc, #92]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	4a16      	ldr	r2, [pc, #88]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 80059f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059f8:	6453      	str	r3, [r2, #68]	; 0x44
 80059fa:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 80059fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	693b      	ldr	r3, [r7, #16]
}
 8005a06:	e01a      	b.n	8005a3e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <HAL_TIM_Base_MspInit+0x11c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d115      	bne.n	8005a3e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a20:	6413      	str	r3, [r2, #64]	; 0x40
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <HAL_TIM_Base_MspInit+0x10c>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2100      	movs	r1, #0
 8005a32:	202c      	movs	r0, #44	; 0x2c
 8005a34:	f002 fb2b 	bl	800808e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005a38:	202c      	movs	r0, #44	; 0x2c
 8005a3a:	f002 fb44 	bl	80080c6 <HAL_NVIC_EnableIRQ>
}
 8005a3e:	bf00      	nop
 8005a40:	3720      	adds	r7, #32
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40001000 	.word	0x40001000
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	40001400 	.word	0x40001400
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800
 8005a5c:	40001c00 	.word	0x40001c00

08005a60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	609a      	str	r2, [r3, #8]
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <HAL_TIM_Encoder_MspInit+0x94>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d133      	bne.n	8005aea <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005a82:	2300      	movs	r3, #0
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	4b1c      	ldr	r3, [pc, #112]	; (8005af8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	4a1b      	ldr	r2, [pc, #108]	; (8005af8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005a8c:	f043 0302 	orr.w	r3, r3, #2
 8005a90:	6453      	str	r3, [r2, #68]	; 0x44
 8005a92:	4b19      	ldr	r3, [pc, #100]	; (8005af8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	4a14      	ldr	r2, [pc, #80]	; (8005af8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005aa8:	f043 0304 	orr.w	r3, r3, #4
 8005aac:	6313      	str	r3, [r2, #48]	; 0x30
 8005aae:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <HAL_TIM_Encoder_MspInit+0x98>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005aba:	23c0      	movs	r3, #192	; 0xc0
 8005abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005abe:	2302      	movs	r3, #2
 8005ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005aca:	2303      	movs	r3, #3
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ace:	f107 0314 	add.w	r3, r7, #20
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	4809      	ldr	r0, [pc, #36]	; (8005afc <HAL_TIM_Encoder_MspInit+0x9c>)
 8005ad6:	f002 fead 	bl	8008834 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005ada:	2200      	movs	r2, #0
 8005adc:	2100      	movs	r1, #0
 8005ade:	202c      	movs	r0, #44	; 0x2c
 8005ae0:	f002 fad5 	bl	800808e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005ae4:	202c      	movs	r0, #44	; 0x2c
 8005ae6:	f002 faee 	bl	80080c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005aea:	bf00      	nop
 8005aec:	3728      	adds	r7, #40	; 0x28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40010400 	.word	0x40010400
 8005af8:	40023800 	.word	0x40023800
 8005afc:	40020800 	.word	0x40020800

08005b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08c      	sub	sp, #48	; 0x30
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b08:	f107 031c 	add.w	r3, r7, #28
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	605a      	str	r2, [r3, #4]
 8005b12:	609a      	str	r2, [r3, #8]
 8005b14:	60da      	str	r2, [r3, #12]
 8005b16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a5c      	ldr	r2, [pc, #368]	; (8005c90 <HAL_TIM_MspPostInit+0x190>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d11f      	bne.n	8005b62 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005b22:	2300      	movs	r3, #0
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	4b5b      	ldr	r3, [pc, #364]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	4a5a      	ldr	r2, [pc, #360]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005b2c:	f043 0310 	orr.w	r3, r3, #16
 8005b30:	6313      	str	r3, [r2, #48]	; 0x30
 8005b32:	4b58      	ldr	r3, [pc, #352]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b44:	2302      	movs	r3, #2
 8005b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005b50:	2301      	movs	r3, #1
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b54:	f107 031c 	add.w	r3, r7, #28
 8005b58:	4619      	mov	r1, r3
 8005b5a:	484f      	ldr	r0, [pc, #316]	; (8005c98 <HAL_TIM_MspPostInit+0x198>)
 8005b5c:	f002 fe6a 	bl	8008834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005b60:	e091      	b.n	8005c86 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a4d      	ldr	r2, [pc, #308]	; (8005c9c <HAL_TIM_MspPostInit+0x19c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d11e      	bne.n	8005baa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	4b48      	ldr	r3, [pc, #288]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b74:	4a47      	ldr	r2, [pc, #284]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005b76:	f043 0302 	orr.w	r3, r3, #2
 8005b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b7c:	4b45      	ldr	r3, [pc, #276]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005b88:	2330      	movs	r3, #48	; 0x30
 8005b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b90:	2300      	movs	r3, #0
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b94:	2300      	movs	r3, #0
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b9c:	f107 031c 	add.w	r3, r7, #28
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	483f      	ldr	r0, [pc, #252]	; (8005ca0 <HAL_TIM_MspPostInit+0x1a0>)
 8005ba4:	f002 fe46 	bl	8008834 <HAL_GPIO_Init>
}
 8005ba8:	e06d      	b.n	8005c86 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a3d      	ldr	r2, [pc, #244]	; (8005ca4 <HAL_TIM_MspPostInit+0x1a4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d11f      	bne.n	8005bf4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	4b36      	ldr	r3, [pc, #216]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	4a35      	ldr	r2, [pc, #212]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005bbe:	f043 0308 	orr.w	r3, r3, #8
 8005bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005bc4:	4b33      	ldr	r3, [pc, #204]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	613b      	str	r3, [r7, #16]
 8005bce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005bd0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bde:	2300      	movs	r3, #0
 8005be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005be2:	2302      	movs	r3, #2
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005be6:	f107 031c 	add.w	r3, r7, #28
 8005bea:	4619      	mov	r1, r3
 8005bec:	482e      	ldr	r0, [pc, #184]	; (8005ca8 <HAL_TIM_MspPostInit+0x1a8>)
 8005bee:	f002 fe21 	bl	8008834 <HAL_GPIO_Init>
}
 8005bf2:	e048      	b.n	8005c86 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <HAL_TIM_MspPostInit+0x1ac>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d11f      	bne.n	8005c3e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	4b24      	ldr	r3, [pc, #144]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c06:	4a23      	ldr	r2, [pc, #140]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005c08:	f043 0302 	orr.w	r3, r3, #2
 8005c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c0e:	4b21      	ldr	r3, [pc, #132]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c20:	2302      	movs	r3, #2
 8005c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c30:	f107 031c 	add.w	r3, r7, #28
 8005c34:	4619      	mov	r1, r3
 8005c36:	481a      	ldr	r0, [pc, #104]	; (8005ca0 <HAL_TIM_MspPostInit+0x1a0>)
 8005c38:	f002 fdfc 	bl	8008834 <HAL_GPIO_Init>
}
 8005c3c:	e023      	b.n	8005c86 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <HAL_TIM_MspPostInit+0x1b0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d11e      	bne.n	8005c86 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60bb      	str	r3, [r7, #8]
 8005c4c:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	4a10      	ldr	r2, [pc, #64]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005c52:	f043 0302 	orr.w	r3, r3, #2
 8005c56:	6313      	str	r3, [r2, #48]	; 0x30
 8005c58:	4b0e      	ldr	r3, [pc, #56]	; (8005c94 <HAL_TIM_MspPostInit+0x194>)
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c72:	2300      	movs	r3, #0
 8005c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005c76:	2303      	movs	r3, #3
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c7a:	f107 031c 	add.w	r3, r7, #28
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4807      	ldr	r0, [pc, #28]	; (8005ca0 <HAL_TIM_MspPostInit+0x1a0>)
 8005c82:	f002 fdd7 	bl	8008834 <HAL_GPIO_Init>
}
 8005c86:	bf00      	nop
 8005c88:	3730      	adds	r7, #48	; 0x30
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40010000 	.word	0x40010000
 8005c94:	40023800 	.word	0x40023800
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40000400 	.word	0x40000400
 8005ca0:	40020400 	.word	0x40020400
 8005ca4:	40000800 	.word	0x40000800
 8005ca8:	40020c00 	.word	0x40020c00
 8005cac:	40014400 	.word	0x40014400
 8005cb0:	40014800 	.word	0x40014800

08005cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08a      	sub	sp, #40	; 0x28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cbc:	f107 0314 	add.w	r3, r7, #20
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	609a      	str	r2, [r3, #8]
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a19      	ldr	r2, [pc, #100]	; (8005d38 <HAL_UART_MspInit+0x84>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d12b      	bne.n	8005d2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <HAL_UART_MspInit+0x88>)
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	4a17      	ldr	r2, [pc, #92]	; (8005d3c <HAL_UART_MspInit+0x88>)
 8005ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ce6:	4b15      	ldr	r3, [pc, #84]	; (8005d3c <HAL_UART_MspInit+0x88>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <HAL_UART_MspInit+0x88>)
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	4a10      	ldr	r2, [pc, #64]	; (8005d3c <HAL_UART_MspInit+0x88>)
 8005cfc:	f043 0308 	orr.w	r3, r3, #8
 8005d00:	6313      	str	r3, [r2, #48]	; 0x30
 8005d02:	4b0e      	ldr	r3, [pc, #56]	; (8005d3c <HAL_UART_MspInit+0x88>)
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005d0e:	2360      	movs	r3, #96	; 0x60
 8005d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d12:	2302      	movs	r3, #2
 8005d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d1e:	2307      	movs	r3, #7
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d22:	f107 0314 	add.w	r3, r7, #20
 8005d26:	4619      	mov	r1, r3
 8005d28:	4805      	ldr	r0, [pc, #20]	; (8005d40 <HAL_UART_MspInit+0x8c>)
 8005d2a:	f002 fd83 	bl	8008834 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005d2e:	bf00      	nop
 8005d30:	3728      	adds	r7, #40	; 0x28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40004400 	.word	0x40004400
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	40020c00 	.word	0x40020c00

08005d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d48:	e7fe      	b.n	8005d48 <NMI_Handler+0x4>

08005d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d4e:	e7fe      	b.n	8005d4e <HardFault_Handler+0x4>

08005d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d54:	e7fe      	b.n	8005d54 <MemManage_Handler+0x4>

08005d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d56:	b480      	push	{r7}
 8005d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d5a:	e7fe      	b.n	8005d5a <BusFault_Handler+0x4>

08005d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d60:	e7fe      	b.n	8005d60 <UsageFault_Handler+0x4>

08005d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d62:	b480      	push	{r7}
 8005d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d66:	bf00      	nop
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d74:	bf00      	nop
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d82:	bf00      	nop
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d90:	f001 fc5c 	bl	800764c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d94:	bf00      	nop
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005d9c:	2004      	movs	r0, #4
 8005d9e:	f002 ff25 	bl	8008bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005da2:	bf00      	nop
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005daa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005dae:	f002 ff1d 	bl	8008bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005db2:	bf00      	nop
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005dbc:	4803      	ldr	r0, [pc, #12]	; (8005dcc <TIM8_UP_TIM13_IRQHandler+0x14>)
 8005dbe:	f006 ff34 	bl	800cc2a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005dc2:	4803      	ldr	r0, [pc, #12]	; (8005dd0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005dc4:	f006 ff31 	bl	800cc2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005dc8:	bf00      	nop
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	200359dc 	.word	0x200359dc
 8005dd0:	20035bd8 	.word	0x20035bd8

08005dd4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005dd8:	4802      	ldr	r0, [pc, #8]	; (8005de4 <SDIO_IRQHandler+0x10>)
 8005dda:	f004 ffcd 	bl	800ad78 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005dde:	bf00      	nop
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20035d38 	.word	0x20035d38

08005de8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005dec:	4802      	ldr	r0, [pc, #8]	; (8005df8 <TIM6_DAC_IRQHandler+0x10>)
 8005dee:	f006 ff1c 	bl	800cc2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005df2:	bf00      	nop
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20035cb8 	.word	0x20035cb8

08005dfc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005e00:	4802      	ldr	r0, [pc, #8]	; (8005e0c <TIM7_IRQHandler+0x10>)
 8005e02:	f006 ff12 	bl	800cc2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005e06:	bf00      	nop
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20035e5c 	.word	0x20035e5c

08005e10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005e14:	4802      	ldr	r0, [pc, #8]	; (8005e20 <DMA2_Stream2_IRQHandler+0x10>)
 8005e16:	f002 fa99 	bl	800834c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005e1a:	bf00      	nop
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20035dfc 	.word	0x20035dfc

08005e24 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005e28:	4802      	ldr	r0, [pc, #8]	; (8005e34 <DMA2_Stream3_IRQHandler+0x10>)
 8005e2a:	f002 fa8f 	bl	800834c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005e2e:	bf00      	nop
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20035924 	.word	0x20035924

08005e38 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005e3c:	4802      	ldr	r0, [pc, #8]	; (8005e48 <DMA2_Stream6_IRQHandler+0x10>)
 8005e3e:	f002 fa85 	bl	800834c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005e42:	bf00      	nop
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20035c58 	.word	0x20035c58

08005e4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	e00a      	b.n	8005e74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005e5e:	f3af 8000 	nop.w
 8005e62:	4601      	mov	r1, r0
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	60ba      	str	r2, [r7, #8]
 8005e6a:	b2ca      	uxtb	r2, r1
 8005e6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	3301      	adds	r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	dbf0      	blt.n	8005e5e <_read+0x12>
	}

return len;
 8005e7c:	687b      	ldr	r3, [r7, #4]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
	return -1;
 8005e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005eae:	605a      	str	r2, [r3, #4]
	return 0;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <_isatty>:

int _isatty(int file)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
	return 1;
 8005ec6:	2301      	movs	r3, #1
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
	return 0;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ef8:	4a14      	ldr	r2, [pc, #80]	; (8005f4c <_sbrk+0x5c>)
 8005efa:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <_sbrk+0x60>)
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f04:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <_sbrk+0x64>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f0c:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <_sbrk+0x64>)
 8005f0e:	4a12      	ldr	r2, [pc, #72]	; (8005f58 <_sbrk+0x68>)
 8005f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f12:	4b10      	ldr	r3, [pc, #64]	; (8005f54 <_sbrk+0x64>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4413      	add	r3, r2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d207      	bcs.n	8005f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f20:	f00d f918 	bl	8013154 <__errno>
 8005f24:	4602      	mov	r2, r0
 8005f26:	230c      	movs	r3, #12
 8005f28:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f2e:	e009      	b.n	8005f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f30:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <_sbrk+0x64>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f36:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <_sbrk+0x64>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	4a05      	ldr	r2, [pc, #20]	; (8005f54 <_sbrk+0x64>)
 8005f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f42:	68fb      	ldr	r3, [r7, #12]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20050000 	.word	0x20050000
 8005f50:	00000800 	.word	0x00000800
 8005f54:	200002a0 	.word	0x200002a0
 8005f58:	20037fb0 	.word	0x20037fb0

08005f5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f60:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <SystemInit+0x28>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	4a07      	ldr	r2, [pc, #28]	; (8005f84 <SystemInit+0x28>)
 8005f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005f70:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <SystemInit+0x28>)
 8005f72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f76:	609a      	str	r2, [r3, #8]
#endif
}
 8005f78:	bf00      	nop
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	e000ed00 	.word	0xe000ed00

08005f88 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
	lcd_clear();
 8005f8c:	f7fb f888 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005f90:	2100      	movs	r1, #0
 8005f92:	2000      	movs	r0, #0
 8005f94:	f7fb f894 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8005f98:	4814      	ldr	r0, [pc, #80]	; (8005fec <batteryLowMode+0x64>)
 8005f9a:	f7fb f8bb 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f7fb f88d 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 8005fa6:	4812      	ldr	r0, [pc, #72]	; (8005ff0 <batteryLowMode+0x68>)
 8005fa8:	f7fb f8b4 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8005fac:	2152      	movs	r1, #82	; 0x52
 8005fae:	4811      	ldr	r0, [pc, #68]	; (8005ff4 <batteryLowMode+0x6c>)
 8005fb0:	f7fb ff9c 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005fb4:	2064      	movs	r0, #100	; 0x64
 8005fb6:	f001 fb69 	bl	800768c <HAL_Delay>
		led.fullColor('Y');
 8005fba:	2159      	movs	r1, #89	; 0x59
 8005fbc:	480d      	ldr	r0, [pc, #52]	; (8005ff4 <batteryLowMode+0x6c>)
 8005fbe:	f7fb ff95 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005fc2:	2064      	movs	r0, #100	; 0x64
 8005fc4:	f001 fb62 	bl	800768c <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8005fc8:	480b      	ldr	r0, [pc, #44]	; (8005ff8 <batteryLowMode+0x70>)
 8005fca:	f7fb ff2b 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0e6      	beq.n	8005fac <batteryLowMode+0x24>
			HAL_Delay(500);
 8005fde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fe2:	f001 fb53 	bl	800768c <HAL_Delay>
			break;
 8005fe6:	bf00      	nop
		}
	}
}
 8005fe8:	bf00      	nop
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	08018394 	.word	0x08018394
 8005ff0:	0801839c 	.word	0x0801839c
 8005ff4:	200005b0 	.word	0x200005b0
 8005ff8:	200005a4 	.word	0x200005a4

08005ffc <cppInit>:

void cppInit(void)
{
 8005ffc:	b598      	push	{r3, r4, r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
	lcd_init();
 8006000:	f7fb f80a 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8006004:	483f      	ldr	r0, [pc, #252]	; (8006104 <cppInit+0x108>)
 8006006:	f7fd fd3f 	bl	8003a88 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800600a:	2064      	movs	r0, #100	; 0x64
 800600c:	f001 fb3e 	bl	800768c <HAL_Delay>
	power_sensor.updateValues();
 8006010:	483c      	ldr	r0, [pc, #240]	; (8006104 <cppInit+0x108>)
 8006012:	f7fd fd49 	bl	8003aa8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8006016:	f7fb f843 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800601a:	2100      	movs	r1, #0
 800601c:	2000      	movs	r0, #0
 800601e:	f7fb f84f 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8006022:	4839      	ldr	r0, [pc, #228]	; (8006108 <cppInit+0x10c>)
 8006024:	f7fb f876 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8006028:	2101      	movs	r1, #1
 800602a:	2000      	movs	r0, #0
 800602c:	f7fb f848 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8006030:	4834      	ldr	r0, [pc, #208]	; (8006104 <cppInit+0x108>)
 8006032:	f7fd fd63 	bl	8003afc <_ZN11PowerSensor17getButteryVoltageEv>
 8006036:	ee10 3a10 	vmov	r3, s0
 800603a:	4618      	mov	r0, r3
 800603c:	f7fa fa9c 	bl	8000578 <__aeabi_f2d>
 8006040:	4603      	mov	r3, r0
 8006042:	460c      	mov	r4, r1
 8006044:	461a      	mov	r2, r3
 8006046:	4623      	mov	r3, r4
 8006048:	4830      	ldr	r0, [pc, #192]	; (800610c <cppInit+0x110>)
 800604a:	f7fb f863 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 800604e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006052:	f001 fb1b 	bl	800768c <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8006056:	482b      	ldr	r0, [pc, #172]	; (8006104 <cppInit+0x108>)
 8006058:	f7fd fd62 	bl	8003b20 <_ZN11PowerSensor12butteryCheckEv>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <cppInit+0x6a>
 8006062:	f7ff ff91 	bl	8005f88 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8006066:	482a      	ldr	r0, [pc, #168]	; (8006110 <cppInit+0x114>)
 8006068:	f7fc ffdc 	bl	8003024 <_ZN6Logger10sdCardInitEv>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <cppInit+0x86>
		led.fullColor('G');
 8006072:	2147      	movs	r1, #71	; 0x47
 8006074:	4827      	ldr	r0, [pc, #156]	; (8006114 <cppInit+0x118>)
 8006076:	f7fb ff39 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800607a:	2064      	movs	r0, #100	; 0x64
 800607c:	f001 fb06 	bl	800768c <HAL_Delay>
 8006080:	e006      	b.n	8006090 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8006082:	2152      	movs	r1, #82	; 0x52
 8006084:	4823      	ldr	r0, [pc, #140]	; (8006114 <cppInit+0x118>)
 8006086:	f7fb ff31 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800608a:	2064      	movs	r0, #100	; 0x64
 800608c:	f001 fafe 	bl	800768c <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006090:	4821      	ldr	r0, [pc, #132]	; (8006118 <cppInit+0x11c>)
 8006092:	f7fc f887 	bl	80021a4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8006096:	4821      	ldr	r0, [pc, #132]	; (800611c <cppInit+0x120>)
 8006098:	f7fd f9da 	bl	8003450 <_ZN5Motor4initEv>
	encoder.init();
 800609c:	4820      	ldr	r0, [pc, #128]	; (8006120 <cppInit+0x124>)
 800609e:	f7fb f881 	bl	80011a4 <_ZN7Encoder4initEv>
	imu.init();
 80060a2:	4820      	ldr	r0, [pc, #128]	; (8006124 <cppInit+0x128>)
 80060a4:	f7fb fcda 	bl	8001a5c <_ZN3IMU4initEv>
	line_trace.init();
 80060a8:	481f      	ldr	r0, [pc, #124]	; (8006128 <cppInit+0x12c>)
 80060aa:	f7fc fd95 	bl	8002bd8 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80060ae:	481a      	ldr	r0, [pc, #104]	; (8006118 <cppInit+0x11c>)
 80060b0:	f7fc f9b8 	bl	8002424 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80060b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060b8:	f001 fae8 	bl	800768c <HAL_Delay>

	led.fullColor('M');
 80060bc:	214d      	movs	r1, #77	; 0x4d
 80060be:	4815      	ldr	r0, [pc, #84]	; (8006114 <cppInit+0x118>)
 80060c0:	f7fb ff14 	bl	8001eec <_ZN3LED9fullColorEc>
	imu.calibration();
 80060c4:	4817      	ldr	r0, [pc, #92]	; (8006124 <cppInit+0x128>)
 80060c6:	f7fb fd99 	bl	8001bfc <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80060ca:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800612c <cppInit+0x130>
 80060ce:	eddf 0a18 	vldr	s1, [pc, #96]	; 8006130 <cppInit+0x134>
 80060d2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8006134 <cppInit+0x138>
 80060d6:	4818      	ldr	r0, [pc, #96]	; (8006138 <cppInit+0x13c>)
 80060d8:	f7fe f8d6 	bl	8004288 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 80060dc:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800613c <cppInit+0x140>
 80060e0:	eddf 0a17 	vldr	s1, [pc, #92]	; 8006140 <cppInit+0x144>
 80060e4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8006144 <cppInit+0x148>
 80060e8:	4813      	ldr	r0, [pc, #76]	; (8006138 <cppInit+0x13c>)
 80060ea:	f7fe f8e6 	bl	80042ba <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 80060ee:	480c      	ldr	r0, [pc, #48]	; (8006120 <cppInit+0x124>)
 80060f0:	f7fb f9a2 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 80060f4:	4814      	ldr	r0, [pc, #80]	; (8006148 <cppInit+0x14c>)
 80060f6:	f7fd fb95 	bl	8003824 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80060fa:	4814      	ldr	r0, [pc, #80]	; (800614c <cppInit+0x150>)
 80060fc:	f7fd fc2c 	bl	8003958 <_ZN13PathFollowing4initEv>

}
 8006100:	bf00      	nop
 8006102:	bd98      	pop	{r3, r4, r7, pc}
 8006104:	200005b4 	.word	0x200005b4
 8006108:	080183a0 	.word	0x080183a0
 800610c:	080183a8 	.word	0x080183a8
 8006110:	200005d4 	.word	0x200005d4
 8006114:	200005b0 	.word	0x200005b0
 8006118:	200002a4 	.word	0x200002a4
 800611c:	200005ac 	.word	0x200005ac
 8006120:	20015d9c 	.word	0x20015d9c
 8006124:	200005c0 	.word	0x200005c0
 8006128:	20015e28 	.word	0x20015e28
 800612c:	3cceca68 	.word	0x3cceca68
 8006130:	4180f06f 	.word	0x4180f06f
 8006134:	3fea2d0e 	.word	0x3fea2d0e
 8006138:	20015db8 	.word	0x20015db8
 800613c:	3ab7dacd 	.word	0x3ab7dacd
 8006140:	3f5e3fbc 	.word	0x3f5e3fbc
 8006144:	3d8eefa2 	.word	0x3d8eefa2
 8006148:	20015df8 	.word	0x20015df8
 800614c:	2001be70 	.word	0x2001be70

08006150 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8006154:	4819      	ldr	r0, [pc, #100]	; (80061bc <cppFlip1ms+0x6c>)
 8006156:	f7fc f883 	bl	8002260 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800615a:	4819      	ldr	r0, [pc, #100]	; (80061c0 <cppFlip1ms+0x70>)
 800615c:	f7fb fcac 	bl	8001ab8 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8006160:	4818      	ldr	r0, [pc, #96]	; (80061c4 <cppFlip1ms+0x74>)
 8006162:	f7fb f841 	bl	80011e8 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8006166:	4818      	ldr	r0, [pc, #96]	; (80061c8 <cppFlip1ms+0x78>)
 8006168:	f7fc fdce 	bl	8002d08 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800616c:	4817      	ldr	r0, [pc, #92]	; (80061cc <cppFlip1ms+0x7c>)
 800616e:	f7fe f8bd 	bl	80042ec <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8006172:	4817      	ldr	r0, [pc, #92]	; (80061d0 <cppFlip1ms+0x80>)
 8006174:	f7fd fb3a 	bl	80037ec <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8006178:	4816      	ldr	r0, [pc, #88]	; (80061d4 <cppFlip1ms+0x84>)
 800617a:	f7fd f97b 	bl	8003474 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 800617e:	4b16      	ldr	r3, [pc, #88]	; (80061d8 <cppFlip1ms+0x88>)
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	4b14      	ldr	r3, [pc, #80]	; (80061d8 <cppFlip1ms+0x88>)
 8006188:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 800618a:	4b13      	ldr	r3, [pc, #76]	; (80061d8 <cppFlip1ms+0x88>)
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d90c      	bls.n	80061ac <cppFlip1ms+0x5c>
		sys_ident.inOutputStore(imu.getOmega());
 8006192:	480b      	ldr	r0, [pc, #44]	; (80061c0 <cppFlip1ms+0x70>)
 8006194:	f7fb fce8 	bl	8001b68 <_ZN3IMU8getOmegaEv>
 8006198:	eef0 7a40 	vmov.f32	s15, s0
 800619c:	eeb0 0a67 	vmov.f32	s0, s15
 80061a0:	480e      	ldr	r0, [pc, #56]	; (80061dc <cppFlip1ms+0x8c>)
 80061a2:	f7fd fe45 	bl	8003e30 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <cppFlip1ms+0x88>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	801a      	strh	r2, [r3, #0]
	}

	line_trace.storeLogs();
 80061ac:	4806      	ldr	r0, [pc, #24]	; (80061c8 <cppFlip1ms+0x78>)
 80061ae:	f7fc febf 	bl	8002f30 <_ZN9LineTrace9storeLogsEv>

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clearCnt();
 80061b2:	4804      	ldr	r0, [pc, #16]	; (80061c4 <cppFlip1ms+0x74>)
 80061b4:	f7fb f94e 	bl	8001454 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80061b8:	bf00      	nop
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	200002a4 	.word	0x200002a4
 80061c0:	200005c0 	.word	0x200005c0
 80061c4:	20015d9c 	.word	0x20015d9c
 80061c8:	20015e28 	.word	0x20015e28
 80061cc:	20015db8 	.word	0x20015db8
 80061d0:	20015df8 	.word	0x20015df8
 80061d4:	200005ac 	.word	0x200005ac
 80061d8:	2003359a 	.word	0x2003359a
 80061dc:	2001bc64 	.word	0x2001bc64

080061e0 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80061e4:	4802      	ldr	r0, [pc, #8]	; (80061f0 <cppFlip100ns+0x10>)
 80061e6:	f7fb ffed 	bl	80021c4 <_ZN10LineSensor17storeSensorValuesEv>
}
 80061ea:	bf00      	nop
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	200002a4 	.word	0x200002a4

080061f4 <cppFlip10ms>:

void cppFlip10ms(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <cppFlip10ms+0x30>)
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	4b08      	ldr	r3, [pc, #32]	; (8006224 <cppFlip10ms+0x30>)
 8006202:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8006204:	4b07      	ldr	r3, [pc, #28]	; (8006224 <cppFlip10ms+0x30>)
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	2b06      	cmp	r3, #6
 800620a:	d905      	bls.n	8006218 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 800620c:	4806      	ldr	r0, [pc, #24]	; (8006228 <cppFlip10ms+0x34>)
 800620e:	f7fd fe4b 	bl	8003ea8 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8006212:	4b04      	ldr	r3, [pc, #16]	; (8006224 <cppFlip10ms+0x30>)
 8006214:	2200      	movs	r2, #0
 8006216:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8006218:	4b02      	ldr	r3, [pc, #8]	; (8006224 <cppFlip10ms+0x30>)
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	4b03      	ldr	r3, [pc, #12]	; (800622c <cppFlip10ms+0x38>)
 800621e:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8006220:	bf00      	nop
 8006222:	bd80      	pop	{r7, pc}
 8006224:	2003359c 	.word	0x2003359c
 8006228:	2001bc64 	.word	0x2001bc64
 800622c:	20033598 	.word	0x20033598

08006230 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	4603      	mov	r3, r0
 8006238:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	4619      	mov	r1, r3
 800623e:	4803      	ldr	r0, [pc, #12]	; (800624c <cppExit+0x1c>)
 8006240:	f7fd fd06 	bl	8003c50 <_ZN10SideSensor12updateStatusEt>
}
 8006244:	bf00      	nop
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	2000059c 	.word	0x2000059c

08006250 <cppLoop>:

void cppLoop(void)
{
 8006250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006254:	b08b      	sub	sp, #44	; 0x2c
 8006256:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8006258:	48bf      	ldr	r0, [pc, #764]	; (8006558 <cppLoop+0x308>)
 800625a:	f7fd fc93 	bl	8003b84 <_ZN12RotarySwitch8getValueEv>
 800625e:	4603      	mov	r3, r0
 8006260:	2b0f      	cmp	r3, #15
 8006262:	f201 80bb 	bhi.w	80073dc <cppLoop+0x118c>
 8006266:	a201      	add	r2, pc, #4	; (adr r2, 800626c <cppLoop+0x1c>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	080062ad 	.word	0x080062ad
 8006270:	08006787 	.word	0x08006787
 8006274:	080067fb 	.word	0x080067fb
 8006278:	080068e9 	.word	0x080068e9
 800627c:	08006999 	.word	0x08006999
 8006280:	08006a27 	.word	0x08006a27
 8006284:	08006aed 	.word	0x08006aed
 8006288:	08006c01 	.word	0x08006c01
 800628c:	08006ca1 	.word	0x08006ca1
 8006290:	080071d5 	.word	0x080071d5
 8006294:	08007271 	.word	0x08007271
 8006298:	0800730b 	.word	0x0800730b
 800629c:	08007335 	.word	0x08007335
 80062a0:	0800735f 	.word	0x0800735f
 80062a4:	08007389 	.word	0x08007389
 80062a8:	080073b3 	.word	0x080073b3
	static int16_t selector;

	case 0:
		led.fullColor('R');
 80062ac:	2152      	movs	r1, #82	; 0x52
 80062ae:	48ab      	ldr	r0, [pc, #684]	; (800655c <cppLoop+0x30c>)
 80062b0:	f7fb fe1c 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80062b4:	f7fa fef4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80062b8:	2100      	movs	r1, #0
 80062ba:	2000      	movs	r0, #0
 80062bc:	f7fa ff00 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 80062c0:	48a7      	ldr	r0, [pc, #668]	; (8006560 <cppLoop+0x310>)
 80062c2:	f7fc fcd6 	bl	8002c72 <_ZN9LineTrace5getKpEv>
 80062c6:	eeb0 7a40 	vmov.f32	s14, s0
 80062ca:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8006564 <cppLoop+0x314>
 80062ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d2:	ee17 0a90 	vmov	r0, s15
 80062d6:	f7fa f94f 	bl	8000578 <__aeabi_f2d>
 80062da:	4603      	mov	r3, r0
 80062dc:	460c      	mov	r4, r1
 80062de:	461a      	mov	r2, r3
 80062e0:	4623      	mov	r3, r4
 80062e2:	48a1      	ldr	r0, [pc, #644]	; (8006568 <cppLoop+0x318>)
 80062e4:	f7fa ff16 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80062e8:	2101      	movs	r1, #1
 80062ea:	2000      	movs	r0, #0
 80062ec:	f7fa fee8 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 80062f0:	489b      	ldr	r0, [pc, #620]	; (8006560 <cppLoop+0x310>)
 80062f2:	f7fc fccd 	bl	8002c90 <_ZN9LineTrace5getKiEv>
 80062f6:	eeb0 7a40 	vmov.f32	s14, s0
 80062fa:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800656c <cppLoop+0x31c>
 80062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006302:	ee17 0a90 	vmov	r0, s15
 8006306:	f7fa f937 	bl	8000578 <__aeabi_f2d>
 800630a:	4605      	mov	r5, r0
 800630c:	460e      	mov	r6, r1
 800630e:	4894      	ldr	r0, [pc, #592]	; (8006560 <cppLoop+0x310>)
 8006310:	f7fc fccd 	bl	8002cae <_ZN9LineTrace5getKdEv>
 8006314:	eeb0 7a40 	vmov.f32	s14, s0
 8006318:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006570 <cppLoop+0x320>
 800631c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006320:	ee17 0a90 	vmov	r0, s15
 8006324:	f7fa f928 	bl	8000578 <__aeabi_f2d>
 8006328:	4603      	mov	r3, r0
 800632a:	460c      	mov	r4, r1
 800632c:	e9cd 3400 	strd	r3, r4, [sp]
 8006330:	462a      	mov	r2, r5
 8006332:	4633      	mov	r3, r6
 8006334:	488f      	ldr	r0, [pc, #572]	; (8006574 <cppLoop+0x324>)
 8006336:	f7fa feed 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 800633a:	4b8f      	ldr	r3, [pc, #572]	; (8006578 <cppLoop+0x328>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	f3bf 8f5b 	dmb	ish
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	bf0c      	ite	eq
 800634c:	2301      	moveq	r3, #1
 800634e:	2300      	movne	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d015      	beq.n	8006382 <cppLoop+0x132>
 8006356:	4888      	ldr	r0, [pc, #544]	; (8006578 <cppLoop+0x328>)
 8006358:	f00b fe95 	bl	8012086 <__cxa_guard_acquire>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	bf14      	ite	ne
 8006362:	2301      	movne	r3, #1
 8006364:	2300      	moveq	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <cppLoop+0x132>
 800636c:	487c      	ldr	r0, [pc, #496]	; (8006560 <cppLoop+0x310>)
 800636e:	f7fc fc80 	bl	8002c72 <_ZN9LineTrace5getKpEv>
 8006372:	eef0 7a40 	vmov.f32	s15, s0
 8006376:	4b81      	ldr	r3, [pc, #516]	; (800657c <cppLoop+0x32c>)
 8006378:	edc3 7a00 	vstr	s15, [r3]
 800637c:	487e      	ldr	r0, [pc, #504]	; (8006578 <cppLoop+0x328>)
 800637e:	f00b fe8e 	bl	801209e <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 8006382:	4b7f      	ldr	r3, [pc, #508]	; (8006580 <cppLoop+0x330>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	f3bf 8f5b 	dmb	ish
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	bf0c      	ite	eq
 8006394:	2301      	moveq	r3, #1
 8006396:	2300      	movne	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d015      	beq.n	80063ca <cppLoop+0x17a>
 800639e:	4878      	ldr	r0, [pc, #480]	; (8006580 <cppLoop+0x330>)
 80063a0:	f00b fe71 	bl	8012086 <__cxa_guard_acquire>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <cppLoop+0x17a>
 80063b4:	486a      	ldr	r0, [pc, #424]	; (8006560 <cppLoop+0x310>)
 80063b6:	f7fc fc6b 	bl	8002c90 <_ZN9LineTrace5getKiEv>
 80063ba:	eef0 7a40 	vmov.f32	s15, s0
 80063be:	4b71      	ldr	r3, [pc, #452]	; (8006584 <cppLoop+0x334>)
 80063c0:	edc3 7a00 	vstr	s15, [r3]
 80063c4:	486e      	ldr	r0, [pc, #440]	; (8006580 <cppLoop+0x330>)
 80063c6:	f00b fe6a 	bl	801209e <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 80063ca:	4b6f      	ldr	r3, [pc, #444]	; (8006588 <cppLoop+0x338>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f3bf 8f5b 	dmb	ish
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d015      	beq.n	8006412 <cppLoop+0x1c2>
 80063e6:	4868      	ldr	r0, [pc, #416]	; (8006588 <cppLoop+0x338>)
 80063e8:	f00b fe4d 	bl	8012086 <__cxa_guard_acquire>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bf14      	ite	ne
 80063f2:	2301      	movne	r3, #1
 80063f4:	2300      	moveq	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <cppLoop+0x1c2>
 80063fc:	4858      	ldr	r0, [pc, #352]	; (8006560 <cppLoop+0x310>)
 80063fe:	f7fc fc56 	bl	8002cae <_ZN9LineTrace5getKdEv>
 8006402:	eef0 7a40 	vmov.f32	s15, s0
 8006406:	4b61      	ldr	r3, [pc, #388]	; (800658c <cppLoop+0x33c>)
 8006408:	edc3 7a00 	vstr	s15, [r3]
 800640c:	485e      	ldr	r0, [pc, #376]	; (8006588 <cppLoop+0x338>)
 800640e:	f00b fe46 	bl	801209e <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006412:	485f      	ldr	r0, [pc, #380]	; (8006590 <cppLoop+0x340>)
 8006414:	f7fb fd06 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006418:	4603      	mov	r3, r0
 800641a:	2b08      	cmp	r3, #8
 800641c:	bf0c      	ite	eq
 800641e:	2301      	moveq	r3, #1
 8006420:	2300      	movne	r3, #0
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d022      	beq.n	800646e <cppLoop+0x21e>
			led.LR(-1, 1);
 8006428:	2201      	movs	r2, #1
 800642a:	f04f 31ff 	mov.w	r1, #4294967295
 800642e:	484b      	ldr	r0, [pc, #300]	; (800655c <cppLoop+0x30c>)
 8006430:	f7fb fe18 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006434:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006438:	f001 f928 	bl	800768c <HAL_Delay>

			selector++;
 800643c:	4b55      	ldr	r3, [pc, #340]	; (8006594 <cppLoop+0x344>)
 800643e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006442:	b29b      	uxth	r3, r3
 8006444:	3301      	adds	r3, #1
 8006446:	b29b      	uxth	r3, r3
 8006448:	b21a      	sxth	r2, r3
 800644a:	4b52      	ldr	r3, [pc, #328]	; (8006594 <cppLoop+0x344>)
 800644c:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 800644e:	4b51      	ldr	r3, [pc, #324]	; (8006594 <cppLoop+0x344>)
 8006450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006454:	2b02      	cmp	r3, #2
 8006456:	dd02      	ble.n	800645e <cppLoop+0x20e>
 8006458:	4b4e      	ldr	r3, [pc, #312]	; (8006594 <cppLoop+0x344>)
 800645a:	2200      	movs	r2, #0
 800645c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800645e:	2200      	movs	r2, #0
 8006460:	f04f 31ff 	mov.w	r1, #4294967295
 8006464:	483d      	ldr	r0, [pc, #244]	; (800655c <cppLoop+0x30c>)
 8006466:	f7fb fdfd 	bl	8002064 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 800646a:	f000 bfb9 	b.w	80073e0 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_R){
 800646e:	4848      	ldr	r0, [pc, #288]	; (8006590 <cppLoop+0x340>)
 8006470:	f7fb fcd8 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006474:	4603      	mov	r3, r0
 8006476:	2b10      	cmp	r3, #16
 8006478:	bf0c      	ite	eq
 800647a:	2301      	moveq	r3, #1
 800647c:	2300      	movne	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 8089 	beq.w	8006598 <cppLoop+0x348>
			led.LR(-1, 1);
 8006486:	2201      	movs	r2, #1
 8006488:	f04f 31ff 	mov.w	r1, #4294967295
 800648c:	4833      	ldr	r0, [pc, #204]	; (800655c <cppLoop+0x30c>)
 800648e:	f7fb fde9 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006492:	2064      	movs	r0, #100	; 0x64
 8006494:	f001 f8fa 	bl	800768c <HAL_Delay>
			if(selector == 0){
 8006498:	4b3e      	ldr	r3, [pc, #248]	; (8006594 <cppLoop+0x344>)
 800649a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d113      	bne.n	80064ca <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 80064a2:	4b36      	ldr	r3, [pc, #216]	; (800657c <cppLoop+0x32c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fa f866 	bl	8000578 <__aeabi_f2d>
 80064ac:	a324      	add	r3, pc, #144	; (adr r3, 8006540 <cppLoop+0x2f0>)
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f7f9 ff03 	bl	80002bc <__adddf3>
 80064b6:	4603      	mov	r3, r0
 80064b8:	460c      	mov	r4, r1
 80064ba:	4618      	mov	r0, r3
 80064bc:	4621      	mov	r1, r4
 80064be:	f7fa fbab 	bl	8000c18 <__aeabi_d2f>
 80064c2:	4602      	mov	r2, r0
 80064c4:	4b2d      	ldr	r3, [pc, #180]	; (800657c <cppLoop+0x32c>)
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	e02b      	b.n	8006522 <cppLoop+0x2d2>
			else if(selector == 1){
 80064ca:	4b32      	ldr	r3, [pc, #200]	; (8006594 <cppLoop+0x344>)
 80064cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d113      	bne.n	80064fc <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 80064d4:	4b2b      	ldr	r3, [pc, #172]	; (8006584 <cppLoop+0x334>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fa f84d 	bl	8000578 <__aeabi_f2d>
 80064de:	a31a      	add	r3, pc, #104	; (adr r3, 8006548 <cppLoop+0x2f8>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f7f9 feea 	bl	80002bc <__adddf3>
 80064e8:	4603      	mov	r3, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	4618      	mov	r0, r3
 80064ee:	4621      	mov	r1, r4
 80064f0:	f7fa fb92 	bl	8000c18 <__aeabi_d2f>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b23      	ldr	r3, [pc, #140]	; (8006584 <cppLoop+0x334>)
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e012      	b.n	8006522 <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 80064fc:	4b23      	ldr	r3, [pc, #140]	; (800658c <cppLoop+0x33c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f7fa f839 	bl	8000578 <__aeabi_f2d>
 8006506:	a312      	add	r3, pc, #72	; (adr r3, 8006550 <cppLoop+0x300>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f7f9 fed6 	bl	80002bc <__adddf3>
 8006510:	4603      	mov	r3, r0
 8006512:	460c      	mov	r4, r1
 8006514:	4618      	mov	r0, r3
 8006516:	4621      	mov	r1, r4
 8006518:	f7fa fb7e 	bl	8000c18 <__aeabi_d2f>
 800651c:	4602      	mov	r2, r0
 800651e:	4b1b      	ldr	r3, [pc, #108]	; (800658c <cppLoop+0x33c>)
 8006520:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006522:	2152      	movs	r1, #82	; 0x52
 8006524:	480d      	ldr	r0, [pc, #52]	; (800655c <cppLoop+0x30c>)
 8006526:	f7fb fce1 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800652a:	2200      	movs	r2, #0
 800652c:	f04f 31ff 	mov.w	r1, #4294967295
 8006530:	480a      	ldr	r0, [pc, #40]	; (800655c <cppLoop+0x30c>)
 8006532:	f7fb fd97 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8006536:	f000 bf53 	b.w	80073e0 <cppLoop+0x1190>
 800653a:	bf00      	nop
 800653c:	f3af 8000 	nop.w
 8006540:	88e368f1 	.word	0x88e368f1
 8006544:	3ee4f8b5 	.word	0x3ee4f8b5
 8006548:	eb1c432d 	.word	0xeb1c432d
 800654c:	3f1a36e2 	.word	0x3f1a36e2
 8006550:	a0b5ed8d 	.word	0xa0b5ed8d
 8006554:	3eb0c6f7 	.word	0x3eb0c6f7
 8006558:	200005a8 	.word	0x200005a8
 800655c:	200005b0 	.word	0x200005b0
 8006560:	20015e28 	.word	0x20015e28
 8006564:	447a0000 	.word	0x447a0000
 8006568:	080183ac 	.word	0x080183ac
 800656c:	42c80000 	.word	0x42c80000
 8006570:	461c4000 	.word	0x461c4000
 8006574:	080183b8 	.word	0x080183b8
 8006578:	200335a4 	.word	0x200335a4
 800657c:	200335a0 	.word	0x200335a0
 8006580:	200335ac 	.word	0x200335ac
 8006584:	200335a8 	.word	0x200335a8
 8006588:	200335b4 	.word	0x200335b4
 800658c:	200335b0 	.word	0x200335b0
 8006590:	200005a4 	.word	0x200005a4
 8006594:	2003359e 	.word	0x2003359e
		else if(joy_stick.getValue() == JOY_L){
 8006598:	48c1      	ldr	r0, [pc, #772]	; (80068a0 <cppLoop+0x650>)
 800659a:	f7fb fc43 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d059      	beq.n	8006662 <cppLoop+0x412>
			led.LR(-1, 1);
 80065ae:	2201      	movs	r2, #1
 80065b0:	f04f 31ff 	mov.w	r1, #4294967295
 80065b4:	48bb      	ldr	r0, [pc, #748]	; (80068a4 <cppLoop+0x654>)
 80065b6:	f7fb fd55 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80065ba:	2064      	movs	r0, #100	; 0x64
 80065bc:	f001 f866 	bl	800768c <HAL_Delay>
			if(selector == 0){
 80065c0:	4bb9      	ldr	r3, [pc, #740]	; (80068a8 <cppLoop+0x658>)
 80065c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d113      	bne.n	80065f2 <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 80065ca:	4bb8      	ldr	r3, [pc, #736]	; (80068ac <cppLoop+0x65c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7f9 ffd2 	bl	8000578 <__aeabi_f2d>
 80065d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8006888 <cppLoop+0x638>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f7f9 fe6d 	bl	80002b8 <__aeabi_dsub>
 80065de:	4603      	mov	r3, r0
 80065e0:	460c      	mov	r4, r1
 80065e2:	4618      	mov	r0, r3
 80065e4:	4621      	mov	r1, r4
 80065e6:	f7fa fb17 	bl	8000c18 <__aeabi_d2f>
 80065ea:	4602      	mov	r2, r0
 80065ec:	4baf      	ldr	r3, [pc, #700]	; (80068ac <cppLoop+0x65c>)
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	e02b      	b.n	800664a <cppLoop+0x3fa>
			else if(selector == 1){
 80065f2:	4bad      	ldr	r3, [pc, #692]	; (80068a8 <cppLoop+0x658>)
 80065f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d113      	bne.n	8006624 <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 80065fc:	4bac      	ldr	r3, [pc, #688]	; (80068b0 <cppLoop+0x660>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4618      	mov	r0, r3
 8006602:	f7f9 ffb9 	bl	8000578 <__aeabi_f2d>
 8006606:	a3a2      	add	r3, pc, #648	; (adr r3, 8006890 <cppLoop+0x640>)
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f7f9 fe54 	bl	80002b8 <__aeabi_dsub>
 8006610:	4603      	mov	r3, r0
 8006612:	460c      	mov	r4, r1
 8006614:	4618      	mov	r0, r3
 8006616:	4621      	mov	r1, r4
 8006618:	f7fa fafe 	bl	8000c18 <__aeabi_d2f>
 800661c:	4602      	mov	r2, r0
 800661e:	4ba4      	ldr	r3, [pc, #656]	; (80068b0 <cppLoop+0x660>)
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e012      	b.n	800664a <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 8006624:	4ba3      	ldr	r3, [pc, #652]	; (80068b4 <cppLoop+0x664>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4618      	mov	r0, r3
 800662a:	f7f9 ffa5 	bl	8000578 <__aeabi_f2d>
 800662e:	a39a      	add	r3, pc, #616	; (adr r3, 8006898 <cppLoop+0x648>)
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f7f9 fe40 	bl	80002b8 <__aeabi_dsub>
 8006638:	4603      	mov	r3, r0
 800663a:	460c      	mov	r4, r1
 800663c:	4618      	mov	r0, r3
 800663e:	4621      	mov	r1, r4
 8006640:	f7fa faea 	bl	8000c18 <__aeabi_d2f>
 8006644:	4602      	mov	r2, r0
 8006646:	4b9b      	ldr	r3, [pc, #620]	; (80068b4 <cppLoop+0x664>)
 8006648:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800664a:	2152      	movs	r1, #82	; 0x52
 800664c:	4895      	ldr	r0, [pc, #596]	; (80068a4 <cppLoop+0x654>)
 800664e:	f7fb fc4d 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006652:	2200      	movs	r2, #0
 8006654:	f04f 31ff 	mov.w	r1, #4294967295
 8006658:	4892      	ldr	r0, [pc, #584]	; (80068a4 <cppLoop+0x654>)
 800665a:	f7fb fd03 	bl	8002064 <_ZN3LED2LREaa>
		break;
 800665e:	f000 bebf 	b.w	80073e0 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_D){
 8006662:	488f      	ldr	r0, [pc, #572]	; (80068a0 <cppLoop+0x650>)
 8006664:	f7fb fbde 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006668:	4603      	mov	r3, r0
 800666a:	2b04      	cmp	r3, #4
 800666c:	bf0c      	ite	eq
 800666e:	2301      	moveq	r3, #1
 8006670:	2300      	movne	r3, #0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d03e      	beq.n	80066f6 <cppLoop+0x4a6>
			led.LR(-1, 1);
 8006678:	2201      	movs	r2, #1
 800667a:	f04f 31ff 	mov.w	r1, #4294967295
 800667e:	4889      	ldr	r0, [pc, #548]	; (80068a4 <cppLoop+0x654>)
 8006680:	f7fb fcf0 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006684:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006688:	f001 f800 	bl	800768c <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800668c:	f107 031c 	add.w	r3, r7, #28
 8006690:	2201      	movs	r2, #1
 8006692:	4989      	ldr	r1, [pc, #548]	; (80068b8 <cppLoop+0x668>)
 8006694:	4889      	ldr	r0, [pc, #548]	; (80068bc <cppLoop+0x66c>)
 8006696:	f7fb f80d 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800669a:	f107 0318 	add.w	r3, r7, #24
 800669e:	2201      	movs	r2, #1
 80066a0:	4987      	ldr	r1, [pc, #540]	; (80068c0 <cppLoop+0x670>)
 80066a2:	4886      	ldr	r0, [pc, #536]	; (80068bc <cppLoop+0x66c>)
 80066a4:	f7fb f806 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80066a8:	f107 0314 	add.w	r3, r7, #20
 80066ac:	2201      	movs	r2, #1
 80066ae:	4985      	ldr	r1, [pc, #532]	; (80068c4 <cppLoop+0x674>)
 80066b0:	4882      	ldr	r0, [pc, #520]	; (80068bc <cppLoop+0x66c>)
 80066b2:	f7fa ffff 	bl	80016b4 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 80066b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80066ba:	ed97 7a06 	vldr	s14, [r7, #24]
 80066be:	edd7 6a05 	vldr	s13, [r7, #20]
 80066c2:	eeb0 1a66 	vmov.f32	s2, s13
 80066c6:	eef0 0a47 	vmov.f32	s1, s14
 80066ca:	eeb0 0a67 	vmov.f32	s0, s15
 80066ce:	487e      	ldr	r0, [pc, #504]	; (80068c8 <cppLoop+0x678>)
 80066d0:	f7fc fab6 	bl	8002c40 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	4a75      	ldr	r2, [pc, #468]	; (80068ac <cppLoop+0x65c>)
 80066d8:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4a74      	ldr	r2, [pc, #464]	; (80068b0 <cppLoop+0x660>)
 80066de:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4a74      	ldr	r2, [pc, #464]	; (80068b4 <cppLoop+0x664>)
 80066e4:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80066e6:	2200      	movs	r2, #0
 80066e8:	f04f 31ff 	mov.w	r1, #4294967295
 80066ec:	486d      	ldr	r0, [pc, #436]	; (80068a4 <cppLoop+0x654>)
 80066ee:	f7fb fcb9 	bl	8002064 <_ZN3LED2LREaa>
		break;
 80066f2:	f000 be75 	b.w	80073e0 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_C){
 80066f6:	486a      	ldr	r0, [pc, #424]	; (80068a0 <cppLoop+0x650>)
 80066f8:	f7fb fb94 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b02      	cmp	r3, #2
 8006700:	bf0c      	ite	eq
 8006702:	2301      	moveq	r3, #1
 8006704:	2300      	movne	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 8669 	beq.w	80073e0 <cppLoop+0x1190>
			led.LR(-1, 1);
 800670e:	2201      	movs	r2, #1
 8006710:	f04f 31ff 	mov.w	r1, #4294967295
 8006714:	4863      	ldr	r0, [pc, #396]	; (80068a4 <cppLoop+0x654>)
 8006716:	f7fb fca5 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800671a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800671e:	f000 ffb5 	bl	800768c <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8006722:	2300      	movs	r3, #0
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	4b61      	ldr	r3, [pc, #388]	; (80068ac <cppLoop+0x65c>)
 8006728:	2201      	movs	r2, #1
 800672a:	4963      	ldr	r1, [pc, #396]	; (80068b8 <cppLoop+0x668>)
 800672c:	4863      	ldr	r0, [pc, #396]	; (80068bc <cppLoop+0x66c>)
 800672e:	f7fa ff5b 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8006732:	2300      	movs	r3, #0
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	4b5e      	ldr	r3, [pc, #376]	; (80068b0 <cppLoop+0x660>)
 8006738:	2201      	movs	r2, #1
 800673a:	4961      	ldr	r1, [pc, #388]	; (80068c0 <cppLoop+0x670>)
 800673c:	485f      	ldr	r0, [pc, #380]	; (80068bc <cppLoop+0x66c>)
 800673e:	f7fa ff53 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8006742:	2300      	movs	r3, #0
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	4b5b      	ldr	r3, [pc, #364]	; (80068b4 <cppLoop+0x664>)
 8006748:	2201      	movs	r2, #1
 800674a:	495e      	ldr	r1, [pc, #376]	; (80068c4 <cppLoop+0x674>)
 800674c:	485b      	ldr	r0, [pc, #364]	; (80068bc <cppLoop+0x66c>)
 800674e:	f7fa ff4b 	bl	80015e8 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8006752:	4b56      	ldr	r3, [pc, #344]	; (80068ac <cppLoop+0x65c>)
 8006754:	edd3 7a00 	vldr	s15, [r3]
 8006758:	4b55      	ldr	r3, [pc, #340]	; (80068b0 <cppLoop+0x660>)
 800675a:	ed93 7a00 	vldr	s14, [r3]
 800675e:	4b55      	ldr	r3, [pc, #340]	; (80068b4 <cppLoop+0x664>)
 8006760:	edd3 6a00 	vldr	s13, [r3]
 8006764:	eeb0 1a66 	vmov.f32	s2, s13
 8006768:	eef0 0a47 	vmov.f32	s1, s14
 800676c:	eeb0 0a67 	vmov.f32	s0, s15
 8006770:	4855      	ldr	r0, [pc, #340]	; (80068c8 <cppLoop+0x678>)
 8006772:	f7fc fa65 	bl	8002c40 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8006776:	2200      	movs	r2, #0
 8006778:	f04f 31ff 	mov.w	r1, #4294967295
 800677c:	4849      	ldr	r0, [pc, #292]	; (80068a4 <cppLoop+0x654>)
 800677e:	f7fb fc71 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8006782:	f000 be2d 	b.w	80073e0 <cppLoop+0x1190>

	case 1:
		led.fullColor('B');
 8006786:	2142      	movs	r1, #66	; 0x42
 8006788:	4846      	ldr	r0, [pc, #280]	; (80068a4 <cppLoop+0x654>)
 800678a:	f7fb fbaf 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 800678e:	f7fa fc87 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006792:	2100      	movs	r1, #0
 8006794:	2000      	movs	r0, #0
 8006796:	f7fa fc93 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 800679a:	484c      	ldr	r0, [pc, #304]	; (80068cc <cppLoop+0x67c>)
 800679c:	f7fa fcba 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80067a0:	2101      	movs	r1, #1
 80067a2:	2000      	movs	r0, #0
 80067a4:	f7fa fc8c 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 80067a8:	4849      	ldr	r0, [pc, #292]	; (80068d0 <cppLoop+0x680>)
 80067aa:	f7fa fcb3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80067ae:	483c      	ldr	r0, [pc, #240]	; (80068a0 <cppLoop+0x650>)
 80067b0:	f7fb fb38 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	bf0c      	ite	eq
 80067ba:	2301      	moveq	r3, #1
 80067bc:	2300      	movne	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 860f 	beq.w	80073e4 <cppLoop+0x1194>
			HAL_Delay(500);
 80067c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067ca:	f000 ff5f 	bl	800768c <HAL_Delay>

			line_trace.setTargetVelocity(1.2);
 80067ce:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80068d4 <cppLoop+0x684>
 80067d2:	483d      	ldr	r0, [pc, #244]	; (80068c8 <cppLoop+0x678>)
 80067d4:	f7fc fa89 	bl	8002cea <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80067d8:	f04f 32ff 	mov.w	r2, #4294967295
 80067dc:	2101      	movs	r1, #1
 80067de:	4831      	ldr	r0, [pc, #196]	; (80068a4 <cppLoop+0x654>)
 80067e0:	f7fb fc40 	bl	8002064 <_ZN3LED2LREaa>

			line_trace.running();
 80067e4:	4838      	ldr	r0, [pc, #224]	; (80068c8 <cppLoop+0x678>)
 80067e6:	f7fc fb43 	bl	8002e70 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 80067ea:	f04f 32ff 	mov.w	r2, #4294967295
 80067ee:	2100      	movs	r1, #0
 80067f0:	482c      	ldr	r0, [pc, #176]	; (80068a4 <cppLoop+0x654>)
 80067f2:	f7fb fc37 	bl	8002064 <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 80067f6:	f000 bdf5 	b.w	80073e4 <cppLoop+0x1194>

	case 2:
		led.fullColor('G');
 80067fa:	2147      	movs	r1, #71	; 0x47
 80067fc:	4829      	ldr	r0, [pc, #164]	; (80068a4 <cppLoop+0x654>)
 80067fe:	f7fb fb75 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006802:	f7fa fc4d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006806:	2100      	movs	r1, #0
 8006808:	2000      	movs	r0, #0
 800680a:	f7fa fc59 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 800680e:	4832      	ldr	r0, [pc, #200]	; (80068d8 <cppLoop+0x688>)
 8006810:	f7fa fc80 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006814:	2101      	movs	r1, #1
 8006816:	2000      	movs	r0, #0
 8006818:	f7fa fc52 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800681c:	482f      	ldr	r0, [pc, #188]	; (80068dc <cppLoop+0x68c>)
 800681e:	f7fa fc79 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006822:	481f      	ldr	r0, [pc, #124]	; (80068a0 <cppLoop+0x650>)
 8006824:	f7fb fafe 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006828:	4603      	mov	r3, r0
 800682a:	2b02      	cmp	r3, #2
 800682c:	bf0c      	ite	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	2300      	movne	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 85d7 	beq.w	80073e8 <cppLoop+0x1198>
			led.LR(-1, 1);
 800683a:	2201      	movs	r2, #1
 800683c:	f04f 31ff 	mov.w	r1, #4294967295
 8006840:	4818      	ldr	r0, [pc, #96]	; (80068a4 <cppLoop+0x654>)
 8006842:	f7fb fc0f 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8006846:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800684a:	f000 ff1f 	bl	800768c <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 800684e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80068e0 <cppLoop+0x690>
 8006852:	4824      	ldr	r0, [pc, #144]	; (80068e4 <cppLoop+0x694>)
 8006854:	f7fd fb7e 	bl	8003f54 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8006858:	4822      	ldr	r0, [pc, #136]	; (80068e4 <cppLoop+0x694>)
 800685a:	f7fd fb8b 	bl	8003f74 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 800685e:	f244 405c 	movw	r0, #17500	; 0x445c
 8006862:	f000 ff13 	bl	800768c <HAL_Delay>
			sys_ident.stop();
 8006866:	481f      	ldr	r0, [pc, #124]	; (80068e4 <cppLoop+0x694>)
 8006868:	f7fd fb96 	bl	8003f98 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 800686c:	481d      	ldr	r0, [pc, #116]	; (80068e4 <cppLoop+0x694>)
 800686e:	f7fd faff 	bl	8003e70 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8006872:	2200      	movs	r2, #0
 8006874:	f04f 31ff 	mov.w	r1, #4294967295
 8006878:	480a      	ldr	r0, [pc, #40]	; (80068a4 <cppLoop+0x654>)
 800687a:	f7fb fbf3 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 800687e:	f000 bdb3 	b.w	80073e8 <cppLoop+0x1198>
 8006882:	bf00      	nop
 8006884:	f3af 8000 	nop.w
 8006888:	88e368f1 	.word	0x88e368f1
 800688c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006890:	eb1c432d 	.word	0xeb1c432d
 8006894:	3f1a36e2 	.word	0x3f1a36e2
 8006898:	a0b5ed8d 	.word	0xa0b5ed8d
 800689c:	3eb0c6f7 	.word	0x3eb0c6f7
 80068a0:	200005a4 	.word	0x200005a4
 80068a4:	200005b0 	.word	0x200005b0
 80068a8:	2003359e 	.word	0x2003359e
 80068ac:	200335a0 	.word	0x200335a0
 80068b0:	200335a8 	.word	0x200335a8
 80068b4:	200335b0 	.word	0x200335b0
 80068b8:	080183c8 	.word	0x080183c8
 80068bc:	080183d0 	.word	0x080183d0
 80068c0:	080183d8 	.word	0x080183d8
 80068c4:	080183e0 	.word	0x080183e0
 80068c8:	20015e28 	.word	0x20015e28
 80068cc:	080183e8 	.word	0x080183e8
 80068d0:	080183f4 	.word	0x080183f4
 80068d4:	3f99999a 	.word	0x3f99999a
 80068d8:	080183fc 	.word	0x080183fc
 80068dc:	08018404 	.word	0x08018404
 80068e0:	3e99999a 	.word	0x3e99999a
 80068e4:	2001bc64 	.word	0x2001bc64

	case 3:
		led.fullColor('M');
 80068e8:	214d      	movs	r1, #77	; 0x4d
 80068ea:	48af      	ldr	r0, [pc, #700]	; (8006ba8 <cppLoop+0x958>)
 80068ec:	f7fb fafe 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80068f0:	f7fa fbd6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80068f4:	2100      	movs	r1, #0
 80068f6:	2000      	movs	r0, #0
 80068f8:	f7fa fbe2 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 80068fc:	48ab      	ldr	r0, [pc, #684]	; (8006bac <cppLoop+0x95c>)
 80068fe:	f7fa fc09 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006902:	2101      	movs	r1, #1
 8006904:	2000      	movs	r0, #0
 8006906:	f7fa fbdb 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800690a:	48a9      	ldr	r0, [pc, #676]	; (8006bb0 <cppLoop+0x960>)
 800690c:	f7fa fc02 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006910:	48a8      	ldr	r0, [pc, #672]	; (8006bb4 <cppLoop+0x964>)
 8006912:	f7fb fa87 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006916:	4603      	mov	r3, r0
 8006918:	2b02      	cmp	r3, #2
 800691a:	bf0c      	ite	eq
 800691c:	2301      	moveq	r3, #1
 800691e:	2300      	movne	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 8562 	beq.w	80073ec <cppLoop+0x119c>
			led.LR(-1, 1);
 8006928:	2201      	movs	r2, #1
 800692a:	f04f 31ff 	mov.w	r1, #4294967295
 800692e:	489e      	ldr	r0, [pc, #632]	; (8006ba8 <cppLoop+0x958>)
 8006930:	f7fb fb98 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006934:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006938:	f000 fea8 	bl	800768c <HAL_Delay>

			logger.start();
 800693c:	489e      	ldr	r0, [pc, #632]	; (8006bb8 <cppLoop+0x968>)
 800693e:	f7fc fd53 	bl	80033e8 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8006942:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006bbc <cppLoop+0x96c>
 8006946:	489e      	ldr	r0, [pc, #632]	; (8006bc0 <cppLoop+0x970>)
 8006948:	f7fc f9c0 	bl	8002ccc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800694c:	489c      	ldr	r0, [pc, #624]	; (8006bc0 <cppLoop+0x970>)
 800694e:	f7fc fa41 	bl	8002dd4 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8006952:	f241 3088 	movw	r0, #5000	; 0x1388
 8006956:	f000 fe99 	bl	800768c <HAL_Delay>

			logger.stop();
 800695a:	4897      	ldr	r0, [pc, #604]	; (8006bb8 <cppLoop+0x968>)
 800695c:	f7fc fd55 	bl	800340a <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006960:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8006bbc <cppLoop+0x96c>
 8006964:	4896      	ldr	r0, [pc, #600]	; (8006bc0 <cppLoop+0x970>)
 8006966:	f7fc f9b1 	bl	8002ccc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 800696a:	4895      	ldr	r0, [pc, #596]	; (8006bc0 <cppLoop+0x970>)
 800696c:	f7fc fa4c 	bl	8002e08 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006970:	f04f 32ff 	mov.w	r2, #4294967295
 8006974:	2101      	movs	r1, #1
 8006976:	488c      	ldr	r0, [pc, #560]	; (8006ba8 <cppLoop+0x958>)
 8006978:	f7fb fb74 	bl	8002064 <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 800697c:	f04f 32ff 	mov.w	r2, #4294967295
 8006980:	2100      	movs	r1, #0
 8006982:	4889      	ldr	r0, [pc, #548]	; (8006ba8 <cppLoop+0x958>)
 8006984:	f7fb fb6e 	bl	8002064 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8006988:	2200      	movs	r2, #0
 800698a:	f04f 31ff 	mov.w	r1, #4294967295
 800698e:	4886      	ldr	r0, [pc, #536]	; (8006ba8 <cppLoop+0x958>)
 8006990:	f7fb fb68 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8006994:	f000 bd2a 	b.w	80073ec <cppLoop+0x119c>

	case 4:
		led.fullColor('Y');
 8006998:	2159      	movs	r1, #89	; 0x59
 800699a:	4883      	ldr	r0, [pc, #524]	; (8006ba8 <cppLoop+0x958>)
 800699c:	f7fb faa6 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80069a0:	f7fa fb7e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80069a4:	2100      	movs	r1, #0
 80069a6:	2000      	movs	r0, #0
 80069a8:	f7fa fb8a 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 80069ac:	4885      	ldr	r0, [pc, #532]	; (8006bc4 <cppLoop+0x974>)
 80069ae:	f7fa fbb1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80069b2:	2101      	movs	r1, #1
 80069b4:	2000      	movs	r0, #0
 80069b6:	f7fa fb83 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80069ba:	487d      	ldr	r0, [pc, #500]	; (8006bb0 <cppLoop+0x960>)
 80069bc:	f7fa fbaa 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80069c0:	487c      	ldr	r0, [pc, #496]	; (8006bb4 <cppLoop+0x964>)
 80069c2:	f7fb fa2f 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	bf0c      	ite	eq
 80069cc:	2301      	moveq	r3, #1
 80069ce:	2300      	movne	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 850c 	beq.w	80073f0 <cppLoop+0x11a0>
			led.LR(-1, 1);
 80069d8:	2201      	movs	r2, #1
 80069da:	f04f 31ff 	mov.w	r1, #4294967295
 80069de:	4872      	ldr	r0, [pc, #456]	; (8006ba8 <cppLoop+0x958>)
 80069e0:	f7fb fb40 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80069e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069e8:	f000 fe50 	bl	800768c <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 80069ec:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006bbc <cppLoop+0x96c>
 80069f0:	4873      	ldr	r0, [pc, #460]	; (8006bc0 <cppLoop+0x970>)
 80069f2:	f7fc f97a 	bl	8002cea <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 80069f6:	4874      	ldr	r0, [pc, #464]	; (8006bc8 <cppLoop+0x978>)
 80069f8:	f7fd fc8b 	bl	8004312 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 80069fc:	4870      	ldr	r0, [pc, #448]	; (8006bc0 <cppLoop+0x970>)
 80069fe:	f7fc f9e9 	bl	8002dd4 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006a02:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a06:	f000 fe41 	bl	800768c <HAL_Delay>

			line_trace.stop();
 8006a0a:	486d      	ldr	r0, [pc, #436]	; (8006bc0 <cppLoop+0x970>)
 8006a0c:	f7fc f9fc 	bl	8002e08 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006a10:	486d      	ldr	r0, [pc, #436]	; (8006bc8 <cppLoop+0x978>)
 8006a12:	f7fd fc91 	bl	8004338 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006a16:	2200      	movs	r2, #0
 8006a18:	f04f 31ff 	mov.w	r1, #4294967295
 8006a1c:	4862      	ldr	r0, [pc, #392]	; (8006ba8 <cppLoop+0x958>)
 8006a1e:	f7fb fb21 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8006a22:	f000 bce5 	b.w	80073f0 <cppLoop+0x11a0>

	case 5:
		led.fullColor('C');
 8006a26:	2143      	movs	r1, #67	; 0x43
 8006a28:	485f      	ldr	r0, [pc, #380]	; (8006ba8 <cppLoop+0x958>)
 8006a2a:	f7fb fa5f 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006a2e:	f7fa fb37 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006a32:	2100      	movs	r1, #0
 8006a34:	2000      	movs	r0, #0
 8006a36:	f7fa fb43 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006a3a:	4864      	ldr	r0, [pc, #400]	; (8006bcc <cppLoop+0x97c>)
 8006a3c:	f7fa fb6a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006a40:	2101      	movs	r1, #1
 8006a42:	2000      	movs	r0, #0
 8006a44:	f7fa fb3c 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006a48:	4861      	ldr	r0, [pc, #388]	; (8006bd0 <cppLoop+0x980>)
 8006a4a:	f7fa fb63 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006a4e:	4859      	ldr	r0, [pc, #356]	; (8006bb4 <cppLoop+0x964>)
 8006a50:	f7fb f9e8 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	bf0c      	ite	eq
 8006a5a:	2301      	moveq	r3, #1
 8006a5c:	2300      	movne	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 84c7 	beq.w	80073f4 <cppLoop+0x11a4>
			led.LR(-1, 1);
 8006a66:	2201      	movs	r2, #1
 8006a68:	f04f 31ff 	mov.w	r1, #4294967295
 8006a6c:	484e      	ldr	r0, [pc, #312]	; (8006ba8 <cppLoop+0x958>)
 8006a6e:	f7fb faf9 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a76:	f000 fe09 	bl	800768c <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006a7a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8006bd4 <cppLoop+0x984>
 8006a7e:	4850      	ldr	r0, [pc, #320]	; (8006bc0 <cppLoop+0x970>)
 8006a80:	f7fc f924 	bl	8002ccc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006a84:	484e      	ldr	r0, [pc, #312]	; (8006bc0 <cppLoop+0x970>)
 8006a86:	f7fc f9a5 	bl	8002dd4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006a8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a8e:	f000 fdfd 	bl	800768c <HAL_Delay>

			led.fullColor('R');
 8006a92:	2152      	movs	r1, #82	; 0x52
 8006a94:	4844      	ldr	r0, [pc, #272]	; (8006ba8 <cppLoop+0x958>)
 8006a96:	f7fb fa29 	bl	8001eec <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006a9a:	484f      	ldr	r0, [pc, #316]	; (8006bd8 <cppLoop+0x988>)
 8006a9c:	f7fa fcfc 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006aa0:	484d      	ldr	r0, [pc, #308]	; (8006bd8 <cppLoop+0x988>)
 8006aa2:	f7fa fcc9 	bl	8001438 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8006aa6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006aaa:	f000 fdef 	bl	800768c <HAL_Delay>

			line_trace.stop();
 8006aae:	4844      	ldr	r0, [pc, #272]	; (8006bc0 <cppLoop+0x970>)
 8006ab0:	f7fc f9aa 	bl	8002e08 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006ab4:	4949      	ldr	r1, [pc, #292]	; (8006bdc <cppLoop+0x98c>)
 8006ab6:	484a      	ldr	r0, [pc, #296]	; (8006be0 <cppLoop+0x990>)
 8006ab8:	f7fa fd21 	bl	80014fe <user_fopen>
			float d = encoder.getDistance();
 8006abc:	4846      	ldr	r0, [pc, #280]	; (8006bd8 <cppLoop+0x988>)
 8006abe:	f7fa fc9d 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 8006ac2:	eef0 7a40 	vmov.f32	s15, s0
 8006ac6:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006aca:	f107 0310 	add.w	r3, r7, #16
 8006ace:	2201      	movs	r2, #1
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	2001      	movs	r0, #1
 8006ad4:	f7fa fd36 	bl	8001544 <sd_write_float>
			user_fclose();
 8006ad8:	f7fa fd24 	bl	8001524 <user_fclose>

			led.LR(-1, 0);
 8006adc:	2200      	movs	r2, #0
 8006ade:	f04f 31ff 	mov.w	r1, #4294967295
 8006ae2:	4831      	ldr	r0, [pc, #196]	; (8006ba8 <cppLoop+0x958>)
 8006ae4:	f7fb fabe 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8006ae8:	f000 bc84 	b.w	80073f4 <cppLoop+0x11a4>

	case 6:
		led.fullColor('R');
 8006aec:	2152      	movs	r1, #82	; 0x52
 8006aee:	482e      	ldr	r0, [pc, #184]	; (8006ba8 <cppLoop+0x958>)
 8006af0:	f7fb f9fc 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006af4:	f7fa fad4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006af8:	2100      	movs	r1, #0
 8006afa:	2000      	movs	r0, #0
 8006afc:	f7fa fae0 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006b00:	4838      	ldr	r0, [pc, #224]	; (8006be4 <cppLoop+0x994>)
 8006b02:	f7fa fb07 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006b06:	2101      	movs	r1, #1
 8006b08:	2000      	movs	r0, #0
 8006b0a:	f7fa fad9 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006b0e:	4836      	ldr	r0, [pc, #216]	; (8006be8 <cppLoop+0x998>)
 8006b10:	f7fa fb00 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006b14:	4827      	ldr	r0, [pc, #156]	; (8006bb4 <cppLoop+0x964>)
 8006b16:	f7fb f985 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	bf0c      	ite	eq
 8006b20:	2301      	moveq	r3, #1
 8006b22:	2300      	movne	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8466 	beq.w	80073f8 <cppLoop+0x11a8>
			HAL_Delay(500);
 8006b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b30:	f000 fdac 	bl	800768c <HAL_Delay>
			led.LR(-1, 1);
 8006b34:	2201      	movs	r2, #1
 8006b36:	f04f 31ff 	mov.w	r1, #4294967295
 8006b3a:	481b      	ldr	r0, [pc, #108]	; (8006ba8 <cppLoop+0x958>)
 8006b3c:	f7fb fa92 	bl	8002064 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006b40:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8006bec <cppLoop+0x99c>
 8006b44:	481e      	ldr	r0, [pc, #120]	; (8006bc0 <cppLoop+0x970>)
 8006b46:	f7fc f8c1 	bl	8002ccc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006b4a:	481d      	ldr	r0, [pc, #116]	; (8006bc0 <cppLoop+0x970>)
 8006b4c:	f7fc f942 	bl	8002dd4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b54:	f000 fd9a 	bl	800768c <HAL_Delay>

			led.fullColor('R');
 8006b58:	2152      	movs	r1, #82	; 0x52
 8006b5a:	4813      	ldr	r0, [pc, #76]	; (8006ba8 <cppLoop+0x958>)
 8006b5c:	f7fb f9c6 	bl	8001eec <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006b60:	481d      	ldr	r0, [pc, #116]	; (8006bd8 <cppLoop+0x988>)
 8006b62:	f7fa fc99 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006b66:	481c      	ldr	r0, [pc, #112]	; (8006bd8 <cppLoop+0x988>)
 8006b68:	f7fa fc66 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006b6c:	4820      	ldr	r0, [pc, #128]	; (8006bf0 <cppLoop+0x9a0>)
 8006b6e:	f7fc fe59 	bl	8003824 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006b72:	4811      	ldr	r0, [pc, #68]	; (8006bb8 <cppLoop+0x968>)
 8006b74:	f7fc fc38 	bl	80033e8 <_ZN6Logger5startEv>

			HAL_Delay(3000);
 8006b78:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006b7c:	f000 fd86 	bl	800768c <HAL_Delay>

			line_trace.stop();
 8006b80:	480f      	ldr	r0, [pc, #60]	; (8006bc0 <cppLoop+0x970>)
 8006b82:	f7fc f941 	bl	8002e08 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006b86:	480c      	ldr	r0, [pc, #48]	; (8006bb8 <cppLoop+0x968>)
 8006b88:	f7fc fc3f 	bl	800340a <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006b8c:	4b19      	ldr	r3, [pc, #100]	; (8006bf4 <cppLoop+0x9a4>)
 8006b8e:	4a1a      	ldr	r2, [pc, #104]	; (8006bf8 <cppLoop+0x9a8>)
 8006b90:	491a      	ldr	r1, [pc, #104]	; (8006bfc <cppLoop+0x9ac>)
 8006b92:	4809      	ldr	r0, [pc, #36]	; (8006bb8 <cppLoop+0x968>)
 8006b94:	f7fc fb89 	bl	80032aa <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8006b9e:	4802      	ldr	r0, [pc, #8]	; (8006ba8 <cppLoop+0x958>)
 8006ba0:	f7fb fa60 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8006ba4:	f000 bc28 	b.w	80073f8 <cppLoop+0x11a8>
 8006ba8:	200005b0 	.word	0x200005b0
 8006bac:	0801840c 	.word	0x0801840c
 8006bb0:	08018414 	.word	0x08018414
 8006bb4:	200005a4 	.word	0x200005a4
 8006bb8:	200005d4 	.word	0x200005d4
 8006bbc:	3dcccccd 	.word	0x3dcccccd
 8006bc0:	20015e28 	.word	0x20015e28
 8006bc4:	0801841c 	.word	0x0801841c
 8006bc8:	20015db8 	.word	0x20015db8
 8006bcc:	08018428 	.word	0x08018428
 8006bd0:	08018430 	.word	0x08018430
 8006bd4:	00000000 	.word	0x00000000
 8006bd8:	20015d9c 	.word	0x20015d9c
 8006bdc:	0801843c 	.word	0x0801843c
 8006be0:	08018444 	.word	0x08018444
 8006be4:	08018450 	.word	0x08018450
 8006be8:	08018404 	.word	0x08018404
 8006bec:	3d8f5c29 	.word	0x3d8f5c29
 8006bf0:	20015df8 	.word	0x20015df8
 8006bf4:	0801845c 	.word	0x0801845c
 8006bf8:	08018468 	.word	0x08018468
 8006bfc:	08018474 	.word	0x08018474

	case 7:
		led.fullColor('G');
 8006c00:	2147      	movs	r1, #71	; 0x47
 8006c02:	48b3      	ldr	r0, [pc, #716]	; (8006ed0 <cppLoop+0xc80>)
 8006c04:	f7fb f972 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006c08:	f7fa fa4a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	2000      	movs	r0, #0
 8006c10:	f7fa fa56 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006c14:	48af      	ldr	r0, [pc, #700]	; (8006ed4 <cppLoop+0xc84>)
 8006c16:	f7fa fa7d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	f7fa fa4f 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006c22:	48ad      	ldr	r0, [pc, #692]	; (8006ed8 <cppLoop+0xc88>)
 8006c24:	f7fa fa76 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006c28:	48ac      	ldr	r0, [pc, #688]	; (8006edc <cppLoop+0xc8c>)
 8006c2a:	f7fb f8fb 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	bf0c      	ite	eq
 8006c34:	2301      	moveq	r3, #1
 8006c36:	2300      	movne	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 83de 	beq.w	80073fc <cppLoop+0x11ac>
			led.LR(-1, 1);
 8006c40:	2201      	movs	r2, #1
 8006c42:	f04f 31ff 	mov.w	r1, #4294967295
 8006c46:	48a2      	ldr	r0, [pc, #648]	; (8006ed0 <cppLoop+0xc80>)
 8006c48:	f7fb fa0c 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c50:	f000 fd1c 	bl	800768c <HAL_Delay>

			led.fullColor('R');
 8006c54:	2152      	movs	r1, #82	; 0x52
 8006c56:	489e      	ldr	r0, [pc, #632]	; (8006ed0 <cppLoop+0xc80>)
 8006c58:	f7fb f948 	bl	8001eec <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8006c5c:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8006ee0 <cppLoop+0xc90>
 8006c60:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8006ee4 <cppLoop+0xc94>
 8006c64:	48a0      	ldr	r0, [pc, #640]	; (8006ee8 <cppLoop+0xc98>)
 8006c66:	f7fd fae7 	bl	8004238 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 8006c6a:	489f      	ldr	r0, [pc, #636]	; (8006ee8 <cppLoop+0xc98>)
 8006c6c:	f7fd fb51 	bl	8004312 <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c74:	f000 fd0a 	bl	800768c <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8006c78:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8006ee4 <cppLoop+0xc94>
 8006c7c:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8006ee4 <cppLoop+0xc94>
 8006c80:	4899      	ldr	r0, [pc, #612]	; (8006ee8 <cppLoop+0xc98>)
 8006c82:	f7fd fad9 	bl	8004238 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 8006c86:	2064      	movs	r0, #100	; 0x64
 8006c88:	f000 fd00 	bl	800768c <HAL_Delay>
			velocity_ctrl.stop();
 8006c8c:	4896      	ldr	r0, [pc, #600]	; (8006ee8 <cppLoop+0xc98>)
 8006c8e:	f7fd fb53 	bl	8004338 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006c92:	2200      	movs	r2, #0
 8006c94:	f04f 31ff 	mov.w	r1, #4294967295
 8006c98:	488d      	ldr	r0, [pc, #564]	; (8006ed0 <cppLoop+0xc80>)
 8006c9a:	f7fb f9e3 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8006c9e:	e3ad      	b.n	80073fc <cppLoop+0x11ac>

	case 8:
		led.fullColor('B');
 8006ca0:	2142      	movs	r1, #66	; 0x42
 8006ca2:	488b      	ldr	r0, [pc, #556]	; (8006ed0 <cppLoop+0xc80>)
 8006ca4:	f7fb f922 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006ca8:	f7fa f9fa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006cac:	2100      	movs	r1, #0
 8006cae:	2000      	movs	r0, #0
 8006cb0:	f7fa fa06 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006cb4:	488d      	ldr	r0, [pc, #564]	; (8006eec <cppLoop+0xc9c>)
 8006cb6:	f7fc feab 	bl	8003a10 <_ZN13PathFollowing8getKxValEv>
 8006cba:	ec51 0b10 	vmov	r0, r1, d0
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	4b8b      	ldr	r3, [pc, #556]	; (8006ef0 <cppLoop+0xca0>)
 8006cc4:	f7f9 fcb0 	bl	8000628 <__aeabi_dmul>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	461a      	mov	r2, r3
 8006cce:	4623      	mov	r3, r4
 8006cd0:	4888      	ldr	r0, [pc, #544]	; (8006ef4 <cppLoop+0xca4>)
 8006cd2:	f7fa fa1f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	2000      	movs	r0, #0
 8006cda:	f7fa f9f1 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8006cde:	4883      	ldr	r0, [pc, #524]	; (8006eec <cppLoop+0xc9c>)
 8006ce0:	f7fc feaa 	bl	8003a38 <_ZN13PathFollowing8getKyValEv>
 8006ce4:	ec51 0b10 	vmov	r0, r1, d0
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	4b80      	ldr	r3, [pc, #512]	; (8006ef0 <cppLoop+0xca0>)
 8006cee:	f7f9 fc9b 	bl	8000628 <__aeabi_dmul>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	461d      	mov	r5, r3
 8006cf8:	4626      	mov	r6, r4
 8006cfa:	487c      	ldr	r0, [pc, #496]	; (8006eec <cppLoop+0xc9c>)
 8006cfc:	f7fc feb0 	bl	8003a60 <_ZN13PathFollowing8getKtValEv>
 8006d00:	ec51 0b10 	vmov	r0, r1, d0
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	4b79      	ldr	r3, [pc, #484]	; (8006ef0 <cppLoop+0xca0>)
 8006d0a:	f7f9 fc8d 	bl	8000628 <__aeabi_dmul>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	460c      	mov	r4, r1
 8006d12:	e9cd 3400 	strd	r3, r4, [sp]
 8006d16:	462a      	mov	r2, r5
 8006d18:	4633      	mov	r3, r6
 8006d1a:	4877      	ldr	r0, [pc, #476]	; (8006ef8 <cppLoop+0xca8>)
 8006d1c:	f7fa f9fa 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8006d20:	4b76      	ldr	r3, [pc, #472]	; (8006efc <cppLoop+0xcac>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f3bf 8f5b 	dmb	ish
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bf0c      	ite	eq
 8006d32:	2301      	moveq	r3, #1
 8006d34:	2300      	movne	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d019      	beq.n	8006d70 <cppLoop+0xb20>
 8006d3c:	486f      	ldr	r0, [pc, #444]	; (8006efc <cppLoop+0xcac>)
 8006d3e:	f00b f9a2 	bl	8012086 <__cxa_guard_acquire>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	bf14      	ite	ne
 8006d48:	2301      	movne	r3, #1
 8006d4a:	2300      	moveq	r3, #0
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00e      	beq.n	8006d70 <cppLoop+0xb20>
 8006d52:	4866      	ldr	r0, [pc, #408]	; (8006eec <cppLoop+0xc9c>)
 8006d54:	f7fc fe5c 	bl	8003a10 <_ZN13PathFollowing8getKxValEv>
 8006d58:	ec54 3b10 	vmov	r3, r4, d0
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	4621      	mov	r1, r4
 8006d60:	f7f9 ff5a 	bl	8000c18 <__aeabi_d2f>
 8006d64:	4602      	mov	r2, r0
 8006d66:	4b66      	ldr	r3, [pc, #408]	; (8006f00 <cppLoop+0xcb0>)
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	4864      	ldr	r0, [pc, #400]	; (8006efc <cppLoop+0xcac>)
 8006d6c:	f00b f997 	bl	801209e <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 8006d70:	4b64      	ldr	r3, [pc, #400]	; (8006f04 <cppLoop+0xcb4>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f3bf 8f5b 	dmb	ish
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bf0c      	ite	eq
 8006d82:	2301      	moveq	r3, #1
 8006d84:	2300      	movne	r3, #0
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d019      	beq.n	8006dc0 <cppLoop+0xb70>
 8006d8c:	485d      	ldr	r0, [pc, #372]	; (8006f04 <cppLoop+0xcb4>)
 8006d8e:	f00b f97a 	bl	8012086 <__cxa_guard_acquire>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	bf14      	ite	ne
 8006d98:	2301      	movne	r3, #1
 8006d9a:	2300      	moveq	r3, #0
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00e      	beq.n	8006dc0 <cppLoop+0xb70>
 8006da2:	4852      	ldr	r0, [pc, #328]	; (8006eec <cppLoop+0xc9c>)
 8006da4:	f7fc fe48 	bl	8003a38 <_ZN13PathFollowing8getKyValEv>
 8006da8:	ec54 3b10 	vmov	r3, r4, d0
 8006dac:	4618      	mov	r0, r3
 8006dae:	4621      	mov	r1, r4
 8006db0:	f7f9 ff32 	bl	8000c18 <__aeabi_d2f>
 8006db4:	4602      	mov	r2, r0
 8006db6:	4b54      	ldr	r3, [pc, #336]	; (8006f08 <cppLoop+0xcb8>)
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	4852      	ldr	r0, [pc, #328]	; (8006f04 <cppLoop+0xcb4>)
 8006dbc:	f00b f96f 	bl	801209e <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8006dc0:	4b52      	ldr	r3, [pc, #328]	; (8006f0c <cppLoop+0xcbc>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f3bf 8f5b 	dmb	ish
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	bf0c      	ite	eq
 8006dd2:	2301      	moveq	r3, #1
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d019      	beq.n	8006e10 <cppLoop+0xbc0>
 8006ddc:	484b      	ldr	r0, [pc, #300]	; (8006f0c <cppLoop+0xcbc>)
 8006dde:	f00b f952 	bl	8012086 <__cxa_guard_acquire>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf14      	ite	ne
 8006de8:	2301      	movne	r3, #1
 8006dea:	2300      	moveq	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00e      	beq.n	8006e10 <cppLoop+0xbc0>
 8006df2:	483e      	ldr	r0, [pc, #248]	; (8006eec <cppLoop+0xc9c>)
 8006df4:	f7fc fe34 	bl	8003a60 <_ZN13PathFollowing8getKtValEv>
 8006df8:	ec54 3b10 	vmov	r3, r4, d0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	4621      	mov	r1, r4
 8006e00:	f7f9 ff0a 	bl	8000c18 <__aeabi_d2f>
 8006e04:	4602      	mov	r2, r0
 8006e06:	4b42      	ldr	r3, [pc, #264]	; (8006f10 <cppLoop+0xcc0>)
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	4840      	ldr	r0, [pc, #256]	; (8006f0c <cppLoop+0xcbc>)
 8006e0c:	f00b f947 	bl	801209e <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006e10:	4832      	ldr	r0, [pc, #200]	; (8006edc <cppLoop+0xc8c>)
 8006e12:	f7fb f807 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	bf0c      	ite	eq
 8006e1c:	2301      	moveq	r3, #1
 8006e1e:	2300      	movne	r3, #0
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d021      	beq.n	8006e6a <cppLoop+0xc1a>
			led.LR(-1, 1);
 8006e26:	2201      	movs	r2, #1
 8006e28:	f04f 31ff 	mov.w	r1, #4294967295
 8006e2c:	4828      	ldr	r0, [pc, #160]	; (8006ed0 <cppLoop+0xc80>)
 8006e2e:	f7fb f919 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006e32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e36:	f000 fc29 	bl	800768c <HAL_Delay>

			selector++;
 8006e3a:	4b36      	ldr	r3, [pc, #216]	; (8006f14 <cppLoop+0xcc4>)
 8006e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	3301      	adds	r3, #1
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	b21a      	sxth	r2, r3
 8006e48:	4b32      	ldr	r3, [pc, #200]	; (8006f14 <cppLoop+0xcc4>)
 8006e4a:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8006e4c:	4b31      	ldr	r3, [pc, #196]	; (8006f14 <cppLoop+0xcc4>)
 8006e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	dd02      	ble.n	8006e5c <cppLoop+0xc0c>
 8006e56:	4b2f      	ldr	r3, [pc, #188]	; (8006f14 <cppLoop+0xcc4>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8006e62:	481b      	ldr	r0, [pc, #108]	; (8006ed0 <cppLoop+0xc80>)
 8006e64:	f7fb f8fe 	bl	8002064 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 8006e68:	e2ca      	b.n	8007400 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_R){
 8006e6a:	481c      	ldr	r0, [pc, #112]	; (8006edc <cppLoop+0xc8c>)
 8006e6c:	f7fa ffda 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b10      	cmp	r3, #16
 8006e74:	bf0c      	ite	eq
 8006e76:	2301      	moveq	r3, #1
 8006e78:	2300      	movne	r3, #0
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8082 	beq.w	8006f86 <cppLoop+0xd36>
			led.LR(-1, 1);
 8006e82:	2201      	movs	r2, #1
 8006e84:	f04f 31ff 	mov.w	r1, #4294967295
 8006e88:	4811      	ldr	r0, [pc, #68]	; (8006ed0 <cppLoop+0xc80>)
 8006e8a:	f7fb f8eb 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006e8e:	2064      	movs	r0, #100	; 0x64
 8006e90:	f000 fbfc 	bl	800768c <HAL_Delay>
			if(selector == 0){
 8006e94:	4b1f      	ldr	r3, [pc, #124]	; (8006f14 <cppLoop+0xcc4>)
 8006e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d13c      	bne.n	8006f18 <cppLoop+0xcc8>
				adj_kx = adj_kx + 0.00001;
 8006e9e:	4b18      	ldr	r3, [pc, #96]	; (8006f00 <cppLoop+0xcb0>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7f9 fb68 	bl	8000578 <__aeabi_f2d>
 8006ea8:	a307      	add	r3, pc, #28	; (adr r3, 8006ec8 <cppLoop+0xc78>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	f7f9 fa05 	bl	80002bc <__adddf3>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	4621      	mov	r1, r4
 8006eba:	f7f9 fead 	bl	8000c18 <__aeabi_d2f>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <cppLoop+0xcb0>)
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	e054      	b.n	8006f70 <cppLoop+0xd20>
 8006ec6:	bf00      	nop
 8006ec8:	88e368f1 	.word	0x88e368f1
 8006ecc:	3ee4f8b5 	.word	0x3ee4f8b5
 8006ed0:	200005b0 	.word	0x200005b0
 8006ed4:	08018478 	.word	0x08018478
 8006ed8:	08018484 	.word	0x08018484
 8006edc:	200005a4 	.word	0x200005a4
 8006ee0:	3fc8f5c3 	.word	0x3fc8f5c3
 8006ee4:	00000000 	.word	0x00000000
 8006ee8:	20015db8 	.word	0x20015db8
 8006eec:	2001be70 	.word	0x2001be70
 8006ef0:	408f4000 	.word	0x408f4000
 8006ef4:	080183ac 	.word	0x080183ac
 8006ef8:	080183b8 	.word	0x080183b8
 8006efc:	200335bc 	.word	0x200335bc
 8006f00:	200335b8 	.word	0x200335b8
 8006f04:	200335c4 	.word	0x200335c4
 8006f08:	200335c0 	.word	0x200335c0
 8006f0c:	200335cc 	.word	0x200335cc
 8006f10:	200335c8 	.word	0x200335c8
 8006f14:	2003359e 	.word	0x2003359e
			else if(selector == 1){
 8006f18:	4ba3      	ldr	r3, [pc, #652]	; (80071a8 <cppLoop+0xf58>)
 8006f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d113      	bne.n	8006f4a <cppLoop+0xcfa>
				adj_ky = adj_ky + 0.00001;
 8006f22:	4ba2      	ldr	r3, [pc, #648]	; (80071ac <cppLoop+0xf5c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7f9 fb26 	bl	8000578 <__aeabi_f2d>
 8006f2c:	a39c      	add	r3, pc, #624	; (adr r3, 80071a0 <cppLoop+0xf50>)
 8006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f32:	f7f9 f9c3 	bl	80002bc <__adddf3>
 8006f36:	4603      	mov	r3, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	f7f9 fe6b 	bl	8000c18 <__aeabi_d2f>
 8006f42:	4602      	mov	r2, r0
 8006f44:	4b99      	ldr	r3, [pc, #612]	; (80071ac <cppLoop+0xf5c>)
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	e012      	b.n	8006f70 <cppLoop+0xd20>
				adj_kt = adj_kt + 0.00001;
 8006f4a:	4b99      	ldr	r3, [pc, #612]	; (80071b0 <cppLoop+0xf60>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7f9 fb12 	bl	8000578 <__aeabi_f2d>
 8006f54:	a392      	add	r3, pc, #584	; (adr r3, 80071a0 <cppLoop+0xf50>)
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f7f9 f9af 	bl	80002bc <__adddf3>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	460c      	mov	r4, r1
 8006f62:	4618      	mov	r0, r3
 8006f64:	4621      	mov	r1, r4
 8006f66:	f7f9 fe57 	bl	8000c18 <__aeabi_d2f>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	4b90      	ldr	r3, [pc, #576]	; (80071b0 <cppLoop+0xf60>)
 8006f6e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006f70:	2152      	movs	r1, #82	; 0x52
 8006f72:	4890      	ldr	r0, [pc, #576]	; (80071b4 <cppLoop+0xf64>)
 8006f74:	f7fa ffba 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8006f7e:	488d      	ldr	r0, [pc, #564]	; (80071b4 <cppLoop+0xf64>)
 8006f80:	f7fb f870 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8006f84:	e23c      	b.n	8007400 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_L){
 8006f86:	488c      	ldr	r0, [pc, #560]	; (80071b8 <cppLoop+0xf68>)
 8006f88:	f7fa ff4c 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	bf0c      	ite	eq
 8006f92:	2301      	moveq	r3, #1
 8006f94:	2300      	movne	r3, #0
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d058      	beq.n	800704e <cppLoop+0xdfe>
			led.LR(-1, 1);
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8006fa2:	4884      	ldr	r0, [pc, #528]	; (80071b4 <cppLoop+0xf64>)
 8006fa4:	f7fb f85e 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006fa8:	2064      	movs	r0, #100	; 0x64
 8006faa:	f000 fb6f 	bl	800768c <HAL_Delay>
			if(selector == 0){
 8006fae:	4b7e      	ldr	r3, [pc, #504]	; (80071a8 <cppLoop+0xf58>)
 8006fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d113      	bne.n	8006fe0 <cppLoop+0xd90>
				adj_kx = adj_kx - 0.00001;
 8006fb8:	4b80      	ldr	r3, [pc, #512]	; (80071bc <cppLoop+0xf6c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7f9 fadb 	bl	8000578 <__aeabi_f2d>
 8006fc2:	a377      	add	r3, pc, #476	; (adr r3, 80071a0 <cppLoop+0xf50>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 f976 	bl	80002b8 <__aeabi_dsub>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	f7f9 fe20 	bl	8000c18 <__aeabi_d2f>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	4b78      	ldr	r3, [pc, #480]	; (80071bc <cppLoop+0xf6c>)
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e02b      	b.n	8007038 <cppLoop+0xde8>
			else if(selector == 1){
 8006fe0:	4b71      	ldr	r3, [pc, #452]	; (80071a8 <cppLoop+0xf58>)
 8006fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d113      	bne.n	8007012 <cppLoop+0xdc2>
				adj_ky = adj_ky - 0.00001;
 8006fea:	4b70      	ldr	r3, [pc, #448]	; (80071ac <cppLoop+0xf5c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7f9 fac2 	bl	8000578 <__aeabi_f2d>
 8006ff4:	a36a      	add	r3, pc, #424	; (adr r3, 80071a0 <cppLoop+0xf50>)
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f7f9 f95d 	bl	80002b8 <__aeabi_dsub>
 8006ffe:	4603      	mov	r3, r0
 8007000:	460c      	mov	r4, r1
 8007002:	4618      	mov	r0, r3
 8007004:	4621      	mov	r1, r4
 8007006:	f7f9 fe07 	bl	8000c18 <__aeabi_d2f>
 800700a:	4602      	mov	r2, r0
 800700c:	4b67      	ldr	r3, [pc, #412]	; (80071ac <cppLoop+0xf5c>)
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	e012      	b.n	8007038 <cppLoop+0xde8>
				adj_kt = adj_kt - 0.00001;
 8007012:	4b67      	ldr	r3, [pc, #412]	; (80071b0 <cppLoop+0xf60>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f7f9 faae 	bl	8000578 <__aeabi_f2d>
 800701c:	a360      	add	r3, pc, #384	; (adr r3, 80071a0 <cppLoop+0xf50>)
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f7f9 f949 	bl	80002b8 <__aeabi_dsub>
 8007026:	4603      	mov	r3, r0
 8007028:	460c      	mov	r4, r1
 800702a:	4618      	mov	r0, r3
 800702c:	4621      	mov	r1, r4
 800702e:	f7f9 fdf3 	bl	8000c18 <__aeabi_d2f>
 8007032:	4602      	mov	r2, r0
 8007034:	4b5e      	ldr	r3, [pc, #376]	; (80071b0 <cppLoop+0xf60>)
 8007036:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007038:	2152      	movs	r1, #82	; 0x52
 800703a:	485e      	ldr	r0, [pc, #376]	; (80071b4 <cppLoop+0xf64>)
 800703c:	f7fa ff56 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007040:	2200      	movs	r2, #0
 8007042:	f04f 31ff 	mov.w	r1, #4294967295
 8007046:	485b      	ldr	r0, [pc, #364]	; (80071b4 <cppLoop+0xf64>)
 8007048:	f7fb f80c 	bl	8002064 <_ZN3LED2LREaa>
		break;
 800704c:	e1d8      	b.n	8007400 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_D){
 800704e:	485a      	ldr	r0, [pc, #360]	; (80071b8 <cppLoop+0xf68>)
 8007050:	f7fa fee8 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8007054:	4603      	mov	r3, r0
 8007056:	2b04      	cmp	r3, #4
 8007058:	bf0c      	ite	eq
 800705a:	2301      	moveq	r3, #1
 800705c:	2300      	movne	r3, #0
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d048      	beq.n	80070f6 <cppLoop+0xea6>
			led.LR(-1, 1);
 8007064:	2201      	movs	r2, #1
 8007066:	f04f 31ff 	mov.w	r1, #4294967295
 800706a:	4852      	ldr	r0, [pc, #328]	; (80071b4 <cppLoop+0xf64>)
 800706c:	f7fa fffa 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007070:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007074:	f000 fb0a 	bl	800768c <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 8007078:	f107 030c 	add.w	r3, r7, #12
 800707c:	2201      	movs	r2, #1
 800707e:	4950      	ldr	r1, [pc, #320]	; (80071c0 <cppLoop+0xf70>)
 8007080:	4850      	ldr	r0, [pc, #320]	; (80071c4 <cppLoop+0xf74>)
 8007082:	f7fa fb17 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 8007086:	f107 0308 	add.w	r3, r7, #8
 800708a:	2201      	movs	r2, #1
 800708c:	494e      	ldr	r1, [pc, #312]	; (80071c8 <cppLoop+0xf78>)
 800708e:	484d      	ldr	r0, [pc, #308]	; (80071c4 <cppLoop+0xf74>)
 8007090:	f7fa fb10 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 8007094:	1d3b      	adds	r3, r7, #4
 8007096:	2201      	movs	r2, #1
 8007098:	494c      	ldr	r1, [pc, #304]	; (80071cc <cppLoop+0xf7c>)
 800709a:	484a      	ldr	r0, [pc, #296]	; (80071c4 <cppLoop+0xf74>)
 800709c:	f7fa fb0a 	bl	80016b4 <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7f9 fa68 	bl	8000578 <__aeabi_f2d>
 80070a8:	4604      	mov	r4, r0
 80070aa:	460d      	mov	r5, r1
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7f9 fa62 	bl	8000578 <__aeabi_f2d>
 80070b4:	4680      	mov	r8, r0
 80070b6:	4689      	mov	r9, r1
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7f9 fa5c 	bl	8000578 <__aeabi_f2d>
 80070c0:	4602      	mov	r2, r0
 80070c2:	460b      	mov	r3, r1
 80070c4:	ec43 2b12 	vmov	d2, r2, r3
 80070c8:	ec49 8b11 	vmov	d1, r8, r9
 80070cc:	ec45 4b10 	vmov	d0, r4, r5
 80070d0:	483f      	ldr	r0, [pc, #252]	; (80071d0 <cppLoop+0xf80>)
 80070d2:	f7fc fc7d 	bl	80039d0 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4a38      	ldr	r2, [pc, #224]	; (80071bc <cppLoop+0xf6c>)
 80070da:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4a33      	ldr	r2, [pc, #204]	; (80071ac <cppLoop+0xf5c>)
 80070e0:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a32      	ldr	r2, [pc, #200]	; (80071b0 <cppLoop+0xf60>)
 80070e6:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80070e8:	2200      	movs	r2, #0
 80070ea:	f04f 31ff 	mov.w	r1, #4294967295
 80070ee:	4831      	ldr	r0, [pc, #196]	; (80071b4 <cppLoop+0xf64>)
 80070f0:	f7fa ffb8 	bl	8002064 <_ZN3LED2LREaa>
		break;
 80070f4:	e184      	b.n	8007400 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_C){
 80070f6:	4830      	ldr	r0, [pc, #192]	; (80071b8 <cppLoop+0xf68>)
 80070f8:	f7fa fe94 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b02      	cmp	r3, #2
 8007100:	bf0c      	ite	eq
 8007102:	2301      	moveq	r3, #1
 8007104:	2300      	movne	r3, #0
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8179 	beq.w	8007400 <cppLoop+0x11b0>
			led.LR(-1, 1);
 800710e:	2201      	movs	r2, #1
 8007110:	f04f 31ff 	mov.w	r1, #4294967295
 8007114:	4827      	ldr	r0, [pc, #156]	; (80071b4 <cppLoop+0xf64>)
 8007116:	f7fa ffa5 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800711a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800711e:	f000 fab5 	bl	800768c <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 8007122:	2300      	movs	r3, #0
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	4b25      	ldr	r3, [pc, #148]	; (80071bc <cppLoop+0xf6c>)
 8007128:	2201      	movs	r2, #1
 800712a:	4925      	ldr	r1, [pc, #148]	; (80071c0 <cppLoop+0xf70>)
 800712c:	4825      	ldr	r0, [pc, #148]	; (80071c4 <cppLoop+0xf74>)
 800712e:	f7fa fa5b 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 8007132:	2300      	movs	r3, #0
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <cppLoop+0xf5c>)
 8007138:	2201      	movs	r2, #1
 800713a:	4923      	ldr	r1, [pc, #140]	; (80071c8 <cppLoop+0xf78>)
 800713c:	4821      	ldr	r0, [pc, #132]	; (80071c4 <cppLoop+0xf74>)
 800713e:	f7fa fa53 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 8007142:	2300      	movs	r3, #0
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	4b1a      	ldr	r3, [pc, #104]	; (80071b0 <cppLoop+0xf60>)
 8007148:	2201      	movs	r2, #1
 800714a:	4920      	ldr	r1, [pc, #128]	; (80071cc <cppLoop+0xf7c>)
 800714c:	481d      	ldr	r0, [pc, #116]	; (80071c4 <cppLoop+0xf74>)
 800714e:	f7fa fa4b 	bl	80015e8 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 8007152:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <cppLoop+0xf6c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f7f9 fa0e 	bl	8000578 <__aeabi_f2d>
 800715c:	4604      	mov	r4, r0
 800715e:	460d      	mov	r5, r1
 8007160:	4b12      	ldr	r3, [pc, #72]	; (80071ac <cppLoop+0xf5c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4618      	mov	r0, r3
 8007166:	f7f9 fa07 	bl	8000578 <__aeabi_f2d>
 800716a:	4680      	mov	r8, r0
 800716c:	4689      	mov	r9, r1
 800716e:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <cppLoop+0xf60>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f7f9 fa00 	bl	8000578 <__aeabi_f2d>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	ec43 2b12 	vmov	d2, r2, r3
 8007180:	ec49 8b11 	vmov	d1, r8, r9
 8007184:	ec45 4b10 	vmov	d0, r4, r5
 8007188:	4811      	ldr	r0, [pc, #68]	; (80071d0 <cppLoop+0xf80>)
 800718a:	f7fc fc21 	bl	80039d0 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 800718e:	2200      	movs	r2, #0
 8007190:	f04f 31ff 	mov.w	r1, #4294967295
 8007194:	4807      	ldr	r0, [pc, #28]	; (80071b4 <cppLoop+0xf64>)
 8007196:	f7fa ff65 	bl	8002064 <_ZN3LED2LREaa>
		break;
 800719a:	e131      	b.n	8007400 <cppLoop+0x11b0>
 800719c:	f3af 8000 	nop.w
 80071a0:	88e368f1 	.word	0x88e368f1
 80071a4:	3ee4f8b5 	.word	0x3ee4f8b5
 80071a8:	2003359e 	.word	0x2003359e
 80071ac:	200335c0 	.word	0x200335c0
 80071b0:	200335c8 	.word	0x200335c8
 80071b4:	200005b0 	.word	0x200005b0
 80071b8:	200005a4 	.word	0x200005a4
 80071bc:	200335b8 	.word	0x200335b8
 80071c0:	0801848c 	.word	0x0801848c
 80071c4:	080183d0 	.word	0x080183d0
 80071c8:	08018494 	.word	0x08018494
 80071cc:	0801849c 	.word	0x0801849c
 80071d0:	2001be70 	.word	0x2001be70

	case 9:
		led.fullColor('M');
 80071d4:	214d      	movs	r1, #77	; 0x4d
 80071d6:	4898      	ldr	r0, [pc, #608]	; (8007438 <cppLoop+0x11e8>)
 80071d8:	f7fa fe88 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80071dc:	f7f9 ff60 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80071e0:	2100      	movs	r1, #0
 80071e2:	2000      	movs	r0, #0
 80071e4:	f7f9 ff6c 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 80071e8:	4894      	ldr	r0, [pc, #592]	; (800743c <cppLoop+0x11ec>)
 80071ea:	f7f9 ff93 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80071ee:	2101      	movs	r1, #1
 80071f0:	2000      	movs	r0, #0
 80071f2:	f7f9 ff65 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80071f6:	4892      	ldr	r0, [pc, #584]	; (8007440 <cppLoop+0x11f0>)
 80071f8:	f7f9 ff8c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80071fc:	4891      	ldr	r0, [pc, #580]	; (8007444 <cppLoop+0x11f4>)
 80071fe:	f7fa fe11 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8007202:	4603      	mov	r3, r0
 8007204:	2b02      	cmp	r3, #2
 8007206:	bf0c      	ite	eq
 8007208:	2301      	moveq	r3, #1
 800720a:	2300      	movne	r3, #0
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	f000 80f8 	beq.w	8007404 <cppLoop+0x11b4>
			HAL_Delay(1500);
 8007214:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007218:	f000 fa38 	bl	800768c <HAL_Delay>
			led.LR(-1, 1);
 800721c:	2201      	movs	r2, #1
 800721e:	f04f 31ff 	mov.w	r1, #4294967295
 8007222:	4885      	ldr	r0, [pc, #532]	; (8007438 <cppLoop+0x11e8>)
 8007224:	f7fa ff1e 	bl	8002064 <_ZN3LED2LREaa>

			logger.start();
 8007228:	4887      	ldr	r0, [pc, #540]	; (8007448 <cppLoop+0x11f8>)
 800722a:	f7fc f8dd 	bl	80033e8 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 800722e:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8007420 <cppLoop+0x11d0>
 8007232:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8007428 <cppLoop+0x11d8>
 8007236:	4885      	ldr	r0, [pc, #532]	; (800744c <cppLoop+0x11fc>)
 8007238:	f7fc f96c 	bl	8003514 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 800723c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007240:	f000 fa24 	bl	800768c <HAL_Delay>

			logger.stop();
 8007244:	4880      	ldr	r0, [pc, #512]	; (8007448 <cppLoop+0x11f8>)
 8007246:	f7fc f8e0 	bl	800340a <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 800724a:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8007430 <cppLoop+0x11e0>
 800724e:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8007430 <cppLoop+0x11e0>
 8007252:	487e      	ldr	r0, [pc, #504]	; (800744c <cppLoop+0x11fc>)
 8007254:	f7fc f95e 	bl	8003514 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8007258:	4a7d      	ldr	r2, [pc, #500]	; (8007450 <cppLoop+0x1200>)
 800725a:	497e      	ldr	r1, [pc, #504]	; (8007454 <cppLoop+0x1204>)
 800725c:	487a      	ldr	r0, [pc, #488]	; (8007448 <cppLoop+0x11f8>)
 800725e:	f7fb fffa 	bl	8003256 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8007262:	2200      	movs	r2, #0
 8007264:	f04f 31ff 	mov.w	r1, #4294967295
 8007268:	4873      	ldr	r0, [pc, #460]	; (8007438 <cppLoop+0x11e8>)
 800726a:	f7fa fefb 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 800726e:	e0c9      	b.n	8007404 <cppLoop+0x11b4>

	case 10:
		led.fullColor('Y');
 8007270:	2159      	movs	r1, #89	; 0x59
 8007272:	4871      	ldr	r0, [pc, #452]	; (8007438 <cppLoop+0x11e8>)
 8007274:	f7fa fe3a 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007278:	f7f9 ff12 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800727c:	2100      	movs	r1, #0
 800727e:	2000      	movs	r0, #0
 8007280:	f7f9 ff1e 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8007284:	4874      	ldr	r0, [pc, #464]	; (8007458 <cppLoop+0x1208>)
 8007286:	f7f9 ff45 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800728a:	2101      	movs	r1, #1
 800728c:	2000      	movs	r0, #0
 800728e:	f7f9 ff17 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8007292:	4872      	ldr	r0, [pc, #456]	; (800745c <cppLoop+0x120c>)
 8007294:	f7f9 ff3e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007298:	486a      	ldr	r0, [pc, #424]	; (8007444 <cppLoop+0x11f4>)
 800729a:	f7fa fdc3 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	bf0c      	ite	eq
 80072a4:	2301      	moveq	r3, #1
 80072a6:	2300      	movne	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 80ac 	beq.w	8007408 <cppLoop+0x11b8>
			HAL_Delay(1500);
 80072b0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80072b4:	f000 f9ea 	bl	800768c <HAL_Delay>
			led.LR(-1, 1);
 80072b8:	2201      	movs	r2, #1
 80072ba:	f04f 31ff 	mov.w	r1, #4294967295
 80072be:	485e      	ldr	r0, [pc, #376]	; (8007438 <cppLoop+0x11e8>)
 80072c0:	f7fa fed0 	bl	8002064 <_ZN3LED2LREaa>

			logger.start();
 80072c4:	4860      	ldr	r0, [pc, #384]	; (8007448 <cppLoop+0x11f8>)
 80072c6:	f7fc f88f 	bl	80033e8 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80072ca:	4865      	ldr	r0, [pc, #404]	; (8007460 <cppLoop+0x1210>)
 80072cc:	f7fd f821 	bl	8004312 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80072d0:	eddf 0a64 	vldr	s1, [pc, #400]	; 8007464 <cppLoop+0x1214>
 80072d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072d8:	4861      	ldr	r0, [pc, #388]	; (8007460 <cppLoop+0x1210>)
 80072da:	f7fc ffad 	bl	8004238 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80072de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072e2:	f000 f9d3 	bl	800768c <HAL_Delay>

			logger.stop();
 80072e6:	4858      	ldr	r0, [pc, #352]	; (8007448 <cppLoop+0x11f8>)
 80072e8:	f7fc f88f 	bl	800340a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80072ec:	485c      	ldr	r0, [pc, #368]	; (8007460 <cppLoop+0x1210>)
 80072ee:	f7fd f823 	bl	8004338 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80072f2:	4a5d      	ldr	r2, [pc, #372]	; (8007468 <cppLoop+0x1218>)
 80072f4:	4957      	ldr	r1, [pc, #348]	; (8007454 <cppLoop+0x1204>)
 80072f6:	4854      	ldr	r0, [pc, #336]	; (8007448 <cppLoop+0x11f8>)
 80072f8:	f7fb ffad 	bl	8003256 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80072fc:	2200      	movs	r2, #0
 80072fe:	f04f 31ff 	mov.w	r1, #4294967295
 8007302:	484d      	ldr	r0, [pc, #308]	; (8007438 <cppLoop+0x11e8>)
 8007304:	f7fa feae 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8007308:	e07e      	b.n	8007408 <cppLoop+0x11b8>

	case 11:
		led.fullColor('C');
 800730a:	2143      	movs	r1, #67	; 0x43
 800730c:	484a      	ldr	r0, [pc, #296]	; (8007438 <cppLoop+0x11e8>)
 800730e:	f7fa fded 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007312:	f7f9 fec5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007316:	2100      	movs	r1, #0
 8007318:	2000      	movs	r0, #0
 800731a:	f7f9 fed1 	bl	80010c0 <lcd_locate>
		lcd_printf("11      ");
 800731e:	4853      	ldr	r0, [pc, #332]	; (800746c <cppLoop+0x121c>)
 8007320:	f7f9 fef8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007324:	2101      	movs	r1, #1
 8007326:	2000      	movs	r0, #0
 8007328:	f7f9 feca 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800732c:	4850      	ldr	r0, [pc, #320]	; (8007470 <cppLoop+0x1220>)
 800732e:	f7f9 fef1 	bl	8001114 <lcd_printf>

		break;
 8007332:	e06a      	b.n	800740a <cppLoop+0x11ba>

	case 12:
		led.fullColor('R');
 8007334:	2152      	movs	r1, #82	; 0x52
 8007336:	4840      	ldr	r0, [pc, #256]	; (8007438 <cppLoop+0x11e8>)
 8007338:	f7fa fdd8 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 800733c:	f7f9 feb0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007340:	2100      	movs	r1, #0
 8007342:	2000      	movs	r0, #0
 8007344:	f7f9 febc 	bl	80010c0 <lcd_locate>
		lcd_printf("12      ");
 8007348:	484a      	ldr	r0, [pc, #296]	; (8007474 <cppLoop+0x1224>)
 800734a:	f7f9 fee3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800734e:	2101      	movs	r1, #1
 8007350:	2000      	movs	r0, #0
 8007352:	f7f9 feb5 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007356:	4846      	ldr	r0, [pc, #280]	; (8007470 <cppLoop+0x1220>)
 8007358:	f7f9 fedc 	bl	8001114 <lcd_printf>

		break;
 800735c:	e055      	b.n	800740a <cppLoop+0x11ba>

	case 13:
		led.fullColor('G');
 800735e:	2147      	movs	r1, #71	; 0x47
 8007360:	4835      	ldr	r0, [pc, #212]	; (8007438 <cppLoop+0x11e8>)
 8007362:	f7fa fdc3 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007366:	f7f9 fe9b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800736a:	2100      	movs	r1, #0
 800736c:	2000      	movs	r0, #0
 800736e:	f7f9 fea7 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 8007372:	4841      	ldr	r0, [pc, #260]	; (8007478 <cppLoop+0x1228>)
 8007374:	f7f9 fece 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007378:	2101      	movs	r1, #1
 800737a:	2000      	movs	r0, #0
 800737c:	f7f9 fea0 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007380:	483b      	ldr	r0, [pc, #236]	; (8007470 <cppLoop+0x1220>)
 8007382:	f7f9 fec7 	bl	8001114 <lcd_printf>

		break;
 8007386:	e040      	b.n	800740a <cppLoop+0x11ba>

	case 14:
		led.fullColor('B');
 8007388:	2142      	movs	r1, #66	; 0x42
 800738a:	482b      	ldr	r0, [pc, #172]	; (8007438 <cppLoop+0x11e8>)
 800738c:	f7fa fdae 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007390:	f7f9 fe86 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007394:	2100      	movs	r1, #0
 8007396:	2000      	movs	r0, #0
 8007398:	f7f9 fe92 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 800739c:	4837      	ldr	r0, [pc, #220]	; (800747c <cppLoop+0x122c>)
 800739e:	f7f9 feb9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80073a2:	2101      	movs	r1, #1
 80073a4:	2000      	movs	r0, #0
 80073a6:	f7f9 fe8b 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80073aa:	4831      	ldr	r0, [pc, #196]	; (8007470 <cppLoop+0x1220>)
 80073ac:	f7f9 feb2 	bl	8001114 <lcd_printf>

		break;
 80073b0:	e02b      	b.n	800740a <cppLoop+0x11ba>

	case 15:
		led.fullColor('M');
 80073b2:	214d      	movs	r1, #77	; 0x4d
 80073b4:	4820      	ldr	r0, [pc, #128]	; (8007438 <cppLoop+0x11e8>)
 80073b6:	f7fa fd99 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80073ba:	f7f9 fe71 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80073be:	2100      	movs	r1, #0
 80073c0:	2000      	movs	r0, #0
 80073c2:	f7f9 fe7d 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 80073c6:	482e      	ldr	r0, [pc, #184]	; (8007480 <cppLoop+0x1230>)
 80073c8:	f7f9 fea4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80073cc:	2101      	movs	r1, #1
 80073ce:	2000      	movs	r0, #0
 80073d0:	f7f9 fe76 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80073d4:	4826      	ldr	r0, [pc, #152]	; (8007470 <cppLoop+0x1220>)
 80073d6:	f7f9 fe9d 	bl	8001114 <lcd_printf>

		break;
 80073da:	e016      	b.n	800740a <cppLoop+0x11ba>

	default:
		break;
 80073dc:	bf00      	nop
 80073de:	e014      	b.n	800740a <cppLoop+0x11ba>
		break;
 80073e0:	bf00      	nop
 80073e2:	e012      	b.n	800740a <cppLoop+0x11ba>
		break;
 80073e4:	bf00      	nop
 80073e6:	e010      	b.n	800740a <cppLoop+0x11ba>
		break;
 80073e8:	bf00      	nop
 80073ea:	e00e      	b.n	800740a <cppLoop+0x11ba>
		break;
 80073ec:	bf00      	nop
 80073ee:	e00c      	b.n	800740a <cppLoop+0x11ba>
		break;
 80073f0:	bf00      	nop
 80073f2:	e00a      	b.n	800740a <cppLoop+0x11ba>
		break;
 80073f4:	bf00      	nop
 80073f6:	e008      	b.n	800740a <cppLoop+0x11ba>
		break;
 80073f8:	bf00      	nop
 80073fa:	e006      	b.n	800740a <cppLoop+0x11ba>
		break;
 80073fc:	bf00      	nop
 80073fe:	e004      	b.n	800740a <cppLoop+0x11ba>
		break;
 8007400:	bf00      	nop
 8007402:	e002      	b.n	800740a <cppLoop+0x11ba>
		break;
 8007404:	bf00      	nop
 8007406:	e000      	b.n	800740a <cppLoop+0x11ba>
		break;
 8007408:	bf00      	nop

	}

	HAL_Delay(30);
 800740a:	201e      	movs	r0, #30
 800740c:	f000 f93e 	bl	800768c <HAL_Delay>

}
 8007410:	bf00      	nop
 8007412:	3724      	adds	r7, #36	; 0x24
 8007414:	46bd      	mov	sp, r7
 8007416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w
 8007420:	33333333 	.word	0x33333333
 8007424:	bfd33333 	.word	0xbfd33333
 8007428:	33333333 	.word	0x33333333
 800742c:	3fd33333 	.word	0x3fd33333
	...
 8007438:	200005b0 	.word	0x200005b0
 800743c:	080184a4 	.word	0x080184a4
 8007440:	08018404 	.word	0x08018404
 8007444:	200005a4 	.word	0x200005a4
 8007448:	200005d4 	.word	0x200005d4
 800744c:	200005ac 	.word	0x200005ac
 8007450:	080184ac 	.word	0x080184ac
 8007454:	080184b8 	.word	0x080184b8
 8007458:	080184c4 	.word	0x080184c4
 800745c:	080184c8 	.word	0x080184c8
 8007460:	20015db8 	.word	0x20015db8
 8007464:	00000000 	.word	0x00000000
 8007468:	080184d4 	.word	0x080184d4
 800746c:	080184e0 	.word	0x080184e0
 8007470:	080184ec 	.word	0x080184ec
 8007474:	080184f8 	.word	0x080184f8
 8007478:	08018504 	.word	0x08018504
 800747c:	08018510 	.word	0x08018510
 8007480:	0801851c 	.word	0x0801851c

08007484 <_Z41__static_initialization_and_destruction_0ii>:
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af04      	add	r7, sp, #16
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d13b      	bne.n	800750c <_Z41__static_initialization_and_destruction_0ii+0x88>
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800749a:	4293      	cmp	r3, r2
 800749c:	d136      	bne.n	800750c <_Z41__static_initialization_and_destruction_0ii+0x88>
LineSensor line_sensor;
 800749e:	481d      	ldr	r0, [pc, #116]	; (8007514 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80074a0:	f7fa fe18 	bl	80020d4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80074a4:	481c      	ldr	r0, [pc, #112]	; (8007518 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80074a6:	f7fc fbbb 	bl	8003c20 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80074aa:	481c      	ldr	r0, [pc, #112]	; (800751c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80074ac:	f7fa fcae 	bl	8001e0c <_ZN8JoyStickC1Ev>
Motor motor;
 80074b0:	481b      	ldr	r0, [pc, #108]	; (8007520 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80074b2:	f7fb ffbb 	bl	800342c <_ZN5MotorC1Ev>
IMU imu;
 80074b6:	481b      	ldr	r0, [pc, #108]	; (8007524 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80074b8:	f7fa faae 	bl	8001a18 <_ZN3IMUC1Ev>
Logger logger;
 80074bc:	481a      	ldr	r0, [pc, #104]	; (8007528 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80074be:	f7fb fd89 	bl	8002fd4 <_ZN6LoggerC1Ev>
Encoder encoder;
 80074c2:	481a      	ldr	r0, [pc, #104]	; (800752c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80074c4:	f7f9 fe46 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80074c8:	4b16      	ldr	r3, [pc, #88]	; (8007524 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80074ca:	4a18      	ldr	r2, [pc, #96]	; (800752c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80074cc:	4914      	ldr	r1, [pc, #80]	; (8007520 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80074ce:	4818      	ldr	r0, [pc, #96]	; (8007530 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80074d0:	f7fc fd86 	bl	8003fe0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80074d4:	4b16      	ldr	r3, [pc, #88]	; (8007530 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80074d6:	4a13      	ldr	r2, [pc, #76]	; (8007524 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80074d8:	4914      	ldr	r1, [pc, #80]	; (800752c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80074da:	4816      	ldr	r0, [pc, #88]	; (8007534 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80074dc:	f7fc f88c 	bl	80035f8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger);
 80074e0:	4b11      	ldr	r3, [pc, #68]	; (8007528 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80074e2:	9303      	str	r3, [sp, #12]
 80074e4:	4b13      	ldr	r3, [pc, #76]	; (8007534 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80074e6:	9302      	str	r3, [sp, #8]
 80074e8:	4b10      	ldr	r3, [pc, #64]	; (800752c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80074f2:	4a08      	ldr	r2, [pc, #32]	; (8007514 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80074f4:	490a      	ldr	r1, [pc, #40]	; (8007520 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80074f6:	4810      	ldr	r0, [pc, #64]	; (8007538 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80074f8:	f7fb f954 	bl	80027a4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>
SystemIdentification sys_ident(&logger, &motor);
 80074fc:	4a08      	ldr	r2, [pc, #32]	; (8007520 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80074fe:	490a      	ldr	r1, [pc, #40]	; (8007528 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007500:	480e      	ldr	r0, [pc, #56]	; (800753c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007502:	f7fc fc6b 	bl	8003ddc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8007506:	480e      	ldr	r0, [pc, #56]	; (8007540 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007508:	f7fc f9aa 	bl	8003860 <_ZN13PathFollowingC1Ev>
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	200002a4 	.word	0x200002a4
 8007518:	2000059c 	.word	0x2000059c
 800751c:	200005a4 	.word	0x200005a4
 8007520:	200005ac 	.word	0x200005ac
 8007524:	200005c0 	.word	0x200005c0
 8007528:	200005d4 	.word	0x200005d4
 800752c:	20015d9c 	.word	0x20015d9c
 8007530:	20015db8 	.word	0x20015db8
 8007534:	20015df8 	.word	0x20015df8
 8007538:	20015e28 	.word	0x20015e28
 800753c:	2001bc64 	.word	0x2001bc64
 8007540:	2001be70 	.word	0x2001be70

08007544 <_GLOBAL__sub_I_line_sensor>:
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
 8007548:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800754c:	2001      	movs	r0, #1
 800754e:	f7ff ff99 	bl	8007484 <_Z41__static_initialization_and_destruction_0ii>
 8007552:	bd80      	pop	{r7, pc}

08007554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800758c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007558:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800755a:	e003      	b.n	8007564 <LoopCopyDataInit>

0800755c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800755c:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800755e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007560:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007562:	3104      	adds	r1, #4

08007564 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007564:	480b      	ldr	r0, [pc, #44]	; (8007594 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007566:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007568:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800756a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800756c:	d3f6      	bcc.n	800755c <CopyDataInit>
  ldr  r2, =_sbss
 800756e:	4a0b      	ldr	r2, [pc, #44]	; (800759c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007570:	e002      	b.n	8007578 <LoopFillZerobss>

08007572 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007572:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007574:	f842 3b04 	str.w	r3, [r2], #4

08007578 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007578:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800757a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800757c:	d3f9      	bcc.n	8007572 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800757e:	f7fe fced 	bl	8005f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007582:	f00b fded 	bl	8013160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007586:	f7fc ffb3 	bl	80044f0 <main>
  bx  lr    
 800758a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800758c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007590:	08018b20 	.word	0x08018b20
  ldr  r0, =_sdata
 8007594:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007598:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800759c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80075a0:	20037fb0 	.word	0x20037fb0

080075a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80075a4:	e7fe      	b.n	80075a4 <ADC_IRQHandler>
	...

080075a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80075ac:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <HAL_Init+0x40>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0d      	ldr	r2, [pc, #52]	; (80075e8 <HAL_Init+0x40>)
 80075b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <HAL_Init+0x40>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a0a      	ldr	r2, [pc, #40]	; (80075e8 <HAL_Init+0x40>)
 80075be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80075c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80075c4:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <HAL_Init+0x40>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a07      	ldr	r2, [pc, #28]	; (80075e8 <HAL_Init+0x40>)
 80075ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80075d0:	2003      	movs	r0, #3
 80075d2:	f000 fd51 	bl	8008078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80075d6:	2000      	movs	r0, #0
 80075d8:	f000 f808 	bl	80075ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80075dc:	f7fd feac 	bl	8005338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	40023c00 	.word	0x40023c00

080075ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80075f4:	4b12      	ldr	r3, [pc, #72]	; (8007640 <HAL_InitTick+0x54>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	4b12      	ldr	r3, [pc, #72]	; (8007644 <HAL_InitTick+0x58>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	4619      	mov	r1, r3
 80075fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007602:	fbb3 f3f1 	udiv	r3, r3, r1
 8007606:	fbb2 f3f3 	udiv	r3, r2, r3
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fd69 	bl	80080e2 <HAL_SYSTICK_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e00e      	b.n	8007638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b0f      	cmp	r3, #15
 800761e:	d80a      	bhi.n	8007636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007620:	2200      	movs	r2, #0
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	f000 fd31 	bl	800808e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800762c:	4a06      	ldr	r2, [pc, #24]	; (8007648 <HAL_InitTick+0x5c>)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	e000      	b.n	8007638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000000 	.word	0x20000000
 8007644:	20000008 	.word	0x20000008
 8007648:	20000004 	.word	0x20000004

0800764c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800764c:	b480      	push	{r7}
 800764e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007650:	4b06      	ldr	r3, [pc, #24]	; (800766c <HAL_IncTick+0x20>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	4b06      	ldr	r3, [pc, #24]	; (8007670 <HAL_IncTick+0x24>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4413      	add	r3, r2
 800765c:	4a04      	ldr	r2, [pc, #16]	; (8007670 <HAL_IncTick+0x24>)
 800765e:	6013      	str	r3, [r2, #0]
}
 8007660:	bf00      	nop
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	20000008 	.word	0x20000008
 8007670:	20035f38 	.word	0x20035f38

08007674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  return uwTick;
 8007678:	4b03      	ldr	r3, [pc, #12]	; (8007688 <HAL_GetTick+0x14>)
 800767a:	681b      	ldr	r3, [r3, #0]
}
 800767c:	4618      	mov	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20035f38 	.word	0x20035f38

0800768c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007694:	f7ff ffee 	bl	8007674 <HAL_GetTick>
 8007698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a4:	d005      	beq.n	80076b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80076a6:	4b09      	ldr	r3, [pc, #36]	; (80076cc <HAL_Delay+0x40>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80076b2:	bf00      	nop
 80076b4:	f7ff ffde 	bl	8007674 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d8f7      	bhi.n	80076b4 <HAL_Delay+0x28>
  {
  }
}
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	20000008 	.word	0x20000008

080076d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e033      	b.n	800774e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d109      	bne.n	8007702 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fd fe4a 	bl	8005388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f003 0310 	and.w	r3, r3, #16
 800770a:	2b00      	cmp	r3, #0
 800770c:	d118      	bne.n	8007740 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007716:	f023 0302 	bic.w	r3, r3, #2
 800771a:	f043 0202 	orr.w	r2, r3, #2
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa5a 	bl	8007bdc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	f023 0303 	bic.w	r3, r3, #3
 8007736:	f043 0201 	orr.w	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	641a      	str	r2, [r3, #64]	; 0x40
 800773e:	e001      	b.n	8007744 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <HAL_ADC_Start_DMA+0x1e>
 8007772:	2302      	movs	r3, #2
 8007774:	e0cc      	b.n	8007910 <HAL_ADC_Start_DMA+0x1b8>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b01      	cmp	r3, #1
 800778a:	d018      	beq.n	80077be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0201 	orr.w	r2, r2, #1
 800779a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800779c:	4b5e      	ldr	r3, [pc, #376]	; (8007918 <HAL_ADC_Start_DMA+0x1c0>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a5e      	ldr	r2, [pc, #376]	; (800791c <HAL_ADC_Start_DMA+0x1c4>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	0c9a      	lsrs	r2, r3, #18
 80077a8:	4613      	mov	r3, r2
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	4413      	add	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80077b0:	e002      	b.n	80077b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1f9      	bne.n	80077b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	f040 80a0 	bne.w	800790e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80077d6:	f023 0301 	bic.w	r3, r3, #1
 80077da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d007      	beq.n	8007800 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780c:	d106      	bne.n	800781c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007812:	f023 0206 	bic.w	r2, r3, #6
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	645a      	str	r2, [r3, #68]	; 0x44
 800781a:	e002      	b.n	8007822 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800782a:	4b3d      	ldr	r3, [pc, #244]	; (8007920 <HAL_ADC_Start_DMA+0x1c8>)
 800782c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	4a3c      	ldr	r2, [pc, #240]	; (8007924 <HAL_ADC_Start_DMA+0x1cc>)
 8007834:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	4a3b      	ldr	r2, [pc, #236]	; (8007928 <HAL_ADC_Start_DMA+0x1d0>)
 800783c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	4a3a      	ldr	r2, [pc, #232]	; (800792c <HAL_ADC_Start_DMA+0x1d4>)
 8007844:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800784e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800785e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689a      	ldr	r2, [r3, #8]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800786e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	334c      	adds	r3, #76	; 0x4c
 800787a:	4619      	mov	r1, r3
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f000 fcea 	bl	8008258 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f003 031f 	and.w	r3, r3, #31
 800788c:	2b00      	cmp	r3, #0
 800788e:	d12a      	bne.n	80078e6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a26      	ldr	r2, [pc, #152]	; (8007930 <HAL_ADC_Start_DMA+0x1d8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d015      	beq.n	80078c6 <HAL_ADC_Start_DMA+0x16e>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a25      	ldr	r2, [pc, #148]	; (8007934 <HAL_ADC_Start_DMA+0x1dc>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d105      	bne.n	80078b0 <HAL_ADC_Start_DMA+0x158>
 80078a4:	4b1e      	ldr	r3, [pc, #120]	; (8007920 <HAL_ADC_Start_DMA+0x1c8>)
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a20      	ldr	r2, [pc, #128]	; (8007938 <HAL_ADC_Start_DMA+0x1e0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d129      	bne.n	800790e <HAL_ADC_Start_DMA+0x1b6>
 80078ba:	4b19      	ldr	r3, [pc, #100]	; (8007920 <HAL_ADC_Start_DMA+0x1c8>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f003 031f 	and.w	r3, r3, #31
 80078c2:	2b0f      	cmp	r3, #15
 80078c4:	d823      	bhi.n	800790e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d11c      	bne.n	800790e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078e2:	609a      	str	r2, [r3, #8]
 80078e4:	e013      	b.n	800790e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a11      	ldr	r2, [pc, #68]	; (8007930 <HAL_ADC_Start_DMA+0x1d8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d10e      	bne.n	800790e <HAL_ADC_Start_DMA+0x1b6>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d107      	bne.n	800790e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800790c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20000000 	.word	0x20000000
 800791c:	431bde83 	.word	0x431bde83
 8007920:	40012300 	.word	0x40012300
 8007924:	08007dd5 	.word	0x08007dd5
 8007928:	08007e8f 	.word	0x08007e8f
 800792c:	08007eab 	.word	0x08007eab
 8007930:	40012000 	.word	0x40012000
 8007934:	40012100 	.word	0x40012100
 8007938:	40012200 	.word	0x40012200

0800793c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_ADC_ConfigChannel+0x1c>
 8007990:	2302      	movs	r3, #2
 8007992:	e113      	b.n	8007bbc <HAL_ADC_ConfigChannel+0x244>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b09      	cmp	r3, #9
 80079a2:	d925      	bls.n	80079f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68d9      	ldr	r1, [r3, #12]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	4613      	mov	r3, r2
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	4413      	add	r3, r2
 80079b8:	3b1e      	subs	r3, #30
 80079ba:	2207      	movs	r2, #7
 80079bc:	fa02 f303 	lsl.w	r3, r2, r3
 80079c0:	43da      	mvns	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	400a      	ands	r2, r1
 80079c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68d9      	ldr	r1, [r3, #12]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	4618      	mov	r0, r3
 80079dc:	4603      	mov	r3, r0
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	4403      	add	r3, r0
 80079e2:	3b1e      	subs	r3, #30
 80079e4:	409a      	lsls	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	60da      	str	r2, [r3, #12]
 80079ee:	e022      	b.n	8007a36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6919      	ldr	r1, [r3, #16]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	4613      	mov	r3, r2
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	4413      	add	r3, r2
 8007a04:	2207      	movs	r2, #7
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	43da      	mvns	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	400a      	ands	r2, r1
 8007a12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6919      	ldr	r1, [r3, #16]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	4618      	mov	r0, r3
 8007a26:	4603      	mov	r3, r0
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	4403      	add	r3, r0
 8007a2c:	409a      	lsls	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b06      	cmp	r3, #6
 8007a3c:	d824      	bhi.n	8007a88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	3b05      	subs	r3, #5
 8007a50:	221f      	movs	r2, #31
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	43da      	mvns	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	400a      	ands	r2, r1
 8007a5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	4613      	mov	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	3b05      	subs	r3, #5
 8007a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	635a      	str	r2, [r3, #52]	; 0x34
 8007a86:	e04c      	b.n	8007b22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2b0c      	cmp	r3, #12
 8007a8e:	d824      	bhi.n	8007ada <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	3b23      	subs	r3, #35	; 0x23
 8007aa2:	221f      	movs	r2, #31
 8007aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa8:	43da      	mvns	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	400a      	ands	r2, r1
 8007ab0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	4618      	mov	r0, r3
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	3b23      	subs	r3, #35	; 0x23
 8007acc:	fa00 f203 	lsl.w	r2, r0, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8007ad8:	e023      	b.n	8007b22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	3b41      	subs	r3, #65	; 0x41
 8007aec:	221f      	movs	r2, #31
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	43da      	mvns	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	400a      	ands	r2, r1
 8007afa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	4618      	mov	r0, r3
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	3b41      	subs	r3, #65	; 0x41
 8007b16:	fa00 f203 	lsl.w	r2, r0, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b22:	4b29      	ldr	r3, [pc, #164]	; (8007bc8 <HAL_ADC_ConfigChannel+0x250>)
 8007b24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a28      	ldr	r2, [pc, #160]	; (8007bcc <HAL_ADC_ConfigChannel+0x254>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d10f      	bne.n	8007b50 <HAL_ADC_ConfigChannel+0x1d8>
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b12      	cmp	r3, #18
 8007b36:	d10b      	bne.n	8007b50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a1d      	ldr	r2, [pc, #116]	; (8007bcc <HAL_ADC_ConfigChannel+0x254>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d12b      	bne.n	8007bb2 <HAL_ADC_ConfigChannel+0x23a>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a1c      	ldr	r2, [pc, #112]	; (8007bd0 <HAL_ADC_ConfigChannel+0x258>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d003      	beq.n	8007b6c <HAL_ADC_ConfigChannel+0x1f4>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b11      	cmp	r3, #17
 8007b6a:	d122      	bne.n	8007bb2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a11      	ldr	r2, [pc, #68]	; (8007bd0 <HAL_ADC_ConfigChannel+0x258>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d111      	bne.n	8007bb2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007b8e:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <HAL_ADC_ConfigChannel+0x25c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a11      	ldr	r2, [pc, #68]	; (8007bd8 <HAL_ADC_ConfigChannel+0x260>)
 8007b94:	fba2 2303 	umull	r2, r3, r2, r3
 8007b98:	0c9a      	lsrs	r2, r3, #18
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007ba4:	e002      	b.n	8007bac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f9      	bne.n	8007ba6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	40012300 	.word	0x40012300
 8007bcc:	40012000 	.word	0x40012000
 8007bd0:	10000012 	.word	0x10000012
 8007bd4:	20000000 	.word	0x20000000
 8007bd8:	431bde83 	.word	0x431bde83

08007bdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007be4:	4b79      	ldr	r3, [pc, #484]	; (8007dcc <ADC_Init+0x1f0>)
 8007be6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6859      	ldr	r1, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	021a      	lsls	r2, r3, #8
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007c34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6859      	ldr	r1, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6899      	ldr	r1, [r3, #8]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6e:	4a58      	ldr	r2, [pc, #352]	; (8007dd0 <ADC_Init+0x1f4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d022      	beq.n	8007cba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6899      	ldr	r1, [r3, #8]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ca4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6899      	ldr	r1, [r3, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	609a      	str	r2, [r3, #8]
 8007cb8:	e00f      	b.n	8007cda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007cc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007cd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0202 	bic.w	r2, r2, #2
 8007ce8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6899      	ldr	r1, [r3, #8]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	7e1b      	ldrb	r3, [r3, #24]
 8007cf4:	005a      	lsls	r2, r3, #1
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01b      	beq.n	8007d40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007d26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6859      	ldr	r1, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	3b01      	subs	r3, #1
 8007d34:	035a      	lsls	r2, r3, #13
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
 8007d3e:	e007      	b.n	8007d50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	051a      	lsls	r2, r3, #20
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6899      	ldr	r1, [r3, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d92:	025a      	lsls	r2, r3, #9
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6899      	ldr	r1, [r3, #8]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	029a      	lsls	r2, r3, #10
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	609a      	str	r2, [r3, #8]
}
 8007dc0:	bf00      	nop
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	40012300 	.word	0x40012300
 8007dd0:	0f000001 	.word	0x0f000001

08007dd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d13c      	bne.n	8007e68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d12b      	bne.n	8007e60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d127      	bne.n	8007e60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d006      	beq.n	8007e2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d119      	bne.n	8007e60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0220 	bic.w	r2, r2, #32
 8007e3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	f043 0201 	orr.w	r2, r3, #1
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7ff fd6b 	bl	800793c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007e66:	e00e      	b.n	8007e86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f7ff fd75 	bl	8007964 <HAL_ADC_ErrorCallback>
}
 8007e7a:	e004      	b.n	8007e86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	4798      	blx	r3
}
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f7ff fd57 	bl	8007950 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ea2:	bf00      	nop
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2240      	movs	r2, #64	; 0x40
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec2:	f043 0204 	orr.w	r2, r3, #4
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7ff fd4a 	bl	8007964 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <__NVIC_SetPriorityGrouping>:
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <__NVIC_SetPriorityGrouping+0x44>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f0a:	4a04      	ldr	r2, [pc, #16]	; (8007f1c <__NVIC_SetPriorityGrouping+0x44>)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	60d3      	str	r3, [r2, #12]
}
 8007f10:	bf00      	nop
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	e000ed00 	.word	0xe000ed00

08007f20 <__NVIC_GetPriorityGrouping>:
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f24:	4b04      	ldr	r3, [pc, #16]	; (8007f38 <__NVIC_GetPriorityGrouping+0x18>)
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	0a1b      	lsrs	r3, r3, #8
 8007f2a:	f003 0307 	and.w	r3, r3, #7
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	e000ed00 	.word	0xe000ed00

08007f3c <__NVIC_EnableIRQ>:
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	db0b      	blt.n	8007f66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	f003 021f 	and.w	r2, r3, #31
 8007f54:	4907      	ldr	r1, [pc, #28]	; (8007f74 <__NVIC_EnableIRQ+0x38>)
 8007f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8007f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	e000e100 	.word	0xe000e100

08007f78 <__NVIC_SetPriority>:
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	6039      	str	r1, [r7, #0]
 8007f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	db0a      	blt.n	8007fa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	490c      	ldr	r1, [pc, #48]	; (8007fc4 <__NVIC_SetPriority+0x4c>)
 8007f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f96:	0112      	lsls	r2, r2, #4
 8007f98:	b2d2      	uxtb	r2, r2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007fa0:	e00a      	b.n	8007fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	4908      	ldr	r1, [pc, #32]	; (8007fc8 <__NVIC_SetPriority+0x50>)
 8007fa8:	79fb      	ldrb	r3, [r7, #7]
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	3b04      	subs	r3, #4
 8007fb0:	0112      	lsls	r2, r2, #4
 8007fb2:	b2d2      	uxtb	r2, r2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	761a      	strb	r2, [r3, #24]
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	e000e100 	.word	0xe000e100
 8007fc8:	e000ed00 	.word	0xe000ed00

08007fcc <NVIC_EncodePriority>:
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b089      	sub	sp, #36	; 0x24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f003 0307 	and.w	r3, r3, #7
 8007fde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f1c3 0307 	rsb	r3, r3, #7
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	bf28      	it	cs
 8007fea:	2304      	movcs	r3, #4
 8007fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	2b06      	cmp	r3, #6
 8007ff4:	d902      	bls.n	8007ffc <NVIC_EncodePriority+0x30>
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	3b03      	subs	r3, #3
 8007ffa:	e000      	b.n	8007ffe <NVIC_EncodePriority+0x32>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008000:	f04f 32ff 	mov.w	r2, #4294967295
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	43da      	mvns	r2, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	401a      	ands	r2, r3
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008014:	f04f 31ff 	mov.w	r1, #4294967295
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	fa01 f303 	lsl.w	r3, r1, r3
 800801e:	43d9      	mvns	r1, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008024:	4313      	orrs	r3, r2
}
 8008026:	4618      	mov	r0, r3
 8008028:	3724      	adds	r7, #36	; 0x24
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
	...

08008034 <SysTick_Config>:
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3b01      	subs	r3, #1
 8008040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008044:	d301      	bcc.n	800804a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8008046:	2301      	movs	r3, #1
 8008048:	e00f      	b.n	800806a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800804a:	4a0a      	ldr	r2, [pc, #40]	; (8008074 <SysTick_Config+0x40>)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3b01      	subs	r3, #1
 8008050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008052:	210f      	movs	r1, #15
 8008054:	f04f 30ff 	mov.w	r0, #4294967295
 8008058:	f7ff ff8e 	bl	8007f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800805c:	4b05      	ldr	r3, [pc, #20]	; (8008074 <SysTick_Config+0x40>)
 800805e:	2200      	movs	r2, #0
 8008060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008062:	4b04      	ldr	r3, [pc, #16]	; (8008074 <SysTick_Config+0x40>)
 8008064:	2207      	movs	r2, #7
 8008066:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	e000e010 	.word	0xe000e010

08008078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff ff29 	bl	8007ed8 <__NVIC_SetPriorityGrouping>
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800808e:	b580      	push	{r7, lr}
 8008090:	b086      	sub	sp, #24
 8008092:	af00      	add	r7, sp, #0
 8008094:	4603      	mov	r3, r0
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	607a      	str	r2, [r7, #4]
 800809a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800809c:	2300      	movs	r3, #0
 800809e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80080a0:	f7ff ff3e 	bl	8007f20 <__NVIC_GetPriorityGrouping>
 80080a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	68b9      	ldr	r1, [r7, #8]
 80080aa:	6978      	ldr	r0, [r7, #20]
 80080ac:	f7ff ff8e 	bl	8007fcc <NVIC_EncodePriority>
 80080b0:	4602      	mov	r2, r0
 80080b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7ff ff5d 	bl	8007f78 <__NVIC_SetPriority>
}
 80080be:	bf00      	nop
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	4603      	mov	r3, r0
 80080ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff ff31 	bl	8007f3c <__NVIC_EnableIRQ>
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff ffa2 	bl	8008034 <SysTick_Config>
 80080f0:	4603      	mov	r3, r0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008108:	f7ff fab4 	bl	8007674 <HAL_GetTick>
 800810c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e099      	b.n	800824c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0201 	bic.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008138:	e00f      	b.n	800815a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800813a:	f7ff fa9b 	bl	8007674 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	2b05      	cmp	r3, #5
 8008146:	d908      	bls.n	800815a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2220      	movs	r2, #32
 800814c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2203      	movs	r2, #3
 8008152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e078      	b.n	800824c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e8      	bne.n	800813a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008170:	697a      	ldr	r2, [r7, #20]
 8008172:	4b38      	ldr	r3, [pc, #224]	; (8008254 <HAL_DMA_Init+0x158>)
 8008174:	4013      	ands	r3, r2
 8008176:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008186:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800819e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d107      	bne.n	80081c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	4313      	orrs	r3, r2
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f023 0307 	bic.w	r3, r3, #7
 80081da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d117      	bne.n	800821e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00e      	beq.n	800821e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fa9d 	bl	8008740 <DMA_CheckFifoParam>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d008      	beq.n	800821e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2240      	movs	r2, #64	; 0x40
 8008210:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800821a:	2301      	movs	r3, #1
 800821c:	e016      	b.n	800824c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa54 	bl	80086d4 <DMA_CalcBaseAndBitshift>
 800822c:	4603      	mov	r3, r0
 800822e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008234:	223f      	movs	r2, #63	; 0x3f
 8008236:	409a      	lsls	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	f010803f 	.word	0xf010803f

08008258 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008276:	2b01      	cmp	r3, #1
 8008278:	d101      	bne.n	800827e <HAL_DMA_Start_IT+0x26>
 800827a:	2302      	movs	r3, #2
 800827c:	e040      	b.n	8008300 <HAL_DMA_Start_IT+0xa8>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b01      	cmp	r3, #1
 8008290:	d12f      	bne.n	80082f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2202      	movs	r2, #2
 8008296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	68b9      	ldr	r1, [r7, #8]
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f9e6 	bl	8008678 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b0:	223f      	movs	r2, #63	; 0x3f
 80082b2:	409a      	lsls	r2, r3
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0216 	orr.w	r2, r2, #22
 80082c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d007      	beq.n	80082e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0208 	orr.w	r2, r2, #8
 80082de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f042 0201 	orr.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e005      	b.n	80082fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80082fa:	2302      	movs	r3, #2
 80082fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80082fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d004      	beq.n	8008326 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2280      	movs	r2, #128	; 0x80
 8008320:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e00c      	b.n	8008340 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2205      	movs	r2, #5
 800832a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0201 	bic.w	r2, r2, #1
 800833c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008358:	4b92      	ldr	r3, [pc, #584]	; (80085a4 <HAL_DMA_IRQHandler+0x258>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a92      	ldr	r2, [pc, #584]	; (80085a8 <HAL_DMA_IRQHandler+0x25c>)
 800835e:	fba2 2303 	umull	r2, r3, r2, r3
 8008362:	0a9b      	lsrs	r3, r3, #10
 8008364:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008376:	2208      	movs	r2, #8
 8008378:	409a      	lsls	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4013      	ands	r3, r2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d01a      	beq.n	80083b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	2b00      	cmp	r3, #0
 800838e:	d013      	beq.n	80083b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0204 	bic.w	r2, r2, #4
 800839e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a4:	2208      	movs	r2, #8
 80083a6:	409a      	lsls	r2, r3
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b0:	f043 0201 	orr.w	r2, r3, #1
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083bc:	2201      	movs	r2, #1
 80083be:	409a      	lsls	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4013      	ands	r3, r2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d012      	beq.n	80083ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00b      	beq.n	80083ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083da:	2201      	movs	r2, #1
 80083dc:	409a      	lsls	r2, r3
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e6:	f043 0202 	orr.w	r2, r3, #2
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f2:	2204      	movs	r2, #4
 80083f4:	409a      	lsls	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d012      	beq.n	8008424 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00b      	beq.n	8008424 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008410:	2204      	movs	r2, #4
 8008412:	409a      	lsls	r2, r3
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841c:	f043 0204 	orr.w	r2, r3, #4
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008428:	2210      	movs	r2, #16
 800842a:	409a      	lsls	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4013      	ands	r3, r2
 8008430:	2b00      	cmp	r3, #0
 8008432:	d043      	beq.n	80084bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0308 	and.w	r3, r3, #8
 800843e:	2b00      	cmp	r3, #0
 8008440:	d03c      	beq.n	80084bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008446:	2210      	movs	r2, #16
 8008448:	409a      	lsls	r2, r3
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d018      	beq.n	800848e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d108      	bne.n	800847c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d024      	beq.n	80084bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	4798      	blx	r3
 800847a:	e01f      	b.n	80084bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01b      	beq.n	80084bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	4798      	blx	r3
 800848c:	e016      	b.n	80084bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008498:	2b00      	cmp	r3, #0
 800849a:	d107      	bne.n	80084ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f022 0208 	bic.w	r2, r2, #8
 80084aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c0:	2220      	movs	r2, #32
 80084c2:	409a      	lsls	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4013      	ands	r3, r2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 808e 	beq.w	80085ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0310 	and.w	r3, r3, #16
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 8086 	beq.w	80085ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e2:	2220      	movs	r2, #32
 80084e4:	409a      	lsls	r2, r3
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b05      	cmp	r3, #5
 80084f4:	d136      	bne.n	8008564 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0216 	bic.w	r2, r2, #22
 8008504:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	695a      	ldr	r2, [r3, #20]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008514:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	2b00      	cmp	r3, #0
 800851c:	d103      	bne.n	8008526 <HAL_DMA_IRQHandler+0x1da>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008522:	2b00      	cmp	r3, #0
 8008524:	d007      	beq.n	8008536 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 0208 	bic.w	r2, r2, #8
 8008534:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800853a:	223f      	movs	r2, #63	; 0x3f
 800853c:	409a      	lsls	r2, r3
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008556:	2b00      	cmp	r3, #0
 8008558:	d07d      	beq.n	8008656 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
        }
        return;
 8008562:	e078      	b.n	8008656 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d01c      	beq.n	80085ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d108      	bne.n	8008592 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008584:	2b00      	cmp	r3, #0
 8008586:	d030      	beq.n	80085ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	4798      	blx	r3
 8008590:	e02b      	b.n	80085ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008596:	2b00      	cmp	r3, #0
 8008598:	d027      	beq.n	80085ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4798      	blx	r3
 80085a2:	e022      	b.n	80085ea <HAL_DMA_IRQHandler+0x29e>
 80085a4:	20000000 	.word	0x20000000
 80085a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10f      	bne.n	80085da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0210 	bic.w	r2, r2, #16
 80085c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d032      	beq.n	8008658 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d022      	beq.n	8008644 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2205      	movs	r2, #5
 8008602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0201 	bic.w	r2, r2, #1
 8008614:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	3301      	adds	r3, #1
 800861a:	60bb      	str	r3, [r7, #8]
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	429a      	cmp	r2, r3
 8008620:	d307      	bcc.n	8008632 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1f2      	bne.n	8008616 <HAL_DMA_IRQHandler+0x2ca>
 8008630:	e000      	b.n	8008634 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008632:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d005      	beq.n	8008658 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4798      	blx	r3
 8008654:	e000      	b.n	8008658 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008656:	bf00      	nop
    }
  }
}
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop

08008660 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008694:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	2b40      	cmp	r3, #64	; 0x40
 80086a4:	d108      	bne.n	80086b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80086b6:	e007      	b.n	80086c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	60da      	str	r2, [r3, #12]
}
 80086c8:	bf00      	nop
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	3b10      	subs	r3, #16
 80086e4:	4a14      	ldr	r2, [pc, #80]	; (8008738 <DMA_CalcBaseAndBitshift+0x64>)
 80086e6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ea:	091b      	lsrs	r3, r3, #4
 80086ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80086ee:	4a13      	ldr	r2, [pc, #76]	; (800873c <DMA_CalcBaseAndBitshift+0x68>)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4413      	add	r3, r2
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d909      	bls.n	8008716 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800870a:	f023 0303 	bic.w	r3, r3, #3
 800870e:	1d1a      	adds	r2, r3, #4
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	659a      	str	r2, [r3, #88]	; 0x58
 8008714:	e007      	b.n	8008726 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800871e:	f023 0303 	bic.w	r3, r3, #3
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	aaaaaaab 	.word	0xaaaaaaab
 800873c:	0801855c 	.word	0x0801855c

08008740 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008750:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d11f      	bne.n	800879a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b03      	cmp	r3, #3
 800875e:	d855      	bhi.n	800880c <DMA_CheckFifoParam+0xcc>
 8008760:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <DMA_CheckFifoParam+0x28>)
 8008762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008766:	bf00      	nop
 8008768:	08008779 	.word	0x08008779
 800876c:	0800878b 	.word	0x0800878b
 8008770:	08008779 	.word	0x08008779
 8008774:	0800880d 	.word	0x0800880d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d045      	beq.n	8008810 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008788:	e042      	b.n	8008810 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008792:	d13f      	bne.n	8008814 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008798:	e03c      	b.n	8008814 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087a2:	d121      	bne.n	80087e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d836      	bhi.n	8008818 <DMA_CheckFifoParam+0xd8>
 80087aa:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <DMA_CheckFifoParam+0x70>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	080087c1 	.word	0x080087c1
 80087b4:	080087c7 	.word	0x080087c7
 80087b8:	080087c1 	.word	0x080087c1
 80087bc:	080087d9 	.word	0x080087d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	73fb      	strb	r3, [r7, #15]
      break;
 80087c4:	e02f      	b.n	8008826 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d024      	beq.n	800881c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087d6:	e021      	b.n	800881c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087e0:	d11e      	bne.n	8008820 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80087e6:	e01b      	b.n	8008820 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d902      	bls.n	80087f4 <DMA_CheckFifoParam+0xb4>
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d003      	beq.n	80087fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80087f2:	e018      	b.n	8008826 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]
      break;
 80087f8:	e015      	b.n	8008826 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00e      	beq.n	8008824 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	73fb      	strb	r3, [r7, #15]
      break;
 800880a:	e00b      	b.n	8008824 <DMA_CheckFifoParam+0xe4>
      break;
 800880c:	bf00      	nop
 800880e:	e00a      	b.n	8008826 <DMA_CheckFifoParam+0xe6>
      break;
 8008810:	bf00      	nop
 8008812:	e008      	b.n	8008826 <DMA_CheckFifoParam+0xe6>
      break;
 8008814:	bf00      	nop
 8008816:	e006      	b.n	8008826 <DMA_CheckFifoParam+0xe6>
      break;
 8008818:	bf00      	nop
 800881a:	e004      	b.n	8008826 <DMA_CheckFifoParam+0xe6>
      break;
 800881c:	bf00      	nop
 800881e:	e002      	b.n	8008826 <DMA_CheckFifoParam+0xe6>
      break;   
 8008820:	bf00      	nop
 8008822:	e000      	b.n	8008826 <DMA_CheckFifoParam+0xe6>
      break;
 8008824:	bf00      	nop
    }
  } 
  
  return status; 
 8008826:	7bfb      	ldrb	r3, [r7, #15]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008834:	b480      	push	{r7}
 8008836:	b089      	sub	sp, #36	; 0x24
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800883e:	2300      	movs	r3, #0
 8008840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008842:	2300      	movs	r3, #0
 8008844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008846:	2300      	movs	r3, #0
 8008848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800884a:	2300      	movs	r3, #0
 800884c:	61fb      	str	r3, [r7, #28]
 800884e:	e177      	b.n	8008b40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008850:	2201      	movs	r2, #1
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	fa02 f303 	lsl.w	r3, r2, r3
 8008858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	4013      	ands	r3, r2
 8008862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	429a      	cmp	r2, r3
 800886a:	f040 8166 	bne.w	8008b3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d00b      	beq.n	800888e <HAL_GPIO_Init+0x5a>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	2b02      	cmp	r3, #2
 800887c:	d007      	beq.n	800888e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008882:	2b11      	cmp	r3, #17
 8008884:	d003      	beq.n	800888e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	2b12      	cmp	r3, #18
 800888c:	d130      	bne.n	80088f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	2203      	movs	r2, #3
 800889a:	fa02 f303 	lsl.w	r3, r2, r3
 800889e:	43db      	mvns	r3, r3
 80088a0:	69ba      	ldr	r2, [r7, #24]
 80088a2:	4013      	ands	r3, r2
 80088a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	fa02 f303 	lsl.w	r3, r2, r3
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80088c4:	2201      	movs	r2, #1
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	fa02 f303 	lsl.w	r3, r2, r3
 80088cc:	43db      	mvns	r3, r3
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	4013      	ands	r3, r2
 80088d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	091b      	lsrs	r3, r3, #4
 80088da:	f003 0201 	and.w	r2, r3, #1
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	fa02 f303 	lsl.w	r3, r2, r3
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	2203      	movs	r2, #3
 80088fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008900:	43db      	mvns	r3, r3
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	4013      	ands	r3, r2
 8008906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	fa02 f303 	lsl.w	r3, r2, r3
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	4313      	orrs	r3, r2
 8008918:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d003      	beq.n	8008930 <HAL_GPIO_Init+0xfc>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b12      	cmp	r3, #18
 800892e:	d123      	bne.n	8008978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	08da      	lsrs	r2, r3, #3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3208      	adds	r2, #8
 8008938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	f003 0307 	and.w	r3, r3, #7
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	220f      	movs	r2, #15
 8008948:	fa02 f303 	lsl.w	r3, r2, r3
 800894c:	43db      	mvns	r3, r3
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	4013      	ands	r3, r2
 8008952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	691a      	ldr	r2, [r3, #16]
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	f003 0307 	and.w	r3, r3, #7
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	4313      	orrs	r3, r2
 8008968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	08da      	lsrs	r2, r3, #3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3208      	adds	r2, #8
 8008972:	69b9      	ldr	r1, [r7, #24]
 8008974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	2203      	movs	r2, #3
 8008984:	fa02 f303 	lsl.w	r3, r2, r3
 8008988:	43db      	mvns	r3, r3
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	4013      	ands	r3, r2
 800898e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f003 0203 	and.w	r2, r3, #3
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	fa02 f303 	lsl.w	r3, r2, r3
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 80c0 	beq.w	8008b3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089ba:	2300      	movs	r3, #0
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	4b65      	ldr	r3, [pc, #404]	; (8008b54 <HAL_GPIO_Init+0x320>)
 80089c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c2:	4a64      	ldr	r2, [pc, #400]	; (8008b54 <HAL_GPIO_Init+0x320>)
 80089c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089c8:	6453      	str	r3, [r2, #68]	; 0x44
 80089ca:	4b62      	ldr	r3, [pc, #392]	; (8008b54 <HAL_GPIO_Init+0x320>)
 80089cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089d6:	4a60      	ldr	r2, [pc, #384]	; (8008b58 <HAL_GPIO_Init+0x324>)
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	089b      	lsrs	r3, r3, #2
 80089dc:	3302      	adds	r3, #2
 80089de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	f003 0303 	and.w	r3, r3, #3
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	220f      	movs	r2, #15
 80089ee:	fa02 f303 	lsl.w	r3, r2, r3
 80089f2:	43db      	mvns	r3, r3
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	4013      	ands	r3, r2
 80089f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a57      	ldr	r2, [pc, #348]	; (8008b5c <HAL_GPIO_Init+0x328>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d037      	beq.n	8008a72 <HAL_GPIO_Init+0x23e>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a56      	ldr	r2, [pc, #344]	; (8008b60 <HAL_GPIO_Init+0x32c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d031      	beq.n	8008a6e <HAL_GPIO_Init+0x23a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a55      	ldr	r2, [pc, #340]	; (8008b64 <HAL_GPIO_Init+0x330>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d02b      	beq.n	8008a6a <HAL_GPIO_Init+0x236>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a54      	ldr	r2, [pc, #336]	; (8008b68 <HAL_GPIO_Init+0x334>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d025      	beq.n	8008a66 <HAL_GPIO_Init+0x232>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a53      	ldr	r2, [pc, #332]	; (8008b6c <HAL_GPIO_Init+0x338>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d01f      	beq.n	8008a62 <HAL_GPIO_Init+0x22e>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a52      	ldr	r2, [pc, #328]	; (8008b70 <HAL_GPIO_Init+0x33c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d019      	beq.n	8008a5e <HAL_GPIO_Init+0x22a>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a51      	ldr	r2, [pc, #324]	; (8008b74 <HAL_GPIO_Init+0x340>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d013      	beq.n	8008a5a <HAL_GPIO_Init+0x226>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a50      	ldr	r2, [pc, #320]	; (8008b78 <HAL_GPIO_Init+0x344>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00d      	beq.n	8008a56 <HAL_GPIO_Init+0x222>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a4f      	ldr	r2, [pc, #316]	; (8008b7c <HAL_GPIO_Init+0x348>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d007      	beq.n	8008a52 <HAL_GPIO_Init+0x21e>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a4e      	ldr	r2, [pc, #312]	; (8008b80 <HAL_GPIO_Init+0x34c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d101      	bne.n	8008a4e <HAL_GPIO_Init+0x21a>
 8008a4a:	2309      	movs	r3, #9
 8008a4c:	e012      	b.n	8008a74 <HAL_GPIO_Init+0x240>
 8008a4e:	230a      	movs	r3, #10
 8008a50:	e010      	b.n	8008a74 <HAL_GPIO_Init+0x240>
 8008a52:	2308      	movs	r3, #8
 8008a54:	e00e      	b.n	8008a74 <HAL_GPIO_Init+0x240>
 8008a56:	2307      	movs	r3, #7
 8008a58:	e00c      	b.n	8008a74 <HAL_GPIO_Init+0x240>
 8008a5a:	2306      	movs	r3, #6
 8008a5c:	e00a      	b.n	8008a74 <HAL_GPIO_Init+0x240>
 8008a5e:	2305      	movs	r3, #5
 8008a60:	e008      	b.n	8008a74 <HAL_GPIO_Init+0x240>
 8008a62:	2304      	movs	r3, #4
 8008a64:	e006      	b.n	8008a74 <HAL_GPIO_Init+0x240>
 8008a66:	2303      	movs	r3, #3
 8008a68:	e004      	b.n	8008a74 <HAL_GPIO_Init+0x240>
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	e002      	b.n	8008a74 <HAL_GPIO_Init+0x240>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e000      	b.n	8008a74 <HAL_GPIO_Init+0x240>
 8008a72:	2300      	movs	r3, #0
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	f002 0203 	and.w	r2, r2, #3
 8008a7a:	0092      	lsls	r2, r2, #2
 8008a7c:	4093      	lsls	r3, r2
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a84:	4934      	ldr	r1, [pc, #208]	; (8008b58 <HAL_GPIO_Init+0x324>)
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	089b      	lsrs	r3, r3, #2
 8008a8a:	3302      	adds	r3, #2
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008a92:	4b3c      	ldr	r3, [pc, #240]	; (8008b84 <HAL_GPIO_Init+0x350>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	43db      	mvns	r3, r3
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ab6:	4a33      	ldr	r2, [pc, #204]	; (8008b84 <HAL_GPIO_Init+0x350>)
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008abc:	4b31      	ldr	r3, [pc, #196]	; (8008b84 <HAL_GPIO_Init+0x350>)
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	43db      	mvns	r3, r3
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	4013      	ands	r3, r2
 8008aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d003      	beq.n	8008ae0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ae0:	4a28      	ldr	r2, [pc, #160]	; (8008b84 <HAL_GPIO_Init+0x350>)
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008ae6:	4b27      	ldr	r3, [pc, #156]	; (8008b84 <HAL_GPIO_Init+0x350>)
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	43db      	mvns	r3, r3
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	4013      	ands	r3, r2
 8008af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008b0a:	4a1e      	ldr	r2, [pc, #120]	; (8008b84 <HAL_GPIO_Init+0x350>)
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008b10:	4b1c      	ldr	r3, [pc, #112]	; (8008b84 <HAL_GPIO_Init+0x350>)
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	43db      	mvns	r3, r3
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008b2c:	69ba      	ldr	r2, [r7, #24]
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008b34:	4a13      	ldr	r2, [pc, #76]	; (8008b84 <HAL_GPIO_Init+0x350>)
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	61fb      	str	r3, [r7, #28]
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	2b0f      	cmp	r3, #15
 8008b44:	f67f ae84 	bls.w	8008850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b48:	bf00      	nop
 8008b4a:	3724      	adds	r7, #36	; 0x24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	40023800 	.word	0x40023800
 8008b58:	40013800 	.word	0x40013800
 8008b5c:	40020000 	.word	0x40020000
 8008b60:	40020400 	.word	0x40020400
 8008b64:	40020800 	.word	0x40020800
 8008b68:	40020c00 	.word	0x40020c00
 8008b6c:	40021000 	.word	0x40021000
 8008b70:	40021400 	.word	0x40021400
 8008b74:	40021800 	.word	0x40021800
 8008b78:	40021c00 	.word	0x40021c00
 8008b7c:	40022000 	.word	0x40022000
 8008b80:	40022400 	.word	0x40022400
 8008b84:	40013c00 	.word	0x40013c00

08008b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	691a      	ldr	r2, [r3, #16]
 8008b98:	887b      	ldrh	r3, [r7, #2]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	73fb      	strb	r3, [r7, #15]
 8008ba4:	e001      	b.n	8008baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	807b      	strh	r3, [r7, #2]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008bc8:	787b      	ldrb	r3, [r7, #1]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bce:	887a      	ldrh	r2, [r7, #2]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008bd4:	e003      	b.n	8008bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008bd6:	887b      	ldrh	r3, [r7, #2]
 8008bd8:	041a      	lsls	r2, r3, #16
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	619a      	str	r2, [r3, #24]
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
	...

08008bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008bf6:	4b08      	ldr	r3, [pc, #32]	; (8008c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008bf8:	695a      	ldr	r2, [r3, #20]
 8008bfa:	88fb      	ldrh	r3, [r7, #6]
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d006      	beq.n	8008c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008c02:	4a05      	ldr	r2, [pc, #20]	; (8008c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c04:	88fb      	ldrh	r3, [r7, #6]
 8008c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008c08:	88fb      	ldrh	r3, [r7, #6]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fb fbf3 	bl	80043f6 <HAL_GPIO_EXTI_Callback>
  }
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	40013c00 	.word	0x40013c00

08008c1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e11f      	b.n	8008e6e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d106      	bne.n	8008c48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7fc fc52 	bl	80054ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2224      	movs	r2, #36	; 0x24
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0201 	bic.w	r2, r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008c80:	f001 f96e 	bl	8009f60 <HAL_RCC_GetPCLK1Freq>
 8008c84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	4a7b      	ldr	r2, [pc, #492]	; (8008e78 <HAL_I2C_Init+0x25c>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d807      	bhi.n	8008ca0 <HAL_I2C_Init+0x84>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	4a7a      	ldr	r2, [pc, #488]	; (8008e7c <HAL_I2C_Init+0x260>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	bf94      	ite	ls
 8008c98:	2301      	movls	r3, #1
 8008c9a:	2300      	movhi	r3, #0
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	e006      	b.n	8008cae <HAL_I2C_Init+0x92>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	4a77      	ldr	r2, [pc, #476]	; (8008e80 <HAL_I2C_Init+0x264>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	bf94      	ite	ls
 8008ca8:	2301      	movls	r3, #1
 8008caa:	2300      	movhi	r3, #0
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e0db      	b.n	8008e6e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4a72      	ldr	r2, [pc, #456]	; (8008e84 <HAL_I2C_Init+0x268>)
 8008cba:	fba2 2303 	umull	r2, r3, r2, r3
 8008cbe:	0c9b      	lsrs	r3, r3, #18
 8008cc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	4a64      	ldr	r2, [pc, #400]	; (8008e78 <HAL_I2C_Init+0x25c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d802      	bhi.n	8008cf0 <HAL_I2C_Init+0xd4>
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	3301      	adds	r3, #1
 8008cee:	e009      	b.n	8008d04 <HAL_I2C_Init+0xe8>
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008cf6:	fb02 f303 	mul.w	r3, r2, r3
 8008cfa:	4a63      	ldr	r2, [pc, #396]	; (8008e88 <HAL_I2C_Init+0x26c>)
 8008cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008d00:	099b      	lsrs	r3, r3, #6
 8008d02:	3301      	adds	r3, #1
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	6812      	ldr	r2, [r2, #0]
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008d16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	4956      	ldr	r1, [pc, #344]	; (8008e78 <HAL_I2C_Init+0x25c>)
 8008d20:	428b      	cmp	r3, r1
 8008d22:	d80d      	bhi.n	8008d40 <HAL_I2C_Init+0x124>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	1e59      	subs	r1, r3, #1
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	005b      	lsls	r3, r3, #1
 8008d2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d32:	3301      	adds	r3, #1
 8008d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	bf38      	it	cc
 8008d3c:	2304      	movcc	r3, #4
 8008d3e:	e04f      	b.n	8008de0 <HAL_I2C_Init+0x1c4>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d111      	bne.n	8008d6c <HAL_I2C_Init+0x150>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	1e58      	subs	r0, r3, #1
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6859      	ldr	r1, [r3, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	005b      	lsls	r3, r3, #1
 8008d54:	440b      	add	r3, r1
 8008d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	bf0c      	ite	eq
 8008d64:	2301      	moveq	r3, #1
 8008d66:	2300      	movne	r3, #0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	e012      	b.n	8008d92 <HAL_I2C_Init+0x176>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	1e58      	subs	r0, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6859      	ldr	r1, [r3, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	440b      	add	r3, r1
 8008d7a:	0099      	lsls	r1, r3, #2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d82:	3301      	adds	r3, #1
 8008d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2301      	moveq	r3, #1
 8008d8e:	2300      	movne	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <HAL_I2C_Init+0x17e>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e022      	b.n	8008de0 <HAL_I2C_Init+0x1c4>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10e      	bne.n	8008dc0 <HAL_I2C_Init+0x1a4>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	1e58      	subs	r0, r3, #1
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6859      	ldr	r1, [r3, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	440b      	add	r3, r1
 8008db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8008db4:	3301      	adds	r3, #1
 8008db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dbe:	e00f      	b.n	8008de0 <HAL_I2C_Init+0x1c4>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	1e58      	subs	r0, r3, #1
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6859      	ldr	r1, [r3, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	440b      	add	r3, r1
 8008dce:	0099      	lsls	r1, r3, #2
 8008dd0:	440b      	add	r3, r1
 8008dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	6809      	ldr	r1, [r1, #0]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	69da      	ldr	r2, [r3, #28]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008e0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	6911      	ldr	r1, [r2, #16]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	68d2      	ldr	r2, [r2, #12]
 8008e1a:	4311      	orrs	r1, r2
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	6812      	ldr	r2, [r2, #0]
 8008e20:	430b      	orrs	r3, r1
 8008e22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	695a      	ldr	r2, [r3, #20]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	431a      	orrs	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 0201 	orr.w	r2, r2, #1
 8008e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	000186a0 	.word	0x000186a0
 8008e7c:	001e847f 	.word	0x001e847f
 8008e80:	003d08ff 	.word	0x003d08ff
 8008e84:	431bde83 	.word	0x431bde83
 8008e88:	10624dd3 	.word	0x10624dd3

08008e8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af02      	add	r7, sp, #8
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	607a      	str	r2, [r7, #4]
 8008e96:	461a      	mov	r2, r3
 8008e98:	460b      	mov	r3, r1
 8008e9a:	817b      	strh	r3, [r7, #10]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ea0:	f7fe fbe8 	bl	8007674 <HAL_GetTick>
 8008ea4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	2b20      	cmp	r3, #32
 8008eb0:	f040 80e0 	bne.w	8009074 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	2319      	movs	r3, #25
 8008eba:	2201      	movs	r2, #1
 8008ebc:	4970      	ldr	r1, [pc, #448]	; (8009080 <HAL_I2C_Master_Transmit+0x1f4>)
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f000 fc58 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008eca:	2302      	movs	r3, #2
 8008ecc:	e0d3      	b.n	8009076 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d101      	bne.n	8008edc <HAL_I2C_Master_Transmit+0x50>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e0cc      	b.n	8009076 <HAL_I2C_Master_Transmit+0x1ea>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d007      	beq.n	8008f02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0201 	orr.w	r2, r2, #1
 8008f00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2221      	movs	r2, #33	; 0x21
 8008f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2210      	movs	r2, #16
 8008f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	893a      	ldrh	r2, [r7, #8]
 8008f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4a50      	ldr	r2, [pc, #320]	; (8009084 <HAL_I2C_Master_Transmit+0x1f8>)
 8008f42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008f44:	8979      	ldrh	r1, [r7, #10]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	6a3a      	ldr	r2, [r7, #32]
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f000 fac2 	bl	80094d4 <I2C_MasterRequestWrite>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e08d      	b.n	8009076 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	613b      	str	r3, [r7, #16]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	613b      	str	r3, [r7, #16]
 8008f6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008f70:	e066      	b.n	8009040 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	6a39      	ldr	r1, [r7, #32]
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 fcd2 	bl	8009920 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00d      	beq.n	8008f9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f86:	2b04      	cmp	r3, #4
 8008f88:	d107      	bne.n	8008f9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e06b      	b.n	8009076 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	781a      	ldrb	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	f003 0304 	and.w	r3, r3, #4
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	d11b      	bne.n	8009014 <HAL_I2C_Master_Transmit+0x188>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d017      	beq.n	8009014 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	781a      	ldrb	r2, [r3, #0]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	3b01      	subs	r3, #1
 8009002:	b29a      	uxth	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800900c:	3b01      	subs	r3, #1
 800900e:	b29a      	uxth	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	6a39      	ldr	r1, [r7, #32]
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fcc2 	bl	80099a2 <I2C_WaitOnBTFFlagUntilTimeout>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00d      	beq.n	8009040 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009028:	2b04      	cmp	r3, #4
 800902a:	d107      	bne.n	800903c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800903a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e01a      	b.n	8009076 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009044:	2b00      	cmp	r3, #0
 8009046:	d194      	bne.n	8008f72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2220      	movs	r2, #32
 800905c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	e000      	b.n	8009076 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009074:	2302      	movs	r3, #2
  }
}
 8009076:	4618      	mov	r0, r3
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	00100002 	.word	0x00100002
 8009084:	ffff0000 	.word	0xffff0000

08009088 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b08c      	sub	sp, #48	; 0x30
 800908c:	af02      	add	r7, sp, #8
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	607a      	str	r2, [r7, #4]
 8009092:	461a      	mov	r2, r3
 8009094:	460b      	mov	r3, r1
 8009096:	817b      	strh	r3, [r7, #10]
 8009098:	4613      	mov	r3, r2
 800909a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800909c:	f7fe faea 	bl	8007674 <HAL_GetTick>
 80090a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b20      	cmp	r3, #32
 80090ac:	f040 820b 	bne.w	80094c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80090b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	2319      	movs	r3, #25
 80090b6:	2201      	movs	r2, #1
 80090b8:	497c      	ldr	r1, [pc, #496]	; (80092ac <HAL_I2C_Master_Receive+0x224>)
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 fb5a 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80090c6:	2302      	movs	r3, #2
 80090c8:	e1fe      	b.n	80094c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d101      	bne.n	80090d8 <HAL_I2C_Master_Receive+0x50>
 80090d4:	2302      	movs	r3, #2
 80090d6:	e1f7      	b.n	80094c8 <HAL_I2C_Master_Receive+0x440>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d007      	beq.n	80090fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0201 	orr.w	r2, r2, #1
 80090fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800910c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2222      	movs	r2, #34	; 0x22
 8009112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2210      	movs	r2, #16
 800911a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	893a      	ldrh	r2, [r7, #8]
 800912e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009134:	b29a      	uxth	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4a5c      	ldr	r2, [pc, #368]	; (80092b0 <HAL_I2C_Master_Receive+0x228>)
 800913e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009140:	8979      	ldrh	r1, [r7, #10]
 8009142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 fa46 	bl	80095d8 <I2C_MasterRequestRead>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e1b8      	b.n	80094c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	d113      	bne.n	8009186 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800915e:	2300      	movs	r3, #0
 8009160:	623b      	str	r3, [r7, #32]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	623b      	str	r3, [r7, #32]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	623b      	str	r3, [r7, #32]
 8009172:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	e18c      	b.n	80094a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800918a:	2b01      	cmp	r3, #1
 800918c:	d11b      	bne.n	80091c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800919c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	61fb      	str	r3, [r7, #28]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	61fb      	str	r3, [r7, #28]
 80091b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	e16c      	b.n	80094a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d11b      	bne.n	8009206 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091ee:	2300      	movs	r3, #0
 80091f0:	61bb      	str	r3, [r7, #24]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	61bb      	str	r3, [r7, #24]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	61bb      	str	r3, [r7, #24]
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	e14c      	b.n	80094a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009214:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009216:	2300      	movs	r3, #0
 8009218:	617b      	str	r3, [r7, #20]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	617b      	str	r3, [r7, #20]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	617b      	str	r3, [r7, #20]
 800922a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800922c:	e138      	b.n	80094a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009232:	2b03      	cmp	r3, #3
 8009234:	f200 80f1 	bhi.w	800941a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800923c:	2b01      	cmp	r3, #1
 800923e:	d123      	bne.n	8009288 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009242:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fbed 	bl	8009a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e139      	b.n	80094c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	691a      	ldr	r2, [r3, #16]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009270:	3b01      	subs	r3, #1
 8009272:	b29a      	uxth	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800927c:	b29b      	uxth	r3, r3
 800927e:	3b01      	subs	r3, #1
 8009280:	b29a      	uxth	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009286:	e10b      	b.n	80094a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800928c:	2b02      	cmp	r3, #2
 800928e:	d14e      	bne.n	800932e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	2200      	movs	r2, #0
 8009298:	4906      	ldr	r1, [pc, #24]	; (80092b4 <HAL_I2C_Master_Receive+0x22c>)
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f000 fa6a 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d008      	beq.n	80092b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e10e      	b.n	80094c8 <HAL_I2C_Master_Receive+0x440>
 80092aa:	bf00      	nop
 80092ac:	00100002 	.word	0x00100002
 80092b0:	ffff0000 	.word	0xffff0000
 80092b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	691a      	ldr	r2, [r3, #16]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	b2d2      	uxtb	r2, r2
 80092d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092da:	1c5a      	adds	r2, r3, #1
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e4:	3b01      	subs	r3, #1
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	3b01      	subs	r3, #1
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009304:	b2d2      	uxtb	r2, r2
 8009306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930c:	1c5a      	adds	r2, r3, #1
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009316:	3b01      	subs	r3, #1
 8009318:	b29a      	uxth	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009322:	b29b      	uxth	r3, r3
 8009324:	3b01      	subs	r3, #1
 8009326:	b29a      	uxth	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800932c:	e0b8      	b.n	80094a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	2200      	movs	r2, #0
 8009336:	4966      	ldr	r1, [pc, #408]	; (80094d0 <HAL_I2C_Master_Receive+0x448>)
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 fa1b 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e0bf      	b.n	80094c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	691a      	ldr	r2, [r3, #16]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	b2d2      	uxtb	r2, r2
 8009364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	2200      	movs	r2, #0
 8009392:	494f      	ldr	r1, [pc, #316]	; (80094d0 <HAL_I2C_Master_Receive+0x448>)
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 f9ed 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e091      	b.n	80094c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691a      	ldr	r2, [r3, #16]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d0:	3b01      	subs	r3, #1
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093dc:	b29b      	uxth	r3, r3
 80093de:	3b01      	subs	r3, #1
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	691a      	ldr	r2, [r3, #16]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f0:	b2d2      	uxtb	r2, r2
 80093f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009402:	3b01      	subs	r3, #1
 8009404:	b29a      	uxth	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800940e:	b29b      	uxth	r3, r3
 8009410:	3b01      	subs	r3, #1
 8009412:	b29a      	uxth	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009418:	e042      	b.n	80094a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800941a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 fb00 	bl	8009a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e04c      	b.n	80094c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	b2d2      	uxtb	r2, r2
 800943a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800944a:	3b01      	subs	r3, #1
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009456:	b29b      	uxth	r3, r3
 8009458:	3b01      	subs	r3, #1
 800945a:	b29a      	uxth	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	f003 0304 	and.w	r3, r3, #4
 800946a:	2b04      	cmp	r3, #4
 800946c:	d118      	bne.n	80094a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	691a      	ldr	r2, [r3, #16]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	b2d2      	uxtb	r2, r2
 800947a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800948a:	3b01      	subs	r3, #1
 800948c:	b29a      	uxth	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009496:	b29b      	uxth	r3, r3
 8009498:	3b01      	subs	r3, #1
 800949a:	b29a      	uxth	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f47f aec2 	bne.w	800922e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	e000      	b.n	80094c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80094c6:	2302      	movs	r3, #2
  }
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3728      	adds	r7, #40	; 0x28
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	00010004 	.word	0x00010004

080094d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af02      	add	r7, sp, #8
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	607a      	str	r2, [r7, #4]
 80094de:	603b      	str	r3, [r7, #0]
 80094e0:	460b      	mov	r3, r1
 80094e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	d006      	beq.n	80094fe <I2C_MasterRequestWrite+0x2a>
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d003      	beq.n	80094fe <I2C_MasterRequestWrite+0x2a>
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80094fc:	d108      	bne.n	8009510 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	e00b      	b.n	8009528 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009514:	2b12      	cmp	r3, #18
 8009516:	d107      	bne.n	8009528 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009526:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 f91d 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00d      	beq.n	800955c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800954a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800954e:	d103      	bne.n	8009558 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009556:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e035      	b.n	80095c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009564:	d108      	bne.n	8009578 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009566:	897b      	ldrh	r3, [r7, #10]
 8009568:	b2db      	uxtb	r3, r3
 800956a:	461a      	mov	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009574:	611a      	str	r2, [r3, #16]
 8009576:	e01b      	b.n	80095b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009578:	897b      	ldrh	r3, [r7, #10]
 800957a:	11db      	asrs	r3, r3, #7
 800957c:	b2db      	uxtb	r3, r3
 800957e:	f003 0306 	and.w	r3, r3, #6
 8009582:	b2db      	uxtb	r3, r3
 8009584:	f063 030f 	orn	r3, r3, #15
 8009588:	b2da      	uxtb	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	490e      	ldr	r1, [pc, #56]	; (80095d0 <I2C_MasterRequestWrite+0xfc>)
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 f943 	bl	8009822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e010      	b.n	80095c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80095a6:	897b      	ldrh	r3, [r7, #10]
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	4907      	ldr	r1, [pc, #28]	; (80095d4 <I2C_MasterRequestWrite+0x100>)
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 f933 	bl	8009822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e000      	b.n	80095c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	00010008 	.word	0x00010008
 80095d4:	00010002 	.word	0x00010002

080095d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af02      	add	r7, sp, #8
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	607a      	str	r2, [r7, #4]
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	460b      	mov	r3, r1
 80095e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2b08      	cmp	r3, #8
 8009602:	d006      	beq.n	8009612 <I2C_MasterRequestRead+0x3a>
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d003      	beq.n	8009612 <I2C_MasterRequestRead+0x3a>
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009610:	d108      	bne.n	8009624 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	e00b      	b.n	800963c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009628:	2b11      	cmp	r3, #17
 800962a:	d107      	bne.n	800963c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800963a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 f893 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00d      	beq.n	8009670 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009662:	d103      	bne.n	800966c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800966a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	e079      	b.n	8009764 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009678:	d108      	bne.n	800968c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800967a:	897b      	ldrh	r3, [r7, #10]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	f043 0301 	orr.w	r3, r3, #1
 8009682:	b2da      	uxtb	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	611a      	str	r2, [r3, #16]
 800968a:	e05f      	b.n	800974c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800968c:	897b      	ldrh	r3, [r7, #10]
 800968e:	11db      	asrs	r3, r3, #7
 8009690:	b2db      	uxtb	r3, r3
 8009692:	f003 0306 	and.w	r3, r3, #6
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f063 030f 	orn	r3, r3, #15
 800969c:	b2da      	uxtb	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	4930      	ldr	r1, [pc, #192]	; (800976c <I2C_MasterRequestRead+0x194>)
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f000 f8b9 	bl	8009822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e054      	b.n	8009764 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80096ba:	897b      	ldrh	r3, [r7, #10]
 80096bc:	b2da      	uxtb	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	4929      	ldr	r1, [pc, #164]	; (8009770 <I2C_MasterRequestRead+0x198>)
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 f8a9 	bl	8009822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e044      	b.n	8009764 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096da:	2300      	movs	r3, #0
 80096dc:	613b      	str	r3, [r7, #16]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	613b      	str	r3, [r7, #16]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	613b      	str	r3, [r7, #16]
 80096ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 f831 	bl	8009774 <I2C_WaitOnFlagUntilTimeout>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00d      	beq.n	8009734 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009726:	d103      	bne.n	8009730 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800972e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009730:	2303      	movs	r3, #3
 8009732:	e017      	b.n	8009764 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009734:	897b      	ldrh	r3, [r7, #10]
 8009736:	11db      	asrs	r3, r3, #7
 8009738:	b2db      	uxtb	r3, r3
 800973a:	f003 0306 	and.w	r3, r3, #6
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f063 030e 	orn	r3, r3, #14
 8009744:	b2da      	uxtb	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	4907      	ldr	r1, [pc, #28]	; (8009770 <I2C_MasterRequestRead+0x198>)
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 f865 	bl	8009822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e000      	b.n	8009764 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	00010008 	.word	0x00010008
 8009770:	00010002 	.word	0x00010002

08009774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	4613      	mov	r3, r2
 8009782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009784:	e025      	b.n	80097d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978c:	d021      	beq.n	80097d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800978e:	f7fd ff71 	bl	8007674 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d302      	bcc.n	80097a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d116      	bne.n	80097d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	f043 0220 	orr.w	r2, r3, #32
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e023      	b.n	800981a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	0c1b      	lsrs	r3, r3, #16
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d10d      	bne.n	80097f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	43da      	mvns	r2, r3
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	4013      	ands	r3, r2
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bf0c      	ite	eq
 80097ee:	2301      	moveq	r3, #1
 80097f0:	2300      	movne	r3, #0
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	461a      	mov	r2, r3
 80097f6:	e00c      	b.n	8009812 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	43da      	mvns	r2, r3
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	4013      	ands	r3, r2
 8009804:	b29b      	uxth	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	bf0c      	ite	eq
 800980a:	2301      	moveq	r3, #1
 800980c:	2300      	movne	r3, #0
 800980e:	b2db      	uxtb	r3, r3
 8009810:	461a      	mov	r2, r3
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	429a      	cmp	r2, r3
 8009816:	d0b6      	beq.n	8009786 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	607a      	str	r2, [r7, #4]
 800982e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009830:	e051      	b.n	80098d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800983c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009840:	d123      	bne.n	800988a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009850:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800985a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2200      	movs	r2, #0
 8009860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2220      	movs	r2, #32
 8009866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	f043 0204 	orr.w	r2, r3, #4
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e046      	b.n	8009918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009890:	d021      	beq.n	80098d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009892:	f7fd feef 	bl	8007674 <HAL_GetTick>
 8009896:	4602      	mov	r2, r0
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d302      	bcc.n	80098a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d116      	bne.n	80098d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c2:	f043 0220 	orr.w	r2, r3, #32
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e020      	b.n	8009918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	0c1b      	lsrs	r3, r3, #16
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d10c      	bne.n	80098fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	43da      	mvns	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	4013      	ands	r3, r2
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bf14      	ite	ne
 80098f2:	2301      	movne	r3, #1
 80098f4:	2300      	moveq	r3, #0
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	e00b      	b.n	8009912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	43da      	mvns	r2, r3
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	4013      	ands	r3, r2
 8009906:	b29b      	uxth	r3, r3
 8009908:	2b00      	cmp	r3, #0
 800990a:	bf14      	ite	ne
 800990c:	2301      	movne	r3, #1
 800990e:	2300      	moveq	r3, #0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d18d      	bne.n	8009832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800992c:	e02d      	b.n	800998a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 f8ce 	bl	8009ad0 <I2C_IsAcknowledgeFailed>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e02d      	b.n	800999a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009944:	d021      	beq.n	800998a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009946:	f7fd fe95 	bl	8007674 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	429a      	cmp	r2, r3
 8009954:	d302      	bcc.n	800995c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d116      	bne.n	800998a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2220      	movs	r2, #32
 8009966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009976:	f043 0220 	orr.w	r2, r3, #32
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e007      	b.n	800999a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	695b      	ldr	r3, [r3, #20]
 8009990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009994:	2b80      	cmp	r3, #128	; 0x80
 8009996:	d1ca      	bne.n	800992e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b084      	sub	sp, #16
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	60f8      	str	r0, [r7, #12]
 80099aa:	60b9      	str	r1, [r7, #8]
 80099ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80099ae:	e02d      	b.n	8009a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f88d 	bl	8009ad0 <I2C_IsAcknowledgeFailed>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e02d      	b.n	8009a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c6:	d021      	beq.n	8009a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099c8:	f7fd fe54 	bl	8007674 <HAL_GetTick>
 80099cc:	4602      	mov	r2, r0
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d302      	bcc.n	80099de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d116      	bne.n	8009a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2220      	movs	r2, #32
 80099e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f8:	f043 0220 	orr.w	r2, r3, #32
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e007      	b.n	8009a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	f003 0304 	and.w	r3, r3, #4
 8009a16:	2b04      	cmp	r3, #4
 8009a18:	d1ca      	bne.n	80099b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a30:	e042      	b.n	8009ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	f003 0310 	and.w	r3, r3, #16
 8009a3c:	2b10      	cmp	r3, #16
 8009a3e:	d119      	bne.n	8009a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f06f 0210 	mvn.w	r2, #16
 8009a48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2220      	movs	r2, #32
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e029      	b.n	8009ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a74:	f7fd fdfe 	bl	8007674 <HAL_GetTick>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d302      	bcc.n	8009a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d116      	bne.n	8009ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2220      	movs	r2, #32
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa4:	f043 0220 	orr.w	r2, r3, #32
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e007      	b.n	8009ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac2:	2b40      	cmp	r3, #64	; 0x40
 8009ac4:	d1b5      	bne.n	8009a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ae6:	d11b      	bne.n	8009b20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009af0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	f043 0204 	orr.w	r2, r3, #4
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e000      	b.n	8009b22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
	...

08009b30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	603b      	str	r3, [r7, #0]
 8009b3e:	4b20      	ldr	r3, [pc, #128]	; (8009bc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b42:	4a1f      	ldr	r2, [pc, #124]	; (8009bc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b48:	6413      	str	r3, [r2, #64]	; 0x40
 8009b4a:	4b1d      	ldr	r3, [pc, #116]	; (8009bc0 <HAL_PWREx_EnableOverDrive+0x90>)
 8009b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009b56:	4b1b      	ldr	r3, [pc, #108]	; (8009bc4 <HAL_PWREx_EnableOverDrive+0x94>)
 8009b58:	2201      	movs	r2, #1
 8009b5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b5c:	f7fd fd8a 	bl	8007674 <HAL_GetTick>
 8009b60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009b62:	e009      	b.n	8009b78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009b64:	f7fd fd86 	bl	8007674 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b72:	d901      	bls.n	8009b78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e01f      	b.n	8009bb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009b78:	4b13      	ldr	r3, [pc, #76]	; (8009bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b84:	d1ee      	bne.n	8009b64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009b86:	4b11      	ldr	r3, [pc, #68]	; (8009bcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b88:	2201      	movs	r2, #1
 8009b8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b8c:	f7fd fd72 	bl	8007674 <HAL_GetTick>
 8009b90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009b92:	e009      	b.n	8009ba8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009b94:	f7fd fd6e 	bl	8007674 <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ba2:	d901      	bls.n	8009ba8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e007      	b.n	8009bb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009ba8:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bb4:	d1ee      	bne.n	8009b94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	40023800 	.word	0x40023800
 8009bc4:	420e0040 	.word	0x420e0040
 8009bc8:	40007000 	.word	0x40007000
 8009bcc:	420e0044 	.word	0x420e0044

08009bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d101      	bne.n	8009be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009be0:	2301      	movs	r3, #1
 8009be2:	e0cc      	b.n	8009d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009be4:	4b68      	ldr	r3, [pc, #416]	; (8009d88 <HAL_RCC_ClockConfig+0x1b8>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 030f 	and.w	r3, r3, #15
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d90c      	bls.n	8009c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bf2:	4b65      	ldr	r3, [pc, #404]	; (8009d88 <HAL_RCC_ClockConfig+0x1b8>)
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	b2d2      	uxtb	r2, r2
 8009bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bfa:	4b63      	ldr	r3, [pc, #396]	; (8009d88 <HAL_RCC_ClockConfig+0x1b8>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 030f 	and.w	r3, r3, #15
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d001      	beq.n	8009c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e0b8      	b.n	8009d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d020      	beq.n	8009c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0304 	and.w	r3, r3, #4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d005      	beq.n	8009c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c24:	4b59      	ldr	r3, [pc, #356]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	4a58      	ldr	r2, [pc, #352]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 0308 	and.w	r3, r3, #8
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d005      	beq.n	8009c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c3c:	4b53      	ldr	r3, [pc, #332]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	4a52      	ldr	r2, [pc, #328]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c48:	4b50      	ldr	r3, [pc, #320]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	494d      	ldr	r1, [pc, #308]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d044      	beq.n	8009cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d107      	bne.n	8009c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c6e:	4b47      	ldr	r3, [pc, #284]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d119      	bne.n	8009cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e07f      	b.n	8009d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d003      	beq.n	8009c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d107      	bne.n	8009c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c8e:	4b3f      	ldr	r3, [pc, #252]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d109      	bne.n	8009cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e06f      	b.n	8009d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c9e:	4b3b      	ldr	r3, [pc, #236]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e067      	b.n	8009d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009cae:	4b37      	ldr	r3, [pc, #220]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	f023 0203 	bic.w	r2, r3, #3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	4934      	ldr	r1, [pc, #208]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009cc0:	f7fd fcd8 	bl	8007674 <HAL_GetTick>
 8009cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cc6:	e00a      	b.n	8009cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cc8:	f7fd fcd4 	bl	8007674 <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d901      	bls.n	8009cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e04f      	b.n	8009d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cde:	4b2b      	ldr	r3, [pc, #172]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	f003 020c 	and.w	r2, r3, #12
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d1eb      	bne.n	8009cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009cf0:	4b25      	ldr	r3, [pc, #148]	; (8009d88 <HAL_RCC_ClockConfig+0x1b8>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 030f 	and.w	r3, r3, #15
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d20c      	bcs.n	8009d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cfe:	4b22      	ldr	r3, [pc, #136]	; (8009d88 <HAL_RCC_ClockConfig+0x1b8>)
 8009d00:	683a      	ldr	r2, [r7, #0]
 8009d02:	b2d2      	uxtb	r2, r2
 8009d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d06:	4b20      	ldr	r3, [pc, #128]	; (8009d88 <HAL_RCC_ClockConfig+0x1b8>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 030f 	and.w	r3, r3, #15
 8009d0e:	683a      	ldr	r2, [r7, #0]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d001      	beq.n	8009d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e032      	b.n	8009d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d008      	beq.n	8009d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d24:	4b19      	ldr	r3, [pc, #100]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	4916      	ldr	r1, [pc, #88]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0308 	and.w	r3, r3, #8
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d009      	beq.n	8009d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d42:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	00db      	lsls	r3, r3, #3
 8009d50:	490e      	ldr	r1, [pc, #56]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009d52:	4313      	orrs	r3, r2
 8009d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009d56:	f000 f821 	bl	8009d9c <HAL_RCC_GetSysClockFreq>
 8009d5a:	4601      	mov	r1, r0
 8009d5c:	4b0b      	ldr	r3, [pc, #44]	; (8009d8c <HAL_RCC_ClockConfig+0x1bc>)
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	091b      	lsrs	r3, r3, #4
 8009d62:	f003 030f 	and.w	r3, r3, #15
 8009d66:	4a0a      	ldr	r2, [pc, #40]	; (8009d90 <HAL_RCC_ClockConfig+0x1c0>)
 8009d68:	5cd3      	ldrb	r3, [r2, r3]
 8009d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8009d6e:	4a09      	ldr	r2, [pc, #36]	; (8009d94 <HAL_RCC_ClockConfig+0x1c4>)
 8009d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009d72:	4b09      	ldr	r3, [pc, #36]	; (8009d98 <HAL_RCC_ClockConfig+0x1c8>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fd fc38 	bl	80075ec <HAL_InitTick>

  return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	40023c00 	.word	0x40023c00
 8009d8c:	40023800 	.word	0x40023800
 8009d90:	08018544 	.word	0x08018544
 8009d94:	20000000 	.word	0x20000000
 8009d98:	20000004 	.word	0x20000004

08009d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	607b      	str	r3, [r7, #4]
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	2300      	movs	r3, #0
 8009dac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009db2:	4b63      	ldr	r3, [pc, #396]	; (8009f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	f003 030c 	and.w	r3, r3, #12
 8009dba:	2b04      	cmp	r3, #4
 8009dbc:	d007      	beq.n	8009dce <HAL_RCC_GetSysClockFreq+0x32>
 8009dbe:	2b08      	cmp	r3, #8
 8009dc0:	d008      	beq.n	8009dd4 <HAL_RCC_GetSysClockFreq+0x38>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f040 80b4 	bne.w	8009f30 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009dc8:	4b5e      	ldr	r3, [pc, #376]	; (8009f44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009dca:	60bb      	str	r3, [r7, #8]
       break;
 8009dcc:	e0b3      	b.n	8009f36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009dce:	4b5d      	ldr	r3, [pc, #372]	; (8009f44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009dd0:	60bb      	str	r3, [r7, #8]
      break;
 8009dd2:	e0b0      	b.n	8009f36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009dd4:	4b5a      	ldr	r3, [pc, #360]	; (8009f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ddc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009dde:	4b58      	ldr	r3, [pc, #352]	; (8009f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d04a      	beq.n	8009e80 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009dea:	4b55      	ldr	r3, [pc, #340]	; (8009f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	099b      	lsrs	r3, r3, #6
 8009df0:	f04f 0400 	mov.w	r4, #0
 8009df4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009df8:	f04f 0200 	mov.w	r2, #0
 8009dfc:	ea03 0501 	and.w	r5, r3, r1
 8009e00:	ea04 0602 	and.w	r6, r4, r2
 8009e04:	4629      	mov	r1, r5
 8009e06:	4632      	mov	r2, r6
 8009e08:	f04f 0300 	mov.w	r3, #0
 8009e0c:	f04f 0400 	mov.w	r4, #0
 8009e10:	0154      	lsls	r4, r2, #5
 8009e12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009e16:	014b      	lsls	r3, r1, #5
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4622      	mov	r2, r4
 8009e1c:	1b49      	subs	r1, r1, r5
 8009e1e:	eb62 0206 	sbc.w	r2, r2, r6
 8009e22:	f04f 0300 	mov.w	r3, #0
 8009e26:	f04f 0400 	mov.w	r4, #0
 8009e2a:	0194      	lsls	r4, r2, #6
 8009e2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009e30:	018b      	lsls	r3, r1, #6
 8009e32:	1a5b      	subs	r3, r3, r1
 8009e34:	eb64 0402 	sbc.w	r4, r4, r2
 8009e38:	f04f 0100 	mov.w	r1, #0
 8009e3c:	f04f 0200 	mov.w	r2, #0
 8009e40:	00e2      	lsls	r2, r4, #3
 8009e42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009e46:	00d9      	lsls	r1, r3, #3
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4614      	mov	r4, r2
 8009e4c:	195b      	adds	r3, r3, r5
 8009e4e:	eb44 0406 	adc.w	r4, r4, r6
 8009e52:	f04f 0100 	mov.w	r1, #0
 8009e56:	f04f 0200 	mov.w	r2, #0
 8009e5a:	02a2      	lsls	r2, r4, #10
 8009e5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009e60:	0299      	lsls	r1, r3, #10
 8009e62:	460b      	mov	r3, r1
 8009e64:	4614      	mov	r4, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	4621      	mov	r1, r4
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f04f 0400 	mov.w	r4, #0
 8009e70:	461a      	mov	r2, r3
 8009e72:	4623      	mov	r3, r4
 8009e74:	f7f6 ff20 	bl	8000cb8 <__aeabi_uldivmod>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	60fb      	str	r3, [r7, #12]
 8009e7e:	e049      	b.n	8009f14 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e80:	4b2f      	ldr	r3, [pc, #188]	; (8009f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	099b      	lsrs	r3, r3, #6
 8009e86:	f04f 0400 	mov.w	r4, #0
 8009e8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009e8e:	f04f 0200 	mov.w	r2, #0
 8009e92:	ea03 0501 	and.w	r5, r3, r1
 8009e96:	ea04 0602 	and.w	r6, r4, r2
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	4632      	mov	r2, r6
 8009e9e:	f04f 0300 	mov.w	r3, #0
 8009ea2:	f04f 0400 	mov.w	r4, #0
 8009ea6:	0154      	lsls	r4, r2, #5
 8009ea8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009eac:	014b      	lsls	r3, r1, #5
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4622      	mov	r2, r4
 8009eb2:	1b49      	subs	r1, r1, r5
 8009eb4:	eb62 0206 	sbc.w	r2, r2, r6
 8009eb8:	f04f 0300 	mov.w	r3, #0
 8009ebc:	f04f 0400 	mov.w	r4, #0
 8009ec0:	0194      	lsls	r4, r2, #6
 8009ec2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009ec6:	018b      	lsls	r3, r1, #6
 8009ec8:	1a5b      	subs	r3, r3, r1
 8009eca:	eb64 0402 	sbc.w	r4, r4, r2
 8009ece:	f04f 0100 	mov.w	r1, #0
 8009ed2:	f04f 0200 	mov.w	r2, #0
 8009ed6:	00e2      	lsls	r2, r4, #3
 8009ed8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009edc:	00d9      	lsls	r1, r3, #3
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4614      	mov	r4, r2
 8009ee2:	195b      	adds	r3, r3, r5
 8009ee4:	eb44 0406 	adc.w	r4, r4, r6
 8009ee8:	f04f 0100 	mov.w	r1, #0
 8009eec:	f04f 0200 	mov.w	r2, #0
 8009ef0:	02a2      	lsls	r2, r4, #10
 8009ef2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009ef6:	0299      	lsls	r1, r3, #10
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4614      	mov	r4, r2
 8009efc:	4618      	mov	r0, r3
 8009efe:	4621      	mov	r1, r4
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f04f 0400 	mov.w	r4, #0
 8009f06:	461a      	mov	r2, r3
 8009f08:	4623      	mov	r3, r4
 8009f0a:	f7f6 fed5 	bl	8000cb8 <__aeabi_uldivmod>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	460c      	mov	r4, r1
 8009f12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f14:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	0c1b      	lsrs	r3, r3, #16
 8009f1a:	f003 0303 	and.w	r3, r3, #3
 8009f1e:	3301      	adds	r3, #1
 8009f20:	005b      	lsls	r3, r3, #1
 8009f22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f2c:	60bb      	str	r3, [r7, #8]
      break;
 8009f2e:	e002      	b.n	8009f36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f30:	4b04      	ldr	r3, [pc, #16]	; (8009f44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009f32:	60bb      	str	r3, [r7, #8]
      break;
 8009f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f36:	68bb      	ldr	r3, [r7, #8]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3714      	adds	r7, #20
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f40:	40023800 	.word	0x40023800
 8009f44:	00f42400 	.word	0x00f42400

08009f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f4c:	4b03      	ldr	r3, [pc, #12]	; (8009f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000000 	.word	0x20000000

08009f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009f64:	f7ff fff0 	bl	8009f48 <HAL_RCC_GetHCLKFreq>
 8009f68:	4601      	mov	r1, r0
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	0a9b      	lsrs	r3, r3, #10
 8009f70:	f003 0307 	and.w	r3, r3, #7
 8009f74:	4a03      	ldr	r2, [pc, #12]	; (8009f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f76:	5cd3      	ldrb	r3, [r2, r3]
 8009f78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	40023800 	.word	0x40023800
 8009f84:	08018554 	.word	0x08018554

08009f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009f8c:	f7ff ffdc 	bl	8009f48 <HAL_RCC_GetHCLKFreq>
 8009f90:	4601      	mov	r1, r0
 8009f92:	4b05      	ldr	r3, [pc, #20]	; (8009fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	0b5b      	lsrs	r3, r3, #13
 8009f98:	f003 0307 	and.w	r3, r3, #7
 8009f9c:	4a03      	ldr	r2, [pc, #12]	; (8009fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f9e:	5cd3      	ldrb	r3, [r2, r3]
 8009fa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	40023800 	.word	0x40023800
 8009fac:	08018554 	.word	0x08018554

08009fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00a      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009fd8:	4b66      	ldr	r3, [pc, #408]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fde:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe6:	4963      	ldr	r1, [pc, #396]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009ffa:	4b5e      	ldr	r3, [pc, #376]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a000:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a008:	495a      	ldr	r1, [pc, #360]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a00a:	4313      	orrs	r3, r2
 800a00c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10b      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a024:	2b00      	cmp	r3, #0
 800a026:	d105      	bne.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a030:	2b00      	cmp	r3, #0
 800a032:	d075      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a034:	4b50      	ldr	r3, [pc, #320]	; (800a178 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a03a:	f7fd fb1b 	bl	8007674 <HAL_GetTick>
 800a03e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a040:	e008      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a042:	f7fd fb17 	bl	8007674 <HAL_GetTick>
 800a046:	4602      	mov	r2, r0
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d901      	bls.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e1dc      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a054:	4b47      	ldr	r3, [pc, #284]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1f0      	bne.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d009      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	019a      	lsls	r2, r3, #6
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	071b      	lsls	r3, r3, #28
 800a078:	493e      	ldr	r1, [pc, #248]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a07a:	4313      	orrs	r3, r2
 800a07c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0302 	and.w	r3, r3, #2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d01f      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a08c:	4b39      	ldr	r3, [pc, #228]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a08e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a092:	0f1b      	lsrs	r3, r3, #28
 800a094:	f003 0307 	and.w	r3, r3, #7
 800a098:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	019a      	lsls	r2, r3, #6
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	061b      	lsls	r3, r3, #24
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	071b      	lsls	r3, r3, #28
 800a0ac:	4931      	ldr	r1, [pc, #196]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a0b4:	4b2f      	ldr	r3, [pc, #188]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a0b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0ba:	f023 021f 	bic.w	r2, r3, #31
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	492b      	ldr	r1, [pc, #172]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00d      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	019a      	lsls	r2, r3, #6
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	061b      	lsls	r3, r3, #24
 800a0e4:	431a      	orrs	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	071b      	lsls	r3, r3, #28
 800a0ec:	4921      	ldr	r1, [pc, #132]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a0f4:	4b20      	ldr	r3, [pc, #128]	; (800a178 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a0fa:	f7fd fabb 	bl	8007674 <HAL_GetTick>
 800a0fe:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a100:	e008      	b.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a102:	f7fd fab7 	bl	8007674 <HAL_GetTick>
 800a106:	4602      	mov	r2, r0
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d901      	bls.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a110:	2303      	movs	r3, #3
 800a112:	e17c      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a114:	4b17      	ldr	r3, [pc, #92]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0f0      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d112      	bne.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10c      	bne.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 80ce 	beq.w	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a14a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a14e:	f040 80c8 	bne.w	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a152:	4b0a      	ldr	r3, [pc, #40]	; (800a17c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a158:	f7fd fa8c 	bl	8007674 <HAL_GetTick>
 800a15c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a15e:	e00f      	b.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a160:	f7fd fa88 	bl	8007674 <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d908      	bls.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a16e:	2303      	movs	r3, #3
 800a170:	e14d      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800a172:	bf00      	nop
 800a174:	40023800 	.word	0x40023800
 800a178:	42470068 	.word	0x42470068
 800a17c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a180:	4ba5      	ldr	r3, [pc, #660]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a18c:	d0e8      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0304 	and.w	r3, r3, #4
 800a196:	2b00      	cmp	r3, #0
 800a198:	d02e      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a19a:	4b9f      	ldr	r3, [pc, #636]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a0:	0c1b      	lsrs	r3, r3, #16
 800a1a2:	f003 0303 	and.w	r3, r3, #3
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	005b      	lsls	r3, r3, #1
 800a1aa:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a1ac:	4b9a      	ldr	r3, [pc, #616]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b2:	0f1b      	lsrs	r3, r3, #28
 800a1b4:	f003 0307 	and.w	r3, r3, #7
 800a1b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	019a      	lsls	r2, r3, #6
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	085b      	lsrs	r3, r3, #1
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	041b      	lsls	r3, r3, #16
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	061b      	lsls	r3, r3, #24
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	071b      	lsls	r3, r3, #28
 800a1d6:	4990      	ldr	r1, [pc, #576]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a1de:	4b8e      	ldr	r3, [pc, #568]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	021b      	lsls	r3, r3, #8
 800a1f0:	4989      	ldr	r1, [pc, #548]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 0308 	and.w	r3, r3, #8
 800a200:	2b00      	cmp	r3, #0
 800a202:	d02c      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a204:	4b84      	ldr	r3, [pc, #528]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20a:	0c1b      	lsrs	r3, r3, #16
 800a20c:	f003 0303 	and.w	r3, r3, #3
 800a210:	3301      	adds	r3, #1
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a216:	4b80      	ldr	r3, [pc, #512]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21c:	0e1b      	lsrs	r3, r3, #24
 800a21e:	f003 030f 	and.w	r3, r3, #15
 800a222:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	019a      	lsls	r2, r3, #6
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	085b      	lsrs	r3, r3, #1
 800a22e:	3b01      	subs	r3, #1
 800a230:	041b      	lsls	r3, r3, #16
 800a232:	431a      	orrs	r2, r3
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	061b      	lsls	r3, r3, #24
 800a238:	431a      	orrs	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	071b      	lsls	r3, r3, #28
 800a240:	4975      	ldr	r1, [pc, #468]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a242:	4313      	orrs	r3, r2
 800a244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a248:	4b73      	ldr	r3, [pc, #460]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a24a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a24e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a256:	4970      	ldr	r1, [pc, #448]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a266:	2b00      	cmp	r3, #0
 800a268:	d024      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a26e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a272:	d11f      	bne.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a274:	4b68      	ldr	r3, [pc, #416]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27a:	0e1b      	lsrs	r3, r3, #24
 800a27c:	f003 030f 	and.w	r3, r3, #15
 800a280:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a282:	4b65      	ldr	r3, [pc, #404]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a288:	0f1b      	lsrs	r3, r3, #28
 800a28a:	f003 0307 	and.w	r3, r3, #7
 800a28e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	019a      	lsls	r2, r3, #6
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	085b      	lsrs	r3, r3, #1
 800a29c:	3b01      	subs	r3, #1
 800a29e:	041b      	lsls	r3, r3, #16
 800a2a0:	431a      	orrs	r2, r3
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	061b      	lsls	r3, r3, #24
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	071b      	lsls	r3, r3, #28
 800a2ac:	495a      	ldr	r1, [pc, #360]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a2b4:	4b59      	ldr	r3, [pc, #356]	; (800a41c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a2ba:	f7fd f9db 	bl	8007674 <HAL_GetTick>
 800a2be:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a2c0:	e008      	b.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a2c2:	f7fd f9d7 	bl	8007674 <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	2b02      	cmp	r3, #2
 800a2ce:	d901      	bls.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e09c      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a2d4:	4b50      	ldr	r3, [pc, #320]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2e0:	d1ef      	bne.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 8083 	beq.w	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	60bb      	str	r3, [r7, #8]
 800a2f4:	4b48      	ldr	r3, [pc, #288]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f8:	4a47      	ldr	r2, [pc, #284]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2fe:	6413      	str	r3, [r2, #64]	; 0x40
 800a300:	4b45      	ldr	r3, [pc, #276]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a308:	60bb      	str	r3, [r7, #8]
 800a30a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a30c:	4b44      	ldr	r3, [pc, #272]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a43      	ldr	r2, [pc, #268]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a316:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a318:	f7fd f9ac 	bl	8007674 <HAL_GetTick>
 800a31c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a31e:	e008      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a320:	f7fd f9a8 	bl	8007674 <HAL_GetTick>
 800a324:	4602      	mov	r2, r0
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d901      	bls.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800a32e:	2303      	movs	r3, #3
 800a330:	e06d      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a332:	4b3b      	ldr	r3, [pc, #236]	; (800a420 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0f0      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a33e:	4b36      	ldr	r3, [pc, #216]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a346:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d02f      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a356:	69ba      	ldr	r2, [r7, #24]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d028      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a35c:	4b2e      	ldr	r3, [pc, #184]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a364:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a366:	4b2f      	ldr	r3, [pc, #188]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a368:	2201      	movs	r2, #1
 800a36a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a36c:	4b2d      	ldr	r3, [pc, #180]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a36e:	2200      	movs	r2, #0
 800a370:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a372:	4a29      	ldr	r2, [pc, #164]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a378:	4b27      	ldr	r3, [pc, #156]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a37a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b01      	cmp	r3, #1
 800a382:	d114      	bne.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a384:	f7fd f976 	bl	8007674 <HAL_GetTick>
 800a388:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a38a:	e00a      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a38c:	f7fd f972 	bl	8007674 <HAL_GetTick>
 800a390:	4602      	mov	r2, r0
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	f241 3288 	movw	r2, #5000	; 0x1388
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d901      	bls.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e035      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3a2:	4b1d      	ldr	r3, [pc, #116]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a6:	f003 0302 	and.w	r3, r3, #2
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0ee      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3ba:	d10d      	bne.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a3bc:	4b16      	ldr	r3, [pc, #88]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a3cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3d0:	4911      	ldr	r1, [pc, #68]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	608b      	str	r3, [r1, #8]
 800a3d6:	e005      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a3d8:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	4a0e      	ldr	r2, [pc, #56]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a3e2:	6093      	str	r3, [r2, #8]
 800a3e4:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3f0:	4909      	ldr	r1, [pc, #36]	; (800a418 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0310 	and.w	r3, r3, #16
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d004      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a408:	4b07      	ldr	r3, [pc, #28]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800a40a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3720      	adds	r7, #32
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	40023800 	.word	0x40023800
 800a41c:	42470070 	.word	0x42470070
 800a420:	40007000 	.word	0x40007000
 800a424:	42470e40 	.word	0x42470e40
 800a428:	424711e0 	.word	0x424711e0

0800a42c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b086      	sub	sp, #24
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a434:	2300      	movs	r3, #0
 800a436:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0301 	and.w	r3, r3, #1
 800a440:	2b00      	cmp	r3, #0
 800a442:	d075      	beq.n	800a530 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a444:	4ba2      	ldr	r3, [pc, #648]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	f003 030c 	and.w	r3, r3, #12
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d00c      	beq.n	800a46a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a450:	4b9f      	ldr	r3, [pc, #636]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a458:	2b08      	cmp	r3, #8
 800a45a:	d112      	bne.n	800a482 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a45c:	4b9c      	ldr	r3, [pc, #624]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a468:	d10b      	bne.n	800a482 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a46a:	4b99      	ldr	r3, [pc, #612]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a472:	2b00      	cmp	r3, #0
 800a474:	d05b      	beq.n	800a52e <HAL_RCC_OscConfig+0x102>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d157      	bne.n	800a52e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e20b      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a48a:	d106      	bne.n	800a49a <HAL_RCC_OscConfig+0x6e>
 800a48c:	4b90      	ldr	r3, [pc, #576]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a8f      	ldr	r2, [pc, #572]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a496:	6013      	str	r3, [r2, #0]
 800a498:	e01d      	b.n	800a4d6 <HAL_RCC_OscConfig+0xaa>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4a2:	d10c      	bne.n	800a4be <HAL_RCC_OscConfig+0x92>
 800a4a4:	4b8a      	ldr	r3, [pc, #552]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a89      	ldr	r2, [pc, #548]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a4aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	4b87      	ldr	r3, [pc, #540]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a86      	ldr	r2, [pc, #536]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a4b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4ba:	6013      	str	r3, [r2, #0]
 800a4bc:	e00b      	b.n	800a4d6 <HAL_RCC_OscConfig+0xaa>
 800a4be:	4b84      	ldr	r3, [pc, #528]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a83      	ldr	r2, [pc, #524]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a4c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4c8:	6013      	str	r3, [r2, #0]
 800a4ca:	4b81      	ldr	r3, [pc, #516]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a80      	ldr	r2, [pc, #512]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a4d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d013      	beq.n	800a506 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4de:	f7fd f8c9 	bl	8007674 <HAL_GetTick>
 800a4e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4e4:	e008      	b.n	800a4f8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a4e6:	f7fd f8c5 	bl	8007674 <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	2b64      	cmp	r3, #100	; 0x64
 800a4f2:	d901      	bls.n	800a4f8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e1d0      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4f8:	4b75      	ldr	r3, [pc, #468]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d0f0      	beq.n	800a4e6 <HAL_RCC_OscConfig+0xba>
 800a504:	e014      	b.n	800a530 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a506:	f7fd f8b5 	bl	8007674 <HAL_GetTick>
 800a50a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a50c:	e008      	b.n	800a520 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a50e:	f7fd f8b1 	bl	8007674 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	2b64      	cmp	r3, #100	; 0x64
 800a51a:	d901      	bls.n	800a520 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e1bc      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a520:	4b6b      	ldr	r3, [pc, #428]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f0      	bne.n	800a50e <HAL_RCC_OscConfig+0xe2>
 800a52c:	e000      	b.n	800a530 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a52e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 0302 	and.w	r3, r3, #2
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d063      	beq.n	800a604 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a53c:	4b64      	ldr	r3, [pc, #400]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	f003 030c 	and.w	r3, r3, #12
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00b      	beq.n	800a560 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a548:	4b61      	ldr	r3, [pc, #388]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a550:	2b08      	cmp	r3, #8
 800a552:	d11c      	bne.n	800a58e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a554:	4b5e      	ldr	r3, [pc, #376]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d116      	bne.n	800a58e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a560:	4b5b      	ldr	r3, [pc, #364]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 0302 	and.w	r3, r3, #2
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d005      	beq.n	800a578 <HAL_RCC_OscConfig+0x14c>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d001      	beq.n	800a578 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e190      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a578:	4b55      	ldr	r3, [pc, #340]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	00db      	lsls	r3, r3, #3
 800a586:	4952      	ldr	r1, [pc, #328]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a588:	4313      	orrs	r3, r2
 800a58a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a58c:	e03a      	b.n	800a604 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d020      	beq.n	800a5d8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a596:	4b4f      	ldr	r3, [pc, #316]	; (800a6d4 <HAL_RCC_OscConfig+0x2a8>)
 800a598:	2201      	movs	r2, #1
 800a59a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a59c:	f7fd f86a 	bl	8007674 <HAL_GetTick>
 800a5a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5a2:	e008      	b.n	800a5b6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a5a4:	f7fd f866 	bl	8007674 <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d901      	bls.n	800a5b6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e171      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5b6:	4b46      	ldr	r3, [pc, #280]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0302 	and.w	r3, r3, #2
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0f0      	beq.n	800a5a4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5c2:	4b43      	ldr	r3, [pc, #268]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	493f      	ldr	r1, [pc, #252]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	600b      	str	r3, [r1, #0]
 800a5d6:	e015      	b.n	800a604 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5d8:	4b3e      	ldr	r3, [pc, #248]	; (800a6d4 <HAL_RCC_OscConfig+0x2a8>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5de:	f7fd f849 	bl	8007674 <HAL_GetTick>
 800a5e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5e4:	e008      	b.n	800a5f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a5e6:	f7fd f845 	bl	8007674 <HAL_GetTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d901      	bls.n	800a5f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e150      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5f8:	4b35      	ldr	r3, [pc, #212]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0302 	and.w	r3, r3, #2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1f0      	bne.n	800a5e6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0308 	and.w	r3, r3, #8
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d030      	beq.n	800a672 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	695b      	ldr	r3, [r3, #20]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d016      	beq.n	800a646 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a618:	4b2f      	ldr	r3, [pc, #188]	; (800a6d8 <HAL_RCC_OscConfig+0x2ac>)
 800a61a:	2201      	movs	r2, #1
 800a61c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a61e:	f7fd f829 	bl	8007674 <HAL_GetTick>
 800a622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a624:	e008      	b.n	800a638 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a626:	f7fd f825 	bl	8007674 <HAL_GetTick>
 800a62a:	4602      	mov	r2, r0
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	2b02      	cmp	r3, #2
 800a632:	d901      	bls.n	800a638 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a634:	2303      	movs	r3, #3
 800a636:	e130      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a638:	4b25      	ldr	r3, [pc, #148]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0f0      	beq.n	800a626 <HAL_RCC_OscConfig+0x1fa>
 800a644:	e015      	b.n	800a672 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a646:	4b24      	ldr	r3, [pc, #144]	; (800a6d8 <HAL_RCC_OscConfig+0x2ac>)
 800a648:	2200      	movs	r2, #0
 800a64a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a64c:	f7fd f812 	bl	8007674 <HAL_GetTick>
 800a650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a652:	e008      	b.n	800a666 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a654:	f7fd f80e 	bl	8007674 <HAL_GetTick>
 800a658:	4602      	mov	r2, r0
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d901      	bls.n	800a666 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e119      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a666:	4b1a      	ldr	r3, [pc, #104]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a66a:	f003 0302 	and.w	r3, r3, #2
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1f0      	bne.n	800a654 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f000 809f 	beq.w	800a7be <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a680:	2300      	movs	r3, #0
 800a682:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a684:	4b12      	ldr	r3, [pc, #72]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10f      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a690:	2300      	movs	r3, #0
 800a692:	60fb      	str	r3, [r7, #12]
 800a694:	4b0e      	ldr	r3, [pc, #56]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a698:	4a0d      	ldr	r2, [pc, #52]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a69a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a69e:	6413      	str	r3, [r2, #64]	; 0x40
 800a6a0:	4b0b      	ldr	r3, [pc, #44]	; (800a6d0 <HAL_RCC_OscConfig+0x2a4>)
 800a6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <HAL_RCC_OscConfig+0x2b0>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d120      	bne.n	800a6fe <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a6bc:	4b07      	ldr	r3, [pc, #28]	; (800a6dc <HAL_RCC_OscConfig+0x2b0>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a06      	ldr	r2, [pc, #24]	; (800a6dc <HAL_RCC_OscConfig+0x2b0>)
 800a6c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a6c8:	f7fc ffd4 	bl	8007674 <HAL_GetTick>
 800a6cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6ce:	e010      	b.n	800a6f2 <HAL_RCC_OscConfig+0x2c6>
 800a6d0:	40023800 	.word	0x40023800
 800a6d4:	42470000 	.word	0x42470000
 800a6d8:	42470e80 	.word	0x42470e80
 800a6dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6e0:	f7fc ffc8 	bl	8007674 <HAL_GetTick>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d901      	bls.n	800a6f2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e0d3      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6f2:	4b6c      	ldr	r3, [pc, #432]	; (800a8a4 <HAL_RCC_OscConfig+0x478>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d0f0      	beq.n	800a6e0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d106      	bne.n	800a714 <HAL_RCC_OscConfig+0x2e8>
 800a706:	4b68      	ldr	r3, [pc, #416]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a70a:	4a67      	ldr	r2, [pc, #412]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a70c:	f043 0301 	orr.w	r3, r3, #1
 800a710:	6713      	str	r3, [r2, #112]	; 0x70
 800a712:	e01c      	b.n	800a74e <HAL_RCC_OscConfig+0x322>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	2b05      	cmp	r3, #5
 800a71a:	d10c      	bne.n	800a736 <HAL_RCC_OscConfig+0x30a>
 800a71c:	4b62      	ldr	r3, [pc, #392]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a71e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a720:	4a61      	ldr	r2, [pc, #388]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a722:	f043 0304 	orr.w	r3, r3, #4
 800a726:	6713      	str	r3, [r2, #112]	; 0x70
 800a728:	4b5f      	ldr	r3, [pc, #380]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a72c:	4a5e      	ldr	r2, [pc, #376]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a72e:	f043 0301 	orr.w	r3, r3, #1
 800a732:	6713      	str	r3, [r2, #112]	; 0x70
 800a734:	e00b      	b.n	800a74e <HAL_RCC_OscConfig+0x322>
 800a736:	4b5c      	ldr	r3, [pc, #368]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a73a:	4a5b      	ldr	r2, [pc, #364]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a73c:	f023 0301 	bic.w	r3, r3, #1
 800a740:	6713      	str	r3, [r2, #112]	; 0x70
 800a742:	4b59      	ldr	r3, [pc, #356]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a746:	4a58      	ldr	r2, [pc, #352]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a748:	f023 0304 	bic.w	r3, r3, #4
 800a74c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d015      	beq.n	800a782 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a756:	f7fc ff8d 	bl	8007674 <HAL_GetTick>
 800a75a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a75c:	e00a      	b.n	800a774 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a75e:	f7fc ff89 	bl	8007674 <HAL_GetTick>
 800a762:	4602      	mov	r2, r0
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	1ad3      	subs	r3, r2, r3
 800a768:	f241 3288 	movw	r2, #5000	; 0x1388
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d901      	bls.n	800a774 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e092      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a774:	4b4c      	ldr	r3, [pc, #304]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d0ee      	beq.n	800a75e <HAL_RCC_OscConfig+0x332>
 800a780:	e014      	b.n	800a7ac <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a782:	f7fc ff77 	bl	8007674 <HAL_GetTick>
 800a786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a788:	e00a      	b.n	800a7a0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a78a:	f7fc ff73 	bl	8007674 <HAL_GetTick>
 800a78e:	4602      	mov	r2, r0
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	1ad3      	subs	r3, r2, r3
 800a794:	f241 3288 	movw	r2, #5000	; 0x1388
 800a798:	4293      	cmp	r3, r2
 800a79a:	d901      	bls.n	800a7a0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800a79c:	2303      	movs	r3, #3
 800a79e:	e07c      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a7a0:	4b41      	ldr	r3, [pc, #260]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a7a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7a4:	f003 0302 	and.w	r3, r3, #2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1ee      	bne.n	800a78a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a7ac:	7dfb      	ldrb	r3, [r7, #23]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d105      	bne.n	800a7be <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7b2:	4b3d      	ldr	r3, [pc, #244]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b6:	4a3c      	ldr	r2, [pc, #240]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a7b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d068      	beq.n	800a898 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a7c6:	4b38      	ldr	r3, [pc, #224]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	f003 030c 	and.w	r3, r3, #12
 800a7ce:	2b08      	cmp	r3, #8
 800a7d0:	d060      	beq.n	800a894 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d145      	bne.n	800a866 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7da:	4b34      	ldr	r3, [pc, #208]	; (800a8ac <HAL_RCC_OscConfig+0x480>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7e0:	f7fc ff48 	bl	8007674 <HAL_GetTick>
 800a7e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7e6:	e008      	b.n	800a7fa <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a7e8:	f7fc ff44 	bl	8007674 <HAL_GetTick>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d901      	bls.n	800a7fa <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e04f      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7fa:	4b2b      	ldr	r3, [pc, #172]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1f0      	bne.n	800a7e8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	69da      	ldr	r2, [r3, #28]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	431a      	orrs	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a814:	019b      	lsls	r3, r3, #6
 800a816:	431a      	orrs	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81c:	085b      	lsrs	r3, r3, #1
 800a81e:	3b01      	subs	r3, #1
 800a820:	041b      	lsls	r3, r3, #16
 800a822:	431a      	orrs	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a828:	061b      	lsls	r3, r3, #24
 800a82a:	431a      	orrs	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a830:	071b      	lsls	r3, r3, #28
 800a832:	491d      	ldr	r1, [pc, #116]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a834:	4313      	orrs	r3, r2
 800a836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a838:	4b1c      	ldr	r3, [pc, #112]	; (800a8ac <HAL_RCC_OscConfig+0x480>)
 800a83a:	2201      	movs	r2, #1
 800a83c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a83e:	f7fc ff19 	bl	8007674 <HAL_GetTick>
 800a842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a844:	e008      	b.n	800a858 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a846:	f7fc ff15 	bl	8007674 <HAL_GetTick>
 800a84a:	4602      	mov	r2, r0
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	2b02      	cmp	r3, #2
 800a852:	d901      	bls.n	800a858 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e020      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a858:	4b13      	ldr	r3, [pc, #76]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d0f0      	beq.n	800a846 <HAL_RCC_OscConfig+0x41a>
 800a864:	e018      	b.n	800a898 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a866:	4b11      	ldr	r3, [pc, #68]	; (800a8ac <HAL_RCC_OscConfig+0x480>)
 800a868:	2200      	movs	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a86c:	f7fc ff02 	bl	8007674 <HAL_GetTick>
 800a870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a872:	e008      	b.n	800a886 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a874:	f7fc fefe 	bl	8007674 <HAL_GetTick>
 800a878:	4602      	mov	r2, r0
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d901      	bls.n	800a886 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e009      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a886:	4b08      	ldr	r3, [pc, #32]	; (800a8a8 <HAL_RCC_OscConfig+0x47c>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1f0      	bne.n	800a874 <HAL_RCC_OscConfig+0x448>
 800a892:	e001      	b.n	800a898 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e000      	b.n	800a89a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3718      	adds	r7, #24
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	40007000 	.word	0x40007000
 800a8a8:	40023800 	.word	0x40023800
 800a8ac:	42470060 	.word	0x42470060

0800a8b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e022      	b.n	800a908 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d105      	bne.n	800a8da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7fa fe85 	bl	80055e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2203      	movs	r2, #3
 800a8de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f814 	bl	800a910 <HAL_SD_InitCard>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e00a      	b.n	800a908 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a910:	b5b0      	push	{r4, r5, r7, lr}
 800a912:	b08e      	sub	sp, #56	; 0x38
 800a914:	af04      	add	r7, sp, #16
 800a916:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a918:	2300      	movs	r3, #0
 800a91a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a91c:	2300      	movs	r3, #0
 800a91e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a920:	2300      	movs	r3, #0
 800a922:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a924:	2300      	movs	r3, #0
 800a926:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a928:	2300      	movs	r3, #0
 800a92a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a92c:	2376      	movs	r3, #118	; 0x76
 800a92e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681d      	ldr	r5, [r3, #0]
 800a934:	466c      	mov	r4, sp
 800a936:	f107 0314 	add.w	r3, r7, #20
 800a93a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a93e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a942:	f107 0308 	add.w	r3, r7, #8
 800a946:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a948:	4628      	mov	r0, r5
 800a94a:	f003 fa87 	bl	800de5c <SDIO_Init>
 800a94e:	4603      	mov	r3, r0
 800a950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e031      	b.n	800a9c4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a960:	4b1a      	ldr	r3, [pc, #104]	; (800a9cc <HAL_SD_InitCard+0xbc>)
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f003 fabf 	bl	800deee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a970:	4b16      	ldr	r3, [pc, #88]	; (800a9cc <HAL_SD_InitCard+0xbc>)
 800a972:	2201      	movs	r2, #1
 800a974:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 ffc6 	bl	800b908 <SD_PowerON>
 800a97c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00b      	beq.n	800a99c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a990:	6a3b      	ldr	r3, [r7, #32]
 800a992:	431a      	orrs	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e013      	b.n	800a9c4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fee5 	bl	800b76c <SD_InitCard>
 800a9a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00b      	beq.n	800a9c2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	431a      	orrs	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e000      	b.n	800a9c4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3728      	adds	r7, #40	; 0x28
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bdb0      	pop	{r4, r5, r7, pc}
 800a9cc:	422580a0 	.word	0x422580a0

0800a9d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b08c      	sub	sp, #48	; 0x30
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
 800a9dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d107      	bne.n	800a9f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e0c7      	b.n	800ab88 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	f040 80c0 	bne.w	800ab86 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aa0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	441a      	add	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d907      	bls.n	800aa2a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	e0ae      	b.n	800ab88 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2203      	movs	r2, #3
 800aa2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2200      	movs	r2, #0
 800aa38:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800aa48:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4e:	4a50      	ldr	r2, [pc, #320]	; (800ab90 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800aa50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa56:	4a4f      	ldr	r2, [pc, #316]	; (800ab94 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800aa58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5e:	2200      	movs	r2, #0
 800aa60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3380      	adds	r3, #128	; 0x80
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	025b      	lsls	r3, r3, #9
 800aa74:	089b      	lsrs	r3, r3, #2
 800aa76:	f7fd fbef 	bl	8008258 <HAL_DMA_Start_IT>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d017      	beq.n	800aab0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800aa8e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a40      	ldr	r2, [pc, #256]	; (800ab98 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e06b      	b.n	800ab88 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800aab0:	4b3a      	ldr	r3, [pc, #232]	; (800ab9c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800aab2:	2201      	movs	r2, #1
 800aab4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d002      	beq.n	800aac4 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	025b      	lsls	r3, r3, #9
 800aac2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aacc:	4618      	mov	r0, r3
 800aace:	f003 faa1 	bl	800e014 <SDMMC_CmdBlockLength>
 800aad2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800aad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00f      	beq.n	800aafa <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a2e      	ldr	r2, [pc, #184]	; (800ab98 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800aae0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae8:	431a      	orrs	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e046      	b.n	800ab88 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aafa:	f04f 33ff 	mov.w	r3, #4294967295
 800aafe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	025b      	lsls	r3, r3, #9
 800ab04:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ab06:	2390      	movs	r3, #144	; 0x90
 800ab08:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ab12:	2301      	movs	r3, #1
 800ab14:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f107 0210 	add.w	r2, r7, #16
 800ab1e:	4611      	mov	r1, r2
 800ab20:	4618      	mov	r0, r3
 800ab22:	f003 fa4b 	bl	800dfbc <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d90a      	bls.n	800ab42 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2282      	movs	r2, #130	; 0x82
 800ab30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f003 faaf 	bl	800e09c <SDMMC_CmdReadMultiBlock>
 800ab3e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ab40:	e009      	b.n	800ab56 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2281      	movs	r2, #129	; 0x81
 800ab46:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f003 fa82 	bl	800e058 <SDMMC_CmdReadSingleBlock>
 800ab54:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ab56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d012      	beq.n	800ab82 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a0d      	ldr	r2, [pc, #52]	; (800ab98 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ab62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e002      	b.n	800ab88 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ab82:	2300      	movs	r3, #0
 800ab84:	e000      	b.n	800ab88 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ab86:	2302      	movs	r3, #2
  }
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3730      	adds	r7, #48	; 0x30
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	0800b57b 	.word	0x0800b57b
 800ab94:	0800b5ed 	.word	0x0800b5ed
 800ab98:	004005ff 	.word	0x004005ff
 800ab9c:	4225858c 	.word	0x4225858c

0800aba0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b08c      	sub	sp, #48	; 0x30
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
 800abac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d107      	bne.n	800abc8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e0ca      	b.n	800ad5e <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	f040 80c3 	bne.w	800ad5c <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800abdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	441a      	add	r2, r3
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d907      	bls.n	800abfa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e0b1      	b.n	800ad5e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2203      	movs	r2, #3
 800abfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2200      	movs	r2, #0
 800ac08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f042 021a 	orr.w	r2, r2, #26
 800ac18:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1e:	4a52      	ldr	r2, [pc, #328]	; (800ad68 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ac20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac26:	4a51      	ldr	r2, [pc, #324]	; (800ad6c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800ac28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac2e:	2200      	movs	r2, #0
 800ac30:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d002      	beq.n	800ac40 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ac3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3c:	025b      	lsls	r3, r3, #9
 800ac3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f003 f9e3 	bl	800e014 <SDMMC_CmdBlockLength>
 800ac4e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00f      	beq.n	800ac76 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a45      	ldr	r2, [pc, #276]	; (800ad70 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ac5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac64:	431a      	orrs	r2, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e073      	b.n	800ad5e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d90a      	bls.n	800ac92 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	22a0      	movs	r2, #160	; 0xa0
 800ac80:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f003 fa4b 	bl	800e124 <SDMMC_CmdWriteMultiBlock>
 800ac8e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ac90:	e009      	b.n	800aca6 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2290      	movs	r2, #144	; 0x90
 800ac96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f003 fa1e 	bl	800e0e0 <SDMMC_CmdWriteSingleBlock>
 800aca4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d012      	beq.n	800acd2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a2f      	ldr	r2, [pc, #188]	; (800ad70 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800acb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	431a      	orrs	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e045      	b.n	800ad5e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800acd2:	4b28      	ldr	r3, [pc, #160]	; (800ad74 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800acd4:	2201      	movs	r2, #1
 800acd6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800acdc:	68b9      	ldr	r1, [r7, #8]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3380      	adds	r3, #128	; 0x80
 800ace4:	461a      	mov	r2, r3
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	025b      	lsls	r3, r3, #9
 800acea:	089b      	lsrs	r3, r3, #2
 800acec:	f7fd fab4 	bl	8008258 <HAL_DMA_Start_IT>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d01a      	beq.n	800ad2c <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f022 021a 	bic.w	r2, r2, #26
 800ad04:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a19      	ldr	r2, [pc, #100]	; (800ad70 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ad0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e018      	b.n	800ad5e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ad2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad30:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	025b      	lsls	r3, r3, #9
 800ad36:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ad38:	2390      	movs	r3, #144	; 0x90
 800ad3a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ad44:	2301      	movs	r3, #1
 800ad46:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f107 0210 	add.w	r2, r7, #16
 800ad50:	4611      	mov	r1, r2
 800ad52:	4618      	mov	r0, r3
 800ad54:	f003 f932 	bl	800dfbc <SDIO_ConfigData>

      return HAL_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e000      	b.n	800ad5e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800ad5c:	2302      	movs	r3, #2
  }
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3730      	adds	r7, #48	; 0x30
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	0800b551 	.word	0x0800b551
 800ad6c:	0800b5ed 	.word	0x0800b5ed
 800ad70:	004005ff 	.word	0x004005ff
 800ad74:	4225858c 	.word	0x4225858c

0800ad78 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d008      	beq.n	800ada6 <HAL_SD_IRQHandler+0x2e>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f003 0308 	and.w	r3, r3, #8
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 ffc8 	bl	800bd34 <SD_Read_IT>
 800ada4:	e155      	b.n	800b052 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 808f 	beq.w	800aed4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adbe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6812      	ldr	r2, [r2, #0]
 800adca:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800adce:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800add2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 0201 	bic.w	r2, r2, #1
 800ade2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f003 0308 	and.w	r3, r3, #8
 800adea:	2b00      	cmp	r3, #0
 800adec:	d039      	beq.n	800ae62 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f003 0302 	and.w	r3, r3, #2
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d104      	bne.n	800ae02 <HAL_SD_IRQHandler+0x8a>
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f003 0320 	and.w	r3, r3, #32
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d011      	beq.n	800ae26 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f003 f9ae 	bl	800e168 <SDMMC_CmdStopTransfer>
 800ae0c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d008      	beq.n	800ae26 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f91f 	bl	800b064 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f240 523a 	movw	r2, #1338	; 0x53a
 800ae2e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d104      	bne.n	800ae52 <HAL_SD_IRQHandler+0xda>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f003 fe04 	bl	800ea60 <HAL_SD_RxCpltCallback>
 800ae58:	e0fb      	b.n	800b052 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f003 fdf6 	bl	800ea4c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ae60:	e0f7      	b.n	800b052 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 80f2 	beq.w	800b052 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f003 0320 	and.w	r3, r3, #32
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d011      	beq.n	800ae9c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f003 f973 	bl	800e168 <SDMMC_CmdStopTransfer>
 800ae82:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d008      	beq.n	800ae9c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	431a      	orrs	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f8e4 	bl	800b064 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f040 80d5 	bne.w	800b052 <HAL_SD_IRQHandler+0x2da>
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f003 0302 	and.w	r3, r3, #2
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f040 80cf 	bne.w	800b052 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f022 0208 	bic.w	r2, r2, #8
 800aec2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f003 fdbd 	bl	800ea4c <HAL_SD_TxCpltCallback>
}
 800aed2:	e0be      	b.n	800b052 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d008      	beq.n	800aef4 <HAL_SD_IRQHandler+0x17c>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f003 0308 	and.w	r3, r3, #8
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 ff72 	bl	800bdd6 <SD_Write_IT>
 800aef2:	e0ae      	b.n	800b052 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 80a7 	beq.w	800b052 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d005      	beq.n	800af1e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af16:	f043 0202 	orr.w	r2, r3, #2
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af24:	f003 0308 	and.w	r3, r3, #8
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d005      	beq.n	800af38 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af30:	f043 0208 	orr.w	r2, r3, #8
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3e:	f003 0320 	and.w	r3, r3, #32
 800af42:	2b00      	cmp	r3, #0
 800af44:	d005      	beq.n	800af52 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4a:	f043 0220 	orr.w	r2, r3, #32
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af58:	f003 0310 	and.w	r3, r3, #16
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d005      	beq.n	800af6c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af64:	f043 0210 	orr.w	r2, r3, #16
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f240 523a 	movw	r2, #1338	; 0x53a
 800af74:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800af84:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f003 f8ec 	bl	800e168 <SDMMC_CmdStopTransfer>
 800af90:	4602      	mov	r2, r0
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af96:	431a      	orrs	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f003 0308 	and.w	r3, r3, #8
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00a      	beq.n	800afbc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f855 	bl	800b064 <HAL_SD_ErrorCallback>
}
 800afba:	e04a      	b.n	800b052 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d045      	beq.n	800b052 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f003 0310 	and.w	r3, r3, #16
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d104      	bne.n	800afda <HAL_SD_IRQHandler+0x262>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f003 0320 	and.w	r3, r3, #32
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d011      	beq.n	800affe <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afde:	4a1f      	ldr	r2, [pc, #124]	; (800b05c <HAL_SD_IRQHandler+0x2e4>)
 800afe0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fd f98e 	bl	8008308 <HAL_DMA_Abort_IT>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d02f      	beq.n	800b052 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fb4a 	bl	800b690 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800affc:	e029      	b.n	800b052 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f003 0301 	and.w	r3, r3, #1
 800b004:	2b00      	cmp	r3, #0
 800b006:	d104      	bne.n	800b012 <HAL_SD_IRQHandler+0x29a>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d011      	beq.n	800b036 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b016:	4a12      	ldr	r2, [pc, #72]	; (800b060 <HAL_SD_IRQHandler+0x2e8>)
 800b018:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fd f972 	bl	8008308 <HAL_DMA_Abort_IT>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d013      	beq.n	800b052 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fb65 	bl	800b6fe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b034:	e00d      	b.n	800b052 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f003 fcf4 	bl	800ea38 <HAL_SD_AbortCallback>
}
 800b050:	e7ff      	b.n	800b052 <HAL_SD_IRQHandler+0x2da>
 800b052:	bf00      	nop
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	0800b691 	.word	0x0800b691
 800b060:	0800b6ff 	.word	0x0800b6ff

0800b064 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b086:	0f9b      	lsrs	r3, r3, #30
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b092:	0e9b      	lsrs	r3, r3, #26
 800b094:	b2db      	uxtb	r3, r3
 800b096:	f003 030f 	and.w	r3, r3, #15
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0a4:	0e1b      	lsrs	r3, r3, #24
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	f003 0303 	and.w	r3, r3, #3
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0b6:	0c1b      	lsrs	r3, r3, #16
 800b0b8:	b2da      	uxtb	r2, r3
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0c2:	0a1b      	lsrs	r3, r3, #8
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0d8:	0d1b      	lsrs	r3, r3, #20
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0e4:	0c1b      	lsrs	r3, r3, #16
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	f003 030f 	and.w	r3, r3, #15
 800b0ec:	b2da      	uxtb	r2, r3
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0f6:	0bdb      	lsrs	r3, r3, #15
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	b2da      	uxtb	r2, r3
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b108:	0b9b      	lsrs	r3, r3, #14
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	f003 0301 	and.w	r3, r3, #1
 800b110:	b2da      	uxtb	r2, r3
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b11a:	0b5b      	lsrs	r3, r3, #13
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	b2da      	uxtb	r2, r3
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b12c:	0b1b      	lsrs	r3, r3, #12
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	f003 0301 	and.w	r3, r3, #1
 800b134:	b2da      	uxtb	r2, r3
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2200      	movs	r2, #0
 800b13e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b144:	2b00      	cmp	r3, #0
 800b146:	d163      	bne.n	800b210 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b14c:	009a      	lsls	r2, r3, #2
 800b14e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b152:	4013      	ands	r3, r2
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b158:	0f92      	lsrs	r2, r2, #30
 800b15a:	431a      	orrs	r2, r3
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b164:	0edb      	lsrs	r3, r3, #27
 800b166:	b2db      	uxtb	r3, r3
 800b168:	f003 0307 	and.w	r3, r3, #7
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b176:	0e1b      	lsrs	r3, r3, #24
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	f003 0307 	and.w	r3, r3, #7
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b188:	0d5b      	lsrs	r3, r3, #21
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	f003 0307 	and.w	r3, r3, #7
 800b190:	b2da      	uxtb	r2, r3
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b19a:	0c9b      	lsrs	r3, r3, #18
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	f003 0307 	and.w	r3, r3, #7
 800b1a2:	b2da      	uxtb	r2, r3
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1ac:	0bdb      	lsrs	r3, r3, #15
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	f003 0307 	and.w	r3, r3, #7
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	1c5a      	adds	r2, r3, #1
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	7e1b      	ldrb	r3, [r3, #24]
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	f003 0307 	and.w	r3, r3, #7
 800b1ce:	3302      	adds	r3, #2
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b1da:	fb02 f203 	mul.w	r2, r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	7a1b      	ldrb	r3, [r3, #8]
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	f003 030f 	and.w	r3, r3, #15
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	409a      	lsls	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b1fc:	0a52      	lsrs	r2, r2, #9
 800b1fe:	fb02 f203 	mul.w	r2, r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b20c:	661a      	str	r2, [r3, #96]	; 0x60
 800b20e:	e031      	b.n	800b274 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b214:	2b01      	cmp	r3, #1
 800b216:	d11d      	bne.n	800b254 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b21c:	041b      	lsls	r3, r3, #16
 800b21e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b226:	0c1b      	lsrs	r3, r3, #16
 800b228:	431a      	orrs	r2, r3
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	3301      	adds	r3, #1
 800b234:	029a      	lsls	r2, r3, #10
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b248:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	661a      	str	r2, [r3, #96]	; 0x60
 800b252:	e00f      	b.n	800b274 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a58      	ldr	r2, [pc, #352]	; (800b3bc <HAL_SD_GetCardCSD+0x344>)
 800b25a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b260:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e09d      	b.n	800b3b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b278:	0b9b      	lsrs	r3, r3, #14
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	b2da      	uxtb	r2, r3
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b28a:	09db      	lsrs	r3, r3, #7
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b292:	b2da      	uxtb	r2, r3
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ac:	0fdb      	lsrs	r3, r3, #31
 800b2ae:	b2da      	uxtb	r2, r3
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b8:	0f5b      	lsrs	r3, r3, #29
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	f003 0303 	and.w	r3, r3, #3
 800b2c0:	b2da      	uxtb	r2, r3
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ca:	0e9b      	lsrs	r3, r3, #26
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	f003 0307 	and.w	r3, r3, #7
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2dc:	0d9b      	lsrs	r3, r3, #22
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	f003 030f 	and.w	r3, r3, #15
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ee:	0d5b      	lsrs	r3, r3, #21
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	f003 0301 	and.w	r3, r3, #1
 800b2f6:	b2da      	uxtb	r2, r3
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b30a:	0c1b      	lsrs	r3, r3, #16
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	b2da      	uxtb	r2, r3
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b31e:	0bdb      	lsrs	r3, r3, #15
 800b320:	b2db      	uxtb	r3, r3
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	b2da      	uxtb	r2, r3
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b332:	0b9b      	lsrs	r3, r3, #14
 800b334:	b2db      	uxtb	r3, r3
 800b336:	f003 0301 	and.w	r3, r3, #1
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b346:	0b5b      	lsrs	r3, r3, #13
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b35a:	0b1b      	lsrs	r3, r3, #12
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	b2da      	uxtb	r2, r3
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b36e:	0a9b      	lsrs	r3, r3, #10
 800b370:	b2db      	uxtb	r3, r3
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	b2da      	uxtb	r2, r3
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b382:	0a1b      	lsrs	r3, r3, #8
 800b384:	b2db      	uxtb	r3, r3
 800b386:	f003 0303 	and.w	r3, r3, #3
 800b38a:	b2da      	uxtb	r2, r3
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b396:	085b      	lsrs	r3, r3, #1
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	004005ff 	.word	0x004005ff

0800b3c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b418:	b5b0      	push	{r4, r5, r7, lr}
 800b41a:	b08e      	sub	sp, #56	; 0x38
 800b41c:	af04      	add	r7, sp, #16
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2203      	movs	r2, #3
 800b426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b42e:	2b03      	cmp	r3, #3
 800b430:	d02e      	beq.n	800b490 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b438:	d106      	bne.n	800b448 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	639a      	str	r2, [r3, #56]	; 0x38
 800b446:	e029      	b.n	800b49c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b44e:	d10a      	bne.n	800b466 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fb0f 	bl	800ba74 <SD_WideBus_Enable>
 800b456:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	431a      	orrs	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	639a      	str	r2, [r3, #56]	; 0x38
 800b464:	e01a      	b.n	800b49c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10a      	bne.n	800b482 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fb4c 	bl	800bb0a <SD_WideBus_Disable>
 800b472:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	431a      	orrs	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	639a      	str	r2, [r3, #56]	; 0x38
 800b480:	e00c      	b.n	800b49c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b486:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	639a      	str	r2, [r3, #56]	; 0x38
 800b48e:	e005      	b.n	800b49c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b494:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d009      	beq.n	800b4b8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a18      	ldr	r2, [pc, #96]	; (800b50c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b4aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e024      	b.n	800b502 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681d      	ldr	r5, [r3, #0]
 800b4de:	466c      	mov	r4, sp
 800b4e0:	f107 0318 	add.w	r3, r7, #24
 800b4e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b4e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b4ec:	f107 030c 	add.w	r3, r7, #12
 800b4f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f002 fcb2 	bl	800de5c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3728      	adds	r7, #40	; 0x28
 800b506:	46bd      	mov	sp, r7
 800b508:	bdb0      	pop	{r4, r5, r7, pc}
 800b50a:	bf00      	nop
 800b50c:	004005ff 	.word	0x004005ff

0800b510 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b51c:	f107 030c 	add.w	r3, r7, #12
 800b520:	4619      	mov	r1, r3
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fa7e 	bl	800ba24 <SD_SendStatus>
 800b528:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d005      	beq.n	800b53c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	431a      	orrs	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	0a5b      	lsrs	r3, r3, #9
 800b540:	f003 030f 	and.w	r3, r3, #15
 800b544:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b546:	693b      	ldr	r3, [r7, #16]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b55c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b56c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b56e:	bf00      	nop
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b084      	sub	sp, #16
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b586:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58c:	2b82      	cmp	r3, #130	; 0x82
 800b58e:	d111      	bne.n	800b5b4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4618      	mov	r0, r3
 800b596:	f002 fde7 	bl	800e168 <SDMMC_CmdStopTransfer>
 800b59a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d008      	beq.n	800b5b4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f7ff fd58 	bl	800b064 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f022 0208 	bic.w	r2, r2, #8
 800b5c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b5cc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f003 fa3f 	bl	800ea60 <HAL_SD_RxCpltCallback>
#endif
}
 800b5e2:	bf00      	nop
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
	...

0800b5ec <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7fd f830 	bl	8008660 <HAL_DMA_GetError>
 800b600:	4603      	mov	r3, r0
 800b602:	2b02      	cmp	r3, #2
 800b604:	d03e      	beq.n	800b684 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b60c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b614:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d002      	beq.n	800b622 <SD_DMAError+0x36>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d12d      	bne.n	800b67e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a19      	ldr	r2, [pc, #100]	; (800b68c <SD_DMAError+0xa0>)
 800b628:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b638:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b646:	6978      	ldr	r0, [r7, #20]
 800b648:	f7ff ff62 	bl	800b510 <HAL_SD_GetCardState>
 800b64c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	2b06      	cmp	r3, #6
 800b652:	d002      	beq.n	800b65a <SD_DMAError+0x6e>
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2b05      	cmp	r3, #5
 800b658:	d10a      	bne.n	800b670 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4618      	mov	r0, r3
 800b660:	f002 fd82 	bl	800e168 <SDMMC_CmdStopTransfer>
 800b664:	4602      	mov	r2, r0
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66a:	431a      	orrs	r2, r3
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	2200      	movs	r2, #0
 800b67c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b67e:	6978      	ldr	r0, [r7, #20]
 800b680:	f7ff fcf0 	bl	800b064 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b684:	bf00      	nop
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	004005ff 	.word	0x004005ff

0800b690 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f240 523a 	movw	r2, #1338	; 0x53a
 800b6a6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f7ff ff31 	bl	800b510 <HAL_SD_GetCardState>
 800b6ae:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	2b06      	cmp	r3, #6
 800b6c2:	d002      	beq.n	800b6ca <SD_DMATxAbort+0x3a>
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2b05      	cmp	r3, #5
 800b6c8:	d10a      	bne.n	800b6e0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f002 fd4a 	bl	800e168 <SDMMC_CmdStopTransfer>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6da:	431a      	orrs	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d103      	bne.n	800b6f0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f003 f9a5 	bl	800ea38 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b6ee:	e002      	b.n	800b6f6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f7ff fcb7 	bl	800b064 <HAL_SD_ErrorCallback>
}
 800b6f6:	bf00      	nop
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b084      	sub	sp, #16
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f240 523a 	movw	r2, #1338	; 0x53a
 800b714:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f7ff fefa 	bl	800b510 <HAL_SD_GetCardState>
 800b71c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	2b06      	cmp	r3, #6
 800b730:	d002      	beq.n	800b738 <SD_DMARxAbort+0x3a>
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2b05      	cmp	r3, #5
 800b736:	d10a      	bne.n	800b74e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f002 fd13 	bl	800e168 <SDMMC_CmdStopTransfer>
 800b742:	4602      	mov	r2, r0
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b748:	431a      	orrs	r2, r3
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b752:	2b00      	cmp	r3, #0
 800b754:	d103      	bne.n	800b75e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f003 f96e 	bl	800ea38 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b75c:	e002      	b.n	800b764 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f7ff fc80 	bl	800b064 <HAL_SD_ErrorCallback>
}
 800b764:	bf00      	nop
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b76c:	b5b0      	push	{r4, r5, r7, lr}
 800b76e:	b094      	sub	sp, #80	; 0x50
 800b770:	af04      	add	r7, sp, #16
 800b772:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b774:	2301      	movs	r3, #1
 800b776:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4618      	mov	r0, r3
 800b77e:	f002 fbc5 	bl	800df0c <SDIO_GetPowerState>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d102      	bne.n	800b78e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b788:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b78c:	e0b7      	b.n	800b8fe <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b792:	2b03      	cmp	r3, #3
 800b794:	d02f      	beq.n	800b7f6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f002 fdee 	bl	800e37c <SDMMC_CmdSendCID>
 800b7a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d001      	beq.n	800b7ac <SD_InitCard+0x40>
    {
      return errorstate;
 800b7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7aa:	e0a8      	b.n	800b8fe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f002 fbef 	bl	800df96 <SDIO_GetResponse>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2104      	movs	r1, #4
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f002 fbe6 	bl	800df96 <SDIO_GetResponse>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2108      	movs	r1, #8
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f002 fbdd 	bl	800df96 <SDIO_GetResponse>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	210c      	movs	r1, #12
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f002 fbd4 	bl	800df96 <SDIO_GetResponse>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	d00d      	beq.n	800b81a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f107 020e 	add.w	r2, r7, #14
 800b806:	4611      	mov	r1, r2
 800b808:	4618      	mov	r0, r3
 800b80a:	f002 fdf4 	bl	800e3f6 <SDMMC_CmdSetRelAdd>
 800b80e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b812:	2b00      	cmp	r3, #0
 800b814:	d001      	beq.n	800b81a <SD_InitCard+0xae>
    {
      return errorstate;
 800b816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b818:	e071      	b.n	800b8fe <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81e:	2b03      	cmp	r3, #3
 800b820:	d036      	beq.n	800b890 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b822:	89fb      	ldrh	r3, [r7, #14]
 800b824:	461a      	mov	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b832:	041b      	lsls	r3, r3, #16
 800b834:	4619      	mov	r1, r3
 800b836:	4610      	mov	r0, r2
 800b838:	f002 fdbe 	bl	800e3b8 <SDMMC_CmdSendCSD>
 800b83c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b840:	2b00      	cmp	r3, #0
 800b842:	d001      	beq.n	800b848 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b846:	e05a      	b.n	800b8fe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2100      	movs	r1, #0
 800b84e:	4618      	mov	r0, r3
 800b850:	f002 fba1 	bl	800df96 <SDIO_GetResponse>
 800b854:	4602      	mov	r2, r0
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2104      	movs	r1, #4
 800b860:	4618      	mov	r0, r3
 800b862:	f002 fb98 	bl	800df96 <SDIO_GetResponse>
 800b866:	4602      	mov	r2, r0
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2108      	movs	r1, #8
 800b872:	4618      	mov	r0, r3
 800b874:	f002 fb8f 	bl	800df96 <SDIO_GetResponse>
 800b878:	4602      	mov	r2, r0
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	210c      	movs	r1, #12
 800b884:	4618      	mov	r0, r3
 800b886:	f002 fb86 	bl	800df96 <SDIO_GetResponse>
 800b88a:	4602      	mov	r2, r0
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2104      	movs	r1, #4
 800b896:	4618      	mov	r0, r3
 800b898:	f002 fb7d 	bl	800df96 <SDIO_GetResponse>
 800b89c:	4603      	mov	r3, r0
 800b89e:	0d1a      	lsrs	r2, r3, #20
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b8a4:	f107 0310 	add.w	r3, r7, #16
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff fbe4 	bl	800b078 <HAL_SD_GetCardCSD>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b8ba:	e020      	b.n	800b8fe <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6819      	ldr	r1, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c4:	041b      	lsls	r3, r3, #16
 800b8c6:	f04f 0400 	mov.w	r4, #0
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	4623      	mov	r3, r4
 800b8ce:	4608      	mov	r0, r1
 800b8d0:	f002 fc6c 	bl	800e1ac <SDMMC_CmdSelDesel>
 800b8d4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <SD_InitCard+0x174>
  {
    return errorstate;
 800b8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8de:	e00e      	b.n	800b8fe <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681d      	ldr	r5, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	466c      	mov	r4, sp
 800b8e8:	f103 0210 	add.w	r2, r3, #16
 800b8ec:	ca07      	ldmia	r2, {r0, r1, r2}
 800b8ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f002 fab0 	bl	800de5c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3740      	adds	r7, #64	; 0x40
 800b902:	46bd      	mov	sp, r7
 800b904:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b908 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b910:	2300      	movs	r3, #0
 800b912:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b914:	2300      	movs	r3, #0
 800b916:	617b      	str	r3, [r7, #20]
 800b918:	2300      	movs	r3, #0
 800b91a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4618      	mov	r0, r3
 800b922:	f002 fc66 	bl	800e1f2 <SDMMC_CmdGoIdleState>
 800b926:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	e072      	b.n	800ba18 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4618      	mov	r0, r3
 800b938:	f002 fc79 	bl	800e22e <SDMMC_CmdOperCond>
 800b93c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00d      	beq.n	800b960 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	f002 fc4f 	bl	800e1f2 <SDMMC_CmdGoIdleState>
 800b954:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d004      	beq.n	800b966 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	e05b      	b.n	800ba18 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d137      	bne.n	800b9de <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2100      	movs	r1, #0
 800b974:	4618      	mov	r0, r3
 800b976:	f002 fc79 	bl	800e26c <SDMMC_CmdAppCommand>
 800b97a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d02d      	beq.n	800b9de <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b982:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b986:	e047      	b.n	800ba18 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2100      	movs	r1, #0
 800b98e:	4618      	mov	r0, r3
 800b990:	f002 fc6c 	bl	800e26c <SDMMC_CmdAppCommand>
 800b994:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <SD_PowerON+0x98>
    {
      return errorstate;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	e03b      	b.n	800ba18 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	491e      	ldr	r1, [pc, #120]	; (800ba20 <SD_PowerON+0x118>)
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f002 fc82 	bl	800e2b0 <SDMMC_CmdAppOperCommand>
 800b9ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d002      	beq.n	800b9ba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b9b8:	e02e      	b.n	800ba18 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2100      	movs	r1, #0
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f002 fae8 	bl	800df96 <SDIO_GetResponse>
 800b9c6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	0fdb      	lsrs	r3, r3, #31
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d101      	bne.n	800b9d4 <SD_PowerON+0xcc>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e000      	b.n	800b9d6 <SD_PowerON+0xce>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	613b      	str	r3, [r7, #16]

    count++;
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d802      	bhi.n	800b9ee <SD_PowerON+0xe6>
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d0cc      	beq.n	800b988 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d902      	bls.n	800b9fe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b9f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9fc:	e00c      	b.n	800ba18 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d003      	beq.n	800ba10 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	645a      	str	r2, [r3, #68]	; 0x44
 800ba0e:	e002      	b.n	800ba16 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	c1100000 	.word	0xc1100000

0800ba24 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d102      	bne.n	800ba3a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ba34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba38:	e018      	b.n	800ba6c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba42:	041b      	lsls	r3, r3, #16
 800ba44:	4619      	mov	r1, r3
 800ba46:	4610      	mov	r0, r2
 800ba48:	f002 fcf6 	bl	800e438 <SDMMC_CmdSendStatus>
 800ba4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	e009      	b.n	800ba6c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2100      	movs	r1, #0
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f002 fa99 	bl	800df96 <SDIO_GetResponse>
 800ba64:	4602      	mov	r2, r0
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	60fb      	str	r3, [r7, #12]
 800ba80:	2300      	movs	r3, #0
 800ba82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	2100      	movs	r1, #0
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f002 fa83 	bl	800df96 <SDIO_GetResponse>
 800ba90:	4603      	mov	r3, r0
 800ba92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba9a:	d102      	bne.n	800baa2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800baa0:	e02f      	b.n	800bb02 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800baa2:	f107 030c 	add.w	r3, r7, #12
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 f879 	bl	800bba0 <SD_FindSCR>
 800baae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	e023      	b.n	800bb02 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d01c      	beq.n	800bafe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bacc:	041b      	lsls	r3, r3, #16
 800bace:	4619      	mov	r1, r3
 800bad0:	4610      	mov	r0, r2
 800bad2:	f002 fbcb 	bl	800e26c <SDMMC_CmdAppCommand>
 800bad6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d001      	beq.n	800bae2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	e00f      	b.n	800bb02 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2102      	movs	r1, #2
 800bae8:	4618      	mov	r0, r3
 800baea:	f002 fc04 	bl	800e2f6 <SDMMC_CmdBusWidth>
 800baee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d001      	beq.n	800bafa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	e003      	b.n	800bb02 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bafa:	2300      	movs	r3, #0
 800bafc:	e001      	b.n	800bb02 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bafe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3718      	adds	r7, #24
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b086      	sub	sp, #24
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bb12:	2300      	movs	r3, #0
 800bb14:	60fb      	str	r3, [r7, #12]
 800bb16:	2300      	movs	r3, #0
 800bb18:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2100      	movs	r1, #0
 800bb20:	4618      	mov	r0, r3
 800bb22:	f002 fa38 	bl	800df96 <SDIO_GetResponse>
 800bb26:	4603      	mov	r3, r0
 800bb28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb30:	d102      	bne.n	800bb38 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bb32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb36:	e02f      	b.n	800bb98 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bb38:	f107 030c 	add.w	r3, r7, #12
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f82e 	bl	800bba0 <SD_FindSCR>
 800bb44:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d001      	beq.n	800bb50 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	e023      	b.n	800bb98 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d01c      	beq.n	800bb94 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb62:	041b      	lsls	r3, r3, #16
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f002 fb80 	bl	800e26c <SDMMC_CmdAppCommand>
 800bb6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	e00f      	b.n	800bb98 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f002 fbb9 	bl	800e2f6 <SDMMC_CmdBusWidth>
 800bb84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d001      	beq.n	800bb90 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	e003      	b.n	800bb98 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bb90:	2300      	movs	r3, #0
 800bb92:	e001      	b.n	800bb98 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bba0:	b590      	push	{r4, r7, lr}
 800bba2:	b08f      	sub	sp, #60	; 0x3c
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bbaa:	f7fb fd63 	bl	8007674 <HAL_GetTick>
 800bbae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	60bb      	str	r3, [r7, #8]
 800bbb8:	2300      	movs	r3, #0
 800bbba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2108      	movs	r1, #8
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f002 fa24 	bl	800e014 <SDMMC_CmdBlockLength>
 800bbcc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d001      	beq.n	800bbd8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd6:	e0a9      	b.n	800bd2c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbe0:	041b      	lsls	r3, r3, #16
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	f002 fb41 	bl	800e26c <SDMMC_CmdAppCommand>
 800bbea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800bbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf4:	e09a      	b.n	800bd2c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bbf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbfa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bc00:	2330      	movs	r3, #48	; 0x30
 800bc02:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bc04:	2302      	movs	r3, #2
 800bc06:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f107 0210 	add.w	r2, r7, #16
 800bc18:	4611      	mov	r1, r2
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f002 f9ce 	bl	800dfbc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f002 fb88 	bl	800e33a <SDMMC_CmdSendSCR>
 800bc2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d022      	beq.n	800bc78 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc34:	e07a      	b.n	800bd2c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00e      	beq.n	800bc62 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6819      	ldr	r1, [r3, #0]
 800bc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	f107 0208 	add.w	r2, r7, #8
 800bc50:	18d4      	adds	r4, r2, r3
 800bc52:	4608      	mov	r0, r1
 800bc54:	f002 f92d 	bl	800deb2 <SDIO_ReadFIFO>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	6023      	str	r3, [r4, #0]
      index++;
 800bc5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5e:	3301      	adds	r3, #1
 800bc60:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bc62:	f7fb fd07 	bl	8007674 <HAL_GetTick>
 800bc66:	4602      	mov	r2, r0
 800bc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc70:	d102      	bne.n	800bc78 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bc72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc76:	e059      	b.n	800bd2c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc7e:	f240 432a 	movw	r3, #1066	; 0x42a
 800bc82:	4013      	ands	r3, r2
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d0d6      	beq.n	800bc36 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8e:	f003 0308 	and.w	r3, r3, #8
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d005      	beq.n	800bca2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2208      	movs	r2, #8
 800bc9c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bc9e:	2308      	movs	r3, #8
 800bca0:	e044      	b.n	800bd2c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca8:	f003 0302 	and.w	r3, r3, #2
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d005      	beq.n	800bcbc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2202      	movs	r2, #2
 800bcb6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bcb8:	2302      	movs	r3, #2
 800bcba:	e037      	b.n	800bd2c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc2:	f003 0320 	and.w	r3, r3, #32
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d005      	beq.n	800bcd6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2220      	movs	r2, #32
 800bcd0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bcd2:	2320      	movs	r3, #32
 800bcd4:	e02a      	b.n	800bd2c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f240 523a 	movw	r2, #1338	; 0x53a
 800bcde:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	061a      	lsls	r2, r3, #24
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	021b      	lsls	r3, r3, #8
 800bce8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bcec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	0a1b      	lsrs	r3, r3, #8
 800bcf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bcf6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	0e1b      	lsrs	r3, r3, #24
 800bcfc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd00:	601a      	str	r2, [r3, #0]
    scr++;
 800bd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd04:	3304      	adds	r3, #4
 800bd06:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	061a      	lsls	r2, r3, #24
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	021b      	lsls	r3, r3, #8
 800bd10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd14:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	0a1b      	lsrs	r3, r3, #8
 800bd1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd1e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	0e1b      	lsrs	r3, r3, #24
 800bd24:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd28:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	373c      	adds	r7, #60	; 0x3c
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd90      	pop	{r4, r7, pc}

0800bd34 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd40:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd46:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d03f      	beq.n	800bdce <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bd4e:	2300      	movs	r3, #0
 800bd50:	617b      	str	r3, [r7, #20]
 800bd52:	e033      	b.n	800bdbc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f002 f8aa 	bl	800deb2 <SDIO_ReadFIFO>
 800bd5e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	3b01      	subs	r3, #1
 800bd72:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	0a1b      	lsrs	r3, r3, #8
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3301      	adds	r3, #1
 800bd82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	0c1b      	lsrs	r3, r3, #16
 800bd8e:	b2da      	uxtb	r2, r3
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	3301      	adds	r3, #1
 800bd98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	0e1b      	lsrs	r3, r3, #24
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3301      	adds	r3, #1
 800bdae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	617b      	str	r3, [r7, #20]
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	2b07      	cmp	r3, #7
 800bdc0:	d9c8      	bls.n	800bd54 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800bdce:	bf00      	nop
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b086      	sub	sp, #24
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d043      	beq.n	800be78 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	617b      	str	r3, [r7, #20]
 800bdf4:	e037      	b.n	800be66 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	3301      	adds	r3, #1
 800be00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	3b01      	subs	r3, #1
 800be06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	021a      	lsls	r2, r3, #8
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	4313      	orrs	r3, r2
 800be12:	60bb      	str	r3, [r7, #8]
      tmp++;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	3301      	adds	r3, #1
 800be18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	3b01      	subs	r3, #1
 800be1e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	041a      	lsls	r2, r3, #16
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	4313      	orrs	r3, r2
 800be2a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	3301      	adds	r3, #1
 800be30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	3b01      	subs	r3, #1
 800be36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	061a      	lsls	r2, r3, #24
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	4313      	orrs	r3, r2
 800be42:	60bb      	str	r3, [r7, #8]
      tmp++;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	3301      	adds	r3, #1
 800be48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f107 0208 	add.w	r2, r7, #8
 800be58:	4611      	mov	r1, r2
 800be5a:	4618      	mov	r0, r3
 800be5c:	f002 f836 	bl	800decc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	3301      	adds	r3, #1
 800be64:	617b      	str	r3, [r7, #20]
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	2b07      	cmp	r3, #7
 800be6a:	d9c4      	bls.n	800bdf6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	693a      	ldr	r2, [r7, #16]
 800be76:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800be78:	bf00      	nop
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d101      	bne.n	800be92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	e056      	b.n	800bf40 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d106      	bne.n	800beb2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7f9 fc8b 	bl	80057c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2202      	movs	r2, #2
 800beb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bec8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	431a      	orrs	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	431a      	orrs	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	431a      	orrs	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	695b      	ldr	r3, [r3, #20]
 800bee4:	431a      	orrs	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800beee:	431a      	orrs	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	431a      	orrs	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a1b      	ldr	r3, [r3, #32]
 800befa:	ea42 0103 	orr.w	r1, r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	430a      	orrs	r2, r1
 800bf08:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	0c1b      	lsrs	r3, r3, #16
 800bf10:	f003 0104 	and.w	r1, r3, #4
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	430a      	orrs	r2, r1
 800bf1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	69da      	ldr	r2, [r3, #28]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bf3e:	2300      	movs	r3, #0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b088      	sub	sp, #32
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	603b      	str	r3, [r7, #0]
 800bf54:	4613      	mov	r3, r2
 800bf56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d101      	bne.n	800bf6a <HAL_SPI_Transmit+0x22>
 800bf66:	2302      	movs	r3, #2
 800bf68:	e11e      	b.n	800c1a8 <HAL_SPI_Transmit+0x260>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf72:	f7fb fb7f 	bl	8007674 <HAL_GetTick>
 800bf76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bf78:	88fb      	ldrh	r3, [r7, #6]
 800bf7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d002      	beq.n	800bf8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bf88:	2302      	movs	r3, #2
 800bf8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf8c:	e103      	b.n	800c196 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <HAL_SPI_Transmit+0x52>
 800bf94:	88fb      	ldrh	r3, [r7, #6]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d102      	bne.n	800bfa0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf9e:	e0fa      	b.n	800c196 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2203      	movs	r2, #3
 800bfa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	88fa      	ldrh	r2, [r7, #6]
 800bfb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	88fa      	ldrh	r2, [r7, #6]
 800bfbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfe6:	d107      	bne.n	800bff8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bff6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c002:	2b40      	cmp	r3, #64	; 0x40
 800c004:	d007      	beq.n	800c016 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c014:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c01e:	d14b      	bne.n	800c0b8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <HAL_SPI_Transmit+0xe6>
 800c028:	8afb      	ldrh	r3, [r7, #22]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d13e      	bne.n	800c0ac <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c032:	881a      	ldrh	r2, [r3, #0]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03e:	1c9a      	adds	r2, r3, #2
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c048:	b29b      	uxth	r3, r3
 800c04a:	3b01      	subs	r3, #1
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c052:	e02b      	b.n	800c0ac <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	f003 0302 	and.w	r3, r3, #2
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d112      	bne.n	800c088 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c066:	881a      	ldrh	r2, [r3, #0]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c072:	1c9a      	adds	r2, r3, #2
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	3b01      	subs	r3, #1
 800c080:	b29a      	uxth	r2, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	86da      	strh	r2, [r3, #54]	; 0x36
 800c086:	e011      	b.n	800c0ac <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c088:	f7fb faf4 	bl	8007674 <HAL_GetTick>
 800c08c:	4602      	mov	r2, r0
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	429a      	cmp	r2, r3
 800c096:	d803      	bhi.n	800c0a0 <HAL_SPI_Transmit+0x158>
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09e:	d102      	bne.n	800c0a6 <HAL_SPI_Transmit+0x15e>
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d102      	bne.n	800c0ac <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c0aa:	e074      	b.n	800c196 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1ce      	bne.n	800c054 <HAL_SPI_Transmit+0x10c>
 800c0b6:	e04c      	b.n	800c152 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <HAL_SPI_Transmit+0x17e>
 800c0c0:	8afb      	ldrh	r3, [r7, #22]
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d140      	bne.n	800c148 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	330c      	adds	r3, #12
 800c0d0:	7812      	ldrb	r2, [r2, #0]
 800c0d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c0ec:	e02c      	b.n	800c148 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	f003 0302 	and.w	r3, r3, #2
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d113      	bne.n	800c124 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	330c      	adds	r3, #12
 800c106:	7812      	ldrb	r2, [r2, #0]
 800c108:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c118:	b29b      	uxth	r3, r3
 800c11a:	3b01      	subs	r3, #1
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	86da      	strh	r2, [r3, #54]	; 0x36
 800c122:	e011      	b.n	800c148 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c124:	f7fb faa6 	bl	8007674 <HAL_GetTick>
 800c128:	4602      	mov	r2, r0
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	683a      	ldr	r2, [r7, #0]
 800c130:	429a      	cmp	r2, r3
 800c132:	d803      	bhi.n	800c13c <HAL_SPI_Transmit+0x1f4>
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c13a:	d102      	bne.n	800c142 <HAL_SPI_Transmit+0x1fa>
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d102      	bne.n	800c148 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c142:	2303      	movs	r3, #3
 800c144:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c146:	e026      	b.n	800c196 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1cd      	bne.n	800c0ee <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c152:	69ba      	ldr	r2, [r7, #24]
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f000 fba4 	bl	800c8a4 <SPI_EndRxTxTransaction>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d002      	beq.n	800c168 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2220      	movs	r2, #32
 800c166:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c170:	2300      	movs	r3, #0
 800c172:	613b      	str	r3, [r7, #16]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	613b      	str	r3, [r7, #16]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	613b      	str	r3, [r7, #16]
 800c184:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d002      	beq.n	800c194 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	77fb      	strb	r3, [r7, #31]
 800c192:	e000      	b.n	800c196 <HAL_SPI_Transmit+0x24e>
  }

error:
 800c194:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c1a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3720      	adds	r7, #32
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b088      	sub	sp, #32
 800c1b4:	af02      	add	r7, sp, #8
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	603b      	str	r3, [r7, #0]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1cc:	d112      	bne.n	800c1f4 <HAL_SPI_Receive+0x44>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10e      	bne.n	800c1f4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2204      	movs	r2, #4
 800c1da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c1de:	88fa      	ldrh	r2, [r7, #6]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	68b9      	ldr	r1, [r7, #8]
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f000 f8e9 	bl	800c3c2 <HAL_SPI_TransmitReceive>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	e0e2      	b.n	800c3ba <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d101      	bne.n	800c202 <HAL_SPI_Receive+0x52>
 800c1fe:	2302      	movs	r3, #2
 800c200:	e0db      	b.n	800c3ba <HAL_SPI_Receive+0x20a>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2201      	movs	r2, #1
 800c206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c20a:	f7fb fa33 	bl	8007674 <HAL_GetTick>
 800c20e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d002      	beq.n	800c222 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c21c:	2302      	movs	r3, #2
 800c21e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c220:	e0c2      	b.n	800c3a8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <HAL_SPI_Receive+0x7e>
 800c228:	88fb      	ldrh	r3, [r7, #6]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d102      	bne.n	800c234 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c232:	e0b9      	b.n	800c3a8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2204      	movs	r2, #4
 800c238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	88fa      	ldrh	r2, [r7, #6]
 800c24c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	88fa      	ldrh	r2, [r7, #6]
 800c252:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2200      	movs	r2, #0
 800c25e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2200      	movs	r2, #0
 800c264:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2200      	movs	r2, #0
 800c26a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2200      	movs	r2, #0
 800c270:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c27a:	d107      	bne.n	800c28c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c28a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c296:	2b40      	cmp	r3, #64	; 0x40
 800c298:	d007      	beq.n	800c2aa <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d162      	bne.n	800c378 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c2b2:	e02e      	b.n	800c312 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	f003 0301 	and.w	r3, r3, #1
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d115      	bne.n	800c2ee <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f103 020c 	add.w	r2, r3, #12
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ce:	7812      	ldrb	r2, [r2, #0]
 800c2d0:	b2d2      	uxtb	r2, r2
 800c2d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d8:	1c5a      	adds	r2, r3, #1
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	b29a      	uxth	r2, r3
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c2ec:	e011      	b.n	800c312 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2ee:	f7fb f9c1 	bl	8007674 <HAL_GetTick>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	1ad3      	subs	r3, r2, r3
 800c2f8:	683a      	ldr	r2, [r7, #0]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d803      	bhi.n	800c306 <HAL_SPI_Receive+0x156>
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c304:	d102      	bne.n	800c30c <HAL_SPI_Receive+0x15c>
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d102      	bne.n	800c312 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c30c:	2303      	movs	r3, #3
 800c30e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c310:	e04a      	b.n	800c3a8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c316:	b29b      	uxth	r3, r3
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d1cb      	bne.n	800c2b4 <HAL_SPI_Receive+0x104>
 800c31c:	e031      	b.n	800c382 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f003 0301 	and.w	r3, r3, #1
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d113      	bne.n	800c354 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c336:	b292      	uxth	r2, r2
 800c338:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c33e:	1c9a      	adds	r2, r3, #2
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c348:	b29b      	uxth	r3, r3
 800c34a:	3b01      	subs	r3, #1
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c352:	e011      	b.n	800c378 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c354:	f7fb f98e 	bl	8007674 <HAL_GetTick>
 800c358:	4602      	mov	r2, r0
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	1ad3      	subs	r3, r2, r3
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	429a      	cmp	r2, r3
 800c362:	d803      	bhi.n	800c36c <HAL_SPI_Receive+0x1bc>
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c36a:	d102      	bne.n	800c372 <HAL_SPI_Receive+0x1c2>
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c372:	2303      	movs	r3, #3
 800c374:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c376:	e017      	b.n	800c3a8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1cd      	bne.n	800c31e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 fa27 	bl	800c7da <SPI_EndRxTransaction>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d002      	beq.n	800c398 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2220      	movs	r2, #32
 800c396:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	75fb      	strb	r3, [r7, #23]
 800c3a4:	e000      	b.n	800c3a8 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c3a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3718      	adds	r7, #24
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b08c      	sub	sp, #48	; 0x30
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	607a      	str	r2, [r7, #4]
 800c3ce:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d101      	bne.n	800c3e8 <HAL_SPI_TransmitReceive+0x26>
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	e18a      	b.n	800c6fe <HAL_SPI_TransmitReceive+0x33c>
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c3f0:	f7fb f940 	bl	8007674 <HAL_GetTick>
 800c3f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c406:	887b      	ldrh	r3, [r7, #2]
 800c408:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c40a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d00f      	beq.n	800c432 <HAL_SPI_TransmitReceive+0x70>
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c418:	d107      	bne.n	800c42a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d103      	bne.n	800c42a <HAL_SPI_TransmitReceive+0x68>
 800c422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c426:	2b04      	cmp	r3, #4
 800c428:	d003      	beq.n	800c432 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c42a:	2302      	movs	r3, #2
 800c42c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c430:	e15b      	b.n	800c6ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d005      	beq.n	800c444 <HAL_SPI_TransmitReceive+0x82>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d002      	beq.n	800c444 <HAL_SPI_TransmitReceive+0x82>
 800c43e:	887b      	ldrh	r3, [r7, #2]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d103      	bne.n	800c44c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c44a:	e14e      	b.n	800c6ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b04      	cmp	r3, #4
 800c456:	d003      	beq.n	800c460 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2205      	movs	r2, #5
 800c45c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	887a      	ldrh	r2, [r7, #2]
 800c470:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	887a      	ldrh	r2, [r7, #2]
 800c476:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	887a      	ldrh	r2, [r7, #2]
 800c482:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	887a      	ldrh	r2, [r7, #2]
 800c488:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2200      	movs	r2, #0
 800c48e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2200      	movs	r2, #0
 800c494:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4a0:	2b40      	cmp	r3, #64	; 0x40
 800c4a2:	d007      	beq.n	800c4b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4bc:	d178      	bne.n	800c5b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d002      	beq.n	800c4cc <HAL_SPI_TransmitReceive+0x10a>
 800c4c6:	8b7b      	ldrh	r3, [r7, #26]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d166      	bne.n	800c59a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d0:	881a      	ldrh	r2, [r3, #0]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4dc:	1c9a      	adds	r2, r3, #2
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c4f0:	e053      	b.n	800c59a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	689b      	ldr	r3, [r3, #8]
 800c4f8:	f003 0302 	and.w	r3, r3, #2
 800c4fc:	2b02      	cmp	r3, #2
 800c4fe:	d11b      	bne.n	800c538 <HAL_SPI_TransmitReceive+0x176>
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c504:	b29b      	uxth	r3, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	d016      	beq.n	800c538 <HAL_SPI_TransmitReceive+0x176>
 800c50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d113      	bne.n	800c538 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c514:	881a      	ldrh	r2, [r3, #0]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c520:	1c9a      	adds	r2, r3, #2
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	3b01      	subs	r3, #1
 800c52e:	b29a      	uxth	r2, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c534:	2300      	movs	r3, #0
 800c536:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f003 0301 	and.w	r3, r3, #1
 800c542:	2b01      	cmp	r3, #1
 800c544:	d119      	bne.n	800c57a <HAL_SPI_TransmitReceive+0x1b8>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d014      	beq.n	800c57a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68da      	ldr	r2, [r3, #12]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c55a:	b292      	uxth	r2, r2
 800c55c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c562:	1c9a      	adds	r2, r3, #2
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	3b01      	subs	r3, #1
 800c570:	b29a      	uxth	r2, r3
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c576:	2301      	movs	r3, #1
 800c578:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c57a:	f7fb f87b 	bl	8007674 <HAL_GetTick>
 800c57e:	4602      	mov	r2, r0
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c586:	429a      	cmp	r2, r3
 800c588:	d807      	bhi.n	800c59a <HAL_SPI_TransmitReceive+0x1d8>
 800c58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c590:	d003      	beq.n	800c59a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c598:	e0a7      	b.n	800c6ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1a6      	bne.n	800c4f2 <HAL_SPI_TransmitReceive+0x130>
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1a1      	bne.n	800c4f2 <HAL_SPI_TransmitReceive+0x130>
 800c5ae:	e07c      	b.n	800c6aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d002      	beq.n	800c5be <HAL_SPI_TransmitReceive+0x1fc>
 800c5b8:	8b7b      	ldrh	r3, [r7, #26]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d16b      	bne.n	800c696 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	330c      	adds	r3, #12
 800c5c8:	7812      	ldrb	r2, [r2, #0]
 800c5ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c5e4:	e057      	b.n	800c696 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	f003 0302 	and.w	r3, r3, #2
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d11c      	bne.n	800c62e <HAL_SPI_TransmitReceive+0x26c>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d017      	beq.n	800c62e <HAL_SPI_TransmitReceive+0x26c>
 800c5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c600:	2b01      	cmp	r3, #1
 800c602:	d114      	bne.n	800c62e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	330c      	adds	r3, #12
 800c60e:	7812      	ldrb	r2, [r2, #0]
 800c610:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c616:	1c5a      	adds	r2, r3, #1
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c620:	b29b      	uxth	r3, r3
 800c622:	3b01      	subs	r3, #1
 800c624:	b29a      	uxth	r2, r3
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c62a:	2300      	movs	r3, #0
 800c62c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f003 0301 	and.w	r3, r3, #1
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d119      	bne.n	800c670 <HAL_SPI_TransmitReceive+0x2ae>
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c640:	b29b      	uxth	r3, r3
 800c642:	2b00      	cmp	r3, #0
 800c644:	d014      	beq.n	800c670 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68da      	ldr	r2, [r3, #12]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c650:	b2d2      	uxtb	r2, r2
 800c652:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c658:	1c5a      	adds	r2, r3, #1
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c662:	b29b      	uxth	r3, r3
 800c664:	3b01      	subs	r3, #1
 800c666:	b29a      	uxth	r2, r3
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c66c:	2301      	movs	r3, #1
 800c66e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c670:	f7fb f800 	bl	8007674 <HAL_GetTick>
 800c674:	4602      	mov	r2, r0
 800c676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d803      	bhi.n	800c688 <HAL_SPI_TransmitReceive+0x2c6>
 800c680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c686:	d102      	bne.n	800c68e <HAL_SPI_TransmitReceive+0x2cc>
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d103      	bne.n	800c696 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c68e:	2303      	movs	r3, #3
 800c690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c694:	e029      	b.n	800c6ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1a2      	bne.n	800c5e6 <HAL_SPI_TransmitReceive+0x224>
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d19d      	bne.n	800c5e6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c6aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f000 f8f8 	bl	800c8a4 <SPI_EndRxTxTransaction>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d006      	beq.n	800c6c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2220      	movs	r2, #32
 800c6c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c6c6:	e010      	b.n	800c6ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d10b      	bne.n	800c6e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	617b      	str	r3, [r7, #20]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	617b      	str	r3, [r7, #20]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	617b      	str	r3, [r7, #20]
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	e000      	b.n	800c6ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c6e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c6fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3730      	adds	r7, #48	; 0x30
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b084      	sub	sp, #16
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	60f8      	str	r0, [r7, #12]
 800c70e:	60b9      	str	r1, [r7, #8]
 800c710:	603b      	str	r3, [r7, #0]
 800c712:	4613      	mov	r3, r2
 800c714:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c716:	e04c      	b.n	800c7b2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71e:	d048      	beq.n	800c7b2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c720:	f7fa ffa8 	bl	8007674 <HAL_GetTick>
 800c724:	4602      	mov	r2, r0
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	683a      	ldr	r2, [r7, #0]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d902      	bls.n	800c736 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d13d      	bne.n	800c7b2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	685a      	ldr	r2, [r3, #4]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c744:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c74e:	d111      	bne.n	800c774 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c758:	d004      	beq.n	800c764 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c762:	d107      	bne.n	800c774 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c772:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c77c:	d10f      	bne.n	800c79e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c78c:	601a      	str	r2, [r3, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c79c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	e00f      	b.n	800c7d2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689a      	ldr	r2, [r3, #8]
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	bf0c      	ite	eq
 800c7c2:	2301      	moveq	r3, #1
 800c7c4:	2300      	movne	r3, #0
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	79fb      	ldrb	r3, [r7, #7]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d1a3      	bne.n	800c718 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3710      	adds	r7, #16
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b086      	sub	sp, #24
 800c7de:	af02      	add	r7, sp, #8
 800c7e0:	60f8      	str	r0, [r7, #12]
 800c7e2:	60b9      	str	r1, [r7, #8]
 800c7e4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7ee:	d111      	bne.n	800c814 <SPI_EndRxTransaction+0x3a>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7f8:	d004      	beq.n	800c804 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c802:	d107      	bne.n	800c814 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c812:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c81c:	d12a      	bne.n	800c874 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c826:	d012      	beq.n	800c84e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	2200      	movs	r2, #0
 800c830:	2180      	movs	r1, #128	; 0x80
 800c832:	68f8      	ldr	r0, [r7, #12]
 800c834:	f7ff ff67 	bl	800c706 <SPI_WaitFlagStateUntilTimeout>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d02d      	beq.n	800c89a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c842:	f043 0220 	orr.w	r2, r3, #32
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e026      	b.n	800c89c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	2200      	movs	r2, #0
 800c856:	2101      	movs	r1, #1
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f7ff ff54 	bl	800c706 <SPI_WaitFlagStateUntilTimeout>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d01a      	beq.n	800c89a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c868:	f043 0220 	orr.w	r2, r3, #32
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c870:	2303      	movs	r3, #3
 800c872:	e013      	b.n	800c89c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2200      	movs	r2, #0
 800c87c:	2101      	movs	r1, #1
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f7ff ff41 	bl	800c706 <SPI_WaitFlagStateUntilTimeout>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d007      	beq.n	800c89a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c88e:	f043 0220 	orr.w	r2, r3, #32
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c896:	2303      	movs	r3, #3
 800c898:	e000      	b.n	800c89c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c89a:	2300      	movs	r3, #0
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b088      	sub	sp, #32
 800c8a8:	af02      	add	r7, sp, #8
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c8b0:	4b1b      	ldr	r3, [pc, #108]	; (800c920 <SPI_EndRxTxTransaction+0x7c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a1b      	ldr	r2, [pc, #108]	; (800c924 <SPI_EndRxTxTransaction+0x80>)
 800c8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ba:	0d5b      	lsrs	r3, r3, #21
 800c8bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c8c0:	fb02 f303 	mul.w	r3, r2, r3
 800c8c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c8ce:	d112      	bne.n	800c8f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	2180      	movs	r1, #128	; 0x80
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	f7ff ff13 	bl	800c706 <SPI_WaitFlagStateUntilTimeout>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d016      	beq.n	800c914 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ea:	f043 0220 	orr.w	r2, r3, #32
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c8f2:	2303      	movs	r3, #3
 800c8f4:	e00f      	b.n	800c916 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00a      	beq.n	800c912 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c90c:	2b80      	cmp	r3, #128	; 0x80
 800c90e:	d0f2      	beq.n	800c8f6 <SPI_EndRxTxTransaction+0x52>
 800c910:	e000      	b.n	800c914 <SPI_EndRxTxTransaction+0x70>
        break;
 800c912:	bf00      	nop
  }

  return HAL_OK;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	20000000 	.word	0x20000000
 800c924:	165e9f81 	.word	0x165e9f81

0800c928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d101      	bne.n	800c93a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	e01d      	b.n	800c976 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d106      	bne.n	800c954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7f8 fff6 	bl	8005940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2202      	movs	r2, #2
 800c958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	3304      	adds	r3, #4
 800c964:	4619      	mov	r1, r3
 800c966:	4610      	mov	r0, r2
 800c968:	f000 fb56 	bl	800d018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c97e:	b480      	push	{r7}
 800c980:	b085      	sub	sp, #20
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68da      	ldr	r2, [r3, #12]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f042 0201 	orr.w	r2, r2, #1
 800c994:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	f003 0307 	and.w	r3, r3, #7
 800c9a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2b06      	cmp	r3, #6
 800c9a6:	d007      	beq.n	800c9b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f042 0201 	orr.w	r2, r2, #1
 800c9b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3714      	adds	r7, #20
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr

0800c9c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d101      	bne.n	800c9d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e01d      	b.n	800ca14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d106      	bne.n	800c9f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f7f8 ff33 	bl	8005858 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2202      	movs	r2, #2
 800c9f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	3304      	adds	r3, #4
 800ca02:	4619      	mov	r1, r3
 800ca04:	4610      	mov	r0, r2
 800ca06:	f000 fb07 	bl	800d018 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fd42 	bl	800d4b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a15      	ldr	r2, [pc, #84]	; (800ca90 <HAL_TIM_PWM_Start+0x74>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d004      	beq.n	800ca48 <HAL_TIM_PWM_Start+0x2c>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a14      	ldr	r2, [pc, #80]	; (800ca94 <HAL_TIM_PWM_Start+0x78>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d101      	bne.n	800ca4c <HAL_TIM_PWM_Start+0x30>
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e000      	b.n	800ca4e <HAL_TIM_PWM_Start+0x32>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d007      	beq.n	800ca62 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	f003 0307 	and.w	r3, r3, #7
 800ca6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2b06      	cmp	r3, #6
 800ca72:	d007      	beq.n	800ca84 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f042 0201 	orr.w	r2, r2, #1
 800ca82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	40010000 	.word	0x40010000
 800ca94:	40010400 	.word	0x40010400

0800ca98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d101      	bne.n	800caac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800caa8:	2301      	movs	r3, #1
 800caaa:	e083      	b.n	800cbb4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d106      	bne.n	800cac6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f7f8 ffcd 	bl	8005a60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2202      	movs	r2, #2
 800caca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	6812      	ldr	r2, [r2, #0]
 800cad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cadc:	f023 0307 	bic.w	r3, r3, #7
 800cae0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	3304      	adds	r3, #4
 800caea:	4619      	mov	r1, r3
 800caec:	4610      	mov	r0, r2
 800caee:	f000 fa93 	bl	800d018 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	699b      	ldr	r3, [r3, #24]
 800cb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	6a1b      	ldr	r3, [r3, #32]
 800cb08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	697a      	ldr	r2, [r7, #20]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb1a:	f023 0303 	bic.w	r3, r3, #3
 800cb1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	689a      	ldr	r2, [r3, #8]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	021b      	lsls	r3, r3, #8
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cb38:	f023 030c 	bic.w	r3, r3, #12
 800cb3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	68da      	ldr	r2, [r3, #12]
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	021b      	lsls	r3, r3, #8
 800cb54:	4313      	orrs	r3, r2
 800cb56:	693a      	ldr	r2, [r7, #16]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	691b      	ldr	r3, [r3, #16]
 800cb60:	011a      	lsls	r2, r3, #4
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	6a1b      	ldr	r3, [r3, #32]
 800cb66:	031b      	lsls	r3, r3, #12
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	693a      	ldr	r2, [r7, #16]
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cb76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cb7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	695b      	ldr	r3, [r3, #20]
 800cb88:	011b      	lsls	r3, r3, #4
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	693a      	ldr	r2, [r7, #16]
 800cba0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2201      	movs	r2, #1
 800cbae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <HAL_TIM_Encoder_Start+0x16>
 800cbcc:	2b04      	cmp	r3, #4
 800cbce:	d008      	beq.n	800cbe2 <HAL_TIM_Encoder_Start+0x26>
 800cbd0:	e00f      	b.n	800cbf2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	2100      	movs	r1, #0
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f000 fc6c 	bl	800d4b8 <TIM_CCxChannelCmd>
      break;
 800cbe0:	e016      	b.n	800cc10 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	2104      	movs	r1, #4
 800cbea:	4618      	mov	r0, r3
 800cbec:	f000 fc64 	bl	800d4b8 <TIM_CCxChannelCmd>
      break;
 800cbf0:	e00e      	b.n	800cc10 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 fc5c 	bl	800d4b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2201      	movs	r2, #1
 800cc06:	2104      	movs	r1, #4
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 fc55 	bl	800d4b8 <TIM_CCxChannelCmd>
      break;
 800cc0e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f042 0201 	orr.w	r2, r2, #1
 800cc1e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b082      	sub	sp, #8
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	f003 0302 	and.w	r3, r3, #2
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	d122      	bne.n	800cc86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	f003 0302 	and.w	r3, r3, #2
 800cc4a:	2b02      	cmp	r3, #2
 800cc4c:	d11b      	bne.n	800cc86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f06f 0202 	mvn.w	r2, #2
 800cc56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	f003 0303 	and.w	r3, r3, #3
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d003      	beq.n	800cc74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 f9b5 	bl	800cfdc <HAL_TIM_IC_CaptureCallback>
 800cc72:	e005      	b.n	800cc80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 f9a7 	bl	800cfc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f9b8 	bl	800cff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	691b      	ldr	r3, [r3, #16]
 800cc8c:	f003 0304 	and.w	r3, r3, #4
 800cc90:	2b04      	cmp	r3, #4
 800cc92:	d122      	bne.n	800ccda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	f003 0304 	and.w	r3, r3, #4
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d11b      	bne.n	800ccda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f06f 0204 	mvn.w	r2, #4
 800ccaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2202      	movs	r2, #2
 800ccb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	699b      	ldr	r3, [r3, #24]
 800ccb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d003      	beq.n	800ccc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f98b 	bl	800cfdc <HAL_TIM_IC_CaptureCallback>
 800ccc6:	e005      	b.n	800ccd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f97d 	bl	800cfc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f98e 	bl	800cff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	f003 0308 	and.w	r3, r3, #8
 800cce4:	2b08      	cmp	r3, #8
 800cce6:	d122      	bne.n	800cd2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	f003 0308 	and.w	r3, r3, #8
 800ccf2:	2b08      	cmp	r3, #8
 800ccf4:	d11b      	bne.n	800cd2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f06f 0208 	mvn.w	r2, #8
 800ccfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2204      	movs	r2, #4
 800cd04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	69db      	ldr	r3, [r3, #28]
 800cd0c:	f003 0303 	and.w	r3, r3, #3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d003      	beq.n	800cd1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 f961 	bl	800cfdc <HAL_TIM_IC_CaptureCallback>
 800cd1a:	e005      	b.n	800cd28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 f953 	bl	800cfc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 f964 	bl	800cff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	f003 0310 	and.w	r3, r3, #16
 800cd38:	2b10      	cmp	r3, #16
 800cd3a:	d122      	bne.n	800cd82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	f003 0310 	and.w	r3, r3, #16
 800cd46:	2b10      	cmp	r3, #16
 800cd48:	d11b      	bne.n	800cd82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f06f 0210 	mvn.w	r2, #16
 800cd52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2208      	movs	r2, #8
 800cd58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	69db      	ldr	r3, [r3, #28]
 800cd60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d003      	beq.n	800cd70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f000 f937 	bl	800cfdc <HAL_TIM_IC_CaptureCallback>
 800cd6e:	e005      	b.n	800cd7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 f929 	bl	800cfc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f93a 	bl	800cff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	691b      	ldr	r3, [r3, #16]
 800cd88:	f003 0301 	and.w	r3, r3, #1
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d10e      	bne.n	800cdae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	f003 0301 	and.w	r3, r3, #1
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d107      	bne.n	800cdae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f06f 0201 	mvn.w	r2, #1
 800cda6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f7f7 fb31 	bl	8004410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdb8:	2b80      	cmp	r3, #128	; 0x80
 800cdba:	d10e      	bne.n	800cdda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdc6:	2b80      	cmp	r3, #128	; 0x80
 800cdc8:	d107      	bne.n	800cdda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cdd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 fc6d 	bl	800d6b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cde4:	2b40      	cmp	r3, #64	; 0x40
 800cde6:	d10e      	bne.n	800ce06 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68db      	ldr	r3, [r3, #12]
 800cdee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdf2:	2b40      	cmp	r3, #64	; 0x40
 800cdf4:	d107      	bne.n	800ce06 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cdfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 f8ff 	bl	800d004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	f003 0320 	and.w	r3, r3, #32
 800ce10:	2b20      	cmp	r3, #32
 800ce12:	d10e      	bne.n	800ce32 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	f003 0320 	and.w	r3, r3, #32
 800ce1e:	2b20      	cmp	r3, #32
 800ce20:	d107      	bne.n	800ce32 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f06f 0220 	mvn.w	r2, #32
 800ce2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fc37 	bl	800d6a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce32:	bf00      	nop
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
	...

0800ce3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d101      	bne.n	800ce56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ce52:	2302      	movs	r3, #2
 800ce54:	e0b4      	b.n	800cfc0 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2202      	movs	r2, #2
 800ce62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b0c      	cmp	r3, #12
 800ce6a:	f200 809f 	bhi.w	800cfac <HAL_TIM_PWM_ConfigChannel+0x170>
 800ce6e:	a201      	add	r2, pc, #4	; (adr r2, 800ce74 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ce70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce74:	0800cea9 	.word	0x0800cea9
 800ce78:	0800cfad 	.word	0x0800cfad
 800ce7c:	0800cfad 	.word	0x0800cfad
 800ce80:	0800cfad 	.word	0x0800cfad
 800ce84:	0800cee9 	.word	0x0800cee9
 800ce88:	0800cfad 	.word	0x0800cfad
 800ce8c:	0800cfad 	.word	0x0800cfad
 800ce90:	0800cfad 	.word	0x0800cfad
 800ce94:	0800cf2b 	.word	0x0800cf2b
 800ce98:	0800cfad 	.word	0x0800cfad
 800ce9c:	0800cfad 	.word	0x0800cfad
 800cea0:	0800cfad 	.word	0x0800cfad
 800cea4:	0800cf6b 	.word	0x0800cf6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	68b9      	ldr	r1, [r7, #8]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 f952 	bl	800d158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	699a      	ldr	r2, [r3, #24]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f042 0208 	orr.w	r2, r2, #8
 800cec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	699a      	ldr	r2, [r3, #24]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f022 0204 	bic.w	r2, r2, #4
 800ced2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	6999      	ldr	r1, [r3, #24]
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	691a      	ldr	r2, [r3, #16]
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	430a      	orrs	r2, r1
 800cee4:	619a      	str	r2, [r3, #24]
      break;
 800cee6:	e062      	b.n	800cfae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68b9      	ldr	r1, [r7, #8]
 800ceee:	4618      	mov	r0, r3
 800cef0:	f000 f9a2 	bl	800d238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	699a      	ldr	r2, [r3, #24]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	699a      	ldr	r2, [r3, #24]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	6999      	ldr	r1, [r3, #24]
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	691b      	ldr	r3, [r3, #16]
 800cf1e:	021a      	lsls	r2, r3, #8
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	430a      	orrs	r2, r1
 800cf26:	619a      	str	r2, [r3, #24]
      break;
 800cf28:	e041      	b.n	800cfae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68b9      	ldr	r1, [r7, #8]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f000 f9f7 	bl	800d324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	69da      	ldr	r2, [r3, #28]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f042 0208 	orr.w	r2, r2, #8
 800cf44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	69da      	ldr	r2, [r3, #28]
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f022 0204 	bic.w	r2, r2, #4
 800cf54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	69d9      	ldr	r1, [r3, #28]
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	691a      	ldr	r2, [r3, #16]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	430a      	orrs	r2, r1
 800cf66:	61da      	str	r2, [r3, #28]
      break;
 800cf68:	e021      	b.n	800cfae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	68b9      	ldr	r1, [r7, #8]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f000 fa4b 	bl	800d40c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	69da      	ldr	r2, [r3, #28]
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	69da      	ldr	r2, [r3, #28]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	69d9      	ldr	r1, [r3, #28]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	021a      	lsls	r2, r3, #8
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	430a      	orrs	r2, r1
 800cfa8:	61da      	str	r2, [r3, #28]
      break;
 800cfaa:	e000      	b.n	800cfae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800cfac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfbe:	2300      	movs	r3, #0
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3710      	adds	r7, #16
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d00c:	bf00      	nop
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr

0800d018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	4a40      	ldr	r2, [pc, #256]	; (800d12c <TIM_Base_SetConfig+0x114>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d013      	beq.n	800d058 <TIM_Base_SetConfig+0x40>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d036:	d00f      	beq.n	800d058 <TIM_Base_SetConfig+0x40>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4a3d      	ldr	r2, [pc, #244]	; (800d130 <TIM_Base_SetConfig+0x118>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d00b      	beq.n	800d058 <TIM_Base_SetConfig+0x40>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a3c      	ldr	r2, [pc, #240]	; (800d134 <TIM_Base_SetConfig+0x11c>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d007      	beq.n	800d058 <TIM_Base_SetConfig+0x40>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a3b      	ldr	r2, [pc, #236]	; (800d138 <TIM_Base_SetConfig+0x120>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d003      	beq.n	800d058 <TIM_Base_SetConfig+0x40>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a3a      	ldr	r2, [pc, #232]	; (800d13c <TIM_Base_SetConfig+0x124>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d108      	bne.n	800d06a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d05e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	4313      	orrs	r3, r2
 800d068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a2f      	ldr	r2, [pc, #188]	; (800d12c <TIM_Base_SetConfig+0x114>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d02b      	beq.n	800d0ca <TIM_Base_SetConfig+0xb2>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d078:	d027      	beq.n	800d0ca <TIM_Base_SetConfig+0xb2>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4a2c      	ldr	r2, [pc, #176]	; (800d130 <TIM_Base_SetConfig+0x118>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d023      	beq.n	800d0ca <TIM_Base_SetConfig+0xb2>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4a2b      	ldr	r2, [pc, #172]	; (800d134 <TIM_Base_SetConfig+0x11c>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d01f      	beq.n	800d0ca <TIM_Base_SetConfig+0xb2>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4a2a      	ldr	r2, [pc, #168]	; (800d138 <TIM_Base_SetConfig+0x120>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d01b      	beq.n	800d0ca <TIM_Base_SetConfig+0xb2>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a29      	ldr	r2, [pc, #164]	; (800d13c <TIM_Base_SetConfig+0x124>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d017      	beq.n	800d0ca <TIM_Base_SetConfig+0xb2>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4a28      	ldr	r2, [pc, #160]	; (800d140 <TIM_Base_SetConfig+0x128>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d013      	beq.n	800d0ca <TIM_Base_SetConfig+0xb2>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a27      	ldr	r2, [pc, #156]	; (800d144 <TIM_Base_SetConfig+0x12c>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d00f      	beq.n	800d0ca <TIM_Base_SetConfig+0xb2>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a26      	ldr	r2, [pc, #152]	; (800d148 <TIM_Base_SetConfig+0x130>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d00b      	beq.n	800d0ca <TIM_Base_SetConfig+0xb2>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a25      	ldr	r2, [pc, #148]	; (800d14c <TIM_Base_SetConfig+0x134>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d007      	beq.n	800d0ca <TIM_Base_SetConfig+0xb2>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a24      	ldr	r2, [pc, #144]	; (800d150 <TIM_Base_SetConfig+0x138>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d003      	beq.n	800d0ca <TIM_Base_SetConfig+0xb2>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a23      	ldr	r2, [pc, #140]	; (800d154 <TIM_Base_SetConfig+0x13c>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d108      	bne.n	800d0dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	68fa      	ldr	r2, [r7, #12]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	689a      	ldr	r2, [r3, #8]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4a0a      	ldr	r2, [pc, #40]	; (800d12c <TIM_Base_SetConfig+0x114>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d003      	beq.n	800d110 <TIM_Base_SetConfig+0xf8>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	4a0c      	ldr	r2, [pc, #48]	; (800d13c <TIM_Base_SetConfig+0x124>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d103      	bne.n	800d118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	691a      	ldr	r2, [r3, #16]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	615a      	str	r2, [r3, #20]
}
 800d11e:	bf00      	nop
 800d120:	3714      	adds	r7, #20
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	40010000 	.word	0x40010000
 800d130:	40000400 	.word	0x40000400
 800d134:	40000800 	.word	0x40000800
 800d138:	40000c00 	.word	0x40000c00
 800d13c:	40010400 	.word	0x40010400
 800d140:	40014000 	.word	0x40014000
 800d144:	40014400 	.word	0x40014400
 800d148:	40014800 	.word	0x40014800
 800d14c:	40001800 	.word	0x40001800
 800d150:	40001c00 	.word	0x40001c00
 800d154:	40002000 	.word	0x40002000

0800d158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d158:	b480      	push	{r7}
 800d15a:	b087      	sub	sp, #28
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	f023 0201 	bic.w	r2, r3, #1
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a1b      	ldr	r3, [r3, #32]
 800d172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f023 0303 	bic.w	r3, r3, #3
 800d18e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	4313      	orrs	r3, r2
 800d198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	f023 0302 	bic.w	r3, r3, #2
 800d1a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	689b      	ldr	r3, [r3, #8]
 800d1a6:	697a      	ldr	r2, [r7, #20]
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4a20      	ldr	r2, [pc, #128]	; (800d230 <TIM_OC1_SetConfig+0xd8>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d003      	beq.n	800d1bc <TIM_OC1_SetConfig+0x64>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a1f      	ldr	r2, [pc, #124]	; (800d234 <TIM_OC1_SetConfig+0xdc>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d10c      	bne.n	800d1d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	f023 0308 	bic.w	r3, r3, #8
 800d1c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	697a      	ldr	r2, [r7, #20]
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d1ce:	697b      	ldr	r3, [r7, #20]
 800d1d0:	f023 0304 	bic.w	r3, r3, #4
 800d1d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	4a15      	ldr	r2, [pc, #84]	; (800d230 <TIM_OC1_SetConfig+0xd8>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d003      	beq.n	800d1e6 <TIM_OC1_SetConfig+0x8e>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4a14      	ldr	r2, [pc, #80]	; (800d234 <TIM_OC1_SetConfig+0xdc>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d111      	bne.n	800d20a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	695b      	ldr	r3, [r3, #20]
 800d1fa:	693a      	ldr	r2, [r7, #16]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	699b      	ldr	r3, [r3, #24]
 800d204:	693a      	ldr	r2, [r7, #16]
 800d206:	4313      	orrs	r3, r2
 800d208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	693a      	ldr	r2, [r7, #16]
 800d20e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	685a      	ldr	r2, [r3, #4]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	621a      	str	r2, [r3, #32]
}
 800d224:	bf00      	nop
 800d226:	371c      	adds	r7, #28
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	40010000 	.word	0x40010000
 800d234:	40010400 	.word	0x40010400

0800d238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d238:	b480      	push	{r7}
 800d23a:	b087      	sub	sp, #28
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6a1b      	ldr	r3, [r3, #32]
 800d246:	f023 0210 	bic.w	r2, r3, #16
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6a1b      	ldr	r3, [r3, #32]
 800d252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	699b      	ldr	r3, [r3, #24]
 800d25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d26e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	021b      	lsls	r3, r3, #8
 800d276:	68fa      	ldr	r2, [r7, #12]
 800d278:	4313      	orrs	r3, r2
 800d27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	f023 0320 	bic.w	r3, r3, #32
 800d282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	011b      	lsls	r3, r3, #4
 800d28a:	697a      	ldr	r2, [r7, #20]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4a22      	ldr	r2, [pc, #136]	; (800d31c <TIM_OC2_SetConfig+0xe4>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d003      	beq.n	800d2a0 <TIM_OC2_SetConfig+0x68>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a21      	ldr	r2, [pc, #132]	; (800d320 <TIM_OC2_SetConfig+0xe8>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d10d      	bne.n	800d2bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	011b      	lsls	r3, r3, #4
 800d2ae:	697a      	ldr	r2, [r7, #20]
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4a17      	ldr	r2, [pc, #92]	; (800d31c <TIM_OC2_SetConfig+0xe4>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d003      	beq.n	800d2cc <TIM_OC2_SetConfig+0x94>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4a16      	ldr	r2, [pc, #88]	; (800d320 <TIM_OC2_SetConfig+0xe8>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d113      	bne.n	800d2f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	693a      	ldr	r2, [r7, #16]
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	699b      	ldr	r3, [r3, #24]
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	693a      	ldr	r2, [r7, #16]
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	693a      	ldr	r2, [r7, #16]
 800d2f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	685a      	ldr	r2, [r3, #4]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	697a      	ldr	r2, [r7, #20]
 800d30c:	621a      	str	r2, [r3, #32]
}
 800d30e:	bf00      	nop
 800d310:	371c      	adds	r7, #28
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	40010000 	.word	0x40010000
 800d320:	40010400 	.word	0x40010400

0800d324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d324:	b480      	push	{r7}
 800d326:	b087      	sub	sp, #28
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a1b      	ldr	r3, [r3, #32]
 800d332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	69db      	ldr	r3, [r3, #28]
 800d34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f023 0303 	bic.w	r3, r3, #3
 800d35a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	4313      	orrs	r3, r2
 800d364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d36c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	021b      	lsls	r3, r3, #8
 800d374:	697a      	ldr	r2, [r7, #20]
 800d376:	4313      	orrs	r3, r2
 800d378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4a21      	ldr	r2, [pc, #132]	; (800d404 <TIM_OC3_SetConfig+0xe0>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d003      	beq.n	800d38a <TIM_OC3_SetConfig+0x66>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	4a20      	ldr	r2, [pc, #128]	; (800d408 <TIM_OC3_SetConfig+0xe4>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d10d      	bne.n	800d3a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	021b      	lsls	r3, r3, #8
 800d398:	697a      	ldr	r2, [r7, #20]
 800d39a:	4313      	orrs	r3, r2
 800d39c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d3a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4a16      	ldr	r2, [pc, #88]	; (800d404 <TIM_OC3_SetConfig+0xe0>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d003      	beq.n	800d3b6 <TIM_OC3_SetConfig+0x92>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4a15      	ldr	r2, [pc, #84]	; (800d408 <TIM_OC3_SetConfig+0xe4>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d113      	bne.n	800d3de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d3c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	695b      	ldr	r3, [r3, #20]
 800d3ca:	011b      	lsls	r3, r3, #4
 800d3cc:	693a      	ldr	r2, [r7, #16]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	699b      	ldr	r3, [r3, #24]
 800d3d6:	011b      	lsls	r3, r3, #4
 800d3d8:	693a      	ldr	r2, [r7, #16]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	697a      	ldr	r2, [r7, #20]
 800d3f6:	621a      	str	r2, [r3, #32]
}
 800d3f8:	bf00      	nop
 800d3fa:	371c      	adds	r7, #28
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr
 800d404:	40010000 	.word	0x40010000
 800d408:	40010400 	.word	0x40010400

0800d40c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b087      	sub	sp, #28
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6a1b      	ldr	r3, [r3, #32]
 800d41a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a1b      	ldr	r3, [r3, #32]
 800d426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	69db      	ldr	r3, [r3, #28]
 800d432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d43a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	021b      	lsls	r3, r3, #8
 800d44a:	68fa      	ldr	r2, [r7, #12]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	031b      	lsls	r3, r3, #12
 800d45e:	693a      	ldr	r2, [r7, #16]
 800d460:	4313      	orrs	r3, r2
 800d462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	4a12      	ldr	r2, [pc, #72]	; (800d4b0 <TIM_OC4_SetConfig+0xa4>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d003      	beq.n	800d474 <TIM_OC4_SetConfig+0x68>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4a11      	ldr	r2, [pc, #68]	; (800d4b4 <TIM_OC4_SetConfig+0xa8>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d109      	bne.n	800d488 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d47a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	695b      	ldr	r3, [r3, #20]
 800d480:	019b      	lsls	r3, r3, #6
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	4313      	orrs	r3, r2
 800d486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	697a      	ldr	r2, [r7, #20]
 800d48c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68fa      	ldr	r2, [r7, #12]
 800d492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	685a      	ldr	r2, [r3, #4]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	693a      	ldr	r2, [r7, #16]
 800d4a0:	621a      	str	r2, [r3, #32]
}
 800d4a2:	bf00      	nop
 800d4a4:	371c      	adds	r7, #28
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	40010000 	.word	0x40010000
 800d4b4:	40010400 	.word	0x40010400

0800d4b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b087      	sub	sp, #28
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	f003 031f 	and.w	r3, r3, #31
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d4d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6a1a      	ldr	r2, [r3, #32]
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	43db      	mvns	r3, r3
 800d4da:	401a      	ands	r2, r3
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6a1a      	ldr	r2, [r3, #32]
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	f003 031f 	and.w	r3, r3, #31
 800d4ea:	6879      	ldr	r1, [r7, #4]
 800d4ec:	fa01 f303 	lsl.w	r3, r1, r3
 800d4f0:	431a      	orrs	r2, r3
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	621a      	str	r2, [r3, #32]
}
 800d4f6:	bf00      	nop
 800d4f8:	371c      	adds	r7, #28
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
	...

0800d504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d514:	2b01      	cmp	r3, #1
 800d516:	d101      	bne.n	800d51c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d518:	2302      	movs	r3, #2
 800d51a:	e05a      	b.n	800d5d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2202      	movs	r2, #2
 800d528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	4313      	orrs	r3, r2
 800d54c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68fa      	ldr	r2, [r7, #12]
 800d554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4a21      	ldr	r2, [pc, #132]	; (800d5e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d022      	beq.n	800d5a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d568:	d01d      	beq.n	800d5a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a1d      	ldr	r2, [pc, #116]	; (800d5e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d018      	beq.n	800d5a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a1b      	ldr	r2, [pc, #108]	; (800d5e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d013      	beq.n	800d5a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4a1a      	ldr	r2, [pc, #104]	; (800d5ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d00e      	beq.n	800d5a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a18      	ldr	r2, [pc, #96]	; (800d5f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d009      	beq.n	800d5a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a17      	ldr	r2, [pc, #92]	; (800d5f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d004      	beq.n	800d5a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a15      	ldr	r2, [pc, #84]	; (800d5f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d10c      	bne.n	800d5c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	68ba      	ldr	r2, [r7, #8]
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	68ba      	ldr	r2, [r7, #8]
 800d5be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5d0:	2300      	movs	r3, #0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3714      	adds	r7, #20
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	40010000 	.word	0x40010000
 800d5e4:	40000400 	.word	0x40000400
 800d5e8:	40000800 	.word	0x40000800
 800d5ec:	40000c00 	.word	0x40000c00
 800d5f0:	40010400 	.word	0x40010400
 800d5f4:	40014000 	.word	0x40014000
 800d5f8:	40001800 	.word	0x40001800

0800d5fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b085      	sub	sp, #20
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d606:	2300      	movs	r3, #0
 800d608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d610:	2b01      	cmp	r3, #1
 800d612:	d101      	bne.n	800d618 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d614:	2302      	movs	r3, #2
 800d616:	e03d      	b.n	800d694 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	689b      	ldr	r3, [r3, #8]
 800d638:	4313      	orrs	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	4313      	orrs	r3, r2
 800d648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4313      	orrs	r3, r2
 800d656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	691b      	ldr	r3, [r3, #16]
 800d662:	4313      	orrs	r3, r2
 800d664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	695b      	ldr	r3, [r3, #20]
 800d670:	4313      	orrs	r3, r2
 800d672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	69db      	ldr	r3, [r3, #28]
 800d67e:	4313      	orrs	r3, r2
 800d680:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	68fa      	ldr	r2, [r7, #12]
 800d688:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3714      	adds	r7, #20
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6a8:	bf00      	nop
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d101      	bne.n	800d6da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	e03f      	b.n	800d75a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d106      	bne.n	800d6f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7f8 fae0 	bl	8005cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2224      	movs	r2, #36	; 0x24
 800d6f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68da      	ldr	r2, [r3, #12]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d70a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 f829 	bl	800d764 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	691a      	ldr	r2, [r3, #16]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	695a      	ldr	r2, [r3, #20]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	68da      	ldr	r2, [r3, #12]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2220      	movs	r2, #32
 800d74c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2220      	movs	r2, #32
 800d754:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d758:	2300      	movs	r3, #0
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3708      	adds	r7, #8
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
	...

0800d764 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d768:	b085      	sub	sp, #20
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	691b      	ldr	r3, [r3, #16]
 800d774:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	68da      	ldr	r2, [r3, #12]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	430a      	orrs	r2, r1
 800d782:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	689a      	ldr	r2, [r3, #8]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	431a      	orrs	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	695b      	ldr	r3, [r3, #20]
 800d792:	431a      	orrs	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	69db      	ldr	r3, [r3, #28]
 800d798:	4313      	orrs	r3, r2
 800d79a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d7a6:	f023 030c 	bic.w	r3, r3, #12
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	6812      	ldr	r2, [r2, #0]
 800d7ae:	68f9      	ldr	r1, [r7, #12]
 800d7b0:	430b      	orrs	r3, r1
 800d7b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	699a      	ldr	r2, [r3, #24]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	430a      	orrs	r2, r1
 800d7c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	69db      	ldr	r3, [r3, #28]
 800d7ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7d2:	f040 818b 	bne.w	800daec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4ac1      	ldr	r2, [pc, #772]	; (800dae0 <UART_SetConfig+0x37c>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d005      	beq.n	800d7ec <UART_SetConfig+0x88>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4abf      	ldr	r2, [pc, #764]	; (800dae4 <UART_SetConfig+0x380>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	f040 80bd 	bne.w	800d966 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d7ec:	f7fc fbcc 	bl	8009f88 <HAL_RCC_GetPCLK2Freq>
 800d7f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	461d      	mov	r5, r3
 800d7f6:	f04f 0600 	mov.w	r6, #0
 800d7fa:	46a8      	mov	r8, r5
 800d7fc:	46b1      	mov	r9, r6
 800d7fe:	eb18 0308 	adds.w	r3, r8, r8
 800d802:	eb49 0409 	adc.w	r4, r9, r9
 800d806:	4698      	mov	r8, r3
 800d808:	46a1      	mov	r9, r4
 800d80a:	eb18 0805 	adds.w	r8, r8, r5
 800d80e:	eb49 0906 	adc.w	r9, r9, r6
 800d812:	f04f 0100 	mov.w	r1, #0
 800d816:	f04f 0200 	mov.w	r2, #0
 800d81a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d81e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d822:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d826:	4688      	mov	r8, r1
 800d828:	4691      	mov	r9, r2
 800d82a:	eb18 0005 	adds.w	r0, r8, r5
 800d82e:	eb49 0106 	adc.w	r1, r9, r6
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	461d      	mov	r5, r3
 800d838:	f04f 0600 	mov.w	r6, #0
 800d83c:	196b      	adds	r3, r5, r5
 800d83e:	eb46 0406 	adc.w	r4, r6, r6
 800d842:	461a      	mov	r2, r3
 800d844:	4623      	mov	r3, r4
 800d846:	f7f3 fa37 	bl	8000cb8 <__aeabi_uldivmod>
 800d84a:	4603      	mov	r3, r0
 800d84c:	460c      	mov	r4, r1
 800d84e:	461a      	mov	r2, r3
 800d850:	4ba5      	ldr	r3, [pc, #660]	; (800dae8 <UART_SetConfig+0x384>)
 800d852:	fba3 2302 	umull	r2, r3, r3, r2
 800d856:	095b      	lsrs	r3, r3, #5
 800d858:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	461d      	mov	r5, r3
 800d860:	f04f 0600 	mov.w	r6, #0
 800d864:	46a9      	mov	r9, r5
 800d866:	46b2      	mov	sl, r6
 800d868:	eb19 0309 	adds.w	r3, r9, r9
 800d86c:	eb4a 040a 	adc.w	r4, sl, sl
 800d870:	4699      	mov	r9, r3
 800d872:	46a2      	mov	sl, r4
 800d874:	eb19 0905 	adds.w	r9, r9, r5
 800d878:	eb4a 0a06 	adc.w	sl, sl, r6
 800d87c:	f04f 0100 	mov.w	r1, #0
 800d880:	f04f 0200 	mov.w	r2, #0
 800d884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d888:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d88c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d890:	4689      	mov	r9, r1
 800d892:	4692      	mov	sl, r2
 800d894:	eb19 0005 	adds.w	r0, r9, r5
 800d898:	eb4a 0106 	adc.w	r1, sl, r6
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	461d      	mov	r5, r3
 800d8a2:	f04f 0600 	mov.w	r6, #0
 800d8a6:	196b      	adds	r3, r5, r5
 800d8a8:	eb46 0406 	adc.w	r4, r6, r6
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	4623      	mov	r3, r4
 800d8b0:	f7f3 fa02 	bl	8000cb8 <__aeabi_uldivmod>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	4b8b      	ldr	r3, [pc, #556]	; (800dae8 <UART_SetConfig+0x384>)
 800d8bc:	fba3 1302 	umull	r1, r3, r3, r2
 800d8c0:	095b      	lsrs	r3, r3, #5
 800d8c2:	2164      	movs	r1, #100	; 0x64
 800d8c4:	fb01 f303 	mul.w	r3, r1, r3
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	00db      	lsls	r3, r3, #3
 800d8cc:	3332      	adds	r3, #50	; 0x32
 800d8ce:	4a86      	ldr	r2, [pc, #536]	; (800dae8 <UART_SetConfig+0x384>)
 800d8d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d8d4:	095b      	lsrs	r3, r3, #5
 800d8d6:	005b      	lsls	r3, r3, #1
 800d8d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d8dc:	4498      	add	r8, r3
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	461d      	mov	r5, r3
 800d8e2:	f04f 0600 	mov.w	r6, #0
 800d8e6:	46a9      	mov	r9, r5
 800d8e8:	46b2      	mov	sl, r6
 800d8ea:	eb19 0309 	adds.w	r3, r9, r9
 800d8ee:	eb4a 040a 	adc.w	r4, sl, sl
 800d8f2:	4699      	mov	r9, r3
 800d8f4:	46a2      	mov	sl, r4
 800d8f6:	eb19 0905 	adds.w	r9, r9, r5
 800d8fa:	eb4a 0a06 	adc.w	sl, sl, r6
 800d8fe:	f04f 0100 	mov.w	r1, #0
 800d902:	f04f 0200 	mov.w	r2, #0
 800d906:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d90a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d90e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d912:	4689      	mov	r9, r1
 800d914:	4692      	mov	sl, r2
 800d916:	eb19 0005 	adds.w	r0, r9, r5
 800d91a:	eb4a 0106 	adc.w	r1, sl, r6
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	461d      	mov	r5, r3
 800d924:	f04f 0600 	mov.w	r6, #0
 800d928:	196b      	adds	r3, r5, r5
 800d92a:	eb46 0406 	adc.w	r4, r6, r6
 800d92e:	461a      	mov	r2, r3
 800d930:	4623      	mov	r3, r4
 800d932:	f7f3 f9c1 	bl	8000cb8 <__aeabi_uldivmod>
 800d936:	4603      	mov	r3, r0
 800d938:	460c      	mov	r4, r1
 800d93a:	461a      	mov	r2, r3
 800d93c:	4b6a      	ldr	r3, [pc, #424]	; (800dae8 <UART_SetConfig+0x384>)
 800d93e:	fba3 1302 	umull	r1, r3, r3, r2
 800d942:	095b      	lsrs	r3, r3, #5
 800d944:	2164      	movs	r1, #100	; 0x64
 800d946:	fb01 f303 	mul.w	r3, r1, r3
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	00db      	lsls	r3, r3, #3
 800d94e:	3332      	adds	r3, #50	; 0x32
 800d950:	4a65      	ldr	r2, [pc, #404]	; (800dae8 <UART_SetConfig+0x384>)
 800d952:	fba2 2303 	umull	r2, r3, r2, r3
 800d956:	095b      	lsrs	r3, r3, #5
 800d958:	f003 0207 	and.w	r2, r3, #7
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4442      	add	r2, r8
 800d962:	609a      	str	r2, [r3, #8]
 800d964:	e26f      	b.n	800de46 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d966:	f7fc fafb 	bl	8009f60 <HAL_RCC_GetPCLK1Freq>
 800d96a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	461d      	mov	r5, r3
 800d970:	f04f 0600 	mov.w	r6, #0
 800d974:	46a8      	mov	r8, r5
 800d976:	46b1      	mov	r9, r6
 800d978:	eb18 0308 	adds.w	r3, r8, r8
 800d97c:	eb49 0409 	adc.w	r4, r9, r9
 800d980:	4698      	mov	r8, r3
 800d982:	46a1      	mov	r9, r4
 800d984:	eb18 0805 	adds.w	r8, r8, r5
 800d988:	eb49 0906 	adc.w	r9, r9, r6
 800d98c:	f04f 0100 	mov.w	r1, #0
 800d990:	f04f 0200 	mov.w	r2, #0
 800d994:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d998:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d99c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d9a0:	4688      	mov	r8, r1
 800d9a2:	4691      	mov	r9, r2
 800d9a4:	eb18 0005 	adds.w	r0, r8, r5
 800d9a8:	eb49 0106 	adc.w	r1, r9, r6
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	461d      	mov	r5, r3
 800d9b2:	f04f 0600 	mov.w	r6, #0
 800d9b6:	196b      	adds	r3, r5, r5
 800d9b8:	eb46 0406 	adc.w	r4, r6, r6
 800d9bc:	461a      	mov	r2, r3
 800d9be:	4623      	mov	r3, r4
 800d9c0:	f7f3 f97a 	bl	8000cb8 <__aeabi_uldivmod>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	4b47      	ldr	r3, [pc, #284]	; (800dae8 <UART_SetConfig+0x384>)
 800d9cc:	fba3 2302 	umull	r2, r3, r3, r2
 800d9d0:	095b      	lsrs	r3, r3, #5
 800d9d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	461d      	mov	r5, r3
 800d9da:	f04f 0600 	mov.w	r6, #0
 800d9de:	46a9      	mov	r9, r5
 800d9e0:	46b2      	mov	sl, r6
 800d9e2:	eb19 0309 	adds.w	r3, r9, r9
 800d9e6:	eb4a 040a 	adc.w	r4, sl, sl
 800d9ea:	4699      	mov	r9, r3
 800d9ec:	46a2      	mov	sl, r4
 800d9ee:	eb19 0905 	adds.w	r9, r9, r5
 800d9f2:	eb4a 0a06 	adc.w	sl, sl, r6
 800d9f6:	f04f 0100 	mov.w	r1, #0
 800d9fa:	f04f 0200 	mov.w	r2, #0
 800d9fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800da02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800da06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800da0a:	4689      	mov	r9, r1
 800da0c:	4692      	mov	sl, r2
 800da0e:	eb19 0005 	adds.w	r0, r9, r5
 800da12:	eb4a 0106 	adc.w	r1, sl, r6
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	461d      	mov	r5, r3
 800da1c:	f04f 0600 	mov.w	r6, #0
 800da20:	196b      	adds	r3, r5, r5
 800da22:	eb46 0406 	adc.w	r4, r6, r6
 800da26:	461a      	mov	r2, r3
 800da28:	4623      	mov	r3, r4
 800da2a:	f7f3 f945 	bl	8000cb8 <__aeabi_uldivmod>
 800da2e:	4603      	mov	r3, r0
 800da30:	460c      	mov	r4, r1
 800da32:	461a      	mov	r2, r3
 800da34:	4b2c      	ldr	r3, [pc, #176]	; (800dae8 <UART_SetConfig+0x384>)
 800da36:	fba3 1302 	umull	r1, r3, r3, r2
 800da3a:	095b      	lsrs	r3, r3, #5
 800da3c:	2164      	movs	r1, #100	; 0x64
 800da3e:	fb01 f303 	mul.w	r3, r1, r3
 800da42:	1ad3      	subs	r3, r2, r3
 800da44:	00db      	lsls	r3, r3, #3
 800da46:	3332      	adds	r3, #50	; 0x32
 800da48:	4a27      	ldr	r2, [pc, #156]	; (800dae8 <UART_SetConfig+0x384>)
 800da4a:	fba2 2303 	umull	r2, r3, r2, r3
 800da4e:	095b      	lsrs	r3, r3, #5
 800da50:	005b      	lsls	r3, r3, #1
 800da52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800da56:	4498      	add	r8, r3
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	461d      	mov	r5, r3
 800da5c:	f04f 0600 	mov.w	r6, #0
 800da60:	46a9      	mov	r9, r5
 800da62:	46b2      	mov	sl, r6
 800da64:	eb19 0309 	adds.w	r3, r9, r9
 800da68:	eb4a 040a 	adc.w	r4, sl, sl
 800da6c:	4699      	mov	r9, r3
 800da6e:	46a2      	mov	sl, r4
 800da70:	eb19 0905 	adds.w	r9, r9, r5
 800da74:	eb4a 0a06 	adc.w	sl, sl, r6
 800da78:	f04f 0100 	mov.w	r1, #0
 800da7c:	f04f 0200 	mov.w	r2, #0
 800da80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800da84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800da88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800da8c:	4689      	mov	r9, r1
 800da8e:	4692      	mov	sl, r2
 800da90:	eb19 0005 	adds.w	r0, r9, r5
 800da94:	eb4a 0106 	adc.w	r1, sl, r6
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	461d      	mov	r5, r3
 800da9e:	f04f 0600 	mov.w	r6, #0
 800daa2:	196b      	adds	r3, r5, r5
 800daa4:	eb46 0406 	adc.w	r4, r6, r6
 800daa8:	461a      	mov	r2, r3
 800daaa:	4623      	mov	r3, r4
 800daac:	f7f3 f904 	bl	8000cb8 <__aeabi_uldivmod>
 800dab0:	4603      	mov	r3, r0
 800dab2:	460c      	mov	r4, r1
 800dab4:	461a      	mov	r2, r3
 800dab6:	4b0c      	ldr	r3, [pc, #48]	; (800dae8 <UART_SetConfig+0x384>)
 800dab8:	fba3 1302 	umull	r1, r3, r3, r2
 800dabc:	095b      	lsrs	r3, r3, #5
 800dabe:	2164      	movs	r1, #100	; 0x64
 800dac0:	fb01 f303 	mul.w	r3, r1, r3
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	00db      	lsls	r3, r3, #3
 800dac8:	3332      	adds	r3, #50	; 0x32
 800daca:	4a07      	ldr	r2, [pc, #28]	; (800dae8 <UART_SetConfig+0x384>)
 800dacc:	fba2 2303 	umull	r2, r3, r2, r3
 800dad0:	095b      	lsrs	r3, r3, #5
 800dad2:	f003 0207 	and.w	r2, r3, #7
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4442      	add	r2, r8
 800dadc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800dade:	e1b2      	b.n	800de46 <UART_SetConfig+0x6e2>
 800dae0:	40011000 	.word	0x40011000
 800dae4:	40011400 	.word	0x40011400
 800dae8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4ad7      	ldr	r2, [pc, #860]	; (800de50 <UART_SetConfig+0x6ec>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d005      	beq.n	800db02 <UART_SetConfig+0x39e>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4ad6      	ldr	r2, [pc, #856]	; (800de54 <UART_SetConfig+0x6f0>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	f040 80d1 	bne.w	800dca4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800db02:	f7fc fa41 	bl	8009f88 <HAL_RCC_GetPCLK2Freq>
 800db06:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	469a      	mov	sl, r3
 800db0c:	f04f 0b00 	mov.w	fp, #0
 800db10:	46d0      	mov	r8, sl
 800db12:	46d9      	mov	r9, fp
 800db14:	eb18 0308 	adds.w	r3, r8, r8
 800db18:	eb49 0409 	adc.w	r4, r9, r9
 800db1c:	4698      	mov	r8, r3
 800db1e:	46a1      	mov	r9, r4
 800db20:	eb18 080a 	adds.w	r8, r8, sl
 800db24:	eb49 090b 	adc.w	r9, r9, fp
 800db28:	f04f 0100 	mov.w	r1, #0
 800db2c:	f04f 0200 	mov.w	r2, #0
 800db30:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800db34:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800db38:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800db3c:	4688      	mov	r8, r1
 800db3e:	4691      	mov	r9, r2
 800db40:	eb1a 0508 	adds.w	r5, sl, r8
 800db44:	eb4b 0609 	adc.w	r6, fp, r9
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	4619      	mov	r1, r3
 800db4e:	f04f 0200 	mov.w	r2, #0
 800db52:	f04f 0300 	mov.w	r3, #0
 800db56:	f04f 0400 	mov.w	r4, #0
 800db5a:	0094      	lsls	r4, r2, #2
 800db5c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800db60:	008b      	lsls	r3, r1, #2
 800db62:	461a      	mov	r2, r3
 800db64:	4623      	mov	r3, r4
 800db66:	4628      	mov	r0, r5
 800db68:	4631      	mov	r1, r6
 800db6a:	f7f3 f8a5 	bl	8000cb8 <__aeabi_uldivmod>
 800db6e:	4603      	mov	r3, r0
 800db70:	460c      	mov	r4, r1
 800db72:	461a      	mov	r2, r3
 800db74:	4bb8      	ldr	r3, [pc, #736]	; (800de58 <UART_SetConfig+0x6f4>)
 800db76:	fba3 2302 	umull	r2, r3, r3, r2
 800db7a:	095b      	lsrs	r3, r3, #5
 800db7c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	469b      	mov	fp, r3
 800db84:	f04f 0c00 	mov.w	ip, #0
 800db88:	46d9      	mov	r9, fp
 800db8a:	46e2      	mov	sl, ip
 800db8c:	eb19 0309 	adds.w	r3, r9, r9
 800db90:	eb4a 040a 	adc.w	r4, sl, sl
 800db94:	4699      	mov	r9, r3
 800db96:	46a2      	mov	sl, r4
 800db98:	eb19 090b 	adds.w	r9, r9, fp
 800db9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800dba0:	f04f 0100 	mov.w	r1, #0
 800dba4:	f04f 0200 	mov.w	r2, #0
 800dba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dbac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dbb0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dbb4:	4689      	mov	r9, r1
 800dbb6:	4692      	mov	sl, r2
 800dbb8:	eb1b 0509 	adds.w	r5, fp, r9
 800dbbc:	eb4c 060a 	adc.w	r6, ip, sl
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	f04f 0200 	mov.w	r2, #0
 800dbca:	f04f 0300 	mov.w	r3, #0
 800dbce:	f04f 0400 	mov.w	r4, #0
 800dbd2:	0094      	lsls	r4, r2, #2
 800dbd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dbd8:	008b      	lsls	r3, r1, #2
 800dbda:	461a      	mov	r2, r3
 800dbdc:	4623      	mov	r3, r4
 800dbde:	4628      	mov	r0, r5
 800dbe0:	4631      	mov	r1, r6
 800dbe2:	f7f3 f869 	bl	8000cb8 <__aeabi_uldivmod>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	460c      	mov	r4, r1
 800dbea:	461a      	mov	r2, r3
 800dbec:	4b9a      	ldr	r3, [pc, #616]	; (800de58 <UART_SetConfig+0x6f4>)
 800dbee:	fba3 1302 	umull	r1, r3, r3, r2
 800dbf2:	095b      	lsrs	r3, r3, #5
 800dbf4:	2164      	movs	r1, #100	; 0x64
 800dbf6:	fb01 f303 	mul.w	r3, r1, r3
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	011b      	lsls	r3, r3, #4
 800dbfe:	3332      	adds	r3, #50	; 0x32
 800dc00:	4a95      	ldr	r2, [pc, #596]	; (800de58 <UART_SetConfig+0x6f4>)
 800dc02:	fba2 2303 	umull	r2, r3, r2, r3
 800dc06:	095b      	lsrs	r3, r3, #5
 800dc08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc0c:	4498      	add	r8, r3
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	469b      	mov	fp, r3
 800dc12:	f04f 0c00 	mov.w	ip, #0
 800dc16:	46d9      	mov	r9, fp
 800dc18:	46e2      	mov	sl, ip
 800dc1a:	eb19 0309 	adds.w	r3, r9, r9
 800dc1e:	eb4a 040a 	adc.w	r4, sl, sl
 800dc22:	4699      	mov	r9, r3
 800dc24:	46a2      	mov	sl, r4
 800dc26:	eb19 090b 	adds.w	r9, r9, fp
 800dc2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800dc2e:	f04f 0100 	mov.w	r1, #0
 800dc32:	f04f 0200 	mov.w	r2, #0
 800dc36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dc3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dc3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dc42:	4689      	mov	r9, r1
 800dc44:	4692      	mov	sl, r2
 800dc46:	eb1b 0509 	adds.w	r5, fp, r9
 800dc4a:	eb4c 060a 	adc.w	r6, ip, sl
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	4619      	mov	r1, r3
 800dc54:	f04f 0200 	mov.w	r2, #0
 800dc58:	f04f 0300 	mov.w	r3, #0
 800dc5c:	f04f 0400 	mov.w	r4, #0
 800dc60:	0094      	lsls	r4, r2, #2
 800dc62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dc66:	008b      	lsls	r3, r1, #2
 800dc68:	461a      	mov	r2, r3
 800dc6a:	4623      	mov	r3, r4
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	4631      	mov	r1, r6
 800dc70:	f7f3 f822 	bl	8000cb8 <__aeabi_uldivmod>
 800dc74:	4603      	mov	r3, r0
 800dc76:	460c      	mov	r4, r1
 800dc78:	461a      	mov	r2, r3
 800dc7a:	4b77      	ldr	r3, [pc, #476]	; (800de58 <UART_SetConfig+0x6f4>)
 800dc7c:	fba3 1302 	umull	r1, r3, r3, r2
 800dc80:	095b      	lsrs	r3, r3, #5
 800dc82:	2164      	movs	r1, #100	; 0x64
 800dc84:	fb01 f303 	mul.w	r3, r1, r3
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	011b      	lsls	r3, r3, #4
 800dc8c:	3332      	adds	r3, #50	; 0x32
 800dc8e:	4a72      	ldr	r2, [pc, #456]	; (800de58 <UART_SetConfig+0x6f4>)
 800dc90:	fba2 2303 	umull	r2, r3, r2, r3
 800dc94:	095b      	lsrs	r3, r3, #5
 800dc96:	f003 020f 	and.w	r2, r3, #15
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4442      	add	r2, r8
 800dca0:	609a      	str	r2, [r3, #8]
 800dca2:	e0d0      	b.n	800de46 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800dca4:	f7fc f95c 	bl	8009f60 <HAL_RCC_GetPCLK1Freq>
 800dca8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	469a      	mov	sl, r3
 800dcae:	f04f 0b00 	mov.w	fp, #0
 800dcb2:	46d0      	mov	r8, sl
 800dcb4:	46d9      	mov	r9, fp
 800dcb6:	eb18 0308 	adds.w	r3, r8, r8
 800dcba:	eb49 0409 	adc.w	r4, r9, r9
 800dcbe:	4698      	mov	r8, r3
 800dcc0:	46a1      	mov	r9, r4
 800dcc2:	eb18 080a 	adds.w	r8, r8, sl
 800dcc6:	eb49 090b 	adc.w	r9, r9, fp
 800dcca:	f04f 0100 	mov.w	r1, #0
 800dcce:	f04f 0200 	mov.w	r2, #0
 800dcd2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dcd6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dcda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dcde:	4688      	mov	r8, r1
 800dce0:	4691      	mov	r9, r2
 800dce2:	eb1a 0508 	adds.w	r5, sl, r8
 800dce6:	eb4b 0609 	adc.w	r6, fp, r9
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	4619      	mov	r1, r3
 800dcf0:	f04f 0200 	mov.w	r2, #0
 800dcf4:	f04f 0300 	mov.w	r3, #0
 800dcf8:	f04f 0400 	mov.w	r4, #0
 800dcfc:	0094      	lsls	r4, r2, #2
 800dcfe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dd02:	008b      	lsls	r3, r1, #2
 800dd04:	461a      	mov	r2, r3
 800dd06:	4623      	mov	r3, r4
 800dd08:	4628      	mov	r0, r5
 800dd0a:	4631      	mov	r1, r6
 800dd0c:	f7f2 ffd4 	bl	8000cb8 <__aeabi_uldivmod>
 800dd10:	4603      	mov	r3, r0
 800dd12:	460c      	mov	r4, r1
 800dd14:	461a      	mov	r2, r3
 800dd16:	4b50      	ldr	r3, [pc, #320]	; (800de58 <UART_SetConfig+0x6f4>)
 800dd18:	fba3 2302 	umull	r2, r3, r3, r2
 800dd1c:	095b      	lsrs	r3, r3, #5
 800dd1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	469b      	mov	fp, r3
 800dd26:	f04f 0c00 	mov.w	ip, #0
 800dd2a:	46d9      	mov	r9, fp
 800dd2c:	46e2      	mov	sl, ip
 800dd2e:	eb19 0309 	adds.w	r3, r9, r9
 800dd32:	eb4a 040a 	adc.w	r4, sl, sl
 800dd36:	4699      	mov	r9, r3
 800dd38:	46a2      	mov	sl, r4
 800dd3a:	eb19 090b 	adds.w	r9, r9, fp
 800dd3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800dd42:	f04f 0100 	mov.w	r1, #0
 800dd46:	f04f 0200 	mov.w	r2, #0
 800dd4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dd4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dd52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dd56:	4689      	mov	r9, r1
 800dd58:	4692      	mov	sl, r2
 800dd5a:	eb1b 0509 	adds.w	r5, fp, r9
 800dd5e:	eb4c 060a 	adc.w	r6, ip, sl
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	4619      	mov	r1, r3
 800dd68:	f04f 0200 	mov.w	r2, #0
 800dd6c:	f04f 0300 	mov.w	r3, #0
 800dd70:	f04f 0400 	mov.w	r4, #0
 800dd74:	0094      	lsls	r4, r2, #2
 800dd76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dd7a:	008b      	lsls	r3, r1, #2
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	4623      	mov	r3, r4
 800dd80:	4628      	mov	r0, r5
 800dd82:	4631      	mov	r1, r6
 800dd84:	f7f2 ff98 	bl	8000cb8 <__aeabi_uldivmod>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	460c      	mov	r4, r1
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	4b32      	ldr	r3, [pc, #200]	; (800de58 <UART_SetConfig+0x6f4>)
 800dd90:	fba3 1302 	umull	r1, r3, r3, r2
 800dd94:	095b      	lsrs	r3, r3, #5
 800dd96:	2164      	movs	r1, #100	; 0x64
 800dd98:	fb01 f303 	mul.w	r3, r1, r3
 800dd9c:	1ad3      	subs	r3, r2, r3
 800dd9e:	011b      	lsls	r3, r3, #4
 800dda0:	3332      	adds	r3, #50	; 0x32
 800dda2:	4a2d      	ldr	r2, [pc, #180]	; (800de58 <UART_SetConfig+0x6f4>)
 800dda4:	fba2 2303 	umull	r2, r3, r2, r3
 800dda8:	095b      	lsrs	r3, r3, #5
 800ddaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ddae:	4498      	add	r8, r3
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	469b      	mov	fp, r3
 800ddb4:	f04f 0c00 	mov.w	ip, #0
 800ddb8:	46d9      	mov	r9, fp
 800ddba:	46e2      	mov	sl, ip
 800ddbc:	eb19 0309 	adds.w	r3, r9, r9
 800ddc0:	eb4a 040a 	adc.w	r4, sl, sl
 800ddc4:	4699      	mov	r9, r3
 800ddc6:	46a2      	mov	sl, r4
 800ddc8:	eb19 090b 	adds.w	r9, r9, fp
 800ddcc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ddd0:	f04f 0100 	mov.w	r1, #0
 800ddd4:	f04f 0200 	mov.w	r2, #0
 800ddd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dddc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dde0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dde4:	4689      	mov	r9, r1
 800dde6:	4692      	mov	sl, r2
 800dde8:	eb1b 0509 	adds.w	r5, fp, r9
 800ddec:	eb4c 060a 	adc.w	r6, ip, sl
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	f04f 0200 	mov.w	r2, #0
 800ddfa:	f04f 0300 	mov.w	r3, #0
 800ddfe:	f04f 0400 	mov.w	r4, #0
 800de02:	0094      	lsls	r4, r2, #2
 800de04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800de08:	008b      	lsls	r3, r1, #2
 800de0a:	461a      	mov	r2, r3
 800de0c:	4623      	mov	r3, r4
 800de0e:	4628      	mov	r0, r5
 800de10:	4631      	mov	r1, r6
 800de12:	f7f2 ff51 	bl	8000cb8 <__aeabi_uldivmod>
 800de16:	4603      	mov	r3, r0
 800de18:	460c      	mov	r4, r1
 800de1a:	461a      	mov	r2, r3
 800de1c:	4b0e      	ldr	r3, [pc, #56]	; (800de58 <UART_SetConfig+0x6f4>)
 800de1e:	fba3 1302 	umull	r1, r3, r3, r2
 800de22:	095b      	lsrs	r3, r3, #5
 800de24:	2164      	movs	r1, #100	; 0x64
 800de26:	fb01 f303 	mul.w	r3, r1, r3
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	011b      	lsls	r3, r3, #4
 800de2e:	3332      	adds	r3, #50	; 0x32
 800de30:	4a09      	ldr	r2, [pc, #36]	; (800de58 <UART_SetConfig+0x6f4>)
 800de32:	fba2 2303 	umull	r2, r3, r2, r3
 800de36:	095b      	lsrs	r3, r3, #5
 800de38:	f003 020f 	and.w	r2, r3, #15
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4442      	add	r2, r8
 800de42:	609a      	str	r2, [r3, #8]
}
 800de44:	e7ff      	b.n	800de46 <UART_SetConfig+0x6e2>
 800de46:	bf00      	nop
 800de48:	3714      	adds	r7, #20
 800de4a:	46bd      	mov	sp, r7
 800de4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de50:	40011000 	.word	0x40011000
 800de54:	40011400 	.word	0x40011400
 800de58:	51eb851f 	.word	0x51eb851f

0800de5c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800de5c:	b084      	sub	sp, #16
 800de5e:	b480      	push	{r7}
 800de60:	b085      	sub	sp, #20
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
 800de66:	f107 001c 	add.w	r0, r7, #28
 800de6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800de6e:	2300      	movs	r3, #0
 800de70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800de72:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800de74:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800de76:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800de78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800de7a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800de7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800de7e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800de80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800de82:	431a      	orrs	r2, r3
             Init.ClockDiv
 800de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800de86:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800de96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	431a      	orrs	r2, r3
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dea2:	2300      	movs	r3, #0
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3714      	adds	r7, #20
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	b004      	add	sp, #16
 800deb0:	4770      	bx	lr

0800deb2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800deb2:	b480      	push	{r7}
 800deb4:	b083      	sub	sp, #12
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dee0:	2300      	movs	r3, #0
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	370c      	adds	r7, #12
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr

0800deee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800deee:	b580      	push	{r7, lr}
 800def0:	b082      	sub	sp, #8
 800def2:	af00      	add	r7, sp, #0
 800def4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2203      	movs	r2, #3
 800defa:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800defc:	2002      	movs	r0, #2
 800defe:	f7f9 fbc5 	bl	800768c <HAL_Delay>
  
  return HAL_OK;
 800df02:	2300      	movs	r3, #0
}
 800df04:	4618      	mov	r0, r3
 800df06:	3708      	adds	r7, #8
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f003 0303 	and.w	r3, r3, #3
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800df32:	2300      	movs	r3, #0
 800df34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800df46:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800df4c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800df52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	4313      	orrs	r3, r2
 800df58:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800df62:	f023 030f 	bic.w	r3, r3, #15
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	431a      	orrs	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800df6e:	2300      	movs	r3, #0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3714      	adds	r7, #20
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	691b      	ldr	r3, [r3, #16]
 800df88:	b2db      	uxtb	r3, r3
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	370c      	adds	r7, #12
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800df96:	b480      	push	{r7}
 800df98:	b085      	sub	sp, #20
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
 800df9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	3314      	adds	r3, #20
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
}  
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b085      	sub	sp, #20
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	685a      	ldr	r2, [r3, #4]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dfe2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800dfe8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800dfee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	4313      	orrs	r3, r2
 800dff4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dffa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	431a      	orrs	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e006:	2300      	movs	r3, #0

}
 800e008:	4618      	mov	r0, r3
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b088      	sub	sp, #32
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e022:	2310      	movs	r3, #16
 800e024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e026:	2340      	movs	r3, #64	; 0x40
 800e028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e02a:	2300      	movs	r3, #0
 800e02c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e02e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e032:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e034:	f107 0308 	add.w	r3, r7, #8
 800e038:	4619      	mov	r1, r3
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7ff ff74 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e040:	f241 3288 	movw	r2, #5000	; 0x1388
 800e044:	2110      	movs	r1, #16
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 fa40 	bl	800e4cc <SDMMC_GetCmdResp1>
 800e04c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e04e:	69fb      	ldr	r3, [r7, #28]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3720      	adds	r7, #32
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b088      	sub	sp, #32
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e066:	2311      	movs	r3, #17
 800e068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e06a:	2340      	movs	r3, #64	; 0x40
 800e06c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e06e:	2300      	movs	r3, #0
 800e070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e076:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e078:	f107 0308 	add.w	r3, r7, #8
 800e07c:	4619      	mov	r1, r3
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f7ff ff52 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e084:	f241 3288 	movw	r2, #5000	; 0x1388
 800e088:	2111      	movs	r1, #17
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 fa1e 	bl	800e4cc <SDMMC_GetCmdResp1>
 800e090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e092:	69fb      	ldr	r3, [r7, #28]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3720      	adds	r7, #32
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b088      	sub	sp, #32
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e0aa:	2312      	movs	r3, #18
 800e0ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0ae:	2340      	movs	r3, #64	; 0x40
 800e0b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0bc:	f107 0308 	add.w	r3, r7, #8
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f7ff ff30 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e0c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0cc:	2112      	movs	r1, #18
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 f9fc 	bl	800e4cc <SDMMC_GetCmdResp1>
 800e0d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0d6:	69fb      	ldr	r3, [r7, #28]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3720      	adds	r7, #32
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b088      	sub	sp, #32
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e0ee:	2318      	movs	r3, #24
 800e0f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0f2:	2340      	movs	r3, #64	; 0x40
 800e0f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e100:	f107 0308 	add.w	r3, r7, #8
 800e104:	4619      	mov	r1, r3
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f7ff ff0e 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e10c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e110:	2118      	movs	r1, #24
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 f9da 	bl	800e4cc <SDMMC_GetCmdResp1>
 800e118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e11a:	69fb      	ldr	r3, [r7, #28]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3720      	adds	r7, #32
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b088      	sub	sp, #32
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e132:	2319      	movs	r3, #25
 800e134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e136:	2340      	movs	r3, #64	; 0x40
 800e138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e13a:	2300      	movs	r3, #0
 800e13c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e13e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e142:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e144:	f107 0308 	add.w	r3, r7, #8
 800e148:	4619      	mov	r1, r3
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7ff feec 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e150:	f241 3288 	movw	r2, #5000	; 0x1388
 800e154:	2119      	movs	r1, #25
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 f9b8 	bl	800e4cc <SDMMC_GetCmdResp1>
 800e15c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e15e:	69fb      	ldr	r3, [r7, #28]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3720      	adds	r7, #32
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b088      	sub	sp, #32
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e170:	2300      	movs	r3, #0
 800e172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e174:	230c      	movs	r3, #12
 800e176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e178:	2340      	movs	r3, #64	; 0x40
 800e17a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e17c:	2300      	movs	r3, #0
 800e17e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e184:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e186:	f107 0308 	add.w	r3, r7, #8
 800e18a:	4619      	mov	r1, r3
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff fecb 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e192:	4a05      	ldr	r2, [pc, #20]	; (800e1a8 <SDMMC_CmdStopTransfer+0x40>)
 800e194:	210c      	movs	r1, #12
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f000 f998 	bl	800e4cc <SDMMC_GetCmdResp1>
 800e19c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e19e:	69fb      	ldr	r3, [r7, #28]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3720      	adds	r7, #32
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	05f5e100 	.word	0x05f5e100

0800e1ac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b08a      	sub	sp, #40	; 0x28
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e1bc:	2307      	movs	r3, #7
 800e1be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1c0:	2340      	movs	r3, #64	; 0x40
 800e1c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1cc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1ce:	f107 0310 	add.w	r3, r7, #16
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f7ff fea7 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e1da:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1de:	2107      	movs	r1, #7
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	f000 f973 	bl	800e4cc <SDMMC_GetCmdResp1>
 800e1e6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3728      	adds	r7, #40	; 0x28
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b088      	sub	sp, #32
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e1fe:	2300      	movs	r3, #0
 800e200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e202:	2300      	movs	r3, #0
 800e204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e206:	2300      	movs	r3, #0
 800e208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e20a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e20e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e210:	f107 0308 	add.w	r3, r7, #8
 800e214:	4619      	mov	r1, r3
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7ff fe86 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 f92d 	bl	800e47c <SDMMC_GetCmdError>
 800e222:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e224:	69fb      	ldr	r3, [r7, #28]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3720      	adds	r7, #32
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}

0800e22e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e22e:	b580      	push	{r7, lr}
 800e230:	b088      	sub	sp, #32
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e236:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e23a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e23c:	2308      	movs	r3, #8
 800e23e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e240:	2340      	movs	r3, #64	; 0x40
 800e242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e244:	2300      	movs	r3, #0
 800e246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e24c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e24e:	f107 0308 	add.w	r3, r7, #8
 800e252:	4619      	mov	r1, r3
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7ff fe67 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 fb16 	bl	800e88c <SDMMC_GetCmdResp7>
 800e260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e262:	69fb      	ldr	r3, [r7, #28]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3720      	adds	r7, #32
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e27a:	2337      	movs	r3, #55	; 0x37
 800e27c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e27e:	2340      	movs	r3, #64	; 0x40
 800e280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e282:	2300      	movs	r3, #0
 800e284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e28a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e28c:	f107 0308 	add.w	r3, r7, #8
 800e290:	4619      	mov	r1, r3
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7ff fe48 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e298:	f241 3288 	movw	r2, #5000	; 0x1388
 800e29c:	2137      	movs	r1, #55	; 0x37
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 f914 	bl	800e4cc <SDMMC_GetCmdResp1>
 800e2a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2a6:	69fb      	ldr	r3, [r7, #28]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3720      	adds	r7, #32
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e2c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e2c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e2c6:	2329      	movs	r3, #41	; 0x29
 800e2c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2ca:	2340      	movs	r3, #64	; 0x40
 800e2cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2d8:	f107 0308 	add.w	r3, r7, #8
 800e2dc:	4619      	mov	r1, r3
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff fe22 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 fa23 	bl	800e730 <SDMMC_GetCmdResp3>
 800e2ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3720      	adds	r7, #32
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b088      	sub	sp, #32
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e304:	2306      	movs	r3, #6
 800e306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e308:	2340      	movs	r3, #64	; 0x40
 800e30a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e30c:	2300      	movs	r3, #0
 800e30e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e314:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e316:	f107 0308 	add.w	r3, r7, #8
 800e31a:	4619      	mov	r1, r3
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f7ff fe03 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e322:	f241 3288 	movw	r2, #5000	; 0x1388
 800e326:	2106      	movs	r1, #6
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 f8cf 	bl	800e4cc <SDMMC_GetCmdResp1>
 800e32e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e330:	69fb      	ldr	r3, [r7, #28]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3720      	adds	r7, #32
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b088      	sub	sp, #32
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e342:	2300      	movs	r3, #0
 800e344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e346:	2333      	movs	r3, #51	; 0x33
 800e348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e34a:	2340      	movs	r3, #64	; 0x40
 800e34c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e34e:	2300      	movs	r3, #0
 800e350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e356:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e358:	f107 0308 	add.w	r3, r7, #8
 800e35c:	4619      	mov	r1, r3
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7ff fde2 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e364:	f241 3288 	movw	r2, #5000	; 0x1388
 800e368:	2133      	movs	r1, #51	; 0x33
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 f8ae 	bl	800e4cc <SDMMC_GetCmdResp1>
 800e370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e372:	69fb      	ldr	r3, [r7, #28]
}
 800e374:	4618      	mov	r0, r3
 800e376:	3720      	adds	r7, #32
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b088      	sub	sp, #32
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e384:	2300      	movs	r3, #0
 800e386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e388:	2302      	movs	r3, #2
 800e38a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e38c:	23c0      	movs	r3, #192	; 0xc0
 800e38e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e390:	2300      	movs	r3, #0
 800e392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e398:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e39a:	f107 0308 	add.w	r3, r7, #8
 800e39e:	4619      	mov	r1, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f7ff fdc1 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 f97c 	bl	800e6a4 <SDMMC_GetCmdResp2>
 800e3ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3ae:	69fb      	ldr	r3, [r7, #28]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3720      	adds	r7, #32
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b088      	sub	sp, #32
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e3c6:	2309      	movs	r3, #9
 800e3c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e3ca:	23c0      	movs	r3, #192	; 0xc0
 800e3cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3d8:	f107 0308 	add.w	r3, r7, #8
 800e3dc:	4619      	mov	r1, r3
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f7ff fda2 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 f95d 	bl	800e6a4 <SDMMC_GetCmdResp2>
 800e3ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3ec:	69fb      	ldr	r3, [r7, #28]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3720      	adds	r7, #32
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b088      	sub	sp, #32
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
 800e3fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e400:	2300      	movs	r3, #0
 800e402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e404:	2303      	movs	r3, #3
 800e406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e408:	2340      	movs	r3, #64	; 0x40
 800e40a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e40c:	2300      	movs	r3, #0
 800e40e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e414:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e416:	f107 0308 	add.w	r3, r7, #8
 800e41a:	4619      	mov	r1, r3
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f7ff fd83 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e422:	683a      	ldr	r2, [r7, #0]
 800e424:	2103      	movs	r1, #3
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 f9bc 	bl	800e7a4 <SDMMC_GetCmdResp6>
 800e42c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e42e:	69fb      	ldr	r3, [r7, #28]
}
 800e430:	4618      	mov	r0, r3
 800e432:	3720      	adds	r7, #32
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b088      	sub	sp, #32
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e446:	230d      	movs	r3, #13
 800e448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e44a:	2340      	movs	r3, #64	; 0x40
 800e44c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e44e:	2300      	movs	r3, #0
 800e450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e456:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e458:	f107 0308 	add.w	r3, r7, #8
 800e45c:	4619      	mov	r1, r3
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f7ff fd62 	bl	800df28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e464:	f241 3288 	movw	r2, #5000	; 0x1388
 800e468:	210d      	movs	r1, #13
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 f82e 	bl	800e4cc <SDMMC_GetCmdResp1>
 800e470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e472:	69fb      	ldr	r3, [r7, #28]
}
 800e474:	4618      	mov	r0, r3
 800e476:	3720      	adds	r7, #32
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e47c:	b490      	push	{r4, r7}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e484:	4b0f      	ldr	r3, [pc, #60]	; (800e4c4 <SDMMC_GetCmdError+0x48>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a0f      	ldr	r2, [pc, #60]	; (800e4c8 <SDMMC_GetCmdError+0x4c>)
 800e48a:	fba2 2303 	umull	r2, r3, r2, r3
 800e48e:	0a5b      	lsrs	r3, r3, #9
 800e490:	f241 3288 	movw	r2, #5000	; 0x1388
 800e494:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e498:	4623      	mov	r3, r4
 800e49a:	1e5c      	subs	r4, r3, #1
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d102      	bne.n	800e4a6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e4a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4a4:	e009      	b.n	800e4ba <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d0f2      	beq.n	800e498 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	22c5      	movs	r2, #197	; 0xc5
 800e4b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e4b8:	2300      	movs	r3, #0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bc90      	pop	{r4, r7}
 800e4c2:	4770      	bx	lr
 800e4c4:	20000000 	.word	0x20000000
 800e4c8:	10624dd3 	.word	0x10624dd3

0800e4cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e4cc:	b590      	push	{r4, r7, lr}
 800e4ce:	b087      	sub	sp, #28
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	607a      	str	r2, [r7, #4]
 800e4d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e4da:	4b6f      	ldr	r3, [pc, #444]	; (800e698 <SDMMC_GetCmdResp1+0x1cc>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a6f      	ldr	r2, [pc, #444]	; (800e69c <SDMMC_GetCmdResp1+0x1d0>)
 800e4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800e4e4:	0a5b      	lsrs	r3, r3, #9
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e4ec:	4623      	mov	r3, r4
 800e4ee:	1e5c      	subs	r4, r3, #1
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d102      	bne.n	800e4fa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e4f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4f8:	e0c9      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fe:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e506:	2b00      	cmp	r3, #0
 800e508:	d0f0      	beq.n	800e4ec <SDMMC_GetCmdResp1+0x20>
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e510:	2b00      	cmp	r3, #0
 800e512:	d1eb      	bne.n	800e4ec <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e518:	f003 0304 	and.w	r3, r3, #4
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d004      	beq.n	800e52a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2204      	movs	r2, #4
 800e524:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e526:	2304      	movs	r3, #4
 800e528:	e0b1      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e52e:	f003 0301 	and.w	r3, r3, #1
 800e532:	2b00      	cmp	r3, #0
 800e534:	d004      	beq.n	800e540 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	2201      	movs	r2, #1
 800e53a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e53c:	2301      	movs	r3, #1
 800e53e:	e0a6      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	22c5      	movs	r2, #197	; 0xc5
 800e544:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f7ff fd18 	bl	800df7c <SDIO_GetCommandResponse>
 800e54c:	4603      	mov	r3, r0
 800e54e:	461a      	mov	r2, r3
 800e550:	7afb      	ldrb	r3, [r7, #11]
 800e552:	4293      	cmp	r3, r2
 800e554:	d001      	beq.n	800e55a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e556:	2301      	movs	r3, #1
 800e558:	e099      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e55a:	2100      	movs	r1, #0
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f7ff fd1a 	bl	800df96 <SDIO_GetResponse>
 800e562:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e564:	693a      	ldr	r2, [r7, #16]
 800e566:	4b4e      	ldr	r3, [pc, #312]	; (800e6a0 <SDMMC_GetCmdResp1+0x1d4>)
 800e568:	4013      	ands	r3, r2
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d101      	bne.n	800e572 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e56e:	2300      	movs	r3, #0
 800e570:	e08d      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	2b00      	cmp	r3, #0
 800e576:	da02      	bge.n	800e57e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e57c:	e087      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e584:	2b00      	cmp	r3, #0
 800e586:	d001      	beq.n	800e58c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e588:	2340      	movs	r3, #64	; 0x40
 800e58a:	e080      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e592:	2b00      	cmp	r3, #0
 800e594:	d001      	beq.n	800e59a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e596:	2380      	movs	r3, #128	; 0x80
 800e598:	e079      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e5a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5a8:	e071      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d002      	beq.n	800e5ba <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e5b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5b8:	e069      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d002      	beq.n	800e5ca <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e5c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5c8:	e061      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d002      	beq.n	800e5da <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e5d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5d8:	e059      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d002      	beq.n	800e5ea <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e5e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e5e8:	e051      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d002      	beq.n	800e5fa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e5f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e5f8:	e049      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e604:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e608:	e041      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e610:	2b00      	cmp	r3, #0
 800e612:	d002      	beq.n	800e61a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e618:	e039      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e620:	2b00      	cmp	r3, #0
 800e622:	d002      	beq.n	800e62a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e628:	e031      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e630:	2b00      	cmp	r3, #0
 800e632:	d002      	beq.n	800e63a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e634:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e638:	e029      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e640:	2b00      	cmp	r3, #0
 800e642:	d002      	beq.n	800e64a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e644:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e648:	e021      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e650:	2b00      	cmp	r3, #0
 800e652:	d002      	beq.n	800e65a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e654:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e658:	e019      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e660:	2b00      	cmp	r3, #0
 800e662:	d002      	beq.n	800e66a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e664:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e668:	e011      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e670:	2b00      	cmp	r3, #0
 800e672:	d002      	beq.n	800e67a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e674:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e678:	e009      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	f003 0308 	and.w	r3, r3, #8
 800e680:	2b00      	cmp	r3, #0
 800e682:	d002      	beq.n	800e68a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e684:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e688:	e001      	b.n	800e68e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e68a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e68e:	4618      	mov	r0, r3
 800e690:	371c      	adds	r7, #28
 800e692:	46bd      	mov	sp, r7
 800e694:	bd90      	pop	{r4, r7, pc}
 800e696:	bf00      	nop
 800e698:	20000000 	.word	0x20000000
 800e69c:	10624dd3 	.word	0x10624dd3
 800e6a0:	fdffe008 	.word	0xfdffe008

0800e6a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e6a4:	b490      	push	{r4, r7}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e6ac:	4b1e      	ldr	r3, [pc, #120]	; (800e728 <SDMMC_GetCmdResp2+0x84>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a1e      	ldr	r2, [pc, #120]	; (800e72c <SDMMC_GetCmdResp2+0x88>)
 800e6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6b6:	0a5b      	lsrs	r3, r3, #9
 800e6b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e6c0:	4623      	mov	r3, r4
 800e6c2:	1e5c      	subs	r4, r3, #1
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d102      	bne.n	800e6ce <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e6c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6cc:	e026      	b.n	800e71c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d0f0      	beq.n	800e6c0 <SDMMC_GetCmdResp2+0x1c>
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d1eb      	bne.n	800e6c0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ec:	f003 0304 	and.w	r3, r3, #4
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d004      	beq.n	800e6fe <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2204      	movs	r2, #4
 800e6f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6fa:	2304      	movs	r3, #4
 800e6fc:	e00e      	b.n	800e71c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e702:	f003 0301 	and.w	r3, r3, #1
 800e706:	2b00      	cmp	r3, #0
 800e708:	d004      	beq.n	800e714 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2201      	movs	r2, #1
 800e70e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e710:	2301      	movs	r3, #1
 800e712:	e003      	b.n	800e71c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	22c5      	movs	r2, #197	; 0xc5
 800e718:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e71a:	2300      	movs	r3, #0
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bc90      	pop	{r4, r7}
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	20000000 	.word	0x20000000
 800e72c:	10624dd3 	.word	0x10624dd3

0800e730 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e730:	b490      	push	{r4, r7}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e738:	4b18      	ldr	r3, [pc, #96]	; (800e79c <SDMMC_GetCmdResp3+0x6c>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a18      	ldr	r2, [pc, #96]	; (800e7a0 <SDMMC_GetCmdResp3+0x70>)
 800e73e:	fba2 2303 	umull	r2, r3, r2, r3
 800e742:	0a5b      	lsrs	r3, r3, #9
 800e744:	f241 3288 	movw	r2, #5000	; 0x1388
 800e748:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e74c:	4623      	mov	r3, r4
 800e74e:	1e5c      	subs	r4, r3, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	d102      	bne.n	800e75a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e754:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e758:	e01b      	b.n	800e792 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e75e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e766:	2b00      	cmp	r3, #0
 800e768:	d0f0      	beq.n	800e74c <SDMMC_GetCmdResp3+0x1c>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1eb      	bne.n	800e74c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e778:	f003 0304 	and.w	r3, r3, #4
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d004      	beq.n	800e78a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2204      	movs	r2, #4
 800e784:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e786:	2304      	movs	r3, #4
 800e788:	e003      	b.n	800e792 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	22c5      	movs	r2, #197	; 0xc5
 800e78e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e790:	2300      	movs	r3, #0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bc90      	pop	{r4, r7}
 800e79a:	4770      	bx	lr
 800e79c:	20000000 	.word	0x20000000
 800e7a0:	10624dd3 	.word	0x10624dd3

0800e7a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e7a4:	b590      	push	{r4, r7, lr}
 800e7a6:	b087      	sub	sp, #28
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	607a      	str	r2, [r7, #4]
 800e7b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e7b2:	4b34      	ldr	r3, [pc, #208]	; (800e884 <SDMMC_GetCmdResp6+0xe0>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a34      	ldr	r2, [pc, #208]	; (800e888 <SDMMC_GetCmdResp6+0xe4>)
 800e7b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e7bc:	0a5b      	lsrs	r3, r3, #9
 800e7be:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7c2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e7c6:	4623      	mov	r3, r4
 800e7c8:	1e5c      	subs	r4, r3, #1
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d102      	bne.n	800e7d4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7d2:	e052      	b.n	800e87a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d0f0      	beq.n	800e7c6 <SDMMC_GetCmdResp6+0x22>
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1eb      	bne.n	800e7c6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7f2:	f003 0304 	and.w	r3, r3, #4
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d004      	beq.n	800e804 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2204      	movs	r2, #4
 800e7fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e800:	2304      	movs	r3, #4
 800e802:	e03a      	b.n	800e87a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e808:	f003 0301 	and.w	r3, r3, #1
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d004      	beq.n	800e81a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2201      	movs	r2, #1
 800e814:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e816:	2301      	movs	r3, #1
 800e818:	e02f      	b.n	800e87a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f7ff fbae 	bl	800df7c <SDIO_GetCommandResponse>
 800e820:	4603      	mov	r3, r0
 800e822:	461a      	mov	r2, r3
 800e824:	7afb      	ldrb	r3, [r7, #11]
 800e826:	4293      	cmp	r3, r2
 800e828:	d001      	beq.n	800e82e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e82a:	2301      	movs	r3, #1
 800e82c:	e025      	b.n	800e87a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	22c5      	movs	r2, #197	; 0xc5
 800e832:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e834:	2100      	movs	r1, #0
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f7ff fbad 	bl	800df96 <SDIO_GetResponse>
 800e83c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e844:	2b00      	cmp	r3, #0
 800e846:	d106      	bne.n	800e856 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	0c1b      	lsrs	r3, r3, #16
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e852:	2300      	movs	r3, #0
 800e854:	e011      	b.n	800e87a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e864:	e009      	b.n	800e87a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e874:	e001      	b.n	800e87a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	371c      	adds	r7, #28
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd90      	pop	{r4, r7, pc}
 800e882:	bf00      	nop
 800e884:	20000000 	.word	0x20000000
 800e888:	10624dd3 	.word	0x10624dd3

0800e88c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e88c:	b490      	push	{r4, r7}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e894:	4b21      	ldr	r3, [pc, #132]	; (800e91c <SDMMC_GetCmdResp7+0x90>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a21      	ldr	r2, [pc, #132]	; (800e920 <SDMMC_GetCmdResp7+0x94>)
 800e89a:	fba2 2303 	umull	r2, r3, r2, r3
 800e89e:	0a5b      	lsrs	r3, r3, #9
 800e8a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e8a8:	4623      	mov	r3, r4
 800e8aa:	1e5c      	subs	r4, r3, #1
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d102      	bne.n	800e8b6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e8b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8b4:	e02c      	b.n	800e910 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d0f0      	beq.n	800e8a8 <SDMMC_GetCmdResp7+0x1c>
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1eb      	bne.n	800e8a8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d4:	f003 0304 	and.w	r3, r3, #4
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d004      	beq.n	800e8e6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2204      	movs	r2, #4
 800e8e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8e2:	2304      	movs	r3, #4
 800e8e4:	e014      	b.n	800e910 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ea:	f003 0301 	and.w	r3, r3, #1
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d004      	beq.n	800e8fc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	e009      	b.n	800e910 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e904:	2b00      	cmp	r3, #0
 800e906:	d002      	beq.n	800e90e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2240      	movs	r2, #64	; 0x40
 800e90c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e90e:	2300      	movs	r3, #0
  
}
 800e910:	4618      	mov	r0, r3
 800e912:	3710      	adds	r7, #16
 800e914:	46bd      	mov	sp, r7
 800e916:	bc90      	pop	{r4, r7}
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	20000000 	.word	0x20000000
 800e920:	10624dd3 	.word	0x10624dd3

0800e924 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e928:	4904      	ldr	r1, [pc, #16]	; (800e93c <MX_FATFS_Init+0x18>)
 800e92a:	4805      	ldr	r0, [pc, #20]	; (800e940 <MX_FATFS_Init+0x1c>)
 800e92c:	f003 fb9c 	bl	8012068 <FATFS_LinkDriver>
 800e930:	4603      	mov	r3, r0
 800e932:	461a      	mov	r2, r3
 800e934:	4b03      	ldr	r3, [pc, #12]	; (800e944 <MX_FATFS_Init+0x20>)
 800e936:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e938:	bf00      	nop
 800e93a:	bd80      	pop	{r7, pc}
 800e93c:	20035f40 	.word	0x20035f40
 800e940:	08018564 	.word	0x08018564
 800e944:	20035f3c 	.word	0x20035f3c

0800e948 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e94e:	2300      	movs	r3, #0
 800e950:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e952:	f000 f896 	bl	800ea82 <BSP_SD_IsDetected>
 800e956:	4603      	mov	r3, r0
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d001      	beq.n	800e960 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e95c:	2301      	movs	r3, #1
 800e95e:	e012      	b.n	800e986 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e960:	480b      	ldr	r0, [pc, #44]	; (800e990 <BSP_SD_Init+0x48>)
 800e962:	f7fb ffa5 	bl	800a8b0 <HAL_SD_Init>
 800e966:	4603      	mov	r3, r0
 800e968:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e96a:	79fb      	ldrb	r3, [r7, #7]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d109      	bne.n	800e984 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e970:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e974:	4806      	ldr	r0, [pc, #24]	; (800e990 <BSP_SD_Init+0x48>)
 800e976:	f7fc fd4f 	bl	800b418 <HAL_SD_ConfigWideBusOperation>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d001      	beq.n	800e984 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e980:	2301      	movs	r3, #1
 800e982:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e984:	79fb      	ldrb	r3, [r7, #7]
}
 800e986:	4618      	mov	r0, r3
 800e988:	3708      	adds	r7, #8
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	20035d38 	.word	0x20035d38

0800e994 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	60b9      	str	r1, [r7, #8]
 800e99e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	68ba      	ldr	r2, [r7, #8]
 800e9a8:	68f9      	ldr	r1, [r7, #12]
 800e9aa:	4806      	ldr	r0, [pc, #24]	; (800e9c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e9ac:	f7fc f810 	bl	800a9d0 <HAL_SD_ReadBlocks_DMA>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d001      	beq.n	800e9ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3718      	adds	r7, #24
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	20035d38 	.word	0x20035d38

0800e9c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b086      	sub	sp, #24
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	68ba      	ldr	r2, [r7, #8]
 800e9dc:	68f9      	ldr	r1, [r7, #12]
 800e9de:	4806      	ldr	r0, [pc, #24]	; (800e9f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e9e0:	f7fc f8de 	bl	800aba0 <HAL_SD_WriteBlocks_DMA>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d001      	beq.n	800e9ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3718      	adds	r7, #24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	20035d38 	.word	0x20035d38

0800e9fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ea00:	4805      	ldr	r0, [pc, #20]	; (800ea18 <BSP_SD_GetCardState+0x1c>)
 800ea02:	f7fc fd85 	bl	800b510 <HAL_SD_GetCardState>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b04      	cmp	r3, #4
 800ea0a:	bf14      	ite	ne
 800ea0c:	2301      	movne	r3, #1
 800ea0e:	2300      	moveq	r3, #0
 800ea10:	b2db      	uxtb	r3, r3
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20035d38 	.word	0x20035d38

0800ea1c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ea24:	6879      	ldr	r1, [r7, #4]
 800ea26:	4803      	ldr	r0, [pc, #12]	; (800ea34 <BSP_SD_GetCardInfo+0x18>)
 800ea28:	f7fc fcca 	bl	800b3c0 <HAL_SD_GetCardInfo>
}
 800ea2c:	bf00      	nop
 800ea2e:	3708      	adds	r7, #8
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	20035d38 	.word	0x20035d38

0800ea38 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ea40:	f000 f818 	bl	800ea74 <BSP_SD_AbortCallback>
}
 800ea44:	bf00      	nop
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ea54:	f000 f9a8 	bl	800eda8 <BSP_SD_WriteCpltCallback>
}
 800ea58:	bf00      	nop
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ea68:	f000 f9aa 	bl	800edc0 <BSP_SD_ReadCpltCallback>
}
 800ea6c:	bf00      	nop
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ea74:	b480      	push	{r7}
 800ea76:	af00      	add	r7, sp, #0

}
 800ea78:	bf00      	nop
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr

0800ea82 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b082      	sub	sp, #8
 800ea86:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ea8c:	f000 f80c 	bl	800eaa8 <BSP_PlatformIsDetected>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d101      	bne.n	800ea9a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ea96:	2300      	movs	r3, #0
 800ea98:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ea9a:	79fb      	ldrb	r3, [r7, #7]
 800ea9c:	b2db      	uxtb	r3, r3
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3708      	adds	r7, #8
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
	...

0800eaa8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800eaae:	2301      	movs	r3, #1
 800eab0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800eab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800eab6:	4806      	ldr	r0, [pc, #24]	; (800ead0 <BSP_PlatformIsDetected+0x28>)
 800eab8:	f7fa f866 	bl	8008b88 <HAL_GPIO_ReadPin>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d001      	beq.n	800eac6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800eac2:	2300      	movs	r3, #0
 800eac4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800eac6:	79fb      	ldrb	r3, [r7, #7]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	40020000 	.word	0x40020000

0800ead4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800eadc:	f7f8 fdca 	bl	8007674 <HAL_GetTick>
 800eae0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800eae2:	e006      	b.n	800eaf2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eae4:	f7ff ff8a 	bl	800e9fc <BSP_SD_GetCardState>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d101      	bne.n	800eaf2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	e009      	b.n	800eb06 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800eaf2:	f7f8 fdbf 	bl	8007674 <HAL_GetTick>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d8f0      	bhi.n	800eae4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800eb02:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3710      	adds	r7, #16
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
	...

0800eb10 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	4603      	mov	r3, r0
 800eb18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800eb1a:	4b0b      	ldr	r3, [pc, #44]	; (800eb48 <SD_CheckStatus+0x38>)
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800eb20:	f7ff ff6c 	bl	800e9fc <BSP_SD_GetCardState>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d107      	bne.n	800eb3a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800eb2a:	4b07      	ldr	r3, [pc, #28]	; (800eb48 <SD_CheckStatus+0x38>)
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	f023 0301 	bic.w	r3, r3, #1
 800eb34:	b2da      	uxtb	r2, r3
 800eb36:	4b04      	ldr	r3, [pc, #16]	; (800eb48 <SD_CheckStatus+0x38>)
 800eb38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800eb3a:	4b03      	ldr	r3, [pc, #12]	; (800eb48 <SD_CheckStatus+0x38>)
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	b2db      	uxtb	r3, r3
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	20000009 	.word	0x20000009

0800eb4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800eb56:	f7ff fef7 	bl	800e948 <BSP_SD_Init>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d107      	bne.n	800eb70 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800eb60:	79fb      	ldrb	r3, [r7, #7]
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7ff ffd4 	bl	800eb10 <SD_CheckStatus>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	4b04      	ldr	r3, [pc, #16]	; (800eb80 <SD_initialize+0x34>)
 800eb6e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800eb70:	4b03      	ldr	r3, [pc, #12]	; (800eb80 <SD_initialize+0x34>)
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	b2db      	uxtb	r3, r3
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3708      	adds	r7, #8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	20000009 	.word	0x20000009

0800eb84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7ff ffbd 	bl	800eb10 <SD_CheckStatus>
 800eb96:	4603      	mov	r3, r0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60b9      	str	r1, [r7, #8]
 800eba8:	607a      	str	r2, [r7, #4]
 800ebaa:	603b      	str	r3, [r7, #0]
 800ebac:	4603      	mov	r3, r0
 800ebae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ebb4:	f247 5030 	movw	r0, #30000	; 0x7530
 800ebb8:	f7ff ff8c 	bl	800ead4 <SD_CheckStatusWithTimeout>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	da01      	bge.n	800ebc6 <SD_read+0x26>
  {
    return res;
 800ebc2:	7dfb      	ldrb	r3, [r7, #23]
 800ebc4:	e03b      	b.n	800ec3e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ebc6:	683a      	ldr	r2, [r7, #0]
 800ebc8:	6879      	ldr	r1, [r7, #4]
 800ebca:	68b8      	ldr	r0, [r7, #8]
 800ebcc:	f7ff fee2 	bl	800e994 <BSP_SD_ReadBlocks_DMA>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d132      	bne.n	800ec3c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ebd6:	4b1c      	ldr	r3, [pc, #112]	; (800ec48 <SD_read+0xa8>)
 800ebd8:	2200      	movs	r2, #0
 800ebda:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ebdc:	f7f8 fd4a 	bl	8007674 <HAL_GetTick>
 800ebe0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ebe2:	bf00      	nop
 800ebe4:	4b18      	ldr	r3, [pc, #96]	; (800ec48 <SD_read+0xa8>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d108      	bne.n	800ebfe <SD_read+0x5e>
 800ebec:	f7f8 fd42 	bl	8007674 <HAL_GetTick>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	f247 522f 	movw	r2, #29999	; 0x752f
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d9f2      	bls.n	800ebe4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800ebfe:	4b12      	ldr	r3, [pc, #72]	; (800ec48 <SD_read+0xa8>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d102      	bne.n	800ec0c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ec06:	2301      	movs	r3, #1
 800ec08:	75fb      	strb	r3, [r7, #23]
 800ec0a:	e017      	b.n	800ec3c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ec0c:	4b0e      	ldr	r3, [pc, #56]	; (800ec48 <SD_read+0xa8>)
 800ec0e:	2200      	movs	r2, #0
 800ec10:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ec12:	f7f8 fd2f 	bl	8007674 <HAL_GetTick>
 800ec16:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ec18:	e007      	b.n	800ec2a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ec1a:	f7ff feef 	bl	800e9fc <BSP_SD_GetCardState>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d102      	bne.n	800ec2a <SD_read+0x8a>
          {
            res = RES_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ec28:	e008      	b.n	800ec3c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ec2a:	f7f8 fd23 	bl	8007674 <HAL_GetTick>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	f247 522f 	movw	r2, #29999	; 0x752f
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d9ee      	bls.n	800ec1a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3718      	adds	r7, #24
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	200335d4 	.word	0x200335d4

0800ec4c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b086      	sub	sp, #24
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60b9      	str	r1, [r7, #8]
 800ec54:	607a      	str	r2, [r7, #4]
 800ec56:	603b      	str	r3, [r7, #0]
 800ec58:	4603      	mov	r3, r0
 800ec5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ec60:	4b24      	ldr	r3, [pc, #144]	; (800ecf4 <SD_write+0xa8>)
 800ec62:	2200      	movs	r2, #0
 800ec64:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ec66:	f247 5030 	movw	r0, #30000	; 0x7530
 800ec6a:	f7ff ff33 	bl	800ead4 <SD_CheckStatusWithTimeout>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	da01      	bge.n	800ec78 <SD_write+0x2c>
  {
    return res;
 800ec74:	7dfb      	ldrb	r3, [r7, #23]
 800ec76:	e038      	b.n	800ecea <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ec78:	683a      	ldr	r2, [r7, #0]
 800ec7a:	6879      	ldr	r1, [r7, #4]
 800ec7c:	68b8      	ldr	r0, [r7, #8]
 800ec7e:	f7ff fea3 	bl	800e9c8 <BSP_SD_WriteBlocks_DMA>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d12f      	bne.n	800ece8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ec88:	f7f8 fcf4 	bl	8007674 <HAL_GetTick>
 800ec8c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ec8e:	bf00      	nop
 800ec90:	4b18      	ldr	r3, [pc, #96]	; (800ecf4 <SD_write+0xa8>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d108      	bne.n	800ecaa <SD_write+0x5e>
 800ec98:	f7f8 fcec 	bl	8007674 <HAL_GetTick>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	f247 522f 	movw	r2, #29999	; 0x752f
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d9f2      	bls.n	800ec90 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800ecaa:	4b12      	ldr	r3, [pc, #72]	; (800ecf4 <SD_write+0xa8>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d102      	bne.n	800ecb8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	75fb      	strb	r3, [r7, #23]
 800ecb6:	e017      	b.n	800ece8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ecb8:	4b0e      	ldr	r3, [pc, #56]	; (800ecf4 <SD_write+0xa8>)
 800ecba:	2200      	movs	r2, #0
 800ecbc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ecbe:	f7f8 fcd9 	bl	8007674 <HAL_GetTick>
 800ecc2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ecc4:	e007      	b.n	800ecd6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ecc6:	f7ff fe99 	bl	800e9fc <BSP_SD_GetCardState>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d102      	bne.n	800ecd6 <SD_write+0x8a>
          {
            res = RES_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	75fb      	strb	r3, [r7, #23]
            break;
 800ecd4:	e008      	b.n	800ece8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ecd6:	f7f8 fccd 	bl	8007674 <HAL_GetTick>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	f247 522f 	movw	r2, #29999	; 0x752f
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d9ee      	bls.n	800ecc6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ece8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3718      	adds	r7, #24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	200335d0 	.word	0x200335d0

0800ecf8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b08c      	sub	sp, #48	; 0x30
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	4603      	mov	r3, r0
 800ed00:	603a      	str	r2, [r7, #0]
 800ed02:	71fb      	strb	r3, [r7, #7]
 800ed04:	460b      	mov	r3, r1
 800ed06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ed0e:	4b25      	ldr	r3, [pc, #148]	; (800eda4 <SD_ioctl+0xac>)
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	f003 0301 	and.w	r3, r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d001      	beq.n	800ed20 <SD_ioctl+0x28>
 800ed1c:	2303      	movs	r3, #3
 800ed1e:	e03c      	b.n	800ed9a <SD_ioctl+0xa2>

  switch (cmd)
 800ed20:	79bb      	ldrb	r3, [r7, #6]
 800ed22:	2b03      	cmp	r3, #3
 800ed24:	d834      	bhi.n	800ed90 <SD_ioctl+0x98>
 800ed26:	a201      	add	r2, pc, #4	; (adr r2, 800ed2c <SD_ioctl+0x34>)
 800ed28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed2c:	0800ed3d 	.word	0x0800ed3d
 800ed30:	0800ed45 	.word	0x0800ed45
 800ed34:	0800ed5d 	.word	0x0800ed5d
 800ed38:	0800ed77 	.word	0x0800ed77
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed42:	e028      	b.n	800ed96 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ed44:	f107 030c 	add.w	r3, r7, #12
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7ff fe67 	bl	800ea1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ed4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed5a:	e01c      	b.n	800ed96 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ed5c:	f107 030c 	add.w	r3, r7, #12
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7ff fe5b 	bl	800ea1c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ed66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed74:	e00f      	b.n	800ed96 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ed76:	f107 030c 	add.w	r3, r7, #12
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7ff fe4e 	bl	800ea1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ed80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed82:	0a5a      	lsrs	r2, r3, #9
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed8e:	e002      	b.n	800ed96 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ed90:	2304      	movs	r3, #4
 800ed92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ed96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3730      	adds	r7, #48	; 0x30
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	20000009 	.word	0x20000009

0800eda8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800eda8:	b480      	push	{r7}
 800edaa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800edac:	4b03      	ldr	r3, [pc, #12]	; (800edbc <BSP_SD_WriteCpltCallback+0x14>)
 800edae:	2201      	movs	r2, #1
 800edb0:	601a      	str	r2, [r3, #0]
}
 800edb2:	bf00      	nop
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	200335d0 	.word	0x200335d0

0800edc0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800edc0:	b480      	push	{r7}
 800edc2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800edc4:	4b03      	ldr	r3, [pc, #12]	; (800edd4 <BSP_SD_ReadCpltCallback+0x14>)
 800edc6:	2201      	movs	r2, #1
 800edc8:	601a      	str	r2, [r3, #0]
}
 800edca:	bf00      	nop
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr
 800edd4:	200335d4 	.word	0x200335d4

0800edd8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	4603      	mov	r3, r0
 800ede0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ede2:	79fb      	ldrb	r3, [r7, #7]
 800ede4:	4a08      	ldr	r2, [pc, #32]	; (800ee08 <disk_status+0x30>)
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4413      	add	r3, r2
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	79fa      	ldrb	r2, [r7, #7]
 800edf0:	4905      	ldr	r1, [pc, #20]	; (800ee08 <disk_status+0x30>)
 800edf2:	440a      	add	r2, r1
 800edf4:	7a12      	ldrb	r2, [r2, #8]
 800edf6:	4610      	mov	r0, r2
 800edf8:	4798      	blx	r3
 800edfa:	4603      	mov	r3, r0
 800edfc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800edfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	20033600 	.word	0x20033600

0800ee0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	4603      	mov	r3, r0
 800ee14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ee16:	2300      	movs	r3, #0
 800ee18:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ee1a:	79fb      	ldrb	r3, [r7, #7]
 800ee1c:	4a0d      	ldr	r2, [pc, #52]	; (800ee54 <disk_initialize+0x48>)
 800ee1e:	5cd3      	ldrb	r3, [r2, r3]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d111      	bne.n	800ee48 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ee24:	79fb      	ldrb	r3, [r7, #7]
 800ee26:	4a0b      	ldr	r2, [pc, #44]	; (800ee54 <disk_initialize+0x48>)
 800ee28:	2101      	movs	r1, #1
 800ee2a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ee2c:	79fb      	ldrb	r3, [r7, #7]
 800ee2e:	4a09      	ldr	r2, [pc, #36]	; (800ee54 <disk_initialize+0x48>)
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	79fa      	ldrb	r2, [r7, #7]
 800ee3a:	4906      	ldr	r1, [pc, #24]	; (800ee54 <disk_initialize+0x48>)
 800ee3c:	440a      	add	r2, r1
 800ee3e:	7a12      	ldrb	r2, [r2, #8]
 800ee40:	4610      	mov	r0, r2
 800ee42:	4798      	blx	r3
 800ee44:	4603      	mov	r3, r0
 800ee46:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ee48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	20033600 	.word	0x20033600

0800ee58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ee58:	b590      	push	{r4, r7, lr}
 800ee5a:	b087      	sub	sp, #28
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60b9      	str	r1, [r7, #8]
 800ee60:	607a      	str	r2, [r7, #4]
 800ee62:	603b      	str	r3, [r7, #0]
 800ee64:	4603      	mov	r3, r0
 800ee66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ee68:	7bfb      	ldrb	r3, [r7, #15]
 800ee6a:	4a0a      	ldr	r2, [pc, #40]	; (800ee94 <disk_read+0x3c>)
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4413      	add	r3, r2
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	689c      	ldr	r4, [r3, #8]
 800ee74:	7bfb      	ldrb	r3, [r7, #15]
 800ee76:	4a07      	ldr	r2, [pc, #28]	; (800ee94 <disk_read+0x3c>)
 800ee78:	4413      	add	r3, r2
 800ee7a:	7a18      	ldrb	r0, [r3, #8]
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	68b9      	ldr	r1, [r7, #8]
 800ee82:	47a0      	blx	r4
 800ee84:	4603      	mov	r3, r0
 800ee86:	75fb      	strb	r3, [r7, #23]
  return res;
 800ee88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	371c      	adds	r7, #28
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd90      	pop	{r4, r7, pc}
 800ee92:	bf00      	nop
 800ee94:	20033600 	.word	0x20033600

0800ee98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ee98:	b590      	push	{r4, r7, lr}
 800ee9a:	b087      	sub	sp, #28
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60b9      	str	r1, [r7, #8]
 800eea0:	607a      	str	r2, [r7, #4]
 800eea2:	603b      	str	r3, [r7, #0]
 800eea4:	4603      	mov	r3, r0
 800eea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800eea8:	7bfb      	ldrb	r3, [r7, #15]
 800eeaa:	4a0a      	ldr	r2, [pc, #40]	; (800eed4 <disk_write+0x3c>)
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	4413      	add	r3, r2
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	68dc      	ldr	r4, [r3, #12]
 800eeb4:	7bfb      	ldrb	r3, [r7, #15]
 800eeb6:	4a07      	ldr	r2, [pc, #28]	; (800eed4 <disk_write+0x3c>)
 800eeb8:	4413      	add	r3, r2
 800eeba:	7a18      	ldrb	r0, [r3, #8]
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	68b9      	ldr	r1, [r7, #8]
 800eec2:	47a0      	blx	r4
 800eec4:	4603      	mov	r3, r0
 800eec6:	75fb      	strb	r3, [r7, #23]
  return res;
 800eec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	371c      	adds	r7, #28
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd90      	pop	{r4, r7, pc}
 800eed2:	bf00      	nop
 800eed4:	20033600 	.word	0x20033600

0800eed8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	603a      	str	r2, [r7, #0]
 800eee2:	71fb      	strb	r3, [r7, #7]
 800eee4:	460b      	mov	r3, r1
 800eee6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800eee8:	79fb      	ldrb	r3, [r7, #7]
 800eeea:	4a09      	ldr	r2, [pc, #36]	; (800ef10 <disk_ioctl+0x38>)
 800eeec:	009b      	lsls	r3, r3, #2
 800eeee:	4413      	add	r3, r2
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	691b      	ldr	r3, [r3, #16]
 800eef4:	79fa      	ldrb	r2, [r7, #7]
 800eef6:	4906      	ldr	r1, [pc, #24]	; (800ef10 <disk_ioctl+0x38>)
 800eef8:	440a      	add	r2, r1
 800eefa:	7a10      	ldrb	r0, [r2, #8]
 800eefc:	79b9      	ldrb	r1, [r7, #6]
 800eefe:	683a      	ldr	r2, [r7, #0]
 800ef00:	4798      	blx	r3
 800ef02:	4603      	mov	r3, r0
 800ef04:	73fb      	strb	r3, [r7, #15]
  return res;
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	20033600 	.word	0x20033600

0800ef14 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ef14:	b480      	push	{r7}
 800ef16:	b085      	sub	sp, #20
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ef24:	89fb      	ldrh	r3, [r7, #14]
 800ef26:	021b      	lsls	r3, r3, #8
 800ef28:	b21a      	sxth	r2, r3
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	b21b      	sxth	r3, r3
 800ef30:	4313      	orrs	r3, r2
 800ef32:	b21b      	sxth	r3, r3
 800ef34:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ef36:	89fb      	ldrh	r3, [r7, #14]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3714      	adds	r7, #20
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	3303      	adds	r3, #3
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	021b      	lsls	r3, r3, #8
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	3202      	adds	r2, #2
 800ef5c:	7812      	ldrb	r2, [r2, #0]
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	021b      	lsls	r3, r3, #8
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	3201      	adds	r2, #1
 800ef6a:	7812      	ldrb	r2, [r2, #0]
 800ef6c:	4313      	orrs	r3, r2
 800ef6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	021b      	lsls	r3, r3, #8
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	7812      	ldrb	r2, [r2, #0]
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	60fb      	str	r3, [r7, #12]
	return rv;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3714      	adds	r7, #20
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr

0800ef8a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ef8a:	b480      	push	{r7}
 800ef8c:	b083      	sub	sp, #12
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
 800ef92:	460b      	mov	r3, r1
 800ef94:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	1c5a      	adds	r2, r3, #1
 800ef9a:	607a      	str	r2, [r7, #4]
 800ef9c:	887a      	ldrh	r2, [r7, #2]
 800ef9e:	b2d2      	uxtb	r2, r2
 800efa0:	701a      	strb	r2, [r3, #0]
 800efa2:	887b      	ldrh	r3, [r7, #2]
 800efa4:	0a1b      	lsrs	r3, r3, #8
 800efa6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	1c5a      	adds	r2, r3, #1
 800efac:	607a      	str	r2, [r7, #4]
 800efae:	887a      	ldrh	r2, [r7, #2]
 800efb0:	b2d2      	uxtb	r2, r2
 800efb2:	701a      	strb	r2, [r3, #0]
}
 800efb4:	bf00      	nop
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	1c5a      	adds	r2, r3, #1
 800efce:	607a      	str	r2, [r7, #4]
 800efd0:	683a      	ldr	r2, [r7, #0]
 800efd2:	b2d2      	uxtb	r2, r2
 800efd4:	701a      	strb	r2, [r3, #0]
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	0a1b      	lsrs	r3, r3, #8
 800efda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	1c5a      	adds	r2, r3, #1
 800efe0:	607a      	str	r2, [r7, #4]
 800efe2:	683a      	ldr	r2, [r7, #0]
 800efe4:	b2d2      	uxtb	r2, r2
 800efe6:	701a      	strb	r2, [r3, #0]
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	0a1b      	lsrs	r3, r3, #8
 800efec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	1c5a      	adds	r2, r3, #1
 800eff2:	607a      	str	r2, [r7, #4]
 800eff4:	683a      	ldr	r2, [r7, #0]
 800eff6:	b2d2      	uxtb	r2, r2
 800eff8:	701a      	strb	r2, [r3, #0]
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	0a1b      	lsrs	r3, r3, #8
 800effe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	1c5a      	adds	r2, r3, #1
 800f004:	607a      	str	r2, [r7, #4]
 800f006:	683a      	ldr	r2, [r7, #0]
 800f008:	b2d2      	uxtb	r2, r2
 800f00a:	701a      	strb	r2, [r3, #0]
}
 800f00c:	bf00      	nop
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr

0800f018 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f018:	b480      	push	{r7}
 800f01a:	b087      	sub	sp, #28
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00d      	beq.n	800f04e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f032:	693a      	ldr	r2, [r7, #16]
 800f034:	1c53      	adds	r3, r2, #1
 800f036:	613b      	str	r3, [r7, #16]
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	1c59      	adds	r1, r3, #1
 800f03c:	6179      	str	r1, [r7, #20]
 800f03e:	7812      	ldrb	r2, [r2, #0]
 800f040:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	3b01      	subs	r3, #1
 800f046:	607b      	str	r3, [r7, #4]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d1f1      	bne.n	800f032 <mem_cpy+0x1a>
	}
}
 800f04e:	bf00      	nop
 800f050:	371c      	adds	r7, #28
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f05a:	b480      	push	{r7}
 800f05c:	b087      	sub	sp, #28
 800f05e:	af00      	add	r7, sp, #0
 800f060:	60f8      	str	r0, [r7, #12]
 800f062:	60b9      	str	r1, [r7, #8]
 800f064:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	1c5a      	adds	r2, r3, #1
 800f06e:	617a      	str	r2, [r7, #20]
 800f070:	68ba      	ldr	r2, [r7, #8]
 800f072:	b2d2      	uxtb	r2, r2
 800f074:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	3b01      	subs	r3, #1
 800f07a:	607b      	str	r3, [r7, #4]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1f3      	bne.n	800f06a <mem_set+0x10>
}
 800f082:	bf00      	nop
 800f084:	371c      	adds	r7, #28
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f08e:	b480      	push	{r7}
 800f090:	b089      	sub	sp, #36	; 0x24
 800f092:	af00      	add	r7, sp, #0
 800f094:	60f8      	str	r0, [r7, #12]
 800f096:	60b9      	str	r1, [r7, #8]
 800f098:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	61fb      	str	r3, [r7, #28]
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	1c5a      	adds	r2, r3, #1
 800f0aa:	61fa      	str	r2, [r7, #28]
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	69bb      	ldr	r3, [r7, #24]
 800f0b2:	1c5a      	adds	r2, r3, #1
 800f0b4:	61ba      	str	r2, [r7, #24]
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	1acb      	subs	r3, r1, r3
 800f0ba:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	607b      	str	r3, [r7, #4]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d002      	beq.n	800f0ce <mem_cmp+0x40>
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d0eb      	beq.n	800f0a6 <mem_cmp+0x18>

	return r;
 800f0ce:	697b      	ldr	r3, [r7, #20]
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3724      	adds	r7, #36	; 0x24
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f0e6:	e002      	b.n	800f0ee <chk_chr+0x12>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	607b      	str	r3, [r7, #4]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d005      	beq.n	800f102 <chk_chr+0x26>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d1f2      	bne.n	800f0e8 <chk_chr+0xc>
	return *str;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	781b      	ldrb	r3, [r3, #0]
}
 800f106:	4618      	mov	r0, r3
 800f108:	370c      	adds	r7, #12
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr
	...

0800f114 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f114:	b480      	push	{r7}
 800f116:	b085      	sub	sp, #20
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f11e:	2300      	movs	r3, #0
 800f120:	60bb      	str	r3, [r7, #8]
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	60fb      	str	r3, [r7, #12]
 800f126:	e029      	b.n	800f17c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f128:	4a27      	ldr	r2, [pc, #156]	; (800f1c8 <chk_lock+0xb4>)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	011b      	lsls	r3, r3, #4
 800f12e:	4413      	add	r3, r2
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d01d      	beq.n	800f172 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f136:	4a24      	ldr	r2, [pc, #144]	; (800f1c8 <chk_lock+0xb4>)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	011b      	lsls	r3, r3, #4
 800f13c:	4413      	add	r3, r2
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	429a      	cmp	r2, r3
 800f146:	d116      	bne.n	800f176 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f148:	4a1f      	ldr	r2, [pc, #124]	; (800f1c8 <chk_lock+0xb4>)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	011b      	lsls	r3, r3, #4
 800f14e:	4413      	add	r3, r2
 800f150:	3304      	adds	r3, #4
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f158:	429a      	cmp	r2, r3
 800f15a:	d10c      	bne.n	800f176 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f15c:	4a1a      	ldr	r2, [pc, #104]	; (800f1c8 <chk_lock+0xb4>)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	011b      	lsls	r3, r3, #4
 800f162:	4413      	add	r3, r2
 800f164:	3308      	adds	r3, #8
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d102      	bne.n	800f176 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f170:	e007      	b.n	800f182 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f172:	2301      	movs	r3, #1
 800f174:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	3301      	adds	r3, #1
 800f17a:	60fb      	str	r3, [r7, #12]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d9d2      	bls.n	800f128 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2b02      	cmp	r3, #2
 800f186:	d109      	bne.n	800f19c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d102      	bne.n	800f194 <chk_lock+0x80>
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	2b02      	cmp	r3, #2
 800f192:	d101      	bne.n	800f198 <chk_lock+0x84>
 800f194:	2300      	movs	r3, #0
 800f196:	e010      	b.n	800f1ba <chk_lock+0xa6>
 800f198:	2312      	movs	r3, #18
 800f19a:	e00e      	b.n	800f1ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d108      	bne.n	800f1b4 <chk_lock+0xa0>
 800f1a2:	4a09      	ldr	r2, [pc, #36]	; (800f1c8 <chk_lock+0xb4>)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	011b      	lsls	r3, r3, #4
 800f1a8:	4413      	add	r3, r2
 800f1aa:	330c      	adds	r3, #12
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1b2:	d101      	bne.n	800f1b8 <chk_lock+0xa4>
 800f1b4:	2310      	movs	r3, #16
 800f1b6:	e000      	b.n	800f1ba <chk_lock+0xa6>
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3714      	adds	r7, #20
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr
 800f1c6:	bf00      	nop
 800f1c8:	200335e0 	.word	0x200335e0

0800f1cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	607b      	str	r3, [r7, #4]
 800f1d6:	e002      	b.n	800f1de <enq_lock+0x12>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	607b      	str	r3, [r7, #4]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	d806      	bhi.n	800f1f2 <enq_lock+0x26>
 800f1e4:	4a09      	ldr	r2, [pc, #36]	; (800f20c <enq_lock+0x40>)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	011b      	lsls	r3, r3, #4
 800f1ea:	4413      	add	r3, r2
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1f2      	bne.n	800f1d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2b02      	cmp	r3, #2
 800f1f6:	bf14      	ite	ne
 800f1f8:	2301      	movne	r3, #1
 800f1fa:	2300      	moveq	r3, #0
 800f1fc:	b2db      	uxtb	r3, r3
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	370c      	adds	r7, #12
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
 800f20a:	bf00      	nop
 800f20c:	200335e0 	.word	0x200335e0

0800f210 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f210:	b480      	push	{r7}
 800f212:	b085      	sub	sp, #20
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f21a:	2300      	movs	r3, #0
 800f21c:	60fb      	str	r3, [r7, #12]
 800f21e:	e01f      	b.n	800f260 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f220:	4a41      	ldr	r2, [pc, #260]	; (800f328 <inc_lock+0x118>)
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	011b      	lsls	r3, r3, #4
 800f226:	4413      	add	r3, r2
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d113      	bne.n	800f25a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f232:	4a3d      	ldr	r2, [pc, #244]	; (800f328 <inc_lock+0x118>)
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	011b      	lsls	r3, r3, #4
 800f238:	4413      	add	r3, r2
 800f23a:	3304      	adds	r3, #4
 800f23c:	681a      	ldr	r2, [r3, #0]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f242:	429a      	cmp	r2, r3
 800f244:	d109      	bne.n	800f25a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f246:	4a38      	ldr	r2, [pc, #224]	; (800f328 <inc_lock+0x118>)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	011b      	lsls	r3, r3, #4
 800f24c:	4413      	add	r3, r2
 800f24e:	3308      	adds	r3, #8
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f256:	429a      	cmp	r2, r3
 800f258:	d006      	beq.n	800f268 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	3301      	adds	r3, #1
 800f25e:	60fb      	str	r3, [r7, #12]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2b01      	cmp	r3, #1
 800f264:	d9dc      	bls.n	800f220 <inc_lock+0x10>
 800f266:	e000      	b.n	800f26a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f268:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2b02      	cmp	r3, #2
 800f26e:	d132      	bne.n	800f2d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f270:	2300      	movs	r3, #0
 800f272:	60fb      	str	r3, [r7, #12]
 800f274:	e002      	b.n	800f27c <inc_lock+0x6c>
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	3301      	adds	r3, #1
 800f27a:	60fb      	str	r3, [r7, #12]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	2b01      	cmp	r3, #1
 800f280:	d806      	bhi.n	800f290 <inc_lock+0x80>
 800f282:	4a29      	ldr	r2, [pc, #164]	; (800f328 <inc_lock+0x118>)
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	011b      	lsls	r3, r3, #4
 800f288:	4413      	add	r3, r2
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d1f2      	bne.n	800f276 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2b02      	cmp	r3, #2
 800f294:	d101      	bne.n	800f29a <inc_lock+0x8a>
 800f296:	2300      	movs	r3, #0
 800f298:	e040      	b.n	800f31c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	4922      	ldr	r1, [pc, #136]	; (800f328 <inc_lock+0x118>)
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	011b      	lsls	r3, r3, #4
 800f2a4:	440b      	add	r3, r1
 800f2a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	689a      	ldr	r2, [r3, #8]
 800f2ac:	491e      	ldr	r1, [pc, #120]	; (800f328 <inc_lock+0x118>)
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	011b      	lsls	r3, r3, #4
 800f2b2:	440b      	add	r3, r1
 800f2b4:	3304      	adds	r3, #4
 800f2b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	695a      	ldr	r2, [r3, #20]
 800f2bc:	491a      	ldr	r1, [pc, #104]	; (800f328 <inc_lock+0x118>)
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	011b      	lsls	r3, r3, #4
 800f2c2:	440b      	add	r3, r1
 800f2c4:	3308      	adds	r3, #8
 800f2c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f2c8:	4a17      	ldr	r2, [pc, #92]	; (800f328 <inc_lock+0x118>)
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	011b      	lsls	r3, r3, #4
 800f2ce:	4413      	add	r3, r2
 800f2d0:	330c      	adds	r3, #12
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d009      	beq.n	800f2f0 <inc_lock+0xe0>
 800f2dc:	4a12      	ldr	r2, [pc, #72]	; (800f328 <inc_lock+0x118>)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	011b      	lsls	r3, r3, #4
 800f2e2:	4413      	add	r3, r2
 800f2e4:	330c      	adds	r3, #12
 800f2e6:	881b      	ldrh	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d001      	beq.n	800f2f0 <inc_lock+0xe0>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	e015      	b.n	800f31c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d108      	bne.n	800f308 <inc_lock+0xf8>
 800f2f6:	4a0c      	ldr	r2, [pc, #48]	; (800f328 <inc_lock+0x118>)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	011b      	lsls	r3, r3, #4
 800f2fc:	4413      	add	r3, r2
 800f2fe:	330c      	adds	r3, #12
 800f300:	881b      	ldrh	r3, [r3, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	b29a      	uxth	r2, r3
 800f306:	e001      	b.n	800f30c <inc_lock+0xfc>
 800f308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f30c:	4906      	ldr	r1, [pc, #24]	; (800f328 <inc_lock+0x118>)
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	011b      	lsls	r3, r3, #4
 800f312:	440b      	add	r3, r1
 800f314:	330c      	adds	r3, #12
 800f316:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	3301      	adds	r3, #1
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3714      	adds	r7, #20
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	200335e0 	.word	0x200335e0

0800f32c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b085      	sub	sp, #20
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	3b01      	subs	r3, #1
 800f338:	607b      	str	r3, [r7, #4]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d825      	bhi.n	800f38c <dec_lock+0x60>
		n = Files[i].ctr;
 800f340:	4a17      	ldr	r2, [pc, #92]	; (800f3a0 <dec_lock+0x74>)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	011b      	lsls	r3, r3, #4
 800f346:	4413      	add	r3, r2
 800f348:	330c      	adds	r3, #12
 800f34a:	881b      	ldrh	r3, [r3, #0]
 800f34c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f34e:	89fb      	ldrh	r3, [r7, #14]
 800f350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f354:	d101      	bne.n	800f35a <dec_lock+0x2e>
 800f356:	2300      	movs	r3, #0
 800f358:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f35a:	89fb      	ldrh	r3, [r7, #14]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d002      	beq.n	800f366 <dec_lock+0x3a>
 800f360:	89fb      	ldrh	r3, [r7, #14]
 800f362:	3b01      	subs	r3, #1
 800f364:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f366:	4a0e      	ldr	r2, [pc, #56]	; (800f3a0 <dec_lock+0x74>)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	011b      	lsls	r3, r3, #4
 800f36c:	4413      	add	r3, r2
 800f36e:	330c      	adds	r3, #12
 800f370:	89fa      	ldrh	r2, [r7, #14]
 800f372:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f374:	89fb      	ldrh	r3, [r7, #14]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d105      	bne.n	800f386 <dec_lock+0x5a>
 800f37a:	4a09      	ldr	r2, [pc, #36]	; (800f3a0 <dec_lock+0x74>)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	011b      	lsls	r3, r3, #4
 800f380:	4413      	add	r3, r2
 800f382:	2200      	movs	r2, #0
 800f384:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f386:	2300      	movs	r3, #0
 800f388:	737b      	strb	r3, [r7, #13]
 800f38a:	e001      	b.n	800f390 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f38c:	2302      	movs	r3, #2
 800f38e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f390:	7b7b      	ldrb	r3, [r7, #13]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3714      	adds	r7, #20
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop
 800f3a0:	200335e0 	.word	0x200335e0

0800f3a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	60fb      	str	r3, [r7, #12]
 800f3b0:	e010      	b.n	800f3d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f3b2:	4a0d      	ldr	r2, [pc, #52]	; (800f3e8 <clear_lock+0x44>)
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	011b      	lsls	r3, r3, #4
 800f3b8:	4413      	add	r3, r2
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	687a      	ldr	r2, [r7, #4]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d105      	bne.n	800f3ce <clear_lock+0x2a>
 800f3c2:	4a09      	ldr	r2, [pc, #36]	; (800f3e8 <clear_lock+0x44>)
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	011b      	lsls	r3, r3, #4
 800f3c8:	4413      	add	r3, r2
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d9eb      	bls.n	800f3b2 <clear_lock+0xe>
	}
}
 800f3da:	bf00      	nop
 800f3dc:	3714      	adds	r7, #20
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr
 800f3e6:	bf00      	nop
 800f3e8:	200335e0 	.word	0x200335e0

0800f3ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b086      	sub	sp, #24
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	78db      	ldrb	r3, [r3, #3]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d034      	beq.n	800f46a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f404:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	7858      	ldrb	r0, [r3, #1]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f410:	2301      	movs	r3, #1
 800f412:	697a      	ldr	r2, [r7, #20]
 800f414:	f7ff fd40 	bl	800ee98 <disk_write>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d002      	beq.n	800f424 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f41e:	2301      	movs	r3, #1
 800f420:	73fb      	strb	r3, [r7, #15]
 800f422:	e022      	b.n	800f46a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f42e:	697a      	ldr	r2, [r7, #20]
 800f430:	1ad2      	subs	r2, r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6a1b      	ldr	r3, [r3, #32]
 800f436:	429a      	cmp	r2, r3
 800f438:	d217      	bcs.n	800f46a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	789b      	ldrb	r3, [r3, #2]
 800f43e:	613b      	str	r3, [r7, #16]
 800f440:	e010      	b.n	800f464 <sync_window+0x78>
					wsect += fs->fsize;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6a1b      	ldr	r3, [r3, #32]
 800f446:	697a      	ldr	r2, [r7, #20]
 800f448:	4413      	add	r3, r2
 800f44a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	7858      	ldrb	r0, [r3, #1]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f456:	2301      	movs	r3, #1
 800f458:	697a      	ldr	r2, [r7, #20]
 800f45a:	f7ff fd1d 	bl	800ee98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	3b01      	subs	r3, #1
 800f462:	613b      	str	r3, [r7, #16]
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d8eb      	bhi.n	800f442 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3718      	adds	r7, #24
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f47e:	2300      	movs	r3, #0
 800f480:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f486:	683a      	ldr	r2, [r7, #0]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d01b      	beq.n	800f4c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7ff ffad 	bl	800f3ec <sync_window>
 800f492:	4603      	mov	r3, r0
 800f494:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f496:	7bfb      	ldrb	r3, [r7, #15]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d113      	bne.n	800f4c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	7858      	ldrb	r0, [r3, #1]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	683a      	ldr	r2, [r7, #0]
 800f4aa:	f7ff fcd5 	bl	800ee58 <disk_read>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d004      	beq.n	800f4be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	683a      	ldr	r2, [r7, #0]
 800f4c2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800f4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
	...

0800f4d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7ff ff87 	bl	800f3ec <sync_window>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f4e2:	7bfb      	ldrb	r3, [r7, #15]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d159      	bne.n	800f59c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	2b03      	cmp	r3, #3
 800f4ee:	d149      	bne.n	800f584 <sync_fs+0xb4>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	791b      	ldrb	r3, [r3, #4]
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d145      	bne.n	800f584 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	899b      	ldrh	r3, [r3, #12]
 800f502:	461a      	mov	r2, r3
 800f504:	2100      	movs	r1, #0
 800f506:	f7ff fda8 	bl	800f05a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	3338      	adds	r3, #56	; 0x38
 800f50e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f512:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f516:	4618      	mov	r0, r3
 800f518:	f7ff fd37 	bl	800ef8a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	3338      	adds	r3, #56	; 0x38
 800f520:	4921      	ldr	r1, [pc, #132]	; (800f5a8 <sync_fs+0xd8>)
 800f522:	4618      	mov	r0, r3
 800f524:	f7ff fd4c 	bl	800efc0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3338      	adds	r3, #56	; 0x38
 800f52c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f530:	491e      	ldr	r1, [pc, #120]	; (800f5ac <sync_fs+0xdc>)
 800f532:	4618      	mov	r0, r3
 800f534:	f7ff fd44 	bl	800efc0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	3338      	adds	r3, #56	; 0x38
 800f53c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	695b      	ldr	r3, [r3, #20]
 800f544:	4619      	mov	r1, r3
 800f546:	4610      	mov	r0, r2
 800f548:	f7ff fd3a 	bl	800efc0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3338      	adds	r3, #56	; 0x38
 800f550:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	691b      	ldr	r3, [r3, #16]
 800f558:	4619      	mov	r1, r3
 800f55a:	4610      	mov	r0, r2
 800f55c:	f7ff fd30 	bl	800efc0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f564:	1c5a      	adds	r2, r3, #1
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	7858      	ldrb	r0, [r3, #1]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f578:	2301      	movs	r3, #1
 800f57a:	f7ff fc8d 	bl	800ee98 <disk_write>
			fs->fsi_flag = 0;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2200      	movs	r2, #0
 800f582:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	785b      	ldrb	r3, [r3, #1]
 800f588:	2200      	movs	r2, #0
 800f58a:	2100      	movs	r1, #0
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7ff fca3 	bl	800eed8 <disk_ioctl>
 800f592:	4603      	mov	r3, r0
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <sync_fs+0xcc>
 800f598:	2301      	movs	r3, #1
 800f59a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3710      	adds	r7, #16
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	41615252 	.word	0x41615252
 800f5ac:	61417272 	.word	0x61417272

0800f5b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	3b02      	subs	r3, #2
 800f5be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	69db      	ldr	r3, [r3, #28]
 800f5c4:	3b02      	subs	r3, #2
 800f5c6:	683a      	ldr	r2, [r7, #0]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d301      	bcc.n	800f5d0 <clust2sect+0x20>
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	e008      	b.n	800f5e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	895b      	ldrh	r3, [r3, #10]
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	fb03 f202 	mul.w	r2, r3, r2
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5e0:	4413      	add	r3, r2
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	370c      	adds	r7, #12
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr

0800f5ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b086      	sub	sp, #24
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
 800f5f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	2b01      	cmp	r3, #1
 800f602:	d904      	bls.n	800f60e <get_fat+0x20>
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	69db      	ldr	r3, [r3, #28]
 800f608:	683a      	ldr	r2, [r7, #0]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d302      	bcc.n	800f614 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f60e:	2301      	movs	r3, #1
 800f610:	617b      	str	r3, [r7, #20]
 800f612:	e0b7      	b.n	800f784 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f614:	f04f 33ff 	mov.w	r3, #4294967295
 800f618:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	2b02      	cmp	r3, #2
 800f620:	d05a      	beq.n	800f6d8 <get_fat+0xea>
 800f622:	2b03      	cmp	r3, #3
 800f624:	d07d      	beq.n	800f722 <get_fat+0x134>
 800f626:	2b01      	cmp	r3, #1
 800f628:	f040 80a2 	bne.w	800f770 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	60fb      	str	r3, [r7, #12]
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	085b      	lsrs	r3, r3, #1
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	4413      	add	r3, r2
 800f638:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	899b      	ldrh	r3, [r3, #12]
 800f642:	4619      	mov	r1, r3
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	fbb3 f3f1 	udiv	r3, r3, r1
 800f64a:	4413      	add	r3, r2
 800f64c:	4619      	mov	r1, r3
 800f64e:	6938      	ldr	r0, [r7, #16]
 800f650:	f7ff ff10 	bl	800f474 <move_window>
 800f654:	4603      	mov	r3, r0
 800f656:	2b00      	cmp	r3, #0
 800f658:	f040 808d 	bne.w	800f776 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	1c5a      	adds	r2, r3, #1
 800f660:	60fa      	str	r2, [r7, #12]
 800f662:	693a      	ldr	r2, [r7, #16]
 800f664:	8992      	ldrh	r2, [r2, #12]
 800f666:	fbb3 f1f2 	udiv	r1, r3, r2
 800f66a:	fb02 f201 	mul.w	r2, r2, r1
 800f66e:	1a9b      	subs	r3, r3, r2
 800f670:	693a      	ldr	r2, [r7, #16]
 800f672:	4413      	add	r3, r2
 800f674:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f678:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	899b      	ldrh	r3, [r3, #12]
 800f682:	4619      	mov	r1, r3
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	fbb3 f3f1 	udiv	r3, r3, r1
 800f68a:	4413      	add	r3, r2
 800f68c:	4619      	mov	r1, r3
 800f68e:	6938      	ldr	r0, [r7, #16]
 800f690:	f7ff fef0 	bl	800f474 <move_window>
 800f694:	4603      	mov	r3, r0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d16f      	bne.n	800f77a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	899b      	ldrh	r3, [r3, #12]
 800f69e:	461a      	mov	r2, r3
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6a6:	fb02 f201 	mul.w	r2, r2, r1
 800f6aa:	1a9b      	subs	r3, r3, r2
 800f6ac:	693a      	ldr	r2, [r7, #16]
 800f6ae:	4413      	add	r3, r2
 800f6b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f6b4:	021b      	lsls	r3, r3, #8
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	f003 0301 	and.w	r3, r3, #1
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d002      	beq.n	800f6ce <get_fat+0xe0>
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	091b      	lsrs	r3, r3, #4
 800f6cc:	e002      	b.n	800f6d4 <get_fat+0xe6>
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f6d4:	617b      	str	r3, [r7, #20]
			break;
 800f6d6:	e055      	b.n	800f784 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	899b      	ldrh	r3, [r3, #12]
 800f6e0:	085b      	lsrs	r3, r3, #1
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6ec:	4413      	add	r3, r2
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	6938      	ldr	r0, [r7, #16]
 800f6f2:	f7ff febf 	bl	800f474 <move_window>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d140      	bne.n	800f77e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	005b      	lsls	r3, r3, #1
 800f706:	693a      	ldr	r2, [r7, #16]
 800f708:	8992      	ldrh	r2, [r2, #12]
 800f70a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f70e:	fb02 f200 	mul.w	r2, r2, r0
 800f712:	1a9b      	subs	r3, r3, r2
 800f714:	440b      	add	r3, r1
 800f716:	4618      	mov	r0, r3
 800f718:	f7ff fbfc 	bl	800ef14 <ld_word>
 800f71c:	4603      	mov	r3, r0
 800f71e:	617b      	str	r3, [r7, #20]
			break;
 800f720:	e030      	b.n	800f784 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	899b      	ldrh	r3, [r3, #12]
 800f72a:	089b      	lsrs	r3, r3, #2
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	4619      	mov	r1, r3
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	fbb3 f3f1 	udiv	r3, r3, r1
 800f736:	4413      	add	r3, r2
 800f738:	4619      	mov	r1, r3
 800f73a:	6938      	ldr	r0, [r7, #16]
 800f73c:	f7ff fe9a 	bl	800f474 <move_window>
 800f740:	4603      	mov	r3, r0
 800f742:	2b00      	cmp	r3, #0
 800f744:	d11d      	bne.n	800f782 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	693a      	ldr	r2, [r7, #16]
 800f752:	8992      	ldrh	r2, [r2, #12]
 800f754:	fbb3 f0f2 	udiv	r0, r3, r2
 800f758:	fb02 f200 	mul.w	r2, r2, r0
 800f75c:	1a9b      	subs	r3, r3, r2
 800f75e:	440b      	add	r3, r1
 800f760:	4618      	mov	r0, r3
 800f762:	f7ff fbef 	bl	800ef44 <ld_dword>
 800f766:	4603      	mov	r3, r0
 800f768:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f76c:	617b      	str	r3, [r7, #20]
			break;
 800f76e:	e009      	b.n	800f784 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f770:	2301      	movs	r3, #1
 800f772:	617b      	str	r3, [r7, #20]
 800f774:	e006      	b.n	800f784 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f776:	bf00      	nop
 800f778:	e004      	b.n	800f784 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f77a:	bf00      	nop
 800f77c:	e002      	b.n	800f784 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f77e:	bf00      	nop
 800f780:	e000      	b.n	800f784 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f782:	bf00      	nop
		}
	}

	return val;
 800f784:	697b      	ldr	r3, [r7, #20]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3718      	adds	r7, #24
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}

0800f78e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f78e:	b590      	push	{r4, r7, lr}
 800f790:	b089      	sub	sp, #36	; 0x24
 800f792:	af00      	add	r7, sp, #0
 800f794:	60f8      	str	r0, [r7, #12]
 800f796:	60b9      	str	r1, [r7, #8]
 800f798:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f79a:	2302      	movs	r3, #2
 800f79c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f79e:	68bb      	ldr	r3, [r7, #8]
 800f7a0:	2b01      	cmp	r3, #1
 800f7a2:	f240 8106 	bls.w	800f9b2 <put_fat+0x224>
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	69db      	ldr	r3, [r3, #28]
 800f7aa:	68ba      	ldr	r2, [r7, #8]
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	f080 8100 	bcs.w	800f9b2 <put_fat+0x224>
		switch (fs->fs_type) {
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	2b02      	cmp	r3, #2
 800f7b8:	f000 8088 	beq.w	800f8cc <put_fat+0x13e>
 800f7bc:	2b03      	cmp	r3, #3
 800f7be:	f000 80b0 	beq.w	800f922 <put_fat+0x194>
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	f040 80f5 	bne.w	800f9b2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	61bb      	str	r3, [r7, #24]
 800f7cc:	69bb      	ldr	r3, [r7, #24]
 800f7ce:	085b      	lsrs	r3, r3, #1
 800f7d0:	69ba      	ldr	r2, [r7, #24]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	899b      	ldrh	r3, [r3, #12]
 800f7de:	4619      	mov	r1, r3
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f7e6:	4413      	add	r3, r2
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	68f8      	ldr	r0, [r7, #12]
 800f7ec:	f7ff fe42 	bl	800f474 <move_window>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f7f4:	7ffb      	ldrb	r3, [r7, #31]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	f040 80d4 	bne.w	800f9a4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f802:	69bb      	ldr	r3, [r7, #24]
 800f804:	1c5a      	adds	r2, r3, #1
 800f806:	61ba      	str	r2, [r7, #24]
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	8992      	ldrh	r2, [r2, #12]
 800f80c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f810:	fb02 f200 	mul.w	r2, r2, r0
 800f814:	1a9b      	subs	r3, r3, r2
 800f816:	440b      	add	r3, r1
 800f818:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	f003 0301 	and.w	r3, r3, #1
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00d      	beq.n	800f840 <put_fat+0xb2>
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	b25b      	sxtb	r3, r3
 800f82a:	f003 030f 	and.w	r3, r3, #15
 800f82e:	b25a      	sxtb	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	b2db      	uxtb	r3, r3
 800f834:	011b      	lsls	r3, r3, #4
 800f836:	b25b      	sxtb	r3, r3
 800f838:	4313      	orrs	r3, r2
 800f83a:	b25b      	sxtb	r3, r3
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	e001      	b.n	800f844 <put_fat+0xb6>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	b2db      	uxtb	r3, r3
 800f844:	697a      	ldr	r2, [r7, #20]
 800f846:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	2201      	movs	r2, #1
 800f84c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	899b      	ldrh	r3, [r3, #12]
 800f856:	4619      	mov	r1, r3
 800f858:	69bb      	ldr	r3, [r7, #24]
 800f85a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f85e:	4413      	add	r3, r2
 800f860:	4619      	mov	r1, r3
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	f7ff fe06 	bl	800f474 <move_window>
 800f868:	4603      	mov	r3, r0
 800f86a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f86c:	7ffb      	ldrb	r3, [r7, #31]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	f040 809a 	bne.w	800f9a8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	899b      	ldrh	r3, [r3, #12]
 800f87e:	461a      	mov	r2, r3
 800f880:	69bb      	ldr	r3, [r7, #24]
 800f882:	fbb3 f0f2 	udiv	r0, r3, r2
 800f886:	fb02 f200 	mul.w	r2, r2, r0
 800f88a:	1a9b      	subs	r3, r3, r2
 800f88c:	440b      	add	r3, r1
 800f88e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	f003 0301 	and.w	r3, r3, #1
 800f896:	2b00      	cmp	r3, #0
 800f898:	d003      	beq.n	800f8a2 <put_fat+0x114>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	091b      	lsrs	r3, r3, #4
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	e00e      	b.n	800f8c0 <put_fat+0x132>
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	b25b      	sxtb	r3, r3
 800f8a8:	f023 030f 	bic.w	r3, r3, #15
 800f8ac:	b25a      	sxtb	r2, r3
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	0a1b      	lsrs	r3, r3, #8
 800f8b2:	b25b      	sxtb	r3, r3
 800f8b4:	f003 030f 	and.w	r3, r3, #15
 800f8b8:	b25b      	sxtb	r3, r3
 800f8ba:	4313      	orrs	r3, r2
 800f8bc:	b25b      	sxtb	r3, r3
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	697a      	ldr	r2, [r7, #20]
 800f8c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	70da      	strb	r2, [r3, #3]
			break;
 800f8ca:	e072      	b.n	800f9b2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	899b      	ldrh	r3, [r3, #12]
 800f8d4:	085b      	lsrs	r3, r3, #1
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	4619      	mov	r1, r3
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8e0:	4413      	add	r3, r2
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	68f8      	ldr	r0, [r7, #12]
 800f8e6:	f7ff fdc5 	bl	800f474 <move_window>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f8ee:	7ffb      	ldrb	r3, [r7, #31]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d15b      	bne.n	800f9ac <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	005b      	lsls	r3, r3, #1
 800f8fe:	68fa      	ldr	r2, [r7, #12]
 800f900:	8992      	ldrh	r2, [r2, #12]
 800f902:	fbb3 f0f2 	udiv	r0, r3, r2
 800f906:	fb02 f200 	mul.w	r2, r2, r0
 800f90a:	1a9b      	subs	r3, r3, r2
 800f90c:	440b      	add	r3, r1
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	b292      	uxth	r2, r2
 800f912:	4611      	mov	r1, r2
 800f914:	4618      	mov	r0, r3
 800f916:	f7ff fb38 	bl	800ef8a <st_word>
			fs->wflag = 1;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	2201      	movs	r2, #1
 800f91e:	70da      	strb	r2, [r3, #3]
			break;
 800f920:	e047      	b.n	800f9b2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	899b      	ldrh	r3, [r3, #12]
 800f92a:	089b      	lsrs	r3, r3, #2
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	4619      	mov	r1, r3
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	fbb3 f3f1 	udiv	r3, r3, r1
 800f936:	4413      	add	r3, r2
 800f938:	4619      	mov	r1, r3
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f7ff fd9a 	bl	800f474 <move_window>
 800f940:	4603      	mov	r3, r0
 800f942:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f944:	7ffb      	ldrb	r3, [r7, #31]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d132      	bne.n	800f9b0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	009b      	lsls	r3, r3, #2
 800f95a:	68fa      	ldr	r2, [r7, #12]
 800f95c:	8992      	ldrh	r2, [r2, #12]
 800f95e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f962:	fb02 f200 	mul.w	r2, r2, r0
 800f966:	1a9b      	subs	r3, r3, r2
 800f968:	440b      	add	r3, r1
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7ff faea 	bl	800ef44 <ld_dword>
 800f970:	4603      	mov	r3, r0
 800f972:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f976:	4323      	orrs	r3, r4
 800f978:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	8992      	ldrh	r2, [r2, #12]
 800f988:	fbb3 f0f2 	udiv	r0, r3, r2
 800f98c:	fb02 f200 	mul.w	r2, r2, r0
 800f990:	1a9b      	subs	r3, r3, r2
 800f992:	440b      	add	r3, r1
 800f994:	6879      	ldr	r1, [r7, #4]
 800f996:	4618      	mov	r0, r3
 800f998:	f7ff fb12 	bl	800efc0 <st_dword>
			fs->wflag = 1;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	70da      	strb	r2, [r3, #3]
			break;
 800f9a2:	e006      	b.n	800f9b2 <put_fat+0x224>
			if (res != FR_OK) break;
 800f9a4:	bf00      	nop
 800f9a6:	e004      	b.n	800f9b2 <put_fat+0x224>
			if (res != FR_OK) break;
 800f9a8:	bf00      	nop
 800f9aa:	e002      	b.n	800f9b2 <put_fat+0x224>
			if (res != FR_OK) break;
 800f9ac:	bf00      	nop
 800f9ae:	e000      	b.n	800f9b2 <put_fat+0x224>
			if (res != FR_OK) break;
 800f9b0:	bf00      	nop
		}
	}
	return res;
 800f9b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3724      	adds	r7, #36	; 0x24
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd90      	pop	{r4, r7, pc}

0800f9bc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b088      	sub	sp, #32
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d904      	bls.n	800f9e2 <remove_chain+0x26>
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	69db      	ldr	r3, [r3, #28]
 800f9dc:	68ba      	ldr	r2, [r7, #8]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d301      	bcc.n	800f9e6 <remove_chain+0x2a>
 800f9e2:	2302      	movs	r3, #2
 800f9e4:	e04b      	b.n	800fa7e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d00c      	beq.n	800fa06 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f9f0:	6879      	ldr	r1, [r7, #4]
 800f9f2:	69b8      	ldr	r0, [r7, #24]
 800f9f4:	f7ff fecb 	bl	800f78e <put_fat>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f9fc:	7ffb      	ldrb	r3, [r7, #31]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d001      	beq.n	800fa06 <remove_chain+0x4a>
 800fa02:	7ffb      	ldrb	r3, [r7, #31]
 800fa04:	e03b      	b.n	800fa7e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fa06:	68b9      	ldr	r1, [r7, #8]
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f7ff fdf0 	bl	800f5ee <get_fat>
 800fa0e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d031      	beq.n	800fa7a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d101      	bne.n	800fa20 <remove_chain+0x64>
 800fa1c:	2302      	movs	r3, #2
 800fa1e:	e02e      	b.n	800fa7e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa26:	d101      	bne.n	800fa2c <remove_chain+0x70>
 800fa28:	2301      	movs	r3, #1
 800fa2a:	e028      	b.n	800fa7e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	68b9      	ldr	r1, [r7, #8]
 800fa30:	69b8      	ldr	r0, [r7, #24]
 800fa32:	f7ff feac 	bl	800f78e <put_fat>
 800fa36:	4603      	mov	r3, r0
 800fa38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fa3a:	7ffb      	ldrb	r3, [r7, #31]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d001      	beq.n	800fa44 <remove_chain+0x88>
 800fa40:	7ffb      	ldrb	r3, [r7, #31]
 800fa42:	e01c      	b.n	800fa7e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	695a      	ldr	r2, [r3, #20]
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	69db      	ldr	r3, [r3, #28]
 800fa4c:	3b02      	subs	r3, #2
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d20b      	bcs.n	800fa6a <remove_chain+0xae>
			fs->free_clst++;
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	695b      	ldr	r3, [r3, #20]
 800fa56:	1c5a      	adds	r2, r3, #1
 800fa58:	69bb      	ldr	r3, [r7, #24]
 800fa5a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fa5c:	69bb      	ldr	r3, [r7, #24]
 800fa5e:	791b      	ldrb	r3, [r3, #4]
 800fa60:	f043 0301 	orr.w	r3, r3, #1
 800fa64:	b2da      	uxtb	r2, r3
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	69db      	ldr	r3, [r3, #28]
 800fa72:	68ba      	ldr	r2, [r7, #8]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d3c6      	bcc.n	800fa06 <remove_chain+0x4a>
 800fa78:	e000      	b.n	800fa7c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fa7a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fa7c:	2300      	movs	r3, #0
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3720      	adds	r7, #32
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}

0800fa86 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fa86:	b580      	push	{r7, lr}
 800fa88:	b088      	sub	sp, #32
 800fa8a:	af00      	add	r7, sp, #0
 800fa8c:	6078      	str	r0, [r7, #4]
 800fa8e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10d      	bne.n	800fab8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	691b      	ldr	r3, [r3, #16]
 800faa0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d004      	beq.n	800fab2 <create_chain+0x2c>
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	69db      	ldr	r3, [r3, #28]
 800faac:	69ba      	ldr	r2, [r7, #24]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d31b      	bcc.n	800faea <create_chain+0x64>
 800fab2:	2301      	movs	r3, #1
 800fab4:	61bb      	str	r3, [r7, #24]
 800fab6:	e018      	b.n	800faea <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fab8:	6839      	ldr	r1, [r7, #0]
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f7ff fd97 	bl	800f5ee <get_fat>
 800fac0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d801      	bhi.n	800facc <create_chain+0x46>
 800fac8:	2301      	movs	r3, #1
 800faca:	e070      	b.n	800fbae <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad2:	d101      	bne.n	800fad8 <create_chain+0x52>
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	e06a      	b.n	800fbae <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	69db      	ldr	r3, [r3, #28]
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d201      	bcs.n	800fae6 <create_chain+0x60>
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	e063      	b.n	800fbae <create_chain+0x128>
		scl = clst;
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	3301      	adds	r3, #1
 800faf2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	69db      	ldr	r3, [r3, #28]
 800faf8:	69fa      	ldr	r2, [r7, #28]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d307      	bcc.n	800fb0e <create_chain+0x88>
				ncl = 2;
 800fafe:	2302      	movs	r3, #2
 800fb00:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fb02:	69fa      	ldr	r2, [r7, #28]
 800fb04:	69bb      	ldr	r3, [r7, #24]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d901      	bls.n	800fb0e <create_chain+0x88>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	e04f      	b.n	800fbae <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fb0e:	69f9      	ldr	r1, [r7, #28]
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7ff fd6c 	bl	800f5ee <get_fat>
 800fb16:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d00e      	beq.n	800fb3c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d003      	beq.n	800fb2c <create_chain+0xa6>
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb2a:	d101      	bne.n	800fb30 <create_chain+0xaa>
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	e03e      	b.n	800fbae <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fb30:	69fa      	ldr	r2, [r7, #28]
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d1da      	bne.n	800faee <create_chain+0x68>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	e038      	b.n	800fbae <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fb3c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fb3e:	f04f 32ff 	mov.w	r2, #4294967295
 800fb42:	69f9      	ldr	r1, [r7, #28]
 800fb44:	6938      	ldr	r0, [r7, #16]
 800fb46:	f7ff fe22 	bl	800f78e <put_fat>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fb4e:	7dfb      	ldrb	r3, [r7, #23]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d109      	bne.n	800fb68 <create_chain+0xe2>
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d006      	beq.n	800fb68 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fb5a:	69fa      	ldr	r2, [r7, #28]
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	6938      	ldr	r0, [r7, #16]
 800fb60:	f7ff fe15 	bl	800f78e <put_fat>
 800fb64:	4603      	mov	r3, r0
 800fb66:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fb68:	7dfb      	ldrb	r3, [r7, #23]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d116      	bne.n	800fb9c <create_chain+0x116>
		fs->last_clst = ncl;
 800fb6e:	693b      	ldr	r3, [r7, #16]
 800fb70:	69fa      	ldr	r2, [r7, #28]
 800fb72:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	695a      	ldr	r2, [r3, #20]
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	69db      	ldr	r3, [r3, #28]
 800fb7c:	3b02      	subs	r3, #2
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d804      	bhi.n	800fb8c <create_chain+0x106>
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	695b      	ldr	r3, [r3, #20]
 800fb86:	1e5a      	subs	r2, r3, #1
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	791b      	ldrb	r3, [r3, #4]
 800fb90:	f043 0301 	orr.w	r3, r3, #1
 800fb94:	b2da      	uxtb	r2, r3
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	711a      	strb	r2, [r3, #4]
 800fb9a:	e007      	b.n	800fbac <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fb9c:	7dfb      	ldrb	r3, [r7, #23]
 800fb9e:	2b01      	cmp	r3, #1
 800fba0:	d102      	bne.n	800fba8 <create_chain+0x122>
 800fba2:	f04f 33ff 	mov.w	r3, #4294967295
 800fba6:	e000      	b.n	800fbaa <create_chain+0x124>
 800fba8:	2301      	movs	r3, #1
 800fbaa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fbac:	69fb      	ldr	r3, [r7, #28]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3720      	adds	r7, #32
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fbb6:	b480      	push	{r7}
 800fbb8:	b087      	sub	sp, #28
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
 800fbbe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbca:	3304      	adds	r3, #4
 800fbcc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	899b      	ldrh	r3, [r3, #12]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	8952      	ldrh	r2, [r2, #10]
 800fbde:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbe2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	1d1a      	adds	r2, r3, #4
 800fbe8:	613a      	str	r2, [r7, #16]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d101      	bne.n	800fbf8 <clmt_clust+0x42>
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	e010      	b.n	800fc1a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800fbf8:	697a      	ldr	r2, [r7, #20]
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d307      	bcc.n	800fc10 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fc00:	697a      	ldr	r2, [r7, #20]
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	1ad3      	subs	r3, r2, r3
 800fc06:	617b      	str	r3, [r7, #20]
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fc0e:	e7e9      	b.n	800fbe4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fc10:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	681a      	ldr	r2, [r3, #0]
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	4413      	add	r3, r2
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	371c      	adds	r7, #28
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr

0800fc26 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fc26:	b580      	push	{r7, lr}
 800fc28:	b086      	sub	sp, #24
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
 800fc2e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fc3c:	d204      	bcs.n	800fc48 <dir_sdi+0x22>
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	f003 031f 	and.w	r3, r3, #31
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <dir_sdi+0x26>
		return FR_INT_ERR;
 800fc48:	2302      	movs	r3, #2
 800fc4a:	e071      	b.n	800fd30 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	683a      	ldr	r2, [r7, #0]
 800fc50:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	689b      	ldr	r3, [r3, #8]
 800fc56:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d106      	bne.n	800fc6c <dir_sdi+0x46>
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	2b02      	cmp	r3, #2
 800fc64:	d902      	bls.n	800fc6c <dir_sdi+0x46>
		clst = fs->dirbase;
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc6a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d10c      	bne.n	800fc8c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	095b      	lsrs	r3, r3, #5
 800fc76:	693a      	ldr	r2, [r7, #16]
 800fc78:	8912      	ldrh	r2, [r2, #8]
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d301      	bcc.n	800fc82 <dir_sdi+0x5c>
 800fc7e:	2302      	movs	r3, #2
 800fc80:	e056      	b.n	800fd30 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	61da      	str	r2, [r3, #28]
 800fc8a:	e02d      	b.n	800fce8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	895b      	ldrh	r3, [r3, #10]
 800fc90:	461a      	mov	r2, r3
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	899b      	ldrh	r3, [r3, #12]
 800fc96:	fb03 f302 	mul.w	r3, r3, r2
 800fc9a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fc9c:	e019      	b.n	800fcd2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6979      	ldr	r1, [r7, #20]
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7ff fca3 	bl	800f5ee <get_fat>
 800fca8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcb0:	d101      	bne.n	800fcb6 <dir_sdi+0x90>
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	e03c      	b.n	800fd30 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d904      	bls.n	800fcc6 <dir_sdi+0xa0>
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	69db      	ldr	r3, [r3, #28]
 800fcc0:	697a      	ldr	r2, [r7, #20]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d301      	bcc.n	800fcca <dir_sdi+0xa4>
 800fcc6:	2302      	movs	r3, #2
 800fcc8:	e032      	b.n	800fd30 <dir_sdi+0x10a>
			ofs -= csz;
 800fcca:	683a      	ldr	r2, [r7, #0]
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fcd2:	683a      	ldr	r2, [r7, #0]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d2e1      	bcs.n	800fc9e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800fcda:	6979      	ldr	r1, [r7, #20]
 800fcdc:	6938      	ldr	r0, [r7, #16]
 800fcde:	f7ff fc67 	bl	800f5b0 <clust2sect>
 800fce2:	4602      	mov	r2, r0
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	697a      	ldr	r2, [r7, #20]
 800fcec:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	69db      	ldr	r3, [r3, #28]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d101      	bne.n	800fcfa <dir_sdi+0xd4>
 800fcf6:	2302      	movs	r3, #2
 800fcf8:	e01a      	b.n	800fd30 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	69da      	ldr	r2, [r3, #28]
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	899b      	ldrh	r3, [r3, #12]
 800fd02:	4619      	mov	r1, r3
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd0a:	441a      	add	r2, r3
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	899b      	ldrh	r3, [r3, #12]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd22:	fb02 f200 	mul.w	r2, r2, r0
 800fd26:	1a9b      	subs	r3, r3, r2
 800fd28:	18ca      	adds	r2, r1, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3718      	adds	r7, #24
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	695b      	ldr	r3, [r3, #20]
 800fd4c:	3320      	adds	r3, #32
 800fd4e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	69db      	ldr	r3, [r3, #28]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d003      	beq.n	800fd60 <dir_next+0x28>
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fd5e:	d301      	bcc.n	800fd64 <dir_next+0x2c>
 800fd60:	2304      	movs	r3, #4
 800fd62:	e0bb      	b.n	800fedc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	899b      	ldrh	r3, [r3, #12]
 800fd68:	461a      	mov	r2, r3
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd70:	fb02 f201 	mul.w	r2, r2, r1
 800fd74:	1a9b      	subs	r3, r3, r2
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	f040 809d 	bne.w	800feb6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	69db      	ldr	r3, [r3, #28]
 800fd80:	1c5a      	adds	r2, r3, #1
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	699b      	ldr	r3, [r3, #24]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d10b      	bne.n	800fda6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	095b      	lsrs	r3, r3, #5
 800fd92:	68fa      	ldr	r2, [r7, #12]
 800fd94:	8912      	ldrh	r2, [r2, #8]
 800fd96:	4293      	cmp	r3, r2
 800fd98:	f0c0 808d 	bcc.w	800feb6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	61da      	str	r2, [r3, #28]
 800fda2:	2304      	movs	r3, #4
 800fda4:	e09a      	b.n	800fedc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	899b      	ldrh	r3, [r3, #12]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdb2:	68fa      	ldr	r2, [r7, #12]
 800fdb4:	8952      	ldrh	r2, [r2, #10]
 800fdb6:	3a01      	subs	r2, #1
 800fdb8:	4013      	ands	r3, r2
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d17b      	bne.n	800feb6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	699b      	ldr	r3, [r3, #24]
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	f7ff fc11 	bl	800f5ee <get_fat>
 800fdcc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	2b01      	cmp	r3, #1
 800fdd2:	d801      	bhi.n	800fdd8 <dir_next+0xa0>
 800fdd4:	2302      	movs	r3, #2
 800fdd6:	e081      	b.n	800fedc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdde:	d101      	bne.n	800fde4 <dir_next+0xac>
 800fde0:	2301      	movs	r3, #1
 800fde2:	e07b      	b.n	800fedc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	69db      	ldr	r3, [r3, #28]
 800fde8:	697a      	ldr	r2, [r7, #20]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d359      	bcc.n	800fea2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d104      	bne.n	800fdfe <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	61da      	str	r2, [r3, #28]
 800fdfa:	2304      	movs	r3, #4
 800fdfc:	e06e      	b.n	800fedc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fdfe:	687a      	ldr	r2, [r7, #4]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	699b      	ldr	r3, [r3, #24]
 800fe04:	4619      	mov	r1, r3
 800fe06:	4610      	mov	r0, r2
 800fe08:	f7ff fe3d 	bl	800fa86 <create_chain>
 800fe0c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d101      	bne.n	800fe18 <dir_next+0xe0>
 800fe14:	2307      	movs	r3, #7
 800fe16:	e061      	b.n	800fedc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	2b01      	cmp	r3, #1
 800fe1c:	d101      	bne.n	800fe22 <dir_next+0xea>
 800fe1e:	2302      	movs	r3, #2
 800fe20:	e05c      	b.n	800fedc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe28:	d101      	bne.n	800fe2e <dir_next+0xf6>
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e056      	b.n	800fedc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fe2e:	68f8      	ldr	r0, [r7, #12]
 800fe30:	f7ff fadc 	bl	800f3ec <sync_window>
 800fe34:	4603      	mov	r3, r0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d001      	beq.n	800fe3e <dir_next+0x106>
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	e04e      	b.n	800fedc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	899b      	ldrh	r3, [r3, #12]
 800fe48:	461a      	mov	r2, r3
 800fe4a:	2100      	movs	r1, #0
 800fe4c:	f7ff f905 	bl	800f05a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fe50:	2300      	movs	r3, #0
 800fe52:	613b      	str	r3, [r7, #16]
 800fe54:	6979      	ldr	r1, [r7, #20]
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f7ff fbaa 	bl	800f5b0 <clust2sect>
 800fe5c:	4602      	mov	r2, r0
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	635a      	str	r2, [r3, #52]	; 0x34
 800fe62:	e012      	b.n	800fe8a <dir_next+0x152>
						fs->wflag = 1;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	2201      	movs	r2, #1
 800fe68:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f7ff fabe 	bl	800f3ec <sync_window>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d001      	beq.n	800fe7a <dir_next+0x142>
 800fe76:	2301      	movs	r3, #1
 800fe78:	e030      	b.n	800fedc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	613b      	str	r3, [r7, #16]
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe84:	1c5a      	adds	r2, r3, #1
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	635a      	str	r2, [r3, #52]	; 0x34
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	895b      	ldrh	r3, [r3, #10]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d3e6      	bcc.n	800fe64 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	1ad2      	subs	r2, r2, r3
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fea8:	6979      	ldr	r1, [r7, #20]
 800feaa:	68f8      	ldr	r0, [r7, #12]
 800feac:	f7ff fb80 	bl	800f5b0 <clust2sect>
 800feb0:	4602      	mov	r2, r0
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	899b      	ldrh	r3, [r3, #12]
 800fec6:	461a      	mov	r2, r3
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	fbb3 f0f2 	udiv	r0, r3, r2
 800fece:	fb02 f200 	mul.w	r2, r2, r0
 800fed2:	1a9b      	subs	r3, r3, r2
 800fed4:	18ca      	adds	r2, r1, r3
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800feda:	2300      	movs	r3, #0
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3718      	adds	r7, #24
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b086      	sub	sp, #24
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fef4:	2100      	movs	r1, #0
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f7ff fe95 	bl	800fc26 <dir_sdi>
 800fefc:	4603      	mov	r3, r0
 800fefe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff00:	7dfb      	ldrb	r3, [r7, #23]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d12b      	bne.n	800ff5e <dir_alloc+0x7a>
		n = 0;
 800ff06:	2300      	movs	r3, #0
 800ff08:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	69db      	ldr	r3, [r3, #28]
 800ff0e:	4619      	mov	r1, r3
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f7ff faaf 	bl	800f474 <move_window>
 800ff16:	4603      	mov	r3, r0
 800ff18:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ff1a:	7dfb      	ldrb	r3, [r7, #23]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d11d      	bne.n	800ff5c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6a1b      	ldr	r3, [r3, #32]
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	2be5      	cmp	r3, #229	; 0xe5
 800ff28:	d004      	beq.n	800ff34 <dir_alloc+0x50>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6a1b      	ldr	r3, [r3, #32]
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d107      	bne.n	800ff44 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	3301      	adds	r3, #1
 800ff38:	613b      	str	r3, [r7, #16]
 800ff3a:	693a      	ldr	r2, [r7, #16]
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d102      	bne.n	800ff48 <dir_alloc+0x64>
 800ff42:	e00c      	b.n	800ff5e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ff44:	2300      	movs	r3, #0
 800ff46:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ff48:	2101      	movs	r1, #1
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f7ff fef4 	bl	800fd38 <dir_next>
 800ff50:	4603      	mov	r3, r0
 800ff52:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ff54:	7dfb      	ldrb	r3, [r7, #23]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d0d7      	beq.n	800ff0a <dir_alloc+0x26>
 800ff5a:	e000      	b.n	800ff5e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ff5c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ff5e:	7dfb      	ldrb	r3, [r7, #23]
 800ff60:	2b04      	cmp	r3, #4
 800ff62:	d101      	bne.n	800ff68 <dir_alloc+0x84>
 800ff64:	2307      	movs	r3, #7
 800ff66:	75fb      	strb	r3, [r7, #23]
	return res;
 800ff68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3718      	adds	r7, #24
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}

0800ff72 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ff72:	b580      	push	{r7, lr}
 800ff74:	b084      	sub	sp, #16
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
 800ff7a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	331a      	adds	r3, #26
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7fe ffc7 	bl	800ef14 <ld_word>
 800ff86:	4603      	mov	r3, r0
 800ff88:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	2b03      	cmp	r3, #3
 800ff90:	d109      	bne.n	800ffa6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	3314      	adds	r3, #20
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fe ffbc 	bl	800ef14 <ld_word>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	041b      	lsls	r3, r3, #16
 800ffa0:	68fa      	ldr	r2, [r7, #12]
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3710      	adds	r7, #16
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	60f8      	str	r0, [r7, #12]
 800ffb8:	60b9      	str	r1, [r7, #8]
 800ffba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	331a      	adds	r3, #26
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	b292      	uxth	r2, r2
 800ffc4:	4611      	mov	r1, r2
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7fe ffdf 	bl	800ef8a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	2b03      	cmp	r3, #3
 800ffd2:	d109      	bne.n	800ffe8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	f103 0214 	add.w	r2, r3, #20
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	0c1b      	lsrs	r3, r3, #16
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	4610      	mov	r0, r2
 800ffe4:	f7fe ffd1 	bl	800ef8a <st_word>
	}
}
 800ffe8:	bf00      	nop
 800ffea:	3710      	adds	r7, #16
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b086      	sub	sp, #24
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fffa:	2304      	movs	r3, #4
 800fffc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8010004:	e03c      	b.n	8010080 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	69db      	ldr	r3, [r3, #28]
 801000a:	4619      	mov	r1, r3
 801000c:	6938      	ldr	r0, [r7, #16]
 801000e:	f7ff fa31 	bl	800f474 <move_window>
 8010012:	4603      	mov	r3, r0
 8010014:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010016:	7dfb      	ldrb	r3, [r7, #23]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d136      	bne.n	801008a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6a1b      	ldr	r3, [r3, #32]
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8010024:	7bfb      	ldrb	r3, [r7, #15]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d102      	bne.n	8010030 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801002a:	2304      	movs	r3, #4
 801002c:	75fb      	strb	r3, [r7, #23]
 801002e:	e031      	b.n	8010094 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6a1b      	ldr	r3, [r3, #32]
 8010034:	330b      	adds	r3, #11
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801003c:	73bb      	strb	r3, [r7, #14]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	7bba      	ldrb	r2, [r7, #14]
 8010042:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8010044:	7bfb      	ldrb	r3, [r7, #15]
 8010046:	2be5      	cmp	r3, #229	; 0xe5
 8010048:	d011      	beq.n	801006e <dir_read+0x7e>
 801004a:	7bfb      	ldrb	r3, [r7, #15]
 801004c:	2b2e      	cmp	r3, #46	; 0x2e
 801004e:	d00e      	beq.n	801006e <dir_read+0x7e>
 8010050:	7bbb      	ldrb	r3, [r7, #14]
 8010052:	2b0f      	cmp	r3, #15
 8010054:	d00b      	beq.n	801006e <dir_read+0x7e>
 8010056:	7bbb      	ldrb	r3, [r7, #14]
 8010058:	f023 0320 	bic.w	r3, r3, #32
 801005c:	2b08      	cmp	r3, #8
 801005e:	bf0c      	ite	eq
 8010060:	2301      	moveq	r3, #1
 8010062:	2300      	movne	r3, #0
 8010064:	b2db      	uxtb	r3, r3
 8010066:	461a      	mov	r2, r3
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	4293      	cmp	r3, r2
 801006c:	d00f      	beq.n	801008e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801006e:	2100      	movs	r1, #0
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f7ff fe61 	bl	800fd38 <dir_next>
 8010076:	4603      	mov	r3, r0
 8010078:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801007a:	7dfb      	ldrb	r3, [r7, #23]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d108      	bne.n	8010092 <dir_read+0xa2>
	while (dp->sect) {
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	69db      	ldr	r3, [r3, #28]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d1be      	bne.n	8010006 <dir_read+0x16>
 8010088:	e004      	b.n	8010094 <dir_read+0xa4>
		if (res != FR_OK) break;
 801008a:	bf00      	nop
 801008c:	e002      	b.n	8010094 <dir_read+0xa4>
				break;
 801008e:	bf00      	nop
 8010090:	e000      	b.n	8010094 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010092:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010094:	7dfb      	ldrb	r3, [r7, #23]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d002      	beq.n	80100a0 <dir_read+0xb0>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2200      	movs	r2, #0
 801009e:	61da      	str	r2, [r3, #28]
	return res;
 80100a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3718      	adds	r7, #24
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b086      	sub	sp, #24
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80100b8:	2100      	movs	r1, #0
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f7ff fdb3 	bl	800fc26 <dir_sdi>
 80100c0:	4603      	mov	r3, r0
 80100c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80100c4:	7dfb      	ldrb	r3, [r7, #23]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d001      	beq.n	80100ce <dir_find+0x24>
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
 80100cc:	e03e      	b.n	801014c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	69db      	ldr	r3, [r3, #28]
 80100d2:	4619      	mov	r1, r3
 80100d4:	6938      	ldr	r0, [r7, #16]
 80100d6:	f7ff f9cd 	bl	800f474 <move_window>
 80100da:	4603      	mov	r3, r0
 80100dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80100de:	7dfb      	ldrb	r3, [r7, #23]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d12f      	bne.n	8010144 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6a1b      	ldr	r3, [r3, #32]
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80100ec:	7bfb      	ldrb	r3, [r7, #15]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d102      	bne.n	80100f8 <dir_find+0x4e>
 80100f2:	2304      	movs	r3, #4
 80100f4:	75fb      	strb	r3, [r7, #23]
 80100f6:	e028      	b.n	801014a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6a1b      	ldr	r3, [r3, #32]
 80100fc:	330b      	adds	r3, #11
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010104:	b2da      	uxtb	r2, r3
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a1b      	ldr	r3, [r3, #32]
 801010e:	330b      	adds	r3, #11
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	f003 0308 	and.w	r3, r3, #8
 8010116:	2b00      	cmp	r3, #0
 8010118:	d10a      	bne.n	8010130 <dir_find+0x86>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6a18      	ldr	r0, [r3, #32]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	3324      	adds	r3, #36	; 0x24
 8010122:	220b      	movs	r2, #11
 8010124:	4619      	mov	r1, r3
 8010126:	f7fe ffb2 	bl	800f08e <mem_cmp>
 801012a:	4603      	mov	r3, r0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00b      	beq.n	8010148 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010130:	2100      	movs	r1, #0
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f7ff fe00 	bl	800fd38 <dir_next>
 8010138:	4603      	mov	r3, r0
 801013a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801013c:	7dfb      	ldrb	r3, [r7, #23]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d0c5      	beq.n	80100ce <dir_find+0x24>
 8010142:	e002      	b.n	801014a <dir_find+0xa0>
		if (res != FR_OK) break;
 8010144:	bf00      	nop
 8010146:	e000      	b.n	801014a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010148:	bf00      	nop

	return res;
 801014a:	7dfb      	ldrb	r3, [r7, #23]
}
 801014c:	4618      	mov	r0, r3
 801014e:	3718      	adds	r7, #24
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010162:	2101      	movs	r1, #1
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7ff febd 	bl	800fee4 <dir_alloc>
 801016a:	4603      	mov	r3, r0
 801016c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801016e:	7bfb      	ldrb	r3, [r7, #15]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d11c      	bne.n	80101ae <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	69db      	ldr	r3, [r3, #28]
 8010178:	4619      	mov	r1, r3
 801017a:	68b8      	ldr	r0, [r7, #8]
 801017c:	f7ff f97a 	bl	800f474 <move_window>
 8010180:	4603      	mov	r3, r0
 8010182:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010184:	7bfb      	ldrb	r3, [r7, #15]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d111      	bne.n	80101ae <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6a1b      	ldr	r3, [r3, #32]
 801018e:	2220      	movs	r2, #32
 8010190:	2100      	movs	r1, #0
 8010192:	4618      	mov	r0, r3
 8010194:	f7fe ff61 	bl	800f05a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6a18      	ldr	r0, [r3, #32]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	3324      	adds	r3, #36	; 0x24
 80101a0:	220b      	movs	r2, #11
 80101a2:	4619      	mov	r1, r3
 80101a4:	f7fe ff38 	bl	800f018 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	2201      	movs	r2, #1
 80101ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80101ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	3710      	adds	r7, #16
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b084      	sub	sp, #16
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	69db      	ldr	r3, [r3, #28]
 80101ca:	4619      	mov	r1, r3
 80101cc:	68f8      	ldr	r0, [r7, #12]
 80101ce:	f7ff f951 	bl	800f474 <move_window>
 80101d2:	4603      	mov	r3, r0
 80101d4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80101d6:	7afb      	ldrb	r3, [r7, #11]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d106      	bne.n	80101ea <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6a1b      	ldr	r3, [r3, #32]
 80101e0:	22e5      	movs	r2, #229	; 0xe5
 80101e2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2201      	movs	r2, #1
 80101e8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80101ea:	7afb      	ldrb	r3, [r7, #11]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b088      	sub	sp, #32
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
 80101fc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	60fb      	str	r3, [r7, #12]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	3324      	adds	r3, #36	; 0x24
 8010208:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801020a:	220b      	movs	r2, #11
 801020c:	2120      	movs	r1, #32
 801020e:	68b8      	ldr	r0, [r7, #8]
 8010210:	f7fe ff23 	bl	800f05a <mem_set>
	si = i = 0; ni = 8;
 8010214:	2300      	movs	r3, #0
 8010216:	613b      	str	r3, [r7, #16]
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	617b      	str	r3, [r7, #20]
 801021c:	2308      	movs	r3, #8
 801021e:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8010220:	68fa      	ldr	r2, [r7, #12]
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	4413      	add	r3, r2
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	2b2e      	cmp	r3, #46	; 0x2e
 801022a:	d12f      	bne.n	801028c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	1c5a      	adds	r2, r3, #1
 8010230:	617a      	str	r2, [r7, #20]
 8010232:	68fa      	ldr	r2, [r7, #12]
 8010234:	4413      	add	r3, r2
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 801023a:	7ffb      	ldrb	r3, [r7, #31]
 801023c:	2b2e      	cmp	r3, #46	; 0x2e
 801023e:	d10a      	bne.n	8010256 <create_name+0x62>
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	2b02      	cmp	r3, #2
 8010244:	d807      	bhi.n	8010256 <create_name+0x62>
			sfn[i++] = c;
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	1c5a      	adds	r2, r3, #1
 801024a:	613a      	str	r2, [r7, #16]
 801024c:	68ba      	ldr	r2, [r7, #8]
 801024e:	4413      	add	r3, r2
 8010250:	7ffa      	ldrb	r2, [r7, #31]
 8010252:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8010254:	e7ea      	b.n	801022c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8010256:	7ffb      	ldrb	r3, [r7, #31]
 8010258:	2b2f      	cmp	r3, #47	; 0x2f
 801025a:	d007      	beq.n	801026c <create_name+0x78>
 801025c:	7ffb      	ldrb	r3, [r7, #31]
 801025e:	2b5c      	cmp	r3, #92	; 0x5c
 8010260:	d004      	beq.n	801026c <create_name+0x78>
 8010262:	7ffb      	ldrb	r3, [r7, #31]
 8010264:	2b20      	cmp	r3, #32
 8010266:	d901      	bls.n	801026c <create_name+0x78>
 8010268:	2306      	movs	r3, #6
 801026a:	e084      	b.n	8010376 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	441a      	add	r2, r3
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8010276:	7ffb      	ldrb	r3, [r7, #31]
 8010278:	2b20      	cmp	r3, #32
 801027a:	d801      	bhi.n	8010280 <create_name+0x8c>
 801027c:	2224      	movs	r2, #36	; 0x24
 801027e:	e000      	b.n	8010282 <create_name+0x8e>
 8010280:	2220      	movs	r2, #32
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	330b      	adds	r3, #11
 8010286:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010288:	2300      	movs	r3, #0
 801028a:	e074      	b.n	8010376 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	1c5a      	adds	r2, r3, #1
 8010290:	617a      	str	r2, [r7, #20]
 8010292:	68fa      	ldr	r2, [r7, #12]
 8010294:	4413      	add	r3, r2
 8010296:	781b      	ldrb	r3, [r3, #0]
 8010298:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801029a:	7ffb      	ldrb	r3, [r7, #31]
 801029c:	2b20      	cmp	r3, #32
 801029e:	d94e      	bls.n	801033e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80102a0:	7ffb      	ldrb	r3, [r7, #31]
 80102a2:	2b2f      	cmp	r3, #47	; 0x2f
 80102a4:	d006      	beq.n	80102b4 <create_name+0xc0>
 80102a6:	7ffb      	ldrb	r3, [r7, #31]
 80102a8:	2b5c      	cmp	r3, #92	; 0x5c
 80102aa:	d110      	bne.n	80102ce <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80102ac:	e002      	b.n	80102b4 <create_name+0xc0>
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	3301      	adds	r3, #1
 80102b2:	617b      	str	r3, [r7, #20]
 80102b4:	68fa      	ldr	r2, [r7, #12]
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	4413      	add	r3, r2
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	2b2f      	cmp	r3, #47	; 0x2f
 80102be:	d0f6      	beq.n	80102ae <create_name+0xba>
 80102c0:	68fa      	ldr	r2, [r7, #12]
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	4413      	add	r3, r2
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	2b5c      	cmp	r3, #92	; 0x5c
 80102ca:	d0f0      	beq.n	80102ae <create_name+0xba>
			break;
 80102cc:	e038      	b.n	8010340 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80102ce:	7ffb      	ldrb	r3, [r7, #31]
 80102d0:	2b2e      	cmp	r3, #46	; 0x2e
 80102d2:	d003      	beq.n	80102dc <create_name+0xe8>
 80102d4:	693a      	ldr	r2, [r7, #16]
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d30c      	bcc.n	80102f6 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	2b0b      	cmp	r3, #11
 80102e0:	d002      	beq.n	80102e8 <create_name+0xf4>
 80102e2:	7ffb      	ldrb	r3, [r7, #31]
 80102e4:	2b2e      	cmp	r3, #46	; 0x2e
 80102e6:	d001      	beq.n	80102ec <create_name+0xf8>
 80102e8:	2306      	movs	r3, #6
 80102ea:	e044      	b.n	8010376 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80102ec:	2308      	movs	r3, #8
 80102ee:	613b      	str	r3, [r7, #16]
 80102f0:	230b      	movs	r3, #11
 80102f2:	61bb      	str	r3, [r7, #24]
			continue;
 80102f4:	e022      	b.n	801033c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80102f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	da04      	bge.n	8010308 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80102fe:	7ffb      	ldrb	r3, [r7, #31]
 8010300:	3b80      	subs	r3, #128	; 0x80
 8010302:	4a1f      	ldr	r2, [pc, #124]	; (8010380 <create_name+0x18c>)
 8010304:	5cd3      	ldrb	r3, [r2, r3]
 8010306:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010308:	7ffb      	ldrb	r3, [r7, #31]
 801030a:	4619      	mov	r1, r3
 801030c:	481d      	ldr	r0, [pc, #116]	; (8010384 <create_name+0x190>)
 801030e:	f7fe fee5 	bl	800f0dc <chk_chr>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	d001      	beq.n	801031c <create_name+0x128>
 8010318:	2306      	movs	r3, #6
 801031a:	e02c      	b.n	8010376 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801031c:	7ffb      	ldrb	r3, [r7, #31]
 801031e:	2b60      	cmp	r3, #96	; 0x60
 8010320:	d905      	bls.n	801032e <create_name+0x13a>
 8010322:	7ffb      	ldrb	r3, [r7, #31]
 8010324:	2b7a      	cmp	r3, #122	; 0x7a
 8010326:	d802      	bhi.n	801032e <create_name+0x13a>
 8010328:	7ffb      	ldrb	r3, [r7, #31]
 801032a:	3b20      	subs	r3, #32
 801032c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	1c5a      	adds	r2, r3, #1
 8010332:	613a      	str	r2, [r7, #16]
 8010334:	68ba      	ldr	r2, [r7, #8]
 8010336:	4413      	add	r3, r2
 8010338:	7ffa      	ldrb	r2, [r7, #31]
 801033a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801033c:	e7a6      	b.n	801028c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801033e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010340:	68fa      	ldr	r2, [r7, #12]
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	441a      	add	r2, r3
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d101      	bne.n	8010354 <create_name+0x160>
 8010350:	2306      	movs	r3, #6
 8010352:	e010      	b.n	8010376 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	2be5      	cmp	r3, #229	; 0xe5
 801035a:	d102      	bne.n	8010362 <create_name+0x16e>
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	2205      	movs	r2, #5
 8010360:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010362:	7ffb      	ldrb	r3, [r7, #31]
 8010364:	2b20      	cmp	r3, #32
 8010366:	d801      	bhi.n	801036c <create_name+0x178>
 8010368:	2204      	movs	r2, #4
 801036a:	e000      	b.n	801036e <create_name+0x17a>
 801036c:	2200      	movs	r2, #0
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	330b      	adds	r3, #11
 8010372:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010374:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010376:	4618      	mov	r0, r3
 8010378:	3720      	adds	r7, #32
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	08018578 	.word	0x08018578
 8010384:	08018528 	.word	0x08018528

08010388 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b086      	sub	sp, #24
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	2b2f      	cmp	r3, #47	; 0x2f
 80103a2:	d00b      	beq.n	80103bc <follow_path+0x34>
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	2b5c      	cmp	r3, #92	; 0x5c
 80103aa:	d007      	beq.n	80103bc <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	699a      	ldr	r2, [r3, #24]
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	609a      	str	r2, [r3, #8]
 80103b4:	e00d      	b.n	80103d2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	3301      	adds	r3, #1
 80103ba:	603b      	str	r3, [r7, #0]
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	2b2f      	cmp	r3, #47	; 0x2f
 80103c2:	d0f8      	beq.n	80103b6 <follow_path+0x2e>
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	2b5c      	cmp	r3, #92	; 0x5c
 80103ca:	d0f4      	beq.n	80103b6 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80103cc:	693b      	ldr	r3, [r7, #16]
 80103ce:	2200      	movs	r2, #0
 80103d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	2b1f      	cmp	r3, #31
 80103d8:	d80a      	bhi.n	80103f0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2280      	movs	r2, #128	; 0x80
 80103de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80103e2:	2100      	movs	r1, #0
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7ff fc1e 	bl	800fc26 <dir_sdi>
 80103ea:	4603      	mov	r3, r0
 80103ec:	75fb      	strb	r3, [r7, #23]
 80103ee:	e05b      	b.n	80104a8 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80103f0:	463b      	mov	r3, r7
 80103f2:	4619      	mov	r1, r3
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f7ff fefd 	bl	80101f4 <create_name>
 80103fa:	4603      	mov	r3, r0
 80103fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80103fe:	7dfb      	ldrb	r3, [r7, #23]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d14c      	bne.n	801049e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7ff fe50 	bl	80100aa <dir_find>
 801040a:	4603      	mov	r3, r0
 801040c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010414:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010416:	7dfb      	ldrb	r3, [r7, #23]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d01b      	beq.n	8010454 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801041c:	7dfb      	ldrb	r3, [r7, #23]
 801041e:	2b04      	cmp	r3, #4
 8010420:	d13f      	bne.n	80104a2 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8010422:	7afb      	ldrb	r3, [r7, #11]
 8010424:	f003 0320 	and.w	r3, r3, #32
 8010428:	2b00      	cmp	r3, #0
 801042a:	d00b      	beq.n	8010444 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801042c:	7afb      	ldrb	r3, [r7, #11]
 801042e:	f003 0304 	and.w	r3, r3, #4
 8010432:	2b00      	cmp	r3, #0
 8010434:	d031      	beq.n	801049a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2280      	movs	r2, #128	; 0x80
 801043a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801043e:	2300      	movs	r3, #0
 8010440:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8010442:	e02e      	b.n	80104a2 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010444:	7afb      	ldrb	r3, [r7, #11]
 8010446:	f003 0304 	and.w	r3, r3, #4
 801044a:	2b00      	cmp	r3, #0
 801044c:	d129      	bne.n	80104a2 <follow_path+0x11a>
 801044e:	2305      	movs	r3, #5
 8010450:	75fb      	strb	r3, [r7, #23]
				break;
 8010452:	e026      	b.n	80104a2 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010454:	7afb      	ldrb	r3, [r7, #11]
 8010456:	f003 0304 	and.w	r3, r3, #4
 801045a:	2b00      	cmp	r3, #0
 801045c:	d123      	bne.n	80104a6 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	799b      	ldrb	r3, [r3, #6]
 8010462:	f003 0310 	and.w	r3, r3, #16
 8010466:	2b00      	cmp	r3, #0
 8010468:	d102      	bne.n	8010470 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801046a:	2305      	movs	r3, #5
 801046c:	75fb      	strb	r3, [r7, #23]
 801046e:	e01b      	b.n	80104a8 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	695b      	ldr	r3, [r3, #20]
 801047a:	68fa      	ldr	r2, [r7, #12]
 801047c:	8992      	ldrh	r2, [r2, #12]
 801047e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010482:	fb02 f200 	mul.w	r2, r2, r0
 8010486:	1a9b      	subs	r3, r3, r2
 8010488:	440b      	add	r3, r1
 801048a:	4619      	mov	r1, r3
 801048c:	68f8      	ldr	r0, [r7, #12]
 801048e:	f7ff fd70 	bl	800ff72 <ld_clust>
 8010492:	4602      	mov	r2, r0
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	609a      	str	r2, [r3, #8]
 8010498:	e7aa      	b.n	80103f0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801049a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801049c:	e7a8      	b.n	80103f0 <follow_path+0x68>
			if (res != FR_OK) break;
 801049e:	bf00      	nop
 80104a0:	e002      	b.n	80104a8 <follow_path+0x120>
				break;
 80104a2:	bf00      	nop
 80104a4:	e000      	b.n	80104a8 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80104a6:	bf00      	nop
			}
		}
	}

	return res;
 80104a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3718      	adds	r7, #24
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80104b2:	b480      	push	{r7}
 80104b4:	b087      	sub	sp, #28
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80104ba:	f04f 33ff 	mov.w	r3, #4294967295
 80104be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d031      	beq.n	801052c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	617b      	str	r3, [r7, #20]
 80104ce:	e002      	b.n	80104d6 <get_ldnumber+0x24>
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	3301      	adds	r3, #1
 80104d4:	617b      	str	r3, [r7, #20]
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	781b      	ldrb	r3, [r3, #0]
 80104da:	2b20      	cmp	r3, #32
 80104dc:	d903      	bls.n	80104e6 <get_ldnumber+0x34>
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	2b3a      	cmp	r3, #58	; 0x3a
 80104e4:	d1f4      	bne.n	80104d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	2b3a      	cmp	r3, #58	; 0x3a
 80104ec:	d11c      	bne.n	8010528 <get_ldnumber+0x76>
			tp = *path;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	1c5a      	adds	r2, r3, #1
 80104f8:	60fa      	str	r2, [r7, #12]
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	3b30      	subs	r3, #48	; 0x30
 80104fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	2b09      	cmp	r3, #9
 8010504:	d80e      	bhi.n	8010524 <get_ldnumber+0x72>
 8010506:	68fa      	ldr	r2, [r7, #12]
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	429a      	cmp	r2, r3
 801050c:	d10a      	bne.n	8010524 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d107      	bne.n	8010524 <get_ldnumber+0x72>
					vol = (int)i;
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	3301      	adds	r3, #1
 801051c:	617b      	str	r3, [r7, #20]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	697a      	ldr	r2, [r7, #20]
 8010522:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	e002      	b.n	801052e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010528:	2300      	movs	r3, #0
 801052a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801052c:	693b      	ldr	r3, [r7, #16]
}
 801052e:	4618      	mov	r0, r3
 8010530:	371c      	adds	r7, #28
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr
	...

0801053c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2200      	movs	r2, #0
 801054a:	70da      	strb	r2, [r3, #3]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f04f 32ff 	mov.w	r2, #4294967295
 8010552:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010554:	6839      	ldr	r1, [r7, #0]
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f7fe ff8c 	bl	800f474 <move_window>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	d001      	beq.n	8010566 <check_fs+0x2a>
 8010562:	2304      	movs	r3, #4
 8010564:	e038      	b.n	80105d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	3338      	adds	r3, #56	; 0x38
 801056a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801056e:	4618      	mov	r0, r3
 8010570:	f7fe fcd0 	bl	800ef14 <ld_word>
 8010574:	4603      	mov	r3, r0
 8010576:	461a      	mov	r2, r3
 8010578:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801057c:	429a      	cmp	r2, r3
 801057e:	d001      	beq.n	8010584 <check_fs+0x48>
 8010580:	2303      	movs	r3, #3
 8010582:	e029      	b.n	80105d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801058a:	2be9      	cmp	r3, #233	; 0xe9
 801058c:	d009      	beq.n	80105a2 <check_fs+0x66>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010594:	2beb      	cmp	r3, #235	; 0xeb
 8010596:	d11e      	bne.n	80105d6 <check_fs+0x9a>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801059e:	2b90      	cmp	r3, #144	; 0x90
 80105a0:	d119      	bne.n	80105d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	3338      	adds	r3, #56	; 0x38
 80105a6:	3336      	adds	r3, #54	; 0x36
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fe fccb 	bl	800ef44 <ld_dword>
 80105ae:	4603      	mov	r3, r0
 80105b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80105b4:	4a0a      	ldr	r2, [pc, #40]	; (80105e0 <check_fs+0xa4>)
 80105b6:	4293      	cmp	r3, r2
 80105b8:	d101      	bne.n	80105be <check_fs+0x82>
 80105ba:	2300      	movs	r3, #0
 80105bc:	e00c      	b.n	80105d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	3338      	adds	r3, #56	; 0x38
 80105c2:	3352      	adds	r3, #82	; 0x52
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7fe fcbd 	bl	800ef44 <ld_dword>
 80105ca:	4602      	mov	r2, r0
 80105cc:	4b05      	ldr	r3, [pc, #20]	; (80105e4 <check_fs+0xa8>)
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d101      	bne.n	80105d6 <check_fs+0x9a>
 80105d2:	2300      	movs	r3, #0
 80105d4:	e000      	b.n	80105d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80105d6:	2302      	movs	r3, #2
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}
 80105e0:	00544146 	.word	0x00544146
 80105e4:	33544146 	.word	0x33544146

080105e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b096      	sub	sp, #88	; 0x58
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	4613      	mov	r3, r2
 80105f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	2200      	movs	r2, #0
 80105fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80105fc:	68f8      	ldr	r0, [r7, #12]
 80105fe:	f7ff ff58 	bl	80104b2 <get_ldnumber>
 8010602:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010606:	2b00      	cmp	r3, #0
 8010608:	da01      	bge.n	801060e <find_volume+0x26>
 801060a:	230b      	movs	r3, #11
 801060c:	e268      	b.n	8010ae0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801060e:	4ab0      	ldr	r2, [pc, #704]	; (80108d0 <find_volume+0x2e8>)
 8010610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010616:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061a:	2b00      	cmp	r3, #0
 801061c:	d101      	bne.n	8010622 <find_volume+0x3a>
 801061e:	230c      	movs	r3, #12
 8010620:	e25e      	b.n	8010ae0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010626:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010628:	79fb      	ldrb	r3, [r7, #7]
 801062a:	f023 0301 	bic.w	r3, r3, #1
 801062e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d01a      	beq.n	801066e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801063a:	785b      	ldrb	r3, [r3, #1]
 801063c:	4618      	mov	r0, r3
 801063e:	f7fe fbcb 	bl	800edd8 <disk_status>
 8010642:	4603      	mov	r3, r0
 8010644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010648:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801064c:	f003 0301 	and.w	r3, r3, #1
 8010650:	2b00      	cmp	r3, #0
 8010652:	d10c      	bne.n	801066e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010654:	79fb      	ldrb	r3, [r7, #7]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d007      	beq.n	801066a <find_volume+0x82>
 801065a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801065e:	f003 0304 	and.w	r3, r3, #4
 8010662:	2b00      	cmp	r3, #0
 8010664:	d001      	beq.n	801066a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010666:	230a      	movs	r3, #10
 8010668:	e23a      	b.n	8010ae0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801066a:	2300      	movs	r3, #0
 801066c:	e238      	b.n	8010ae0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801066e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010670:	2200      	movs	r2, #0
 8010672:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010676:	b2da      	uxtb	r2, r3
 8010678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801067c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067e:	785b      	ldrb	r3, [r3, #1]
 8010680:	4618      	mov	r0, r3
 8010682:	f7fe fbc3 	bl	800ee0c <disk_initialize>
 8010686:	4603      	mov	r3, r0
 8010688:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801068c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010690:	f003 0301 	and.w	r3, r3, #1
 8010694:	2b00      	cmp	r3, #0
 8010696:	d001      	beq.n	801069c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010698:	2303      	movs	r3, #3
 801069a:	e221      	b.n	8010ae0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801069c:	79fb      	ldrb	r3, [r7, #7]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d007      	beq.n	80106b2 <find_volume+0xca>
 80106a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106a6:	f003 0304 	and.w	r3, r3, #4
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d001      	beq.n	80106b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80106ae:	230a      	movs	r3, #10
 80106b0:	e216      	b.n	8010ae0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80106b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b4:	7858      	ldrb	r0, [r3, #1]
 80106b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b8:	330c      	adds	r3, #12
 80106ba:	461a      	mov	r2, r3
 80106bc:	2102      	movs	r1, #2
 80106be:	f7fe fc0b 	bl	800eed8 <disk_ioctl>
 80106c2:	4603      	mov	r3, r0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d001      	beq.n	80106cc <find_volume+0xe4>
 80106c8:	2301      	movs	r3, #1
 80106ca:	e209      	b.n	8010ae0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80106cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ce:	899b      	ldrh	r3, [r3, #12]
 80106d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106d4:	d80d      	bhi.n	80106f2 <find_volume+0x10a>
 80106d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d8:	899b      	ldrh	r3, [r3, #12]
 80106da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106de:	d308      	bcc.n	80106f2 <find_volume+0x10a>
 80106e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e2:	899b      	ldrh	r3, [r3, #12]
 80106e4:	461a      	mov	r2, r3
 80106e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e8:	899b      	ldrh	r3, [r3, #12]
 80106ea:	3b01      	subs	r3, #1
 80106ec:	4013      	ands	r3, r2
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d001      	beq.n	80106f6 <find_volume+0x10e>
 80106f2:	2301      	movs	r3, #1
 80106f4:	e1f4      	b.n	8010ae0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80106f6:	2300      	movs	r3, #0
 80106f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80106fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80106fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80106fe:	f7ff ff1d 	bl	801053c <check_fs>
 8010702:	4603      	mov	r3, r0
 8010704:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010708:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801070c:	2b02      	cmp	r3, #2
 801070e:	d14b      	bne.n	80107a8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010710:	2300      	movs	r3, #0
 8010712:	643b      	str	r3, [r7, #64]	; 0x40
 8010714:	e01f      	b.n	8010756 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010718:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801071c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801071e:	011b      	lsls	r3, r3, #4
 8010720:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010724:	4413      	add	r3, r2
 8010726:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072a:	3304      	adds	r3, #4
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d006      	beq.n	8010740 <find_volume+0x158>
 8010732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010734:	3308      	adds	r3, #8
 8010736:	4618      	mov	r0, r3
 8010738:	f7fe fc04 	bl	800ef44 <ld_dword>
 801073c:	4602      	mov	r2, r0
 801073e:	e000      	b.n	8010742 <find_volume+0x15a>
 8010740:	2200      	movs	r2, #0
 8010742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010744:	009b      	lsls	r3, r3, #2
 8010746:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801074a:	440b      	add	r3, r1
 801074c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010752:	3301      	adds	r3, #1
 8010754:	643b      	str	r3, [r7, #64]	; 0x40
 8010756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010758:	2b03      	cmp	r3, #3
 801075a:	d9dc      	bls.n	8010716 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801075c:	2300      	movs	r3, #0
 801075e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010762:	2b00      	cmp	r3, #0
 8010764:	d002      	beq.n	801076c <find_volume+0x184>
 8010766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010768:	3b01      	subs	r3, #1
 801076a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801076c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801076e:	009b      	lsls	r3, r3, #2
 8010770:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010774:	4413      	add	r3, r2
 8010776:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801077a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801077c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801077e:	2b00      	cmp	r3, #0
 8010780:	d005      	beq.n	801078e <find_volume+0x1a6>
 8010782:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010784:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010786:	f7ff fed9 	bl	801053c <check_fs>
 801078a:	4603      	mov	r3, r0
 801078c:	e000      	b.n	8010790 <find_volume+0x1a8>
 801078e:	2303      	movs	r3, #3
 8010790:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010798:	2b01      	cmp	r3, #1
 801079a:	d905      	bls.n	80107a8 <find_volume+0x1c0>
 801079c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801079e:	3301      	adds	r3, #1
 80107a0:	643b      	str	r3, [r7, #64]	; 0x40
 80107a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107a4:	2b03      	cmp	r3, #3
 80107a6:	d9e1      	bls.n	801076c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80107a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107ac:	2b04      	cmp	r3, #4
 80107ae:	d101      	bne.n	80107b4 <find_volume+0x1cc>
 80107b0:	2301      	movs	r3, #1
 80107b2:	e195      	b.n	8010ae0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80107b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d901      	bls.n	80107c0 <find_volume+0x1d8>
 80107bc:	230d      	movs	r3, #13
 80107be:	e18f      	b.n	8010ae0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80107c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c2:	3338      	adds	r3, #56	; 0x38
 80107c4:	330b      	adds	r3, #11
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7fe fba4 	bl	800ef14 <ld_word>
 80107cc:	4603      	mov	r3, r0
 80107ce:	461a      	mov	r2, r3
 80107d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d2:	899b      	ldrh	r3, [r3, #12]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d001      	beq.n	80107dc <find_volume+0x1f4>
 80107d8:	230d      	movs	r3, #13
 80107da:	e181      	b.n	8010ae0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80107dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107de:	3338      	adds	r3, #56	; 0x38
 80107e0:	3316      	adds	r3, #22
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7fe fb96 	bl	800ef14 <ld_word>
 80107e8:	4603      	mov	r3, r0
 80107ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80107ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d106      	bne.n	8010800 <find_volume+0x218>
 80107f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f4:	3338      	adds	r3, #56	; 0x38
 80107f6:	3324      	adds	r3, #36	; 0x24
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7fe fba3 	bl	800ef44 <ld_dword>
 80107fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010804:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010808:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801080c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801080e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010812:	789b      	ldrb	r3, [r3, #2]
 8010814:	2b01      	cmp	r3, #1
 8010816:	d005      	beq.n	8010824 <find_volume+0x23c>
 8010818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081a:	789b      	ldrb	r3, [r3, #2]
 801081c:	2b02      	cmp	r3, #2
 801081e:	d001      	beq.n	8010824 <find_volume+0x23c>
 8010820:	230d      	movs	r3, #13
 8010822:	e15d      	b.n	8010ae0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010826:	789b      	ldrb	r3, [r3, #2]
 8010828:	461a      	mov	r2, r3
 801082a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801082c:	fb02 f303 	mul.w	r3, r2, r3
 8010830:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010838:	b29a      	uxth	r2, r3
 801083a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801083c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801083e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010840:	895b      	ldrh	r3, [r3, #10]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d008      	beq.n	8010858 <find_volume+0x270>
 8010846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010848:	895b      	ldrh	r3, [r3, #10]
 801084a:	461a      	mov	r2, r3
 801084c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084e:	895b      	ldrh	r3, [r3, #10]
 8010850:	3b01      	subs	r3, #1
 8010852:	4013      	ands	r3, r2
 8010854:	2b00      	cmp	r3, #0
 8010856:	d001      	beq.n	801085c <find_volume+0x274>
 8010858:	230d      	movs	r3, #13
 801085a:	e141      	b.n	8010ae0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801085c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085e:	3338      	adds	r3, #56	; 0x38
 8010860:	3311      	adds	r3, #17
 8010862:	4618      	mov	r0, r3
 8010864:	f7fe fb56 	bl	800ef14 <ld_word>
 8010868:	4603      	mov	r3, r0
 801086a:	461a      	mov	r2, r3
 801086c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010872:	891b      	ldrh	r3, [r3, #8]
 8010874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010876:	8992      	ldrh	r2, [r2, #12]
 8010878:	0952      	lsrs	r2, r2, #5
 801087a:	b292      	uxth	r2, r2
 801087c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010880:	fb02 f201 	mul.w	r2, r2, r1
 8010884:	1a9b      	subs	r3, r3, r2
 8010886:	b29b      	uxth	r3, r3
 8010888:	2b00      	cmp	r3, #0
 801088a:	d001      	beq.n	8010890 <find_volume+0x2a8>
 801088c:	230d      	movs	r3, #13
 801088e:	e127      	b.n	8010ae0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010892:	3338      	adds	r3, #56	; 0x38
 8010894:	3313      	adds	r3, #19
 8010896:	4618      	mov	r0, r3
 8010898:	f7fe fb3c 	bl	800ef14 <ld_word>
 801089c:	4603      	mov	r3, r0
 801089e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80108a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d106      	bne.n	80108b4 <find_volume+0x2cc>
 80108a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a8:	3338      	adds	r3, #56	; 0x38
 80108aa:	3320      	adds	r3, #32
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7fe fb49 	bl	800ef44 <ld_dword>
 80108b2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80108b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b6:	3338      	adds	r3, #56	; 0x38
 80108b8:	330e      	adds	r3, #14
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7fe fb2a 	bl	800ef14 <ld_word>
 80108c0:	4603      	mov	r3, r0
 80108c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80108c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d104      	bne.n	80108d4 <find_volume+0x2ec>
 80108ca:	230d      	movs	r3, #13
 80108cc:	e108      	b.n	8010ae0 <find_volume+0x4f8>
 80108ce:	bf00      	nop
 80108d0:	200335d8 	.word	0x200335d8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80108d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80108d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108d8:	4413      	add	r3, r2
 80108da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108dc:	8911      	ldrh	r1, [r2, #8]
 80108de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108e0:	8992      	ldrh	r2, [r2, #12]
 80108e2:	0952      	lsrs	r2, r2, #5
 80108e4:	b292      	uxth	r2, r2
 80108e6:	fbb1 f2f2 	udiv	r2, r1, r2
 80108ea:	b292      	uxth	r2, r2
 80108ec:	4413      	add	r3, r2
 80108ee:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80108f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d201      	bcs.n	80108fc <find_volume+0x314>
 80108f8:	230d      	movs	r3, #13
 80108fa:	e0f1      	b.n	8010ae0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80108fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010900:	1ad3      	subs	r3, r2, r3
 8010902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010904:	8952      	ldrh	r2, [r2, #10]
 8010906:	fbb3 f3f2 	udiv	r3, r3, r2
 801090a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090e:	2b00      	cmp	r3, #0
 8010910:	d101      	bne.n	8010916 <find_volume+0x32e>
 8010912:	230d      	movs	r3, #13
 8010914:	e0e4      	b.n	8010ae0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8010916:	2303      	movs	r3, #3
 8010918:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010922:	4293      	cmp	r3, r2
 8010924:	d802      	bhi.n	801092c <find_volume+0x344>
 8010926:	2302      	movs	r3, #2
 8010928:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010932:	4293      	cmp	r3, r2
 8010934:	d802      	bhi.n	801093c <find_volume+0x354>
 8010936:	2301      	movs	r3, #1
 8010938:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093e:	1c9a      	adds	r2, r3, #2
 8010940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010942:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010946:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010948:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801094a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801094c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801094e:	441a      	add	r2, r3
 8010950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010952:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010954:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010958:	441a      	add	r2, r3
 801095a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801095c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801095e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010962:	2b03      	cmp	r3, #3
 8010964:	d11e      	bne.n	80109a4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010968:	3338      	adds	r3, #56	; 0x38
 801096a:	332a      	adds	r3, #42	; 0x2a
 801096c:	4618      	mov	r0, r3
 801096e:	f7fe fad1 	bl	800ef14 <ld_word>
 8010972:	4603      	mov	r3, r0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d001      	beq.n	801097c <find_volume+0x394>
 8010978:	230d      	movs	r3, #13
 801097a:	e0b1      	b.n	8010ae0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801097c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097e:	891b      	ldrh	r3, [r3, #8]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d001      	beq.n	8010988 <find_volume+0x3a0>
 8010984:	230d      	movs	r3, #13
 8010986:	e0ab      	b.n	8010ae0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098a:	3338      	adds	r3, #56	; 0x38
 801098c:	332c      	adds	r3, #44	; 0x2c
 801098e:	4618      	mov	r0, r3
 8010990:	f7fe fad8 	bl	800ef44 <ld_dword>
 8010994:	4602      	mov	r2, r0
 8010996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010998:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099c:	69db      	ldr	r3, [r3, #28]
 801099e:	009b      	lsls	r3, r3, #2
 80109a0:	647b      	str	r3, [r7, #68]	; 0x44
 80109a2:	e01f      	b.n	80109e4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80109a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a6:	891b      	ldrh	r3, [r3, #8]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d101      	bne.n	80109b0 <find_volume+0x3c8>
 80109ac:	230d      	movs	r3, #13
 80109ae:	e097      	b.n	8010ae0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80109b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80109b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109b6:	441a      	add	r2, r3
 80109b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ba:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80109bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d103      	bne.n	80109cc <find_volume+0x3e4>
 80109c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c6:	69db      	ldr	r3, [r3, #28]
 80109c8:	005b      	lsls	r3, r3, #1
 80109ca:	e00a      	b.n	80109e2 <find_volume+0x3fa>
 80109cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ce:	69da      	ldr	r2, [r3, #28]
 80109d0:	4613      	mov	r3, r2
 80109d2:	005b      	lsls	r3, r3, #1
 80109d4:	4413      	add	r3, r2
 80109d6:	085a      	lsrs	r2, r3, #1
 80109d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109da:	69db      	ldr	r3, [r3, #28]
 80109dc:	f003 0301 	and.w	r3, r3, #1
 80109e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80109e2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80109e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e6:	6a1a      	ldr	r2, [r3, #32]
 80109e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ea:	899b      	ldrh	r3, [r3, #12]
 80109ec:	4619      	mov	r1, r3
 80109ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109f0:	440b      	add	r3, r1
 80109f2:	3b01      	subs	r3, #1
 80109f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80109f6:	8989      	ldrh	r1, [r1, #12]
 80109f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d201      	bcs.n	8010a04 <find_volume+0x41c>
 8010a00:	230d      	movs	r3, #13
 8010a02:	e06d      	b.n	8010ae0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a06:	f04f 32ff 	mov.w	r2, #4294967295
 8010a0a:	615a      	str	r2, [r3, #20]
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0e:	695a      	ldr	r2, [r3, #20]
 8010a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a12:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a16:	2280      	movs	r2, #128	; 0x80
 8010a18:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010a1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a1e:	2b03      	cmp	r3, #3
 8010a20:	d149      	bne.n	8010ab6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a24:	3338      	adds	r3, #56	; 0x38
 8010a26:	3330      	adds	r3, #48	; 0x30
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7fe fa73 	bl	800ef14 <ld_word>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	d140      	bne.n	8010ab6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a36:	3301      	adds	r3, #1
 8010a38:	4619      	mov	r1, r3
 8010a3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a3c:	f7fe fd1a 	bl	800f474 <move_window>
 8010a40:	4603      	mov	r3, r0
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d137      	bne.n	8010ab6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8010a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a48:	2200      	movs	r2, #0
 8010a4a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4e:	3338      	adds	r3, #56	; 0x38
 8010a50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7fe fa5d 	bl	800ef14 <ld_word>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d127      	bne.n	8010ab6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a68:	3338      	adds	r3, #56	; 0x38
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f7fe fa6a 	bl	800ef44 <ld_dword>
 8010a70:	4602      	mov	r2, r0
 8010a72:	4b1d      	ldr	r3, [pc, #116]	; (8010ae8 <find_volume+0x500>)
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d11e      	bne.n	8010ab6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7a:	3338      	adds	r3, #56	; 0x38
 8010a7c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7fe fa5f 	bl	800ef44 <ld_dword>
 8010a86:	4602      	mov	r2, r0
 8010a88:	4b18      	ldr	r3, [pc, #96]	; (8010aec <find_volume+0x504>)
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d113      	bne.n	8010ab6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a90:	3338      	adds	r3, #56	; 0x38
 8010a92:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7fe fa54 	bl	800ef44 <ld_dword>
 8010a9c:	4602      	mov	r2, r0
 8010a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa4:	3338      	adds	r3, #56	; 0x38
 8010aa6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7fe fa4a 	bl	800ef44 <ld_dword>
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010abc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010abe:	4b0c      	ldr	r3, [pc, #48]	; (8010af0 <find_volume+0x508>)
 8010ac0:	881b      	ldrh	r3, [r3, #0]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	4b0a      	ldr	r3, [pc, #40]	; (8010af0 <find_volume+0x508>)
 8010ac8:	801a      	strh	r2, [r3, #0]
 8010aca:	4b09      	ldr	r3, [pc, #36]	; (8010af0 <find_volume+0x508>)
 8010acc:	881a      	ldrh	r2, [r3, #0]
 8010ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad0:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010ad8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ada:	f7fe fc63 	bl	800f3a4 <clear_lock>
#endif
	return FR_OK;
 8010ade:	2300      	movs	r3, #0
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3758      	adds	r7, #88	; 0x58
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	41615252 	.word	0x41615252
 8010aec:	61417272 	.word	0x61417272
 8010af0:	200335dc 	.word	0x200335dc

08010af4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010afe:	2309      	movs	r3, #9
 8010b00:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d01c      	beq.n	8010b42 <validate+0x4e>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d018      	beq.n	8010b42 <validate+0x4e>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d013      	beq.n	8010b42 <validate+0x4e>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	889a      	ldrh	r2, [r3, #4]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	88db      	ldrh	r3, [r3, #6]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d10c      	bne.n	8010b42 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	785b      	ldrb	r3, [r3, #1]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fe f952 	bl	800edd8 <disk_status>
 8010b34:	4603      	mov	r3, r0
 8010b36:	f003 0301 	and.w	r3, r3, #1
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d101      	bne.n	8010b42 <validate+0x4e>
			res = FR_OK;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010b42:	7bfb      	ldrb	r3, [r7, #15]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d102      	bne.n	8010b4e <validate+0x5a>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	e000      	b.n	8010b50 <validate+0x5c>
 8010b4e:	2300      	movs	r3, #0
 8010b50:	683a      	ldr	r2, [r7, #0]
 8010b52:	6013      	str	r3, [r2, #0]
	return res;
 8010b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3710      	adds	r7, #16
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
	...

08010b60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b088      	sub	sp, #32
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	60b9      	str	r1, [r7, #8]
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010b72:	f107 0310 	add.w	r3, r7, #16
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7ff fc9b 	bl	80104b2 <get_ldnumber>
 8010b7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	da01      	bge.n	8010b88 <f_mount+0x28>
 8010b84:	230b      	movs	r3, #11
 8010b86:	e02b      	b.n	8010be0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010b88:	4a17      	ldr	r2, [pc, #92]	; (8010be8 <f_mount+0x88>)
 8010b8a:	69fb      	ldr	r3, [r7, #28]
 8010b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010b92:	69bb      	ldr	r3, [r7, #24]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d005      	beq.n	8010ba4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010b98:	69b8      	ldr	r0, [r7, #24]
 8010b9a:	f7fe fc03 	bl	800f3a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010b9e:	69bb      	ldr	r3, [r7, #24]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d002      	beq.n	8010bb0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2200      	movs	r2, #0
 8010bae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010bb0:	68fa      	ldr	r2, [r7, #12]
 8010bb2:	490d      	ldr	r1, [pc, #52]	; (8010be8 <f_mount+0x88>)
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d002      	beq.n	8010bc6 <f_mount+0x66>
 8010bc0:	79fb      	ldrb	r3, [r7, #7]
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d001      	beq.n	8010bca <f_mount+0x6a>
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	e00a      	b.n	8010be0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010bca:	f107 010c 	add.w	r1, r7, #12
 8010bce:	f107 0308 	add.w	r3, r7, #8
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7ff fd07 	bl	80105e8 <find_volume>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3720      	adds	r7, #32
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	200335d8 	.word	0x200335d8

08010bec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b098      	sub	sp, #96	; 0x60
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	60f8      	str	r0, [r7, #12]
 8010bf4:	60b9      	str	r1, [r7, #8]
 8010bf6:	4613      	mov	r3, r2
 8010bf8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d101      	bne.n	8010c04 <f_open+0x18>
 8010c00:	2309      	movs	r3, #9
 8010c02:	e1ba      	b.n	8010f7a <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010c04:	79fb      	ldrb	r3, [r7, #7]
 8010c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c0a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010c0c:	79fa      	ldrb	r2, [r7, #7]
 8010c0e:	f107 0110 	add.w	r1, r7, #16
 8010c12:	f107 0308 	add.w	r3, r7, #8
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ff fce6 	bl	80105e8 <find_volume>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010c22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	f040 819e 	bne.w	8010f68 <f_open+0x37c>
		dj.obj.fs = fs;
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010c30:	68ba      	ldr	r2, [r7, #8]
 8010c32:	f107 0314 	add.w	r3, r7, #20
 8010c36:	4611      	mov	r1, r2
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7ff fba5 	bl	8010388 <follow_path>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010c44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d11a      	bne.n	8010c82 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010c4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010c50:	b25b      	sxtb	r3, r3
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	da03      	bge.n	8010c5e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010c56:	2306      	movs	r3, #6
 8010c58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010c5c:	e011      	b.n	8010c82 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010c5e:	79fb      	ldrb	r3, [r7, #7]
 8010c60:	f023 0301 	bic.w	r3, r3, #1
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	bf14      	ite	ne
 8010c68:	2301      	movne	r3, #1
 8010c6a:	2300      	moveq	r3, #0
 8010c6c:	b2db      	uxtb	r3, r3
 8010c6e:	461a      	mov	r2, r3
 8010c70:	f107 0314 	add.w	r3, r7, #20
 8010c74:	4611      	mov	r1, r2
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fe fa4c 	bl	800f114 <chk_lock>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010c82:	79fb      	ldrb	r3, [r7, #7]
 8010c84:	f003 031c 	and.w	r3, r3, #28
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d07e      	beq.n	8010d8a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8010c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d017      	beq.n	8010cc4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010c94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c98:	2b04      	cmp	r3, #4
 8010c9a:	d10e      	bne.n	8010cba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010c9c:	f7fe fa96 	bl	800f1cc <enq_lock>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d006      	beq.n	8010cb4 <f_open+0xc8>
 8010ca6:	f107 0314 	add.w	r3, r7, #20
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7ff fa52 	bl	8010154 <dir_register>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	e000      	b.n	8010cb6 <f_open+0xca>
 8010cb4:	2312      	movs	r3, #18
 8010cb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010cba:	79fb      	ldrb	r3, [r7, #7]
 8010cbc:	f043 0308 	orr.w	r3, r3, #8
 8010cc0:	71fb      	strb	r3, [r7, #7]
 8010cc2:	e010      	b.n	8010ce6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010cc4:	7ebb      	ldrb	r3, [r7, #26]
 8010cc6:	f003 0311 	and.w	r3, r3, #17
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d003      	beq.n	8010cd6 <f_open+0xea>
					res = FR_DENIED;
 8010cce:	2307      	movs	r3, #7
 8010cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010cd4:	e007      	b.n	8010ce6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010cd6:	79fb      	ldrb	r3, [r7, #7]
 8010cd8:	f003 0304 	and.w	r3, r3, #4
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d002      	beq.n	8010ce6 <f_open+0xfa>
 8010ce0:	2308      	movs	r3, #8
 8010ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010ce6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d167      	bne.n	8010dbe <f_open+0x1d2>
 8010cee:	79fb      	ldrb	r3, [r7, #7]
 8010cf0:	f003 0308 	and.w	r3, r3, #8
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d062      	beq.n	8010dbe <f_open+0x1d2>
				dw = GET_FATTIME();
 8010cf8:	4ba2      	ldr	r3, [pc, #648]	; (8010f84 <f_open+0x398>)
 8010cfa:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cfe:	330e      	adds	r3, #14
 8010d00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7fe f95c 	bl	800efc0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d0a:	3316      	adds	r3, #22
 8010d0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7fe f956 	bl	800efc0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d16:	330b      	adds	r3, #11
 8010d18:	2220      	movs	r2, #32
 8010d1a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010d1c:	693b      	ldr	r3, [r7, #16]
 8010d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d20:	4611      	mov	r1, r2
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7ff f925 	bl	800ff72 <ld_clust>
 8010d28:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010d2e:	2200      	movs	r2, #0
 8010d30:	4618      	mov	r0, r3
 8010d32:	f7ff f93d 	bl	800ffb0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d38:	331c      	adds	r3, #28
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fe f93f 	bl	800efc0 <st_dword>
					fs->wflag = 1;
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	2201      	movs	r2, #1
 8010d46:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d037      	beq.n	8010dbe <f_open+0x1d2>
						dw = fs->winsect;
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d52:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010d54:	f107 0314 	add.w	r3, r7, #20
 8010d58:	2200      	movs	r2, #0
 8010d5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7fe fe2d 	bl	800f9bc <remove_chain>
 8010d62:	4603      	mov	r3, r0
 8010d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d126      	bne.n	8010dbe <f_open+0x1d2>
							res = move_window(fs, dw);
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7fe fb7d 	bl	800f474 <move_window>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010d84:	3a01      	subs	r2, #1
 8010d86:	611a      	str	r2, [r3, #16]
 8010d88:	e019      	b.n	8010dbe <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010d8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d115      	bne.n	8010dbe <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010d92:	7ebb      	ldrb	r3, [r7, #26]
 8010d94:	f003 0310 	and.w	r3, r3, #16
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d003      	beq.n	8010da4 <f_open+0x1b8>
					res = FR_NO_FILE;
 8010d9c:	2304      	movs	r3, #4
 8010d9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010da2:	e00c      	b.n	8010dbe <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010da4:	79fb      	ldrb	r3, [r7, #7]
 8010da6:	f003 0302 	and.w	r3, r3, #2
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d007      	beq.n	8010dbe <f_open+0x1d2>
 8010dae:	7ebb      	ldrb	r3, [r7, #26]
 8010db0:	f003 0301 	and.w	r3, r3, #1
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d002      	beq.n	8010dbe <f_open+0x1d2>
						res = FR_DENIED;
 8010db8:	2307      	movs	r3, #7
 8010dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010dbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d128      	bne.n	8010e18 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010dc6:	79fb      	ldrb	r3, [r7, #7]
 8010dc8:	f003 0308 	and.w	r3, r3, #8
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d003      	beq.n	8010dd8 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8010dd0:	79fb      	ldrb	r3, [r7, #7]
 8010dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dd6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010de6:	79fb      	ldrb	r3, [r7, #7]
 8010de8:	f023 0301 	bic.w	r3, r3, #1
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	bf14      	ite	ne
 8010df0:	2301      	movne	r3, #1
 8010df2:	2300      	moveq	r3, #0
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	461a      	mov	r2, r3
 8010df8:	f107 0314 	add.w	r3, r7, #20
 8010dfc:	4611      	mov	r1, r2
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7fe fa06 	bl	800f210 <inc_lock>
 8010e04:	4602      	mov	r2, r0
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	691b      	ldr	r3, [r3, #16]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d102      	bne.n	8010e18 <f_open+0x22c>
 8010e12:	2302      	movs	r3, #2
 8010e14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010e18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f040 80a3 	bne.w	8010f68 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e26:	4611      	mov	r1, r2
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7ff f8a2 	bl	800ff72 <ld_clust>
 8010e2e:	4602      	mov	r2, r0
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e36:	331c      	adds	r3, #28
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7fe f883 	bl	800ef44 <ld_dword>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2200      	movs	r2, #0
 8010e48:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010e4a:	693a      	ldr	r2, [r7, #16]
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	88da      	ldrh	r2, [r3, #6]
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	79fa      	ldrb	r2, [r7, #7]
 8010e5c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	2200      	movs	r2, #0
 8010e62:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2200      	movs	r2, #0
 8010e68:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	3330      	adds	r3, #48	; 0x30
 8010e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010e78:	2100      	movs	r1, #0
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fe f8ed 	bl	800f05a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010e80:	79fb      	ldrb	r3, [r7, #7]
 8010e82:	f003 0320 	and.w	r3, r3, #32
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d06e      	beq.n	8010f68 <f_open+0x37c>
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d06a      	beq.n	8010f68 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	68da      	ldr	r2, [r3, #12]
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	895b      	ldrh	r3, [r3, #10]
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	899b      	ldrh	r3, [r3, #12]
 8010ea4:	fb03 f302 	mul.w	r3, r3, r2
 8010ea8:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	689b      	ldr	r3, [r3, #8]
 8010eae:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	68db      	ldr	r3, [r3, #12]
 8010eb4:	657b      	str	r3, [r7, #84]	; 0x54
 8010eb6:	e016      	b.n	8010ee6 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7fe fb96 	bl	800f5ee <get_fat>
 8010ec2:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010ec6:	2b01      	cmp	r3, #1
 8010ec8:	d802      	bhi.n	8010ed0 <f_open+0x2e4>
 8010eca:	2302      	movs	r3, #2
 8010ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ed6:	d102      	bne.n	8010ede <f_open+0x2f2>
 8010ed8:	2301      	movs	r3, #1
 8010eda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010ede:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ee2:	1ad3      	subs	r3, r2, r3
 8010ee4:	657b      	str	r3, [r7, #84]	; 0x54
 8010ee6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d103      	bne.n	8010ef6 <f_open+0x30a>
 8010eee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d8e0      	bhi.n	8010eb8 <f_open+0x2cc>
				}
				fp->clust = clst;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010efa:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010efc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d131      	bne.n	8010f68 <f_open+0x37c>
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	899b      	ldrh	r3, [r3, #12]
 8010f08:	461a      	mov	r2, r3
 8010f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f10:	fb02 f201 	mul.w	r2, r2, r1
 8010f14:	1a9b      	subs	r3, r3, r2
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d026      	beq.n	8010f68 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010f1a:	693b      	ldr	r3, [r7, #16]
 8010f1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7fe fb46 	bl	800f5b0 <clust2sect>
 8010f24:	6478      	str	r0, [r7, #68]	; 0x44
 8010f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d103      	bne.n	8010f34 <f_open+0x348>
						res = FR_INT_ERR;
 8010f2c:	2302      	movs	r3, #2
 8010f2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010f32:	e019      	b.n	8010f68 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	899b      	ldrh	r3, [r3, #12]
 8010f38:	461a      	mov	r2, r3
 8010f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f42:	441a      	add	r2, r3
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	7858      	ldrb	r0, [r3, #1]
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	6a1a      	ldr	r2, [r3, #32]
 8010f56:	2301      	movs	r3, #1
 8010f58:	f7fd ff7e 	bl	800ee58 <disk_read>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d002      	beq.n	8010f68 <f_open+0x37c>
 8010f62:	2301      	movs	r3, #1
 8010f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d002      	beq.n	8010f76 <f_open+0x38a>
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2200      	movs	r2, #0
 8010f74:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010f76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3760      	adds	r7, #96	; 0x60
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	274a0000 	.word	0x274a0000

08010f88 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b08e      	sub	sp, #56	; 0x38
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
 8010f94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f107 0214 	add.w	r2, r7, #20
 8010fa6:	4611      	mov	r1, r2
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7ff fda3 	bl	8010af4 <validate>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010fb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d107      	bne.n	8010fcc <f_read+0x44>
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	7d5b      	ldrb	r3, [r3, #21]
 8010fc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010fc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d002      	beq.n	8010fd2 <f_read+0x4a>
 8010fcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fd0:	e135      	b.n	801123e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	7d1b      	ldrb	r3, [r3, #20]
 8010fd6:	f003 0301 	and.w	r3, r3, #1
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d101      	bne.n	8010fe2 <f_read+0x5a>
 8010fde:	2307      	movs	r3, #7
 8010fe0:	e12d      	b.n	801123e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	68da      	ldr	r2, [r3, #12]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	699b      	ldr	r3, [r3, #24]
 8010fea:	1ad3      	subs	r3, r2, r3
 8010fec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	6a3b      	ldr	r3, [r7, #32]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	f240 811e 	bls.w	8011234 <f_read+0x2ac>
 8010ff8:	6a3b      	ldr	r3, [r7, #32]
 8010ffa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010ffc:	e11a      	b.n	8011234 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	699b      	ldr	r3, [r3, #24]
 8011002:	697a      	ldr	r2, [r7, #20]
 8011004:	8992      	ldrh	r2, [r2, #12]
 8011006:	fbb3 f1f2 	udiv	r1, r3, r2
 801100a:	fb02 f201 	mul.w	r2, r2, r1
 801100e:	1a9b      	subs	r3, r3, r2
 8011010:	2b00      	cmp	r3, #0
 8011012:	f040 80d5 	bne.w	80111c0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	699b      	ldr	r3, [r3, #24]
 801101a:	697a      	ldr	r2, [r7, #20]
 801101c:	8992      	ldrh	r2, [r2, #12]
 801101e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011022:	697a      	ldr	r2, [r7, #20]
 8011024:	8952      	ldrh	r2, [r2, #10]
 8011026:	3a01      	subs	r2, #1
 8011028:	4013      	ands	r3, r2
 801102a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801102c:	69fb      	ldr	r3, [r7, #28]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d12f      	bne.n	8011092 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	699b      	ldr	r3, [r3, #24]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d103      	bne.n	8011042 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	689b      	ldr	r3, [r3, #8]
 801103e:	633b      	str	r3, [r7, #48]	; 0x30
 8011040:	e013      	b.n	801106a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011046:	2b00      	cmp	r3, #0
 8011048:	d007      	beq.n	801105a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	699b      	ldr	r3, [r3, #24]
 801104e:	4619      	mov	r1, r3
 8011050:	68f8      	ldr	r0, [r7, #12]
 8011052:	f7fe fdb0 	bl	800fbb6 <clmt_clust>
 8011056:	6338      	str	r0, [r7, #48]	; 0x30
 8011058:	e007      	b.n	801106a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	69db      	ldr	r3, [r3, #28]
 8011060:	4619      	mov	r1, r3
 8011062:	4610      	mov	r0, r2
 8011064:	f7fe fac3 	bl	800f5ee <get_fat>
 8011068:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801106a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106c:	2b01      	cmp	r3, #1
 801106e:	d804      	bhi.n	801107a <f_read+0xf2>
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2202      	movs	r2, #2
 8011074:	755a      	strb	r2, [r3, #21]
 8011076:	2302      	movs	r3, #2
 8011078:	e0e1      	b.n	801123e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011080:	d104      	bne.n	801108c <f_read+0x104>
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	2201      	movs	r2, #1
 8011086:	755a      	strb	r2, [r3, #21]
 8011088:	2301      	movs	r3, #1
 801108a:	e0d8      	b.n	801123e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011090:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011092:	697a      	ldr	r2, [r7, #20]
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	69db      	ldr	r3, [r3, #28]
 8011098:	4619      	mov	r1, r3
 801109a:	4610      	mov	r0, r2
 801109c:	f7fe fa88 	bl	800f5b0 <clust2sect>
 80110a0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80110a2:	69bb      	ldr	r3, [r7, #24]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d104      	bne.n	80110b2 <f_read+0x12a>
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2202      	movs	r2, #2
 80110ac:	755a      	strb	r2, [r3, #21]
 80110ae:	2302      	movs	r3, #2
 80110b0:	e0c5      	b.n	801123e <f_read+0x2b6>
			sect += csect;
 80110b2:	69ba      	ldr	r2, [r7, #24]
 80110b4:	69fb      	ldr	r3, [r7, #28]
 80110b6:	4413      	add	r3, r2
 80110b8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	899b      	ldrh	r3, [r3, #12]
 80110be:	461a      	mov	r2, r3
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80110c6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80110c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d041      	beq.n	8011152 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80110ce:	69fa      	ldr	r2, [r7, #28]
 80110d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d2:	4413      	add	r3, r2
 80110d4:	697a      	ldr	r2, [r7, #20]
 80110d6:	8952      	ldrh	r2, [r2, #10]
 80110d8:	4293      	cmp	r3, r2
 80110da:	d905      	bls.n	80110e8 <f_read+0x160>
					cc = fs->csize - csect;
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	895b      	ldrh	r3, [r3, #10]
 80110e0:	461a      	mov	r2, r3
 80110e2:	69fb      	ldr	r3, [r7, #28]
 80110e4:	1ad3      	subs	r3, r2, r3
 80110e6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	7858      	ldrb	r0, [r3, #1]
 80110ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ee:	69ba      	ldr	r2, [r7, #24]
 80110f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110f2:	f7fd feb1 	bl	800ee58 <disk_read>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d004      	beq.n	8011106 <f_read+0x17e>
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2201      	movs	r2, #1
 8011100:	755a      	strb	r2, [r3, #21]
 8011102:	2301      	movs	r3, #1
 8011104:	e09b      	b.n	801123e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	7d1b      	ldrb	r3, [r3, #20]
 801110a:	b25b      	sxtb	r3, r3
 801110c:	2b00      	cmp	r3, #0
 801110e:	da18      	bge.n	8011142 <f_read+0x1ba>
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	6a1a      	ldr	r2, [r3, #32]
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	1ad3      	subs	r3, r2, r3
 8011118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801111a:	429a      	cmp	r2, r3
 801111c:	d911      	bls.n	8011142 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	6a1a      	ldr	r2, [r3, #32]
 8011122:	69bb      	ldr	r3, [r7, #24]
 8011124:	1ad3      	subs	r3, r2, r3
 8011126:	697a      	ldr	r2, [r7, #20]
 8011128:	8992      	ldrh	r2, [r2, #12]
 801112a:	fb02 f303 	mul.w	r3, r2, r3
 801112e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011130:	18d0      	adds	r0, r2, r3
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	899b      	ldrh	r3, [r3, #12]
 801113c:	461a      	mov	r2, r3
 801113e:	f7fd ff6b 	bl	800f018 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	899b      	ldrh	r3, [r3, #12]
 8011146:	461a      	mov	r2, r3
 8011148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114a:	fb02 f303 	mul.w	r3, r2, r3
 801114e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011150:	e05c      	b.n	801120c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	6a1b      	ldr	r3, [r3, #32]
 8011156:	69ba      	ldr	r2, [r7, #24]
 8011158:	429a      	cmp	r2, r3
 801115a:	d02e      	beq.n	80111ba <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	7d1b      	ldrb	r3, [r3, #20]
 8011160:	b25b      	sxtb	r3, r3
 8011162:	2b00      	cmp	r3, #0
 8011164:	da18      	bge.n	8011198 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	7858      	ldrb	r0, [r3, #1]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	6a1a      	ldr	r2, [r3, #32]
 8011174:	2301      	movs	r3, #1
 8011176:	f7fd fe8f 	bl	800ee98 <disk_write>
 801117a:	4603      	mov	r3, r0
 801117c:	2b00      	cmp	r3, #0
 801117e:	d004      	beq.n	801118a <f_read+0x202>
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2201      	movs	r2, #1
 8011184:	755a      	strb	r2, [r3, #21]
 8011186:	2301      	movs	r3, #1
 8011188:	e059      	b.n	801123e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	7d1b      	ldrb	r3, [r3, #20]
 801118e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011192:	b2da      	uxtb	r2, r3
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	7858      	ldrb	r0, [r3, #1]
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111a2:	2301      	movs	r3, #1
 80111a4:	69ba      	ldr	r2, [r7, #24]
 80111a6:	f7fd fe57 	bl	800ee58 <disk_read>
 80111aa:	4603      	mov	r3, r0
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d004      	beq.n	80111ba <f_read+0x232>
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	2201      	movs	r2, #1
 80111b4:	755a      	strb	r2, [r3, #21]
 80111b6:	2301      	movs	r3, #1
 80111b8:	e041      	b.n	801123e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	69ba      	ldr	r2, [r7, #24]
 80111be:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	899b      	ldrh	r3, [r3, #12]
 80111c4:	4618      	mov	r0, r3
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	699b      	ldr	r3, [r3, #24]
 80111ca:	697a      	ldr	r2, [r7, #20]
 80111cc:	8992      	ldrh	r2, [r2, #12]
 80111ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80111d2:	fb02 f201 	mul.w	r2, r2, r1
 80111d6:	1a9b      	subs	r3, r3, r2
 80111d8:	1ac3      	subs	r3, r0, r3
 80111da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80111dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d901      	bls.n	80111e8 <f_read+0x260>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	699b      	ldr	r3, [r3, #24]
 80111f2:	697a      	ldr	r2, [r7, #20]
 80111f4:	8992      	ldrh	r2, [r2, #12]
 80111f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80111fa:	fb02 f200 	mul.w	r2, r2, r0
 80111fe:	1a9b      	subs	r3, r3, r2
 8011200:	440b      	add	r3, r1
 8011202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011204:	4619      	mov	r1, r3
 8011206:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011208:	f7fd ff06 	bl	800f018 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801120c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011210:	4413      	add	r3, r2
 8011212:	627b      	str	r3, [r7, #36]	; 0x24
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	699a      	ldr	r2, [r3, #24]
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	441a      	add	r2, r3
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	619a      	str	r2, [r3, #24]
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011226:	441a      	add	r2, r3
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	601a      	str	r2, [r3, #0]
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011230:	1ad3      	subs	r3, r2, r3
 8011232:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2b00      	cmp	r3, #0
 8011238:	f47f aee1 	bne.w	8010ffe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801123c:	2300      	movs	r3, #0
}
 801123e:	4618      	mov	r0, r3
 8011240:	3738      	adds	r7, #56	; 0x38
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}

08011246 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011246:	b580      	push	{r7, lr}
 8011248:	b08c      	sub	sp, #48	; 0x30
 801124a:	af00      	add	r7, sp, #0
 801124c:	60f8      	str	r0, [r7, #12]
 801124e:	60b9      	str	r1, [r7, #8]
 8011250:	607a      	str	r2, [r7, #4]
 8011252:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	2200      	movs	r2, #0
 801125c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	f107 0210 	add.w	r2, r7, #16
 8011264:	4611      	mov	r1, r2
 8011266:	4618      	mov	r0, r3
 8011268:	f7ff fc44 	bl	8010af4 <validate>
 801126c:	4603      	mov	r3, r0
 801126e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011276:	2b00      	cmp	r3, #0
 8011278:	d107      	bne.n	801128a <f_write+0x44>
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	7d5b      	ldrb	r3, [r3, #21]
 801127e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011286:	2b00      	cmp	r3, #0
 8011288:	d002      	beq.n	8011290 <f_write+0x4a>
 801128a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801128e:	e16a      	b.n	8011566 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	7d1b      	ldrb	r3, [r3, #20]
 8011294:	f003 0302 	and.w	r3, r3, #2
 8011298:	2b00      	cmp	r3, #0
 801129a:	d101      	bne.n	80112a0 <f_write+0x5a>
 801129c:	2307      	movs	r3, #7
 801129e:	e162      	b.n	8011566 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	699a      	ldr	r2, [r3, #24]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	441a      	add	r2, r3
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	699b      	ldr	r3, [r3, #24]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	f080 814c 	bcs.w	801154a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	699b      	ldr	r3, [r3, #24]
 80112b6:	43db      	mvns	r3, r3
 80112b8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80112ba:	e146      	b.n	801154a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	699b      	ldr	r3, [r3, #24]
 80112c0:	693a      	ldr	r2, [r7, #16]
 80112c2:	8992      	ldrh	r2, [r2, #12]
 80112c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80112c8:	fb02 f201 	mul.w	r2, r2, r1
 80112cc:	1a9b      	subs	r3, r3, r2
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	f040 80f1 	bne.w	80114b6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	699b      	ldr	r3, [r3, #24]
 80112d8:	693a      	ldr	r2, [r7, #16]
 80112da:	8992      	ldrh	r2, [r2, #12]
 80112dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80112e0:	693a      	ldr	r2, [r7, #16]
 80112e2:	8952      	ldrh	r2, [r2, #10]
 80112e4:	3a01      	subs	r2, #1
 80112e6:	4013      	ands	r3, r2
 80112e8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80112ea:	69bb      	ldr	r3, [r7, #24]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d143      	bne.n	8011378 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	699b      	ldr	r3, [r3, #24]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d10c      	bne.n	8011312 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	689b      	ldr	r3, [r3, #8]
 80112fc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80112fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011300:	2b00      	cmp	r3, #0
 8011302:	d11a      	bne.n	801133a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	2100      	movs	r1, #0
 8011308:	4618      	mov	r0, r3
 801130a:	f7fe fbbc 	bl	800fa86 <create_chain>
 801130e:	62b8      	str	r0, [r7, #40]	; 0x28
 8011310:	e013      	b.n	801133a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011316:	2b00      	cmp	r3, #0
 8011318:	d007      	beq.n	801132a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	699b      	ldr	r3, [r3, #24]
 801131e:	4619      	mov	r1, r3
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	f7fe fc48 	bl	800fbb6 <clmt_clust>
 8011326:	62b8      	str	r0, [r7, #40]	; 0x28
 8011328:	e007      	b.n	801133a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801132a:	68fa      	ldr	r2, [r7, #12]
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	69db      	ldr	r3, [r3, #28]
 8011330:	4619      	mov	r1, r3
 8011332:	4610      	mov	r0, r2
 8011334:	f7fe fba7 	bl	800fa86 <create_chain>
 8011338:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801133c:	2b00      	cmp	r3, #0
 801133e:	f000 8109 	beq.w	8011554 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011344:	2b01      	cmp	r3, #1
 8011346:	d104      	bne.n	8011352 <f_write+0x10c>
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	2202      	movs	r2, #2
 801134c:	755a      	strb	r2, [r3, #21]
 801134e:	2302      	movs	r3, #2
 8011350:	e109      	b.n	8011566 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011358:	d104      	bne.n	8011364 <f_write+0x11e>
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2201      	movs	r2, #1
 801135e:	755a      	strb	r2, [r3, #21]
 8011360:	2301      	movs	r3, #1
 8011362:	e100      	b.n	8011566 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011368:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	689b      	ldr	r3, [r3, #8]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d102      	bne.n	8011378 <f_write+0x132>
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011376:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	7d1b      	ldrb	r3, [r3, #20]
 801137c:	b25b      	sxtb	r3, r3
 801137e:	2b00      	cmp	r3, #0
 8011380:	da18      	bge.n	80113b4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011382:	693b      	ldr	r3, [r7, #16]
 8011384:	7858      	ldrb	r0, [r3, #1]
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	6a1a      	ldr	r2, [r3, #32]
 8011390:	2301      	movs	r3, #1
 8011392:	f7fd fd81 	bl	800ee98 <disk_write>
 8011396:	4603      	mov	r3, r0
 8011398:	2b00      	cmp	r3, #0
 801139a:	d004      	beq.n	80113a6 <f_write+0x160>
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2201      	movs	r2, #1
 80113a0:	755a      	strb	r2, [r3, #21]
 80113a2:	2301      	movs	r3, #1
 80113a4:	e0df      	b.n	8011566 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	7d1b      	ldrb	r3, [r3, #20]
 80113aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113ae:	b2da      	uxtb	r2, r3
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80113b4:	693a      	ldr	r2, [r7, #16]
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	69db      	ldr	r3, [r3, #28]
 80113ba:	4619      	mov	r1, r3
 80113bc:	4610      	mov	r0, r2
 80113be:	f7fe f8f7 	bl	800f5b0 <clust2sect>
 80113c2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d104      	bne.n	80113d4 <f_write+0x18e>
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2202      	movs	r2, #2
 80113ce:	755a      	strb	r2, [r3, #21]
 80113d0:	2302      	movs	r3, #2
 80113d2:	e0c8      	b.n	8011566 <f_write+0x320>
			sect += csect;
 80113d4:	697a      	ldr	r2, [r7, #20]
 80113d6:	69bb      	ldr	r3, [r7, #24]
 80113d8:	4413      	add	r3, r2
 80113da:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	899b      	ldrh	r3, [r3, #12]
 80113e0:	461a      	mov	r2, r3
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80113e8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80113ea:	6a3b      	ldr	r3, [r7, #32]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d043      	beq.n	8011478 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80113f0:	69ba      	ldr	r2, [r7, #24]
 80113f2:	6a3b      	ldr	r3, [r7, #32]
 80113f4:	4413      	add	r3, r2
 80113f6:	693a      	ldr	r2, [r7, #16]
 80113f8:	8952      	ldrh	r2, [r2, #10]
 80113fa:	4293      	cmp	r3, r2
 80113fc:	d905      	bls.n	801140a <f_write+0x1c4>
					cc = fs->csize - csect;
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	895b      	ldrh	r3, [r3, #10]
 8011402:	461a      	mov	r2, r3
 8011404:	69bb      	ldr	r3, [r7, #24]
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	7858      	ldrb	r0, [r3, #1]
 801140e:	6a3b      	ldr	r3, [r7, #32]
 8011410:	697a      	ldr	r2, [r7, #20]
 8011412:	69f9      	ldr	r1, [r7, #28]
 8011414:	f7fd fd40 	bl	800ee98 <disk_write>
 8011418:	4603      	mov	r3, r0
 801141a:	2b00      	cmp	r3, #0
 801141c:	d004      	beq.n	8011428 <f_write+0x1e2>
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	2201      	movs	r2, #1
 8011422:	755a      	strb	r2, [r3, #21]
 8011424:	2301      	movs	r3, #1
 8011426:	e09e      	b.n	8011566 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	6a1a      	ldr	r2, [r3, #32]
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	1ad3      	subs	r3, r2, r3
 8011430:	6a3a      	ldr	r2, [r7, #32]
 8011432:	429a      	cmp	r2, r3
 8011434:	d918      	bls.n	8011468 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	6a1a      	ldr	r2, [r3, #32]
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	1ad3      	subs	r3, r2, r3
 8011444:	693a      	ldr	r2, [r7, #16]
 8011446:	8992      	ldrh	r2, [r2, #12]
 8011448:	fb02 f303 	mul.w	r3, r2, r3
 801144c:	69fa      	ldr	r2, [r7, #28]
 801144e:	18d1      	adds	r1, r2, r3
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	899b      	ldrh	r3, [r3, #12]
 8011454:	461a      	mov	r2, r3
 8011456:	f7fd fddf 	bl	800f018 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	7d1b      	ldrb	r3, [r3, #20]
 801145e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011462:	b2da      	uxtb	r2, r3
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	899b      	ldrh	r3, [r3, #12]
 801146c:	461a      	mov	r2, r3
 801146e:	6a3b      	ldr	r3, [r7, #32]
 8011470:	fb02 f303 	mul.w	r3, r2, r3
 8011474:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011476:	e04b      	b.n	8011510 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	6a1b      	ldr	r3, [r3, #32]
 801147c:	697a      	ldr	r2, [r7, #20]
 801147e:	429a      	cmp	r2, r3
 8011480:	d016      	beq.n	80114b0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	699a      	ldr	r2, [r3, #24]
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801148a:	429a      	cmp	r2, r3
 801148c:	d210      	bcs.n	80114b0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	7858      	ldrb	r0, [r3, #1]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011498:	2301      	movs	r3, #1
 801149a:	697a      	ldr	r2, [r7, #20]
 801149c:	f7fd fcdc 	bl	800ee58 <disk_read>
 80114a0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d004      	beq.n	80114b0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	2201      	movs	r2, #1
 80114aa:	755a      	strb	r2, [r3, #21]
 80114ac:	2301      	movs	r3, #1
 80114ae:	e05a      	b.n	8011566 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	697a      	ldr	r2, [r7, #20]
 80114b4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	899b      	ldrh	r3, [r3, #12]
 80114ba:	4618      	mov	r0, r3
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	699b      	ldr	r3, [r3, #24]
 80114c0:	693a      	ldr	r2, [r7, #16]
 80114c2:	8992      	ldrh	r2, [r2, #12]
 80114c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80114c8:	fb02 f201 	mul.w	r2, r2, r1
 80114cc:	1a9b      	subs	r3, r3, r2
 80114ce:	1ac3      	subs	r3, r0, r3
 80114d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80114d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d901      	bls.n	80114de <f_write+0x298>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	699b      	ldr	r3, [r3, #24]
 80114e8:	693a      	ldr	r2, [r7, #16]
 80114ea:	8992      	ldrh	r2, [r2, #12]
 80114ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80114f0:	fb02 f200 	mul.w	r2, r2, r0
 80114f4:	1a9b      	subs	r3, r3, r2
 80114f6:	440b      	add	r3, r1
 80114f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114fa:	69f9      	ldr	r1, [r7, #28]
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7fd fd8b 	bl	800f018 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	7d1b      	ldrb	r3, [r3, #20]
 8011506:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801150a:	b2da      	uxtb	r2, r3
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011510:	69fa      	ldr	r2, [r7, #28]
 8011512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011514:	4413      	add	r3, r2
 8011516:	61fb      	str	r3, [r7, #28]
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	699a      	ldr	r2, [r3, #24]
 801151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151e:	441a      	add	r2, r3
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	619a      	str	r2, [r3, #24]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	68da      	ldr	r2, [r3, #12]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	699b      	ldr	r3, [r3, #24]
 801152c:	429a      	cmp	r2, r3
 801152e:	bf38      	it	cc
 8011530:	461a      	movcc	r2, r3
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	60da      	str	r2, [r3, #12]
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153c:	441a      	add	r2, r3
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	601a      	str	r2, [r3, #0]
 8011542:	687a      	ldr	r2, [r7, #4]
 8011544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011546:	1ad3      	subs	r3, r2, r3
 8011548:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2b00      	cmp	r3, #0
 801154e:	f47f aeb5 	bne.w	80112bc <f_write+0x76>
 8011552:	e000      	b.n	8011556 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011554:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	7d1b      	ldrb	r3, [r3, #20]
 801155a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801155e:	b2da      	uxtb	r2, r3
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011564:	2300      	movs	r3, #0
}
 8011566:	4618      	mov	r0, r3
 8011568:	3730      	adds	r7, #48	; 0x30
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
	...

08011570 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b086      	sub	sp, #24
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f107 0208 	add.w	r2, r7, #8
 801157e:	4611      	mov	r1, r2
 8011580:	4618      	mov	r0, r3
 8011582:	f7ff fab7 	bl	8010af4 <validate>
 8011586:	4603      	mov	r3, r0
 8011588:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801158a:	7dfb      	ldrb	r3, [r7, #23]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d167      	bne.n	8011660 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	7d1b      	ldrb	r3, [r3, #20]
 8011594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011598:	2b00      	cmp	r3, #0
 801159a:	d061      	beq.n	8011660 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	7d1b      	ldrb	r3, [r3, #20]
 80115a0:	b25b      	sxtb	r3, r3
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	da15      	bge.n	80115d2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	7858      	ldrb	r0, [r3, #1]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6a1a      	ldr	r2, [r3, #32]
 80115b4:	2301      	movs	r3, #1
 80115b6:	f7fd fc6f 	bl	800ee98 <disk_write>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d001      	beq.n	80115c4 <f_sync+0x54>
 80115c0:	2301      	movs	r3, #1
 80115c2:	e04e      	b.n	8011662 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	7d1b      	ldrb	r3, [r3, #20]
 80115c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115cc:	b2da      	uxtb	r2, r3
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80115d2:	4b26      	ldr	r3, [pc, #152]	; (801166c <f_sync+0xfc>)
 80115d4:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80115d6:	68ba      	ldr	r2, [r7, #8]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115dc:	4619      	mov	r1, r3
 80115de:	4610      	mov	r0, r2
 80115e0:	f7fd ff48 	bl	800f474 <move_window>
 80115e4:	4603      	mov	r3, r0
 80115e6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80115e8:	7dfb      	ldrb	r3, [r7, #23]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d138      	bne.n	8011660 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115f2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	330b      	adds	r3, #11
 80115f8:	781a      	ldrb	r2, [r3, #0]
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	330b      	adds	r3, #11
 80115fe:	f042 0220 	orr.w	r2, r2, #32
 8011602:	b2d2      	uxtb	r2, r2
 8011604:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6818      	ldr	r0, [r3, #0]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	689b      	ldr	r3, [r3, #8]
 801160e:	461a      	mov	r2, r3
 8011610:	68f9      	ldr	r1, [r7, #12]
 8011612:	f7fe fccd 	bl	800ffb0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f103 021c 	add.w	r2, r3, #28
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	68db      	ldr	r3, [r3, #12]
 8011620:	4619      	mov	r1, r3
 8011622:	4610      	mov	r0, r2
 8011624:	f7fd fccc 	bl	800efc0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	3316      	adds	r3, #22
 801162c:	6939      	ldr	r1, [r7, #16]
 801162e:	4618      	mov	r0, r3
 8011630:	f7fd fcc6 	bl	800efc0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	3312      	adds	r3, #18
 8011638:	2100      	movs	r1, #0
 801163a:	4618      	mov	r0, r3
 801163c:	f7fd fca5 	bl	800ef8a <st_word>
					fs->wflag = 1;
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	2201      	movs	r2, #1
 8011644:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	4618      	mov	r0, r3
 801164a:	f7fd ff41 	bl	800f4d0 <sync_fs>
 801164e:	4603      	mov	r3, r0
 8011650:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	7d1b      	ldrb	r3, [r3, #20]
 8011656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801165a:	b2da      	uxtb	r2, r3
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011660:	7dfb      	ldrb	r3, [r7, #23]
}
 8011662:	4618      	mov	r0, r3
 8011664:	3718      	adds	r7, #24
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	274a0000 	.word	0x274a0000

08011670 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f7ff ff79 	bl	8011570 <f_sync>
 801167e:	4603      	mov	r3, r0
 8011680:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011682:	7bfb      	ldrb	r3, [r7, #15]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d118      	bne.n	80116ba <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f107 0208 	add.w	r2, r7, #8
 801168e:	4611      	mov	r1, r2
 8011690:	4618      	mov	r0, r3
 8011692:	f7ff fa2f 	bl	8010af4 <validate>
 8011696:	4603      	mov	r3, r0
 8011698:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801169a:	7bfb      	ldrb	r3, [r7, #15]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d10c      	bne.n	80116ba <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	691b      	ldr	r3, [r3, #16]
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7fd fe41 	bl	800f32c <dec_lock>
 80116aa:	4603      	mov	r3, r0
 80116ac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80116ae:	7bfb      	ldrb	r3, [r7, #15]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d102      	bne.n	80116ba <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2200      	movs	r2, #0
 80116b8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80116ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3710      	adds	r7, #16
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80116c4:	b590      	push	{r4, r7, lr}
 80116c6:	b091      	sub	sp, #68	; 0x44
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80116cc:	f107 0108 	add.w	r1, r7, #8
 80116d0:	1d3b      	adds	r3, r7, #4
 80116d2:	2200      	movs	r2, #0
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fe ff87 	bl	80105e8 <find_volume>
 80116da:	4603      	mov	r3, r0
 80116dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80116e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d131      	bne.n	801174c <f_chdir+0x88>
		dj.obj.fs = fs;
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	f107 030c 	add.w	r3, r7, #12
 80116f2:	4611      	mov	r1, r2
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7fe fe47 	bl	8010388 <follow_path>
 80116fa:	4603      	mov	r3, r0
 80116fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8011700:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011704:	2b00      	cmp	r3, #0
 8011706:	d11a      	bne.n	801173e <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011708:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801170c:	b25b      	sxtb	r3, r3
 801170e:	2b00      	cmp	r3, #0
 8011710:	da03      	bge.n	801171a <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	697a      	ldr	r2, [r7, #20]
 8011716:	619a      	str	r2, [r3, #24]
 8011718:	e011      	b.n	801173e <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 801171a:	7cbb      	ldrb	r3, [r7, #18]
 801171c:	f003 0310 	and.w	r3, r3, #16
 8011720:	2b00      	cmp	r3, #0
 8011722:	d009      	beq.n	8011738 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011728:	68bc      	ldr	r4, [r7, #8]
 801172a:	4611      	mov	r1, r2
 801172c:	4618      	mov	r0, r3
 801172e:	f7fe fc20 	bl	800ff72 <ld_clust>
 8011732:	4603      	mov	r3, r0
 8011734:	61a3      	str	r3, [r4, #24]
 8011736:	e002      	b.n	801173e <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8011738:	2305      	movs	r3, #5
 801173a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801173e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011742:	2b04      	cmp	r3, #4
 8011744:	d102      	bne.n	801174c <f_chdir+0x88>
 8011746:	2305      	movs	r3, #5
 8011748:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 801174c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011750:	4618      	mov	r0, r3
 8011752:	3744      	adds	r7, #68	; 0x44
 8011754:	46bd      	mov	sp, r7
 8011756:	bd90      	pop	{r4, r7, pc}

08011758 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b090      	sub	sp, #64	; 0x40
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f107 0208 	add.w	r2, r7, #8
 8011768:	4611      	mov	r1, r2
 801176a:	4618      	mov	r0, r3
 801176c:	f7ff f9c2 	bl	8010af4 <validate>
 8011770:	4603      	mov	r3, r0
 8011772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011776:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801177a:	2b00      	cmp	r3, #0
 801177c:	d103      	bne.n	8011786 <f_lseek+0x2e>
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	7d5b      	ldrb	r3, [r3, #21]
 8011782:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011786:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801178a:	2b00      	cmp	r3, #0
 801178c:	d002      	beq.n	8011794 <f_lseek+0x3c>
 801178e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011792:	e201      	b.n	8011b98 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011798:	2b00      	cmp	r3, #0
 801179a:	f000 80d9 	beq.w	8011950 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a4:	d15a      	bne.n	801185c <f_lseek+0x104>
			tbl = fp->cltbl;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117aa:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80117ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ae:	1d1a      	adds	r2, r3, #4
 80117b0:	627a      	str	r2, [r7, #36]	; 0x24
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	617b      	str	r3, [r7, #20]
 80117b6:	2302      	movs	r3, #2
 80117b8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	689b      	ldr	r3, [r3, #8]
 80117be:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80117c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d03a      	beq.n	801183c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80117c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c8:	613b      	str	r3, [r7, #16]
 80117ca:	2300      	movs	r3, #0
 80117cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d0:	3302      	adds	r3, #2
 80117d2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80117d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d6:	60fb      	str	r3, [r7, #12]
 80117d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117da:	3301      	adds	r3, #1
 80117dc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7fd ff03 	bl	800f5ee <get_fat>
 80117e8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80117ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d804      	bhi.n	80117fa <f_lseek+0xa2>
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2202      	movs	r2, #2
 80117f4:	755a      	strb	r2, [r3, #21]
 80117f6:	2302      	movs	r3, #2
 80117f8:	e1ce      	b.n	8011b98 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80117fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011800:	d104      	bne.n	801180c <f_lseek+0xb4>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2201      	movs	r2, #1
 8011806:	755a      	strb	r2, [r3, #21]
 8011808:	2301      	movs	r3, #1
 801180a:	e1c5      	b.n	8011b98 <f_lseek+0x440>
					} while (cl == pcl + 1);
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	3301      	adds	r3, #1
 8011810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011812:	429a      	cmp	r2, r3
 8011814:	d0de      	beq.n	80117d4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	429a      	cmp	r2, r3
 801181c:	d809      	bhi.n	8011832 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011820:	1d1a      	adds	r2, r3, #4
 8011822:	627a      	str	r2, [r7, #36]	; 0x24
 8011824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011826:	601a      	str	r2, [r3, #0]
 8011828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182a:	1d1a      	adds	r2, r3, #4
 801182c:	627a      	str	r2, [r7, #36]	; 0x24
 801182e:	693a      	ldr	r2, [r7, #16]
 8011830:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	69db      	ldr	r3, [r3, #28]
 8011836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011838:	429a      	cmp	r2, r3
 801183a:	d3c4      	bcc.n	80117c6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011842:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	429a      	cmp	r2, r3
 801184a:	d803      	bhi.n	8011854 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184e:	2200      	movs	r2, #0
 8011850:	601a      	str	r2, [r3, #0]
 8011852:	e19f      	b.n	8011b94 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011854:	2311      	movs	r3, #17
 8011856:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801185a:	e19b      	b.n	8011b94 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	68db      	ldr	r3, [r3, #12]
 8011860:	683a      	ldr	r2, [r7, #0]
 8011862:	429a      	cmp	r2, r3
 8011864:	d902      	bls.n	801186c <f_lseek+0x114>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	68db      	ldr	r3, [r3, #12]
 801186a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	683a      	ldr	r2, [r7, #0]
 8011870:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	f000 818d 	beq.w	8011b94 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	3b01      	subs	r3, #1
 801187e:	4619      	mov	r1, r3
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f7fe f998 	bl	800fbb6 <clmt_clust>
 8011886:	4602      	mov	r2, r0
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801188c:	68ba      	ldr	r2, [r7, #8]
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	69db      	ldr	r3, [r3, #28]
 8011892:	4619      	mov	r1, r3
 8011894:	4610      	mov	r0, r2
 8011896:	f7fd fe8b 	bl	800f5b0 <clust2sect>
 801189a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d104      	bne.n	80118ac <f_lseek+0x154>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2202      	movs	r2, #2
 80118a6:	755a      	strb	r2, [r3, #21]
 80118a8:	2302      	movs	r3, #2
 80118aa:	e175      	b.n	8011b98 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	3b01      	subs	r3, #1
 80118b0:	68ba      	ldr	r2, [r7, #8]
 80118b2:	8992      	ldrh	r2, [r2, #12]
 80118b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80118b8:	68ba      	ldr	r2, [r7, #8]
 80118ba:	8952      	ldrh	r2, [r2, #10]
 80118bc:	3a01      	subs	r2, #1
 80118be:	4013      	ands	r3, r2
 80118c0:	69ba      	ldr	r2, [r7, #24]
 80118c2:	4413      	add	r3, r2
 80118c4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	699b      	ldr	r3, [r3, #24]
 80118ca:	68ba      	ldr	r2, [r7, #8]
 80118cc:	8992      	ldrh	r2, [r2, #12]
 80118ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80118d2:	fb02 f201 	mul.w	r2, r2, r1
 80118d6:	1a9b      	subs	r3, r3, r2
 80118d8:	2b00      	cmp	r3, #0
 80118da:	f000 815b 	beq.w	8011b94 <f_lseek+0x43c>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6a1b      	ldr	r3, [r3, #32]
 80118e2:	69ba      	ldr	r2, [r7, #24]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	f000 8155 	beq.w	8011b94 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	7d1b      	ldrb	r3, [r3, #20]
 80118ee:	b25b      	sxtb	r3, r3
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	da18      	bge.n	8011926 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	7858      	ldrb	r0, [r3, #1]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6a1a      	ldr	r2, [r3, #32]
 8011902:	2301      	movs	r3, #1
 8011904:	f7fd fac8 	bl	800ee98 <disk_write>
 8011908:	4603      	mov	r3, r0
 801190a:	2b00      	cmp	r3, #0
 801190c:	d004      	beq.n	8011918 <f_lseek+0x1c0>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2201      	movs	r2, #1
 8011912:	755a      	strb	r2, [r3, #21]
 8011914:	2301      	movs	r3, #1
 8011916:	e13f      	b.n	8011b98 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	7d1b      	ldrb	r3, [r3, #20]
 801191c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011920:	b2da      	uxtb	r2, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	7858      	ldrb	r0, [r3, #1]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011930:	2301      	movs	r3, #1
 8011932:	69ba      	ldr	r2, [r7, #24]
 8011934:	f7fd fa90 	bl	800ee58 <disk_read>
 8011938:	4603      	mov	r3, r0
 801193a:	2b00      	cmp	r3, #0
 801193c:	d004      	beq.n	8011948 <f_lseek+0x1f0>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2201      	movs	r2, #1
 8011942:	755a      	strb	r2, [r3, #21]
 8011944:	2301      	movs	r3, #1
 8011946:	e127      	b.n	8011b98 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	69ba      	ldr	r2, [r7, #24]
 801194c:	621a      	str	r2, [r3, #32]
 801194e:	e121      	b.n	8011b94 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	68db      	ldr	r3, [r3, #12]
 8011954:	683a      	ldr	r2, [r7, #0]
 8011956:	429a      	cmp	r2, r3
 8011958:	d908      	bls.n	801196c <f_lseek+0x214>
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	7d1b      	ldrb	r3, [r3, #20]
 801195e:	f003 0302 	and.w	r3, r3, #2
 8011962:	2b00      	cmp	r3, #0
 8011964:	d102      	bne.n	801196c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	68db      	ldr	r3, [r3, #12]
 801196a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	699b      	ldr	r3, [r3, #24]
 8011970:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011972:	2300      	movs	r3, #0
 8011974:	637b      	str	r3, [r7, #52]	; 0x34
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801197a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	f000 80b5 	beq.w	8011aee <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011984:	68bb      	ldr	r3, [r7, #8]
 8011986:	895b      	ldrh	r3, [r3, #10]
 8011988:	461a      	mov	r2, r3
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	899b      	ldrh	r3, [r3, #12]
 801198e:	fb03 f302 	mul.w	r3, r3, r2
 8011992:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011994:	6a3b      	ldr	r3, [r7, #32]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d01b      	beq.n	80119d2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	1e5a      	subs	r2, r3, #1
 801199e:	69fb      	ldr	r3, [r7, #28]
 80119a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80119a4:	6a3b      	ldr	r3, [r7, #32]
 80119a6:	1e59      	subs	r1, r3, #1
 80119a8:	69fb      	ldr	r3, [r7, #28]
 80119aa:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d30f      	bcc.n	80119d2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80119b2:	6a3b      	ldr	r3, [r7, #32]
 80119b4:	1e5a      	subs	r2, r3, #1
 80119b6:	69fb      	ldr	r3, [r7, #28]
 80119b8:	425b      	negs	r3, r3
 80119ba:	401a      	ands	r2, r3
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	699b      	ldr	r3, [r3, #24]
 80119c4:	683a      	ldr	r2, [r7, #0]
 80119c6:	1ad3      	subs	r3, r2, r3
 80119c8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	69db      	ldr	r3, [r3, #28]
 80119ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80119d0:	e022      	b.n	8011a18 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	689b      	ldr	r3, [r3, #8]
 80119d6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80119d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d119      	bne.n	8011a12 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2100      	movs	r1, #0
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fe f84f 	bl	800fa86 <create_chain>
 80119e8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80119ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d104      	bne.n	80119fa <f_lseek+0x2a2>
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2202      	movs	r2, #2
 80119f4:	755a      	strb	r2, [r3, #21]
 80119f6:	2302      	movs	r3, #2
 80119f8:	e0ce      	b.n	8011b98 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80119fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a00:	d104      	bne.n	8011a0c <f_lseek+0x2b4>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2201      	movs	r2, #1
 8011a06:	755a      	strb	r2, [r3, #21]
 8011a08:	2301      	movs	r3, #1
 8011a0a:	e0c5      	b.n	8011b98 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a10:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a16:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d067      	beq.n	8011aee <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011a1e:	e03a      	b.n	8011a96 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011a20:	683a      	ldr	r2, [r7, #0]
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	1ad3      	subs	r3, r2, r3
 8011a26:	603b      	str	r3, [r7, #0]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	699a      	ldr	r2, [r3, #24]
 8011a2c:	69fb      	ldr	r3, [r7, #28]
 8011a2e:	441a      	add	r2, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	7d1b      	ldrb	r3, [r3, #20]
 8011a38:	f003 0302 	and.w	r3, r3, #2
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d00b      	beq.n	8011a58 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7fe f81e 	bl	800fa86 <create_chain>
 8011a4a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d108      	bne.n	8011a64 <f_lseek+0x30c>
							ofs = 0; break;
 8011a52:	2300      	movs	r3, #0
 8011a54:	603b      	str	r3, [r7, #0]
 8011a56:	e022      	b.n	8011a9e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fd fdc6 	bl	800f5ee <get_fat>
 8011a62:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a6a:	d104      	bne.n	8011a76 <f_lseek+0x31e>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	755a      	strb	r2, [r3, #21]
 8011a72:	2301      	movs	r3, #1
 8011a74:	e090      	b.n	8011b98 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a78:	2b01      	cmp	r3, #1
 8011a7a:	d904      	bls.n	8011a86 <f_lseek+0x32e>
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	69db      	ldr	r3, [r3, #28]
 8011a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a82:	429a      	cmp	r2, r3
 8011a84:	d304      	bcc.n	8011a90 <f_lseek+0x338>
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2202      	movs	r2, #2
 8011a8a:	755a      	strb	r2, [r3, #21]
 8011a8c:	2302      	movs	r3, #2
 8011a8e:	e083      	b.n	8011b98 <f_lseek+0x440>
					fp->clust = clst;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a94:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011a96:	683a      	ldr	r2, [r7, #0]
 8011a98:	69fb      	ldr	r3, [r7, #28]
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d8c0      	bhi.n	8011a20 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	699a      	ldr	r2, [r3, #24]
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	441a      	add	r2, r3
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	899b      	ldrh	r3, [r3, #12]
 8011aae:	461a      	mov	r2, r3
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ab6:	fb02 f201 	mul.w	r2, r2, r1
 8011aba:	1a9b      	subs	r3, r3, r2
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d016      	beq.n	8011aee <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7fd fd73 	bl	800f5b0 <clust2sect>
 8011aca:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d104      	bne.n	8011adc <f_lseek+0x384>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2202      	movs	r2, #2
 8011ad6:	755a      	strb	r2, [r3, #21]
 8011ad8:	2302      	movs	r3, #2
 8011ada:	e05d      	b.n	8011b98 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	899b      	ldrh	r3, [r3, #12]
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011aea:	4413      	add	r3, r2
 8011aec:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	699a      	ldr	r2, [r3, #24]
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	68db      	ldr	r3, [r3, #12]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d90a      	bls.n	8011b10 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	699a      	ldr	r2, [r3, #24]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	7d1b      	ldrb	r3, [r3, #20]
 8011b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b0a:	b2da      	uxtb	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	699b      	ldr	r3, [r3, #24]
 8011b14:	68ba      	ldr	r2, [r7, #8]
 8011b16:	8992      	ldrh	r2, [r2, #12]
 8011b18:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b1c:	fb02 f201 	mul.w	r2, r2, r1
 8011b20:	1a9b      	subs	r3, r3, r2
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d036      	beq.n	8011b94 <f_lseek+0x43c>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6a1b      	ldr	r3, [r3, #32]
 8011b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d031      	beq.n	8011b94 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	7d1b      	ldrb	r3, [r3, #20]
 8011b34:	b25b      	sxtb	r3, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	da18      	bge.n	8011b6c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	7858      	ldrb	r0, [r3, #1]
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	6a1a      	ldr	r2, [r3, #32]
 8011b48:	2301      	movs	r3, #1
 8011b4a:	f7fd f9a5 	bl	800ee98 <disk_write>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d004      	beq.n	8011b5e <f_lseek+0x406>
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2201      	movs	r2, #1
 8011b58:	755a      	strb	r2, [r3, #21]
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	e01c      	b.n	8011b98 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	7d1b      	ldrb	r3, [r3, #20]
 8011b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b66:	b2da      	uxtb	r2, r3
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	7858      	ldrb	r0, [r3, #1]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b76:	2301      	movs	r3, #1
 8011b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b7a:	f7fd f96d 	bl	800ee58 <disk_read>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d004      	beq.n	8011b8e <f_lseek+0x436>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2201      	movs	r2, #1
 8011b88:	755a      	strb	r2, [r3, #21]
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	e004      	b.n	8011b98 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b92:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011b94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011b98:	4618      	mov	r0, r3
 8011b9a:	3740      	adds	r7, #64	; 0x40
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}

08011ba0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b09e      	sub	sp, #120	; 0x78
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011ba8:	2300      	movs	r3, #0
 8011baa:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011bac:	f107 010c 	add.w	r1, r7, #12
 8011bb0:	1d3b      	adds	r3, r7, #4
 8011bb2:	2202      	movs	r2, #2
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7fe fd17 	bl	80105e8 <find_volume>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011bc4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	f040 80a4 	bne.w	8011d16 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011bd4:	4611      	mov	r1, r2
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7fe fbd6 	bl	8010388 <follow_path>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011be2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d108      	bne.n	8011bfc <f_unlink+0x5c>
 8011bea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011bee:	f003 0320 	and.w	r3, r3, #32
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d002      	beq.n	8011bfc <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011bf6:	2306      	movs	r3, #6
 8011bf8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011bfc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d108      	bne.n	8011c16 <f_unlink+0x76>
 8011c04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011c08:	2102      	movs	r1, #2
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fd fa82 	bl	800f114 <chk_lock>
 8011c10:	4603      	mov	r3, r0
 8011c12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011c16:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d17b      	bne.n	8011d16 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011c1e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011c22:	b25b      	sxtb	r3, r3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	da03      	bge.n	8011c30 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011c28:	2306      	movs	r3, #6
 8011c2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011c2e:	e008      	b.n	8011c42 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011c30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011c34:	f003 0301 	and.w	r3, r3, #1
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d002      	beq.n	8011c42 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011c3c:	2307      	movs	r3, #7
 8011c3e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8011c42:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d13d      	bne.n	8011cc6 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c4e:	4611      	mov	r1, r2
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7fe f98e 	bl	800ff72 <ld_clust>
 8011c56:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011c58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011c5c:	f003 0310 	and.w	r3, r3, #16
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d030      	beq.n	8011cc6 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	699b      	ldr	r3, [r3, #24]
 8011c68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d103      	bne.n	8011c76 <f_unlink+0xd6>
						res = FR_DENIED;
 8011c6e:	2307      	movs	r3, #7
 8011c70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011c74:	e027      	b.n	8011cc6 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c7c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011c7e:	f107 0310 	add.w	r3, r7, #16
 8011c82:	2100      	movs	r1, #0
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fd ffce 	bl	800fc26 <dir_sdi>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011c90:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d116      	bne.n	8011cc6 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011c98:	f107 0310 	add.w	r3, r7, #16
 8011c9c:	2100      	movs	r1, #0
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7fe f9a6 	bl	800fff0 <dir_read>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011caa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d102      	bne.n	8011cb8 <f_unlink+0x118>
 8011cb2:	2307      	movs	r3, #7
 8011cb4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011cb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011cbc:	2b04      	cmp	r3, #4
 8011cbe:	d102      	bne.n	8011cc6 <f_unlink+0x126>
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8011cc6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d123      	bne.n	8011d16 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8011cce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7fe fa70 	bl	80101b8 <dir_remove>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8011cde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d10c      	bne.n	8011d00 <f_unlink+0x160>
 8011ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d009      	beq.n	8011d00 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8011cec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7fd fe61 	bl	800f9bc <remove_chain>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011d00:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d106      	bne.n	8011d16 <f_unlink+0x176>
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7fd fbe0 	bl	800f4d0 <sync_fs>
 8011d10:	4603      	mov	r3, r0
 8011d12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011d16:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3778      	adds	r7, #120	; 0x78
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
	...

08011d24 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b096      	sub	sp, #88	; 0x58
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011d2c:	f107 0108 	add.w	r1, r7, #8
 8011d30:	1d3b      	adds	r3, r7, #4
 8011d32:	2202      	movs	r2, #2
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7fe fc57 	bl	80105e8 <find_volume>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011d44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	f040 80fe 	bne.w	8011f4a <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8011d4e:	687a      	ldr	r2, [r7, #4]
 8011d50:	f107 030c 	add.w	r3, r7, #12
 8011d54:	4611      	mov	r1, r2
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fe fb16 	bl	8010388 <follow_path>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011d62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d102      	bne.n	8011d70 <f_mkdir+0x4c>
 8011d6a:	2308      	movs	r3, #8
 8011d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8011d70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d74:	2b04      	cmp	r3, #4
 8011d76:	d108      	bne.n	8011d8a <f_mkdir+0x66>
 8011d78:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011d7c:	f003 0320 	and.w	r3, r3, #32
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d002      	beq.n	8011d8a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8011d84:	2306      	movs	r3, #6
 8011d86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011d8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d8e:	2b04      	cmp	r3, #4
 8011d90:	f040 80db 	bne.w	8011f4a <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011d94:	f107 030c 	add.w	r3, r7, #12
 8011d98:	2100      	movs	r1, #0
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7fd fe73 	bl	800fa86 <create_chain>
 8011da0:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	895b      	ldrh	r3, [r3, #10]
 8011da6:	461a      	mov	r2, r3
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	899b      	ldrh	r3, [r3, #12]
 8011dac:	fb03 f302 	mul.w	r3, r3, r2
 8011db0:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011db2:	2300      	movs	r3, #0
 8011db4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d102      	bne.n	8011dc4 <f_mkdir+0xa0>
 8011dbe:	2307      	movs	r3, #7
 8011dc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dc6:	2b01      	cmp	r3, #1
 8011dc8:	d102      	bne.n	8011dd0 <f_mkdir+0xac>
 8011dca:	2302      	movs	r3, #2
 8011dcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dd6:	d102      	bne.n	8011dde <f_mkdir+0xba>
 8011dd8:	2301      	movs	r3, #1
 8011dda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011dde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d106      	bne.n	8011df4 <f_mkdir+0xd0>
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7fd faff 	bl	800f3ec <sync_window>
 8011dee:	4603      	mov	r3, r0
 8011df0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011df4:	4b58      	ldr	r3, [pc, #352]	; (8011f58 <f_mkdir+0x234>)
 8011df6:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d16c      	bne.n	8011eda <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7fd fbd3 	bl	800f5b0 <clust2sect>
 8011e0a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	3338      	adds	r3, #56	; 0x38
 8011e10:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	899b      	ldrh	r3, [r3, #12]
 8011e16:	461a      	mov	r2, r3
 8011e18:	2100      	movs	r1, #0
 8011e1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011e1c:	f7fd f91d 	bl	800f05a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011e20:	220b      	movs	r2, #11
 8011e22:	2120      	movs	r1, #32
 8011e24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011e26:	f7fd f918 	bl	800f05a <mem_set>
					dir[DIR_Name] = '.';
 8011e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e2c:	222e      	movs	r2, #46	; 0x2e
 8011e2e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e32:	330b      	adds	r3, #11
 8011e34:	2210      	movs	r2, #16
 8011e36:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e3a:	3316      	adds	r3, #22
 8011e3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fd f8be 	bl	800efc0 <st_dword>
					st_clust(fs, dir, dcl);
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fe f8b0 	bl	800ffb0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e52:	3320      	adds	r3, #32
 8011e54:	2220      	movs	r2, #32
 8011e56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f7fd f8dd 	bl	800f018 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e60:	3321      	adds	r3, #33	; 0x21
 8011e62:	222e      	movs	r2, #46	; 0x2e
 8011e64:	701a      	strb	r2, [r3, #0]
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	2b03      	cmp	r3, #3
 8011e70:	d106      	bne.n	8011e80 <f_mkdir+0x15c>
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d101      	bne.n	8011e80 <f_mkdir+0x15c>
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011e80:	68b8      	ldr	r0, [r7, #8]
 8011e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e84:	3320      	adds	r3, #32
 8011e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e88:	4619      	mov	r1, r3
 8011e8a:	f7fe f891 	bl	800ffb0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	895b      	ldrh	r3, [r3, #10]
 8011e92:	653b      	str	r3, [r7, #80]	; 0x50
 8011e94:	e01c      	b.n	8011ed0 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8011e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e98:	1c5a      	adds	r2, r3, #1
 8011e9a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011e9c:	68ba      	ldr	r2, [r7, #8]
 8011e9e:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	2201      	movs	r2, #1
 8011ea4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7fd fa9f 	bl	800f3ec <sync_window>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8011eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d10d      	bne.n	8011ed8 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	899b      	ldrh	r3, [r3, #12]
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	2100      	movs	r1, #0
 8011ec4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ec6:	f7fd f8c8 	bl	800f05a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ecc:	3b01      	subs	r3, #1
 8011ece:	653b      	str	r3, [r7, #80]	; 0x50
 8011ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d1df      	bne.n	8011e96 <f_mkdir+0x172>
 8011ed6:	e000      	b.n	8011eda <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8011ed8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011eda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d107      	bne.n	8011ef2 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011ee2:	f107 030c 	add.w	r3, r7, #12
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fe f934 	bl	8010154 <dir_register>
 8011eec:	4603      	mov	r3, r0
 8011eee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011ef2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d120      	bne.n	8011f3c <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011efc:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f00:	3316      	adds	r3, #22
 8011f02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7fd f85b 	bl	800efc0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fe f84d 	bl	800ffb0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f18:	330b      	adds	r3, #11
 8011f1a:	2210      	movs	r2, #16
 8011f1c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	2201      	movs	r2, #1
 8011f22:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d10e      	bne.n	8011f4a <f_mkdir+0x226>
					res = sync_fs(fs);
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fd face 	bl	800f4d0 <sync_fs>
 8011f34:	4603      	mov	r3, r0
 8011f36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011f3a:	e006      	b.n	8011f4a <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011f3c:	f107 030c 	add.w	r3, r7, #12
 8011f40:	2200      	movs	r2, #0
 8011f42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7fd fd39 	bl	800f9bc <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011f4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3758      	adds	r7, #88	; 0x58
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}
 8011f56:	bf00      	nop
 8011f58:	274a0000 	.word	0x274a0000

08011f5c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b088      	sub	sp, #32
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011f68:	2300      	movs	r3, #0
 8011f6a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011f70:	e017      	b.n	8011fa2 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011f72:	f107 0310 	add.w	r3, r7, #16
 8011f76:	f107 0114 	add.w	r1, r7, #20
 8011f7a:	2201      	movs	r2, #1
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f7ff f803 	bl	8010f88 <f_read>
		if (rc != 1) break;
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d112      	bne.n	8011fae <f_gets+0x52>
		c = s[0];
 8011f88:	7d3b      	ldrb	r3, [r7, #20]
 8011f8a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8011f8c:	69bb      	ldr	r3, [r7, #24]
 8011f8e:	1c5a      	adds	r2, r3, #1
 8011f90:	61ba      	str	r2, [r7, #24]
 8011f92:	7dfa      	ldrb	r2, [r7, #23]
 8011f94:	701a      	strb	r2, [r3, #0]
		n++;
 8011f96:	69fb      	ldr	r3, [r7, #28]
 8011f98:	3301      	adds	r3, #1
 8011f9a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011f9c:	7dfb      	ldrb	r3, [r7, #23]
 8011f9e:	2b0a      	cmp	r3, #10
 8011fa0:	d007      	beq.n	8011fb2 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	3b01      	subs	r3, #1
 8011fa6:	69fa      	ldr	r2, [r7, #28]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	dbe2      	blt.n	8011f72 <f_gets+0x16>
 8011fac:	e002      	b.n	8011fb4 <f_gets+0x58>
		if (rc != 1) break;
 8011fae:	bf00      	nop
 8011fb0:	e000      	b.n	8011fb4 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8011fb2:	bf00      	nop
	}
	*p = 0;
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011fba:	69fb      	ldr	r3, [r7, #28]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d001      	beq.n	8011fc4 <f_gets+0x68>
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	e000      	b.n	8011fc6 <f_gets+0x6a>
 8011fc4:	2300      	movs	r3, #0
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3720      	adds	r7, #32
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
	...

08011fd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b087      	sub	sp, #28
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	60b9      	str	r1, [r7, #8]
 8011fda:	4613      	mov	r3, r2
 8011fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011fde:	2301      	movs	r3, #1
 8011fe0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011fe6:	4b1f      	ldr	r3, [pc, #124]	; (8012064 <FATFS_LinkDriverEx+0x94>)
 8011fe8:	7a5b      	ldrb	r3, [r3, #9]
 8011fea:	b2db      	uxtb	r3, r3
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d131      	bne.n	8012054 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011ff0:	4b1c      	ldr	r3, [pc, #112]	; (8012064 <FATFS_LinkDriverEx+0x94>)
 8011ff2:	7a5b      	ldrb	r3, [r3, #9]
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	4b1a      	ldr	r3, [pc, #104]	; (8012064 <FATFS_LinkDriverEx+0x94>)
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011ffe:	4b19      	ldr	r3, [pc, #100]	; (8012064 <FATFS_LinkDriverEx+0x94>)
 8012000:	7a5b      	ldrb	r3, [r3, #9]
 8012002:	b2db      	uxtb	r3, r3
 8012004:	4a17      	ldr	r2, [pc, #92]	; (8012064 <FATFS_LinkDriverEx+0x94>)
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	4413      	add	r3, r2
 801200a:	68fa      	ldr	r2, [r7, #12]
 801200c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801200e:	4b15      	ldr	r3, [pc, #84]	; (8012064 <FATFS_LinkDriverEx+0x94>)
 8012010:	7a5b      	ldrb	r3, [r3, #9]
 8012012:	b2db      	uxtb	r3, r3
 8012014:	461a      	mov	r2, r3
 8012016:	4b13      	ldr	r3, [pc, #76]	; (8012064 <FATFS_LinkDriverEx+0x94>)
 8012018:	4413      	add	r3, r2
 801201a:	79fa      	ldrb	r2, [r7, #7]
 801201c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801201e:	4b11      	ldr	r3, [pc, #68]	; (8012064 <FATFS_LinkDriverEx+0x94>)
 8012020:	7a5b      	ldrb	r3, [r3, #9]
 8012022:	b2db      	uxtb	r3, r3
 8012024:	1c5a      	adds	r2, r3, #1
 8012026:	b2d1      	uxtb	r1, r2
 8012028:	4a0e      	ldr	r2, [pc, #56]	; (8012064 <FATFS_LinkDriverEx+0x94>)
 801202a:	7251      	strb	r1, [r2, #9]
 801202c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801202e:	7dbb      	ldrb	r3, [r7, #22]
 8012030:	3330      	adds	r3, #48	; 0x30
 8012032:	b2da      	uxtb	r2, r3
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	3301      	adds	r3, #1
 801203c:	223a      	movs	r2, #58	; 0x3a
 801203e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	3302      	adds	r3, #2
 8012044:	222f      	movs	r2, #47	; 0x2f
 8012046:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	3303      	adds	r3, #3
 801204c:	2200      	movs	r2, #0
 801204e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012050:	2300      	movs	r3, #0
 8012052:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012054:	7dfb      	ldrb	r3, [r7, #23]
}
 8012056:	4618      	mov	r0, r3
 8012058:	371c      	adds	r7, #28
 801205a:	46bd      	mov	sp, r7
 801205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012060:	4770      	bx	lr
 8012062:	bf00      	nop
 8012064:	20033600 	.word	0x20033600

08012068 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012072:	2200      	movs	r2, #0
 8012074:	6839      	ldr	r1, [r7, #0]
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f7ff ffaa 	bl	8011fd0 <FATFS_LinkDriverEx>
 801207c:	4603      	mov	r3, r0
}
 801207e:	4618      	mov	r0, r3
 8012080:	3708      	adds	r7, #8
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}

08012086 <__cxa_guard_acquire>:
 8012086:	6803      	ldr	r3, [r0, #0]
 8012088:	07db      	lsls	r3, r3, #31
 801208a:	d406      	bmi.n	801209a <__cxa_guard_acquire+0x14>
 801208c:	7843      	ldrb	r3, [r0, #1]
 801208e:	b103      	cbz	r3, 8012092 <__cxa_guard_acquire+0xc>
 8012090:	deff      	udf	#255	; 0xff
 8012092:	2301      	movs	r3, #1
 8012094:	7043      	strb	r3, [r0, #1]
 8012096:	4618      	mov	r0, r3
 8012098:	4770      	bx	lr
 801209a:	2000      	movs	r0, #0
 801209c:	4770      	bx	lr

0801209e <__cxa_guard_release>:
 801209e:	2301      	movs	r3, #1
 80120a0:	6003      	str	r3, [r0, #0]
 80120a2:	4770      	bx	lr
 80120a4:	0000      	movs	r0, r0
	...

080120a8 <cos>:
 80120a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120aa:	ec51 0b10 	vmov	r0, r1, d0
 80120ae:	4a1e      	ldr	r2, [pc, #120]	; (8012128 <cos+0x80>)
 80120b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80120b4:	4293      	cmp	r3, r2
 80120b6:	dc06      	bgt.n	80120c6 <cos+0x1e>
 80120b8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8012120 <cos+0x78>
 80120bc:	f000 fa74 	bl	80125a8 <__kernel_cos>
 80120c0:	ec51 0b10 	vmov	r0, r1, d0
 80120c4:	e007      	b.n	80120d6 <cos+0x2e>
 80120c6:	4a19      	ldr	r2, [pc, #100]	; (801212c <cos+0x84>)
 80120c8:	4293      	cmp	r3, r2
 80120ca:	dd09      	ble.n	80120e0 <cos+0x38>
 80120cc:	ee10 2a10 	vmov	r2, s0
 80120d0:	460b      	mov	r3, r1
 80120d2:	f7ee f8f1 	bl	80002b8 <__aeabi_dsub>
 80120d6:	ec41 0b10 	vmov	d0, r0, r1
 80120da:	b005      	add	sp, #20
 80120dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80120e0:	4668      	mov	r0, sp
 80120e2:	f000 f86d 	bl	80121c0 <__ieee754_rem_pio2>
 80120e6:	f000 0003 	and.w	r0, r0, #3
 80120ea:	2801      	cmp	r0, #1
 80120ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120f0:	ed9d 0b00 	vldr	d0, [sp]
 80120f4:	d007      	beq.n	8012106 <cos+0x5e>
 80120f6:	2802      	cmp	r0, #2
 80120f8:	d00e      	beq.n	8012118 <cos+0x70>
 80120fa:	2800      	cmp	r0, #0
 80120fc:	d0de      	beq.n	80120bc <cos+0x14>
 80120fe:	2001      	movs	r0, #1
 8012100:	f000 fe5a 	bl	8012db8 <__kernel_sin>
 8012104:	e7dc      	b.n	80120c0 <cos+0x18>
 8012106:	f000 fe57 	bl	8012db8 <__kernel_sin>
 801210a:	ec53 2b10 	vmov	r2, r3, d0
 801210e:	ee10 0a10 	vmov	r0, s0
 8012112:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012116:	e7de      	b.n	80120d6 <cos+0x2e>
 8012118:	f000 fa46 	bl	80125a8 <__kernel_cos>
 801211c:	e7f5      	b.n	801210a <cos+0x62>
 801211e:	bf00      	nop
	...
 8012128:	3fe921fb 	.word	0x3fe921fb
 801212c:	7fefffff 	.word	0x7fefffff

08012130 <sin>:
 8012130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012132:	ec51 0b10 	vmov	r0, r1, d0
 8012136:	4a20      	ldr	r2, [pc, #128]	; (80121b8 <sin+0x88>)
 8012138:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801213c:	4293      	cmp	r3, r2
 801213e:	dc07      	bgt.n	8012150 <sin+0x20>
 8012140:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80121b0 <sin+0x80>
 8012144:	2000      	movs	r0, #0
 8012146:	f000 fe37 	bl	8012db8 <__kernel_sin>
 801214a:	ec51 0b10 	vmov	r0, r1, d0
 801214e:	e007      	b.n	8012160 <sin+0x30>
 8012150:	4a1a      	ldr	r2, [pc, #104]	; (80121bc <sin+0x8c>)
 8012152:	4293      	cmp	r3, r2
 8012154:	dd09      	ble.n	801216a <sin+0x3a>
 8012156:	ee10 2a10 	vmov	r2, s0
 801215a:	460b      	mov	r3, r1
 801215c:	f7ee f8ac 	bl	80002b8 <__aeabi_dsub>
 8012160:	ec41 0b10 	vmov	d0, r0, r1
 8012164:	b005      	add	sp, #20
 8012166:	f85d fb04 	ldr.w	pc, [sp], #4
 801216a:	4668      	mov	r0, sp
 801216c:	f000 f828 	bl	80121c0 <__ieee754_rem_pio2>
 8012170:	f000 0003 	and.w	r0, r0, #3
 8012174:	2801      	cmp	r0, #1
 8012176:	ed9d 1b02 	vldr	d1, [sp, #8]
 801217a:	ed9d 0b00 	vldr	d0, [sp]
 801217e:	d004      	beq.n	801218a <sin+0x5a>
 8012180:	2802      	cmp	r0, #2
 8012182:	d005      	beq.n	8012190 <sin+0x60>
 8012184:	b970      	cbnz	r0, 80121a4 <sin+0x74>
 8012186:	2001      	movs	r0, #1
 8012188:	e7dd      	b.n	8012146 <sin+0x16>
 801218a:	f000 fa0d 	bl	80125a8 <__kernel_cos>
 801218e:	e7dc      	b.n	801214a <sin+0x1a>
 8012190:	2001      	movs	r0, #1
 8012192:	f000 fe11 	bl	8012db8 <__kernel_sin>
 8012196:	ec53 2b10 	vmov	r2, r3, d0
 801219a:	ee10 0a10 	vmov	r0, s0
 801219e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80121a2:	e7dd      	b.n	8012160 <sin+0x30>
 80121a4:	f000 fa00 	bl	80125a8 <__kernel_cos>
 80121a8:	e7f5      	b.n	8012196 <sin+0x66>
 80121aa:	bf00      	nop
 80121ac:	f3af 8000 	nop.w
	...
 80121b8:	3fe921fb 	.word	0x3fe921fb
 80121bc:	7fefffff 	.word	0x7fefffff

080121c0 <__ieee754_rem_pio2>:
 80121c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c4:	ec57 6b10 	vmov	r6, r7, d0
 80121c8:	4bc3      	ldr	r3, [pc, #780]	; (80124d8 <__ieee754_rem_pio2+0x318>)
 80121ca:	b08d      	sub	sp, #52	; 0x34
 80121cc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80121d0:	4598      	cmp	r8, r3
 80121d2:	4604      	mov	r4, r0
 80121d4:	9704      	str	r7, [sp, #16]
 80121d6:	dc07      	bgt.n	80121e8 <__ieee754_rem_pio2+0x28>
 80121d8:	2200      	movs	r2, #0
 80121da:	2300      	movs	r3, #0
 80121dc:	ed84 0b00 	vstr	d0, [r4]
 80121e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80121e4:	2500      	movs	r5, #0
 80121e6:	e027      	b.n	8012238 <__ieee754_rem_pio2+0x78>
 80121e8:	4bbc      	ldr	r3, [pc, #752]	; (80124dc <__ieee754_rem_pio2+0x31c>)
 80121ea:	4598      	cmp	r8, r3
 80121ec:	dc75      	bgt.n	80122da <__ieee754_rem_pio2+0x11a>
 80121ee:	9b04      	ldr	r3, [sp, #16]
 80121f0:	4dbb      	ldr	r5, [pc, #748]	; (80124e0 <__ieee754_rem_pio2+0x320>)
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	ee10 0a10 	vmov	r0, s0
 80121f8:	a3a9      	add	r3, pc, #676	; (adr r3, 80124a0 <__ieee754_rem_pio2+0x2e0>)
 80121fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fe:	4639      	mov	r1, r7
 8012200:	dd36      	ble.n	8012270 <__ieee754_rem_pio2+0xb0>
 8012202:	f7ee f859 	bl	80002b8 <__aeabi_dsub>
 8012206:	45a8      	cmp	r8, r5
 8012208:	4606      	mov	r6, r0
 801220a:	460f      	mov	r7, r1
 801220c:	d018      	beq.n	8012240 <__ieee754_rem_pio2+0x80>
 801220e:	a3a6      	add	r3, pc, #664	; (adr r3, 80124a8 <__ieee754_rem_pio2+0x2e8>)
 8012210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012214:	f7ee f850 	bl	80002b8 <__aeabi_dsub>
 8012218:	4602      	mov	r2, r0
 801221a:	460b      	mov	r3, r1
 801221c:	e9c4 2300 	strd	r2, r3, [r4]
 8012220:	4630      	mov	r0, r6
 8012222:	4639      	mov	r1, r7
 8012224:	f7ee f848 	bl	80002b8 <__aeabi_dsub>
 8012228:	a39f      	add	r3, pc, #636	; (adr r3, 80124a8 <__ieee754_rem_pio2+0x2e8>)
 801222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801222e:	f7ee f843 	bl	80002b8 <__aeabi_dsub>
 8012232:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012236:	2501      	movs	r5, #1
 8012238:	4628      	mov	r0, r5
 801223a:	b00d      	add	sp, #52	; 0x34
 801223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012240:	a39b      	add	r3, pc, #620	; (adr r3, 80124b0 <__ieee754_rem_pio2+0x2f0>)
 8012242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012246:	f7ee f837 	bl	80002b8 <__aeabi_dsub>
 801224a:	a39b      	add	r3, pc, #620	; (adr r3, 80124b8 <__ieee754_rem_pio2+0x2f8>)
 801224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012250:	4606      	mov	r6, r0
 8012252:	460f      	mov	r7, r1
 8012254:	f7ee f830 	bl	80002b8 <__aeabi_dsub>
 8012258:	4602      	mov	r2, r0
 801225a:	460b      	mov	r3, r1
 801225c:	e9c4 2300 	strd	r2, r3, [r4]
 8012260:	4630      	mov	r0, r6
 8012262:	4639      	mov	r1, r7
 8012264:	f7ee f828 	bl	80002b8 <__aeabi_dsub>
 8012268:	a393      	add	r3, pc, #588	; (adr r3, 80124b8 <__ieee754_rem_pio2+0x2f8>)
 801226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226e:	e7de      	b.n	801222e <__ieee754_rem_pio2+0x6e>
 8012270:	f7ee f824 	bl	80002bc <__adddf3>
 8012274:	45a8      	cmp	r8, r5
 8012276:	4606      	mov	r6, r0
 8012278:	460f      	mov	r7, r1
 801227a:	d016      	beq.n	80122aa <__ieee754_rem_pio2+0xea>
 801227c:	a38a      	add	r3, pc, #552	; (adr r3, 80124a8 <__ieee754_rem_pio2+0x2e8>)
 801227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012282:	f7ee f81b 	bl	80002bc <__adddf3>
 8012286:	4602      	mov	r2, r0
 8012288:	460b      	mov	r3, r1
 801228a:	e9c4 2300 	strd	r2, r3, [r4]
 801228e:	4630      	mov	r0, r6
 8012290:	4639      	mov	r1, r7
 8012292:	f7ee f811 	bl	80002b8 <__aeabi_dsub>
 8012296:	a384      	add	r3, pc, #528	; (adr r3, 80124a8 <__ieee754_rem_pio2+0x2e8>)
 8012298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229c:	f7ee f80e 	bl	80002bc <__adddf3>
 80122a0:	f04f 35ff 	mov.w	r5, #4294967295
 80122a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80122a8:	e7c6      	b.n	8012238 <__ieee754_rem_pio2+0x78>
 80122aa:	a381      	add	r3, pc, #516	; (adr r3, 80124b0 <__ieee754_rem_pio2+0x2f0>)
 80122ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b0:	f7ee f804 	bl	80002bc <__adddf3>
 80122b4:	a380      	add	r3, pc, #512	; (adr r3, 80124b8 <__ieee754_rem_pio2+0x2f8>)
 80122b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ba:	4606      	mov	r6, r0
 80122bc:	460f      	mov	r7, r1
 80122be:	f7ed fffd 	bl	80002bc <__adddf3>
 80122c2:	4602      	mov	r2, r0
 80122c4:	460b      	mov	r3, r1
 80122c6:	e9c4 2300 	strd	r2, r3, [r4]
 80122ca:	4630      	mov	r0, r6
 80122cc:	4639      	mov	r1, r7
 80122ce:	f7ed fff3 	bl	80002b8 <__aeabi_dsub>
 80122d2:	a379      	add	r3, pc, #484	; (adr r3, 80124b8 <__ieee754_rem_pio2+0x2f8>)
 80122d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d8:	e7e0      	b.n	801229c <__ieee754_rem_pio2+0xdc>
 80122da:	4b82      	ldr	r3, [pc, #520]	; (80124e4 <__ieee754_rem_pio2+0x324>)
 80122dc:	4598      	cmp	r8, r3
 80122de:	f300 80d0 	bgt.w	8012482 <__ieee754_rem_pio2+0x2c2>
 80122e2:	f000 fe23 	bl	8012f2c <fabs>
 80122e6:	ec57 6b10 	vmov	r6, r7, d0
 80122ea:	ee10 0a10 	vmov	r0, s0
 80122ee:	a374      	add	r3, pc, #464	; (adr r3, 80124c0 <__ieee754_rem_pio2+0x300>)
 80122f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f4:	4639      	mov	r1, r7
 80122f6:	f7ee f997 	bl	8000628 <__aeabi_dmul>
 80122fa:	2200      	movs	r2, #0
 80122fc:	4b7a      	ldr	r3, [pc, #488]	; (80124e8 <__ieee754_rem_pio2+0x328>)
 80122fe:	f7ed ffdd 	bl	80002bc <__adddf3>
 8012302:	f7ee fc41 	bl	8000b88 <__aeabi_d2iz>
 8012306:	4605      	mov	r5, r0
 8012308:	f7ee f924 	bl	8000554 <__aeabi_i2d>
 801230c:	a364      	add	r3, pc, #400	; (adr r3, 80124a0 <__ieee754_rem_pio2+0x2e0>)
 801230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012316:	f7ee f987 	bl	8000628 <__aeabi_dmul>
 801231a:	4602      	mov	r2, r0
 801231c:	460b      	mov	r3, r1
 801231e:	4630      	mov	r0, r6
 8012320:	4639      	mov	r1, r7
 8012322:	f7ed ffc9 	bl	80002b8 <__aeabi_dsub>
 8012326:	a360      	add	r3, pc, #384	; (adr r3, 80124a8 <__ieee754_rem_pio2+0x2e8>)
 8012328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232c:	4682      	mov	sl, r0
 801232e:	468b      	mov	fp, r1
 8012330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012334:	f7ee f978 	bl	8000628 <__aeabi_dmul>
 8012338:	2d1f      	cmp	r5, #31
 801233a:	4606      	mov	r6, r0
 801233c:	460f      	mov	r7, r1
 801233e:	dc0c      	bgt.n	801235a <__ieee754_rem_pio2+0x19a>
 8012340:	1e6a      	subs	r2, r5, #1
 8012342:	4b6a      	ldr	r3, [pc, #424]	; (80124ec <__ieee754_rem_pio2+0x32c>)
 8012344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012348:	4543      	cmp	r3, r8
 801234a:	d006      	beq.n	801235a <__ieee754_rem_pio2+0x19a>
 801234c:	4632      	mov	r2, r6
 801234e:	463b      	mov	r3, r7
 8012350:	4650      	mov	r0, sl
 8012352:	4659      	mov	r1, fp
 8012354:	f7ed ffb0 	bl	80002b8 <__aeabi_dsub>
 8012358:	e00e      	b.n	8012378 <__ieee754_rem_pio2+0x1b8>
 801235a:	4632      	mov	r2, r6
 801235c:	463b      	mov	r3, r7
 801235e:	4650      	mov	r0, sl
 8012360:	4659      	mov	r1, fp
 8012362:	f7ed ffa9 	bl	80002b8 <__aeabi_dsub>
 8012366:	ea4f 5328 	mov.w	r3, r8, asr #20
 801236a:	9305      	str	r3, [sp, #20]
 801236c:	9a05      	ldr	r2, [sp, #20]
 801236e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012372:	1ad3      	subs	r3, r2, r3
 8012374:	2b10      	cmp	r3, #16
 8012376:	dc02      	bgt.n	801237e <__ieee754_rem_pio2+0x1be>
 8012378:	e9c4 0100 	strd	r0, r1, [r4]
 801237c:	e039      	b.n	80123f2 <__ieee754_rem_pio2+0x232>
 801237e:	a34c      	add	r3, pc, #304	; (adr r3, 80124b0 <__ieee754_rem_pio2+0x2f0>)
 8012380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012388:	f7ee f94e 	bl	8000628 <__aeabi_dmul>
 801238c:	4606      	mov	r6, r0
 801238e:	460f      	mov	r7, r1
 8012390:	4602      	mov	r2, r0
 8012392:	460b      	mov	r3, r1
 8012394:	4650      	mov	r0, sl
 8012396:	4659      	mov	r1, fp
 8012398:	f7ed ff8e 	bl	80002b8 <__aeabi_dsub>
 801239c:	4602      	mov	r2, r0
 801239e:	460b      	mov	r3, r1
 80123a0:	4680      	mov	r8, r0
 80123a2:	4689      	mov	r9, r1
 80123a4:	4650      	mov	r0, sl
 80123a6:	4659      	mov	r1, fp
 80123a8:	f7ed ff86 	bl	80002b8 <__aeabi_dsub>
 80123ac:	4632      	mov	r2, r6
 80123ae:	463b      	mov	r3, r7
 80123b0:	f7ed ff82 	bl	80002b8 <__aeabi_dsub>
 80123b4:	a340      	add	r3, pc, #256	; (adr r3, 80124b8 <__ieee754_rem_pio2+0x2f8>)
 80123b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ba:	4606      	mov	r6, r0
 80123bc:	460f      	mov	r7, r1
 80123be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123c2:	f7ee f931 	bl	8000628 <__aeabi_dmul>
 80123c6:	4632      	mov	r2, r6
 80123c8:	463b      	mov	r3, r7
 80123ca:	f7ed ff75 	bl	80002b8 <__aeabi_dsub>
 80123ce:	4602      	mov	r2, r0
 80123d0:	460b      	mov	r3, r1
 80123d2:	4606      	mov	r6, r0
 80123d4:	460f      	mov	r7, r1
 80123d6:	4640      	mov	r0, r8
 80123d8:	4649      	mov	r1, r9
 80123da:	f7ed ff6d 	bl	80002b8 <__aeabi_dsub>
 80123de:	9a05      	ldr	r2, [sp, #20]
 80123e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80123e4:	1ad3      	subs	r3, r2, r3
 80123e6:	2b31      	cmp	r3, #49	; 0x31
 80123e8:	dc20      	bgt.n	801242c <__ieee754_rem_pio2+0x26c>
 80123ea:	e9c4 0100 	strd	r0, r1, [r4]
 80123ee:	46c2      	mov	sl, r8
 80123f0:	46cb      	mov	fp, r9
 80123f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80123f6:	4650      	mov	r0, sl
 80123f8:	4642      	mov	r2, r8
 80123fa:	464b      	mov	r3, r9
 80123fc:	4659      	mov	r1, fp
 80123fe:	f7ed ff5b 	bl	80002b8 <__aeabi_dsub>
 8012402:	463b      	mov	r3, r7
 8012404:	4632      	mov	r2, r6
 8012406:	f7ed ff57 	bl	80002b8 <__aeabi_dsub>
 801240a:	9b04      	ldr	r3, [sp, #16]
 801240c:	2b00      	cmp	r3, #0
 801240e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012412:	f6bf af11 	bge.w	8012238 <__ieee754_rem_pio2+0x78>
 8012416:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801241a:	6063      	str	r3, [r4, #4]
 801241c:	f8c4 8000 	str.w	r8, [r4]
 8012420:	60a0      	str	r0, [r4, #8]
 8012422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012426:	60e3      	str	r3, [r4, #12]
 8012428:	426d      	negs	r5, r5
 801242a:	e705      	b.n	8012238 <__ieee754_rem_pio2+0x78>
 801242c:	a326      	add	r3, pc, #152	; (adr r3, 80124c8 <__ieee754_rem_pio2+0x308>)
 801242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012436:	f7ee f8f7 	bl	8000628 <__aeabi_dmul>
 801243a:	4606      	mov	r6, r0
 801243c:	460f      	mov	r7, r1
 801243e:	4602      	mov	r2, r0
 8012440:	460b      	mov	r3, r1
 8012442:	4640      	mov	r0, r8
 8012444:	4649      	mov	r1, r9
 8012446:	f7ed ff37 	bl	80002b8 <__aeabi_dsub>
 801244a:	4602      	mov	r2, r0
 801244c:	460b      	mov	r3, r1
 801244e:	4682      	mov	sl, r0
 8012450:	468b      	mov	fp, r1
 8012452:	4640      	mov	r0, r8
 8012454:	4649      	mov	r1, r9
 8012456:	f7ed ff2f 	bl	80002b8 <__aeabi_dsub>
 801245a:	4632      	mov	r2, r6
 801245c:	463b      	mov	r3, r7
 801245e:	f7ed ff2b 	bl	80002b8 <__aeabi_dsub>
 8012462:	a31b      	add	r3, pc, #108	; (adr r3, 80124d0 <__ieee754_rem_pio2+0x310>)
 8012464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012468:	4606      	mov	r6, r0
 801246a:	460f      	mov	r7, r1
 801246c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012470:	f7ee f8da 	bl	8000628 <__aeabi_dmul>
 8012474:	4632      	mov	r2, r6
 8012476:	463b      	mov	r3, r7
 8012478:	f7ed ff1e 	bl	80002b8 <__aeabi_dsub>
 801247c:	4606      	mov	r6, r0
 801247e:	460f      	mov	r7, r1
 8012480:	e764      	b.n	801234c <__ieee754_rem_pio2+0x18c>
 8012482:	4b1b      	ldr	r3, [pc, #108]	; (80124f0 <__ieee754_rem_pio2+0x330>)
 8012484:	4598      	cmp	r8, r3
 8012486:	dd35      	ble.n	80124f4 <__ieee754_rem_pio2+0x334>
 8012488:	ee10 2a10 	vmov	r2, s0
 801248c:	463b      	mov	r3, r7
 801248e:	4630      	mov	r0, r6
 8012490:	4639      	mov	r1, r7
 8012492:	f7ed ff11 	bl	80002b8 <__aeabi_dsub>
 8012496:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801249a:	e9c4 0100 	strd	r0, r1, [r4]
 801249e:	e6a1      	b.n	80121e4 <__ieee754_rem_pio2+0x24>
 80124a0:	54400000 	.word	0x54400000
 80124a4:	3ff921fb 	.word	0x3ff921fb
 80124a8:	1a626331 	.word	0x1a626331
 80124ac:	3dd0b461 	.word	0x3dd0b461
 80124b0:	1a600000 	.word	0x1a600000
 80124b4:	3dd0b461 	.word	0x3dd0b461
 80124b8:	2e037073 	.word	0x2e037073
 80124bc:	3ba3198a 	.word	0x3ba3198a
 80124c0:	6dc9c883 	.word	0x6dc9c883
 80124c4:	3fe45f30 	.word	0x3fe45f30
 80124c8:	2e000000 	.word	0x2e000000
 80124cc:	3ba3198a 	.word	0x3ba3198a
 80124d0:	252049c1 	.word	0x252049c1
 80124d4:	397b839a 	.word	0x397b839a
 80124d8:	3fe921fb 	.word	0x3fe921fb
 80124dc:	4002d97b 	.word	0x4002d97b
 80124e0:	3ff921fb 	.word	0x3ff921fb
 80124e4:	413921fb 	.word	0x413921fb
 80124e8:	3fe00000 	.word	0x3fe00000
 80124ec:	080185f8 	.word	0x080185f8
 80124f0:	7fefffff 	.word	0x7fefffff
 80124f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80124f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80124fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012500:	4630      	mov	r0, r6
 8012502:	460f      	mov	r7, r1
 8012504:	f7ee fb40 	bl	8000b88 <__aeabi_d2iz>
 8012508:	f7ee f824 	bl	8000554 <__aeabi_i2d>
 801250c:	4602      	mov	r2, r0
 801250e:	460b      	mov	r3, r1
 8012510:	4630      	mov	r0, r6
 8012512:	4639      	mov	r1, r7
 8012514:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012518:	f7ed fece 	bl	80002b8 <__aeabi_dsub>
 801251c:	2200      	movs	r2, #0
 801251e:	4b1f      	ldr	r3, [pc, #124]	; (801259c <__ieee754_rem_pio2+0x3dc>)
 8012520:	f7ee f882 	bl	8000628 <__aeabi_dmul>
 8012524:	460f      	mov	r7, r1
 8012526:	4606      	mov	r6, r0
 8012528:	f7ee fb2e 	bl	8000b88 <__aeabi_d2iz>
 801252c:	f7ee f812 	bl	8000554 <__aeabi_i2d>
 8012530:	4602      	mov	r2, r0
 8012532:	460b      	mov	r3, r1
 8012534:	4630      	mov	r0, r6
 8012536:	4639      	mov	r1, r7
 8012538:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801253c:	f7ed febc 	bl	80002b8 <__aeabi_dsub>
 8012540:	2200      	movs	r2, #0
 8012542:	4b16      	ldr	r3, [pc, #88]	; (801259c <__ieee754_rem_pio2+0x3dc>)
 8012544:	f7ee f870 	bl	8000628 <__aeabi_dmul>
 8012548:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801254c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012550:	f04f 0803 	mov.w	r8, #3
 8012554:	2600      	movs	r6, #0
 8012556:	2700      	movs	r7, #0
 8012558:	4632      	mov	r2, r6
 801255a:	463b      	mov	r3, r7
 801255c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012560:	f108 3aff 	add.w	sl, r8, #4294967295
 8012564:	f7ee fac8 	bl	8000af8 <__aeabi_dcmpeq>
 8012568:	b9b0      	cbnz	r0, 8012598 <__ieee754_rem_pio2+0x3d8>
 801256a:	4b0d      	ldr	r3, [pc, #52]	; (80125a0 <__ieee754_rem_pio2+0x3e0>)
 801256c:	9301      	str	r3, [sp, #4]
 801256e:	2302      	movs	r3, #2
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	462a      	mov	r2, r5
 8012574:	4643      	mov	r3, r8
 8012576:	4621      	mov	r1, r4
 8012578:	a806      	add	r0, sp, #24
 801257a:	f000 f8dd 	bl	8012738 <__kernel_rem_pio2>
 801257e:	9b04      	ldr	r3, [sp, #16]
 8012580:	2b00      	cmp	r3, #0
 8012582:	4605      	mov	r5, r0
 8012584:	f6bf ae58 	bge.w	8012238 <__ieee754_rem_pio2+0x78>
 8012588:	6863      	ldr	r3, [r4, #4]
 801258a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801258e:	6063      	str	r3, [r4, #4]
 8012590:	68e3      	ldr	r3, [r4, #12]
 8012592:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012596:	e746      	b.n	8012426 <__ieee754_rem_pio2+0x266>
 8012598:	46d0      	mov	r8, sl
 801259a:	e7dd      	b.n	8012558 <__ieee754_rem_pio2+0x398>
 801259c:	41700000 	.word	0x41700000
 80125a0:	08018678 	.word	0x08018678
 80125a4:	00000000 	.word	0x00000000

080125a8 <__kernel_cos>:
 80125a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ac:	ec59 8b10 	vmov	r8, r9, d0
 80125b0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80125b4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80125b8:	ed2d 8b02 	vpush	{d8}
 80125bc:	eeb0 8a41 	vmov.f32	s16, s2
 80125c0:	eef0 8a61 	vmov.f32	s17, s3
 80125c4:	da07      	bge.n	80125d6 <__kernel_cos+0x2e>
 80125c6:	ee10 0a10 	vmov	r0, s0
 80125ca:	4649      	mov	r1, r9
 80125cc:	f7ee fadc 	bl	8000b88 <__aeabi_d2iz>
 80125d0:	2800      	cmp	r0, #0
 80125d2:	f000 8089 	beq.w	80126e8 <__kernel_cos+0x140>
 80125d6:	4642      	mov	r2, r8
 80125d8:	464b      	mov	r3, r9
 80125da:	4640      	mov	r0, r8
 80125dc:	4649      	mov	r1, r9
 80125de:	f7ee f823 	bl	8000628 <__aeabi_dmul>
 80125e2:	2200      	movs	r2, #0
 80125e4:	4b4e      	ldr	r3, [pc, #312]	; (8012720 <__kernel_cos+0x178>)
 80125e6:	4604      	mov	r4, r0
 80125e8:	460d      	mov	r5, r1
 80125ea:	f7ee f81d 	bl	8000628 <__aeabi_dmul>
 80125ee:	a340      	add	r3, pc, #256	; (adr r3, 80126f0 <__kernel_cos+0x148>)
 80125f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f4:	4682      	mov	sl, r0
 80125f6:	468b      	mov	fp, r1
 80125f8:	4620      	mov	r0, r4
 80125fa:	4629      	mov	r1, r5
 80125fc:	f7ee f814 	bl	8000628 <__aeabi_dmul>
 8012600:	a33d      	add	r3, pc, #244	; (adr r3, 80126f8 <__kernel_cos+0x150>)
 8012602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012606:	f7ed fe59 	bl	80002bc <__adddf3>
 801260a:	4622      	mov	r2, r4
 801260c:	462b      	mov	r3, r5
 801260e:	f7ee f80b 	bl	8000628 <__aeabi_dmul>
 8012612:	a33b      	add	r3, pc, #236	; (adr r3, 8012700 <__kernel_cos+0x158>)
 8012614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012618:	f7ed fe4e 	bl	80002b8 <__aeabi_dsub>
 801261c:	4622      	mov	r2, r4
 801261e:	462b      	mov	r3, r5
 8012620:	f7ee f802 	bl	8000628 <__aeabi_dmul>
 8012624:	a338      	add	r3, pc, #224	; (adr r3, 8012708 <__kernel_cos+0x160>)
 8012626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262a:	f7ed fe47 	bl	80002bc <__adddf3>
 801262e:	4622      	mov	r2, r4
 8012630:	462b      	mov	r3, r5
 8012632:	f7ed fff9 	bl	8000628 <__aeabi_dmul>
 8012636:	a336      	add	r3, pc, #216	; (adr r3, 8012710 <__kernel_cos+0x168>)
 8012638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263c:	f7ed fe3c 	bl	80002b8 <__aeabi_dsub>
 8012640:	4622      	mov	r2, r4
 8012642:	462b      	mov	r3, r5
 8012644:	f7ed fff0 	bl	8000628 <__aeabi_dmul>
 8012648:	a333      	add	r3, pc, #204	; (adr r3, 8012718 <__kernel_cos+0x170>)
 801264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264e:	f7ed fe35 	bl	80002bc <__adddf3>
 8012652:	4622      	mov	r2, r4
 8012654:	462b      	mov	r3, r5
 8012656:	f7ed ffe7 	bl	8000628 <__aeabi_dmul>
 801265a:	4622      	mov	r2, r4
 801265c:	462b      	mov	r3, r5
 801265e:	f7ed ffe3 	bl	8000628 <__aeabi_dmul>
 8012662:	ec53 2b18 	vmov	r2, r3, d8
 8012666:	4604      	mov	r4, r0
 8012668:	460d      	mov	r5, r1
 801266a:	4640      	mov	r0, r8
 801266c:	4649      	mov	r1, r9
 801266e:	f7ed ffdb 	bl	8000628 <__aeabi_dmul>
 8012672:	460b      	mov	r3, r1
 8012674:	4602      	mov	r2, r0
 8012676:	4629      	mov	r1, r5
 8012678:	4620      	mov	r0, r4
 801267a:	f7ed fe1d 	bl	80002b8 <__aeabi_dsub>
 801267e:	4b29      	ldr	r3, [pc, #164]	; (8012724 <__kernel_cos+0x17c>)
 8012680:	429e      	cmp	r6, r3
 8012682:	4680      	mov	r8, r0
 8012684:	4689      	mov	r9, r1
 8012686:	dc11      	bgt.n	80126ac <__kernel_cos+0x104>
 8012688:	4602      	mov	r2, r0
 801268a:	460b      	mov	r3, r1
 801268c:	4650      	mov	r0, sl
 801268e:	4659      	mov	r1, fp
 8012690:	f7ed fe12 	bl	80002b8 <__aeabi_dsub>
 8012694:	460b      	mov	r3, r1
 8012696:	4924      	ldr	r1, [pc, #144]	; (8012728 <__kernel_cos+0x180>)
 8012698:	4602      	mov	r2, r0
 801269a:	2000      	movs	r0, #0
 801269c:	f7ed fe0c 	bl	80002b8 <__aeabi_dsub>
 80126a0:	ecbd 8b02 	vpop	{d8}
 80126a4:	ec41 0b10 	vmov	d0, r0, r1
 80126a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ac:	4b1f      	ldr	r3, [pc, #124]	; (801272c <__kernel_cos+0x184>)
 80126ae:	491e      	ldr	r1, [pc, #120]	; (8012728 <__kernel_cos+0x180>)
 80126b0:	429e      	cmp	r6, r3
 80126b2:	bfcc      	ite	gt
 80126b4:	4d1e      	ldrgt	r5, [pc, #120]	; (8012730 <__kernel_cos+0x188>)
 80126b6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80126ba:	2400      	movs	r4, #0
 80126bc:	4622      	mov	r2, r4
 80126be:	462b      	mov	r3, r5
 80126c0:	2000      	movs	r0, #0
 80126c2:	f7ed fdf9 	bl	80002b8 <__aeabi_dsub>
 80126c6:	4622      	mov	r2, r4
 80126c8:	4606      	mov	r6, r0
 80126ca:	460f      	mov	r7, r1
 80126cc:	462b      	mov	r3, r5
 80126ce:	4650      	mov	r0, sl
 80126d0:	4659      	mov	r1, fp
 80126d2:	f7ed fdf1 	bl	80002b8 <__aeabi_dsub>
 80126d6:	4642      	mov	r2, r8
 80126d8:	464b      	mov	r3, r9
 80126da:	f7ed fded 	bl	80002b8 <__aeabi_dsub>
 80126de:	4602      	mov	r2, r0
 80126e0:	460b      	mov	r3, r1
 80126e2:	4630      	mov	r0, r6
 80126e4:	4639      	mov	r1, r7
 80126e6:	e7d9      	b.n	801269c <__kernel_cos+0xf4>
 80126e8:	2000      	movs	r0, #0
 80126ea:	490f      	ldr	r1, [pc, #60]	; (8012728 <__kernel_cos+0x180>)
 80126ec:	e7d8      	b.n	80126a0 <__kernel_cos+0xf8>
 80126ee:	bf00      	nop
 80126f0:	be8838d4 	.word	0xbe8838d4
 80126f4:	bda8fae9 	.word	0xbda8fae9
 80126f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80126fc:	3e21ee9e 	.word	0x3e21ee9e
 8012700:	809c52ad 	.word	0x809c52ad
 8012704:	3e927e4f 	.word	0x3e927e4f
 8012708:	19cb1590 	.word	0x19cb1590
 801270c:	3efa01a0 	.word	0x3efa01a0
 8012710:	16c15177 	.word	0x16c15177
 8012714:	3f56c16c 	.word	0x3f56c16c
 8012718:	5555554c 	.word	0x5555554c
 801271c:	3fa55555 	.word	0x3fa55555
 8012720:	3fe00000 	.word	0x3fe00000
 8012724:	3fd33332 	.word	0x3fd33332
 8012728:	3ff00000 	.word	0x3ff00000
 801272c:	3fe90000 	.word	0x3fe90000
 8012730:	3fd20000 	.word	0x3fd20000
 8012734:	00000000 	.word	0x00000000

08012738 <__kernel_rem_pio2>:
 8012738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801273c:	ed2d 8b02 	vpush	{d8}
 8012740:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012744:	1ed4      	subs	r4, r2, #3
 8012746:	9308      	str	r3, [sp, #32]
 8012748:	9101      	str	r1, [sp, #4]
 801274a:	4bc5      	ldr	r3, [pc, #788]	; (8012a60 <__kernel_rem_pio2+0x328>)
 801274c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801274e:	9009      	str	r0, [sp, #36]	; 0x24
 8012750:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012754:	9304      	str	r3, [sp, #16]
 8012756:	9b08      	ldr	r3, [sp, #32]
 8012758:	3b01      	subs	r3, #1
 801275a:	9307      	str	r3, [sp, #28]
 801275c:	2318      	movs	r3, #24
 801275e:	fb94 f4f3 	sdiv	r4, r4, r3
 8012762:	f06f 0317 	mvn.w	r3, #23
 8012766:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801276a:	fb04 3303 	mla	r3, r4, r3, r3
 801276e:	eb03 0a02 	add.w	sl, r3, r2
 8012772:	9b04      	ldr	r3, [sp, #16]
 8012774:	9a07      	ldr	r2, [sp, #28]
 8012776:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012a50 <__kernel_rem_pio2+0x318>
 801277a:	eb03 0802 	add.w	r8, r3, r2
 801277e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012780:	1aa7      	subs	r7, r4, r2
 8012782:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012786:	ae22      	add	r6, sp, #136	; 0x88
 8012788:	2500      	movs	r5, #0
 801278a:	4545      	cmp	r5, r8
 801278c:	dd13      	ble.n	80127b6 <__kernel_rem_pio2+0x7e>
 801278e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012a50 <__kernel_rem_pio2+0x318>
 8012792:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012796:	2600      	movs	r6, #0
 8012798:	9b04      	ldr	r3, [sp, #16]
 801279a:	429e      	cmp	r6, r3
 801279c:	dc32      	bgt.n	8012804 <__kernel_rem_pio2+0xcc>
 801279e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127a0:	9302      	str	r3, [sp, #8]
 80127a2:	9b08      	ldr	r3, [sp, #32]
 80127a4:	199d      	adds	r5, r3, r6
 80127a6:	ab22      	add	r3, sp, #136	; 0x88
 80127a8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80127ac:	9306      	str	r3, [sp, #24]
 80127ae:	ec59 8b18 	vmov	r8, r9, d8
 80127b2:	2700      	movs	r7, #0
 80127b4:	e01f      	b.n	80127f6 <__kernel_rem_pio2+0xbe>
 80127b6:	42ef      	cmn	r7, r5
 80127b8:	d407      	bmi.n	80127ca <__kernel_rem_pio2+0x92>
 80127ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80127be:	f7ed fec9 	bl	8000554 <__aeabi_i2d>
 80127c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80127c6:	3501      	adds	r5, #1
 80127c8:	e7df      	b.n	801278a <__kernel_rem_pio2+0x52>
 80127ca:	ec51 0b18 	vmov	r0, r1, d8
 80127ce:	e7f8      	b.n	80127c2 <__kernel_rem_pio2+0x8a>
 80127d0:	9906      	ldr	r1, [sp, #24]
 80127d2:	9d02      	ldr	r5, [sp, #8]
 80127d4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80127d8:	9106      	str	r1, [sp, #24]
 80127da:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80127de:	9502      	str	r5, [sp, #8]
 80127e0:	f7ed ff22 	bl	8000628 <__aeabi_dmul>
 80127e4:	4602      	mov	r2, r0
 80127e6:	460b      	mov	r3, r1
 80127e8:	4640      	mov	r0, r8
 80127ea:	4649      	mov	r1, r9
 80127ec:	f7ed fd66 	bl	80002bc <__adddf3>
 80127f0:	3701      	adds	r7, #1
 80127f2:	4680      	mov	r8, r0
 80127f4:	4689      	mov	r9, r1
 80127f6:	9b07      	ldr	r3, [sp, #28]
 80127f8:	429f      	cmp	r7, r3
 80127fa:	dde9      	ble.n	80127d0 <__kernel_rem_pio2+0x98>
 80127fc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012800:	3601      	adds	r6, #1
 8012802:	e7c9      	b.n	8012798 <__kernel_rem_pio2+0x60>
 8012804:	9b04      	ldr	r3, [sp, #16]
 8012806:	aa0e      	add	r2, sp, #56	; 0x38
 8012808:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801280c:	930c      	str	r3, [sp, #48]	; 0x30
 801280e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012810:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012814:	9c04      	ldr	r4, [sp, #16]
 8012816:	930b      	str	r3, [sp, #44]	; 0x2c
 8012818:	ab9a      	add	r3, sp, #616	; 0x268
 801281a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801281e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012822:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012826:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801282a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801282e:	ab9a      	add	r3, sp, #616	; 0x268
 8012830:	445b      	add	r3, fp
 8012832:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012836:	2500      	movs	r5, #0
 8012838:	1b63      	subs	r3, r4, r5
 801283a:	2b00      	cmp	r3, #0
 801283c:	dc78      	bgt.n	8012930 <__kernel_rem_pio2+0x1f8>
 801283e:	4650      	mov	r0, sl
 8012840:	ec49 8b10 	vmov	d0, r8, r9
 8012844:	f000 fc00 	bl	8013048 <scalbn>
 8012848:	ec57 6b10 	vmov	r6, r7, d0
 801284c:	2200      	movs	r2, #0
 801284e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012852:	ee10 0a10 	vmov	r0, s0
 8012856:	4639      	mov	r1, r7
 8012858:	f7ed fee6 	bl	8000628 <__aeabi_dmul>
 801285c:	ec41 0b10 	vmov	d0, r0, r1
 8012860:	f000 fb6e 	bl	8012f40 <floor>
 8012864:	2200      	movs	r2, #0
 8012866:	ec51 0b10 	vmov	r0, r1, d0
 801286a:	4b7e      	ldr	r3, [pc, #504]	; (8012a64 <__kernel_rem_pio2+0x32c>)
 801286c:	f7ed fedc 	bl	8000628 <__aeabi_dmul>
 8012870:	4602      	mov	r2, r0
 8012872:	460b      	mov	r3, r1
 8012874:	4630      	mov	r0, r6
 8012876:	4639      	mov	r1, r7
 8012878:	f7ed fd1e 	bl	80002b8 <__aeabi_dsub>
 801287c:	460f      	mov	r7, r1
 801287e:	4606      	mov	r6, r0
 8012880:	f7ee f982 	bl	8000b88 <__aeabi_d2iz>
 8012884:	9006      	str	r0, [sp, #24]
 8012886:	f7ed fe65 	bl	8000554 <__aeabi_i2d>
 801288a:	4602      	mov	r2, r0
 801288c:	460b      	mov	r3, r1
 801288e:	4630      	mov	r0, r6
 8012890:	4639      	mov	r1, r7
 8012892:	f7ed fd11 	bl	80002b8 <__aeabi_dsub>
 8012896:	f1ba 0f00 	cmp.w	sl, #0
 801289a:	4606      	mov	r6, r0
 801289c:	460f      	mov	r7, r1
 801289e:	dd6c      	ble.n	801297a <__kernel_rem_pio2+0x242>
 80128a0:	1e62      	subs	r2, r4, #1
 80128a2:	ab0e      	add	r3, sp, #56	; 0x38
 80128a4:	f1ca 0118 	rsb	r1, sl, #24
 80128a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80128ac:	9d06      	ldr	r5, [sp, #24]
 80128ae:	fa40 f301 	asr.w	r3, r0, r1
 80128b2:	441d      	add	r5, r3
 80128b4:	408b      	lsls	r3, r1
 80128b6:	1ac0      	subs	r0, r0, r3
 80128b8:	ab0e      	add	r3, sp, #56	; 0x38
 80128ba:	9506      	str	r5, [sp, #24]
 80128bc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80128c0:	f1ca 0317 	rsb	r3, sl, #23
 80128c4:	fa40 f303 	asr.w	r3, r0, r3
 80128c8:	9302      	str	r3, [sp, #8]
 80128ca:	9b02      	ldr	r3, [sp, #8]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	dd62      	ble.n	8012996 <__kernel_rem_pio2+0x25e>
 80128d0:	9b06      	ldr	r3, [sp, #24]
 80128d2:	2200      	movs	r2, #0
 80128d4:	3301      	adds	r3, #1
 80128d6:	9306      	str	r3, [sp, #24]
 80128d8:	4615      	mov	r5, r2
 80128da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80128de:	4294      	cmp	r4, r2
 80128e0:	f300 8095 	bgt.w	8012a0e <__kernel_rem_pio2+0x2d6>
 80128e4:	f1ba 0f00 	cmp.w	sl, #0
 80128e8:	dd07      	ble.n	80128fa <__kernel_rem_pio2+0x1c2>
 80128ea:	f1ba 0f01 	cmp.w	sl, #1
 80128ee:	f000 80a2 	beq.w	8012a36 <__kernel_rem_pio2+0x2fe>
 80128f2:	f1ba 0f02 	cmp.w	sl, #2
 80128f6:	f000 80c1 	beq.w	8012a7c <__kernel_rem_pio2+0x344>
 80128fa:	9b02      	ldr	r3, [sp, #8]
 80128fc:	2b02      	cmp	r3, #2
 80128fe:	d14a      	bne.n	8012996 <__kernel_rem_pio2+0x25e>
 8012900:	4632      	mov	r2, r6
 8012902:	463b      	mov	r3, r7
 8012904:	2000      	movs	r0, #0
 8012906:	4958      	ldr	r1, [pc, #352]	; (8012a68 <__kernel_rem_pio2+0x330>)
 8012908:	f7ed fcd6 	bl	80002b8 <__aeabi_dsub>
 801290c:	4606      	mov	r6, r0
 801290e:	460f      	mov	r7, r1
 8012910:	2d00      	cmp	r5, #0
 8012912:	d040      	beq.n	8012996 <__kernel_rem_pio2+0x25e>
 8012914:	4650      	mov	r0, sl
 8012916:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012a58 <__kernel_rem_pio2+0x320>
 801291a:	f000 fb95 	bl	8013048 <scalbn>
 801291e:	4630      	mov	r0, r6
 8012920:	4639      	mov	r1, r7
 8012922:	ec53 2b10 	vmov	r2, r3, d0
 8012926:	f7ed fcc7 	bl	80002b8 <__aeabi_dsub>
 801292a:	4606      	mov	r6, r0
 801292c:	460f      	mov	r7, r1
 801292e:	e032      	b.n	8012996 <__kernel_rem_pio2+0x25e>
 8012930:	2200      	movs	r2, #0
 8012932:	4b4e      	ldr	r3, [pc, #312]	; (8012a6c <__kernel_rem_pio2+0x334>)
 8012934:	4640      	mov	r0, r8
 8012936:	4649      	mov	r1, r9
 8012938:	f7ed fe76 	bl	8000628 <__aeabi_dmul>
 801293c:	f7ee f924 	bl	8000b88 <__aeabi_d2iz>
 8012940:	f7ed fe08 	bl	8000554 <__aeabi_i2d>
 8012944:	2200      	movs	r2, #0
 8012946:	4b4a      	ldr	r3, [pc, #296]	; (8012a70 <__kernel_rem_pio2+0x338>)
 8012948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801294c:	f7ed fe6c 	bl	8000628 <__aeabi_dmul>
 8012950:	4602      	mov	r2, r0
 8012952:	460b      	mov	r3, r1
 8012954:	4640      	mov	r0, r8
 8012956:	4649      	mov	r1, r9
 8012958:	f7ed fcae 	bl	80002b8 <__aeabi_dsub>
 801295c:	f7ee f914 	bl	8000b88 <__aeabi_d2iz>
 8012960:	ab0e      	add	r3, sp, #56	; 0x38
 8012962:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012966:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801296a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801296e:	f7ed fca5 	bl	80002bc <__adddf3>
 8012972:	3501      	adds	r5, #1
 8012974:	4680      	mov	r8, r0
 8012976:	4689      	mov	r9, r1
 8012978:	e75e      	b.n	8012838 <__kernel_rem_pio2+0x100>
 801297a:	d105      	bne.n	8012988 <__kernel_rem_pio2+0x250>
 801297c:	1e63      	subs	r3, r4, #1
 801297e:	aa0e      	add	r2, sp, #56	; 0x38
 8012980:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012984:	15c3      	asrs	r3, r0, #23
 8012986:	e79f      	b.n	80128c8 <__kernel_rem_pio2+0x190>
 8012988:	2200      	movs	r2, #0
 801298a:	4b3a      	ldr	r3, [pc, #232]	; (8012a74 <__kernel_rem_pio2+0x33c>)
 801298c:	f7ee f8d2 	bl	8000b34 <__aeabi_dcmpge>
 8012990:	2800      	cmp	r0, #0
 8012992:	d139      	bne.n	8012a08 <__kernel_rem_pio2+0x2d0>
 8012994:	9002      	str	r0, [sp, #8]
 8012996:	2200      	movs	r2, #0
 8012998:	2300      	movs	r3, #0
 801299a:	4630      	mov	r0, r6
 801299c:	4639      	mov	r1, r7
 801299e:	f7ee f8ab 	bl	8000af8 <__aeabi_dcmpeq>
 80129a2:	2800      	cmp	r0, #0
 80129a4:	f000 80c7 	beq.w	8012b36 <__kernel_rem_pio2+0x3fe>
 80129a8:	1e65      	subs	r5, r4, #1
 80129aa:	462b      	mov	r3, r5
 80129ac:	2200      	movs	r2, #0
 80129ae:	9904      	ldr	r1, [sp, #16]
 80129b0:	428b      	cmp	r3, r1
 80129b2:	da6a      	bge.n	8012a8a <__kernel_rem_pio2+0x352>
 80129b4:	2a00      	cmp	r2, #0
 80129b6:	f000 8088 	beq.w	8012aca <__kernel_rem_pio2+0x392>
 80129ba:	ab0e      	add	r3, sp, #56	; 0x38
 80129bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80129c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	f000 80b4 	beq.w	8012b32 <__kernel_rem_pio2+0x3fa>
 80129ca:	4650      	mov	r0, sl
 80129cc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012a58 <__kernel_rem_pio2+0x320>
 80129d0:	f000 fb3a 	bl	8013048 <scalbn>
 80129d4:	00ec      	lsls	r4, r5, #3
 80129d6:	ab72      	add	r3, sp, #456	; 0x1c8
 80129d8:	191e      	adds	r6, r3, r4
 80129da:	ec59 8b10 	vmov	r8, r9, d0
 80129de:	f106 0a08 	add.w	sl, r6, #8
 80129e2:	462f      	mov	r7, r5
 80129e4:	2f00      	cmp	r7, #0
 80129e6:	f280 80df 	bge.w	8012ba8 <__kernel_rem_pio2+0x470>
 80129ea:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012a50 <__kernel_rem_pio2+0x318>
 80129ee:	f04f 0a00 	mov.w	sl, #0
 80129f2:	eba5 030a 	sub.w	r3, r5, sl
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	f2c0 810a 	blt.w	8012c10 <__kernel_rem_pio2+0x4d8>
 80129fc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012a78 <__kernel_rem_pio2+0x340>
 8012a00:	ec59 8b18 	vmov	r8, r9, d8
 8012a04:	2700      	movs	r7, #0
 8012a06:	e0f5      	b.n	8012bf4 <__kernel_rem_pio2+0x4bc>
 8012a08:	2302      	movs	r3, #2
 8012a0a:	9302      	str	r3, [sp, #8]
 8012a0c:	e760      	b.n	80128d0 <__kernel_rem_pio2+0x198>
 8012a0e:	ab0e      	add	r3, sp, #56	; 0x38
 8012a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a14:	b94d      	cbnz	r5, 8012a2a <__kernel_rem_pio2+0x2f2>
 8012a16:	b12b      	cbz	r3, 8012a24 <__kernel_rem_pio2+0x2ec>
 8012a18:	a80e      	add	r0, sp, #56	; 0x38
 8012a1a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012a1e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012a22:	2301      	movs	r3, #1
 8012a24:	3201      	adds	r2, #1
 8012a26:	461d      	mov	r5, r3
 8012a28:	e759      	b.n	80128de <__kernel_rem_pio2+0x1a6>
 8012a2a:	a80e      	add	r0, sp, #56	; 0x38
 8012a2c:	1acb      	subs	r3, r1, r3
 8012a2e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012a32:	462b      	mov	r3, r5
 8012a34:	e7f6      	b.n	8012a24 <__kernel_rem_pio2+0x2ec>
 8012a36:	1e62      	subs	r2, r4, #1
 8012a38:	ab0e      	add	r3, sp, #56	; 0x38
 8012a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a3e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012a42:	a90e      	add	r1, sp, #56	; 0x38
 8012a44:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012a48:	e757      	b.n	80128fa <__kernel_rem_pio2+0x1c2>
 8012a4a:	bf00      	nop
 8012a4c:	f3af 8000 	nop.w
	...
 8012a5c:	3ff00000 	.word	0x3ff00000
 8012a60:	080187c0 	.word	0x080187c0
 8012a64:	40200000 	.word	0x40200000
 8012a68:	3ff00000 	.word	0x3ff00000
 8012a6c:	3e700000 	.word	0x3e700000
 8012a70:	41700000 	.word	0x41700000
 8012a74:	3fe00000 	.word	0x3fe00000
 8012a78:	08018780 	.word	0x08018780
 8012a7c:	1e62      	subs	r2, r4, #1
 8012a7e:	ab0e      	add	r3, sp, #56	; 0x38
 8012a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012a88:	e7db      	b.n	8012a42 <__kernel_rem_pio2+0x30a>
 8012a8a:	a90e      	add	r1, sp, #56	; 0x38
 8012a8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012a90:	3b01      	subs	r3, #1
 8012a92:	430a      	orrs	r2, r1
 8012a94:	e78b      	b.n	80129ae <__kernel_rem_pio2+0x276>
 8012a96:	3301      	adds	r3, #1
 8012a98:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012a9c:	2900      	cmp	r1, #0
 8012a9e:	d0fa      	beq.n	8012a96 <__kernel_rem_pio2+0x35e>
 8012aa0:	9a08      	ldr	r2, [sp, #32]
 8012aa2:	4422      	add	r2, r4
 8012aa4:	00d2      	lsls	r2, r2, #3
 8012aa6:	a922      	add	r1, sp, #136	; 0x88
 8012aa8:	18e3      	adds	r3, r4, r3
 8012aaa:	9206      	str	r2, [sp, #24]
 8012aac:	440a      	add	r2, r1
 8012aae:	9302      	str	r3, [sp, #8]
 8012ab0:	f10b 0108 	add.w	r1, fp, #8
 8012ab4:	f102 0308 	add.w	r3, r2, #8
 8012ab8:	1c66      	adds	r6, r4, #1
 8012aba:	910a      	str	r1, [sp, #40]	; 0x28
 8012abc:	2500      	movs	r5, #0
 8012abe:	930d      	str	r3, [sp, #52]	; 0x34
 8012ac0:	9b02      	ldr	r3, [sp, #8]
 8012ac2:	42b3      	cmp	r3, r6
 8012ac4:	da04      	bge.n	8012ad0 <__kernel_rem_pio2+0x398>
 8012ac6:	461c      	mov	r4, r3
 8012ac8:	e6a6      	b.n	8012818 <__kernel_rem_pio2+0xe0>
 8012aca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012acc:	2301      	movs	r3, #1
 8012ace:	e7e3      	b.n	8012a98 <__kernel_rem_pio2+0x360>
 8012ad0:	9b06      	ldr	r3, [sp, #24]
 8012ad2:	18ef      	adds	r7, r5, r3
 8012ad4:	ab22      	add	r3, sp, #136	; 0x88
 8012ad6:	441f      	add	r7, r3
 8012ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ada:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012ade:	f7ed fd39 	bl	8000554 <__aeabi_i2d>
 8012ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ae4:	461c      	mov	r4, r3
 8012ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ae8:	e9c7 0100 	strd	r0, r1, [r7]
 8012aec:	eb03 0b05 	add.w	fp, r3, r5
 8012af0:	2700      	movs	r7, #0
 8012af2:	f04f 0800 	mov.w	r8, #0
 8012af6:	f04f 0900 	mov.w	r9, #0
 8012afa:	9b07      	ldr	r3, [sp, #28]
 8012afc:	429f      	cmp	r7, r3
 8012afe:	dd08      	ble.n	8012b12 <__kernel_rem_pio2+0x3da>
 8012b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b02:	aa72      	add	r2, sp, #456	; 0x1c8
 8012b04:	18eb      	adds	r3, r5, r3
 8012b06:	4413      	add	r3, r2
 8012b08:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012b0c:	3601      	adds	r6, #1
 8012b0e:	3508      	adds	r5, #8
 8012b10:	e7d6      	b.n	8012ac0 <__kernel_rem_pio2+0x388>
 8012b12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012b16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012b1a:	f7ed fd85 	bl	8000628 <__aeabi_dmul>
 8012b1e:	4602      	mov	r2, r0
 8012b20:	460b      	mov	r3, r1
 8012b22:	4640      	mov	r0, r8
 8012b24:	4649      	mov	r1, r9
 8012b26:	f7ed fbc9 	bl	80002bc <__adddf3>
 8012b2a:	3701      	adds	r7, #1
 8012b2c:	4680      	mov	r8, r0
 8012b2e:	4689      	mov	r9, r1
 8012b30:	e7e3      	b.n	8012afa <__kernel_rem_pio2+0x3c2>
 8012b32:	3d01      	subs	r5, #1
 8012b34:	e741      	b.n	80129ba <__kernel_rem_pio2+0x282>
 8012b36:	f1ca 0000 	rsb	r0, sl, #0
 8012b3a:	ec47 6b10 	vmov	d0, r6, r7
 8012b3e:	f000 fa83 	bl	8013048 <scalbn>
 8012b42:	ec57 6b10 	vmov	r6, r7, d0
 8012b46:	2200      	movs	r2, #0
 8012b48:	4b99      	ldr	r3, [pc, #612]	; (8012db0 <__kernel_rem_pio2+0x678>)
 8012b4a:	ee10 0a10 	vmov	r0, s0
 8012b4e:	4639      	mov	r1, r7
 8012b50:	f7ed fff0 	bl	8000b34 <__aeabi_dcmpge>
 8012b54:	b1f8      	cbz	r0, 8012b96 <__kernel_rem_pio2+0x45e>
 8012b56:	2200      	movs	r2, #0
 8012b58:	4b96      	ldr	r3, [pc, #600]	; (8012db4 <__kernel_rem_pio2+0x67c>)
 8012b5a:	4630      	mov	r0, r6
 8012b5c:	4639      	mov	r1, r7
 8012b5e:	f7ed fd63 	bl	8000628 <__aeabi_dmul>
 8012b62:	f7ee f811 	bl	8000b88 <__aeabi_d2iz>
 8012b66:	4680      	mov	r8, r0
 8012b68:	f7ed fcf4 	bl	8000554 <__aeabi_i2d>
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	4b90      	ldr	r3, [pc, #576]	; (8012db0 <__kernel_rem_pio2+0x678>)
 8012b70:	f7ed fd5a 	bl	8000628 <__aeabi_dmul>
 8012b74:	460b      	mov	r3, r1
 8012b76:	4602      	mov	r2, r0
 8012b78:	4639      	mov	r1, r7
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f7ed fb9c 	bl	80002b8 <__aeabi_dsub>
 8012b80:	f7ee f802 	bl	8000b88 <__aeabi_d2iz>
 8012b84:	1c65      	adds	r5, r4, #1
 8012b86:	ab0e      	add	r3, sp, #56	; 0x38
 8012b88:	f10a 0a18 	add.w	sl, sl, #24
 8012b8c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012b90:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012b94:	e719      	b.n	80129ca <__kernel_rem_pio2+0x292>
 8012b96:	4630      	mov	r0, r6
 8012b98:	4639      	mov	r1, r7
 8012b9a:	f7ed fff5 	bl	8000b88 <__aeabi_d2iz>
 8012b9e:	ab0e      	add	r3, sp, #56	; 0x38
 8012ba0:	4625      	mov	r5, r4
 8012ba2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012ba6:	e710      	b.n	80129ca <__kernel_rem_pio2+0x292>
 8012ba8:	ab0e      	add	r3, sp, #56	; 0x38
 8012baa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012bae:	f7ed fcd1 	bl	8000554 <__aeabi_i2d>
 8012bb2:	4642      	mov	r2, r8
 8012bb4:	464b      	mov	r3, r9
 8012bb6:	f7ed fd37 	bl	8000628 <__aeabi_dmul>
 8012bba:	2200      	movs	r2, #0
 8012bbc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012bc0:	4b7c      	ldr	r3, [pc, #496]	; (8012db4 <__kernel_rem_pio2+0x67c>)
 8012bc2:	4640      	mov	r0, r8
 8012bc4:	4649      	mov	r1, r9
 8012bc6:	f7ed fd2f 	bl	8000628 <__aeabi_dmul>
 8012bca:	3f01      	subs	r7, #1
 8012bcc:	4680      	mov	r8, r0
 8012bce:	4689      	mov	r9, r1
 8012bd0:	e708      	b.n	80129e4 <__kernel_rem_pio2+0x2ac>
 8012bd2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bda:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012bde:	f7ed fd23 	bl	8000628 <__aeabi_dmul>
 8012be2:	4602      	mov	r2, r0
 8012be4:	460b      	mov	r3, r1
 8012be6:	4640      	mov	r0, r8
 8012be8:	4649      	mov	r1, r9
 8012bea:	f7ed fb67 	bl	80002bc <__adddf3>
 8012bee:	3701      	adds	r7, #1
 8012bf0:	4680      	mov	r8, r0
 8012bf2:	4689      	mov	r9, r1
 8012bf4:	9b04      	ldr	r3, [sp, #16]
 8012bf6:	429f      	cmp	r7, r3
 8012bf8:	dc01      	bgt.n	8012bfe <__kernel_rem_pio2+0x4c6>
 8012bfa:	45ba      	cmp	sl, r7
 8012bfc:	dae9      	bge.n	8012bd2 <__kernel_rem_pio2+0x49a>
 8012bfe:	ab4a      	add	r3, sp, #296	; 0x128
 8012c00:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012c04:	e9c3 8900 	strd	r8, r9, [r3]
 8012c08:	f10a 0a01 	add.w	sl, sl, #1
 8012c0c:	3e08      	subs	r6, #8
 8012c0e:	e6f0      	b.n	80129f2 <__kernel_rem_pio2+0x2ba>
 8012c10:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012c12:	2b03      	cmp	r3, #3
 8012c14:	d85b      	bhi.n	8012cce <__kernel_rem_pio2+0x596>
 8012c16:	e8df f003 	tbb	[pc, r3]
 8012c1a:	264a      	.short	0x264a
 8012c1c:	0226      	.short	0x0226
 8012c1e:	ab9a      	add	r3, sp, #616	; 0x268
 8012c20:	441c      	add	r4, r3
 8012c22:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012c26:	46a2      	mov	sl, r4
 8012c28:	46ab      	mov	fp, r5
 8012c2a:	f1bb 0f00 	cmp.w	fp, #0
 8012c2e:	dc6c      	bgt.n	8012d0a <__kernel_rem_pio2+0x5d2>
 8012c30:	46a2      	mov	sl, r4
 8012c32:	46ab      	mov	fp, r5
 8012c34:	f1bb 0f01 	cmp.w	fp, #1
 8012c38:	f300 8086 	bgt.w	8012d48 <__kernel_rem_pio2+0x610>
 8012c3c:	2000      	movs	r0, #0
 8012c3e:	2100      	movs	r1, #0
 8012c40:	2d01      	cmp	r5, #1
 8012c42:	f300 80a0 	bgt.w	8012d86 <__kernel_rem_pio2+0x64e>
 8012c46:	9b02      	ldr	r3, [sp, #8]
 8012c48:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012c4c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	f040 809e 	bne.w	8012d92 <__kernel_rem_pio2+0x65a>
 8012c56:	9b01      	ldr	r3, [sp, #4]
 8012c58:	e9c3 7800 	strd	r7, r8, [r3]
 8012c5c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012c60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012c64:	e033      	b.n	8012cce <__kernel_rem_pio2+0x596>
 8012c66:	3408      	adds	r4, #8
 8012c68:	ab4a      	add	r3, sp, #296	; 0x128
 8012c6a:	441c      	add	r4, r3
 8012c6c:	462e      	mov	r6, r5
 8012c6e:	2000      	movs	r0, #0
 8012c70:	2100      	movs	r1, #0
 8012c72:	2e00      	cmp	r6, #0
 8012c74:	da3a      	bge.n	8012cec <__kernel_rem_pio2+0x5b4>
 8012c76:	9b02      	ldr	r3, [sp, #8]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d03d      	beq.n	8012cf8 <__kernel_rem_pio2+0x5c0>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c82:	9c01      	ldr	r4, [sp, #4]
 8012c84:	e9c4 2300 	strd	r2, r3, [r4]
 8012c88:	4602      	mov	r2, r0
 8012c8a:	460b      	mov	r3, r1
 8012c8c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012c90:	f7ed fb12 	bl	80002b8 <__aeabi_dsub>
 8012c94:	ae4c      	add	r6, sp, #304	; 0x130
 8012c96:	2401      	movs	r4, #1
 8012c98:	42a5      	cmp	r5, r4
 8012c9a:	da30      	bge.n	8012cfe <__kernel_rem_pio2+0x5c6>
 8012c9c:	9b02      	ldr	r3, [sp, #8]
 8012c9e:	b113      	cbz	r3, 8012ca6 <__kernel_rem_pio2+0x56e>
 8012ca0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	9b01      	ldr	r3, [sp, #4]
 8012ca8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012cac:	e00f      	b.n	8012cce <__kernel_rem_pio2+0x596>
 8012cae:	ab9a      	add	r3, sp, #616	; 0x268
 8012cb0:	441c      	add	r4, r3
 8012cb2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	2100      	movs	r1, #0
 8012cba:	2d00      	cmp	r5, #0
 8012cbc:	da10      	bge.n	8012ce0 <__kernel_rem_pio2+0x5a8>
 8012cbe:	9b02      	ldr	r3, [sp, #8]
 8012cc0:	b113      	cbz	r3, 8012cc8 <__kernel_rem_pio2+0x590>
 8012cc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012cc6:	4619      	mov	r1, r3
 8012cc8:	9b01      	ldr	r3, [sp, #4]
 8012cca:	e9c3 0100 	strd	r0, r1, [r3]
 8012cce:	9b06      	ldr	r3, [sp, #24]
 8012cd0:	f003 0007 	and.w	r0, r3, #7
 8012cd4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012cd8:	ecbd 8b02 	vpop	{d8}
 8012cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012ce4:	f7ed faea 	bl	80002bc <__adddf3>
 8012ce8:	3d01      	subs	r5, #1
 8012cea:	e7e6      	b.n	8012cba <__kernel_rem_pio2+0x582>
 8012cec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012cf0:	f7ed fae4 	bl	80002bc <__adddf3>
 8012cf4:	3e01      	subs	r6, #1
 8012cf6:	e7bc      	b.n	8012c72 <__kernel_rem_pio2+0x53a>
 8012cf8:	4602      	mov	r2, r0
 8012cfa:	460b      	mov	r3, r1
 8012cfc:	e7c1      	b.n	8012c82 <__kernel_rem_pio2+0x54a>
 8012cfe:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012d02:	f7ed fadb 	bl	80002bc <__adddf3>
 8012d06:	3401      	adds	r4, #1
 8012d08:	e7c6      	b.n	8012c98 <__kernel_rem_pio2+0x560>
 8012d0a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012d0e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012d12:	4640      	mov	r0, r8
 8012d14:	ec53 2b17 	vmov	r2, r3, d7
 8012d18:	4649      	mov	r1, r9
 8012d1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012d1e:	f7ed facd 	bl	80002bc <__adddf3>
 8012d22:	4602      	mov	r2, r0
 8012d24:	460b      	mov	r3, r1
 8012d26:	4606      	mov	r6, r0
 8012d28:	460f      	mov	r7, r1
 8012d2a:	4640      	mov	r0, r8
 8012d2c:	4649      	mov	r1, r9
 8012d2e:	f7ed fac3 	bl	80002b8 <__aeabi_dsub>
 8012d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d36:	f7ed fac1 	bl	80002bc <__adddf3>
 8012d3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d3e:	e9ca 0100 	strd	r0, r1, [sl]
 8012d42:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012d46:	e770      	b.n	8012c2a <__kernel_rem_pio2+0x4f2>
 8012d48:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012d4c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012d50:	4630      	mov	r0, r6
 8012d52:	ec53 2b17 	vmov	r2, r3, d7
 8012d56:	4639      	mov	r1, r7
 8012d58:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012d5c:	f7ed faae 	bl	80002bc <__adddf3>
 8012d60:	4602      	mov	r2, r0
 8012d62:	460b      	mov	r3, r1
 8012d64:	4680      	mov	r8, r0
 8012d66:	4689      	mov	r9, r1
 8012d68:	4630      	mov	r0, r6
 8012d6a:	4639      	mov	r1, r7
 8012d6c:	f7ed faa4 	bl	80002b8 <__aeabi_dsub>
 8012d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d74:	f7ed faa2 	bl	80002bc <__adddf3>
 8012d78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d7c:	e9ca 0100 	strd	r0, r1, [sl]
 8012d80:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012d84:	e756      	b.n	8012c34 <__kernel_rem_pio2+0x4fc>
 8012d86:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012d8a:	f7ed fa97 	bl	80002bc <__adddf3>
 8012d8e:	3d01      	subs	r5, #1
 8012d90:	e756      	b.n	8012c40 <__kernel_rem_pio2+0x508>
 8012d92:	9b01      	ldr	r3, [sp, #4]
 8012d94:	9a01      	ldr	r2, [sp, #4]
 8012d96:	601f      	str	r7, [r3, #0]
 8012d98:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012d9c:	605c      	str	r4, [r3, #4]
 8012d9e:	609d      	str	r5, [r3, #8]
 8012da0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012da4:	60d3      	str	r3, [r2, #12]
 8012da6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012daa:	6110      	str	r0, [r2, #16]
 8012dac:	6153      	str	r3, [r2, #20]
 8012dae:	e78e      	b.n	8012cce <__kernel_rem_pio2+0x596>
 8012db0:	41700000 	.word	0x41700000
 8012db4:	3e700000 	.word	0x3e700000

08012db8 <__kernel_sin>:
 8012db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dbc:	ec55 4b10 	vmov	r4, r5, d0
 8012dc0:	b085      	sub	sp, #20
 8012dc2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012dc6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012dca:	ed8d 1b00 	vstr	d1, [sp]
 8012dce:	9002      	str	r0, [sp, #8]
 8012dd0:	da06      	bge.n	8012de0 <__kernel_sin+0x28>
 8012dd2:	ee10 0a10 	vmov	r0, s0
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	f7ed fed6 	bl	8000b88 <__aeabi_d2iz>
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	d051      	beq.n	8012e84 <__kernel_sin+0xcc>
 8012de0:	4622      	mov	r2, r4
 8012de2:	462b      	mov	r3, r5
 8012de4:	4620      	mov	r0, r4
 8012de6:	4629      	mov	r1, r5
 8012de8:	f7ed fc1e 	bl	8000628 <__aeabi_dmul>
 8012dec:	4682      	mov	sl, r0
 8012dee:	468b      	mov	fp, r1
 8012df0:	4602      	mov	r2, r0
 8012df2:	460b      	mov	r3, r1
 8012df4:	4620      	mov	r0, r4
 8012df6:	4629      	mov	r1, r5
 8012df8:	f7ed fc16 	bl	8000628 <__aeabi_dmul>
 8012dfc:	a341      	add	r3, pc, #260	; (adr r3, 8012f04 <__kernel_sin+0x14c>)
 8012dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e02:	4680      	mov	r8, r0
 8012e04:	4689      	mov	r9, r1
 8012e06:	4650      	mov	r0, sl
 8012e08:	4659      	mov	r1, fp
 8012e0a:	f7ed fc0d 	bl	8000628 <__aeabi_dmul>
 8012e0e:	a33f      	add	r3, pc, #252	; (adr r3, 8012f0c <__kernel_sin+0x154>)
 8012e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e14:	f7ed fa50 	bl	80002b8 <__aeabi_dsub>
 8012e18:	4652      	mov	r2, sl
 8012e1a:	465b      	mov	r3, fp
 8012e1c:	f7ed fc04 	bl	8000628 <__aeabi_dmul>
 8012e20:	a33c      	add	r3, pc, #240	; (adr r3, 8012f14 <__kernel_sin+0x15c>)
 8012e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e26:	f7ed fa49 	bl	80002bc <__adddf3>
 8012e2a:	4652      	mov	r2, sl
 8012e2c:	465b      	mov	r3, fp
 8012e2e:	f7ed fbfb 	bl	8000628 <__aeabi_dmul>
 8012e32:	a33a      	add	r3, pc, #232	; (adr r3, 8012f1c <__kernel_sin+0x164>)
 8012e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e38:	f7ed fa3e 	bl	80002b8 <__aeabi_dsub>
 8012e3c:	4652      	mov	r2, sl
 8012e3e:	465b      	mov	r3, fp
 8012e40:	f7ed fbf2 	bl	8000628 <__aeabi_dmul>
 8012e44:	a337      	add	r3, pc, #220	; (adr r3, 8012f24 <__kernel_sin+0x16c>)
 8012e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4a:	f7ed fa37 	bl	80002bc <__adddf3>
 8012e4e:	9b02      	ldr	r3, [sp, #8]
 8012e50:	4606      	mov	r6, r0
 8012e52:	460f      	mov	r7, r1
 8012e54:	b9db      	cbnz	r3, 8012e8e <__kernel_sin+0xd6>
 8012e56:	4602      	mov	r2, r0
 8012e58:	460b      	mov	r3, r1
 8012e5a:	4650      	mov	r0, sl
 8012e5c:	4659      	mov	r1, fp
 8012e5e:	f7ed fbe3 	bl	8000628 <__aeabi_dmul>
 8012e62:	a325      	add	r3, pc, #148	; (adr r3, 8012ef8 <__kernel_sin+0x140>)
 8012e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e68:	f7ed fa26 	bl	80002b8 <__aeabi_dsub>
 8012e6c:	4642      	mov	r2, r8
 8012e6e:	464b      	mov	r3, r9
 8012e70:	f7ed fbda 	bl	8000628 <__aeabi_dmul>
 8012e74:	4602      	mov	r2, r0
 8012e76:	460b      	mov	r3, r1
 8012e78:	4620      	mov	r0, r4
 8012e7a:	4629      	mov	r1, r5
 8012e7c:	f7ed fa1e 	bl	80002bc <__adddf3>
 8012e80:	4604      	mov	r4, r0
 8012e82:	460d      	mov	r5, r1
 8012e84:	ec45 4b10 	vmov	d0, r4, r5
 8012e88:	b005      	add	sp, #20
 8012e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e8e:	2200      	movs	r2, #0
 8012e90:	4b1b      	ldr	r3, [pc, #108]	; (8012f00 <__kernel_sin+0x148>)
 8012e92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e96:	f7ed fbc7 	bl	8000628 <__aeabi_dmul>
 8012e9a:	4632      	mov	r2, r6
 8012e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ea0:	463b      	mov	r3, r7
 8012ea2:	4640      	mov	r0, r8
 8012ea4:	4649      	mov	r1, r9
 8012ea6:	f7ed fbbf 	bl	8000628 <__aeabi_dmul>
 8012eaa:	4602      	mov	r2, r0
 8012eac:	460b      	mov	r3, r1
 8012eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012eb2:	f7ed fa01 	bl	80002b8 <__aeabi_dsub>
 8012eb6:	4652      	mov	r2, sl
 8012eb8:	465b      	mov	r3, fp
 8012eba:	f7ed fbb5 	bl	8000628 <__aeabi_dmul>
 8012ebe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ec2:	f7ed f9f9 	bl	80002b8 <__aeabi_dsub>
 8012ec6:	a30c      	add	r3, pc, #48	; (adr r3, 8012ef8 <__kernel_sin+0x140>)
 8012ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ecc:	4606      	mov	r6, r0
 8012ece:	460f      	mov	r7, r1
 8012ed0:	4640      	mov	r0, r8
 8012ed2:	4649      	mov	r1, r9
 8012ed4:	f7ed fba8 	bl	8000628 <__aeabi_dmul>
 8012ed8:	4602      	mov	r2, r0
 8012eda:	460b      	mov	r3, r1
 8012edc:	4630      	mov	r0, r6
 8012ede:	4639      	mov	r1, r7
 8012ee0:	f7ed f9ec 	bl	80002bc <__adddf3>
 8012ee4:	4602      	mov	r2, r0
 8012ee6:	460b      	mov	r3, r1
 8012ee8:	4620      	mov	r0, r4
 8012eea:	4629      	mov	r1, r5
 8012eec:	f7ed f9e4 	bl	80002b8 <__aeabi_dsub>
 8012ef0:	e7c6      	b.n	8012e80 <__kernel_sin+0xc8>
 8012ef2:	bf00      	nop
 8012ef4:	f3af 8000 	nop.w
 8012ef8:	55555549 	.word	0x55555549
 8012efc:	3fc55555 	.word	0x3fc55555
 8012f00:	3fe00000 	.word	0x3fe00000
 8012f04:	5acfd57c 	.word	0x5acfd57c
 8012f08:	3de5d93a 	.word	0x3de5d93a
 8012f0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012f10:	3e5ae5e6 	.word	0x3e5ae5e6
 8012f14:	57b1fe7d 	.word	0x57b1fe7d
 8012f18:	3ec71de3 	.word	0x3ec71de3
 8012f1c:	19c161d5 	.word	0x19c161d5
 8012f20:	3f2a01a0 	.word	0x3f2a01a0
 8012f24:	1110f8a6 	.word	0x1110f8a6
 8012f28:	3f811111 	.word	0x3f811111

08012f2c <fabs>:
 8012f2c:	ec51 0b10 	vmov	r0, r1, d0
 8012f30:	ee10 2a10 	vmov	r2, s0
 8012f34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f38:	ec43 2b10 	vmov	d0, r2, r3
 8012f3c:	4770      	bx	lr
	...

08012f40 <floor>:
 8012f40:	ec51 0b10 	vmov	r0, r1, d0
 8012f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012f4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012f50:	2e13      	cmp	r6, #19
 8012f52:	460c      	mov	r4, r1
 8012f54:	ee10 5a10 	vmov	r5, s0
 8012f58:	4680      	mov	r8, r0
 8012f5a:	dc34      	bgt.n	8012fc6 <floor+0x86>
 8012f5c:	2e00      	cmp	r6, #0
 8012f5e:	da16      	bge.n	8012f8e <floor+0x4e>
 8012f60:	a335      	add	r3, pc, #212	; (adr r3, 8013038 <floor+0xf8>)
 8012f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f66:	f7ed f9a9 	bl	80002bc <__adddf3>
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	f7ed fdeb 	bl	8000b48 <__aeabi_dcmpgt>
 8012f72:	b148      	cbz	r0, 8012f88 <floor+0x48>
 8012f74:	2c00      	cmp	r4, #0
 8012f76:	da59      	bge.n	801302c <floor+0xec>
 8012f78:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012f7c:	4a30      	ldr	r2, [pc, #192]	; (8013040 <floor+0x100>)
 8012f7e:	432b      	orrs	r3, r5
 8012f80:	2500      	movs	r5, #0
 8012f82:	42ab      	cmp	r3, r5
 8012f84:	bf18      	it	ne
 8012f86:	4614      	movne	r4, r2
 8012f88:	4621      	mov	r1, r4
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	e025      	b.n	8012fda <floor+0x9a>
 8012f8e:	4f2d      	ldr	r7, [pc, #180]	; (8013044 <floor+0x104>)
 8012f90:	4137      	asrs	r7, r6
 8012f92:	ea01 0307 	and.w	r3, r1, r7
 8012f96:	4303      	orrs	r3, r0
 8012f98:	d01f      	beq.n	8012fda <floor+0x9a>
 8012f9a:	a327      	add	r3, pc, #156	; (adr r3, 8013038 <floor+0xf8>)
 8012f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa0:	f7ed f98c 	bl	80002bc <__adddf3>
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	f7ed fdce 	bl	8000b48 <__aeabi_dcmpgt>
 8012fac:	2800      	cmp	r0, #0
 8012fae:	d0eb      	beq.n	8012f88 <floor+0x48>
 8012fb0:	2c00      	cmp	r4, #0
 8012fb2:	bfbe      	ittt	lt
 8012fb4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012fb8:	fa43 f606 	asrlt.w	r6, r3, r6
 8012fbc:	19a4      	addlt	r4, r4, r6
 8012fbe:	ea24 0407 	bic.w	r4, r4, r7
 8012fc2:	2500      	movs	r5, #0
 8012fc4:	e7e0      	b.n	8012f88 <floor+0x48>
 8012fc6:	2e33      	cmp	r6, #51	; 0x33
 8012fc8:	dd0b      	ble.n	8012fe2 <floor+0xa2>
 8012fca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012fce:	d104      	bne.n	8012fda <floor+0x9a>
 8012fd0:	ee10 2a10 	vmov	r2, s0
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	f7ed f971 	bl	80002bc <__adddf3>
 8012fda:	ec41 0b10 	vmov	d0, r0, r1
 8012fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fe2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8012fea:	fa23 f707 	lsr.w	r7, r3, r7
 8012fee:	4207      	tst	r7, r0
 8012ff0:	d0f3      	beq.n	8012fda <floor+0x9a>
 8012ff2:	a311      	add	r3, pc, #68	; (adr r3, 8013038 <floor+0xf8>)
 8012ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff8:	f7ed f960 	bl	80002bc <__adddf3>
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	2300      	movs	r3, #0
 8013000:	f7ed fda2 	bl	8000b48 <__aeabi_dcmpgt>
 8013004:	2800      	cmp	r0, #0
 8013006:	d0bf      	beq.n	8012f88 <floor+0x48>
 8013008:	2c00      	cmp	r4, #0
 801300a:	da02      	bge.n	8013012 <floor+0xd2>
 801300c:	2e14      	cmp	r6, #20
 801300e:	d103      	bne.n	8013018 <floor+0xd8>
 8013010:	3401      	adds	r4, #1
 8013012:	ea25 0507 	bic.w	r5, r5, r7
 8013016:	e7b7      	b.n	8012f88 <floor+0x48>
 8013018:	2301      	movs	r3, #1
 801301a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801301e:	fa03 f606 	lsl.w	r6, r3, r6
 8013022:	4435      	add	r5, r6
 8013024:	4545      	cmp	r5, r8
 8013026:	bf38      	it	cc
 8013028:	18e4      	addcc	r4, r4, r3
 801302a:	e7f2      	b.n	8013012 <floor+0xd2>
 801302c:	2500      	movs	r5, #0
 801302e:	462c      	mov	r4, r5
 8013030:	e7aa      	b.n	8012f88 <floor+0x48>
 8013032:	bf00      	nop
 8013034:	f3af 8000 	nop.w
 8013038:	8800759c 	.word	0x8800759c
 801303c:	7e37e43c 	.word	0x7e37e43c
 8013040:	bff00000 	.word	0xbff00000
 8013044:	000fffff 	.word	0x000fffff

08013048 <scalbn>:
 8013048:	b570      	push	{r4, r5, r6, lr}
 801304a:	ec55 4b10 	vmov	r4, r5, d0
 801304e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013052:	4606      	mov	r6, r0
 8013054:	462b      	mov	r3, r5
 8013056:	b9aa      	cbnz	r2, 8013084 <scalbn+0x3c>
 8013058:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801305c:	4323      	orrs	r3, r4
 801305e:	d03b      	beq.n	80130d8 <scalbn+0x90>
 8013060:	4b31      	ldr	r3, [pc, #196]	; (8013128 <scalbn+0xe0>)
 8013062:	4629      	mov	r1, r5
 8013064:	2200      	movs	r2, #0
 8013066:	ee10 0a10 	vmov	r0, s0
 801306a:	f7ed fadd 	bl	8000628 <__aeabi_dmul>
 801306e:	4b2f      	ldr	r3, [pc, #188]	; (801312c <scalbn+0xe4>)
 8013070:	429e      	cmp	r6, r3
 8013072:	4604      	mov	r4, r0
 8013074:	460d      	mov	r5, r1
 8013076:	da12      	bge.n	801309e <scalbn+0x56>
 8013078:	a327      	add	r3, pc, #156	; (adr r3, 8013118 <scalbn+0xd0>)
 801307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801307e:	f7ed fad3 	bl	8000628 <__aeabi_dmul>
 8013082:	e009      	b.n	8013098 <scalbn+0x50>
 8013084:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013088:	428a      	cmp	r2, r1
 801308a:	d10c      	bne.n	80130a6 <scalbn+0x5e>
 801308c:	ee10 2a10 	vmov	r2, s0
 8013090:	4620      	mov	r0, r4
 8013092:	4629      	mov	r1, r5
 8013094:	f7ed f912 	bl	80002bc <__adddf3>
 8013098:	4604      	mov	r4, r0
 801309a:	460d      	mov	r5, r1
 801309c:	e01c      	b.n	80130d8 <scalbn+0x90>
 801309e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80130a2:	460b      	mov	r3, r1
 80130a4:	3a36      	subs	r2, #54	; 0x36
 80130a6:	4432      	add	r2, r6
 80130a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80130ac:	428a      	cmp	r2, r1
 80130ae:	dd0b      	ble.n	80130c8 <scalbn+0x80>
 80130b0:	ec45 4b11 	vmov	d1, r4, r5
 80130b4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013120 <scalbn+0xd8>
 80130b8:	f000 f83c 	bl	8013134 <copysign>
 80130bc:	a318      	add	r3, pc, #96	; (adr r3, 8013120 <scalbn+0xd8>)
 80130be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c2:	ec51 0b10 	vmov	r0, r1, d0
 80130c6:	e7da      	b.n	801307e <scalbn+0x36>
 80130c8:	2a00      	cmp	r2, #0
 80130ca:	dd08      	ble.n	80130de <scalbn+0x96>
 80130cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80130d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80130d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80130d8:	ec45 4b10 	vmov	d0, r4, r5
 80130dc:	bd70      	pop	{r4, r5, r6, pc}
 80130de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80130e2:	da0d      	bge.n	8013100 <scalbn+0xb8>
 80130e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80130e8:	429e      	cmp	r6, r3
 80130ea:	ec45 4b11 	vmov	d1, r4, r5
 80130ee:	dce1      	bgt.n	80130b4 <scalbn+0x6c>
 80130f0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013118 <scalbn+0xd0>
 80130f4:	f000 f81e 	bl	8013134 <copysign>
 80130f8:	a307      	add	r3, pc, #28	; (adr r3, 8013118 <scalbn+0xd0>)
 80130fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130fe:	e7e0      	b.n	80130c2 <scalbn+0x7a>
 8013100:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013104:	3236      	adds	r2, #54	; 0x36
 8013106:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801310a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801310e:	4620      	mov	r0, r4
 8013110:	4629      	mov	r1, r5
 8013112:	2200      	movs	r2, #0
 8013114:	4b06      	ldr	r3, [pc, #24]	; (8013130 <scalbn+0xe8>)
 8013116:	e7b2      	b.n	801307e <scalbn+0x36>
 8013118:	c2f8f359 	.word	0xc2f8f359
 801311c:	01a56e1f 	.word	0x01a56e1f
 8013120:	8800759c 	.word	0x8800759c
 8013124:	7e37e43c 	.word	0x7e37e43c
 8013128:	43500000 	.word	0x43500000
 801312c:	ffff3cb0 	.word	0xffff3cb0
 8013130:	3c900000 	.word	0x3c900000

08013134 <copysign>:
 8013134:	ec51 0b10 	vmov	r0, r1, d0
 8013138:	ee11 0a90 	vmov	r0, s3
 801313c:	ee10 2a10 	vmov	r2, s0
 8013140:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013144:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013148:	ea41 0300 	orr.w	r3, r1, r0
 801314c:	ec43 2b10 	vmov	d0, r2, r3
 8013150:	4770      	bx	lr
	...

08013154 <__errno>:
 8013154:	4b01      	ldr	r3, [pc, #4]	; (801315c <__errno+0x8>)
 8013156:	6818      	ldr	r0, [r3, #0]
 8013158:	4770      	bx	lr
 801315a:	bf00      	nop
 801315c:	2000000c 	.word	0x2000000c

08013160 <__libc_init_array>:
 8013160:	b570      	push	{r4, r5, r6, lr}
 8013162:	4e0d      	ldr	r6, [pc, #52]	; (8013198 <__libc_init_array+0x38>)
 8013164:	4c0d      	ldr	r4, [pc, #52]	; (801319c <__libc_init_array+0x3c>)
 8013166:	1ba4      	subs	r4, r4, r6
 8013168:	10a4      	asrs	r4, r4, #2
 801316a:	2500      	movs	r5, #0
 801316c:	42a5      	cmp	r5, r4
 801316e:	d109      	bne.n	8013184 <__libc_init_array+0x24>
 8013170:	4e0b      	ldr	r6, [pc, #44]	; (80131a0 <__libc_init_array+0x40>)
 8013172:	4c0c      	ldr	r4, [pc, #48]	; (80131a4 <__libc_init_array+0x44>)
 8013174:	f004 ff38 	bl	8017fe8 <_init>
 8013178:	1ba4      	subs	r4, r4, r6
 801317a:	10a4      	asrs	r4, r4, #2
 801317c:	2500      	movs	r5, #0
 801317e:	42a5      	cmp	r5, r4
 8013180:	d105      	bne.n	801318e <__libc_init_array+0x2e>
 8013182:	bd70      	pop	{r4, r5, r6, pc}
 8013184:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013188:	4798      	blx	r3
 801318a:	3501      	adds	r5, #1
 801318c:	e7ee      	b.n	801316c <__libc_init_array+0xc>
 801318e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013192:	4798      	blx	r3
 8013194:	3501      	adds	r5, #1
 8013196:	e7f2      	b.n	801317e <__libc_init_array+0x1e>
 8013198:	08018b14 	.word	0x08018b14
 801319c:	08018b14 	.word	0x08018b14
 80131a0:	08018b14 	.word	0x08018b14
 80131a4:	08018b1c 	.word	0x08018b1c

080131a8 <memcpy>:
 80131a8:	b510      	push	{r4, lr}
 80131aa:	1e43      	subs	r3, r0, #1
 80131ac:	440a      	add	r2, r1
 80131ae:	4291      	cmp	r1, r2
 80131b0:	d100      	bne.n	80131b4 <memcpy+0xc>
 80131b2:	bd10      	pop	{r4, pc}
 80131b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131bc:	e7f7      	b.n	80131ae <memcpy+0x6>

080131be <memset>:
 80131be:	4402      	add	r2, r0
 80131c0:	4603      	mov	r3, r0
 80131c2:	4293      	cmp	r3, r2
 80131c4:	d100      	bne.n	80131c8 <memset+0xa>
 80131c6:	4770      	bx	lr
 80131c8:	f803 1b01 	strb.w	r1, [r3], #1
 80131cc:	e7f9      	b.n	80131c2 <memset+0x4>

080131ce <__cvt>:
 80131ce:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80131d2:	ec55 4b10 	vmov	r4, r5, d0
 80131d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80131d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80131dc:	2d00      	cmp	r5, #0
 80131de:	460e      	mov	r6, r1
 80131e0:	4691      	mov	r9, r2
 80131e2:	4619      	mov	r1, r3
 80131e4:	bfb8      	it	lt
 80131e6:	4622      	movlt	r2, r4
 80131e8:	462b      	mov	r3, r5
 80131ea:	f027 0720 	bic.w	r7, r7, #32
 80131ee:	bfbb      	ittet	lt
 80131f0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80131f4:	461d      	movlt	r5, r3
 80131f6:	2300      	movge	r3, #0
 80131f8:	232d      	movlt	r3, #45	; 0x2d
 80131fa:	bfb8      	it	lt
 80131fc:	4614      	movlt	r4, r2
 80131fe:	2f46      	cmp	r7, #70	; 0x46
 8013200:	700b      	strb	r3, [r1, #0]
 8013202:	d004      	beq.n	801320e <__cvt+0x40>
 8013204:	2f45      	cmp	r7, #69	; 0x45
 8013206:	d100      	bne.n	801320a <__cvt+0x3c>
 8013208:	3601      	adds	r6, #1
 801320a:	2102      	movs	r1, #2
 801320c:	e000      	b.n	8013210 <__cvt+0x42>
 801320e:	2103      	movs	r1, #3
 8013210:	ab03      	add	r3, sp, #12
 8013212:	9301      	str	r3, [sp, #4]
 8013214:	ab02      	add	r3, sp, #8
 8013216:	9300      	str	r3, [sp, #0]
 8013218:	4632      	mov	r2, r6
 801321a:	4653      	mov	r3, sl
 801321c:	ec45 4b10 	vmov	d0, r4, r5
 8013220:	f001 ffb2 	bl	8015188 <_dtoa_r>
 8013224:	2f47      	cmp	r7, #71	; 0x47
 8013226:	4680      	mov	r8, r0
 8013228:	d102      	bne.n	8013230 <__cvt+0x62>
 801322a:	f019 0f01 	tst.w	r9, #1
 801322e:	d026      	beq.n	801327e <__cvt+0xb0>
 8013230:	2f46      	cmp	r7, #70	; 0x46
 8013232:	eb08 0906 	add.w	r9, r8, r6
 8013236:	d111      	bne.n	801325c <__cvt+0x8e>
 8013238:	f898 3000 	ldrb.w	r3, [r8]
 801323c:	2b30      	cmp	r3, #48	; 0x30
 801323e:	d10a      	bne.n	8013256 <__cvt+0x88>
 8013240:	2200      	movs	r2, #0
 8013242:	2300      	movs	r3, #0
 8013244:	4620      	mov	r0, r4
 8013246:	4629      	mov	r1, r5
 8013248:	f7ed fc56 	bl	8000af8 <__aeabi_dcmpeq>
 801324c:	b918      	cbnz	r0, 8013256 <__cvt+0x88>
 801324e:	f1c6 0601 	rsb	r6, r6, #1
 8013252:	f8ca 6000 	str.w	r6, [sl]
 8013256:	f8da 3000 	ldr.w	r3, [sl]
 801325a:	4499      	add	r9, r3
 801325c:	2200      	movs	r2, #0
 801325e:	2300      	movs	r3, #0
 8013260:	4620      	mov	r0, r4
 8013262:	4629      	mov	r1, r5
 8013264:	f7ed fc48 	bl	8000af8 <__aeabi_dcmpeq>
 8013268:	b938      	cbnz	r0, 801327a <__cvt+0xac>
 801326a:	2230      	movs	r2, #48	; 0x30
 801326c:	9b03      	ldr	r3, [sp, #12]
 801326e:	454b      	cmp	r3, r9
 8013270:	d205      	bcs.n	801327e <__cvt+0xb0>
 8013272:	1c59      	adds	r1, r3, #1
 8013274:	9103      	str	r1, [sp, #12]
 8013276:	701a      	strb	r2, [r3, #0]
 8013278:	e7f8      	b.n	801326c <__cvt+0x9e>
 801327a:	f8cd 900c 	str.w	r9, [sp, #12]
 801327e:	9b03      	ldr	r3, [sp, #12]
 8013280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013282:	eba3 0308 	sub.w	r3, r3, r8
 8013286:	4640      	mov	r0, r8
 8013288:	6013      	str	r3, [r2, #0]
 801328a:	b004      	add	sp, #16
 801328c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013290 <__exponent>:
 8013290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013292:	2900      	cmp	r1, #0
 8013294:	4604      	mov	r4, r0
 8013296:	bfba      	itte	lt
 8013298:	4249      	neglt	r1, r1
 801329a:	232d      	movlt	r3, #45	; 0x2d
 801329c:	232b      	movge	r3, #43	; 0x2b
 801329e:	2909      	cmp	r1, #9
 80132a0:	f804 2b02 	strb.w	r2, [r4], #2
 80132a4:	7043      	strb	r3, [r0, #1]
 80132a6:	dd20      	ble.n	80132ea <__exponent+0x5a>
 80132a8:	f10d 0307 	add.w	r3, sp, #7
 80132ac:	461f      	mov	r7, r3
 80132ae:	260a      	movs	r6, #10
 80132b0:	fb91 f5f6 	sdiv	r5, r1, r6
 80132b4:	fb06 1115 	mls	r1, r6, r5, r1
 80132b8:	3130      	adds	r1, #48	; 0x30
 80132ba:	2d09      	cmp	r5, #9
 80132bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80132c0:	f103 32ff 	add.w	r2, r3, #4294967295
 80132c4:	4629      	mov	r1, r5
 80132c6:	dc09      	bgt.n	80132dc <__exponent+0x4c>
 80132c8:	3130      	adds	r1, #48	; 0x30
 80132ca:	3b02      	subs	r3, #2
 80132cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80132d0:	42bb      	cmp	r3, r7
 80132d2:	4622      	mov	r2, r4
 80132d4:	d304      	bcc.n	80132e0 <__exponent+0x50>
 80132d6:	1a10      	subs	r0, r2, r0
 80132d8:	b003      	add	sp, #12
 80132da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132dc:	4613      	mov	r3, r2
 80132de:	e7e7      	b.n	80132b0 <__exponent+0x20>
 80132e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132e4:	f804 2b01 	strb.w	r2, [r4], #1
 80132e8:	e7f2      	b.n	80132d0 <__exponent+0x40>
 80132ea:	2330      	movs	r3, #48	; 0x30
 80132ec:	4419      	add	r1, r3
 80132ee:	7083      	strb	r3, [r0, #2]
 80132f0:	1d02      	adds	r2, r0, #4
 80132f2:	70c1      	strb	r1, [r0, #3]
 80132f4:	e7ef      	b.n	80132d6 <__exponent+0x46>
	...

080132f8 <_printf_float>:
 80132f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132fc:	b08d      	sub	sp, #52	; 0x34
 80132fe:	460c      	mov	r4, r1
 8013300:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013304:	4616      	mov	r6, r2
 8013306:	461f      	mov	r7, r3
 8013308:	4605      	mov	r5, r0
 801330a:	f003 f9a9 	bl	8016660 <_localeconv_r>
 801330e:	6803      	ldr	r3, [r0, #0]
 8013310:	9304      	str	r3, [sp, #16]
 8013312:	4618      	mov	r0, r3
 8013314:	f7ec ff74 	bl	8000200 <strlen>
 8013318:	2300      	movs	r3, #0
 801331a:	930a      	str	r3, [sp, #40]	; 0x28
 801331c:	f8d8 3000 	ldr.w	r3, [r8]
 8013320:	9005      	str	r0, [sp, #20]
 8013322:	3307      	adds	r3, #7
 8013324:	f023 0307 	bic.w	r3, r3, #7
 8013328:	f103 0208 	add.w	r2, r3, #8
 801332c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013330:	f8d4 b000 	ldr.w	fp, [r4]
 8013334:	f8c8 2000 	str.w	r2, [r8]
 8013338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013340:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013344:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013348:	9307      	str	r3, [sp, #28]
 801334a:	f8cd 8018 	str.w	r8, [sp, #24]
 801334e:	f04f 32ff 	mov.w	r2, #4294967295
 8013352:	4ba7      	ldr	r3, [pc, #668]	; (80135f0 <_printf_float+0x2f8>)
 8013354:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013358:	f7ed fc00 	bl	8000b5c <__aeabi_dcmpun>
 801335c:	bb70      	cbnz	r0, 80133bc <_printf_float+0xc4>
 801335e:	f04f 32ff 	mov.w	r2, #4294967295
 8013362:	4ba3      	ldr	r3, [pc, #652]	; (80135f0 <_printf_float+0x2f8>)
 8013364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013368:	f7ed fbda 	bl	8000b20 <__aeabi_dcmple>
 801336c:	bb30      	cbnz	r0, 80133bc <_printf_float+0xc4>
 801336e:	2200      	movs	r2, #0
 8013370:	2300      	movs	r3, #0
 8013372:	4640      	mov	r0, r8
 8013374:	4649      	mov	r1, r9
 8013376:	f7ed fbc9 	bl	8000b0c <__aeabi_dcmplt>
 801337a:	b110      	cbz	r0, 8013382 <_printf_float+0x8a>
 801337c:	232d      	movs	r3, #45	; 0x2d
 801337e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013382:	4a9c      	ldr	r2, [pc, #624]	; (80135f4 <_printf_float+0x2fc>)
 8013384:	4b9c      	ldr	r3, [pc, #624]	; (80135f8 <_printf_float+0x300>)
 8013386:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801338a:	bf8c      	ite	hi
 801338c:	4690      	movhi	r8, r2
 801338e:	4698      	movls	r8, r3
 8013390:	2303      	movs	r3, #3
 8013392:	f02b 0204 	bic.w	r2, fp, #4
 8013396:	6123      	str	r3, [r4, #16]
 8013398:	6022      	str	r2, [r4, #0]
 801339a:	f04f 0900 	mov.w	r9, #0
 801339e:	9700      	str	r7, [sp, #0]
 80133a0:	4633      	mov	r3, r6
 80133a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80133a4:	4621      	mov	r1, r4
 80133a6:	4628      	mov	r0, r5
 80133a8:	f000 f9e6 	bl	8013778 <_printf_common>
 80133ac:	3001      	adds	r0, #1
 80133ae:	f040 808d 	bne.w	80134cc <_printf_float+0x1d4>
 80133b2:	f04f 30ff 	mov.w	r0, #4294967295
 80133b6:	b00d      	add	sp, #52	; 0x34
 80133b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133bc:	4642      	mov	r2, r8
 80133be:	464b      	mov	r3, r9
 80133c0:	4640      	mov	r0, r8
 80133c2:	4649      	mov	r1, r9
 80133c4:	f7ed fbca 	bl	8000b5c <__aeabi_dcmpun>
 80133c8:	b110      	cbz	r0, 80133d0 <_printf_float+0xd8>
 80133ca:	4a8c      	ldr	r2, [pc, #560]	; (80135fc <_printf_float+0x304>)
 80133cc:	4b8c      	ldr	r3, [pc, #560]	; (8013600 <_printf_float+0x308>)
 80133ce:	e7da      	b.n	8013386 <_printf_float+0x8e>
 80133d0:	6861      	ldr	r1, [r4, #4]
 80133d2:	1c4b      	adds	r3, r1, #1
 80133d4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80133d8:	a80a      	add	r0, sp, #40	; 0x28
 80133da:	d13e      	bne.n	801345a <_printf_float+0x162>
 80133dc:	2306      	movs	r3, #6
 80133de:	6063      	str	r3, [r4, #4]
 80133e0:	2300      	movs	r3, #0
 80133e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80133e6:	ab09      	add	r3, sp, #36	; 0x24
 80133e8:	9300      	str	r3, [sp, #0]
 80133ea:	ec49 8b10 	vmov	d0, r8, r9
 80133ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80133f2:	6022      	str	r2, [r4, #0]
 80133f4:	f8cd a004 	str.w	sl, [sp, #4]
 80133f8:	6861      	ldr	r1, [r4, #4]
 80133fa:	4628      	mov	r0, r5
 80133fc:	f7ff fee7 	bl	80131ce <__cvt>
 8013400:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013404:	2b47      	cmp	r3, #71	; 0x47
 8013406:	4680      	mov	r8, r0
 8013408:	d109      	bne.n	801341e <_printf_float+0x126>
 801340a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801340c:	1cd8      	adds	r0, r3, #3
 801340e:	db02      	blt.n	8013416 <_printf_float+0x11e>
 8013410:	6862      	ldr	r2, [r4, #4]
 8013412:	4293      	cmp	r3, r2
 8013414:	dd47      	ble.n	80134a6 <_printf_float+0x1ae>
 8013416:	f1aa 0a02 	sub.w	sl, sl, #2
 801341a:	fa5f fa8a 	uxtb.w	sl, sl
 801341e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013422:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013424:	d824      	bhi.n	8013470 <_printf_float+0x178>
 8013426:	3901      	subs	r1, #1
 8013428:	4652      	mov	r2, sl
 801342a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801342e:	9109      	str	r1, [sp, #36]	; 0x24
 8013430:	f7ff ff2e 	bl	8013290 <__exponent>
 8013434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013436:	1813      	adds	r3, r2, r0
 8013438:	2a01      	cmp	r2, #1
 801343a:	4681      	mov	r9, r0
 801343c:	6123      	str	r3, [r4, #16]
 801343e:	dc02      	bgt.n	8013446 <_printf_float+0x14e>
 8013440:	6822      	ldr	r2, [r4, #0]
 8013442:	07d1      	lsls	r1, r2, #31
 8013444:	d501      	bpl.n	801344a <_printf_float+0x152>
 8013446:	3301      	adds	r3, #1
 8013448:	6123      	str	r3, [r4, #16]
 801344a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801344e:	2b00      	cmp	r3, #0
 8013450:	d0a5      	beq.n	801339e <_printf_float+0xa6>
 8013452:	232d      	movs	r3, #45	; 0x2d
 8013454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013458:	e7a1      	b.n	801339e <_printf_float+0xa6>
 801345a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801345e:	f000 8177 	beq.w	8013750 <_printf_float+0x458>
 8013462:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013466:	d1bb      	bne.n	80133e0 <_printf_float+0xe8>
 8013468:	2900      	cmp	r1, #0
 801346a:	d1b9      	bne.n	80133e0 <_printf_float+0xe8>
 801346c:	2301      	movs	r3, #1
 801346e:	e7b6      	b.n	80133de <_printf_float+0xe6>
 8013470:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8013474:	d119      	bne.n	80134aa <_printf_float+0x1b2>
 8013476:	2900      	cmp	r1, #0
 8013478:	6863      	ldr	r3, [r4, #4]
 801347a:	dd0c      	ble.n	8013496 <_printf_float+0x19e>
 801347c:	6121      	str	r1, [r4, #16]
 801347e:	b913      	cbnz	r3, 8013486 <_printf_float+0x18e>
 8013480:	6822      	ldr	r2, [r4, #0]
 8013482:	07d2      	lsls	r2, r2, #31
 8013484:	d502      	bpl.n	801348c <_printf_float+0x194>
 8013486:	3301      	adds	r3, #1
 8013488:	440b      	add	r3, r1
 801348a:	6123      	str	r3, [r4, #16]
 801348c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801348e:	65a3      	str	r3, [r4, #88]	; 0x58
 8013490:	f04f 0900 	mov.w	r9, #0
 8013494:	e7d9      	b.n	801344a <_printf_float+0x152>
 8013496:	b913      	cbnz	r3, 801349e <_printf_float+0x1a6>
 8013498:	6822      	ldr	r2, [r4, #0]
 801349a:	07d0      	lsls	r0, r2, #31
 801349c:	d501      	bpl.n	80134a2 <_printf_float+0x1aa>
 801349e:	3302      	adds	r3, #2
 80134a0:	e7f3      	b.n	801348a <_printf_float+0x192>
 80134a2:	2301      	movs	r3, #1
 80134a4:	e7f1      	b.n	801348a <_printf_float+0x192>
 80134a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80134aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80134ae:	4293      	cmp	r3, r2
 80134b0:	db05      	blt.n	80134be <_printf_float+0x1c6>
 80134b2:	6822      	ldr	r2, [r4, #0]
 80134b4:	6123      	str	r3, [r4, #16]
 80134b6:	07d1      	lsls	r1, r2, #31
 80134b8:	d5e8      	bpl.n	801348c <_printf_float+0x194>
 80134ba:	3301      	adds	r3, #1
 80134bc:	e7e5      	b.n	801348a <_printf_float+0x192>
 80134be:	2b00      	cmp	r3, #0
 80134c0:	bfd4      	ite	le
 80134c2:	f1c3 0302 	rsble	r3, r3, #2
 80134c6:	2301      	movgt	r3, #1
 80134c8:	4413      	add	r3, r2
 80134ca:	e7de      	b.n	801348a <_printf_float+0x192>
 80134cc:	6823      	ldr	r3, [r4, #0]
 80134ce:	055a      	lsls	r2, r3, #21
 80134d0:	d407      	bmi.n	80134e2 <_printf_float+0x1ea>
 80134d2:	6923      	ldr	r3, [r4, #16]
 80134d4:	4642      	mov	r2, r8
 80134d6:	4631      	mov	r1, r6
 80134d8:	4628      	mov	r0, r5
 80134da:	47b8      	blx	r7
 80134dc:	3001      	adds	r0, #1
 80134de:	d12b      	bne.n	8013538 <_printf_float+0x240>
 80134e0:	e767      	b.n	80133b2 <_printf_float+0xba>
 80134e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80134e6:	f240 80dc 	bls.w	80136a2 <_printf_float+0x3aa>
 80134ea:	2200      	movs	r2, #0
 80134ec:	2300      	movs	r3, #0
 80134ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80134f2:	f7ed fb01 	bl	8000af8 <__aeabi_dcmpeq>
 80134f6:	2800      	cmp	r0, #0
 80134f8:	d033      	beq.n	8013562 <_printf_float+0x26a>
 80134fa:	2301      	movs	r3, #1
 80134fc:	4a41      	ldr	r2, [pc, #260]	; (8013604 <_printf_float+0x30c>)
 80134fe:	4631      	mov	r1, r6
 8013500:	4628      	mov	r0, r5
 8013502:	47b8      	blx	r7
 8013504:	3001      	adds	r0, #1
 8013506:	f43f af54 	beq.w	80133b2 <_printf_float+0xba>
 801350a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801350e:	429a      	cmp	r2, r3
 8013510:	db02      	blt.n	8013518 <_printf_float+0x220>
 8013512:	6823      	ldr	r3, [r4, #0]
 8013514:	07d8      	lsls	r0, r3, #31
 8013516:	d50f      	bpl.n	8013538 <_printf_float+0x240>
 8013518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801351c:	4631      	mov	r1, r6
 801351e:	4628      	mov	r0, r5
 8013520:	47b8      	blx	r7
 8013522:	3001      	adds	r0, #1
 8013524:	f43f af45 	beq.w	80133b2 <_printf_float+0xba>
 8013528:	f04f 0800 	mov.w	r8, #0
 801352c:	f104 091a 	add.w	r9, r4, #26
 8013530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013532:	3b01      	subs	r3, #1
 8013534:	4543      	cmp	r3, r8
 8013536:	dc09      	bgt.n	801354c <_printf_float+0x254>
 8013538:	6823      	ldr	r3, [r4, #0]
 801353a:	079b      	lsls	r3, r3, #30
 801353c:	f100 8103 	bmi.w	8013746 <_printf_float+0x44e>
 8013540:	68e0      	ldr	r0, [r4, #12]
 8013542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013544:	4298      	cmp	r0, r3
 8013546:	bfb8      	it	lt
 8013548:	4618      	movlt	r0, r3
 801354a:	e734      	b.n	80133b6 <_printf_float+0xbe>
 801354c:	2301      	movs	r3, #1
 801354e:	464a      	mov	r2, r9
 8013550:	4631      	mov	r1, r6
 8013552:	4628      	mov	r0, r5
 8013554:	47b8      	blx	r7
 8013556:	3001      	adds	r0, #1
 8013558:	f43f af2b 	beq.w	80133b2 <_printf_float+0xba>
 801355c:	f108 0801 	add.w	r8, r8, #1
 8013560:	e7e6      	b.n	8013530 <_printf_float+0x238>
 8013562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013564:	2b00      	cmp	r3, #0
 8013566:	dc2b      	bgt.n	80135c0 <_printf_float+0x2c8>
 8013568:	2301      	movs	r3, #1
 801356a:	4a26      	ldr	r2, [pc, #152]	; (8013604 <_printf_float+0x30c>)
 801356c:	4631      	mov	r1, r6
 801356e:	4628      	mov	r0, r5
 8013570:	47b8      	blx	r7
 8013572:	3001      	adds	r0, #1
 8013574:	f43f af1d 	beq.w	80133b2 <_printf_float+0xba>
 8013578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801357a:	b923      	cbnz	r3, 8013586 <_printf_float+0x28e>
 801357c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801357e:	b913      	cbnz	r3, 8013586 <_printf_float+0x28e>
 8013580:	6823      	ldr	r3, [r4, #0]
 8013582:	07d9      	lsls	r1, r3, #31
 8013584:	d5d8      	bpl.n	8013538 <_printf_float+0x240>
 8013586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801358a:	4631      	mov	r1, r6
 801358c:	4628      	mov	r0, r5
 801358e:	47b8      	blx	r7
 8013590:	3001      	adds	r0, #1
 8013592:	f43f af0e 	beq.w	80133b2 <_printf_float+0xba>
 8013596:	f04f 0900 	mov.w	r9, #0
 801359a:	f104 0a1a 	add.w	sl, r4, #26
 801359e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135a0:	425b      	negs	r3, r3
 80135a2:	454b      	cmp	r3, r9
 80135a4:	dc01      	bgt.n	80135aa <_printf_float+0x2b2>
 80135a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135a8:	e794      	b.n	80134d4 <_printf_float+0x1dc>
 80135aa:	2301      	movs	r3, #1
 80135ac:	4652      	mov	r2, sl
 80135ae:	4631      	mov	r1, r6
 80135b0:	4628      	mov	r0, r5
 80135b2:	47b8      	blx	r7
 80135b4:	3001      	adds	r0, #1
 80135b6:	f43f aefc 	beq.w	80133b2 <_printf_float+0xba>
 80135ba:	f109 0901 	add.w	r9, r9, #1
 80135be:	e7ee      	b.n	801359e <_printf_float+0x2a6>
 80135c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80135c4:	429a      	cmp	r2, r3
 80135c6:	bfa8      	it	ge
 80135c8:	461a      	movge	r2, r3
 80135ca:	2a00      	cmp	r2, #0
 80135cc:	4691      	mov	r9, r2
 80135ce:	dd07      	ble.n	80135e0 <_printf_float+0x2e8>
 80135d0:	4613      	mov	r3, r2
 80135d2:	4631      	mov	r1, r6
 80135d4:	4642      	mov	r2, r8
 80135d6:	4628      	mov	r0, r5
 80135d8:	47b8      	blx	r7
 80135da:	3001      	adds	r0, #1
 80135dc:	f43f aee9 	beq.w	80133b2 <_printf_float+0xba>
 80135e0:	f104 031a 	add.w	r3, r4, #26
 80135e4:	f04f 0b00 	mov.w	fp, #0
 80135e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80135ec:	9306      	str	r3, [sp, #24]
 80135ee:	e015      	b.n	801361c <_printf_float+0x324>
 80135f0:	7fefffff 	.word	0x7fefffff
 80135f4:	080187d8 	.word	0x080187d8
 80135f8:	080187d4 	.word	0x080187d4
 80135fc:	080187e0 	.word	0x080187e0
 8013600:	080187dc 	.word	0x080187dc
 8013604:	08018a03 	.word	0x08018a03
 8013608:	2301      	movs	r3, #1
 801360a:	9a06      	ldr	r2, [sp, #24]
 801360c:	4631      	mov	r1, r6
 801360e:	4628      	mov	r0, r5
 8013610:	47b8      	blx	r7
 8013612:	3001      	adds	r0, #1
 8013614:	f43f aecd 	beq.w	80133b2 <_printf_float+0xba>
 8013618:	f10b 0b01 	add.w	fp, fp, #1
 801361c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013620:	ebaa 0309 	sub.w	r3, sl, r9
 8013624:	455b      	cmp	r3, fp
 8013626:	dcef      	bgt.n	8013608 <_printf_float+0x310>
 8013628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801362c:	429a      	cmp	r2, r3
 801362e:	44d0      	add	r8, sl
 8013630:	db15      	blt.n	801365e <_printf_float+0x366>
 8013632:	6823      	ldr	r3, [r4, #0]
 8013634:	07da      	lsls	r2, r3, #31
 8013636:	d412      	bmi.n	801365e <_printf_float+0x366>
 8013638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801363a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801363c:	eba3 020a 	sub.w	r2, r3, sl
 8013640:	eba3 0a01 	sub.w	sl, r3, r1
 8013644:	4592      	cmp	sl, r2
 8013646:	bfa8      	it	ge
 8013648:	4692      	movge	sl, r2
 801364a:	f1ba 0f00 	cmp.w	sl, #0
 801364e:	dc0e      	bgt.n	801366e <_printf_float+0x376>
 8013650:	f04f 0800 	mov.w	r8, #0
 8013654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013658:	f104 091a 	add.w	r9, r4, #26
 801365c:	e019      	b.n	8013692 <_printf_float+0x39a>
 801365e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013662:	4631      	mov	r1, r6
 8013664:	4628      	mov	r0, r5
 8013666:	47b8      	blx	r7
 8013668:	3001      	adds	r0, #1
 801366a:	d1e5      	bne.n	8013638 <_printf_float+0x340>
 801366c:	e6a1      	b.n	80133b2 <_printf_float+0xba>
 801366e:	4653      	mov	r3, sl
 8013670:	4642      	mov	r2, r8
 8013672:	4631      	mov	r1, r6
 8013674:	4628      	mov	r0, r5
 8013676:	47b8      	blx	r7
 8013678:	3001      	adds	r0, #1
 801367a:	d1e9      	bne.n	8013650 <_printf_float+0x358>
 801367c:	e699      	b.n	80133b2 <_printf_float+0xba>
 801367e:	2301      	movs	r3, #1
 8013680:	464a      	mov	r2, r9
 8013682:	4631      	mov	r1, r6
 8013684:	4628      	mov	r0, r5
 8013686:	47b8      	blx	r7
 8013688:	3001      	adds	r0, #1
 801368a:	f43f ae92 	beq.w	80133b2 <_printf_float+0xba>
 801368e:	f108 0801 	add.w	r8, r8, #1
 8013692:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013696:	1a9b      	subs	r3, r3, r2
 8013698:	eba3 030a 	sub.w	r3, r3, sl
 801369c:	4543      	cmp	r3, r8
 801369e:	dcee      	bgt.n	801367e <_printf_float+0x386>
 80136a0:	e74a      	b.n	8013538 <_printf_float+0x240>
 80136a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136a4:	2a01      	cmp	r2, #1
 80136a6:	dc01      	bgt.n	80136ac <_printf_float+0x3b4>
 80136a8:	07db      	lsls	r3, r3, #31
 80136aa:	d53a      	bpl.n	8013722 <_printf_float+0x42a>
 80136ac:	2301      	movs	r3, #1
 80136ae:	4642      	mov	r2, r8
 80136b0:	4631      	mov	r1, r6
 80136b2:	4628      	mov	r0, r5
 80136b4:	47b8      	blx	r7
 80136b6:	3001      	adds	r0, #1
 80136b8:	f43f ae7b 	beq.w	80133b2 <_printf_float+0xba>
 80136bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80136c0:	4631      	mov	r1, r6
 80136c2:	4628      	mov	r0, r5
 80136c4:	47b8      	blx	r7
 80136c6:	3001      	adds	r0, #1
 80136c8:	f108 0801 	add.w	r8, r8, #1
 80136cc:	f43f ae71 	beq.w	80133b2 <_printf_float+0xba>
 80136d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136d2:	2200      	movs	r2, #0
 80136d4:	f103 3aff 	add.w	sl, r3, #4294967295
 80136d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80136dc:	2300      	movs	r3, #0
 80136de:	f7ed fa0b 	bl	8000af8 <__aeabi_dcmpeq>
 80136e2:	b9c8      	cbnz	r0, 8013718 <_printf_float+0x420>
 80136e4:	4653      	mov	r3, sl
 80136e6:	4642      	mov	r2, r8
 80136e8:	4631      	mov	r1, r6
 80136ea:	4628      	mov	r0, r5
 80136ec:	47b8      	blx	r7
 80136ee:	3001      	adds	r0, #1
 80136f0:	d10e      	bne.n	8013710 <_printf_float+0x418>
 80136f2:	e65e      	b.n	80133b2 <_printf_float+0xba>
 80136f4:	2301      	movs	r3, #1
 80136f6:	4652      	mov	r2, sl
 80136f8:	4631      	mov	r1, r6
 80136fa:	4628      	mov	r0, r5
 80136fc:	47b8      	blx	r7
 80136fe:	3001      	adds	r0, #1
 8013700:	f43f ae57 	beq.w	80133b2 <_printf_float+0xba>
 8013704:	f108 0801 	add.w	r8, r8, #1
 8013708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801370a:	3b01      	subs	r3, #1
 801370c:	4543      	cmp	r3, r8
 801370e:	dcf1      	bgt.n	80136f4 <_printf_float+0x3fc>
 8013710:	464b      	mov	r3, r9
 8013712:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013716:	e6de      	b.n	80134d6 <_printf_float+0x1de>
 8013718:	f04f 0800 	mov.w	r8, #0
 801371c:	f104 0a1a 	add.w	sl, r4, #26
 8013720:	e7f2      	b.n	8013708 <_printf_float+0x410>
 8013722:	2301      	movs	r3, #1
 8013724:	e7df      	b.n	80136e6 <_printf_float+0x3ee>
 8013726:	2301      	movs	r3, #1
 8013728:	464a      	mov	r2, r9
 801372a:	4631      	mov	r1, r6
 801372c:	4628      	mov	r0, r5
 801372e:	47b8      	blx	r7
 8013730:	3001      	adds	r0, #1
 8013732:	f43f ae3e 	beq.w	80133b2 <_printf_float+0xba>
 8013736:	f108 0801 	add.w	r8, r8, #1
 801373a:	68e3      	ldr	r3, [r4, #12]
 801373c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801373e:	1a9b      	subs	r3, r3, r2
 8013740:	4543      	cmp	r3, r8
 8013742:	dcf0      	bgt.n	8013726 <_printf_float+0x42e>
 8013744:	e6fc      	b.n	8013540 <_printf_float+0x248>
 8013746:	f04f 0800 	mov.w	r8, #0
 801374a:	f104 0919 	add.w	r9, r4, #25
 801374e:	e7f4      	b.n	801373a <_printf_float+0x442>
 8013750:	2900      	cmp	r1, #0
 8013752:	f43f ae8b 	beq.w	801346c <_printf_float+0x174>
 8013756:	2300      	movs	r3, #0
 8013758:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801375c:	ab09      	add	r3, sp, #36	; 0x24
 801375e:	9300      	str	r3, [sp, #0]
 8013760:	ec49 8b10 	vmov	d0, r8, r9
 8013764:	6022      	str	r2, [r4, #0]
 8013766:	f8cd a004 	str.w	sl, [sp, #4]
 801376a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801376e:	4628      	mov	r0, r5
 8013770:	f7ff fd2d 	bl	80131ce <__cvt>
 8013774:	4680      	mov	r8, r0
 8013776:	e648      	b.n	801340a <_printf_float+0x112>

08013778 <_printf_common>:
 8013778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801377c:	4691      	mov	r9, r2
 801377e:	461f      	mov	r7, r3
 8013780:	688a      	ldr	r2, [r1, #8]
 8013782:	690b      	ldr	r3, [r1, #16]
 8013784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013788:	4293      	cmp	r3, r2
 801378a:	bfb8      	it	lt
 801378c:	4613      	movlt	r3, r2
 801378e:	f8c9 3000 	str.w	r3, [r9]
 8013792:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013796:	4606      	mov	r6, r0
 8013798:	460c      	mov	r4, r1
 801379a:	b112      	cbz	r2, 80137a2 <_printf_common+0x2a>
 801379c:	3301      	adds	r3, #1
 801379e:	f8c9 3000 	str.w	r3, [r9]
 80137a2:	6823      	ldr	r3, [r4, #0]
 80137a4:	0699      	lsls	r1, r3, #26
 80137a6:	bf42      	ittt	mi
 80137a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80137ac:	3302      	addmi	r3, #2
 80137ae:	f8c9 3000 	strmi.w	r3, [r9]
 80137b2:	6825      	ldr	r5, [r4, #0]
 80137b4:	f015 0506 	ands.w	r5, r5, #6
 80137b8:	d107      	bne.n	80137ca <_printf_common+0x52>
 80137ba:	f104 0a19 	add.w	sl, r4, #25
 80137be:	68e3      	ldr	r3, [r4, #12]
 80137c0:	f8d9 2000 	ldr.w	r2, [r9]
 80137c4:	1a9b      	subs	r3, r3, r2
 80137c6:	42ab      	cmp	r3, r5
 80137c8:	dc28      	bgt.n	801381c <_printf_common+0xa4>
 80137ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80137ce:	6822      	ldr	r2, [r4, #0]
 80137d0:	3300      	adds	r3, #0
 80137d2:	bf18      	it	ne
 80137d4:	2301      	movne	r3, #1
 80137d6:	0692      	lsls	r2, r2, #26
 80137d8:	d42d      	bmi.n	8013836 <_printf_common+0xbe>
 80137da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80137de:	4639      	mov	r1, r7
 80137e0:	4630      	mov	r0, r6
 80137e2:	47c0      	blx	r8
 80137e4:	3001      	adds	r0, #1
 80137e6:	d020      	beq.n	801382a <_printf_common+0xb2>
 80137e8:	6823      	ldr	r3, [r4, #0]
 80137ea:	68e5      	ldr	r5, [r4, #12]
 80137ec:	f8d9 2000 	ldr.w	r2, [r9]
 80137f0:	f003 0306 	and.w	r3, r3, #6
 80137f4:	2b04      	cmp	r3, #4
 80137f6:	bf08      	it	eq
 80137f8:	1aad      	subeq	r5, r5, r2
 80137fa:	68a3      	ldr	r3, [r4, #8]
 80137fc:	6922      	ldr	r2, [r4, #16]
 80137fe:	bf0c      	ite	eq
 8013800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013804:	2500      	movne	r5, #0
 8013806:	4293      	cmp	r3, r2
 8013808:	bfc4      	itt	gt
 801380a:	1a9b      	subgt	r3, r3, r2
 801380c:	18ed      	addgt	r5, r5, r3
 801380e:	f04f 0900 	mov.w	r9, #0
 8013812:	341a      	adds	r4, #26
 8013814:	454d      	cmp	r5, r9
 8013816:	d11a      	bne.n	801384e <_printf_common+0xd6>
 8013818:	2000      	movs	r0, #0
 801381a:	e008      	b.n	801382e <_printf_common+0xb6>
 801381c:	2301      	movs	r3, #1
 801381e:	4652      	mov	r2, sl
 8013820:	4639      	mov	r1, r7
 8013822:	4630      	mov	r0, r6
 8013824:	47c0      	blx	r8
 8013826:	3001      	adds	r0, #1
 8013828:	d103      	bne.n	8013832 <_printf_common+0xba>
 801382a:	f04f 30ff 	mov.w	r0, #4294967295
 801382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013832:	3501      	adds	r5, #1
 8013834:	e7c3      	b.n	80137be <_printf_common+0x46>
 8013836:	18e1      	adds	r1, r4, r3
 8013838:	1c5a      	adds	r2, r3, #1
 801383a:	2030      	movs	r0, #48	; 0x30
 801383c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013840:	4422      	add	r2, r4
 8013842:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013846:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801384a:	3302      	adds	r3, #2
 801384c:	e7c5      	b.n	80137da <_printf_common+0x62>
 801384e:	2301      	movs	r3, #1
 8013850:	4622      	mov	r2, r4
 8013852:	4639      	mov	r1, r7
 8013854:	4630      	mov	r0, r6
 8013856:	47c0      	blx	r8
 8013858:	3001      	adds	r0, #1
 801385a:	d0e6      	beq.n	801382a <_printf_common+0xb2>
 801385c:	f109 0901 	add.w	r9, r9, #1
 8013860:	e7d8      	b.n	8013814 <_printf_common+0x9c>
	...

08013864 <_printf_i>:
 8013864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013868:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801386c:	460c      	mov	r4, r1
 801386e:	7e09      	ldrb	r1, [r1, #24]
 8013870:	b085      	sub	sp, #20
 8013872:	296e      	cmp	r1, #110	; 0x6e
 8013874:	4617      	mov	r7, r2
 8013876:	4606      	mov	r6, r0
 8013878:	4698      	mov	r8, r3
 801387a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801387c:	f000 80b3 	beq.w	80139e6 <_printf_i+0x182>
 8013880:	d822      	bhi.n	80138c8 <_printf_i+0x64>
 8013882:	2963      	cmp	r1, #99	; 0x63
 8013884:	d036      	beq.n	80138f4 <_printf_i+0x90>
 8013886:	d80a      	bhi.n	801389e <_printf_i+0x3a>
 8013888:	2900      	cmp	r1, #0
 801388a:	f000 80b9 	beq.w	8013a00 <_printf_i+0x19c>
 801388e:	2958      	cmp	r1, #88	; 0x58
 8013890:	f000 8083 	beq.w	801399a <_printf_i+0x136>
 8013894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013898:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801389c:	e032      	b.n	8013904 <_printf_i+0xa0>
 801389e:	2964      	cmp	r1, #100	; 0x64
 80138a0:	d001      	beq.n	80138a6 <_printf_i+0x42>
 80138a2:	2969      	cmp	r1, #105	; 0x69
 80138a4:	d1f6      	bne.n	8013894 <_printf_i+0x30>
 80138a6:	6820      	ldr	r0, [r4, #0]
 80138a8:	6813      	ldr	r3, [r2, #0]
 80138aa:	0605      	lsls	r5, r0, #24
 80138ac:	f103 0104 	add.w	r1, r3, #4
 80138b0:	d52a      	bpl.n	8013908 <_printf_i+0xa4>
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	6011      	str	r1, [r2, #0]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	da03      	bge.n	80138c2 <_printf_i+0x5e>
 80138ba:	222d      	movs	r2, #45	; 0x2d
 80138bc:	425b      	negs	r3, r3
 80138be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80138c2:	486f      	ldr	r0, [pc, #444]	; (8013a80 <_printf_i+0x21c>)
 80138c4:	220a      	movs	r2, #10
 80138c6:	e039      	b.n	801393c <_printf_i+0xd8>
 80138c8:	2973      	cmp	r1, #115	; 0x73
 80138ca:	f000 809d 	beq.w	8013a08 <_printf_i+0x1a4>
 80138ce:	d808      	bhi.n	80138e2 <_printf_i+0x7e>
 80138d0:	296f      	cmp	r1, #111	; 0x6f
 80138d2:	d020      	beq.n	8013916 <_printf_i+0xb2>
 80138d4:	2970      	cmp	r1, #112	; 0x70
 80138d6:	d1dd      	bne.n	8013894 <_printf_i+0x30>
 80138d8:	6823      	ldr	r3, [r4, #0]
 80138da:	f043 0320 	orr.w	r3, r3, #32
 80138de:	6023      	str	r3, [r4, #0]
 80138e0:	e003      	b.n	80138ea <_printf_i+0x86>
 80138e2:	2975      	cmp	r1, #117	; 0x75
 80138e4:	d017      	beq.n	8013916 <_printf_i+0xb2>
 80138e6:	2978      	cmp	r1, #120	; 0x78
 80138e8:	d1d4      	bne.n	8013894 <_printf_i+0x30>
 80138ea:	2378      	movs	r3, #120	; 0x78
 80138ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80138f0:	4864      	ldr	r0, [pc, #400]	; (8013a84 <_printf_i+0x220>)
 80138f2:	e055      	b.n	80139a0 <_printf_i+0x13c>
 80138f4:	6813      	ldr	r3, [r2, #0]
 80138f6:	1d19      	adds	r1, r3, #4
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	6011      	str	r1, [r2, #0]
 80138fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013904:	2301      	movs	r3, #1
 8013906:	e08c      	b.n	8013a22 <_printf_i+0x1be>
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	6011      	str	r1, [r2, #0]
 801390c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013910:	bf18      	it	ne
 8013912:	b21b      	sxthne	r3, r3
 8013914:	e7cf      	b.n	80138b6 <_printf_i+0x52>
 8013916:	6813      	ldr	r3, [r2, #0]
 8013918:	6825      	ldr	r5, [r4, #0]
 801391a:	1d18      	adds	r0, r3, #4
 801391c:	6010      	str	r0, [r2, #0]
 801391e:	0628      	lsls	r0, r5, #24
 8013920:	d501      	bpl.n	8013926 <_printf_i+0xc2>
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	e002      	b.n	801392c <_printf_i+0xc8>
 8013926:	0668      	lsls	r0, r5, #25
 8013928:	d5fb      	bpl.n	8013922 <_printf_i+0xbe>
 801392a:	881b      	ldrh	r3, [r3, #0]
 801392c:	4854      	ldr	r0, [pc, #336]	; (8013a80 <_printf_i+0x21c>)
 801392e:	296f      	cmp	r1, #111	; 0x6f
 8013930:	bf14      	ite	ne
 8013932:	220a      	movne	r2, #10
 8013934:	2208      	moveq	r2, #8
 8013936:	2100      	movs	r1, #0
 8013938:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801393c:	6865      	ldr	r5, [r4, #4]
 801393e:	60a5      	str	r5, [r4, #8]
 8013940:	2d00      	cmp	r5, #0
 8013942:	f2c0 8095 	blt.w	8013a70 <_printf_i+0x20c>
 8013946:	6821      	ldr	r1, [r4, #0]
 8013948:	f021 0104 	bic.w	r1, r1, #4
 801394c:	6021      	str	r1, [r4, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d13d      	bne.n	80139ce <_printf_i+0x16a>
 8013952:	2d00      	cmp	r5, #0
 8013954:	f040 808e 	bne.w	8013a74 <_printf_i+0x210>
 8013958:	4665      	mov	r5, ip
 801395a:	2a08      	cmp	r2, #8
 801395c:	d10b      	bne.n	8013976 <_printf_i+0x112>
 801395e:	6823      	ldr	r3, [r4, #0]
 8013960:	07db      	lsls	r3, r3, #31
 8013962:	d508      	bpl.n	8013976 <_printf_i+0x112>
 8013964:	6923      	ldr	r3, [r4, #16]
 8013966:	6862      	ldr	r2, [r4, #4]
 8013968:	429a      	cmp	r2, r3
 801396a:	bfde      	ittt	le
 801396c:	2330      	movle	r3, #48	; 0x30
 801396e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013972:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013976:	ebac 0305 	sub.w	r3, ip, r5
 801397a:	6123      	str	r3, [r4, #16]
 801397c:	f8cd 8000 	str.w	r8, [sp]
 8013980:	463b      	mov	r3, r7
 8013982:	aa03      	add	r2, sp, #12
 8013984:	4621      	mov	r1, r4
 8013986:	4630      	mov	r0, r6
 8013988:	f7ff fef6 	bl	8013778 <_printf_common>
 801398c:	3001      	adds	r0, #1
 801398e:	d14d      	bne.n	8013a2c <_printf_i+0x1c8>
 8013990:	f04f 30ff 	mov.w	r0, #4294967295
 8013994:	b005      	add	sp, #20
 8013996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801399a:	4839      	ldr	r0, [pc, #228]	; (8013a80 <_printf_i+0x21c>)
 801399c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80139a0:	6813      	ldr	r3, [r2, #0]
 80139a2:	6821      	ldr	r1, [r4, #0]
 80139a4:	1d1d      	adds	r5, r3, #4
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	6015      	str	r5, [r2, #0]
 80139aa:	060a      	lsls	r2, r1, #24
 80139ac:	d50b      	bpl.n	80139c6 <_printf_i+0x162>
 80139ae:	07ca      	lsls	r2, r1, #31
 80139b0:	bf44      	itt	mi
 80139b2:	f041 0120 	orrmi.w	r1, r1, #32
 80139b6:	6021      	strmi	r1, [r4, #0]
 80139b8:	b91b      	cbnz	r3, 80139c2 <_printf_i+0x15e>
 80139ba:	6822      	ldr	r2, [r4, #0]
 80139bc:	f022 0220 	bic.w	r2, r2, #32
 80139c0:	6022      	str	r2, [r4, #0]
 80139c2:	2210      	movs	r2, #16
 80139c4:	e7b7      	b.n	8013936 <_printf_i+0xd2>
 80139c6:	064d      	lsls	r5, r1, #25
 80139c8:	bf48      	it	mi
 80139ca:	b29b      	uxthmi	r3, r3
 80139cc:	e7ef      	b.n	80139ae <_printf_i+0x14a>
 80139ce:	4665      	mov	r5, ip
 80139d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80139d4:	fb02 3311 	mls	r3, r2, r1, r3
 80139d8:	5cc3      	ldrb	r3, [r0, r3]
 80139da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80139de:	460b      	mov	r3, r1
 80139e0:	2900      	cmp	r1, #0
 80139e2:	d1f5      	bne.n	80139d0 <_printf_i+0x16c>
 80139e4:	e7b9      	b.n	801395a <_printf_i+0xf6>
 80139e6:	6813      	ldr	r3, [r2, #0]
 80139e8:	6825      	ldr	r5, [r4, #0]
 80139ea:	6961      	ldr	r1, [r4, #20]
 80139ec:	1d18      	adds	r0, r3, #4
 80139ee:	6010      	str	r0, [r2, #0]
 80139f0:	0628      	lsls	r0, r5, #24
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	d501      	bpl.n	80139fa <_printf_i+0x196>
 80139f6:	6019      	str	r1, [r3, #0]
 80139f8:	e002      	b.n	8013a00 <_printf_i+0x19c>
 80139fa:	066a      	lsls	r2, r5, #25
 80139fc:	d5fb      	bpl.n	80139f6 <_printf_i+0x192>
 80139fe:	8019      	strh	r1, [r3, #0]
 8013a00:	2300      	movs	r3, #0
 8013a02:	6123      	str	r3, [r4, #16]
 8013a04:	4665      	mov	r5, ip
 8013a06:	e7b9      	b.n	801397c <_printf_i+0x118>
 8013a08:	6813      	ldr	r3, [r2, #0]
 8013a0a:	1d19      	adds	r1, r3, #4
 8013a0c:	6011      	str	r1, [r2, #0]
 8013a0e:	681d      	ldr	r5, [r3, #0]
 8013a10:	6862      	ldr	r2, [r4, #4]
 8013a12:	2100      	movs	r1, #0
 8013a14:	4628      	mov	r0, r5
 8013a16:	f7ec fbfb 	bl	8000210 <memchr>
 8013a1a:	b108      	cbz	r0, 8013a20 <_printf_i+0x1bc>
 8013a1c:	1b40      	subs	r0, r0, r5
 8013a1e:	6060      	str	r0, [r4, #4]
 8013a20:	6863      	ldr	r3, [r4, #4]
 8013a22:	6123      	str	r3, [r4, #16]
 8013a24:	2300      	movs	r3, #0
 8013a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a2a:	e7a7      	b.n	801397c <_printf_i+0x118>
 8013a2c:	6923      	ldr	r3, [r4, #16]
 8013a2e:	462a      	mov	r2, r5
 8013a30:	4639      	mov	r1, r7
 8013a32:	4630      	mov	r0, r6
 8013a34:	47c0      	blx	r8
 8013a36:	3001      	adds	r0, #1
 8013a38:	d0aa      	beq.n	8013990 <_printf_i+0x12c>
 8013a3a:	6823      	ldr	r3, [r4, #0]
 8013a3c:	079b      	lsls	r3, r3, #30
 8013a3e:	d413      	bmi.n	8013a68 <_printf_i+0x204>
 8013a40:	68e0      	ldr	r0, [r4, #12]
 8013a42:	9b03      	ldr	r3, [sp, #12]
 8013a44:	4298      	cmp	r0, r3
 8013a46:	bfb8      	it	lt
 8013a48:	4618      	movlt	r0, r3
 8013a4a:	e7a3      	b.n	8013994 <_printf_i+0x130>
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	464a      	mov	r2, r9
 8013a50:	4639      	mov	r1, r7
 8013a52:	4630      	mov	r0, r6
 8013a54:	47c0      	blx	r8
 8013a56:	3001      	adds	r0, #1
 8013a58:	d09a      	beq.n	8013990 <_printf_i+0x12c>
 8013a5a:	3501      	adds	r5, #1
 8013a5c:	68e3      	ldr	r3, [r4, #12]
 8013a5e:	9a03      	ldr	r2, [sp, #12]
 8013a60:	1a9b      	subs	r3, r3, r2
 8013a62:	42ab      	cmp	r3, r5
 8013a64:	dcf2      	bgt.n	8013a4c <_printf_i+0x1e8>
 8013a66:	e7eb      	b.n	8013a40 <_printf_i+0x1dc>
 8013a68:	2500      	movs	r5, #0
 8013a6a:	f104 0919 	add.w	r9, r4, #25
 8013a6e:	e7f5      	b.n	8013a5c <_printf_i+0x1f8>
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d1ac      	bne.n	80139ce <_printf_i+0x16a>
 8013a74:	7803      	ldrb	r3, [r0, #0]
 8013a76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a7e:	e76c      	b.n	801395a <_printf_i+0xf6>
 8013a80:	080187e4 	.word	0x080187e4
 8013a84:	080187f5 	.word	0x080187f5

08013a88 <_scanf_float>:
 8013a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a8c:	469a      	mov	sl, r3
 8013a8e:	688b      	ldr	r3, [r1, #8]
 8013a90:	4616      	mov	r6, r2
 8013a92:	1e5a      	subs	r2, r3, #1
 8013a94:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013a98:	b087      	sub	sp, #28
 8013a9a:	bf83      	ittte	hi
 8013a9c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013aa0:	189b      	addhi	r3, r3, r2
 8013aa2:	9301      	strhi	r3, [sp, #4]
 8013aa4:	2300      	movls	r3, #0
 8013aa6:	bf86      	itte	hi
 8013aa8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013aac:	608b      	strhi	r3, [r1, #8]
 8013aae:	9301      	strls	r3, [sp, #4]
 8013ab0:	680b      	ldr	r3, [r1, #0]
 8013ab2:	4688      	mov	r8, r1
 8013ab4:	f04f 0b00 	mov.w	fp, #0
 8013ab8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013abc:	f848 3b1c 	str.w	r3, [r8], #28
 8013ac0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013ac4:	4607      	mov	r7, r0
 8013ac6:	460c      	mov	r4, r1
 8013ac8:	4645      	mov	r5, r8
 8013aca:	465a      	mov	r2, fp
 8013acc:	46d9      	mov	r9, fp
 8013ace:	f8cd b008 	str.w	fp, [sp, #8]
 8013ad2:	68a1      	ldr	r1, [r4, #8]
 8013ad4:	b181      	cbz	r1, 8013af8 <_scanf_float+0x70>
 8013ad6:	6833      	ldr	r3, [r6, #0]
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	2b49      	cmp	r3, #73	; 0x49
 8013adc:	d071      	beq.n	8013bc2 <_scanf_float+0x13a>
 8013ade:	d84d      	bhi.n	8013b7c <_scanf_float+0xf4>
 8013ae0:	2b39      	cmp	r3, #57	; 0x39
 8013ae2:	d840      	bhi.n	8013b66 <_scanf_float+0xde>
 8013ae4:	2b31      	cmp	r3, #49	; 0x31
 8013ae6:	f080 8088 	bcs.w	8013bfa <_scanf_float+0x172>
 8013aea:	2b2d      	cmp	r3, #45	; 0x2d
 8013aec:	f000 8090 	beq.w	8013c10 <_scanf_float+0x188>
 8013af0:	d815      	bhi.n	8013b1e <_scanf_float+0x96>
 8013af2:	2b2b      	cmp	r3, #43	; 0x2b
 8013af4:	f000 808c 	beq.w	8013c10 <_scanf_float+0x188>
 8013af8:	f1b9 0f00 	cmp.w	r9, #0
 8013afc:	d003      	beq.n	8013b06 <_scanf_float+0x7e>
 8013afe:	6823      	ldr	r3, [r4, #0]
 8013b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b04:	6023      	str	r3, [r4, #0]
 8013b06:	3a01      	subs	r2, #1
 8013b08:	2a01      	cmp	r2, #1
 8013b0a:	f200 80ea 	bhi.w	8013ce2 <_scanf_float+0x25a>
 8013b0e:	4545      	cmp	r5, r8
 8013b10:	f200 80dc 	bhi.w	8013ccc <_scanf_float+0x244>
 8013b14:	2601      	movs	r6, #1
 8013b16:	4630      	mov	r0, r6
 8013b18:	b007      	add	sp, #28
 8013b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8013b20:	f000 809f 	beq.w	8013c62 <_scanf_float+0x1da>
 8013b24:	2b30      	cmp	r3, #48	; 0x30
 8013b26:	d1e7      	bne.n	8013af8 <_scanf_float+0x70>
 8013b28:	6820      	ldr	r0, [r4, #0]
 8013b2a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013b2e:	d064      	beq.n	8013bfa <_scanf_float+0x172>
 8013b30:	9b01      	ldr	r3, [sp, #4]
 8013b32:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013b36:	6020      	str	r0, [r4, #0]
 8013b38:	f109 0901 	add.w	r9, r9, #1
 8013b3c:	b11b      	cbz	r3, 8013b46 <_scanf_float+0xbe>
 8013b3e:	3b01      	subs	r3, #1
 8013b40:	3101      	adds	r1, #1
 8013b42:	9301      	str	r3, [sp, #4]
 8013b44:	60a1      	str	r1, [r4, #8]
 8013b46:	68a3      	ldr	r3, [r4, #8]
 8013b48:	3b01      	subs	r3, #1
 8013b4a:	60a3      	str	r3, [r4, #8]
 8013b4c:	6923      	ldr	r3, [r4, #16]
 8013b4e:	3301      	adds	r3, #1
 8013b50:	6123      	str	r3, [r4, #16]
 8013b52:	6873      	ldr	r3, [r6, #4]
 8013b54:	3b01      	subs	r3, #1
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	6073      	str	r3, [r6, #4]
 8013b5a:	f340 80ac 	ble.w	8013cb6 <_scanf_float+0x22e>
 8013b5e:	6833      	ldr	r3, [r6, #0]
 8013b60:	3301      	adds	r3, #1
 8013b62:	6033      	str	r3, [r6, #0]
 8013b64:	e7b5      	b.n	8013ad2 <_scanf_float+0x4a>
 8013b66:	2b45      	cmp	r3, #69	; 0x45
 8013b68:	f000 8085 	beq.w	8013c76 <_scanf_float+0x1ee>
 8013b6c:	2b46      	cmp	r3, #70	; 0x46
 8013b6e:	d06a      	beq.n	8013c46 <_scanf_float+0x1be>
 8013b70:	2b41      	cmp	r3, #65	; 0x41
 8013b72:	d1c1      	bne.n	8013af8 <_scanf_float+0x70>
 8013b74:	2a01      	cmp	r2, #1
 8013b76:	d1bf      	bne.n	8013af8 <_scanf_float+0x70>
 8013b78:	2202      	movs	r2, #2
 8013b7a:	e046      	b.n	8013c0a <_scanf_float+0x182>
 8013b7c:	2b65      	cmp	r3, #101	; 0x65
 8013b7e:	d07a      	beq.n	8013c76 <_scanf_float+0x1ee>
 8013b80:	d818      	bhi.n	8013bb4 <_scanf_float+0x12c>
 8013b82:	2b54      	cmp	r3, #84	; 0x54
 8013b84:	d066      	beq.n	8013c54 <_scanf_float+0x1cc>
 8013b86:	d811      	bhi.n	8013bac <_scanf_float+0x124>
 8013b88:	2b4e      	cmp	r3, #78	; 0x4e
 8013b8a:	d1b5      	bne.n	8013af8 <_scanf_float+0x70>
 8013b8c:	2a00      	cmp	r2, #0
 8013b8e:	d146      	bne.n	8013c1e <_scanf_float+0x196>
 8013b90:	f1b9 0f00 	cmp.w	r9, #0
 8013b94:	d145      	bne.n	8013c22 <_scanf_float+0x19a>
 8013b96:	6821      	ldr	r1, [r4, #0]
 8013b98:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013b9c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013ba0:	d13f      	bne.n	8013c22 <_scanf_float+0x19a>
 8013ba2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013ba6:	6021      	str	r1, [r4, #0]
 8013ba8:	2201      	movs	r2, #1
 8013baa:	e02e      	b.n	8013c0a <_scanf_float+0x182>
 8013bac:	2b59      	cmp	r3, #89	; 0x59
 8013bae:	d01e      	beq.n	8013bee <_scanf_float+0x166>
 8013bb0:	2b61      	cmp	r3, #97	; 0x61
 8013bb2:	e7de      	b.n	8013b72 <_scanf_float+0xea>
 8013bb4:	2b6e      	cmp	r3, #110	; 0x6e
 8013bb6:	d0e9      	beq.n	8013b8c <_scanf_float+0x104>
 8013bb8:	d815      	bhi.n	8013be6 <_scanf_float+0x15e>
 8013bba:	2b66      	cmp	r3, #102	; 0x66
 8013bbc:	d043      	beq.n	8013c46 <_scanf_float+0x1be>
 8013bbe:	2b69      	cmp	r3, #105	; 0x69
 8013bc0:	d19a      	bne.n	8013af8 <_scanf_float+0x70>
 8013bc2:	f1bb 0f00 	cmp.w	fp, #0
 8013bc6:	d138      	bne.n	8013c3a <_scanf_float+0x1b2>
 8013bc8:	f1b9 0f00 	cmp.w	r9, #0
 8013bcc:	d197      	bne.n	8013afe <_scanf_float+0x76>
 8013bce:	6821      	ldr	r1, [r4, #0]
 8013bd0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013bd4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013bd8:	d195      	bne.n	8013b06 <_scanf_float+0x7e>
 8013bda:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013bde:	6021      	str	r1, [r4, #0]
 8013be0:	f04f 0b01 	mov.w	fp, #1
 8013be4:	e011      	b.n	8013c0a <_scanf_float+0x182>
 8013be6:	2b74      	cmp	r3, #116	; 0x74
 8013be8:	d034      	beq.n	8013c54 <_scanf_float+0x1cc>
 8013bea:	2b79      	cmp	r3, #121	; 0x79
 8013bec:	d184      	bne.n	8013af8 <_scanf_float+0x70>
 8013bee:	f1bb 0f07 	cmp.w	fp, #7
 8013bf2:	d181      	bne.n	8013af8 <_scanf_float+0x70>
 8013bf4:	f04f 0b08 	mov.w	fp, #8
 8013bf8:	e007      	b.n	8013c0a <_scanf_float+0x182>
 8013bfa:	eb12 0f0b 	cmn.w	r2, fp
 8013bfe:	f47f af7b 	bne.w	8013af8 <_scanf_float+0x70>
 8013c02:	6821      	ldr	r1, [r4, #0]
 8013c04:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013c08:	6021      	str	r1, [r4, #0]
 8013c0a:	702b      	strb	r3, [r5, #0]
 8013c0c:	3501      	adds	r5, #1
 8013c0e:	e79a      	b.n	8013b46 <_scanf_float+0xbe>
 8013c10:	6821      	ldr	r1, [r4, #0]
 8013c12:	0608      	lsls	r0, r1, #24
 8013c14:	f57f af70 	bpl.w	8013af8 <_scanf_float+0x70>
 8013c18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013c1c:	e7f4      	b.n	8013c08 <_scanf_float+0x180>
 8013c1e:	2a02      	cmp	r2, #2
 8013c20:	d047      	beq.n	8013cb2 <_scanf_float+0x22a>
 8013c22:	f1bb 0f01 	cmp.w	fp, #1
 8013c26:	d003      	beq.n	8013c30 <_scanf_float+0x1a8>
 8013c28:	f1bb 0f04 	cmp.w	fp, #4
 8013c2c:	f47f af64 	bne.w	8013af8 <_scanf_float+0x70>
 8013c30:	f10b 0b01 	add.w	fp, fp, #1
 8013c34:	fa5f fb8b 	uxtb.w	fp, fp
 8013c38:	e7e7      	b.n	8013c0a <_scanf_float+0x182>
 8013c3a:	f1bb 0f03 	cmp.w	fp, #3
 8013c3e:	d0f7      	beq.n	8013c30 <_scanf_float+0x1a8>
 8013c40:	f1bb 0f05 	cmp.w	fp, #5
 8013c44:	e7f2      	b.n	8013c2c <_scanf_float+0x1a4>
 8013c46:	f1bb 0f02 	cmp.w	fp, #2
 8013c4a:	f47f af55 	bne.w	8013af8 <_scanf_float+0x70>
 8013c4e:	f04f 0b03 	mov.w	fp, #3
 8013c52:	e7da      	b.n	8013c0a <_scanf_float+0x182>
 8013c54:	f1bb 0f06 	cmp.w	fp, #6
 8013c58:	f47f af4e 	bne.w	8013af8 <_scanf_float+0x70>
 8013c5c:	f04f 0b07 	mov.w	fp, #7
 8013c60:	e7d3      	b.n	8013c0a <_scanf_float+0x182>
 8013c62:	6821      	ldr	r1, [r4, #0]
 8013c64:	0588      	lsls	r0, r1, #22
 8013c66:	f57f af47 	bpl.w	8013af8 <_scanf_float+0x70>
 8013c6a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013c6e:	6021      	str	r1, [r4, #0]
 8013c70:	f8cd 9008 	str.w	r9, [sp, #8]
 8013c74:	e7c9      	b.n	8013c0a <_scanf_float+0x182>
 8013c76:	6821      	ldr	r1, [r4, #0]
 8013c78:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013c7c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013c80:	d006      	beq.n	8013c90 <_scanf_float+0x208>
 8013c82:	0548      	lsls	r0, r1, #21
 8013c84:	f57f af38 	bpl.w	8013af8 <_scanf_float+0x70>
 8013c88:	f1b9 0f00 	cmp.w	r9, #0
 8013c8c:	f43f af3b 	beq.w	8013b06 <_scanf_float+0x7e>
 8013c90:	0588      	lsls	r0, r1, #22
 8013c92:	bf58      	it	pl
 8013c94:	9802      	ldrpl	r0, [sp, #8]
 8013c96:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013c9a:	bf58      	it	pl
 8013c9c:	eba9 0000 	subpl.w	r0, r9, r0
 8013ca0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013ca4:	bf58      	it	pl
 8013ca6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013caa:	6021      	str	r1, [r4, #0]
 8013cac:	f04f 0900 	mov.w	r9, #0
 8013cb0:	e7ab      	b.n	8013c0a <_scanf_float+0x182>
 8013cb2:	2203      	movs	r2, #3
 8013cb4:	e7a9      	b.n	8013c0a <_scanf_float+0x182>
 8013cb6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013cba:	9205      	str	r2, [sp, #20]
 8013cbc:	4631      	mov	r1, r6
 8013cbe:	4638      	mov	r0, r7
 8013cc0:	4798      	blx	r3
 8013cc2:	9a05      	ldr	r2, [sp, #20]
 8013cc4:	2800      	cmp	r0, #0
 8013cc6:	f43f af04 	beq.w	8013ad2 <_scanf_float+0x4a>
 8013cca:	e715      	b.n	8013af8 <_scanf_float+0x70>
 8013ccc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013cd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013cd4:	4632      	mov	r2, r6
 8013cd6:	4638      	mov	r0, r7
 8013cd8:	4798      	blx	r3
 8013cda:	6923      	ldr	r3, [r4, #16]
 8013cdc:	3b01      	subs	r3, #1
 8013cde:	6123      	str	r3, [r4, #16]
 8013ce0:	e715      	b.n	8013b0e <_scanf_float+0x86>
 8013ce2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013ce6:	2b06      	cmp	r3, #6
 8013ce8:	d80a      	bhi.n	8013d00 <_scanf_float+0x278>
 8013cea:	f1bb 0f02 	cmp.w	fp, #2
 8013cee:	d968      	bls.n	8013dc2 <_scanf_float+0x33a>
 8013cf0:	f1ab 0b03 	sub.w	fp, fp, #3
 8013cf4:	fa5f fb8b 	uxtb.w	fp, fp
 8013cf8:	eba5 0b0b 	sub.w	fp, r5, fp
 8013cfc:	455d      	cmp	r5, fp
 8013cfe:	d14b      	bne.n	8013d98 <_scanf_float+0x310>
 8013d00:	6823      	ldr	r3, [r4, #0]
 8013d02:	05da      	lsls	r2, r3, #23
 8013d04:	d51f      	bpl.n	8013d46 <_scanf_float+0x2be>
 8013d06:	055b      	lsls	r3, r3, #21
 8013d08:	d468      	bmi.n	8013ddc <_scanf_float+0x354>
 8013d0a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013d0e:	6923      	ldr	r3, [r4, #16]
 8013d10:	2965      	cmp	r1, #101	; 0x65
 8013d12:	f103 33ff 	add.w	r3, r3, #4294967295
 8013d16:	f105 3bff 	add.w	fp, r5, #4294967295
 8013d1a:	6123      	str	r3, [r4, #16]
 8013d1c:	d00d      	beq.n	8013d3a <_scanf_float+0x2b2>
 8013d1e:	2945      	cmp	r1, #69	; 0x45
 8013d20:	d00b      	beq.n	8013d3a <_scanf_float+0x2b2>
 8013d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d26:	4632      	mov	r2, r6
 8013d28:	4638      	mov	r0, r7
 8013d2a:	4798      	blx	r3
 8013d2c:	6923      	ldr	r3, [r4, #16]
 8013d2e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013d32:	3b01      	subs	r3, #1
 8013d34:	f1a5 0b02 	sub.w	fp, r5, #2
 8013d38:	6123      	str	r3, [r4, #16]
 8013d3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d3e:	4632      	mov	r2, r6
 8013d40:	4638      	mov	r0, r7
 8013d42:	4798      	blx	r3
 8013d44:	465d      	mov	r5, fp
 8013d46:	6826      	ldr	r6, [r4, #0]
 8013d48:	f016 0610 	ands.w	r6, r6, #16
 8013d4c:	d17a      	bne.n	8013e44 <_scanf_float+0x3bc>
 8013d4e:	702e      	strb	r6, [r5, #0]
 8013d50:	6823      	ldr	r3, [r4, #0]
 8013d52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d5a:	d142      	bne.n	8013de2 <_scanf_float+0x35a>
 8013d5c:	9b02      	ldr	r3, [sp, #8]
 8013d5e:	eba9 0303 	sub.w	r3, r9, r3
 8013d62:	425a      	negs	r2, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d149      	bne.n	8013dfc <_scanf_float+0x374>
 8013d68:	2200      	movs	r2, #0
 8013d6a:	4641      	mov	r1, r8
 8013d6c:	4638      	mov	r0, r7
 8013d6e:	f000 ffdf 	bl	8014d30 <_strtod_r>
 8013d72:	6825      	ldr	r5, [r4, #0]
 8013d74:	f8da 3000 	ldr.w	r3, [sl]
 8013d78:	f015 0f02 	tst.w	r5, #2
 8013d7c:	f103 0204 	add.w	r2, r3, #4
 8013d80:	ec59 8b10 	vmov	r8, r9, d0
 8013d84:	f8ca 2000 	str.w	r2, [sl]
 8013d88:	d043      	beq.n	8013e12 <_scanf_float+0x38a>
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	e9c3 8900 	strd	r8, r9, [r3]
 8013d90:	68e3      	ldr	r3, [r4, #12]
 8013d92:	3301      	adds	r3, #1
 8013d94:	60e3      	str	r3, [r4, #12]
 8013d96:	e6be      	b.n	8013b16 <_scanf_float+0x8e>
 8013d98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013da0:	4632      	mov	r2, r6
 8013da2:	4638      	mov	r0, r7
 8013da4:	4798      	blx	r3
 8013da6:	6923      	ldr	r3, [r4, #16]
 8013da8:	3b01      	subs	r3, #1
 8013daa:	6123      	str	r3, [r4, #16]
 8013dac:	e7a6      	b.n	8013cfc <_scanf_float+0x274>
 8013dae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013db2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013db6:	4632      	mov	r2, r6
 8013db8:	4638      	mov	r0, r7
 8013dba:	4798      	blx	r3
 8013dbc:	6923      	ldr	r3, [r4, #16]
 8013dbe:	3b01      	subs	r3, #1
 8013dc0:	6123      	str	r3, [r4, #16]
 8013dc2:	4545      	cmp	r5, r8
 8013dc4:	d8f3      	bhi.n	8013dae <_scanf_float+0x326>
 8013dc6:	e6a5      	b.n	8013b14 <_scanf_float+0x8c>
 8013dc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013dcc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013dd0:	4632      	mov	r2, r6
 8013dd2:	4638      	mov	r0, r7
 8013dd4:	4798      	blx	r3
 8013dd6:	6923      	ldr	r3, [r4, #16]
 8013dd8:	3b01      	subs	r3, #1
 8013dda:	6123      	str	r3, [r4, #16]
 8013ddc:	4545      	cmp	r5, r8
 8013dde:	d8f3      	bhi.n	8013dc8 <_scanf_float+0x340>
 8013de0:	e698      	b.n	8013b14 <_scanf_float+0x8c>
 8013de2:	9b03      	ldr	r3, [sp, #12]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d0bf      	beq.n	8013d68 <_scanf_float+0x2e0>
 8013de8:	9904      	ldr	r1, [sp, #16]
 8013dea:	230a      	movs	r3, #10
 8013dec:	4632      	mov	r2, r6
 8013dee:	3101      	adds	r1, #1
 8013df0:	4638      	mov	r0, r7
 8013df2:	f001 f829 	bl	8014e48 <_strtol_r>
 8013df6:	9b03      	ldr	r3, [sp, #12]
 8013df8:	9d04      	ldr	r5, [sp, #16]
 8013dfa:	1ac2      	subs	r2, r0, r3
 8013dfc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013e00:	429d      	cmp	r5, r3
 8013e02:	bf28      	it	cs
 8013e04:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013e08:	490f      	ldr	r1, [pc, #60]	; (8013e48 <_scanf_float+0x3c0>)
 8013e0a:	4628      	mov	r0, r5
 8013e0c:	f000 f8e8 	bl	8013fe0 <siprintf>
 8013e10:	e7aa      	b.n	8013d68 <_scanf_float+0x2e0>
 8013e12:	f015 0504 	ands.w	r5, r5, #4
 8013e16:	d1b8      	bne.n	8013d8a <_scanf_float+0x302>
 8013e18:	681f      	ldr	r7, [r3, #0]
 8013e1a:	ee10 2a10 	vmov	r2, s0
 8013e1e:	464b      	mov	r3, r9
 8013e20:	ee10 0a10 	vmov	r0, s0
 8013e24:	4649      	mov	r1, r9
 8013e26:	f7ec fe99 	bl	8000b5c <__aeabi_dcmpun>
 8013e2a:	b128      	cbz	r0, 8013e38 <_scanf_float+0x3b0>
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	f000 f89d 	bl	8013f6c <nanf>
 8013e32:	ed87 0a00 	vstr	s0, [r7]
 8013e36:	e7ab      	b.n	8013d90 <_scanf_float+0x308>
 8013e38:	4640      	mov	r0, r8
 8013e3a:	4649      	mov	r1, r9
 8013e3c:	f7ec feec 	bl	8000c18 <__aeabi_d2f>
 8013e40:	6038      	str	r0, [r7, #0]
 8013e42:	e7a5      	b.n	8013d90 <_scanf_float+0x308>
 8013e44:	2600      	movs	r6, #0
 8013e46:	e666      	b.n	8013b16 <_scanf_float+0x8e>
 8013e48:	08018806 	.word	0x08018806

08013e4c <iprintf>:
 8013e4c:	b40f      	push	{r0, r1, r2, r3}
 8013e4e:	4b0a      	ldr	r3, [pc, #40]	; (8013e78 <iprintf+0x2c>)
 8013e50:	b513      	push	{r0, r1, r4, lr}
 8013e52:	681c      	ldr	r4, [r3, #0]
 8013e54:	b124      	cbz	r4, 8013e60 <iprintf+0x14>
 8013e56:	69a3      	ldr	r3, [r4, #24]
 8013e58:	b913      	cbnz	r3, 8013e60 <iprintf+0x14>
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	f002 f83c 	bl	8015ed8 <__sinit>
 8013e60:	ab05      	add	r3, sp, #20
 8013e62:	9a04      	ldr	r2, [sp, #16]
 8013e64:	68a1      	ldr	r1, [r4, #8]
 8013e66:	9301      	str	r3, [sp, #4]
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f003 fc73 	bl	8017754 <_vfiprintf_r>
 8013e6e:	b002      	add	sp, #8
 8013e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e74:	b004      	add	sp, #16
 8013e76:	4770      	bx	lr
 8013e78:	2000000c 	.word	0x2000000c

08013e7c <putchar>:
 8013e7c:	b538      	push	{r3, r4, r5, lr}
 8013e7e:	4b08      	ldr	r3, [pc, #32]	; (8013ea0 <putchar+0x24>)
 8013e80:	681c      	ldr	r4, [r3, #0]
 8013e82:	4605      	mov	r5, r0
 8013e84:	b124      	cbz	r4, 8013e90 <putchar+0x14>
 8013e86:	69a3      	ldr	r3, [r4, #24]
 8013e88:	b913      	cbnz	r3, 8013e90 <putchar+0x14>
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	f002 f824 	bl	8015ed8 <__sinit>
 8013e90:	68a2      	ldr	r2, [r4, #8]
 8013e92:	4629      	mov	r1, r5
 8013e94:	4620      	mov	r0, r4
 8013e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e9a:	f003 bec9 	b.w	8017c30 <_putc_r>
 8013e9e:	bf00      	nop
 8013ea0:	2000000c 	.word	0x2000000c

08013ea4 <_puts_r>:
 8013ea4:	b570      	push	{r4, r5, r6, lr}
 8013ea6:	460e      	mov	r6, r1
 8013ea8:	4605      	mov	r5, r0
 8013eaa:	b118      	cbz	r0, 8013eb4 <_puts_r+0x10>
 8013eac:	6983      	ldr	r3, [r0, #24]
 8013eae:	b90b      	cbnz	r3, 8013eb4 <_puts_r+0x10>
 8013eb0:	f002 f812 	bl	8015ed8 <__sinit>
 8013eb4:	69ab      	ldr	r3, [r5, #24]
 8013eb6:	68ac      	ldr	r4, [r5, #8]
 8013eb8:	b913      	cbnz	r3, 8013ec0 <_puts_r+0x1c>
 8013eba:	4628      	mov	r0, r5
 8013ebc:	f002 f80c 	bl	8015ed8 <__sinit>
 8013ec0:	4b23      	ldr	r3, [pc, #140]	; (8013f50 <_puts_r+0xac>)
 8013ec2:	429c      	cmp	r4, r3
 8013ec4:	d117      	bne.n	8013ef6 <_puts_r+0x52>
 8013ec6:	686c      	ldr	r4, [r5, #4]
 8013ec8:	89a3      	ldrh	r3, [r4, #12]
 8013eca:	071b      	lsls	r3, r3, #28
 8013ecc:	d51d      	bpl.n	8013f0a <_puts_r+0x66>
 8013ece:	6923      	ldr	r3, [r4, #16]
 8013ed0:	b1db      	cbz	r3, 8013f0a <_puts_r+0x66>
 8013ed2:	3e01      	subs	r6, #1
 8013ed4:	68a3      	ldr	r3, [r4, #8]
 8013ed6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013eda:	3b01      	subs	r3, #1
 8013edc:	60a3      	str	r3, [r4, #8]
 8013ede:	b9e9      	cbnz	r1, 8013f1c <_puts_r+0x78>
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	da2e      	bge.n	8013f42 <_puts_r+0x9e>
 8013ee4:	4622      	mov	r2, r4
 8013ee6:	210a      	movs	r1, #10
 8013ee8:	4628      	mov	r0, r5
 8013eea:	f000 ffdf 	bl	8014eac <__swbuf_r>
 8013eee:	3001      	adds	r0, #1
 8013ef0:	d011      	beq.n	8013f16 <_puts_r+0x72>
 8013ef2:	200a      	movs	r0, #10
 8013ef4:	e011      	b.n	8013f1a <_puts_r+0x76>
 8013ef6:	4b17      	ldr	r3, [pc, #92]	; (8013f54 <_puts_r+0xb0>)
 8013ef8:	429c      	cmp	r4, r3
 8013efa:	d101      	bne.n	8013f00 <_puts_r+0x5c>
 8013efc:	68ac      	ldr	r4, [r5, #8]
 8013efe:	e7e3      	b.n	8013ec8 <_puts_r+0x24>
 8013f00:	4b15      	ldr	r3, [pc, #84]	; (8013f58 <_puts_r+0xb4>)
 8013f02:	429c      	cmp	r4, r3
 8013f04:	bf08      	it	eq
 8013f06:	68ec      	ldreq	r4, [r5, #12]
 8013f08:	e7de      	b.n	8013ec8 <_puts_r+0x24>
 8013f0a:	4621      	mov	r1, r4
 8013f0c:	4628      	mov	r0, r5
 8013f0e:	f001 f831 	bl	8014f74 <__swsetup_r>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	d0dd      	beq.n	8013ed2 <_puts_r+0x2e>
 8013f16:	f04f 30ff 	mov.w	r0, #4294967295
 8013f1a:	bd70      	pop	{r4, r5, r6, pc}
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	da04      	bge.n	8013f2a <_puts_r+0x86>
 8013f20:	69a2      	ldr	r2, [r4, #24]
 8013f22:	429a      	cmp	r2, r3
 8013f24:	dc06      	bgt.n	8013f34 <_puts_r+0x90>
 8013f26:	290a      	cmp	r1, #10
 8013f28:	d004      	beq.n	8013f34 <_puts_r+0x90>
 8013f2a:	6823      	ldr	r3, [r4, #0]
 8013f2c:	1c5a      	adds	r2, r3, #1
 8013f2e:	6022      	str	r2, [r4, #0]
 8013f30:	7019      	strb	r1, [r3, #0]
 8013f32:	e7cf      	b.n	8013ed4 <_puts_r+0x30>
 8013f34:	4622      	mov	r2, r4
 8013f36:	4628      	mov	r0, r5
 8013f38:	f000 ffb8 	bl	8014eac <__swbuf_r>
 8013f3c:	3001      	adds	r0, #1
 8013f3e:	d1c9      	bne.n	8013ed4 <_puts_r+0x30>
 8013f40:	e7e9      	b.n	8013f16 <_puts_r+0x72>
 8013f42:	6823      	ldr	r3, [r4, #0]
 8013f44:	200a      	movs	r0, #10
 8013f46:	1c5a      	adds	r2, r3, #1
 8013f48:	6022      	str	r2, [r4, #0]
 8013f4a:	7018      	strb	r0, [r3, #0]
 8013f4c:	e7e5      	b.n	8013f1a <_puts_r+0x76>
 8013f4e:	bf00      	nop
 8013f50:	08018890 	.word	0x08018890
 8013f54:	080188b0 	.word	0x080188b0
 8013f58:	08018870 	.word	0x08018870

08013f5c <puts>:
 8013f5c:	4b02      	ldr	r3, [pc, #8]	; (8013f68 <puts+0xc>)
 8013f5e:	4601      	mov	r1, r0
 8013f60:	6818      	ldr	r0, [r3, #0]
 8013f62:	f7ff bf9f 	b.w	8013ea4 <_puts_r>
 8013f66:	bf00      	nop
 8013f68:	2000000c 	.word	0x2000000c

08013f6c <nanf>:
 8013f6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013f74 <nanf+0x8>
 8013f70:	4770      	bx	lr
 8013f72:	bf00      	nop
 8013f74:	7fc00000 	.word	0x7fc00000

08013f78 <sniprintf>:
 8013f78:	b40c      	push	{r2, r3}
 8013f7a:	b530      	push	{r4, r5, lr}
 8013f7c:	4b17      	ldr	r3, [pc, #92]	; (8013fdc <sniprintf+0x64>)
 8013f7e:	1e0c      	subs	r4, r1, #0
 8013f80:	b09d      	sub	sp, #116	; 0x74
 8013f82:	681d      	ldr	r5, [r3, #0]
 8013f84:	da08      	bge.n	8013f98 <sniprintf+0x20>
 8013f86:	238b      	movs	r3, #139	; 0x8b
 8013f88:	602b      	str	r3, [r5, #0]
 8013f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8013f8e:	b01d      	add	sp, #116	; 0x74
 8013f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f94:	b002      	add	sp, #8
 8013f96:	4770      	bx	lr
 8013f98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013f9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013fa0:	bf14      	ite	ne
 8013fa2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013fa6:	4623      	moveq	r3, r4
 8013fa8:	9304      	str	r3, [sp, #16]
 8013faa:	9307      	str	r3, [sp, #28]
 8013fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013fb0:	9002      	str	r0, [sp, #8]
 8013fb2:	9006      	str	r0, [sp, #24]
 8013fb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013fb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013fba:	ab21      	add	r3, sp, #132	; 0x84
 8013fbc:	a902      	add	r1, sp, #8
 8013fbe:	4628      	mov	r0, r5
 8013fc0:	9301      	str	r3, [sp, #4]
 8013fc2:	f003 f8fb 	bl	80171bc <_svfiprintf_r>
 8013fc6:	1c43      	adds	r3, r0, #1
 8013fc8:	bfbc      	itt	lt
 8013fca:	238b      	movlt	r3, #139	; 0x8b
 8013fcc:	602b      	strlt	r3, [r5, #0]
 8013fce:	2c00      	cmp	r4, #0
 8013fd0:	d0dd      	beq.n	8013f8e <sniprintf+0x16>
 8013fd2:	9b02      	ldr	r3, [sp, #8]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	701a      	strb	r2, [r3, #0]
 8013fd8:	e7d9      	b.n	8013f8e <sniprintf+0x16>
 8013fda:	bf00      	nop
 8013fdc:	2000000c 	.word	0x2000000c

08013fe0 <siprintf>:
 8013fe0:	b40e      	push	{r1, r2, r3}
 8013fe2:	b500      	push	{lr}
 8013fe4:	b09c      	sub	sp, #112	; 0x70
 8013fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8013fe8:	9002      	str	r0, [sp, #8]
 8013fea:	9006      	str	r0, [sp, #24]
 8013fec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013ff0:	4809      	ldr	r0, [pc, #36]	; (8014018 <siprintf+0x38>)
 8013ff2:	9107      	str	r1, [sp, #28]
 8013ff4:	9104      	str	r1, [sp, #16]
 8013ff6:	4909      	ldr	r1, [pc, #36]	; (801401c <siprintf+0x3c>)
 8013ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ffc:	9105      	str	r1, [sp, #20]
 8013ffe:	6800      	ldr	r0, [r0, #0]
 8014000:	9301      	str	r3, [sp, #4]
 8014002:	a902      	add	r1, sp, #8
 8014004:	f003 f8da 	bl	80171bc <_svfiprintf_r>
 8014008:	9b02      	ldr	r3, [sp, #8]
 801400a:	2200      	movs	r2, #0
 801400c:	701a      	strb	r2, [r3, #0]
 801400e:	b01c      	add	sp, #112	; 0x70
 8014010:	f85d eb04 	ldr.w	lr, [sp], #4
 8014014:	b003      	add	sp, #12
 8014016:	4770      	bx	lr
 8014018:	2000000c 	.word	0x2000000c
 801401c:	ffff0208 	.word	0xffff0208

08014020 <siscanf>:
 8014020:	b40e      	push	{r1, r2, r3}
 8014022:	b530      	push	{r4, r5, lr}
 8014024:	b09c      	sub	sp, #112	; 0x70
 8014026:	ac1f      	add	r4, sp, #124	; 0x7c
 8014028:	f44f 7201 	mov.w	r2, #516	; 0x204
 801402c:	f854 5b04 	ldr.w	r5, [r4], #4
 8014030:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014034:	9002      	str	r0, [sp, #8]
 8014036:	9006      	str	r0, [sp, #24]
 8014038:	f7ec f8e2 	bl	8000200 <strlen>
 801403c:	4b0b      	ldr	r3, [pc, #44]	; (801406c <siscanf+0x4c>)
 801403e:	9003      	str	r0, [sp, #12]
 8014040:	9007      	str	r0, [sp, #28]
 8014042:	930b      	str	r3, [sp, #44]	; 0x2c
 8014044:	480a      	ldr	r0, [pc, #40]	; (8014070 <siscanf+0x50>)
 8014046:	9401      	str	r4, [sp, #4]
 8014048:	2300      	movs	r3, #0
 801404a:	930f      	str	r3, [sp, #60]	; 0x3c
 801404c:	9314      	str	r3, [sp, #80]	; 0x50
 801404e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014052:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014056:	462a      	mov	r2, r5
 8014058:	4623      	mov	r3, r4
 801405a:	a902      	add	r1, sp, #8
 801405c:	6800      	ldr	r0, [r0, #0]
 801405e:	f003 f9ff 	bl	8017460 <__ssvfiscanf_r>
 8014062:	b01c      	add	sp, #112	; 0x70
 8014064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014068:	b003      	add	sp, #12
 801406a:	4770      	bx	lr
 801406c:	08014097 	.word	0x08014097
 8014070:	2000000c 	.word	0x2000000c

08014074 <__sread>:
 8014074:	b510      	push	{r4, lr}
 8014076:	460c      	mov	r4, r1
 8014078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801407c:	f003 fe0e 	bl	8017c9c <_read_r>
 8014080:	2800      	cmp	r0, #0
 8014082:	bfab      	itete	ge
 8014084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014086:	89a3      	ldrhlt	r3, [r4, #12]
 8014088:	181b      	addge	r3, r3, r0
 801408a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801408e:	bfac      	ite	ge
 8014090:	6563      	strge	r3, [r4, #84]	; 0x54
 8014092:	81a3      	strhlt	r3, [r4, #12]
 8014094:	bd10      	pop	{r4, pc}

08014096 <__seofread>:
 8014096:	2000      	movs	r0, #0
 8014098:	4770      	bx	lr

0801409a <__swrite>:
 801409a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801409e:	461f      	mov	r7, r3
 80140a0:	898b      	ldrh	r3, [r1, #12]
 80140a2:	05db      	lsls	r3, r3, #23
 80140a4:	4605      	mov	r5, r0
 80140a6:	460c      	mov	r4, r1
 80140a8:	4616      	mov	r6, r2
 80140aa:	d505      	bpl.n	80140b8 <__swrite+0x1e>
 80140ac:	2302      	movs	r3, #2
 80140ae:	2200      	movs	r2, #0
 80140b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140b4:	f002 fae2 	bl	801667c <_lseek_r>
 80140b8:	89a3      	ldrh	r3, [r4, #12]
 80140ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80140c2:	81a3      	strh	r3, [r4, #12]
 80140c4:	4632      	mov	r2, r6
 80140c6:	463b      	mov	r3, r7
 80140c8:	4628      	mov	r0, r5
 80140ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140ce:	f000 bf3f 	b.w	8014f50 <_write_r>

080140d2 <__sseek>:
 80140d2:	b510      	push	{r4, lr}
 80140d4:	460c      	mov	r4, r1
 80140d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140da:	f002 facf 	bl	801667c <_lseek_r>
 80140de:	1c43      	adds	r3, r0, #1
 80140e0:	89a3      	ldrh	r3, [r4, #12]
 80140e2:	bf15      	itete	ne
 80140e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80140e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80140ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80140ee:	81a3      	strheq	r3, [r4, #12]
 80140f0:	bf18      	it	ne
 80140f2:	81a3      	strhne	r3, [r4, #12]
 80140f4:	bd10      	pop	{r4, pc}

080140f6 <__sclose>:
 80140f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140fa:	f000 bfa9 	b.w	8015050 <_close_r>

080140fe <strcpy>:
 80140fe:	4603      	mov	r3, r0
 8014100:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014104:	f803 2b01 	strb.w	r2, [r3], #1
 8014108:	2a00      	cmp	r2, #0
 801410a:	d1f9      	bne.n	8014100 <strcpy+0x2>
 801410c:	4770      	bx	lr

0801410e <sulp>:
 801410e:	b570      	push	{r4, r5, r6, lr}
 8014110:	4604      	mov	r4, r0
 8014112:	460d      	mov	r5, r1
 8014114:	ec45 4b10 	vmov	d0, r4, r5
 8014118:	4616      	mov	r6, r2
 801411a:	f002 fe0b 	bl	8016d34 <__ulp>
 801411e:	ec51 0b10 	vmov	r0, r1, d0
 8014122:	b17e      	cbz	r6, 8014144 <sulp+0x36>
 8014124:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014128:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801412c:	2b00      	cmp	r3, #0
 801412e:	dd09      	ble.n	8014144 <sulp+0x36>
 8014130:	051b      	lsls	r3, r3, #20
 8014132:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014136:	2400      	movs	r4, #0
 8014138:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801413c:	4622      	mov	r2, r4
 801413e:	462b      	mov	r3, r5
 8014140:	f7ec fa72 	bl	8000628 <__aeabi_dmul>
 8014144:	bd70      	pop	{r4, r5, r6, pc}
	...

08014148 <_strtod_l>:
 8014148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801414c:	461f      	mov	r7, r3
 801414e:	b0a1      	sub	sp, #132	; 0x84
 8014150:	2300      	movs	r3, #0
 8014152:	4681      	mov	r9, r0
 8014154:	4638      	mov	r0, r7
 8014156:	460e      	mov	r6, r1
 8014158:	9217      	str	r2, [sp, #92]	; 0x5c
 801415a:	931c      	str	r3, [sp, #112]	; 0x70
 801415c:	f002 fa7e 	bl	801665c <__localeconv_l>
 8014160:	4680      	mov	r8, r0
 8014162:	6800      	ldr	r0, [r0, #0]
 8014164:	f7ec f84c 	bl	8000200 <strlen>
 8014168:	f04f 0a00 	mov.w	sl, #0
 801416c:	4604      	mov	r4, r0
 801416e:	f04f 0b00 	mov.w	fp, #0
 8014172:	961b      	str	r6, [sp, #108]	; 0x6c
 8014174:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014176:	781a      	ldrb	r2, [r3, #0]
 8014178:	2a0d      	cmp	r2, #13
 801417a:	d832      	bhi.n	80141e2 <_strtod_l+0x9a>
 801417c:	2a09      	cmp	r2, #9
 801417e:	d236      	bcs.n	80141ee <_strtod_l+0xa6>
 8014180:	2a00      	cmp	r2, #0
 8014182:	d03e      	beq.n	8014202 <_strtod_l+0xba>
 8014184:	2300      	movs	r3, #0
 8014186:	930d      	str	r3, [sp, #52]	; 0x34
 8014188:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801418a:	782b      	ldrb	r3, [r5, #0]
 801418c:	2b30      	cmp	r3, #48	; 0x30
 801418e:	f040 80ac 	bne.w	80142ea <_strtod_l+0x1a2>
 8014192:	786b      	ldrb	r3, [r5, #1]
 8014194:	2b58      	cmp	r3, #88	; 0x58
 8014196:	d001      	beq.n	801419c <_strtod_l+0x54>
 8014198:	2b78      	cmp	r3, #120	; 0x78
 801419a:	d167      	bne.n	801426c <_strtod_l+0x124>
 801419c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801419e:	9301      	str	r3, [sp, #4]
 80141a0:	ab1c      	add	r3, sp, #112	; 0x70
 80141a2:	9300      	str	r3, [sp, #0]
 80141a4:	9702      	str	r7, [sp, #8]
 80141a6:	ab1d      	add	r3, sp, #116	; 0x74
 80141a8:	4a88      	ldr	r2, [pc, #544]	; (80143cc <_strtod_l+0x284>)
 80141aa:	a91b      	add	r1, sp, #108	; 0x6c
 80141ac:	4648      	mov	r0, r9
 80141ae:	f001 ff6c 	bl	801608a <__gethex>
 80141b2:	f010 0407 	ands.w	r4, r0, #7
 80141b6:	4606      	mov	r6, r0
 80141b8:	d005      	beq.n	80141c6 <_strtod_l+0x7e>
 80141ba:	2c06      	cmp	r4, #6
 80141bc:	d12b      	bne.n	8014216 <_strtod_l+0xce>
 80141be:	3501      	adds	r5, #1
 80141c0:	2300      	movs	r3, #0
 80141c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80141c4:	930d      	str	r3, [sp, #52]	; 0x34
 80141c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	f040 859a 	bne.w	8014d02 <_strtod_l+0xbba>
 80141ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141d0:	b1e3      	cbz	r3, 801420c <_strtod_l+0xc4>
 80141d2:	4652      	mov	r2, sl
 80141d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80141d8:	ec43 2b10 	vmov	d0, r2, r3
 80141dc:	b021      	add	sp, #132	; 0x84
 80141de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e2:	2a2b      	cmp	r2, #43	; 0x2b
 80141e4:	d015      	beq.n	8014212 <_strtod_l+0xca>
 80141e6:	2a2d      	cmp	r2, #45	; 0x2d
 80141e8:	d004      	beq.n	80141f4 <_strtod_l+0xac>
 80141ea:	2a20      	cmp	r2, #32
 80141ec:	d1ca      	bne.n	8014184 <_strtod_l+0x3c>
 80141ee:	3301      	adds	r3, #1
 80141f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80141f2:	e7bf      	b.n	8014174 <_strtod_l+0x2c>
 80141f4:	2201      	movs	r2, #1
 80141f6:	920d      	str	r2, [sp, #52]	; 0x34
 80141f8:	1c5a      	adds	r2, r3, #1
 80141fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80141fc:	785b      	ldrb	r3, [r3, #1]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d1c2      	bne.n	8014188 <_strtod_l+0x40>
 8014202:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014204:	961b      	str	r6, [sp, #108]	; 0x6c
 8014206:	2b00      	cmp	r3, #0
 8014208:	f040 8579 	bne.w	8014cfe <_strtod_l+0xbb6>
 801420c:	4652      	mov	r2, sl
 801420e:	465b      	mov	r3, fp
 8014210:	e7e2      	b.n	80141d8 <_strtod_l+0x90>
 8014212:	2200      	movs	r2, #0
 8014214:	e7ef      	b.n	80141f6 <_strtod_l+0xae>
 8014216:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014218:	b13a      	cbz	r2, 801422a <_strtod_l+0xe2>
 801421a:	2135      	movs	r1, #53	; 0x35
 801421c:	a81e      	add	r0, sp, #120	; 0x78
 801421e:	f002 fe81 	bl	8016f24 <__copybits>
 8014222:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014224:	4648      	mov	r0, r9
 8014226:	f002 faed 	bl	8016804 <_Bfree>
 801422a:	3c01      	subs	r4, #1
 801422c:	2c04      	cmp	r4, #4
 801422e:	d806      	bhi.n	801423e <_strtod_l+0xf6>
 8014230:	e8df f004 	tbb	[pc, r4]
 8014234:	1714030a 	.word	0x1714030a
 8014238:	0a          	.byte	0x0a
 8014239:	00          	.byte	0x00
 801423a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801423e:	0730      	lsls	r0, r6, #28
 8014240:	d5c1      	bpl.n	80141c6 <_strtod_l+0x7e>
 8014242:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014246:	e7be      	b.n	80141c6 <_strtod_l+0x7e>
 8014248:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801424c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801424e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014252:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014256:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801425a:	e7f0      	b.n	801423e <_strtod_l+0xf6>
 801425c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80143d0 <_strtod_l+0x288>
 8014260:	e7ed      	b.n	801423e <_strtod_l+0xf6>
 8014262:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014266:	f04f 3aff 	mov.w	sl, #4294967295
 801426a:	e7e8      	b.n	801423e <_strtod_l+0xf6>
 801426c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801426e:	1c5a      	adds	r2, r3, #1
 8014270:	921b      	str	r2, [sp, #108]	; 0x6c
 8014272:	785b      	ldrb	r3, [r3, #1]
 8014274:	2b30      	cmp	r3, #48	; 0x30
 8014276:	d0f9      	beq.n	801426c <_strtod_l+0x124>
 8014278:	2b00      	cmp	r3, #0
 801427a:	d0a4      	beq.n	80141c6 <_strtod_l+0x7e>
 801427c:	2301      	movs	r3, #1
 801427e:	2500      	movs	r5, #0
 8014280:	9306      	str	r3, [sp, #24]
 8014282:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014284:	9308      	str	r3, [sp, #32]
 8014286:	9507      	str	r5, [sp, #28]
 8014288:	9505      	str	r5, [sp, #20]
 801428a:	220a      	movs	r2, #10
 801428c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801428e:	7807      	ldrb	r7, [r0, #0]
 8014290:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014294:	b2d9      	uxtb	r1, r3
 8014296:	2909      	cmp	r1, #9
 8014298:	d929      	bls.n	80142ee <_strtod_l+0x1a6>
 801429a:	4622      	mov	r2, r4
 801429c:	f8d8 1000 	ldr.w	r1, [r8]
 80142a0:	f003 fd50 	bl	8017d44 <strncmp>
 80142a4:	2800      	cmp	r0, #0
 80142a6:	d031      	beq.n	801430c <_strtod_l+0x1c4>
 80142a8:	2000      	movs	r0, #0
 80142aa:	9c05      	ldr	r4, [sp, #20]
 80142ac:	9004      	str	r0, [sp, #16]
 80142ae:	463b      	mov	r3, r7
 80142b0:	4602      	mov	r2, r0
 80142b2:	2b65      	cmp	r3, #101	; 0x65
 80142b4:	d001      	beq.n	80142ba <_strtod_l+0x172>
 80142b6:	2b45      	cmp	r3, #69	; 0x45
 80142b8:	d114      	bne.n	80142e4 <_strtod_l+0x19c>
 80142ba:	b924      	cbnz	r4, 80142c6 <_strtod_l+0x17e>
 80142bc:	b910      	cbnz	r0, 80142c4 <_strtod_l+0x17c>
 80142be:	9b06      	ldr	r3, [sp, #24]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d09e      	beq.n	8014202 <_strtod_l+0xba>
 80142c4:	2400      	movs	r4, #0
 80142c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80142c8:	1c73      	adds	r3, r6, #1
 80142ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80142cc:	7873      	ldrb	r3, [r6, #1]
 80142ce:	2b2b      	cmp	r3, #43	; 0x2b
 80142d0:	d078      	beq.n	80143c4 <_strtod_l+0x27c>
 80142d2:	2b2d      	cmp	r3, #45	; 0x2d
 80142d4:	d070      	beq.n	80143b8 <_strtod_l+0x270>
 80142d6:	f04f 0c00 	mov.w	ip, #0
 80142da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80142de:	2f09      	cmp	r7, #9
 80142e0:	d97c      	bls.n	80143dc <_strtod_l+0x294>
 80142e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80142e4:	f04f 0e00 	mov.w	lr, #0
 80142e8:	e09a      	b.n	8014420 <_strtod_l+0x2d8>
 80142ea:	2300      	movs	r3, #0
 80142ec:	e7c7      	b.n	801427e <_strtod_l+0x136>
 80142ee:	9905      	ldr	r1, [sp, #20]
 80142f0:	2908      	cmp	r1, #8
 80142f2:	bfdd      	ittte	le
 80142f4:	9907      	ldrle	r1, [sp, #28]
 80142f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80142fa:	9307      	strle	r3, [sp, #28]
 80142fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014300:	9b05      	ldr	r3, [sp, #20]
 8014302:	3001      	adds	r0, #1
 8014304:	3301      	adds	r3, #1
 8014306:	9305      	str	r3, [sp, #20]
 8014308:	901b      	str	r0, [sp, #108]	; 0x6c
 801430a:	e7bf      	b.n	801428c <_strtod_l+0x144>
 801430c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801430e:	191a      	adds	r2, r3, r4
 8014310:	921b      	str	r2, [sp, #108]	; 0x6c
 8014312:	9a05      	ldr	r2, [sp, #20]
 8014314:	5d1b      	ldrb	r3, [r3, r4]
 8014316:	2a00      	cmp	r2, #0
 8014318:	d037      	beq.n	801438a <_strtod_l+0x242>
 801431a:	9c05      	ldr	r4, [sp, #20]
 801431c:	4602      	mov	r2, r0
 801431e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014322:	2909      	cmp	r1, #9
 8014324:	d913      	bls.n	801434e <_strtod_l+0x206>
 8014326:	2101      	movs	r1, #1
 8014328:	9104      	str	r1, [sp, #16]
 801432a:	e7c2      	b.n	80142b2 <_strtod_l+0x16a>
 801432c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801432e:	1c5a      	adds	r2, r3, #1
 8014330:	921b      	str	r2, [sp, #108]	; 0x6c
 8014332:	785b      	ldrb	r3, [r3, #1]
 8014334:	3001      	adds	r0, #1
 8014336:	2b30      	cmp	r3, #48	; 0x30
 8014338:	d0f8      	beq.n	801432c <_strtod_l+0x1e4>
 801433a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801433e:	2a08      	cmp	r2, #8
 8014340:	f200 84e4 	bhi.w	8014d0c <_strtod_l+0xbc4>
 8014344:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014346:	9208      	str	r2, [sp, #32]
 8014348:	4602      	mov	r2, r0
 801434a:	2000      	movs	r0, #0
 801434c:	4604      	mov	r4, r0
 801434e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8014352:	f100 0101 	add.w	r1, r0, #1
 8014356:	d012      	beq.n	801437e <_strtod_l+0x236>
 8014358:	440a      	add	r2, r1
 801435a:	eb00 0c04 	add.w	ip, r0, r4
 801435e:	4621      	mov	r1, r4
 8014360:	270a      	movs	r7, #10
 8014362:	458c      	cmp	ip, r1
 8014364:	d113      	bne.n	801438e <_strtod_l+0x246>
 8014366:	1821      	adds	r1, r4, r0
 8014368:	2908      	cmp	r1, #8
 801436a:	f104 0401 	add.w	r4, r4, #1
 801436e:	4404      	add	r4, r0
 8014370:	dc19      	bgt.n	80143a6 <_strtod_l+0x25e>
 8014372:	9b07      	ldr	r3, [sp, #28]
 8014374:	210a      	movs	r1, #10
 8014376:	fb01 e303 	mla	r3, r1, r3, lr
 801437a:	9307      	str	r3, [sp, #28]
 801437c:	2100      	movs	r1, #0
 801437e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014380:	1c58      	adds	r0, r3, #1
 8014382:	901b      	str	r0, [sp, #108]	; 0x6c
 8014384:	785b      	ldrb	r3, [r3, #1]
 8014386:	4608      	mov	r0, r1
 8014388:	e7c9      	b.n	801431e <_strtod_l+0x1d6>
 801438a:	9805      	ldr	r0, [sp, #20]
 801438c:	e7d3      	b.n	8014336 <_strtod_l+0x1ee>
 801438e:	2908      	cmp	r1, #8
 8014390:	f101 0101 	add.w	r1, r1, #1
 8014394:	dc03      	bgt.n	801439e <_strtod_l+0x256>
 8014396:	9b07      	ldr	r3, [sp, #28]
 8014398:	437b      	muls	r3, r7
 801439a:	9307      	str	r3, [sp, #28]
 801439c:	e7e1      	b.n	8014362 <_strtod_l+0x21a>
 801439e:	2910      	cmp	r1, #16
 80143a0:	bfd8      	it	le
 80143a2:	437d      	mulle	r5, r7
 80143a4:	e7dd      	b.n	8014362 <_strtod_l+0x21a>
 80143a6:	2c10      	cmp	r4, #16
 80143a8:	bfdc      	itt	le
 80143aa:	210a      	movle	r1, #10
 80143ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80143b0:	e7e4      	b.n	801437c <_strtod_l+0x234>
 80143b2:	2301      	movs	r3, #1
 80143b4:	9304      	str	r3, [sp, #16]
 80143b6:	e781      	b.n	80142bc <_strtod_l+0x174>
 80143b8:	f04f 0c01 	mov.w	ip, #1
 80143bc:	1cb3      	adds	r3, r6, #2
 80143be:	931b      	str	r3, [sp, #108]	; 0x6c
 80143c0:	78b3      	ldrb	r3, [r6, #2]
 80143c2:	e78a      	b.n	80142da <_strtod_l+0x192>
 80143c4:	f04f 0c00 	mov.w	ip, #0
 80143c8:	e7f8      	b.n	80143bc <_strtod_l+0x274>
 80143ca:	bf00      	nop
 80143cc:	0801880c 	.word	0x0801880c
 80143d0:	7ff00000 	.word	0x7ff00000
 80143d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143d6:	1c5f      	adds	r7, r3, #1
 80143d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80143da:	785b      	ldrb	r3, [r3, #1]
 80143dc:	2b30      	cmp	r3, #48	; 0x30
 80143de:	d0f9      	beq.n	80143d4 <_strtod_l+0x28c>
 80143e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80143e4:	2f08      	cmp	r7, #8
 80143e6:	f63f af7d 	bhi.w	80142e4 <_strtod_l+0x19c>
 80143ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80143ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143f0:	930a      	str	r3, [sp, #40]	; 0x28
 80143f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143f4:	1c5f      	adds	r7, r3, #1
 80143f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80143f8:	785b      	ldrb	r3, [r3, #1]
 80143fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80143fe:	f1b8 0f09 	cmp.w	r8, #9
 8014402:	d937      	bls.n	8014474 <_strtod_l+0x32c>
 8014404:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014406:	1a7f      	subs	r7, r7, r1
 8014408:	2f08      	cmp	r7, #8
 801440a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801440e:	dc37      	bgt.n	8014480 <_strtod_l+0x338>
 8014410:	45be      	cmp	lr, r7
 8014412:	bfa8      	it	ge
 8014414:	46be      	movge	lr, r7
 8014416:	f1bc 0f00 	cmp.w	ip, #0
 801441a:	d001      	beq.n	8014420 <_strtod_l+0x2d8>
 801441c:	f1ce 0e00 	rsb	lr, lr, #0
 8014420:	2c00      	cmp	r4, #0
 8014422:	d151      	bne.n	80144c8 <_strtod_l+0x380>
 8014424:	2800      	cmp	r0, #0
 8014426:	f47f aece 	bne.w	80141c6 <_strtod_l+0x7e>
 801442a:	9a06      	ldr	r2, [sp, #24]
 801442c:	2a00      	cmp	r2, #0
 801442e:	f47f aeca 	bne.w	80141c6 <_strtod_l+0x7e>
 8014432:	9a04      	ldr	r2, [sp, #16]
 8014434:	2a00      	cmp	r2, #0
 8014436:	f47f aee4 	bne.w	8014202 <_strtod_l+0xba>
 801443a:	2b4e      	cmp	r3, #78	; 0x4e
 801443c:	d027      	beq.n	801448e <_strtod_l+0x346>
 801443e:	dc21      	bgt.n	8014484 <_strtod_l+0x33c>
 8014440:	2b49      	cmp	r3, #73	; 0x49
 8014442:	f47f aede 	bne.w	8014202 <_strtod_l+0xba>
 8014446:	49a0      	ldr	r1, [pc, #640]	; (80146c8 <_strtod_l+0x580>)
 8014448:	a81b      	add	r0, sp, #108	; 0x6c
 801444a:	f002 f851 	bl	80164f0 <__match>
 801444e:	2800      	cmp	r0, #0
 8014450:	f43f aed7 	beq.w	8014202 <_strtod_l+0xba>
 8014454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014456:	499d      	ldr	r1, [pc, #628]	; (80146cc <_strtod_l+0x584>)
 8014458:	3b01      	subs	r3, #1
 801445a:	a81b      	add	r0, sp, #108	; 0x6c
 801445c:	931b      	str	r3, [sp, #108]	; 0x6c
 801445e:	f002 f847 	bl	80164f0 <__match>
 8014462:	b910      	cbnz	r0, 801446a <_strtod_l+0x322>
 8014464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014466:	3301      	adds	r3, #1
 8014468:	931b      	str	r3, [sp, #108]	; 0x6c
 801446a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80146e0 <_strtod_l+0x598>
 801446e:	f04f 0a00 	mov.w	sl, #0
 8014472:	e6a8      	b.n	80141c6 <_strtod_l+0x7e>
 8014474:	210a      	movs	r1, #10
 8014476:	fb01 3e0e 	mla	lr, r1, lr, r3
 801447a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801447e:	e7b8      	b.n	80143f2 <_strtod_l+0x2aa>
 8014480:	46be      	mov	lr, r7
 8014482:	e7c8      	b.n	8014416 <_strtod_l+0x2ce>
 8014484:	2b69      	cmp	r3, #105	; 0x69
 8014486:	d0de      	beq.n	8014446 <_strtod_l+0x2fe>
 8014488:	2b6e      	cmp	r3, #110	; 0x6e
 801448a:	f47f aeba 	bne.w	8014202 <_strtod_l+0xba>
 801448e:	4990      	ldr	r1, [pc, #576]	; (80146d0 <_strtod_l+0x588>)
 8014490:	a81b      	add	r0, sp, #108	; 0x6c
 8014492:	f002 f82d 	bl	80164f0 <__match>
 8014496:	2800      	cmp	r0, #0
 8014498:	f43f aeb3 	beq.w	8014202 <_strtod_l+0xba>
 801449c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801449e:	781b      	ldrb	r3, [r3, #0]
 80144a0:	2b28      	cmp	r3, #40	; 0x28
 80144a2:	d10e      	bne.n	80144c2 <_strtod_l+0x37a>
 80144a4:	aa1e      	add	r2, sp, #120	; 0x78
 80144a6:	498b      	ldr	r1, [pc, #556]	; (80146d4 <_strtod_l+0x58c>)
 80144a8:	a81b      	add	r0, sp, #108	; 0x6c
 80144aa:	f002 f835 	bl	8016518 <__hexnan>
 80144ae:	2805      	cmp	r0, #5
 80144b0:	d107      	bne.n	80144c2 <_strtod_l+0x37a>
 80144b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80144b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80144b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80144bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80144c0:	e681      	b.n	80141c6 <_strtod_l+0x7e>
 80144c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80146e8 <_strtod_l+0x5a0>
 80144c6:	e7d2      	b.n	801446e <_strtod_l+0x326>
 80144c8:	ebae 0302 	sub.w	r3, lr, r2
 80144cc:	9306      	str	r3, [sp, #24]
 80144ce:	9b05      	ldr	r3, [sp, #20]
 80144d0:	9807      	ldr	r0, [sp, #28]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	bf08      	it	eq
 80144d6:	4623      	moveq	r3, r4
 80144d8:	2c10      	cmp	r4, #16
 80144da:	9305      	str	r3, [sp, #20]
 80144dc:	46a0      	mov	r8, r4
 80144de:	bfa8      	it	ge
 80144e0:	f04f 0810 	movge.w	r8, #16
 80144e4:	f7ec f826 	bl	8000534 <__aeabi_ui2d>
 80144e8:	2c09      	cmp	r4, #9
 80144ea:	4682      	mov	sl, r0
 80144ec:	468b      	mov	fp, r1
 80144ee:	dc13      	bgt.n	8014518 <_strtod_l+0x3d0>
 80144f0:	9b06      	ldr	r3, [sp, #24]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	f43f ae67 	beq.w	80141c6 <_strtod_l+0x7e>
 80144f8:	9b06      	ldr	r3, [sp, #24]
 80144fa:	dd7a      	ble.n	80145f2 <_strtod_l+0x4aa>
 80144fc:	2b16      	cmp	r3, #22
 80144fe:	dc61      	bgt.n	80145c4 <_strtod_l+0x47c>
 8014500:	4a75      	ldr	r2, [pc, #468]	; (80146d8 <_strtod_l+0x590>)
 8014502:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8014506:	e9de 0100 	ldrd	r0, r1, [lr]
 801450a:	4652      	mov	r2, sl
 801450c:	465b      	mov	r3, fp
 801450e:	f7ec f88b 	bl	8000628 <__aeabi_dmul>
 8014512:	4682      	mov	sl, r0
 8014514:	468b      	mov	fp, r1
 8014516:	e656      	b.n	80141c6 <_strtod_l+0x7e>
 8014518:	4b6f      	ldr	r3, [pc, #444]	; (80146d8 <_strtod_l+0x590>)
 801451a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801451e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014522:	f7ec f881 	bl	8000628 <__aeabi_dmul>
 8014526:	4606      	mov	r6, r0
 8014528:	4628      	mov	r0, r5
 801452a:	460f      	mov	r7, r1
 801452c:	f7ec f802 	bl	8000534 <__aeabi_ui2d>
 8014530:	4602      	mov	r2, r0
 8014532:	460b      	mov	r3, r1
 8014534:	4630      	mov	r0, r6
 8014536:	4639      	mov	r1, r7
 8014538:	f7eb fec0 	bl	80002bc <__adddf3>
 801453c:	2c0f      	cmp	r4, #15
 801453e:	4682      	mov	sl, r0
 8014540:	468b      	mov	fp, r1
 8014542:	ddd5      	ble.n	80144f0 <_strtod_l+0x3a8>
 8014544:	9b06      	ldr	r3, [sp, #24]
 8014546:	eba4 0808 	sub.w	r8, r4, r8
 801454a:	4498      	add	r8, r3
 801454c:	f1b8 0f00 	cmp.w	r8, #0
 8014550:	f340 8096 	ble.w	8014680 <_strtod_l+0x538>
 8014554:	f018 030f 	ands.w	r3, r8, #15
 8014558:	d00a      	beq.n	8014570 <_strtod_l+0x428>
 801455a:	495f      	ldr	r1, [pc, #380]	; (80146d8 <_strtod_l+0x590>)
 801455c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014560:	4652      	mov	r2, sl
 8014562:	465b      	mov	r3, fp
 8014564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014568:	f7ec f85e 	bl	8000628 <__aeabi_dmul>
 801456c:	4682      	mov	sl, r0
 801456e:	468b      	mov	fp, r1
 8014570:	f038 080f 	bics.w	r8, r8, #15
 8014574:	d073      	beq.n	801465e <_strtod_l+0x516>
 8014576:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801457a:	dd47      	ble.n	801460c <_strtod_l+0x4c4>
 801457c:	2400      	movs	r4, #0
 801457e:	46a0      	mov	r8, r4
 8014580:	9407      	str	r4, [sp, #28]
 8014582:	9405      	str	r4, [sp, #20]
 8014584:	2322      	movs	r3, #34	; 0x22
 8014586:	f8df b158 	ldr.w	fp, [pc, #344]	; 80146e0 <_strtod_l+0x598>
 801458a:	f8c9 3000 	str.w	r3, [r9]
 801458e:	f04f 0a00 	mov.w	sl, #0
 8014592:	9b07      	ldr	r3, [sp, #28]
 8014594:	2b00      	cmp	r3, #0
 8014596:	f43f ae16 	beq.w	80141c6 <_strtod_l+0x7e>
 801459a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801459c:	4648      	mov	r0, r9
 801459e:	f002 f931 	bl	8016804 <_Bfree>
 80145a2:	9905      	ldr	r1, [sp, #20]
 80145a4:	4648      	mov	r0, r9
 80145a6:	f002 f92d 	bl	8016804 <_Bfree>
 80145aa:	4641      	mov	r1, r8
 80145ac:	4648      	mov	r0, r9
 80145ae:	f002 f929 	bl	8016804 <_Bfree>
 80145b2:	9907      	ldr	r1, [sp, #28]
 80145b4:	4648      	mov	r0, r9
 80145b6:	f002 f925 	bl	8016804 <_Bfree>
 80145ba:	4621      	mov	r1, r4
 80145bc:	4648      	mov	r0, r9
 80145be:	f002 f921 	bl	8016804 <_Bfree>
 80145c2:	e600      	b.n	80141c6 <_strtod_l+0x7e>
 80145c4:	9a06      	ldr	r2, [sp, #24]
 80145c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80145ca:	4293      	cmp	r3, r2
 80145cc:	dbba      	blt.n	8014544 <_strtod_l+0x3fc>
 80145ce:	4d42      	ldr	r5, [pc, #264]	; (80146d8 <_strtod_l+0x590>)
 80145d0:	f1c4 040f 	rsb	r4, r4, #15
 80145d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80145d8:	4652      	mov	r2, sl
 80145da:	465b      	mov	r3, fp
 80145dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145e0:	f7ec f822 	bl	8000628 <__aeabi_dmul>
 80145e4:	9b06      	ldr	r3, [sp, #24]
 80145e6:	1b1c      	subs	r4, r3, r4
 80145e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80145ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80145f0:	e78d      	b.n	801450e <_strtod_l+0x3c6>
 80145f2:	f113 0f16 	cmn.w	r3, #22
 80145f6:	dba5      	blt.n	8014544 <_strtod_l+0x3fc>
 80145f8:	4a37      	ldr	r2, [pc, #220]	; (80146d8 <_strtod_l+0x590>)
 80145fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80145fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014602:	4650      	mov	r0, sl
 8014604:	4659      	mov	r1, fp
 8014606:	f7ec f939 	bl	800087c <__aeabi_ddiv>
 801460a:	e782      	b.n	8014512 <_strtod_l+0x3ca>
 801460c:	2300      	movs	r3, #0
 801460e:	4e33      	ldr	r6, [pc, #204]	; (80146dc <_strtod_l+0x594>)
 8014610:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014614:	4650      	mov	r0, sl
 8014616:	4659      	mov	r1, fp
 8014618:	461d      	mov	r5, r3
 801461a:	f1b8 0f01 	cmp.w	r8, #1
 801461e:	dc21      	bgt.n	8014664 <_strtod_l+0x51c>
 8014620:	b10b      	cbz	r3, 8014626 <_strtod_l+0x4de>
 8014622:	4682      	mov	sl, r0
 8014624:	468b      	mov	fp, r1
 8014626:	4b2d      	ldr	r3, [pc, #180]	; (80146dc <_strtod_l+0x594>)
 8014628:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801462c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014630:	4652      	mov	r2, sl
 8014632:	465b      	mov	r3, fp
 8014634:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014638:	f7eb fff6 	bl	8000628 <__aeabi_dmul>
 801463c:	4b28      	ldr	r3, [pc, #160]	; (80146e0 <_strtod_l+0x598>)
 801463e:	460a      	mov	r2, r1
 8014640:	400b      	ands	r3, r1
 8014642:	4928      	ldr	r1, [pc, #160]	; (80146e4 <_strtod_l+0x59c>)
 8014644:	428b      	cmp	r3, r1
 8014646:	4682      	mov	sl, r0
 8014648:	d898      	bhi.n	801457c <_strtod_l+0x434>
 801464a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801464e:	428b      	cmp	r3, r1
 8014650:	bf86      	itte	hi
 8014652:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80146ec <_strtod_l+0x5a4>
 8014656:	f04f 3aff 	movhi.w	sl, #4294967295
 801465a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801465e:	2300      	movs	r3, #0
 8014660:	9304      	str	r3, [sp, #16]
 8014662:	e077      	b.n	8014754 <_strtod_l+0x60c>
 8014664:	f018 0f01 	tst.w	r8, #1
 8014668:	d006      	beq.n	8014678 <_strtod_l+0x530>
 801466a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014672:	f7eb ffd9 	bl	8000628 <__aeabi_dmul>
 8014676:	2301      	movs	r3, #1
 8014678:	3501      	adds	r5, #1
 801467a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801467e:	e7cc      	b.n	801461a <_strtod_l+0x4d2>
 8014680:	d0ed      	beq.n	801465e <_strtod_l+0x516>
 8014682:	f1c8 0800 	rsb	r8, r8, #0
 8014686:	f018 020f 	ands.w	r2, r8, #15
 801468a:	d00a      	beq.n	80146a2 <_strtod_l+0x55a>
 801468c:	4b12      	ldr	r3, [pc, #72]	; (80146d8 <_strtod_l+0x590>)
 801468e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014692:	4650      	mov	r0, sl
 8014694:	4659      	mov	r1, fp
 8014696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801469a:	f7ec f8ef 	bl	800087c <__aeabi_ddiv>
 801469e:	4682      	mov	sl, r0
 80146a0:	468b      	mov	fp, r1
 80146a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80146a6:	d0da      	beq.n	801465e <_strtod_l+0x516>
 80146a8:	f1b8 0f1f 	cmp.w	r8, #31
 80146ac:	dd20      	ble.n	80146f0 <_strtod_l+0x5a8>
 80146ae:	2400      	movs	r4, #0
 80146b0:	46a0      	mov	r8, r4
 80146b2:	9407      	str	r4, [sp, #28]
 80146b4:	9405      	str	r4, [sp, #20]
 80146b6:	2322      	movs	r3, #34	; 0x22
 80146b8:	f04f 0a00 	mov.w	sl, #0
 80146bc:	f04f 0b00 	mov.w	fp, #0
 80146c0:	f8c9 3000 	str.w	r3, [r9]
 80146c4:	e765      	b.n	8014592 <_strtod_l+0x44a>
 80146c6:	bf00      	nop
 80146c8:	080187d9 	.word	0x080187d9
 80146cc:	08018863 	.word	0x08018863
 80146d0:	080187e1 	.word	0x080187e1
 80146d4:	08018820 	.word	0x08018820
 80146d8:	08018908 	.word	0x08018908
 80146dc:	080188e0 	.word	0x080188e0
 80146e0:	7ff00000 	.word	0x7ff00000
 80146e4:	7ca00000 	.word	0x7ca00000
 80146e8:	fff80000 	.word	0xfff80000
 80146ec:	7fefffff 	.word	0x7fefffff
 80146f0:	f018 0310 	ands.w	r3, r8, #16
 80146f4:	bf18      	it	ne
 80146f6:	236a      	movne	r3, #106	; 0x6a
 80146f8:	4da0      	ldr	r5, [pc, #640]	; (801497c <_strtod_l+0x834>)
 80146fa:	9304      	str	r3, [sp, #16]
 80146fc:	4650      	mov	r0, sl
 80146fe:	4659      	mov	r1, fp
 8014700:	2300      	movs	r3, #0
 8014702:	f1b8 0f00 	cmp.w	r8, #0
 8014706:	f300 810a 	bgt.w	801491e <_strtod_l+0x7d6>
 801470a:	b10b      	cbz	r3, 8014710 <_strtod_l+0x5c8>
 801470c:	4682      	mov	sl, r0
 801470e:	468b      	mov	fp, r1
 8014710:	9b04      	ldr	r3, [sp, #16]
 8014712:	b1bb      	cbz	r3, 8014744 <_strtod_l+0x5fc>
 8014714:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014718:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801471c:	2b00      	cmp	r3, #0
 801471e:	4659      	mov	r1, fp
 8014720:	dd10      	ble.n	8014744 <_strtod_l+0x5fc>
 8014722:	2b1f      	cmp	r3, #31
 8014724:	f340 8107 	ble.w	8014936 <_strtod_l+0x7ee>
 8014728:	2b34      	cmp	r3, #52	; 0x34
 801472a:	bfde      	ittt	le
 801472c:	3b20      	suble	r3, #32
 801472e:	f04f 32ff 	movle.w	r2, #4294967295
 8014732:	fa02 f303 	lslle.w	r3, r2, r3
 8014736:	f04f 0a00 	mov.w	sl, #0
 801473a:	bfcc      	ite	gt
 801473c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014740:	ea03 0b01 	andle.w	fp, r3, r1
 8014744:	2200      	movs	r2, #0
 8014746:	2300      	movs	r3, #0
 8014748:	4650      	mov	r0, sl
 801474a:	4659      	mov	r1, fp
 801474c:	f7ec f9d4 	bl	8000af8 <__aeabi_dcmpeq>
 8014750:	2800      	cmp	r0, #0
 8014752:	d1ac      	bne.n	80146ae <_strtod_l+0x566>
 8014754:	9b07      	ldr	r3, [sp, #28]
 8014756:	9300      	str	r3, [sp, #0]
 8014758:	9a05      	ldr	r2, [sp, #20]
 801475a:	9908      	ldr	r1, [sp, #32]
 801475c:	4623      	mov	r3, r4
 801475e:	4648      	mov	r0, r9
 8014760:	f002 f8a2 	bl	80168a8 <__s2b>
 8014764:	9007      	str	r0, [sp, #28]
 8014766:	2800      	cmp	r0, #0
 8014768:	f43f af08 	beq.w	801457c <_strtod_l+0x434>
 801476c:	9a06      	ldr	r2, [sp, #24]
 801476e:	9b06      	ldr	r3, [sp, #24]
 8014770:	2a00      	cmp	r2, #0
 8014772:	f1c3 0300 	rsb	r3, r3, #0
 8014776:	bfa8      	it	ge
 8014778:	2300      	movge	r3, #0
 801477a:	930e      	str	r3, [sp, #56]	; 0x38
 801477c:	2400      	movs	r4, #0
 801477e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014782:	9316      	str	r3, [sp, #88]	; 0x58
 8014784:	46a0      	mov	r8, r4
 8014786:	9b07      	ldr	r3, [sp, #28]
 8014788:	4648      	mov	r0, r9
 801478a:	6859      	ldr	r1, [r3, #4]
 801478c:	f002 f806 	bl	801679c <_Balloc>
 8014790:	9005      	str	r0, [sp, #20]
 8014792:	2800      	cmp	r0, #0
 8014794:	f43f aef6 	beq.w	8014584 <_strtod_l+0x43c>
 8014798:	9b07      	ldr	r3, [sp, #28]
 801479a:	691a      	ldr	r2, [r3, #16]
 801479c:	3202      	adds	r2, #2
 801479e:	f103 010c 	add.w	r1, r3, #12
 80147a2:	0092      	lsls	r2, r2, #2
 80147a4:	300c      	adds	r0, #12
 80147a6:	f7fe fcff 	bl	80131a8 <memcpy>
 80147aa:	aa1e      	add	r2, sp, #120	; 0x78
 80147ac:	a91d      	add	r1, sp, #116	; 0x74
 80147ae:	ec4b ab10 	vmov	d0, sl, fp
 80147b2:	4648      	mov	r0, r9
 80147b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80147b8:	f002 fb32 	bl	8016e20 <__d2b>
 80147bc:	901c      	str	r0, [sp, #112]	; 0x70
 80147be:	2800      	cmp	r0, #0
 80147c0:	f43f aee0 	beq.w	8014584 <_strtod_l+0x43c>
 80147c4:	2101      	movs	r1, #1
 80147c6:	4648      	mov	r0, r9
 80147c8:	f002 f8fa 	bl	80169c0 <__i2b>
 80147cc:	4680      	mov	r8, r0
 80147ce:	2800      	cmp	r0, #0
 80147d0:	f43f aed8 	beq.w	8014584 <_strtod_l+0x43c>
 80147d4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80147d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80147d8:	2e00      	cmp	r6, #0
 80147da:	bfab      	itete	ge
 80147dc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80147de:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80147e0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80147e2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80147e4:	bfac      	ite	ge
 80147e6:	18f7      	addge	r7, r6, r3
 80147e8:	1b9d      	sublt	r5, r3, r6
 80147ea:	9b04      	ldr	r3, [sp, #16]
 80147ec:	1af6      	subs	r6, r6, r3
 80147ee:	4416      	add	r6, r2
 80147f0:	4b63      	ldr	r3, [pc, #396]	; (8014980 <_strtod_l+0x838>)
 80147f2:	3e01      	subs	r6, #1
 80147f4:	429e      	cmp	r6, r3
 80147f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80147fa:	f280 80af 	bge.w	801495c <_strtod_l+0x814>
 80147fe:	1b9b      	subs	r3, r3, r6
 8014800:	2b1f      	cmp	r3, #31
 8014802:	eba2 0203 	sub.w	r2, r2, r3
 8014806:	f04f 0101 	mov.w	r1, #1
 801480a:	f300 809b 	bgt.w	8014944 <_strtod_l+0x7fc>
 801480e:	fa01 f303 	lsl.w	r3, r1, r3
 8014812:	930f      	str	r3, [sp, #60]	; 0x3c
 8014814:	2300      	movs	r3, #0
 8014816:	930a      	str	r3, [sp, #40]	; 0x28
 8014818:	18be      	adds	r6, r7, r2
 801481a:	9b04      	ldr	r3, [sp, #16]
 801481c:	42b7      	cmp	r7, r6
 801481e:	4415      	add	r5, r2
 8014820:	441d      	add	r5, r3
 8014822:	463b      	mov	r3, r7
 8014824:	bfa8      	it	ge
 8014826:	4633      	movge	r3, r6
 8014828:	42ab      	cmp	r3, r5
 801482a:	bfa8      	it	ge
 801482c:	462b      	movge	r3, r5
 801482e:	2b00      	cmp	r3, #0
 8014830:	bfc2      	ittt	gt
 8014832:	1af6      	subgt	r6, r6, r3
 8014834:	1aed      	subgt	r5, r5, r3
 8014836:	1aff      	subgt	r7, r7, r3
 8014838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801483a:	b1bb      	cbz	r3, 801486c <_strtod_l+0x724>
 801483c:	4641      	mov	r1, r8
 801483e:	461a      	mov	r2, r3
 8014840:	4648      	mov	r0, r9
 8014842:	f002 f95d 	bl	8016b00 <__pow5mult>
 8014846:	4680      	mov	r8, r0
 8014848:	2800      	cmp	r0, #0
 801484a:	f43f ae9b 	beq.w	8014584 <_strtod_l+0x43c>
 801484e:	4601      	mov	r1, r0
 8014850:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014852:	4648      	mov	r0, r9
 8014854:	f002 f8bd 	bl	80169d2 <__multiply>
 8014858:	900c      	str	r0, [sp, #48]	; 0x30
 801485a:	2800      	cmp	r0, #0
 801485c:	f43f ae92 	beq.w	8014584 <_strtod_l+0x43c>
 8014860:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014862:	4648      	mov	r0, r9
 8014864:	f001 ffce 	bl	8016804 <_Bfree>
 8014868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801486a:	931c      	str	r3, [sp, #112]	; 0x70
 801486c:	2e00      	cmp	r6, #0
 801486e:	dc7a      	bgt.n	8014966 <_strtod_l+0x81e>
 8014870:	9b06      	ldr	r3, [sp, #24]
 8014872:	2b00      	cmp	r3, #0
 8014874:	dd08      	ble.n	8014888 <_strtod_l+0x740>
 8014876:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014878:	9905      	ldr	r1, [sp, #20]
 801487a:	4648      	mov	r0, r9
 801487c:	f002 f940 	bl	8016b00 <__pow5mult>
 8014880:	9005      	str	r0, [sp, #20]
 8014882:	2800      	cmp	r0, #0
 8014884:	f43f ae7e 	beq.w	8014584 <_strtod_l+0x43c>
 8014888:	2d00      	cmp	r5, #0
 801488a:	dd08      	ble.n	801489e <_strtod_l+0x756>
 801488c:	462a      	mov	r2, r5
 801488e:	9905      	ldr	r1, [sp, #20]
 8014890:	4648      	mov	r0, r9
 8014892:	f002 f983 	bl	8016b9c <__lshift>
 8014896:	9005      	str	r0, [sp, #20]
 8014898:	2800      	cmp	r0, #0
 801489a:	f43f ae73 	beq.w	8014584 <_strtod_l+0x43c>
 801489e:	2f00      	cmp	r7, #0
 80148a0:	dd08      	ble.n	80148b4 <_strtod_l+0x76c>
 80148a2:	4641      	mov	r1, r8
 80148a4:	463a      	mov	r2, r7
 80148a6:	4648      	mov	r0, r9
 80148a8:	f002 f978 	bl	8016b9c <__lshift>
 80148ac:	4680      	mov	r8, r0
 80148ae:	2800      	cmp	r0, #0
 80148b0:	f43f ae68 	beq.w	8014584 <_strtod_l+0x43c>
 80148b4:	9a05      	ldr	r2, [sp, #20]
 80148b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80148b8:	4648      	mov	r0, r9
 80148ba:	f002 f9dd 	bl	8016c78 <__mdiff>
 80148be:	4604      	mov	r4, r0
 80148c0:	2800      	cmp	r0, #0
 80148c2:	f43f ae5f 	beq.w	8014584 <_strtod_l+0x43c>
 80148c6:	68c3      	ldr	r3, [r0, #12]
 80148c8:	930c      	str	r3, [sp, #48]	; 0x30
 80148ca:	2300      	movs	r3, #0
 80148cc:	60c3      	str	r3, [r0, #12]
 80148ce:	4641      	mov	r1, r8
 80148d0:	f002 f9b8 	bl	8016c44 <__mcmp>
 80148d4:	2800      	cmp	r0, #0
 80148d6:	da55      	bge.n	8014984 <_strtod_l+0x83c>
 80148d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148da:	b9e3      	cbnz	r3, 8014916 <_strtod_l+0x7ce>
 80148dc:	f1ba 0f00 	cmp.w	sl, #0
 80148e0:	d119      	bne.n	8014916 <_strtod_l+0x7ce>
 80148e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80148e6:	b9b3      	cbnz	r3, 8014916 <_strtod_l+0x7ce>
 80148e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80148ec:	0d1b      	lsrs	r3, r3, #20
 80148ee:	051b      	lsls	r3, r3, #20
 80148f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80148f4:	d90f      	bls.n	8014916 <_strtod_l+0x7ce>
 80148f6:	6963      	ldr	r3, [r4, #20]
 80148f8:	b913      	cbnz	r3, 8014900 <_strtod_l+0x7b8>
 80148fa:	6923      	ldr	r3, [r4, #16]
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	dd0a      	ble.n	8014916 <_strtod_l+0x7ce>
 8014900:	4621      	mov	r1, r4
 8014902:	2201      	movs	r2, #1
 8014904:	4648      	mov	r0, r9
 8014906:	f002 f949 	bl	8016b9c <__lshift>
 801490a:	4641      	mov	r1, r8
 801490c:	4604      	mov	r4, r0
 801490e:	f002 f999 	bl	8016c44 <__mcmp>
 8014912:	2800      	cmp	r0, #0
 8014914:	dc67      	bgt.n	80149e6 <_strtod_l+0x89e>
 8014916:	9b04      	ldr	r3, [sp, #16]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d171      	bne.n	8014a00 <_strtod_l+0x8b8>
 801491c:	e63d      	b.n	801459a <_strtod_l+0x452>
 801491e:	f018 0f01 	tst.w	r8, #1
 8014922:	d004      	beq.n	801492e <_strtod_l+0x7e6>
 8014924:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014928:	f7eb fe7e 	bl	8000628 <__aeabi_dmul>
 801492c:	2301      	movs	r3, #1
 801492e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014932:	3508      	adds	r5, #8
 8014934:	e6e5      	b.n	8014702 <_strtod_l+0x5ba>
 8014936:	f04f 32ff 	mov.w	r2, #4294967295
 801493a:	fa02 f303 	lsl.w	r3, r2, r3
 801493e:	ea03 0a0a 	and.w	sl, r3, sl
 8014942:	e6ff      	b.n	8014744 <_strtod_l+0x5fc>
 8014944:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014948:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801494c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014950:	36e2      	adds	r6, #226	; 0xe2
 8014952:	fa01 f306 	lsl.w	r3, r1, r6
 8014956:	930a      	str	r3, [sp, #40]	; 0x28
 8014958:	910f      	str	r1, [sp, #60]	; 0x3c
 801495a:	e75d      	b.n	8014818 <_strtod_l+0x6d0>
 801495c:	2300      	movs	r3, #0
 801495e:	930a      	str	r3, [sp, #40]	; 0x28
 8014960:	2301      	movs	r3, #1
 8014962:	930f      	str	r3, [sp, #60]	; 0x3c
 8014964:	e758      	b.n	8014818 <_strtod_l+0x6d0>
 8014966:	4632      	mov	r2, r6
 8014968:	991c      	ldr	r1, [sp, #112]	; 0x70
 801496a:	4648      	mov	r0, r9
 801496c:	f002 f916 	bl	8016b9c <__lshift>
 8014970:	901c      	str	r0, [sp, #112]	; 0x70
 8014972:	2800      	cmp	r0, #0
 8014974:	f47f af7c 	bne.w	8014870 <_strtod_l+0x728>
 8014978:	e604      	b.n	8014584 <_strtod_l+0x43c>
 801497a:	bf00      	nop
 801497c:	08018838 	.word	0x08018838
 8014980:	fffffc02 	.word	0xfffffc02
 8014984:	465d      	mov	r5, fp
 8014986:	f040 8086 	bne.w	8014a96 <_strtod_l+0x94e>
 801498a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801498c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014990:	b32a      	cbz	r2, 80149de <_strtod_l+0x896>
 8014992:	4aaf      	ldr	r2, [pc, #700]	; (8014c50 <_strtod_l+0xb08>)
 8014994:	4293      	cmp	r3, r2
 8014996:	d153      	bne.n	8014a40 <_strtod_l+0x8f8>
 8014998:	9b04      	ldr	r3, [sp, #16]
 801499a:	4650      	mov	r0, sl
 801499c:	b1d3      	cbz	r3, 80149d4 <_strtod_l+0x88c>
 801499e:	4aad      	ldr	r2, [pc, #692]	; (8014c54 <_strtod_l+0xb0c>)
 80149a0:	402a      	ands	r2, r5
 80149a2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80149a6:	f04f 31ff 	mov.w	r1, #4294967295
 80149aa:	d816      	bhi.n	80149da <_strtod_l+0x892>
 80149ac:	0d12      	lsrs	r2, r2, #20
 80149ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80149b2:	fa01 f303 	lsl.w	r3, r1, r3
 80149b6:	4298      	cmp	r0, r3
 80149b8:	d142      	bne.n	8014a40 <_strtod_l+0x8f8>
 80149ba:	4ba7      	ldr	r3, [pc, #668]	; (8014c58 <_strtod_l+0xb10>)
 80149bc:	429d      	cmp	r5, r3
 80149be:	d102      	bne.n	80149c6 <_strtod_l+0x87e>
 80149c0:	3001      	adds	r0, #1
 80149c2:	f43f addf 	beq.w	8014584 <_strtod_l+0x43c>
 80149c6:	4ba3      	ldr	r3, [pc, #652]	; (8014c54 <_strtod_l+0xb0c>)
 80149c8:	402b      	ands	r3, r5
 80149ca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80149ce:	f04f 0a00 	mov.w	sl, #0
 80149d2:	e7a0      	b.n	8014916 <_strtod_l+0x7ce>
 80149d4:	f04f 33ff 	mov.w	r3, #4294967295
 80149d8:	e7ed      	b.n	80149b6 <_strtod_l+0x86e>
 80149da:	460b      	mov	r3, r1
 80149dc:	e7eb      	b.n	80149b6 <_strtod_l+0x86e>
 80149de:	bb7b      	cbnz	r3, 8014a40 <_strtod_l+0x8f8>
 80149e0:	f1ba 0f00 	cmp.w	sl, #0
 80149e4:	d12c      	bne.n	8014a40 <_strtod_l+0x8f8>
 80149e6:	9904      	ldr	r1, [sp, #16]
 80149e8:	4a9a      	ldr	r2, [pc, #616]	; (8014c54 <_strtod_l+0xb0c>)
 80149ea:	465b      	mov	r3, fp
 80149ec:	b1f1      	cbz	r1, 8014a2c <_strtod_l+0x8e4>
 80149ee:	ea02 010b 	and.w	r1, r2, fp
 80149f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80149f6:	dc19      	bgt.n	8014a2c <_strtod_l+0x8e4>
 80149f8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80149fc:	f77f ae5b 	ble.w	80146b6 <_strtod_l+0x56e>
 8014a00:	4a96      	ldr	r2, [pc, #600]	; (8014c5c <_strtod_l+0xb14>)
 8014a02:	2300      	movs	r3, #0
 8014a04:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014a08:	4650      	mov	r0, sl
 8014a0a:	4659      	mov	r1, fp
 8014a0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014a10:	f7eb fe0a 	bl	8000628 <__aeabi_dmul>
 8014a14:	4682      	mov	sl, r0
 8014a16:	468b      	mov	fp, r1
 8014a18:	2900      	cmp	r1, #0
 8014a1a:	f47f adbe 	bne.w	801459a <_strtod_l+0x452>
 8014a1e:	2800      	cmp	r0, #0
 8014a20:	f47f adbb 	bne.w	801459a <_strtod_l+0x452>
 8014a24:	2322      	movs	r3, #34	; 0x22
 8014a26:	f8c9 3000 	str.w	r3, [r9]
 8014a2a:	e5b6      	b.n	801459a <_strtod_l+0x452>
 8014a2c:	4013      	ands	r3, r2
 8014a2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014a32:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014a36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014a3a:	f04f 3aff 	mov.w	sl, #4294967295
 8014a3e:	e76a      	b.n	8014916 <_strtod_l+0x7ce>
 8014a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a42:	b193      	cbz	r3, 8014a6a <_strtod_l+0x922>
 8014a44:	422b      	tst	r3, r5
 8014a46:	f43f af66 	beq.w	8014916 <_strtod_l+0x7ce>
 8014a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a4c:	9a04      	ldr	r2, [sp, #16]
 8014a4e:	4650      	mov	r0, sl
 8014a50:	4659      	mov	r1, fp
 8014a52:	b173      	cbz	r3, 8014a72 <_strtod_l+0x92a>
 8014a54:	f7ff fb5b 	bl	801410e <sulp>
 8014a58:	4602      	mov	r2, r0
 8014a5a:	460b      	mov	r3, r1
 8014a5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014a60:	f7eb fc2c 	bl	80002bc <__adddf3>
 8014a64:	4682      	mov	sl, r0
 8014a66:	468b      	mov	fp, r1
 8014a68:	e755      	b.n	8014916 <_strtod_l+0x7ce>
 8014a6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a6c:	ea13 0f0a 	tst.w	r3, sl
 8014a70:	e7e9      	b.n	8014a46 <_strtod_l+0x8fe>
 8014a72:	f7ff fb4c 	bl	801410e <sulp>
 8014a76:	4602      	mov	r2, r0
 8014a78:	460b      	mov	r3, r1
 8014a7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014a7e:	f7eb fc1b 	bl	80002b8 <__aeabi_dsub>
 8014a82:	2200      	movs	r2, #0
 8014a84:	2300      	movs	r3, #0
 8014a86:	4682      	mov	sl, r0
 8014a88:	468b      	mov	fp, r1
 8014a8a:	f7ec f835 	bl	8000af8 <__aeabi_dcmpeq>
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	f47f ae11 	bne.w	80146b6 <_strtod_l+0x56e>
 8014a94:	e73f      	b.n	8014916 <_strtod_l+0x7ce>
 8014a96:	4641      	mov	r1, r8
 8014a98:	4620      	mov	r0, r4
 8014a9a:	f002 fa10 	bl	8016ebe <__ratio>
 8014a9e:	ec57 6b10 	vmov	r6, r7, d0
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014aa8:	ee10 0a10 	vmov	r0, s0
 8014aac:	4639      	mov	r1, r7
 8014aae:	f7ec f837 	bl	8000b20 <__aeabi_dcmple>
 8014ab2:	2800      	cmp	r0, #0
 8014ab4:	d077      	beq.n	8014ba6 <_strtod_l+0xa5e>
 8014ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d04a      	beq.n	8014b52 <_strtod_l+0xa0a>
 8014abc:	4b68      	ldr	r3, [pc, #416]	; (8014c60 <_strtod_l+0xb18>)
 8014abe:	2200      	movs	r2, #0
 8014ac0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014ac4:	4f66      	ldr	r7, [pc, #408]	; (8014c60 <_strtod_l+0xb18>)
 8014ac6:	2600      	movs	r6, #0
 8014ac8:	4b62      	ldr	r3, [pc, #392]	; (8014c54 <_strtod_l+0xb0c>)
 8014aca:	402b      	ands	r3, r5
 8014acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ace:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014ad0:	4b64      	ldr	r3, [pc, #400]	; (8014c64 <_strtod_l+0xb1c>)
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	f040 80ce 	bne.w	8014c74 <_strtod_l+0xb2c>
 8014ad8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014adc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014ae0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014ae4:	ec4b ab10 	vmov	d0, sl, fp
 8014ae8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014aec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014af0:	f002 f920 	bl	8016d34 <__ulp>
 8014af4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014af8:	ec53 2b10 	vmov	r2, r3, d0
 8014afc:	f7eb fd94 	bl	8000628 <__aeabi_dmul>
 8014b00:	4652      	mov	r2, sl
 8014b02:	465b      	mov	r3, fp
 8014b04:	f7eb fbda 	bl	80002bc <__adddf3>
 8014b08:	460b      	mov	r3, r1
 8014b0a:	4952      	ldr	r1, [pc, #328]	; (8014c54 <_strtod_l+0xb0c>)
 8014b0c:	4a56      	ldr	r2, [pc, #344]	; (8014c68 <_strtod_l+0xb20>)
 8014b0e:	4019      	ands	r1, r3
 8014b10:	4291      	cmp	r1, r2
 8014b12:	4682      	mov	sl, r0
 8014b14:	d95b      	bls.n	8014bce <_strtod_l+0xa86>
 8014b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014b1c:	4293      	cmp	r3, r2
 8014b1e:	d103      	bne.n	8014b28 <_strtod_l+0x9e0>
 8014b20:	9b08      	ldr	r3, [sp, #32]
 8014b22:	3301      	adds	r3, #1
 8014b24:	f43f ad2e 	beq.w	8014584 <_strtod_l+0x43c>
 8014b28:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014c58 <_strtod_l+0xb10>
 8014b2c:	f04f 3aff 	mov.w	sl, #4294967295
 8014b30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014b32:	4648      	mov	r0, r9
 8014b34:	f001 fe66 	bl	8016804 <_Bfree>
 8014b38:	9905      	ldr	r1, [sp, #20]
 8014b3a:	4648      	mov	r0, r9
 8014b3c:	f001 fe62 	bl	8016804 <_Bfree>
 8014b40:	4641      	mov	r1, r8
 8014b42:	4648      	mov	r0, r9
 8014b44:	f001 fe5e 	bl	8016804 <_Bfree>
 8014b48:	4621      	mov	r1, r4
 8014b4a:	4648      	mov	r0, r9
 8014b4c:	f001 fe5a 	bl	8016804 <_Bfree>
 8014b50:	e619      	b.n	8014786 <_strtod_l+0x63e>
 8014b52:	f1ba 0f00 	cmp.w	sl, #0
 8014b56:	d11a      	bne.n	8014b8e <_strtod_l+0xa46>
 8014b58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b5c:	b9eb      	cbnz	r3, 8014b9a <_strtod_l+0xa52>
 8014b5e:	2200      	movs	r2, #0
 8014b60:	4b3f      	ldr	r3, [pc, #252]	; (8014c60 <_strtod_l+0xb18>)
 8014b62:	4630      	mov	r0, r6
 8014b64:	4639      	mov	r1, r7
 8014b66:	f7eb ffd1 	bl	8000b0c <__aeabi_dcmplt>
 8014b6a:	b9c8      	cbnz	r0, 8014ba0 <_strtod_l+0xa58>
 8014b6c:	4630      	mov	r0, r6
 8014b6e:	4639      	mov	r1, r7
 8014b70:	2200      	movs	r2, #0
 8014b72:	4b3e      	ldr	r3, [pc, #248]	; (8014c6c <_strtod_l+0xb24>)
 8014b74:	f7eb fd58 	bl	8000628 <__aeabi_dmul>
 8014b78:	4606      	mov	r6, r0
 8014b7a:	460f      	mov	r7, r1
 8014b7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014b80:	9618      	str	r6, [sp, #96]	; 0x60
 8014b82:	9319      	str	r3, [sp, #100]	; 0x64
 8014b84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014b88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014b8c:	e79c      	b.n	8014ac8 <_strtod_l+0x980>
 8014b8e:	f1ba 0f01 	cmp.w	sl, #1
 8014b92:	d102      	bne.n	8014b9a <_strtod_l+0xa52>
 8014b94:	2d00      	cmp	r5, #0
 8014b96:	f43f ad8e 	beq.w	80146b6 <_strtod_l+0x56e>
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	4b34      	ldr	r3, [pc, #208]	; (8014c70 <_strtod_l+0xb28>)
 8014b9e:	e78f      	b.n	8014ac0 <_strtod_l+0x978>
 8014ba0:	2600      	movs	r6, #0
 8014ba2:	4f32      	ldr	r7, [pc, #200]	; (8014c6c <_strtod_l+0xb24>)
 8014ba4:	e7ea      	b.n	8014b7c <_strtod_l+0xa34>
 8014ba6:	4b31      	ldr	r3, [pc, #196]	; (8014c6c <_strtod_l+0xb24>)
 8014ba8:	4630      	mov	r0, r6
 8014baa:	4639      	mov	r1, r7
 8014bac:	2200      	movs	r2, #0
 8014bae:	f7eb fd3b 	bl	8000628 <__aeabi_dmul>
 8014bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bb4:	4606      	mov	r6, r0
 8014bb6:	460f      	mov	r7, r1
 8014bb8:	b933      	cbnz	r3, 8014bc8 <_strtod_l+0xa80>
 8014bba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014bbe:	9010      	str	r0, [sp, #64]	; 0x40
 8014bc0:	9311      	str	r3, [sp, #68]	; 0x44
 8014bc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014bc6:	e7df      	b.n	8014b88 <_strtod_l+0xa40>
 8014bc8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014bcc:	e7f9      	b.n	8014bc2 <_strtod_l+0xa7a>
 8014bce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014bd2:	9b04      	ldr	r3, [sp, #16]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d1ab      	bne.n	8014b30 <_strtod_l+0x9e8>
 8014bd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014bdc:	0d1b      	lsrs	r3, r3, #20
 8014bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014be0:	051b      	lsls	r3, r3, #20
 8014be2:	429a      	cmp	r2, r3
 8014be4:	465d      	mov	r5, fp
 8014be6:	d1a3      	bne.n	8014b30 <_strtod_l+0x9e8>
 8014be8:	4639      	mov	r1, r7
 8014bea:	4630      	mov	r0, r6
 8014bec:	f7eb ffcc 	bl	8000b88 <__aeabi_d2iz>
 8014bf0:	f7eb fcb0 	bl	8000554 <__aeabi_i2d>
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	4602      	mov	r2, r0
 8014bf8:	4639      	mov	r1, r7
 8014bfa:	4630      	mov	r0, r6
 8014bfc:	f7eb fb5c 	bl	80002b8 <__aeabi_dsub>
 8014c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c02:	4606      	mov	r6, r0
 8014c04:	460f      	mov	r7, r1
 8014c06:	b933      	cbnz	r3, 8014c16 <_strtod_l+0xace>
 8014c08:	f1ba 0f00 	cmp.w	sl, #0
 8014c0c:	d103      	bne.n	8014c16 <_strtod_l+0xace>
 8014c0e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014c12:	2d00      	cmp	r5, #0
 8014c14:	d06d      	beq.n	8014cf2 <_strtod_l+0xbaa>
 8014c16:	a30a      	add	r3, pc, #40	; (adr r3, 8014c40 <_strtod_l+0xaf8>)
 8014c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c1c:	4630      	mov	r0, r6
 8014c1e:	4639      	mov	r1, r7
 8014c20:	f7eb ff74 	bl	8000b0c <__aeabi_dcmplt>
 8014c24:	2800      	cmp	r0, #0
 8014c26:	f47f acb8 	bne.w	801459a <_strtod_l+0x452>
 8014c2a:	a307      	add	r3, pc, #28	; (adr r3, 8014c48 <_strtod_l+0xb00>)
 8014c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c30:	4630      	mov	r0, r6
 8014c32:	4639      	mov	r1, r7
 8014c34:	f7eb ff88 	bl	8000b48 <__aeabi_dcmpgt>
 8014c38:	2800      	cmp	r0, #0
 8014c3a:	f43f af79 	beq.w	8014b30 <_strtod_l+0x9e8>
 8014c3e:	e4ac      	b.n	801459a <_strtod_l+0x452>
 8014c40:	94a03595 	.word	0x94a03595
 8014c44:	3fdfffff 	.word	0x3fdfffff
 8014c48:	35afe535 	.word	0x35afe535
 8014c4c:	3fe00000 	.word	0x3fe00000
 8014c50:	000fffff 	.word	0x000fffff
 8014c54:	7ff00000 	.word	0x7ff00000
 8014c58:	7fefffff 	.word	0x7fefffff
 8014c5c:	39500000 	.word	0x39500000
 8014c60:	3ff00000 	.word	0x3ff00000
 8014c64:	7fe00000 	.word	0x7fe00000
 8014c68:	7c9fffff 	.word	0x7c9fffff
 8014c6c:	3fe00000 	.word	0x3fe00000
 8014c70:	bff00000 	.word	0xbff00000
 8014c74:	9b04      	ldr	r3, [sp, #16]
 8014c76:	b333      	cbz	r3, 8014cc6 <_strtod_l+0xb7e>
 8014c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014c7e:	d822      	bhi.n	8014cc6 <_strtod_l+0xb7e>
 8014c80:	a327      	add	r3, pc, #156	; (adr r3, 8014d20 <_strtod_l+0xbd8>)
 8014c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c86:	4630      	mov	r0, r6
 8014c88:	4639      	mov	r1, r7
 8014c8a:	f7eb ff49 	bl	8000b20 <__aeabi_dcmple>
 8014c8e:	b1a0      	cbz	r0, 8014cba <_strtod_l+0xb72>
 8014c90:	4639      	mov	r1, r7
 8014c92:	4630      	mov	r0, r6
 8014c94:	f7eb ffa0 	bl	8000bd8 <__aeabi_d2uiz>
 8014c98:	2800      	cmp	r0, #0
 8014c9a:	bf08      	it	eq
 8014c9c:	2001      	moveq	r0, #1
 8014c9e:	f7eb fc49 	bl	8000534 <__aeabi_ui2d>
 8014ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ca4:	4606      	mov	r6, r0
 8014ca6:	460f      	mov	r7, r1
 8014ca8:	bb03      	cbnz	r3, 8014cec <_strtod_l+0xba4>
 8014caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cae:	9012      	str	r0, [sp, #72]	; 0x48
 8014cb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8014cb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014cb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014cbe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014cc2:	1a9b      	subs	r3, r3, r2
 8014cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8014cc6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8014cca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014cce:	f002 f831 	bl	8016d34 <__ulp>
 8014cd2:	4650      	mov	r0, sl
 8014cd4:	ec53 2b10 	vmov	r2, r3, d0
 8014cd8:	4659      	mov	r1, fp
 8014cda:	f7eb fca5 	bl	8000628 <__aeabi_dmul>
 8014cde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014ce2:	f7eb faeb 	bl	80002bc <__adddf3>
 8014ce6:	4682      	mov	sl, r0
 8014ce8:	468b      	mov	fp, r1
 8014cea:	e772      	b.n	8014bd2 <_strtod_l+0xa8a>
 8014cec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014cf0:	e7df      	b.n	8014cb2 <_strtod_l+0xb6a>
 8014cf2:	a30d      	add	r3, pc, #52	; (adr r3, 8014d28 <_strtod_l+0xbe0>)
 8014cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf8:	f7eb ff08 	bl	8000b0c <__aeabi_dcmplt>
 8014cfc:	e79c      	b.n	8014c38 <_strtod_l+0xaf0>
 8014cfe:	2300      	movs	r3, #0
 8014d00:	930d      	str	r3, [sp, #52]	; 0x34
 8014d02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014d04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014d06:	6013      	str	r3, [r2, #0]
 8014d08:	f7ff ba61 	b.w	80141ce <_strtod_l+0x86>
 8014d0c:	2b65      	cmp	r3, #101	; 0x65
 8014d0e:	f04f 0200 	mov.w	r2, #0
 8014d12:	f43f ab4e 	beq.w	80143b2 <_strtod_l+0x26a>
 8014d16:	2101      	movs	r1, #1
 8014d18:	4614      	mov	r4, r2
 8014d1a:	9104      	str	r1, [sp, #16]
 8014d1c:	f7ff bacb 	b.w	80142b6 <_strtod_l+0x16e>
 8014d20:	ffc00000 	.word	0xffc00000
 8014d24:	41dfffff 	.word	0x41dfffff
 8014d28:	94a03595 	.word	0x94a03595
 8014d2c:	3fcfffff 	.word	0x3fcfffff

08014d30 <_strtod_r>:
 8014d30:	4b05      	ldr	r3, [pc, #20]	; (8014d48 <_strtod_r+0x18>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	b410      	push	{r4}
 8014d36:	6a1b      	ldr	r3, [r3, #32]
 8014d38:	4c04      	ldr	r4, [pc, #16]	; (8014d4c <_strtod_r+0x1c>)
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	bf08      	it	eq
 8014d3e:	4623      	moveq	r3, r4
 8014d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d44:	f7ff ba00 	b.w	8014148 <_strtod_l>
 8014d48:	2000000c 	.word	0x2000000c
 8014d4c:	20000070 	.word	0x20000070

08014d50 <_strtol_l.isra.0>:
 8014d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d54:	4680      	mov	r8, r0
 8014d56:	4689      	mov	r9, r1
 8014d58:	4692      	mov	sl, r2
 8014d5a:	461e      	mov	r6, r3
 8014d5c:	460f      	mov	r7, r1
 8014d5e:	463d      	mov	r5, r7
 8014d60:	9808      	ldr	r0, [sp, #32]
 8014d62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d66:	f001 fc67 	bl	8016638 <__locale_ctype_ptr_l>
 8014d6a:	4420      	add	r0, r4
 8014d6c:	7843      	ldrb	r3, [r0, #1]
 8014d6e:	f013 0308 	ands.w	r3, r3, #8
 8014d72:	d132      	bne.n	8014dda <_strtol_l.isra.0+0x8a>
 8014d74:	2c2d      	cmp	r4, #45	; 0x2d
 8014d76:	d132      	bne.n	8014dde <_strtol_l.isra.0+0x8e>
 8014d78:	787c      	ldrb	r4, [r7, #1]
 8014d7a:	1cbd      	adds	r5, r7, #2
 8014d7c:	2201      	movs	r2, #1
 8014d7e:	2e00      	cmp	r6, #0
 8014d80:	d05d      	beq.n	8014e3e <_strtol_l.isra.0+0xee>
 8014d82:	2e10      	cmp	r6, #16
 8014d84:	d109      	bne.n	8014d9a <_strtol_l.isra.0+0x4a>
 8014d86:	2c30      	cmp	r4, #48	; 0x30
 8014d88:	d107      	bne.n	8014d9a <_strtol_l.isra.0+0x4a>
 8014d8a:	782b      	ldrb	r3, [r5, #0]
 8014d8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014d90:	2b58      	cmp	r3, #88	; 0x58
 8014d92:	d14f      	bne.n	8014e34 <_strtol_l.isra.0+0xe4>
 8014d94:	786c      	ldrb	r4, [r5, #1]
 8014d96:	2610      	movs	r6, #16
 8014d98:	3502      	adds	r5, #2
 8014d9a:	2a00      	cmp	r2, #0
 8014d9c:	bf14      	ite	ne
 8014d9e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014da2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014da6:	2700      	movs	r7, #0
 8014da8:	fbb1 fcf6 	udiv	ip, r1, r6
 8014dac:	4638      	mov	r0, r7
 8014dae:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014db2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014db6:	2b09      	cmp	r3, #9
 8014db8:	d817      	bhi.n	8014dea <_strtol_l.isra.0+0x9a>
 8014dba:	461c      	mov	r4, r3
 8014dbc:	42a6      	cmp	r6, r4
 8014dbe:	dd23      	ble.n	8014e08 <_strtol_l.isra.0+0xb8>
 8014dc0:	1c7b      	adds	r3, r7, #1
 8014dc2:	d007      	beq.n	8014dd4 <_strtol_l.isra.0+0x84>
 8014dc4:	4584      	cmp	ip, r0
 8014dc6:	d31c      	bcc.n	8014e02 <_strtol_l.isra.0+0xb2>
 8014dc8:	d101      	bne.n	8014dce <_strtol_l.isra.0+0x7e>
 8014dca:	45a6      	cmp	lr, r4
 8014dcc:	db19      	blt.n	8014e02 <_strtol_l.isra.0+0xb2>
 8014dce:	fb00 4006 	mla	r0, r0, r6, r4
 8014dd2:	2701      	movs	r7, #1
 8014dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014dd8:	e7eb      	b.n	8014db2 <_strtol_l.isra.0+0x62>
 8014dda:	462f      	mov	r7, r5
 8014ddc:	e7bf      	b.n	8014d5e <_strtol_l.isra.0+0xe>
 8014dde:	2c2b      	cmp	r4, #43	; 0x2b
 8014de0:	bf04      	itt	eq
 8014de2:	1cbd      	addeq	r5, r7, #2
 8014de4:	787c      	ldrbeq	r4, [r7, #1]
 8014de6:	461a      	mov	r2, r3
 8014de8:	e7c9      	b.n	8014d7e <_strtol_l.isra.0+0x2e>
 8014dea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014dee:	2b19      	cmp	r3, #25
 8014df0:	d801      	bhi.n	8014df6 <_strtol_l.isra.0+0xa6>
 8014df2:	3c37      	subs	r4, #55	; 0x37
 8014df4:	e7e2      	b.n	8014dbc <_strtol_l.isra.0+0x6c>
 8014df6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014dfa:	2b19      	cmp	r3, #25
 8014dfc:	d804      	bhi.n	8014e08 <_strtol_l.isra.0+0xb8>
 8014dfe:	3c57      	subs	r4, #87	; 0x57
 8014e00:	e7dc      	b.n	8014dbc <_strtol_l.isra.0+0x6c>
 8014e02:	f04f 37ff 	mov.w	r7, #4294967295
 8014e06:	e7e5      	b.n	8014dd4 <_strtol_l.isra.0+0x84>
 8014e08:	1c7b      	adds	r3, r7, #1
 8014e0a:	d108      	bne.n	8014e1e <_strtol_l.isra.0+0xce>
 8014e0c:	2322      	movs	r3, #34	; 0x22
 8014e0e:	f8c8 3000 	str.w	r3, [r8]
 8014e12:	4608      	mov	r0, r1
 8014e14:	f1ba 0f00 	cmp.w	sl, #0
 8014e18:	d107      	bne.n	8014e2a <_strtol_l.isra.0+0xda>
 8014e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e1e:	b102      	cbz	r2, 8014e22 <_strtol_l.isra.0+0xd2>
 8014e20:	4240      	negs	r0, r0
 8014e22:	f1ba 0f00 	cmp.w	sl, #0
 8014e26:	d0f8      	beq.n	8014e1a <_strtol_l.isra.0+0xca>
 8014e28:	b10f      	cbz	r7, 8014e2e <_strtol_l.isra.0+0xde>
 8014e2a:	f105 39ff 	add.w	r9, r5, #4294967295
 8014e2e:	f8ca 9000 	str.w	r9, [sl]
 8014e32:	e7f2      	b.n	8014e1a <_strtol_l.isra.0+0xca>
 8014e34:	2430      	movs	r4, #48	; 0x30
 8014e36:	2e00      	cmp	r6, #0
 8014e38:	d1af      	bne.n	8014d9a <_strtol_l.isra.0+0x4a>
 8014e3a:	2608      	movs	r6, #8
 8014e3c:	e7ad      	b.n	8014d9a <_strtol_l.isra.0+0x4a>
 8014e3e:	2c30      	cmp	r4, #48	; 0x30
 8014e40:	d0a3      	beq.n	8014d8a <_strtol_l.isra.0+0x3a>
 8014e42:	260a      	movs	r6, #10
 8014e44:	e7a9      	b.n	8014d9a <_strtol_l.isra.0+0x4a>
	...

08014e48 <_strtol_r>:
 8014e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e4a:	4c06      	ldr	r4, [pc, #24]	; (8014e64 <_strtol_r+0x1c>)
 8014e4c:	4d06      	ldr	r5, [pc, #24]	; (8014e68 <_strtol_r+0x20>)
 8014e4e:	6824      	ldr	r4, [r4, #0]
 8014e50:	6a24      	ldr	r4, [r4, #32]
 8014e52:	2c00      	cmp	r4, #0
 8014e54:	bf08      	it	eq
 8014e56:	462c      	moveq	r4, r5
 8014e58:	9400      	str	r4, [sp, #0]
 8014e5a:	f7ff ff79 	bl	8014d50 <_strtol_l.isra.0>
 8014e5e:	b003      	add	sp, #12
 8014e60:	bd30      	pop	{r4, r5, pc}
 8014e62:	bf00      	nop
 8014e64:	2000000c 	.word	0x2000000c
 8014e68:	20000070 	.word	0x20000070

08014e6c <_vsiprintf_r>:
 8014e6c:	b500      	push	{lr}
 8014e6e:	b09b      	sub	sp, #108	; 0x6c
 8014e70:	9100      	str	r1, [sp, #0]
 8014e72:	9104      	str	r1, [sp, #16]
 8014e74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014e78:	9105      	str	r1, [sp, #20]
 8014e7a:	9102      	str	r1, [sp, #8]
 8014e7c:	4905      	ldr	r1, [pc, #20]	; (8014e94 <_vsiprintf_r+0x28>)
 8014e7e:	9103      	str	r1, [sp, #12]
 8014e80:	4669      	mov	r1, sp
 8014e82:	f002 f99b 	bl	80171bc <_svfiprintf_r>
 8014e86:	9b00      	ldr	r3, [sp, #0]
 8014e88:	2200      	movs	r2, #0
 8014e8a:	701a      	strb	r2, [r3, #0]
 8014e8c:	b01b      	add	sp, #108	; 0x6c
 8014e8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e92:	bf00      	nop
 8014e94:	ffff0208 	.word	0xffff0208

08014e98 <vsiprintf>:
 8014e98:	4613      	mov	r3, r2
 8014e9a:	460a      	mov	r2, r1
 8014e9c:	4601      	mov	r1, r0
 8014e9e:	4802      	ldr	r0, [pc, #8]	; (8014ea8 <vsiprintf+0x10>)
 8014ea0:	6800      	ldr	r0, [r0, #0]
 8014ea2:	f7ff bfe3 	b.w	8014e6c <_vsiprintf_r>
 8014ea6:	bf00      	nop
 8014ea8:	2000000c 	.word	0x2000000c

08014eac <__swbuf_r>:
 8014eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eae:	460e      	mov	r6, r1
 8014eb0:	4614      	mov	r4, r2
 8014eb2:	4605      	mov	r5, r0
 8014eb4:	b118      	cbz	r0, 8014ebe <__swbuf_r+0x12>
 8014eb6:	6983      	ldr	r3, [r0, #24]
 8014eb8:	b90b      	cbnz	r3, 8014ebe <__swbuf_r+0x12>
 8014eba:	f001 f80d 	bl	8015ed8 <__sinit>
 8014ebe:	4b21      	ldr	r3, [pc, #132]	; (8014f44 <__swbuf_r+0x98>)
 8014ec0:	429c      	cmp	r4, r3
 8014ec2:	d12a      	bne.n	8014f1a <__swbuf_r+0x6e>
 8014ec4:	686c      	ldr	r4, [r5, #4]
 8014ec6:	69a3      	ldr	r3, [r4, #24]
 8014ec8:	60a3      	str	r3, [r4, #8]
 8014eca:	89a3      	ldrh	r3, [r4, #12]
 8014ecc:	071a      	lsls	r2, r3, #28
 8014ece:	d52e      	bpl.n	8014f2e <__swbuf_r+0x82>
 8014ed0:	6923      	ldr	r3, [r4, #16]
 8014ed2:	b363      	cbz	r3, 8014f2e <__swbuf_r+0x82>
 8014ed4:	6923      	ldr	r3, [r4, #16]
 8014ed6:	6820      	ldr	r0, [r4, #0]
 8014ed8:	1ac0      	subs	r0, r0, r3
 8014eda:	6963      	ldr	r3, [r4, #20]
 8014edc:	b2f6      	uxtb	r6, r6
 8014ede:	4283      	cmp	r3, r0
 8014ee0:	4637      	mov	r7, r6
 8014ee2:	dc04      	bgt.n	8014eee <__swbuf_r+0x42>
 8014ee4:	4621      	mov	r1, r4
 8014ee6:	4628      	mov	r0, r5
 8014ee8:	f000 ff8c 	bl	8015e04 <_fflush_r>
 8014eec:	bb28      	cbnz	r0, 8014f3a <__swbuf_r+0x8e>
 8014eee:	68a3      	ldr	r3, [r4, #8]
 8014ef0:	3b01      	subs	r3, #1
 8014ef2:	60a3      	str	r3, [r4, #8]
 8014ef4:	6823      	ldr	r3, [r4, #0]
 8014ef6:	1c5a      	adds	r2, r3, #1
 8014ef8:	6022      	str	r2, [r4, #0]
 8014efa:	701e      	strb	r6, [r3, #0]
 8014efc:	6963      	ldr	r3, [r4, #20]
 8014efe:	3001      	adds	r0, #1
 8014f00:	4283      	cmp	r3, r0
 8014f02:	d004      	beq.n	8014f0e <__swbuf_r+0x62>
 8014f04:	89a3      	ldrh	r3, [r4, #12]
 8014f06:	07db      	lsls	r3, r3, #31
 8014f08:	d519      	bpl.n	8014f3e <__swbuf_r+0x92>
 8014f0a:	2e0a      	cmp	r6, #10
 8014f0c:	d117      	bne.n	8014f3e <__swbuf_r+0x92>
 8014f0e:	4621      	mov	r1, r4
 8014f10:	4628      	mov	r0, r5
 8014f12:	f000 ff77 	bl	8015e04 <_fflush_r>
 8014f16:	b190      	cbz	r0, 8014f3e <__swbuf_r+0x92>
 8014f18:	e00f      	b.n	8014f3a <__swbuf_r+0x8e>
 8014f1a:	4b0b      	ldr	r3, [pc, #44]	; (8014f48 <__swbuf_r+0x9c>)
 8014f1c:	429c      	cmp	r4, r3
 8014f1e:	d101      	bne.n	8014f24 <__swbuf_r+0x78>
 8014f20:	68ac      	ldr	r4, [r5, #8]
 8014f22:	e7d0      	b.n	8014ec6 <__swbuf_r+0x1a>
 8014f24:	4b09      	ldr	r3, [pc, #36]	; (8014f4c <__swbuf_r+0xa0>)
 8014f26:	429c      	cmp	r4, r3
 8014f28:	bf08      	it	eq
 8014f2a:	68ec      	ldreq	r4, [r5, #12]
 8014f2c:	e7cb      	b.n	8014ec6 <__swbuf_r+0x1a>
 8014f2e:	4621      	mov	r1, r4
 8014f30:	4628      	mov	r0, r5
 8014f32:	f000 f81f 	bl	8014f74 <__swsetup_r>
 8014f36:	2800      	cmp	r0, #0
 8014f38:	d0cc      	beq.n	8014ed4 <__swbuf_r+0x28>
 8014f3a:	f04f 37ff 	mov.w	r7, #4294967295
 8014f3e:	4638      	mov	r0, r7
 8014f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f42:	bf00      	nop
 8014f44:	08018890 	.word	0x08018890
 8014f48:	080188b0 	.word	0x080188b0
 8014f4c:	08018870 	.word	0x08018870

08014f50 <_write_r>:
 8014f50:	b538      	push	{r3, r4, r5, lr}
 8014f52:	4c07      	ldr	r4, [pc, #28]	; (8014f70 <_write_r+0x20>)
 8014f54:	4605      	mov	r5, r0
 8014f56:	4608      	mov	r0, r1
 8014f58:	4611      	mov	r1, r2
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	6022      	str	r2, [r4, #0]
 8014f5e:	461a      	mov	r2, r3
 8014f60:	f7ef fa2d 	bl	80043be <_write>
 8014f64:	1c43      	adds	r3, r0, #1
 8014f66:	d102      	bne.n	8014f6e <_write_r+0x1e>
 8014f68:	6823      	ldr	r3, [r4, #0]
 8014f6a:	b103      	cbz	r3, 8014f6e <_write_r+0x1e>
 8014f6c:	602b      	str	r3, [r5, #0]
 8014f6e:	bd38      	pop	{r3, r4, r5, pc}
 8014f70:	20037fac 	.word	0x20037fac

08014f74 <__swsetup_r>:
 8014f74:	4b32      	ldr	r3, [pc, #200]	; (8015040 <__swsetup_r+0xcc>)
 8014f76:	b570      	push	{r4, r5, r6, lr}
 8014f78:	681d      	ldr	r5, [r3, #0]
 8014f7a:	4606      	mov	r6, r0
 8014f7c:	460c      	mov	r4, r1
 8014f7e:	b125      	cbz	r5, 8014f8a <__swsetup_r+0x16>
 8014f80:	69ab      	ldr	r3, [r5, #24]
 8014f82:	b913      	cbnz	r3, 8014f8a <__swsetup_r+0x16>
 8014f84:	4628      	mov	r0, r5
 8014f86:	f000 ffa7 	bl	8015ed8 <__sinit>
 8014f8a:	4b2e      	ldr	r3, [pc, #184]	; (8015044 <__swsetup_r+0xd0>)
 8014f8c:	429c      	cmp	r4, r3
 8014f8e:	d10f      	bne.n	8014fb0 <__swsetup_r+0x3c>
 8014f90:	686c      	ldr	r4, [r5, #4]
 8014f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f96:	b29a      	uxth	r2, r3
 8014f98:	0715      	lsls	r5, r2, #28
 8014f9a:	d42c      	bmi.n	8014ff6 <__swsetup_r+0x82>
 8014f9c:	06d0      	lsls	r0, r2, #27
 8014f9e:	d411      	bmi.n	8014fc4 <__swsetup_r+0x50>
 8014fa0:	2209      	movs	r2, #9
 8014fa2:	6032      	str	r2, [r6, #0]
 8014fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014fa8:	81a3      	strh	r3, [r4, #12]
 8014faa:	f04f 30ff 	mov.w	r0, #4294967295
 8014fae:	e03e      	b.n	801502e <__swsetup_r+0xba>
 8014fb0:	4b25      	ldr	r3, [pc, #148]	; (8015048 <__swsetup_r+0xd4>)
 8014fb2:	429c      	cmp	r4, r3
 8014fb4:	d101      	bne.n	8014fba <__swsetup_r+0x46>
 8014fb6:	68ac      	ldr	r4, [r5, #8]
 8014fb8:	e7eb      	b.n	8014f92 <__swsetup_r+0x1e>
 8014fba:	4b24      	ldr	r3, [pc, #144]	; (801504c <__swsetup_r+0xd8>)
 8014fbc:	429c      	cmp	r4, r3
 8014fbe:	bf08      	it	eq
 8014fc0:	68ec      	ldreq	r4, [r5, #12]
 8014fc2:	e7e6      	b.n	8014f92 <__swsetup_r+0x1e>
 8014fc4:	0751      	lsls	r1, r2, #29
 8014fc6:	d512      	bpl.n	8014fee <__swsetup_r+0x7a>
 8014fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014fca:	b141      	cbz	r1, 8014fde <__swsetup_r+0x6a>
 8014fcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014fd0:	4299      	cmp	r1, r3
 8014fd2:	d002      	beq.n	8014fda <__swsetup_r+0x66>
 8014fd4:	4630      	mov	r0, r6
 8014fd6:	f001 ffef 	bl	8016fb8 <_free_r>
 8014fda:	2300      	movs	r3, #0
 8014fdc:	6363      	str	r3, [r4, #52]	; 0x34
 8014fde:	89a3      	ldrh	r3, [r4, #12]
 8014fe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014fe4:	81a3      	strh	r3, [r4, #12]
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	6063      	str	r3, [r4, #4]
 8014fea:	6923      	ldr	r3, [r4, #16]
 8014fec:	6023      	str	r3, [r4, #0]
 8014fee:	89a3      	ldrh	r3, [r4, #12]
 8014ff0:	f043 0308 	orr.w	r3, r3, #8
 8014ff4:	81a3      	strh	r3, [r4, #12]
 8014ff6:	6923      	ldr	r3, [r4, #16]
 8014ff8:	b94b      	cbnz	r3, 801500e <__swsetup_r+0x9a>
 8014ffa:	89a3      	ldrh	r3, [r4, #12]
 8014ffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015004:	d003      	beq.n	801500e <__swsetup_r+0x9a>
 8015006:	4621      	mov	r1, r4
 8015008:	4630      	mov	r0, r6
 801500a:	f001 fb6d 	bl	80166e8 <__smakebuf_r>
 801500e:	89a2      	ldrh	r2, [r4, #12]
 8015010:	f012 0301 	ands.w	r3, r2, #1
 8015014:	d00c      	beq.n	8015030 <__swsetup_r+0xbc>
 8015016:	2300      	movs	r3, #0
 8015018:	60a3      	str	r3, [r4, #8]
 801501a:	6963      	ldr	r3, [r4, #20]
 801501c:	425b      	negs	r3, r3
 801501e:	61a3      	str	r3, [r4, #24]
 8015020:	6923      	ldr	r3, [r4, #16]
 8015022:	b953      	cbnz	r3, 801503a <__swsetup_r+0xc6>
 8015024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015028:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801502c:	d1ba      	bne.n	8014fa4 <__swsetup_r+0x30>
 801502e:	bd70      	pop	{r4, r5, r6, pc}
 8015030:	0792      	lsls	r2, r2, #30
 8015032:	bf58      	it	pl
 8015034:	6963      	ldrpl	r3, [r4, #20]
 8015036:	60a3      	str	r3, [r4, #8]
 8015038:	e7f2      	b.n	8015020 <__swsetup_r+0xac>
 801503a:	2000      	movs	r0, #0
 801503c:	e7f7      	b.n	801502e <__swsetup_r+0xba>
 801503e:	bf00      	nop
 8015040:	2000000c 	.word	0x2000000c
 8015044:	08018890 	.word	0x08018890
 8015048:	080188b0 	.word	0x080188b0
 801504c:	08018870 	.word	0x08018870

08015050 <_close_r>:
 8015050:	b538      	push	{r3, r4, r5, lr}
 8015052:	4c06      	ldr	r4, [pc, #24]	; (801506c <_close_r+0x1c>)
 8015054:	2300      	movs	r3, #0
 8015056:	4605      	mov	r5, r0
 8015058:	4608      	mov	r0, r1
 801505a:	6023      	str	r3, [r4, #0]
 801505c:	f7f0 ff13 	bl	8005e86 <_close>
 8015060:	1c43      	adds	r3, r0, #1
 8015062:	d102      	bne.n	801506a <_close_r+0x1a>
 8015064:	6823      	ldr	r3, [r4, #0]
 8015066:	b103      	cbz	r3, 801506a <_close_r+0x1a>
 8015068:	602b      	str	r3, [r5, #0]
 801506a:	bd38      	pop	{r3, r4, r5, pc}
 801506c:	20037fac 	.word	0x20037fac

08015070 <quorem>:
 8015070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015074:	6903      	ldr	r3, [r0, #16]
 8015076:	690c      	ldr	r4, [r1, #16]
 8015078:	42a3      	cmp	r3, r4
 801507a:	4680      	mov	r8, r0
 801507c:	f2c0 8082 	blt.w	8015184 <quorem+0x114>
 8015080:	3c01      	subs	r4, #1
 8015082:	f101 0714 	add.w	r7, r1, #20
 8015086:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801508a:	f100 0614 	add.w	r6, r0, #20
 801508e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8015092:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015096:	eb06 030c 	add.w	r3, r6, ip
 801509a:	3501      	adds	r5, #1
 801509c:	eb07 090c 	add.w	r9, r7, ip
 80150a0:	9301      	str	r3, [sp, #4]
 80150a2:	fbb0 f5f5 	udiv	r5, r0, r5
 80150a6:	b395      	cbz	r5, 801510e <quorem+0x9e>
 80150a8:	f04f 0a00 	mov.w	sl, #0
 80150ac:	4638      	mov	r0, r7
 80150ae:	46b6      	mov	lr, r6
 80150b0:	46d3      	mov	fp, sl
 80150b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80150b6:	b293      	uxth	r3, r2
 80150b8:	fb05 a303 	mla	r3, r5, r3, sl
 80150bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80150c0:	b29b      	uxth	r3, r3
 80150c2:	ebab 0303 	sub.w	r3, fp, r3
 80150c6:	0c12      	lsrs	r2, r2, #16
 80150c8:	f8de b000 	ldr.w	fp, [lr]
 80150cc:	fb05 a202 	mla	r2, r5, r2, sl
 80150d0:	fa13 f38b 	uxtah	r3, r3, fp
 80150d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80150d8:	fa1f fb82 	uxth.w	fp, r2
 80150dc:	f8de 2000 	ldr.w	r2, [lr]
 80150e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80150e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80150e8:	b29b      	uxth	r3, r3
 80150ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80150ee:	4581      	cmp	r9, r0
 80150f0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80150f4:	f84e 3b04 	str.w	r3, [lr], #4
 80150f8:	d2db      	bcs.n	80150b2 <quorem+0x42>
 80150fa:	f856 300c 	ldr.w	r3, [r6, ip]
 80150fe:	b933      	cbnz	r3, 801510e <quorem+0x9e>
 8015100:	9b01      	ldr	r3, [sp, #4]
 8015102:	3b04      	subs	r3, #4
 8015104:	429e      	cmp	r6, r3
 8015106:	461a      	mov	r2, r3
 8015108:	d330      	bcc.n	801516c <quorem+0xfc>
 801510a:	f8c8 4010 	str.w	r4, [r8, #16]
 801510e:	4640      	mov	r0, r8
 8015110:	f001 fd98 	bl	8016c44 <__mcmp>
 8015114:	2800      	cmp	r0, #0
 8015116:	db25      	blt.n	8015164 <quorem+0xf4>
 8015118:	3501      	adds	r5, #1
 801511a:	4630      	mov	r0, r6
 801511c:	f04f 0c00 	mov.w	ip, #0
 8015120:	f857 2b04 	ldr.w	r2, [r7], #4
 8015124:	f8d0 e000 	ldr.w	lr, [r0]
 8015128:	b293      	uxth	r3, r2
 801512a:	ebac 0303 	sub.w	r3, ip, r3
 801512e:	0c12      	lsrs	r2, r2, #16
 8015130:	fa13 f38e 	uxtah	r3, r3, lr
 8015134:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015138:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801513c:	b29b      	uxth	r3, r3
 801513e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015142:	45b9      	cmp	r9, r7
 8015144:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015148:	f840 3b04 	str.w	r3, [r0], #4
 801514c:	d2e8      	bcs.n	8015120 <quorem+0xb0>
 801514e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8015152:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015156:	b92a      	cbnz	r2, 8015164 <quorem+0xf4>
 8015158:	3b04      	subs	r3, #4
 801515a:	429e      	cmp	r6, r3
 801515c:	461a      	mov	r2, r3
 801515e:	d30b      	bcc.n	8015178 <quorem+0x108>
 8015160:	f8c8 4010 	str.w	r4, [r8, #16]
 8015164:	4628      	mov	r0, r5
 8015166:	b003      	add	sp, #12
 8015168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801516c:	6812      	ldr	r2, [r2, #0]
 801516e:	3b04      	subs	r3, #4
 8015170:	2a00      	cmp	r2, #0
 8015172:	d1ca      	bne.n	801510a <quorem+0x9a>
 8015174:	3c01      	subs	r4, #1
 8015176:	e7c5      	b.n	8015104 <quorem+0x94>
 8015178:	6812      	ldr	r2, [r2, #0]
 801517a:	3b04      	subs	r3, #4
 801517c:	2a00      	cmp	r2, #0
 801517e:	d1ef      	bne.n	8015160 <quorem+0xf0>
 8015180:	3c01      	subs	r4, #1
 8015182:	e7ea      	b.n	801515a <quorem+0xea>
 8015184:	2000      	movs	r0, #0
 8015186:	e7ee      	b.n	8015166 <quorem+0xf6>

08015188 <_dtoa_r>:
 8015188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801518c:	ec57 6b10 	vmov	r6, r7, d0
 8015190:	b097      	sub	sp, #92	; 0x5c
 8015192:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015194:	9106      	str	r1, [sp, #24]
 8015196:	4604      	mov	r4, r0
 8015198:	920b      	str	r2, [sp, #44]	; 0x2c
 801519a:	9312      	str	r3, [sp, #72]	; 0x48
 801519c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80151a0:	e9cd 6700 	strd	r6, r7, [sp]
 80151a4:	b93d      	cbnz	r5, 80151b6 <_dtoa_r+0x2e>
 80151a6:	2010      	movs	r0, #16
 80151a8:	f001 fade 	bl	8016768 <malloc>
 80151ac:	6260      	str	r0, [r4, #36]	; 0x24
 80151ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80151b2:	6005      	str	r5, [r0, #0]
 80151b4:	60c5      	str	r5, [r0, #12]
 80151b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151b8:	6819      	ldr	r1, [r3, #0]
 80151ba:	b151      	cbz	r1, 80151d2 <_dtoa_r+0x4a>
 80151bc:	685a      	ldr	r2, [r3, #4]
 80151be:	604a      	str	r2, [r1, #4]
 80151c0:	2301      	movs	r3, #1
 80151c2:	4093      	lsls	r3, r2
 80151c4:	608b      	str	r3, [r1, #8]
 80151c6:	4620      	mov	r0, r4
 80151c8:	f001 fb1c 	bl	8016804 <_Bfree>
 80151cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151ce:	2200      	movs	r2, #0
 80151d0:	601a      	str	r2, [r3, #0]
 80151d2:	1e3b      	subs	r3, r7, #0
 80151d4:	bfbb      	ittet	lt
 80151d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80151da:	9301      	strlt	r3, [sp, #4]
 80151dc:	2300      	movge	r3, #0
 80151de:	2201      	movlt	r2, #1
 80151e0:	bfac      	ite	ge
 80151e2:	f8c8 3000 	strge.w	r3, [r8]
 80151e6:	f8c8 2000 	strlt.w	r2, [r8]
 80151ea:	4baf      	ldr	r3, [pc, #700]	; (80154a8 <_dtoa_r+0x320>)
 80151ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80151f0:	ea33 0308 	bics.w	r3, r3, r8
 80151f4:	d114      	bne.n	8015220 <_dtoa_r+0x98>
 80151f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80151fc:	6013      	str	r3, [r2, #0]
 80151fe:	9b00      	ldr	r3, [sp, #0]
 8015200:	b923      	cbnz	r3, 801520c <_dtoa_r+0x84>
 8015202:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015206:	2800      	cmp	r0, #0
 8015208:	f000 8542 	beq.w	8015c90 <_dtoa_r+0xb08>
 801520c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801520e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80154bc <_dtoa_r+0x334>
 8015212:	2b00      	cmp	r3, #0
 8015214:	f000 8544 	beq.w	8015ca0 <_dtoa_r+0xb18>
 8015218:	f10b 0303 	add.w	r3, fp, #3
 801521c:	f000 bd3e 	b.w	8015c9c <_dtoa_r+0xb14>
 8015220:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015224:	2200      	movs	r2, #0
 8015226:	2300      	movs	r3, #0
 8015228:	4630      	mov	r0, r6
 801522a:	4639      	mov	r1, r7
 801522c:	f7eb fc64 	bl	8000af8 <__aeabi_dcmpeq>
 8015230:	4681      	mov	r9, r0
 8015232:	b168      	cbz	r0, 8015250 <_dtoa_r+0xc8>
 8015234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015236:	2301      	movs	r3, #1
 8015238:	6013      	str	r3, [r2, #0]
 801523a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801523c:	2b00      	cmp	r3, #0
 801523e:	f000 8524 	beq.w	8015c8a <_dtoa_r+0xb02>
 8015242:	4b9a      	ldr	r3, [pc, #616]	; (80154ac <_dtoa_r+0x324>)
 8015244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015246:	f103 3bff 	add.w	fp, r3, #4294967295
 801524a:	6013      	str	r3, [r2, #0]
 801524c:	f000 bd28 	b.w	8015ca0 <_dtoa_r+0xb18>
 8015250:	aa14      	add	r2, sp, #80	; 0x50
 8015252:	a915      	add	r1, sp, #84	; 0x54
 8015254:	ec47 6b10 	vmov	d0, r6, r7
 8015258:	4620      	mov	r0, r4
 801525a:	f001 fde1 	bl	8016e20 <__d2b>
 801525e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015262:	9004      	str	r0, [sp, #16]
 8015264:	2d00      	cmp	r5, #0
 8015266:	d07c      	beq.n	8015362 <_dtoa_r+0x1da>
 8015268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801526c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015270:	46b2      	mov	sl, r6
 8015272:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8015276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801527a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801527e:	2200      	movs	r2, #0
 8015280:	4b8b      	ldr	r3, [pc, #556]	; (80154b0 <_dtoa_r+0x328>)
 8015282:	4650      	mov	r0, sl
 8015284:	4659      	mov	r1, fp
 8015286:	f7eb f817 	bl	80002b8 <__aeabi_dsub>
 801528a:	a381      	add	r3, pc, #516	; (adr r3, 8015490 <_dtoa_r+0x308>)
 801528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015290:	f7eb f9ca 	bl	8000628 <__aeabi_dmul>
 8015294:	a380      	add	r3, pc, #512	; (adr r3, 8015498 <_dtoa_r+0x310>)
 8015296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801529a:	f7eb f80f 	bl	80002bc <__adddf3>
 801529e:	4606      	mov	r6, r0
 80152a0:	4628      	mov	r0, r5
 80152a2:	460f      	mov	r7, r1
 80152a4:	f7eb f956 	bl	8000554 <__aeabi_i2d>
 80152a8:	a37d      	add	r3, pc, #500	; (adr r3, 80154a0 <_dtoa_r+0x318>)
 80152aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152ae:	f7eb f9bb 	bl	8000628 <__aeabi_dmul>
 80152b2:	4602      	mov	r2, r0
 80152b4:	460b      	mov	r3, r1
 80152b6:	4630      	mov	r0, r6
 80152b8:	4639      	mov	r1, r7
 80152ba:	f7ea ffff 	bl	80002bc <__adddf3>
 80152be:	4606      	mov	r6, r0
 80152c0:	460f      	mov	r7, r1
 80152c2:	f7eb fc61 	bl	8000b88 <__aeabi_d2iz>
 80152c6:	2200      	movs	r2, #0
 80152c8:	4682      	mov	sl, r0
 80152ca:	2300      	movs	r3, #0
 80152cc:	4630      	mov	r0, r6
 80152ce:	4639      	mov	r1, r7
 80152d0:	f7eb fc1c 	bl	8000b0c <__aeabi_dcmplt>
 80152d4:	b148      	cbz	r0, 80152ea <_dtoa_r+0x162>
 80152d6:	4650      	mov	r0, sl
 80152d8:	f7eb f93c 	bl	8000554 <__aeabi_i2d>
 80152dc:	4632      	mov	r2, r6
 80152de:	463b      	mov	r3, r7
 80152e0:	f7eb fc0a 	bl	8000af8 <__aeabi_dcmpeq>
 80152e4:	b908      	cbnz	r0, 80152ea <_dtoa_r+0x162>
 80152e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80152ea:	f1ba 0f16 	cmp.w	sl, #22
 80152ee:	d859      	bhi.n	80153a4 <_dtoa_r+0x21c>
 80152f0:	4970      	ldr	r1, [pc, #448]	; (80154b4 <_dtoa_r+0x32c>)
 80152f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80152f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152fe:	f7eb fc23 	bl	8000b48 <__aeabi_dcmpgt>
 8015302:	2800      	cmp	r0, #0
 8015304:	d050      	beq.n	80153a8 <_dtoa_r+0x220>
 8015306:	f10a 3aff 	add.w	sl, sl, #4294967295
 801530a:	2300      	movs	r3, #0
 801530c:	930f      	str	r3, [sp, #60]	; 0x3c
 801530e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015310:	1b5d      	subs	r5, r3, r5
 8015312:	f1b5 0801 	subs.w	r8, r5, #1
 8015316:	bf49      	itett	mi
 8015318:	f1c5 0301 	rsbmi	r3, r5, #1
 801531c:	2300      	movpl	r3, #0
 801531e:	9305      	strmi	r3, [sp, #20]
 8015320:	f04f 0800 	movmi.w	r8, #0
 8015324:	bf58      	it	pl
 8015326:	9305      	strpl	r3, [sp, #20]
 8015328:	f1ba 0f00 	cmp.w	sl, #0
 801532c:	db3e      	blt.n	80153ac <_dtoa_r+0x224>
 801532e:	2300      	movs	r3, #0
 8015330:	44d0      	add	r8, sl
 8015332:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015336:	9307      	str	r3, [sp, #28]
 8015338:	9b06      	ldr	r3, [sp, #24]
 801533a:	2b09      	cmp	r3, #9
 801533c:	f200 8090 	bhi.w	8015460 <_dtoa_r+0x2d8>
 8015340:	2b05      	cmp	r3, #5
 8015342:	bfc4      	itt	gt
 8015344:	3b04      	subgt	r3, #4
 8015346:	9306      	strgt	r3, [sp, #24]
 8015348:	9b06      	ldr	r3, [sp, #24]
 801534a:	f1a3 0302 	sub.w	r3, r3, #2
 801534e:	bfcc      	ite	gt
 8015350:	2500      	movgt	r5, #0
 8015352:	2501      	movle	r5, #1
 8015354:	2b03      	cmp	r3, #3
 8015356:	f200 808f 	bhi.w	8015478 <_dtoa_r+0x2f0>
 801535a:	e8df f003 	tbb	[pc, r3]
 801535e:	7f7d      	.short	0x7f7d
 8015360:	7131      	.short	0x7131
 8015362:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8015366:	441d      	add	r5, r3
 8015368:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801536c:	2820      	cmp	r0, #32
 801536e:	dd13      	ble.n	8015398 <_dtoa_r+0x210>
 8015370:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8015374:	9b00      	ldr	r3, [sp, #0]
 8015376:	fa08 f800 	lsl.w	r8, r8, r0
 801537a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801537e:	fa23 f000 	lsr.w	r0, r3, r0
 8015382:	ea48 0000 	orr.w	r0, r8, r0
 8015386:	f7eb f8d5 	bl	8000534 <__aeabi_ui2d>
 801538a:	2301      	movs	r3, #1
 801538c:	4682      	mov	sl, r0
 801538e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015392:	3d01      	subs	r5, #1
 8015394:	9313      	str	r3, [sp, #76]	; 0x4c
 8015396:	e772      	b.n	801527e <_dtoa_r+0xf6>
 8015398:	9b00      	ldr	r3, [sp, #0]
 801539a:	f1c0 0020 	rsb	r0, r0, #32
 801539e:	fa03 f000 	lsl.w	r0, r3, r0
 80153a2:	e7f0      	b.n	8015386 <_dtoa_r+0x1fe>
 80153a4:	2301      	movs	r3, #1
 80153a6:	e7b1      	b.n	801530c <_dtoa_r+0x184>
 80153a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80153aa:	e7b0      	b.n	801530e <_dtoa_r+0x186>
 80153ac:	9b05      	ldr	r3, [sp, #20]
 80153ae:	eba3 030a 	sub.w	r3, r3, sl
 80153b2:	9305      	str	r3, [sp, #20]
 80153b4:	f1ca 0300 	rsb	r3, sl, #0
 80153b8:	9307      	str	r3, [sp, #28]
 80153ba:	2300      	movs	r3, #0
 80153bc:	930e      	str	r3, [sp, #56]	; 0x38
 80153be:	e7bb      	b.n	8015338 <_dtoa_r+0x1b0>
 80153c0:	2301      	movs	r3, #1
 80153c2:	930a      	str	r3, [sp, #40]	; 0x28
 80153c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	dd59      	ble.n	801547e <_dtoa_r+0x2f6>
 80153ca:	9302      	str	r3, [sp, #8]
 80153cc:	4699      	mov	r9, r3
 80153ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80153d0:	2200      	movs	r2, #0
 80153d2:	6072      	str	r2, [r6, #4]
 80153d4:	2204      	movs	r2, #4
 80153d6:	f102 0014 	add.w	r0, r2, #20
 80153da:	4298      	cmp	r0, r3
 80153dc:	6871      	ldr	r1, [r6, #4]
 80153de:	d953      	bls.n	8015488 <_dtoa_r+0x300>
 80153e0:	4620      	mov	r0, r4
 80153e2:	f001 f9db 	bl	801679c <_Balloc>
 80153e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153e8:	6030      	str	r0, [r6, #0]
 80153ea:	f1b9 0f0e 	cmp.w	r9, #14
 80153ee:	f8d3 b000 	ldr.w	fp, [r3]
 80153f2:	f200 80e6 	bhi.w	80155c2 <_dtoa_r+0x43a>
 80153f6:	2d00      	cmp	r5, #0
 80153f8:	f000 80e3 	beq.w	80155c2 <_dtoa_r+0x43a>
 80153fc:	ed9d 7b00 	vldr	d7, [sp]
 8015400:	f1ba 0f00 	cmp.w	sl, #0
 8015404:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015408:	dd74      	ble.n	80154f4 <_dtoa_r+0x36c>
 801540a:	4a2a      	ldr	r2, [pc, #168]	; (80154b4 <_dtoa_r+0x32c>)
 801540c:	f00a 030f 	and.w	r3, sl, #15
 8015410:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015414:	ed93 7b00 	vldr	d7, [r3]
 8015418:	ea4f 162a 	mov.w	r6, sl, asr #4
 801541c:	06f0      	lsls	r0, r6, #27
 801541e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015422:	d565      	bpl.n	80154f0 <_dtoa_r+0x368>
 8015424:	4b24      	ldr	r3, [pc, #144]	; (80154b8 <_dtoa_r+0x330>)
 8015426:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801542a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801542e:	f7eb fa25 	bl	800087c <__aeabi_ddiv>
 8015432:	e9cd 0100 	strd	r0, r1, [sp]
 8015436:	f006 060f 	and.w	r6, r6, #15
 801543a:	2503      	movs	r5, #3
 801543c:	4f1e      	ldr	r7, [pc, #120]	; (80154b8 <_dtoa_r+0x330>)
 801543e:	e04c      	b.n	80154da <_dtoa_r+0x352>
 8015440:	2301      	movs	r3, #1
 8015442:	930a      	str	r3, [sp, #40]	; 0x28
 8015444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015446:	4453      	add	r3, sl
 8015448:	f103 0901 	add.w	r9, r3, #1
 801544c:	9302      	str	r3, [sp, #8]
 801544e:	464b      	mov	r3, r9
 8015450:	2b01      	cmp	r3, #1
 8015452:	bfb8      	it	lt
 8015454:	2301      	movlt	r3, #1
 8015456:	e7ba      	b.n	80153ce <_dtoa_r+0x246>
 8015458:	2300      	movs	r3, #0
 801545a:	e7b2      	b.n	80153c2 <_dtoa_r+0x23a>
 801545c:	2300      	movs	r3, #0
 801545e:	e7f0      	b.n	8015442 <_dtoa_r+0x2ba>
 8015460:	2501      	movs	r5, #1
 8015462:	2300      	movs	r3, #0
 8015464:	9306      	str	r3, [sp, #24]
 8015466:	950a      	str	r5, [sp, #40]	; 0x28
 8015468:	f04f 33ff 	mov.w	r3, #4294967295
 801546c:	9302      	str	r3, [sp, #8]
 801546e:	4699      	mov	r9, r3
 8015470:	2200      	movs	r2, #0
 8015472:	2312      	movs	r3, #18
 8015474:	920b      	str	r2, [sp, #44]	; 0x2c
 8015476:	e7aa      	b.n	80153ce <_dtoa_r+0x246>
 8015478:	2301      	movs	r3, #1
 801547a:	930a      	str	r3, [sp, #40]	; 0x28
 801547c:	e7f4      	b.n	8015468 <_dtoa_r+0x2e0>
 801547e:	2301      	movs	r3, #1
 8015480:	9302      	str	r3, [sp, #8]
 8015482:	4699      	mov	r9, r3
 8015484:	461a      	mov	r2, r3
 8015486:	e7f5      	b.n	8015474 <_dtoa_r+0x2ec>
 8015488:	3101      	adds	r1, #1
 801548a:	6071      	str	r1, [r6, #4]
 801548c:	0052      	lsls	r2, r2, #1
 801548e:	e7a2      	b.n	80153d6 <_dtoa_r+0x24e>
 8015490:	636f4361 	.word	0x636f4361
 8015494:	3fd287a7 	.word	0x3fd287a7
 8015498:	8b60c8b3 	.word	0x8b60c8b3
 801549c:	3fc68a28 	.word	0x3fc68a28
 80154a0:	509f79fb 	.word	0x509f79fb
 80154a4:	3fd34413 	.word	0x3fd34413
 80154a8:	7ff00000 	.word	0x7ff00000
 80154ac:	08018a04 	.word	0x08018a04
 80154b0:	3ff80000 	.word	0x3ff80000
 80154b4:	08018908 	.word	0x08018908
 80154b8:	080188e0 	.word	0x080188e0
 80154bc:	08018869 	.word	0x08018869
 80154c0:	07f1      	lsls	r1, r6, #31
 80154c2:	d508      	bpl.n	80154d6 <_dtoa_r+0x34e>
 80154c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80154c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80154cc:	f7eb f8ac 	bl	8000628 <__aeabi_dmul>
 80154d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80154d4:	3501      	adds	r5, #1
 80154d6:	1076      	asrs	r6, r6, #1
 80154d8:	3708      	adds	r7, #8
 80154da:	2e00      	cmp	r6, #0
 80154dc:	d1f0      	bne.n	80154c0 <_dtoa_r+0x338>
 80154de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80154e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154e6:	f7eb f9c9 	bl	800087c <__aeabi_ddiv>
 80154ea:	e9cd 0100 	strd	r0, r1, [sp]
 80154ee:	e01a      	b.n	8015526 <_dtoa_r+0x39e>
 80154f0:	2502      	movs	r5, #2
 80154f2:	e7a3      	b.n	801543c <_dtoa_r+0x2b4>
 80154f4:	f000 80a0 	beq.w	8015638 <_dtoa_r+0x4b0>
 80154f8:	f1ca 0600 	rsb	r6, sl, #0
 80154fc:	4b9f      	ldr	r3, [pc, #636]	; (801577c <_dtoa_r+0x5f4>)
 80154fe:	4fa0      	ldr	r7, [pc, #640]	; (8015780 <_dtoa_r+0x5f8>)
 8015500:	f006 020f 	and.w	r2, r6, #15
 8015504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801550c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015510:	f7eb f88a 	bl	8000628 <__aeabi_dmul>
 8015514:	e9cd 0100 	strd	r0, r1, [sp]
 8015518:	1136      	asrs	r6, r6, #4
 801551a:	2300      	movs	r3, #0
 801551c:	2502      	movs	r5, #2
 801551e:	2e00      	cmp	r6, #0
 8015520:	d17f      	bne.n	8015622 <_dtoa_r+0x49a>
 8015522:	2b00      	cmp	r3, #0
 8015524:	d1e1      	bne.n	80154ea <_dtoa_r+0x362>
 8015526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015528:	2b00      	cmp	r3, #0
 801552a:	f000 8087 	beq.w	801563c <_dtoa_r+0x4b4>
 801552e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015532:	2200      	movs	r2, #0
 8015534:	4b93      	ldr	r3, [pc, #588]	; (8015784 <_dtoa_r+0x5fc>)
 8015536:	4630      	mov	r0, r6
 8015538:	4639      	mov	r1, r7
 801553a:	f7eb fae7 	bl	8000b0c <__aeabi_dcmplt>
 801553e:	2800      	cmp	r0, #0
 8015540:	d07c      	beq.n	801563c <_dtoa_r+0x4b4>
 8015542:	f1b9 0f00 	cmp.w	r9, #0
 8015546:	d079      	beq.n	801563c <_dtoa_r+0x4b4>
 8015548:	9b02      	ldr	r3, [sp, #8]
 801554a:	2b00      	cmp	r3, #0
 801554c:	dd35      	ble.n	80155ba <_dtoa_r+0x432>
 801554e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015552:	9308      	str	r3, [sp, #32]
 8015554:	4639      	mov	r1, r7
 8015556:	2200      	movs	r2, #0
 8015558:	4b8b      	ldr	r3, [pc, #556]	; (8015788 <_dtoa_r+0x600>)
 801555a:	4630      	mov	r0, r6
 801555c:	f7eb f864 	bl	8000628 <__aeabi_dmul>
 8015560:	e9cd 0100 	strd	r0, r1, [sp]
 8015564:	9f02      	ldr	r7, [sp, #8]
 8015566:	3501      	adds	r5, #1
 8015568:	4628      	mov	r0, r5
 801556a:	f7ea fff3 	bl	8000554 <__aeabi_i2d>
 801556e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015572:	f7eb f859 	bl	8000628 <__aeabi_dmul>
 8015576:	2200      	movs	r2, #0
 8015578:	4b84      	ldr	r3, [pc, #528]	; (801578c <_dtoa_r+0x604>)
 801557a:	f7ea fe9f 	bl	80002bc <__adddf3>
 801557e:	4605      	mov	r5, r0
 8015580:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015584:	2f00      	cmp	r7, #0
 8015586:	d15d      	bne.n	8015644 <_dtoa_r+0x4bc>
 8015588:	2200      	movs	r2, #0
 801558a:	4b81      	ldr	r3, [pc, #516]	; (8015790 <_dtoa_r+0x608>)
 801558c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015590:	f7ea fe92 	bl	80002b8 <__aeabi_dsub>
 8015594:	462a      	mov	r2, r5
 8015596:	4633      	mov	r3, r6
 8015598:	e9cd 0100 	strd	r0, r1, [sp]
 801559c:	f7eb fad4 	bl	8000b48 <__aeabi_dcmpgt>
 80155a0:	2800      	cmp	r0, #0
 80155a2:	f040 8288 	bne.w	8015ab6 <_dtoa_r+0x92e>
 80155a6:	462a      	mov	r2, r5
 80155a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80155ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155b0:	f7eb faac 	bl	8000b0c <__aeabi_dcmplt>
 80155b4:	2800      	cmp	r0, #0
 80155b6:	f040 827c 	bne.w	8015ab2 <_dtoa_r+0x92a>
 80155ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80155be:	e9cd 2300 	strd	r2, r3, [sp]
 80155c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	f2c0 8150 	blt.w	801586a <_dtoa_r+0x6e2>
 80155ca:	f1ba 0f0e 	cmp.w	sl, #14
 80155ce:	f300 814c 	bgt.w	801586a <_dtoa_r+0x6e2>
 80155d2:	4b6a      	ldr	r3, [pc, #424]	; (801577c <_dtoa_r+0x5f4>)
 80155d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80155d8:	ed93 7b00 	vldr	d7, [r3]
 80155dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155de:	2b00      	cmp	r3, #0
 80155e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80155e4:	f280 80d8 	bge.w	8015798 <_dtoa_r+0x610>
 80155e8:	f1b9 0f00 	cmp.w	r9, #0
 80155ec:	f300 80d4 	bgt.w	8015798 <_dtoa_r+0x610>
 80155f0:	f040 825e 	bne.w	8015ab0 <_dtoa_r+0x928>
 80155f4:	2200      	movs	r2, #0
 80155f6:	4b66      	ldr	r3, [pc, #408]	; (8015790 <_dtoa_r+0x608>)
 80155f8:	ec51 0b17 	vmov	r0, r1, d7
 80155fc:	f7eb f814 	bl	8000628 <__aeabi_dmul>
 8015600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015604:	f7eb fa96 	bl	8000b34 <__aeabi_dcmpge>
 8015608:	464f      	mov	r7, r9
 801560a:	464e      	mov	r6, r9
 801560c:	2800      	cmp	r0, #0
 801560e:	f040 8234 	bne.w	8015a7a <_dtoa_r+0x8f2>
 8015612:	2331      	movs	r3, #49	; 0x31
 8015614:	f10b 0501 	add.w	r5, fp, #1
 8015618:	f88b 3000 	strb.w	r3, [fp]
 801561c:	f10a 0a01 	add.w	sl, sl, #1
 8015620:	e22f      	b.n	8015a82 <_dtoa_r+0x8fa>
 8015622:	07f2      	lsls	r2, r6, #31
 8015624:	d505      	bpl.n	8015632 <_dtoa_r+0x4aa>
 8015626:	e9d7 2300 	ldrd	r2, r3, [r7]
 801562a:	f7ea fffd 	bl	8000628 <__aeabi_dmul>
 801562e:	3501      	adds	r5, #1
 8015630:	2301      	movs	r3, #1
 8015632:	1076      	asrs	r6, r6, #1
 8015634:	3708      	adds	r7, #8
 8015636:	e772      	b.n	801551e <_dtoa_r+0x396>
 8015638:	2502      	movs	r5, #2
 801563a:	e774      	b.n	8015526 <_dtoa_r+0x39e>
 801563c:	f8cd a020 	str.w	sl, [sp, #32]
 8015640:	464f      	mov	r7, r9
 8015642:	e791      	b.n	8015568 <_dtoa_r+0x3e0>
 8015644:	4b4d      	ldr	r3, [pc, #308]	; (801577c <_dtoa_r+0x5f4>)
 8015646:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801564a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801564e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015650:	2b00      	cmp	r3, #0
 8015652:	d047      	beq.n	80156e4 <_dtoa_r+0x55c>
 8015654:	4602      	mov	r2, r0
 8015656:	460b      	mov	r3, r1
 8015658:	2000      	movs	r0, #0
 801565a:	494e      	ldr	r1, [pc, #312]	; (8015794 <_dtoa_r+0x60c>)
 801565c:	f7eb f90e 	bl	800087c <__aeabi_ddiv>
 8015660:	462a      	mov	r2, r5
 8015662:	4633      	mov	r3, r6
 8015664:	f7ea fe28 	bl	80002b8 <__aeabi_dsub>
 8015668:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801566c:	465d      	mov	r5, fp
 801566e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015672:	f7eb fa89 	bl	8000b88 <__aeabi_d2iz>
 8015676:	4606      	mov	r6, r0
 8015678:	f7ea ff6c 	bl	8000554 <__aeabi_i2d>
 801567c:	4602      	mov	r2, r0
 801567e:	460b      	mov	r3, r1
 8015680:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015684:	f7ea fe18 	bl	80002b8 <__aeabi_dsub>
 8015688:	3630      	adds	r6, #48	; 0x30
 801568a:	f805 6b01 	strb.w	r6, [r5], #1
 801568e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015692:	e9cd 0100 	strd	r0, r1, [sp]
 8015696:	f7eb fa39 	bl	8000b0c <__aeabi_dcmplt>
 801569a:	2800      	cmp	r0, #0
 801569c:	d163      	bne.n	8015766 <_dtoa_r+0x5de>
 801569e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80156a2:	2000      	movs	r0, #0
 80156a4:	4937      	ldr	r1, [pc, #220]	; (8015784 <_dtoa_r+0x5fc>)
 80156a6:	f7ea fe07 	bl	80002b8 <__aeabi_dsub>
 80156aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80156ae:	f7eb fa2d 	bl	8000b0c <__aeabi_dcmplt>
 80156b2:	2800      	cmp	r0, #0
 80156b4:	f040 80b7 	bne.w	8015826 <_dtoa_r+0x69e>
 80156b8:	eba5 030b 	sub.w	r3, r5, fp
 80156bc:	429f      	cmp	r7, r3
 80156be:	f77f af7c 	ble.w	80155ba <_dtoa_r+0x432>
 80156c2:	2200      	movs	r2, #0
 80156c4:	4b30      	ldr	r3, [pc, #192]	; (8015788 <_dtoa_r+0x600>)
 80156c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80156ca:	f7ea ffad 	bl	8000628 <__aeabi_dmul>
 80156ce:	2200      	movs	r2, #0
 80156d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80156d4:	4b2c      	ldr	r3, [pc, #176]	; (8015788 <_dtoa_r+0x600>)
 80156d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156da:	f7ea ffa5 	bl	8000628 <__aeabi_dmul>
 80156de:	e9cd 0100 	strd	r0, r1, [sp]
 80156e2:	e7c4      	b.n	801566e <_dtoa_r+0x4e6>
 80156e4:	462a      	mov	r2, r5
 80156e6:	4633      	mov	r3, r6
 80156e8:	f7ea ff9e 	bl	8000628 <__aeabi_dmul>
 80156ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80156f0:	eb0b 0507 	add.w	r5, fp, r7
 80156f4:	465e      	mov	r6, fp
 80156f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156fa:	f7eb fa45 	bl	8000b88 <__aeabi_d2iz>
 80156fe:	4607      	mov	r7, r0
 8015700:	f7ea ff28 	bl	8000554 <__aeabi_i2d>
 8015704:	3730      	adds	r7, #48	; 0x30
 8015706:	4602      	mov	r2, r0
 8015708:	460b      	mov	r3, r1
 801570a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801570e:	f7ea fdd3 	bl	80002b8 <__aeabi_dsub>
 8015712:	f806 7b01 	strb.w	r7, [r6], #1
 8015716:	42ae      	cmp	r6, r5
 8015718:	e9cd 0100 	strd	r0, r1, [sp]
 801571c:	f04f 0200 	mov.w	r2, #0
 8015720:	d126      	bne.n	8015770 <_dtoa_r+0x5e8>
 8015722:	4b1c      	ldr	r3, [pc, #112]	; (8015794 <_dtoa_r+0x60c>)
 8015724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015728:	f7ea fdc8 	bl	80002bc <__adddf3>
 801572c:	4602      	mov	r2, r0
 801572e:	460b      	mov	r3, r1
 8015730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015734:	f7eb fa08 	bl	8000b48 <__aeabi_dcmpgt>
 8015738:	2800      	cmp	r0, #0
 801573a:	d174      	bne.n	8015826 <_dtoa_r+0x69e>
 801573c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015740:	2000      	movs	r0, #0
 8015742:	4914      	ldr	r1, [pc, #80]	; (8015794 <_dtoa_r+0x60c>)
 8015744:	f7ea fdb8 	bl	80002b8 <__aeabi_dsub>
 8015748:	4602      	mov	r2, r0
 801574a:	460b      	mov	r3, r1
 801574c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015750:	f7eb f9dc 	bl	8000b0c <__aeabi_dcmplt>
 8015754:	2800      	cmp	r0, #0
 8015756:	f43f af30 	beq.w	80155ba <_dtoa_r+0x432>
 801575a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801575e:	2b30      	cmp	r3, #48	; 0x30
 8015760:	f105 32ff 	add.w	r2, r5, #4294967295
 8015764:	d002      	beq.n	801576c <_dtoa_r+0x5e4>
 8015766:	f8dd a020 	ldr.w	sl, [sp, #32]
 801576a:	e04a      	b.n	8015802 <_dtoa_r+0x67a>
 801576c:	4615      	mov	r5, r2
 801576e:	e7f4      	b.n	801575a <_dtoa_r+0x5d2>
 8015770:	4b05      	ldr	r3, [pc, #20]	; (8015788 <_dtoa_r+0x600>)
 8015772:	f7ea ff59 	bl	8000628 <__aeabi_dmul>
 8015776:	e9cd 0100 	strd	r0, r1, [sp]
 801577a:	e7bc      	b.n	80156f6 <_dtoa_r+0x56e>
 801577c:	08018908 	.word	0x08018908
 8015780:	080188e0 	.word	0x080188e0
 8015784:	3ff00000 	.word	0x3ff00000
 8015788:	40240000 	.word	0x40240000
 801578c:	401c0000 	.word	0x401c0000
 8015790:	40140000 	.word	0x40140000
 8015794:	3fe00000 	.word	0x3fe00000
 8015798:	e9dd 6700 	ldrd	r6, r7, [sp]
 801579c:	465d      	mov	r5, fp
 801579e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157a2:	4630      	mov	r0, r6
 80157a4:	4639      	mov	r1, r7
 80157a6:	f7eb f869 	bl	800087c <__aeabi_ddiv>
 80157aa:	f7eb f9ed 	bl	8000b88 <__aeabi_d2iz>
 80157ae:	4680      	mov	r8, r0
 80157b0:	f7ea fed0 	bl	8000554 <__aeabi_i2d>
 80157b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157b8:	f7ea ff36 	bl	8000628 <__aeabi_dmul>
 80157bc:	4602      	mov	r2, r0
 80157be:	460b      	mov	r3, r1
 80157c0:	4630      	mov	r0, r6
 80157c2:	4639      	mov	r1, r7
 80157c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80157c8:	f7ea fd76 	bl	80002b8 <__aeabi_dsub>
 80157cc:	f805 6b01 	strb.w	r6, [r5], #1
 80157d0:	eba5 060b 	sub.w	r6, r5, fp
 80157d4:	45b1      	cmp	r9, r6
 80157d6:	4602      	mov	r2, r0
 80157d8:	460b      	mov	r3, r1
 80157da:	d139      	bne.n	8015850 <_dtoa_r+0x6c8>
 80157dc:	f7ea fd6e 	bl	80002bc <__adddf3>
 80157e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157e4:	4606      	mov	r6, r0
 80157e6:	460f      	mov	r7, r1
 80157e8:	f7eb f9ae 	bl	8000b48 <__aeabi_dcmpgt>
 80157ec:	b9c8      	cbnz	r0, 8015822 <_dtoa_r+0x69a>
 80157ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157f2:	4630      	mov	r0, r6
 80157f4:	4639      	mov	r1, r7
 80157f6:	f7eb f97f 	bl	8000af8 <__aeabi_dcmpeq>
 80157fa:	b110      	cbz	r0, 8015802 <_dtoa_r+0x67a>
 80157fc:	f018 0f01 	tst.w	r8, #1
 8015800:	d10f      	bne.n	8015822 <_dtoa_r+0x69a>
 8015802:	9904      	ldr	r1, [sp, #16]
 8015804:	4620      	mov	r0, r4
 8015806:	f000 fffd 	bl	8016804 <_Bfree>
 801580a:	2300      	movs	r3, #0
 801580c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801580e:	702b      	strb	r3, [r5, #0]
 8015810:	f10a 0301 	add.w	r3, sl, #1
 8015814:	6013      	str	r3, [r2, #0]
 8015816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015818:	2b00      	cmp	r3, #0
 801581a:	f000 8241 	beq.w	8015ca0 <_dtoa_r+0xb18>
 801581e:	601d      	str	r5, [r3, #0]
 8015820:	e23e      	b.n	8015ca0 <_dtoa_r+0xb18>
 8015822:	f8cd a020 	str.w	sl, [sp, #32]
 8015826:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801582a:	2a39      	cmp	r2, #57	; 0x39
 801582c:	f105 33ff 	add.w	r3, r5, #4294967295
 8015830:	d108      	bne.n	8015844 <_dtoa_r+0x6bc>
 8015832:	459b      	cmp	fp, r3
 8015834:	d10a      	bne.n	801584c <_dtoa_r+0x6c4>
 8015836:	9b08      	ldr	r3, [sp, #32]
 8015838:	3301      	adds	r3, #1
 801583a:	9308      	str	r3, [sp, #32]
 801583c:	2330      	movs	r3, #48	; 0x30
 801583e:	f88b 3000 	strb.w	r3, [fp]
 8015842:	465b      	mov	r3, fp
 8015844:	781a      	ldrb	r2, [r3, #0]
 8015846:	3201      	adds	r2, #1
 8015848:	701a      	strb	r2, [r3, #0]
 801584a:	e78c      	b.n	8015766 <_dtoa_r+0x5de>
 801584c:	461d      	mov	r5, r3
 801584e:	e7ea      	b.n	8015826 <_dtoa_r+0x69e>
 8015850:	2200      	movs	r2, #0
 8015852:	4b9b      	ldr	r3, [pc, #620]	; (8015ac0 <_dtoa_r+0x938>)
 8015854:	f7ea fee8 	bl	8000628 <__aeabi_dmul>
 8015858:	2200      	movs	r2, #0
 801585a:	2300      	movs	r3, #0
 801585c:	4606      	mov	r6, r0
 801585e:	460f      	mov	r7, r1
 8015860:	f7eb f94a 	bl	8000af8 <__aeabi_dcmpeq>
 8015864:	2800      	cmp	r0, #0
 8015866:	d09a      	beq.n	801579e <_dtoa_r+0x616>
 8015868:	e7cb      	b.n	8015802 <_dtoa_r+0x67a>
 801586a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801586c:	2a00      	cmp	r2, #0
 801586e:	f000 808b 	beq.w	8015988 <_dtoa_r+0x800>
 8015872:	9a06      	ldr	r2, [sp, #24]
 8015874:	2a01      	cmp	r2, #1
 8015876:	dc6e      	bgt.n	8015956 <_dtoa_r+0x7ce>
 8015878:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801587a:	2a00      	cmp	r2, #0
 801587c:	d067      	beq.n	801594e <_dtoa_r+0x7c6>
 801587e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015882:	9f07      	ldr	r7, [sp, #28]
 8015884:	9d05      	ldr	r5, [sp, #20]
 8015886:	9a05      	ldr	r2, [sp, #20]
 8015888:	2101      	movs	r1, #1
 801588a:	441a      	add	r2, r3
 801588c:	4620      	mov	r0, r4
 801588e:	9205      	str	r2, [sp, #20]
 8015890:	4498      	add	r8, r3
 8015892:	f001 f895 	bl	80169c0 <__i2b>
 8015896:	4606      	mov	r6, r0
 8015898:	2d00      	cmp	r5, #0
 801589a:	dd0c      	ble.n	80158b6 <_dtoa_r+0x72e>
 801589c:	f1b8 0f00 	cmp.w	r8, #0
 80158a0:	dd09      	ble.n	80158b6 <_dtoa_r+0x72e>
 80158a2:	4545      	cmp	r5, r8
 80158a4:	9a05      	ldr	r2, [sp, #20]
 80158a6:	462b      	mov	r3, r5
 80158a8:	bfa8      	it	ge
 80158aa:	4643      	movge	r3, r8
 80158ac:	1ad2      	subs	r2, r2, r3
 80158ae:	9205      	str	r2, [sp, #20]
 80158b0:	1aed      	subs	r5, r5, r3
 80158b2:	eba8 0803 	sub.w	r8, r8, r3
 80158b6:	9b07      	ldr	r3, [sp, #28]
 80158b8:	b1eb      	cbz	r3, 80158f6 <_dtoa_r+0x76e>
 80158ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d067      	beq.n	8015990 <_dtoa_r+0x808>
 80158c0:	b18f      	cbz	r7, 80158e6 <_dtoa_r+0x75e>
 80158c2:	4631      	mov	r1, r6
 80158c4:	463a      	mov	r2, r7
 80158c6:	4620      	mov	r0, r4
 80158c8:	f001 f91a 	bl	8016b00 <__pow5mult>
 80158cc:	9a04      	ldr	r2, [sp, #16]
 80158ce:	4601      	mov	r1, r0
 80158d0:	4606      	mov	r6, r0
 80158d2:	4620      	mov	r0, r4
 80158d4:	f001 f87d 	bl	80169d2 <__multiply>
 80158d8:	9904      	ldr	r1, [sp, #16]
 80158da:	9008      	str	r0, [sp, #32]
 80158dc:	4620      	mov	r0, r4
 80158de:	f000 ff91 	bl	8016804 <_Bfree>
 80158e2:	9b08      	ldr	r3, [sp, #32]
 80158e4:	9304      	str	r3, [sp, #16]
 80158e6:	9b07      	ldr	r3, [sp, #28]
 80158e8:	1bda      	subs	r2, r3, r7
 80158ea:	d004      	beq.n	80158f6 <_dtoa_r+0x76e>
 80158ec:	9904      	ldr	r1, [sp, #16]
 80158ee:	4620      	mov	r0, r4
 80158f0:	f001 f906 	bl	8016b00 <__pow5mult>
 80158f4:	9004      	str	r0, [sp, #16]
 80158f6:	2101      	movs	r1, #1
 80158f8:	4620      	mov	r0, r4
 80158fa:	f001 f861 	bl	80169c0 <__i2b>
 80158fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015900:	4607      	mov	r7, r0
 8015902:	2b00      	cmp	r3, #0
 8015904:	f000 81d0 	beq.w	8015ca8 <_dtoa_r+0xb20>
 8015908:	461a      	mov	r2, r3
 801590a:	4601      	mov	r1, r0
 801590c:	4620      	mov	r0, r4
 801590e:	f001 f8f7 	bl	8016b00 <__pow5mult>
 8015912:	9b06      	ldr	r3, [sp, #24]
 8015914:	2b01      	cmp	r3, #1
 8015916:	4607      	mov	r7, r0
 8015918:	dc40      	bgt.n	801599c <_dtoa_r+0x814>
 801591a:	9b00      	ldr	r3, [sp, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d139      	bne.n	8015994 <_dtoa_r+0x80c>
 8015920:	9b01      	ldr	r3, [sp, #4]
 8015922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015926:	2b00      	cmp	r3, #0
 8015928:	d136      	bne.n	8015998 <_dtoa_r+0x810>
 801592a:	9b01      	ldr	r3, [sp, #4]
 801592c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015930:	0d1b      	lsrs	r3, r3, #20
 8015932:	051b      	lsls	r3, r3, #20
 8015934:	b12b      	cbz	r3, 8015942 <_dtoa_r+0x7ba>
 8015936:	9b05      	ldr	r3, [sp, #20]
 8015938:	3301      	adds	r3, #1
 801593a:	9305      	str	r3, [sp, #20]
 801593c:	f108 0801 	add.w	r8, r8, #1
 8015940:	2301      	movs	r3, #1
 8015942:	9307      	str	r3, [sp, #28]
 8015944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015946:	2b00      	cmp	r3, #0
 8015948:	d12a      	bne.n	80159a0 <_dtoa_r+0x818>
 801594a:	2001      	movs	r0, #1
 801594c:	e030      	b.n	80159b0 <_dtoa_r+0x828>
 801594e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015950:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015954:	e795      	b.n	8015882 <_dtoa_r+0x6fa>
 8015956:	9b07      	ldr	r3, [sp, #28]
 8015958:	f109 37ff 	add.w	r7, r9, #4294967295
 801595c:	42bb      	cmp	r3, r7
 801595e:	bfbf      	itttt	lt
 8015960:	9b07      	ldrlt	r3, [sp, #28]
 8015962:	9707      	strlt	r7, [sp, #28]
 8015964:	1afa      	sublt	r2, r7, r3
 8015966:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015968:	bfbb      	ittet	lt
 801596a:	189b      	addlt	r3, r3, r2
 801596c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801596e:	1bdf      	subge	r7, r3, r7
 8015970:	2700      	movlt	r7, #0
 8015972:	f1b9 0f00 	cmp.w	r9, #0
 8015976:	bfb5      	itete	lt
 8015978:	9b05      	ldrlt	r3, [sp, #20]
 801597a:	9d05      	ldrge	r5, [sp, #20]
 801597c:	eba3 0509 	sublt.w	r5, r3, r9
 8015980:	464b      	movge	r3, r9
 8015982:	bfb8      	it	lt
 8015984:	2300      	movlt	r3, #0
 8015986:	e77e      	b.n	8015886 <_dtoa_r+0x6fe>
 8015988:	9f07      	ldr	r7, [sp, #28]
 801598a:	9d05      	ldr	r5, [sp, #20]
 801598c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801598e:	e783      	b.n	8015898 <_dtoa_r+0x710>
 8015990:	9a07      	ldr	r2, [sp, #28]
 8015992:	e7ab      	b.n	80158ec <_dtoa_r+0x764>
 8015994:	2300      	movs	r3, #0
 8015996:	e7d4      	b.n	8015942 <_dtoa_r+0x7ba>
 8015998:	9b00      	ldr	r3, [sp, #0]
 801599a:	e7d2      	b.n	8015942 <_dtoa_r+0x7ba>
 801599c:	2300      	movs	r3, #0
 801599e:	9307      	str	r3, [sp, #28]
 80159a0:	693b      	ldr	r3, [r7, #16]
 80159a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80159a6:	6918      	ldr	r0, [r3, #16]
 80159a8:	f000 ffbc 	bl	8016924 <__hi0bits>
 80159ac:	f1c0 0020 	rsb	r0, r0, #32
 80159b0:	4440      	add	r0, r8
 80159b2:	f010 001f 	ands.w	r0, r0, #31
 80159b6:	d047      	beq.n	8015a48 <_dtoa_r+0x8c0>
 80159b8:	f1c0 0320 	rsb	r3, r0, #32
 80159bc:	2b04      	cmp	r3, #4
 80159be:	dd3b      	ble.n	8015a38 <_dtoa_r+0x8b0>
 80159c0:	9b05      	ldr	r3, [sp, #20]
 80159c2:	f1c0 001c 	rsb	r0, r0, #28
 80159c6:	4403      	add	r3, r0
 80159c8:	9305      	str	r3, [sp, #20]
 80159ca:	4405      	add	r5, r0
 80159cc:	4480      	add	r8, r0
 80159ce:	9b05      	ldr	r3, [sp, #20]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	dd05      	ble.n	80159e0 <_dtoa_r+0x858>
 80159d4:	461a      	mov	r2, r3
 80159d6:	9904      	ldr	r1, [sp, #16]
 80159d8:	4620      	mov	r0, r4
 80159da:	f001 f8df 	bl	8016b9c <__lshift>
 80159de:	9004      	str	r0, [sp, #16]
 80159e0:	f1b8 0f00 	cmp.w	r8, #0
 80159e4:	dd05      	ble.n	80159f2 <_dtoa_r+0x86a>
 80159e6:	4639      	mov	r1, r7
 80159e8:	4642      	mov	r2, r8
 80159ea:	4620      	mov	r0, r4
 80159ec:	f001 f8d6 	bl	8016b9c <__lshift>
 80159f0:	4607      	mov	r7, r0
 80159f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159f4:	b353      	cbz	r3, 8015a4c <_dtoa_r+0x8c4>
 80159f6:	4639      	mov	r1, r7
 80159f8:	9804      	ldr	r0, [sp, #16]
 80159fa:	f001 f923 	bl	8016c44 <__mcmp>
 80159fe:	2800      	cmp	r0, #0
 8015a00:	da24      	bge.n	8015a4c <_dtoa_r+0x8c4>
 8015a02:	2300      	movs	r3, #0
 8015a04:	220a      	movs	r2, #10
 8015a06:	9904      	ldr	r1, [sp, #16]
 8015a08:	4620      	mov	r0, r4
 8015a0a:	f000 ff12 	bl	8016832 <__multadd>
 8015a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a10:	9004      	str	r0, [sp, #16]
 8015a12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	f000 814d 	beq.w	8015cb6 <_dtoa_r+0xb2e>
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	4631      	mov	r1, r6
 8015a20:	220a      	movs	r2, #10
 8015a22:	4620      	mov	r0, r4
 8015a24:	f000 ff05 	bl	8016832 <__multadd>
 8015a28:	9b02      	ldr	r3, [sp, #8]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	4606      	mov	r6, r0
 8015a2e:	dc4f      	bgt.n	8015ad0 <_dtoa_r+0x948>
 8015a30:	9b06      	ldr	r3, [sp, #24]
 8015a32:	2b02      	cmp	r3, #2
 8015a34:	dd4c      	ble.n	8015ad0 <_dtoa_r+0x948>
 8015a36:	e011      	b.n	8015a5c <_dtoa_r+0x8d4>
 8015a38:	d0c9      	beq.n	80159ce <_dtoa_r+0x846>
 8015a3a:	9a05      	ldr	r2, [sp, #20]
 8015a3c:	331c      	adds	r3, #28
 8015a3e:	441a      	add	r2, r3
 8015a40:	9205      	str	r2, [sp, #20]
 8015a42:	441d      	add	r5, r3
 8015a44:	4498      	add	r8, r3
 8015a46:	e7c2      	b.n	80159ce <_dtoa_r+0x846>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	e7f6      	b.n	8015a3a <_dtoa_r+0x8b2>
 8015a4c:	f1b9 0f00 	cmp.w	r9, #0
 8015a50:	dc38      	bgt.n	8015ac4 <_dtoa_r+0x93c>
 8015a52:	9b06      	ldr	r3, [sp, #24]
 8015a54:	2b02      	cmp	r3, #2
 8015a56:	dd35      	ble.n	8015ac4 <_dtoa_r+0x93c>
 8015a58:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a5c:	9b02      	ldr	r3, [sp, #8]
 8015a5e:	b963      	cbnz	r3, 8015a7a <_dtoa_r+0x8f2>
 8015a60:	4639      	mov	r1, r7
 8015a62:	2205      	movs	r2, #5
 8015a64:	4620      	mov	r0, r4
 8015a66:	f000 fee4 	bl	8016832 <__multadd>
 8015a6a:	4601      	mov	r1, r0
 8015a6c:	4607      	mov	r7, r0
 8015a6e:	9804      	ldr	r0, [sp, #16]
 8015a70:	f001 f8e8 	bl	8016c44 <__mcmp>
 8015a74:	2800      	cmp	r0, #0
 8015a76:	f73f adcc 	bgt.w	8015612 <_dtoa_r+0x48a>
 8015a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a7c:	465d      	mov	r5, fp
 8015a7e:	ea6f 0a03 	mvn.w	sl, r3
 8015a82:	f04f 0900 	mov.w	r9, #0
 8015a86:	4639      	mov	r1, r7
 8015a88:	4620      	mov	r0, r4
 8015a8a:	f000 febb 	bl	8016804 <_Bfree>
 8015a8e:	2e00      	cmp	r6, #0
 8015a90:	f43f aeb7 	beq.w	8015802 <_dtoa_r+0x67a>
 8015a94:	f1b9 0f00 	cmp.w	r9, #0
 8015a98:	d005      	beq.n	8015aa6 <_dtoa_r+0x91e>
 8015a9a:	45b1      	cmp	r9, r6
 8015a9c:	d003      	beq.n	8015aa6 <_dtoa_r+0x91e>
 8015a9e:	4649      	mov	r1, r9
 8015aa0:	4620      	mov	r0, r4
 8015aa2:	f000 feaf 	bl	8016804 <_Bfree>
 8015aa6:	4631      	mov	r1, r6
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	f000 feab 	bl	8016804 <_Bfree>
 8015aae:	e6a8      	b.n	8015802 <_dtoa_r+0x67a>
 8015ab0:	2700      	movs	r7, #0
 8015ab2:	463e      	mov	r6, r7
 8015ab4:	e7e1      	b.n	8015a7a <_dtoa_r+0x8f2>
 8015ab6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015aba:	463e      	mov	r6, r7
 8015abc:	e5a9      	b.n	8015612 <_dtoa_r+0x48a>
 8015abe:	bf00      	nop
 8015ac0:	40240000 	.word	0x40240000
 8015ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ac6:	f8cd 9008 	str.w	r9, [sp, #8]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	f000 80fa 	beq.w	8015cc4 <_dtoa_r+0xb3c>
 8015ad0:	2d00      	cmp	r5, #0
 8015ad2:	dd05      	ble.n	8015ae0 <_dtoa_r+0x958>
 8015ad4:	4631      	mov	r1, r6
 8015ad6:	462a      	mov	r2, r5
 8015ad8:	4620      	mov	r0, r4
 8015ada:	f001 f85f 	bl	8016b9c <__lshift>
 8015ade:	4606      	mov	r6, r0
 8015ae0:	9b07      	ldr	r3, [sp, #28]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d04c      	beq.n	8015b80 <_dtoa_r+0x9f8>
 8015ae6:	6871      	ldr	r1, [r6, #4]
 8015ae8:	4620      	mov	r0, r4
 8015aea:	f000 fe57 	bl	801679c <_Balloc>
 8015aee:	6932      	ldr	r2, [r6, #16]
 8015af0:	3202      	adds	r2, #2
 8015af2:	4605      	mov	r5, r0
 8015af4:	0092      	lsls	r2, r2, #2
 8015af6:	f106 010c 	add.w	r1, r6, #12
 8015afa:	300c      	adds	r0, #12
 8015afc:	f7fd fb54 	bl	80131a8 <memcpy>
 8015b00:	2201      	movs	r2, #1
 8015b02:	4629      	mov	r1, r5
 8015b04:	4620      	mov	r0, r4
 8015b06:	f001 f849 	bl	8016b9c <__lshift>
 8015b0a:	9b00      	ldr	r3, [sp, #0]
 8015b0c:	f8cd b014 	str.w	fp, [sp, #20]
 8015b10:	f003 0301 	and.w	r3, r3, #1
 8015b14:	46b1      	mov	r9, r6
 8015b16:	9307      	str	r3, [sp, #28]
 8015b18:	4606      	mov	r6, r0
 8015b1a:	4639      	mov	r1, r7
 8015b1c:	9804      	ldr	r0, [sp, #16]
 8015b1e:	f7ff faa7 	bl	8015070 <quorem>
 8015b22:	4649      	mov	r1, r9
 8015b24:	4605      	mov	r5, r0
 8015b26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015b2a:	9804      	ldr	r0, [sp, #16]
 8015b2c:	f001 f88a 	bl	8016c44 <__mcmp>
 8015b30:	4632      	mov	r2, r6
 8015b32:	9000      	str	r0, [sp, #0]
 8015b34:	4639      	mov	r1, r7
 8015b36:	4620      	mov	r0, r4
 8015b38:	f001 f89e 	bl	8016c78 <__mdiff>
 8015b3c:	68c3      	ldr	r3, [r0, #12]
 8015b3e:	4602      	mov	r2, r0
 8015b40:	bb03      	cbnz	r3, 8015b84 <_dtoa_r+0x9fc>
 8015b42:	4601      	mov	r1, r0
 8015b44:	9008      	str	r0, [sp, #32]
 8015b46:	9804      	ldr	r0, [sp, #16]
 8015b48:	f001 f87c 	bl	8016c44 <__mcmp>
 8015b4c:	9a08      	ldr	r2, [sp, #32]
 8015b4e:	4603      	mov	r3, r0
 8015b50:	4611      	mov	r1, r2
 8015b52:	4620      	mov	r0, r4
 8015b54:	9308      	str	r3, [sp, #32]
 8015b56:	f000 fe55 	bl	8016804 <_Bfree>
 8015b5a:	9b08      	ldr	r3, [sp, #32]
 8015b5c:	b9a3      	cbnz	r3, 8015b88 <_dtoa_r+0xa00>
 8015b5e:	9a06      	ldr	r2, [sp, #24]
 8015b60:	b992      	cbnz	r2, 8015b88 <_dtoa_r+0xa00>
 8015b62:	9a07      	ldr	r2, [sp, #28]
 8015b64:	b982      	cbnz	r2, 8015b88 <_dtoa_r+0xa00>
 8015b66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015b6a:	d029      	beq.n	8015bc0 <_dtoa_r+0xa38>
 8015b6c:	9b00      	ldr	r3, [sp, #0]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	dd01      	ble.n	8015b76 <_dtoa_r+0x9ee>
 8015b72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015b76:	9b05      	ldr	r3, [sp, #20]
 8015b78:	1c5d      	adds	r5, r3, #1
 8015b7a:	f883 8000 	strb.w	r8, [r3]
 8015b7e:	e782      	b.n	8015a86 <_dtoa_r+0x8fe>
 8015b80:	4630      	mov	r0, r6
 8015b82:	e7c2      	b.n	8015b0a <_dtoa_r+0x982>
 8015b84:	2301      	movs	r3, #1
 8015b86:	e7e3      	b.n	8015b50 <_dtoa_r+0x9c8>
 8015b88:	9a00      	ldr	r2, [sp, #0]
 8015b8a:	2a00      	cmp	r2, #0
 8015b8c:	db04      	blt.n	8015b98 <_dtoa_r+0xa10>
 8015b8e:	d125      	bne.n	8015bdc <_dtoa_r+0xa54>
 8015b90:	9a06      	ldr	r2, [sp, #24]
 8015b92:	bb1a      	cbnz	r2, 8015bdc <_dtoa_r+0xa54>
 8015b94:	9a07      	ldr	r2, [sp, #28]
 8015b96:	bb0a      	cbnz	r2, 8015bdc <_dtoa_r+0xa54>
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	ddec      	ble.n	8015b76 <_dtoa_r+0x9ee>
 8015b9c:	2201      	movs	r2, #1
 8015b9e:	9904      	ldr	r1, [sp, #16]
 8015ba0:	4620      	mov	r0, r4
 8015ba2:	f000 fffb 	bl	8016b9c <__lshift>
 8015ba6:	4639      	mov	r1, r7
 8015ba8:	9004      	str	r0, [sp, #16]
 8015baa:	f001 f84b 	bl	8016c44 <__mcmp>
 8015bae:	2800      	cmp	r0, #0
 8015bb0:	dc03      	bgt.n	8015bba <_dtoa_r+0xa32>
 8015bb2:	d1e0      	bne.n	8015b76 <_dtoa_r+0x9ee>
 8015bb4:	f018 0f01 	tst.w	r8, #1
 8015bb8:	d0dd      	beq.n	8015b76 <_dtoa_r+0x9ee>
 8015bba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015bbe:	d1d8      	bne.n	8015b72 <_dtoa_r+0x9ea>
 8015bc0:	9b05      	ldr	r3, [sp, #20]
 8015bc2:	9a05      	ldr	r2, [sp, #20]
 8015bc4:	1c5d      	adds	r5, r3, #1
 8015bc6:	2339      	movs	r3, #57	; 0x39
 8015bc8:	7013      	strb	r3, [r2, #0]
 8015bca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015bce:	2b39      	cmp	r3, #57	; 0x39
 8015bd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8015bd4:	d04f      	beq.n	8015c76 <_dtoa_r+0xaee>
 8015bd6:	3301      	adds	r3, #1
 8015bd8:	7013      	strb	r3, [r2, #0]
 8015bda:	e754      	b.n	8015a86 <_dtoa_r+0x8fe>
 8015bdc:	9a05      	ldr	r2, [sp, #20]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	f102 0501 	add.w	r5, r2, #1
 8015be4:	dd06      	ble.n	8015bf4 <_dtoa_r+0xa6c>
 8015be6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015bea:	d0e9      	beq.n	8015bc0 <_dtoa_r+0xa38>
 8015bec:	f108 0801 	add.w	r8, r8, #1
 8015bf0:	9b05      	ldr	r3, [sp, #20]
 8015bf2:	e7c2      	b.n	8015b7a <_dtoa_r+0x9f2>
 8015bf4:	9a02      	ldr	r2, [sp, #8]
 8015bf6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015bfa:	eba5 030b 	sub.w	r3, r5, fp
 8015bfe:	4293      	cmp	r3, r2
 8015c00:	d021      	beq.n	8015c46 <_dtoa_r+0xabe>
 8015c02:	2300      	movs	r3, #0
 8015c04:	220a      	movs	r2, #10
 8015c06:	9904      	ldr	r1, [sp, #16]
 8015c08:	4620      	mov	r0, r4
 8015c0a:	f000 fe12 	bl	8016832 <__multadd>
 8015c0e:	45b1      	cmp	r9, r6
 8015c10:	9004      	str	r0, [sp, #16]
 8015c12:	f04f 0300 	mov.w	r3, #0
 8015c16:	f04f 020a 	mov.w	r2, #10
 8015c1a:	4649      	mov	r1, r9
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	d105      	bne.n	8015c2c <_dtoa_r+0xaa4>
 8015c20:	f000 fe07 	bl	8016832 <__multadd>
 8015c24:	4681      	mov	r9, r0
 8015c26:	4606      	mov	r6, r0
 8015c28:	9505      	str	r5, [sp, #20]
 8015c2a:	e776      	b.n	8015b1a <_dtoa_r+0x992>
 8015c2c:	f000 fe01 	bl	8016832 <__multadd>
 8015c30:	4631      	mov	r1, r6
 8015c32:	4681      	mov	r9, r0
 8015c34:	2300      	movs	r3, #0
 8015c36:	220a      	movs	r2, #10
 8015c38:	4620      	mov	r0, r4
 8015c3a:	f000 fdfa 	bl	8016832 <__multadd>
 8015c3e:	4606      	mov	r6, r0
 8015c40:	e7f2      	b.n	8015c28 <_dtoa_r+0xaa0>
 8015c42:	f04f 0900 	mov.w	r9, #0
 8015c46:	2201      	movs	r2, #1
 8015c48:	9904      	ldr	r1, [sp, #16]
 8015c4a:	4620      	mov	r0, r4
 8015c4c:	f000 ffa6 	bl	8016b9c <__lshift>
 8015c50:	4639      	mov	r1, r7
 8015c52:	9004      	str	r0, [sp, #16]
 8015c54:	f000 fff6 	bl	8016c44 <__mcmp>
 8015c58:	2800      	cmp	r0, #0
 8015c5a:	dcb6      	bgt.n	8015bca <_dtoa_r+0xa42>
 8015c5c:	d102      	bne.n	8015c64 <_dtoa_r+0xadc>
 8015c5e:	f018 0f01 	tst.w	r8, #1
 8015c62:	d1b2      	bne.n	8015bca <_dtoa_r+0xa42>
 8015c64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015c68:	2b30      	cmp	r3, #48	; 0x30
 8015c6a:	f105 32ff 	add.w	r2, r5, #4294967295
 8015c6e:	f47f af0a 	bne.w	8015a86 <_dtoa_r+0x8fe>
 8015c72:	4615      	mov	r5, r2
 8015c74:	e7f6      	b.n	8015c64 <_dtoa_r+0xadc>
 8015c76:	4593      	cmp	fp, r2
 8015c78:	d105      	bne.n	8015c86 <_dtoa_r+0xafe>
 8015c7a:	2331      	movs	r3, #49	; 0x31
 8015c7c:	f10a 0a01 	add.w	sl, sl, #1
 8015c80:	f88b 3000 	strb.w	r3, [fp]
 8015c84:	e6ff      	b.n	8015a86 <_dtoa_r+0x8fe>
 8015c86:	4615      	mov	r5, r2
 8015c88:	e79f      	b.n	8015bca <_dtoa_r+0xa42>
 8015c8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015cf0 <_dtoa_r+0xb68>
 8015c8e:	e007      	b.n	8015ca0 <_dtoa_r+0xb18>
 8015c90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015cf4 <_dtoa_r+0xb6c>
 8015c96:	b11b      	cbz	r3, 8015ca0 <_dtoa_r+0xb18>
 8015c98:	f10b 0308 	add.w	r3, fp, #8
 8015c9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c9e:	6013      	str	r3, [r2, #0]
 8015ca0:	4658      	mov	r0, fp
 8015ca2:	b017      	add	sp, #92	; 0x5c
 8015ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ca8:	9b06      	ldr	r3, [sp, #24]
 8015caa:	2b01      	cmp	r3, #1
 8015cac:	f77f ae35 	ble.w	801591a <_dtoa_r+0x792>
 8015cb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cb2:	9307      	str	r3, [sp, #28]
 8015cb4:	e649      	b.n	801594a <_dtoa_r+0x7c2>
 8015cb6:	9b02      	ldr	r3, [sp, #8]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	dc03      	bgt.n	8015cc4 <_dtoa_r+0xb3c>
 8015cbc:	9b06      	ldr	r3, [sp, #24]
 8015cbe:	2b02      	cmp	r3, #2
 8015cc0:	f73f aecc 	bgt.w	8015a5c <_dtoa_r+0x8d4>
 8015cc4:	465d      	mov	r5, fp
 8015cc6:	4639      	mov	r1, r7
 8015cc8:	9804      	ldr	r0, [sp, #16]
 8015cca:	f7ff f9d1 	bl	8015070 <quorem>
 8015cce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015cd2:	f805 8b01 	strb.w	r8, [r5], #1
 8015cd6:	9a02      	ldr	r2, [sp, #8]
 8015cd8:	eba5 030b 	sub.w	r3, r5, fp
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	ddb0      	ble.n	8015c42 <_dtoa_r+0xaba>
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	220a      	movs	r2, #10
 8015ce4:	9904      	ldr	r1, [sp, #16]
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	f000 fda3 	bl	8016832 <__multadd>
 8015cec:	9004      	str	r0, [sp, #16]
 8015cee:	e7ea      	b.n	8015cc6 <_dtoa_r+0xb3e>
 8015cf0:	08018a03 	.word	0x08018a03
 8015cf4:	08018860 	.word	0x08018860

08015cf8 <__sflush_r>:
 8015cf8:	898a      	ldrh	r2, [r1, #12]
 8015cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cfe:	4605      	mov	r5, r0
 8015d00:	0710      	lsls	r0, r2, #28
 8015d02:	460c      	mov	r4, r1
 8015d04:	d458      	bmi.n	8015db8 <__sflush_r+0xc0>
 8015d06:	684b      	ldr	r3, [r1, #4]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	dc05      	bgt.n	8015d18 <__sflush_r+0x20>
 8015d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	dc02      	bgt.n	8015d18 <__sflush_r+0x20>
 8015d12:	2000      	movs	r0, #0
 8015d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d1a:	2e00      	cmp	r6, #0
 8015d1c:	d0f9      	beq.n	8015d12 <__sflush_r+0x1a>
 8015d1e:	2300      	movs	r3, #0
 8015d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015d24:	682f      	ldr	r7, [r5, #0]
 8015d26:	6a21      	ldr	r1, [r4, #32]
 8015d28:	602b      	str	r3, [r5, #0]
 8015d2a:	d032      	beq.n	8015d92 <__sflush_r+0x9a>
 8015d2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015d2e:	89a3      	ldrh	r3, [r4, #12]
 8015d30:	075a      	lsls	r2, r3, #29
 8015d32:	d505      	bpl.n	8015d40 <__sflush_r+0x48>
 8015d34:	6863      	ldr	r3, [r4, #4]
 8015d36:	1ac0      	subs	r0, r0, r3
 8015d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d3a:	b10b      	cbz	r3, 8015d40 <__sflush_r+0x48>
 8015d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015d3e:	1ac0      	subs	r0, r0, r3
 8015d40:	2300      	movs	r3, #0
 8015d42:	4602      	mov	r2, r0
 8015d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d46:	6a21      	ldr	r1, [r4, #32]
 8015d48:	4628      	mov	r0, r5
 8015d4a:	47b0      	blx	r6
 8015d4c:	1c43      	adds	r3, r0, #1
 8015d4e:	89a3      	ldrh	r3, [r4, #12]
 8015d50:	d106      	bne.n	8015d60 <__sflush_r+0x68>
 8015d52:	6829      	ldr	r1, [r5, #0]
 8015d54:	291d      	cmp	r1, #29
 8015d56:	d848      	bhi.n	8015dea <__sflush_r+0xf2>
 8015d58:	4a29      	ldr	r2, [pc, #164]	; (8015e00 <__sflush_r+0x108>)
 8015d5a:	40ca      	lsrs	r2, r1
 8015d5c:	07d6      	lsls	r6, r2, #31
 8015d5e:	d544      	bpl.n	8015dea <__sflush_r+0xf2>
 8015d60:	2200      	movs	r2, #0
 8015d62:	6062      	str	r2, [r4, #4]
 8015d64:	04d9      	lsls	r1, r3, #19
 8015d66:	6922      	ldr	r2, [r4, #16]
 8015d68:	6022      	str	r2, [r4, #0]
 8015d6a:	d504      	bpl.n	8015d76 <__sflush_r+0x7e>
 8015d6c:	1c42      	adds	r2, r0, #1
 8015d6e:	d101      	bne.n	8015d74 <__sflush_r+0x7c>
 8015d70:	682b      	ldr	r3, [r5, #0]
 8015d72:	b903      	cbnz	r3, 8015d76 <__sflush_r+0x7e>
 8015d74:	6560      	str	r0, [r4, #84]	; 0x54
 8015d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d78:	602f      	str	r7, [r5, #0]
 8015d7a:	2900      	cmp	r1, #0
 8015d7c:	d0c9      	beq.n	8015d12 <__sflush_r+0x1a>
 8015d7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d82:	4299      	cmp	r1, r3
 8015d84:	d002      	beq.n	8015d8c <__sflush_r+0x94>
 8015d86:	4628      	mov	r0, r5
 8015d88:	f001 f916 	bl	8016fb8 <_free_r>
 8015d8c:	2000      	movs	r0, #0
 8015d8e:	6360      	str	r0, [r4, #52]	; 0x34
 8015d90:	e7c0      	b.n	8015d14 <__sflush_r+0x1c>
 8015d92:	2301      	movs	r3, #1
 8015d94:	4628      	mov	r0, r5
 8015d96:	47b0      	blx	r6
 8015d98:	1c41      	adds	r1, r0, #1
 8015d9a:	d1c8      	bne.n	8015d2e <__sflush_r+0x36>
 8015d9c:	682b      	ldr	r3, [r5, #0]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d0c5      	beq.n	8015d2e <__sflush_r+0x36>
 8015da2:	2b1d      	cmp	r3, #29
 8015da4:	d001      	beq.n	8015daa <__sflush_r+0xb2>
 8015da6:	2b16      	cmp	r3, #22
 8015da8:	d101      	bne.n	8015dae <__sflush_r+0xb6>
 8015daa:	602f      	str	r7, [r5, #0]
 8015dac:	e7b1      	b.n	8015d12 <__sflush_r+0x1a>
 8015dae:	89a3      	ldrh	r3, [r4, #12]
 8015db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015db4:	81a3      	strh	r3, [r4, #12]
 8015db6:	e7ad      	b.n	8015d14 <__sflush_r+0x1c>
 8015db8:	690f      	ldr	r7, [r1, #16]
 8015dba:	2f00      	cmp	r7, #0
 8015dbc:	d0a9      	beq.n	8015d12 <__sflush_r+0x1a>
 8015dbe:	0793      	lsls	r3, r2, #30
 8015dc0:	680e      	ldr	r6, [r1, #0]
 8015dc2:	bf08      	it	eq
 8015dc4:	694b      	ldreq	r3, [r1, #20]
 8015dc6:	600f      	str	r7, [r1, #0]
 8015dc8:	bf18      	it	ne
 8015dca:	2300      	movne	r3, #0
 8015dcc:	eba6 0807 	sub.w	r8, r6, r7
 8015dd0:	608b      	str	r3, [r1, #8]
 8015dd2:	f1b8 0f00 	cmp.w	r8, #0
 8015dd6:	dd9c      	ble.n	8015d12 <__sflush_r+0x1a>
 8015dd8:	4643      	mov	r3, r8
 8015dda:	463a      	mov	r2, r7
 8015ddc:	6a21      	ldr	r1, [r4, #32]
 8015dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015de0:	4628      	mov	r0, r5
 8015de2:	47b0      	blx	r6
 8015de4:	2800      	cmp	r0, #0
 8015de6:	dc06      	bgt.n	8015df6 <__sflush_r+0xfe>
 8015de8:	89a3      	ldrh	r3, [r4, #12]
 8015dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015dee:	81a3      	strh	r3, [r4, #12]
 8015df0:	f04f 30ff 	mov.w	r0, #4294967295
 8015df4:	e78e      	b.n	8015d14 <__sflush_r+0x1c>
 8015df6:	4407      	add	r7, r0
 8015df8:	eba8 0800 	sub.w	r8, r8, r0
 8015dfc:	e7e9      	b.n	8015dd2 <__sflush_r+0xda>
 8015dfe:	bf00      	nop
 8015e00:	20400001 	.word	0x20400001

08015e04 <_fflush_r>:
 8015e04:	b538      	push	{r3, r4, r5, lr}
 8015e06:	690b      	ldr	r3, [r1, #16]
 8015e08:	4605      	mov	r5, r0
 8015e0a:	460c      	mov	r4, r1
 8015e0c:	b1db      	cbz	r3, 8015e46 <_fflush_r+0x42>
 8015e0e:	b118      	cbz	r0, 8015e18 <_fflush_r+0x14>
 8015e10:	6983      	ldr	r3, [r0, #24]
 8015e12:	b90b      	cbnz	r3, 8015e18 <_fflush_r+0x14>
 8015e14:	f000 f860 	bl	8015ed8 <__sinit>
 8015e18:	4b0c      	ldr	r3, [pc, #48]	; (8015e4c <_fflush_r+0x48>)
 8015e1a:	429c      	cmp	r4, r3
 8015e1c:	d109      	bne.n	8015e32 <_fflush_r+0x2e>
 8015e1e:	686c      	ldr	r4, [r5, #4]
 8015e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e24:	b17b      	cbz	r3, 8015e46 <_fflush_r+0x42>
 8015e26:	4621      	mov	r1, r4
 8015e28:	4628      	mov	r0, r5
 8015e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e2e:	f7ff bf63 	b.w	8015cf8 <__sflush_r>
 8015e32:	4b07      	ldr	r3, [pc, #28]	; (8015e50 <_fflush_r+0x4c>)
 8015e34:	429c      	cmp	r4, r3
 8015e36:	d101      	bne.n	8015e3c <_fflush_r+0x38>
 8015e38:	68ac      	ldr	r4, [r5, #8]
 8015e3a:	e7f1      	b.n	8015e20 <_fflush_r+0x1c>
 8015e3c:	4b05      	ldr	r3, [pc, #20]	; (8015e54 <_fflush_r+0x50>)
 8015e3e:	429c      	cmp	r4, r3
 8015e40:	bf08      	it	eq
 8015e42:	68ec      	ldreq	r4, [r5, #12]
 8015e44:	e7ec      	b.n	8015e20 <_fflush_r+0x1c>
 8015e46:	2000      	movs	r0, #0
 8015e48:	bd38      	pop	{r3, r4, r5, pc}
 8015e4a:	bf00      	nop
 8015e4c:	08018890 	.word	0x08018890
 8015e50:	080188b0 	.word	0x080188b0
 8015e54:	08018870 	.word	0x08018870

08015e58 <std>:
 8015e58:	2300      	movs	r3, #0
 8015e5a:	b510      	push	{r4, lr}
 8015e5c:	4604      	mov	r4, r0
 8015e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8015e62:	6083      	str	r3, [r0, #8]
 8015e64:	8181      	strh	r1, [r0, #12]
 8015e66:	6643      	str	r3, [r0, #100]	; 0x64
 8015e68:	81c2      	strh	r2, [r0, #14]
 8015e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015e6e:	6183      	str	r3, [r0, #24]
 8015e70:	4619      	mov	r1, r3
 8015e72:	2208      	movs	r2, #8
 8015e74:	305c      	adds	r0, #92	; 0x5c
 8015e76:	f7fd f9a2 	bl	80131be <memset>
 8015e7a:	4b05      	ldr	r3, [pc, #20]	; (8015e90 <std+0x38>)
 8015e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8015e7e:	4b05      	ldr	r3, [pc, #20]	; (8015e94 <std+0x3c>)
 8015e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8015e82:	4b05      	ldr	r3, [pc, #20]	; (8015e98 <std+0x40>)
 8015e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015e86:	4b05      	ldr	r3, [pc, #20]	; (8015e9c <std+0x44>)
 8015e88:	6224      	str	r4, [r4, #32]
 8015e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8015e8c:	bd10      	pop	{r4, pc}
 8015e8e:	bf00      	nop
 8015e90:	08014075 	.word	0x08014075
 8015e94:	0801409b 	.word	0x0801409b
 8015e98:	080140d3 	.word	0x080140d3
 8015e9c:	080140f7 	.word	0x080140f7

08015ea0 <_cleanup_r>:
 8015ea0:	4901      	ldr	r1, [pc, #4]	; (8015ea8 <_cleanup_r+0x8>)
 8015ea2:	f000 b885 	b.w	8015fb0 <_fwalk_reent>
 8015ea6:	bf00      	nop
 8015ea8:	08015e05 	.word	0x08015e05

08015eac <__sfmoreglue>:
 8015eac:	b570      	push	{r4, r5, r6, lr}
 8015eae:	1e4a      	subs	r2, r1, #1
 8015eb0:	2568      	movs	r5, #104	; 0x68
 8015eb2:	4355      	muls	r5, r2
 8015eb4:	460e      	mov	r6, r1
 8015eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015eba:	f001 f8cb 	bl	8017054 <_malloc_r>
 8015ebe:	4604      	mov	r4, r0
 8015ec0:	b140      	cbz	r0, 8015ed4 <__sfmoreglue+0x28>
 8015ec2:	2100      	movs	r1, #0
 8015ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8015ec8:	300c      	adds	r0, #12
 8015eca:	60a0      	str	r0, [r4, #8]
 8015ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015ed0:	f7fd f975 	bl	80131be <memset>
 8015ed4:	4620      	mov	r0, r4
 8015ed6:	bd70      	pop	{r4, r5, r6, pc}

08015ed8 <__sinit>:
 8015ed8:	6983      	ldr	r3, [r0, #24]
 8015eda:	b510      	push	{r4, lr}
 8015edc:	4604      	mov	r4, r0
 8015ede:	bb33      	cbnz	r3, 8015f2e <__sinit+0x56>
 8015ee0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015ee4:	6503      	str	r3, [r0, #80]	; 0x50
 8015ee6:	4b12      	ldr	r3, [pc, #72]	; (8015f30 <__sinit+0x58>)
 8015ee8:	4a12      	ldr	r2, [pc, #72]	; (8015f34 <__sinit+0x5c>)
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	6282      	str	r2, [r0, #40]	; 0x28
 8015eee:	4298      	cmp	r0, r3
 8015ef0:	bf04      	itt	eq
 8015ef2:	2301      	moveq	r3, #1
 8015ef4:	6183      	streq	r3, [r0, #24]
 8015ef6:	f000 f81f 	bl	8015f38 <__sfp>
 8015efa:	6060      	str	r0, [r4, #4]
 8015efc:	4620      	mov	r0, r4
 8015efe:	f000 f81b 	bl	8015f38 <__sfp>
 8015f02:	60a0      	str	r0, [r4, #8]
 8015f04:	4620      	mov	r0, r4
 8015f06:	f000 f817 	bl	8015f38 <__sfp>
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	60e0      	str	r0, [r4, #12]
 8015f0e:	2104      	movs	r1, #4
 8015f10:	6860      	ldr	r0, [r4, #4]
 8015f12:	f7ff ffa1 	bl	8015e58 <std>
 8015f16:	2201      	movs	r2, #1
 8015f18:	2109      	movs	r1, #9
 8015f1a:	68a0      	ldr	r0, [r4, #8]
 8015f1c:	f7ff ff9c 	bl	8015e58 <std>
 8015f20:	2202      	movs	r2, #2
 8015f22:	2112      	movs	r1, #18
 8015f24:	68e0      	ldr	r0, [r4, #12]
 8015f26:	f7ff ff97 	bl	8015e58 <std>
 8015f2a:	2301      	movs	r3, #1
 8015f2c:	61a3      	str	r3, [r4, #24]
 8015f2e:	bd10      	pop	{r4, pc}
 8015f30:	080187d0 	.word	0x080187d0
 8015f34:	08015ea1 	.word	0x08015ea1

08015f38 <__sfp>:
 8015f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f3a:	4b1b      	ldr	r3, [pc, #108]	; (8015fa8 <__sfp+0x70>)
 8015f3c:	681e      	ldr	r6, [r3, #0]
 8015f3e:	69b3      	ldr	r3, [r6, #24]
 8015f40:	4607      	mov	r7, r0
 8015f42:	b913      	cbnz	r3, 8015f4a <__sfp+0x12>
 8015f44:	4630      	mov	r0, r6
 8015f46:	f7ff ffc7 	bl	8015ed8 <__sinit>
 8015f4a:	3648      	adds	r6, #72	; 0x48
 8015f4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015f50:	3b01      	subs	r3, #1
 8015f52:	d503      	bpl.n	8015f5c <__sfp+0x24>
 8015f54:	6833      	ldr	r3, [r6, #0]
 8015f56:	b133      	cbz	r3, 8015f66 <__sfp+0x2e>
 8015f58:	6836      	ldr	r6, [r6, #0]
 8015f5a:	e7f7      	b.n	8015f4c <__sfp+0x14>
 8015f5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015f60:	b16d      	cbz	r5, 8015f7e <__sfp+0x46>
 8015f62:	3468      	adds	r4, #104	; 0x68
 8015f64:	e7f4      	b.n	8015f50 <__sfp+0x18>
 8015f66:	2104      	movs	r1, #4
 8015f68:	4638      	mov	r0, r7
 8015f6a:	f7ff ff9f 	bl	8015eac <__sfmoreglue>
 8015f6e:	6030      	str	r0, [r6, #0]
 8015f70:	2800      	cmp	r0, #0
 8015f72:	d1f1      	bne.n	8015f58 <__sfp+0x20>
 8015f74:	230c      	movs	r3, #12
 8015f76:	603b      	str	r3, [r7, #0]
 8015f78:	4604      	mov	r4, r0
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f7e:	4b0b      	ldr	r3, [pc, #44]	; (8015fac <__sfp+0x74>)
 8015f80:	6665      	str	r5, [r4, #100]	; 0x64
 8015f82:	e9c4 5500 	strd	r5, r5, [r4]
 8015f86:	60a5      	str	r5, [r4, #8]
 8015f88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015f8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015f90:	2208      	movs	r2, #8
 8015f92:	4629      	mov	r1, r5
 8015f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015f98:	f7fd f911 	bl	80131be <memset>
 8015f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015fa4:	e7e9      	b.n	8015f7a <__sfp+0x42>
 8015fa6:	bf00      	nop
 8015fa8:	080187d0 	.word	0x080187d0
 8015fac:	ffff0001 	.word	0xffff0001

08015fb0 <_fwalk_reent>:
 8015fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fb4:	4680      	mov	r8, r0
 8015fb6:	4689      	mov	r9, r1
 8015fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015fbc:	2600      	movs	r6, #0
 8015fbe:	b914      	cbnz	r4, 8015fc6 <_fwalk_reent+0x16>
 8015fc0:	4630      	mov	r0, r6
 8015fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015fca:	3f01      	subs	r7, #1
 8015fcc:	d501      	bpl.n	8015fd2 <_fwalk_reent+0x22>
 8015fce:	6824      	ldr	r4, [r4, #0]
 8015fd0:	e7f5      	b.n	8015fbe <_fwalk_reent+0xe>
 8015fd2:	89ab      	ldrh	r3, [r5, #12]
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d907      	bls.n	8015fe8 <_fwalk_reent+0x38>
 8015fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015fdc:	3301      	adds	r3, #1
 8015fde:	d003      	beq.n	8015fe8 <_fwalk_reent+0x38>
 8015fe0:	4629      	mov	r1, r5
 8015fe2:	4640      	mov	r0, r8
 8015fe4:	47c8      	blx	r9
 8015fe6:	4306      	orrs	r6, r0
 8015fe8:	3568      	adds	r5, #104	; 0x68
 8015fea:	e7ee      	b.n	8015fca <_fwalk_reent+0x1a>

08015fec <rshift>:
 8015fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fee:	6906      	ldr	r6, [r0, #16]
 8015ff0:	114b      	asrs	r3, r1, #5
 8015ff2:	429e      	cmp	r6, r3
 8015ff4:	f100 0414 	add.w	r4, r0, #20
 8015ff8:	dd30      	ble.n	801605c <rshift+0x70>
 8015ffa:	f011 011f 	ands.w	r1, r1, #31
 8015ffe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8016002:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016006:	d108      	bne.n	801601a <rshift+0x2e>
 8016008:	4621      	mov	r1, r4
 801600a:	42b2      	cmp	r2, r6
 801600c:	460b      	mov	r3, r1
 801600e:	d211      	bcs.n	8016034 <rshift+0x48>
 8016010:	f852 3b04 	ldr.w	r3, [r2], #4
 8016014:	f841 3b04 	str.w	r3, [r1], #4
 8016018:	e7f7      	b.n	801600a <rshift+0x1e>
 801601a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801601e:	f1c1 0c20 	rsb	ip, r1, #32
 8016022:	40cd      	lsrs	r5, r1
 8016024:	3204      	adds	r2, #4
 8016026:	4623      	mov	r3, r4
 8016028:	42b2      	cmp	r2, r6
 801602a:	4617      	mov	r7, r2
 801602c:	d30c      	bcc.n	8016048 <rshift+0x5c>
 801602e:	601d      	str	r5, [r3, #0]
 8016030:	b105      	cbz	r5, 8016034 <rshift+0x48>
 8016032:	3304      	adds	r3, #4
 8016034:	1b1a      	subs	r2, r3, r4
 8016036:	42a3      	cmp	r3, r4
 8016038:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801603c:	bf08      	it	eq
 801603e:	2300      	moveq	r3, #0
 8016040:	6102      	str	r2, [r0, #16]
 8016042:	bf08      	it	eq
 8016044:	6143      	streq	r3, [r0, #20]
 8016046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016048:	683f      	ldr	r7, [r7, #0]
 801604a:	fa07 f70c 	lsl.w	r7, r7, ip
 801604e:	433d      	orrs	r5, r7
 8016050:	f843 5b04 	str.w	r5, [r3], #4
 8016054:	f852 5b04 	ldr.w	r5, [r2], #4
 8016058:	40cd      	lsrs	r5, r1
 801605a:	e7e5      	b.n	8016028 <rshift+0x3c>
 801605c:	4623      	mov	r3, r4
 801605e:	e7e9      	b.n	8016034 <rshift+0x48>

08016060 <__hexdig_fun>:
 8016060:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016064:	2b09      	cmp	r3, #9
 8016066:	d802      	bhi.n	801606e <__hexdig_fun+0xe>
 8016068:	3820      	subs	r0, #32
 801606a:	b2c0      	uxtb	r0, r0
 801606c:	4770      	bx	lr
 801606e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016072:	2b05      	cmp	r3, #5
 8016074:	d801      	bhi.n	801607a <__hexdig_fun+0x1a>
 8016076:	3847      	subs	r0, #71	; 0x47
 8016078:	e7f7      	b.n	801606a <__hexdig_fun+0xa>
 801607a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801607e:	2b05      	cmp	r3, #5
 8016080:	d801      	bhi.n	8016086 <__hexdig_fun+0x26>
 8016082:	3827      	subs	r0, #39	; 0x27
 8016084:	e7f1      	b.n	801606a <__hexdig_fun+0xa>
 8016086:	2000      	movs	r0, #0
 8016088:	4770      	bx	lr

0801608a <__gethex>:
 801608a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801608e:	b08b      	sub	sp, #44	; 0x2c
 8016090:	468a      	mov	sl, r1
 8016092:	9002      	str	r0, [sp, #8]
 8016094:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016096:	9306      	str	r3, [sp, #24]
 8016098:	4690      	mov	r8, r2
 801609a:	f000 fadf 	bl	801665c <__localeconv_l>
 801609e:	6803      	ldr	r3, [r0, #0]
 80160a0:	9303      	str	r3, [sp, #12]
 80160a2:	4618      	mov	r0, r3
 80160a4:	f7ea f8ac 	bl	8000200 <strlen>
 80160a8:	9b03      	ldr	r3, [sp, #12]
 80160aa:	9001      	str	r0, [sp, #4]
 80160ac:	4403      	add	r3, r0
 80160ae:	f04f 0b00 	mov.w	fp, #0
 80160b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80160b6:	9307      	str	r3, [sp, #28]
 80160b8:	f8da 3000 	ldr.w	r3, [sl]
 80160bc:	3302      	adds	r3, #2
 80160be:	461f      	mov	r7, r3
 80160c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80160c4:	2830      	cmp	r0, #48	; 0x30
 80160c6:	d06c      	beq.n	80161a2 <__gethex+0x118>
 80160c8:	f7ff ffca 	bl	8016060 <__hexdig_fun>
 80160cc:	4604      	mov	r4, r0
 80160ce:	2800      	cmp	r0, #0
 80160d0:	d16a      	bne.n	80161a8 <__gethex+0x11e>
 80160d2:	9a01      	ldr	r2, [sp, #4]
 80160d4:	9903      	ldr	r1, [sp, #12]
 80160d6:	4638      	mov	r0, r7
 80160d8:	f001 fe34 	bl	8017d44 <strncmp>
 80160dc:	2800      	cmp	r0, #0
 80160de:	d166      	bne.n	80161ae <__gethex+0x124>
 80160e0:	9b01      	ldr	r3, [sp, #4]
 80160e2:	5cf8      	ldrb	r0, [r7, r3]
 80160e4:	18fe      	adds	r6, r7, r3
 80160e6:	f7ff ffbb 	bl	8016060 <__hexdig_fun>
 80160ea:	2800      	cmp	r0, #0
 80160ec:	d062      	beq.n	80161b4 <__gethex+0x12a>
 80160ee:	4633      	mov	r3, r6
 80160f0:	7818      	ldrb	r0, [r3, #0]
 80160f2:	2830      	cmp	r0, #48	; 0x30
 80160f4:	461f      	mov	r7, r3
 80160f6:	f103 0301 	add.w	r3, r3, #1
 80160fa:	d0f9      	beq.n	80160f0 <__gethex+0x66>
 80160fc:	f7ff ffb0 	bl	8016060 <__hexdig_fun>
 8016100:	fab0 f580 	clz	r5, r0
 8016104:	096d      	lsrs	r5, r5, #5
 8016106:	4634      	mov	r4, r6
 8016108:	f04f 0b01 	mov.w	fp, #1
 801610c:	463a      	mov	r2, r7
 801610e:	4616      	mov	r6, r2
 8016110:	3201      	adds	r2, #1
 8016112:	7830      	ldrb	r0, [r6, #0]
 8016114:	f7ff ffa4 	bl	8016060 <__hexdig_fun>
 8016118:	2800      	cmp	r0, #0
 801611a:	d1f8      	bne.n	801610e <__gethex+0x84>
 801611c:	9a01      	ldr	r2, [sp, #4]
 801611e:	9903      	ldr	r1, [sp, #12]
 8016120:	4630      	mov	r0, r6
 8016122:	f001 fe0f 	bl	8017d44 <strncmp>
 8016126:	b950      	cbnz	r0, 801613e <__gethex+0xb4>
 8016128:	b954      	cbnz	r4, 8016140 <__gethex+0xb6>
 801612a:	9b01      	ldr	r3, [sp, #4]
 801612c:	18f4      	adds	r4, r6, r3
 801612e:	4622      	mov	r2, r4
 8016130:	4616      	mov	r6, r2
 8016132:	3201      	adds	r2, #1
 8016134:	7830      	ldrb	r0, [r6, #0]
 8016136:	f7ff ff93 	bl	8016060 <__hexdig_fun>
 801613a:	2800      	cmp	r0, #0
 801613c:	d1f8      	bne.n	8016130 <__gethex+0xa6>
 801613e:	b10c      	cbz	r4, 8016144 <__gethex+0xba>
 8016140:	1ba4      	subs	r4, r4, r6
 8016142:	00a4      	lsls	r4, r4, #2
 8016144:	7833      	ldrb	r3, [r6, #0]
 8016146:	2b50      	cmp	r3, #80	; 0x50
 8016148:	d001      	beq.n	801614e <__gethex+0xc4>
 801614a:	2b70      	cmp	r3, #112	; 0x70
 801614c:	d140      	bne.n	80161d0 <__gethex+0x146>
 801614e:	7873      	ldrb	r3, [r6, #1]
 8016150:	2b2b      	cmp	r3, #43	; 0x2b
 8016152:	d031      	beq.n	80161b8 <__gethex+0x12e>
 8016154:	2b2d      	cmp	r3, #45	; 0x2d
 8016156:	d033      	beq.n	80161c0 <__gethex+0x136>
 8016158:	1c71      	adds	r1, r6, #1
 801615a:	f04f 0900 	mov.w	r9, #0
 801615e:	7808      	ldrb	r0, [r1, #0]
 8016160:	f7ff ff7e 	bl	8016060 <__hexdig_fun>
 8016164:	1e43      	subs	r3, r0, #1
 8016166:	b2db      	uxtb	r3, r3
 8016168:	2b18      	cmp	r3, #24
 801616a:	d831      	bhi.n	80161d0 <__gethex+0x146>
 801616c:	f1a0 0210 	sub.w	r2, r0, #16
 8016170:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016174:	f7ff ff74 	bl	8016060 <__hexdig_fun>
 8016178:	1e43      	subs	r3, r0, #1
 801617a:	b2db      	uxtb	r3, r3
 801617c:	2b18      	cmp	r3, #24
 801617e:	d922      	bls.n	80161c6 <__gethex+0x13c>
 8016180:	f1b9 0f00 	cmp.w	r9, #0
 8016184:	d000      	beq.n	8016188 <__gethex+0xfe>
 8016186:	4252      	negs	r2, r2
 8016188:	4414      	add	r4, r2
 801618a:	f8ca 1000 	str.w	r1, [sl]
 801618e:	b30d      	cbz	r5, 80161d4 <__gethex+0x14a>
 8016190:	f1bb 0f00 	cmp.w	fp, #0
 8016194:	bf0c      	ite	eq
 8016196:	2706      	moveq	r7, #6
 8016198:	2700      	movne	r7, #0
 801619a:	4638      	mov	r0, r7
 801619c:	b00b      	add	sp, #44	; 0x2c
 801619e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a2:	f10b 0b01 	add.w	fp, fp, #1
 80161a6:	e78a      	b.n	80160be <__gethex+0x34>
 80161a8:	2500      	movs	r5, #0
 80161aa:	462c      	mov	r4, r5
 80161ac:	e7ae      	b.n	801610c <__gethex+0x82>
 80161ae:	463e      	mov	r6, r7
 80161b0:	2501      	movs	r5, #1
 80161b2:	e7c7      	b.n	8016144 <__gethex+0xba>
 80161b4:	4604      	mov	r4, r0
 80161b6:	e7fb      	b.n	80161b0 <__gethex+0x126>
 80161b8:	f04f 0900 	mov.w	r9, #0
 80161bc:	1cb1      	adds	r1, r6, #2
 80161be:	e7ce      	b.n	801615e <__gethex+0xd4>
 80161c0:	f04f 0901 	mov.w	r9, #1
 80161c4:	e7fa      	b.n	80161bc <__gethex+0x132>
 80161c6:	230a      	movs	r3, #10
 80161c8:	fb03 0202 	mla	r2, r3, r2, r0
 80161cc:	3a10      	subs	r2, #16
 80161ce:	e7cf      	b.n	8016170 <__gethex+0xe6>
 80161d0:	4631      	mov	r1, r6
 80161d2:	e7da      	b.n	801618a <__gethex+0x100>
 80161d4:	1bf3      	subs	r3, r6, r7
 80161d6:	3b01      	subs	r3, #1
 80161d8:	4629      	mov	r1, r5
 80161da:	2b07      	cmp	r3, #7
 80161dc:	dc49      	bgt.n	8016272 <__gethex+0x1e8>
 80161de:	9802      	ldr	r0, [sp, #8]
 80161e0:	f000 fadc 	bl	801679c <_Balloc>
 80161e4:	9b01      	ldr	r3, [sp, #4]
 80161e6:	f100 0914 	add.w	r9, r0, #20
 80161ea:	f04f 0b00 	mov.w	fp, #0
 80161ee:	f1c3 0301 	rsb	r3, r3, #1
 80161f2:	4605      	mov	r5, r0
 80161f4:	f8cd 9010 	str.w	r9, [sp, #16]
 80161f8:	46da      	mov	sl, fp
 80161fa:	9308      	str	r3, [sp, #32]
 80161fc:	42b7      	cmp	r7, r6
 80161fe:	d33b      	bcc.n	8016278 <__gethex+0x1ee>
 8016200:	9804      	ldr	r0, [sp, #16]
 8016202:	f840 ab04 	str.w	sl, [r0], #4
 8016206:	eba0 0009 	sub.w	r0, r0, r9
 801620a:	1080      	asrs	r0, r0, #2
 801620c:	6128      	str	r0, [r5, #16]
 801620e:	0147      	lsls	r7, r0, #5
 8016210:	4650      	mov	r0, sl
 8016212:	f000 fb87 	bl	8016924 <__hi0bits>
 8016216:	f8d8 6000 	ldr.w	r6, [r8]
 801621a:	1a3f      	subs	r7, r7, r0
 801621c:	42b7      	cmp	r7, r6
 801621e:	dd64      	ble.n	80162ea <__gethex+0x260>
 8016220:	1bbf      	subs	r7, r7, r6
 8016222:	4639      	mov	r1, r7
 8016224:	4628      	mov	r0, r5
 8016226:	f000 fe97 	bl	8016f58 <__any_on>
 801622a:	4682      	mov	sl, r0
 801622c:	b178      	cbz	r0, 801624e <__gethex+0x1c4>
 801622e:	1e7b      	subs	r3, r7, #1
 8016230:	1159      	asrs	r1, r3, #5
 8016232:	f003 021f 	and.w	r2, r3, #31
 8016236:	f04f 0a01 	mov.w	sl, #1
 801623a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801623e:	fa0a f202 	lsl.w	r2, sl, r2
 8016242:	420a      	tst	r2, r1
 8016244:	d003      	beq.n	801624e <__gethex+0x1c4>
 8016246:	4553      	cmp	r3, sl
 8016248:	dc46      	bgt.n	80162d8 <__gethex+0x24e>
 801624a:	f04f 0a02 	mov.w	sl, #2
 801624e:	4639      	mov	r1, r7
 8016250:	4628      	mov	r0, r5
 8016252:	f7ff fecb 	bl	8015fec <rshift>
 8016256:	443c      	add	r4, r7
 8016258:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801625c:	42a3      	cmp	r3, r4
 801625e:	da52      	bge.n	8016306 <__gethex+0x27c>
 8016260:	4629      	mov	r1, r5
 8016262:	9802      	ldr	r0, [sp, #8]
 8016264:	f000 face 	bl	8016804 <_Bfree>
 8016268:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801626a:	2300      	movs	r3, #0
 801626c:	6013      	str	r3, [r2, #0]
 801626e:	27a3      	movs	r7, #163	; 0xa3
 8016270:	e793      	b.n	801619a <__gethex+0x110>
 8016272:	3101      	adds	r1, #1
 8016274:	105b      	asrs	r3, r3, #1
 8016276:	e7b0      	b.n	80161da <__gethex+0x150>
 8016278:	1e73      	subs	r3, r6, #1
 801627a:	9305      	str	r3, [sp, #20]
 801627c:	9a07      	ldr	r2, [sp, #28]
 801627e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016282:	4293      	cmp	r3, r2
 8016284:	d018      	beq.n	80162b8 <__gethex+0x22e>
 8016286:	f1bb 0f20 	cmp.w	fp, #32
 801628a:	d107      	bne.n	801629c <__gethex+0x212>
 801628c:	9b04      	ldr	r3, [sp, #16]
 801628e:	f8c3 a000 	str.w	sl, [r3]
 8016292:	3304      	adds	r3, #4
 8016294:	f04f 0a00 	mov.w	sl, #0
 8016298:	9304      	str	r3, [sp, #16]
 801629a:	46d3      	mov	fp, sl
 801629c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80162a0:	f7ff fede 	bl	8016060 <__hexdig_fun>
 80162a4:	f000 000f 	and.w	r0, r0, #15
 80162a8:	fa00 f00b 	lsl.w	r0, r0, fp
 80162ac:	ea4a 0a00 	orr.w	sl, sl, r0
 80162b0:	f10b 0b04 	add.w	fp, fp, #4
 80162b4:	9b05      	ldr	r3, [sp, #20]
 80162b6:	e00d      	b.n	80162d4 <__gethex+0x24a>
 80162b8:	9b05      	ldr	r3, [sp, #20]
 80162ba:	9a08      	ldr	r2, [sp, #32]
 80162bc:	4413      	add	r3, r2
 80162be:	42bb      	cmp	r3, r7
 80162c0:	d3e1      	bcc.n	8016286 <__gethex+0x1fc>
 80162c2:	4618      	mov	r0, r3
 80162c4:	9a01      	ldr	r2, [sp, #4]
 80162c6:	9903      	ldr	r1, [sp, #12]
 80162c8:	9309      	str	r3, [sp, #36]	; 0x24
 80162ca:	f001 fd3b 	bl	8017d44 <strncmp>
 80162ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162d0:	2800      	cmp	r0, #0
 80162d2:	d1d8      	bne.n	8016286 <__gethex+0x1fc>
 80162d4:	461e      	mov	r6, r3
 80162d6:	e791      	b.n	80161fc <__gethex+0x172>
 80162d8:	1eb9      	subs	r1, r7, #2
 80162da:	4628      	mov	r0, r5
 80162dc:	f000 fe3c 	bl	8016f58 <__any_on>
 80162e0:	2800      	cmp	r0, #0
 80162e2:	d0b2      	beq.n	801624a <__gethex+0x1c0>
 80162e4:	f04f 0a03 	mov.w	sl, #3
 80162e8:	e7b1      	b.n	801624e <__gethex+0x1c4>
 80162ea:	da09      	bge.n	8016300 <__gethex+0x276>
 80162ec:	1bf7      	subs	r7, r6, r7
 80162ee:	4629      	mov	r1, r5
 80162f0:	463a      	mov	r2, r7
 80162f2:	9802      	ldr	r0, [sp, #8]
 80162f4:	f000 fc52 	bl	8016b9c <__lshift>
 80162f8:	1be4      	subs	r4, r4, r7
 80162fa:	4605      	mov	r5, r0
 80162fc:	f100 0914 	add.w	r9, r0, #20
 8016300:	f04f 0a00 	mov.w	sl, #0
 8016304:	e7a8      	b.n	8016258 <__gethex+0x1ce>
 8016306:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801630a:	42a0      	cmp	r0, r4
 801630c:	dd6a      	ble.n	80163e4 <__gethex+0x35a>
 801630e:	1b04      	subs	r4, r0, r4
 8016310:	42a6      	cmp	r6, r4
 8016312:	dc2e      	bgt.n	8016372 <__gethex+0x2e8>
 8016314:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016318:	2b02      	cmp	r3, #2
 801631a:	d022      	beq.n	8016362 <__gethex+0x2d8>
 801631c:	2b03      	cmp	r3, #3
 801631e:	d024      	beq.n	801636a <__gethex+0x2e0>
 8016320:	2b01      	cmp	r3, #1
 8016322:	d115      	bne.n	8016350 <__gethex+0x2c6>
 8016324:	42a6      	cmp	r6, r4
 8016326:	d113      	bne.n	8016350 <__gethex+0x2c6>
 8016328:	2e01      	cmp	r6, #1
 801632a:	dc0b      	bgt.n	8016344 <__gethex+0x2ba>
 801632c:	9a06      	ldr	r2, [sp, #24]
 801632e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016332:	6013      	str	r3, [r2, #0]
 8016334:	2301      	movs	r3, #1
 8016336:	612b      	str	r3, [r5, #16]
 8016338:	f8c9 3000 	str.w	r3, [r9]
 801633c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801633e:	2762      	movs	r7, #98	; 0x62
 8016340:	601d      	str	r5, [r3, #0]
 8016342:	e72a      	b.n	801619a <__gethex+0x110>
 8016344:	1e71      	subs	r1, r6, #1
 8016346:	4628      	mov	r0, r5
 8016348:	f000 fe06 	bl	8016f58 <__any_on>
 801634c:	2800      	cmp	r0, #0
 801634e:	d1ed      	bne.n	801632c <__gethex+0x2a2>
 8016350:	4629      	mov	r1, r5
 8016352:	9802      	ldr	r0, [sp, #8]
 8016354:	f000 fa56 	bl	8016804 <_Bfree>
 8016358:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801635a:	2300      	movs	r3, #0
 801635c:	6013      	str	r3, [r2, #0]
 801635e:	2750      	movs	r7, #80	; 0x50
 8016360:	e71b      	b.n	801619a <__gethex+0x110>
 8016362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016364:	2b00      	cmp	r3, #0
 8016366:	d0e1      	beq.n	801632c <__gethex+0x2a2>
 8016368:	e7f2      	b.n	8016350 <__gethex+0x2c6>
 801636a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801636c:	2b00      	cmp	r3, #0
 801636e:	d1dd      	bne.n	801632c <__gethex+0x2a2>
 8016370:	e7ee      	b.n	8016350 <__gethex+0x2c6>
 8016372:	1e67      	subs	r7, r4, #1
 8016374:	f1ba 0f00 	cmp.w	sl, #0
 8016378:	d131      	bne.n	80163de <__gethex+0x354>
 801637a:	b127      	cbz	r7, 8016386 <__gethex+0x2fc>
 801637c:	4639      	mov	r1, r7
 801637e:	4628      	mov	r0, r5
 8016380:	f000 fdea 	bl	8016f58 <__any_on>
 8016384:	4682      	mov	sl, r0
 8016386:	117a      	asrs	r2, r7, #5
 8016388:	2301      	movs	r3, #1
 801638a:	f007 071f 	and.w	r7, r7, #31
 801638e:	fa03 f707 	lsl.w	r7, r3, r7
 8016392:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016396:	4621      	mov	r1, r4
 8016398:	421f      	tst	r7, r3
 801639a:	4628      	mov	r0, r5
 801639c:	bf18      	it	ne
 801639e:	f04a 0a02 	orrne.w	sl, sl, #2
 80163a2:	1b36      	subs	r6, r6, r4
 80163a4:	f7ff fe22 	bl	8015fec <rshift>
 80163a8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80163ac:	2702      	movs	r7, #2
 80163ae:	f1ba 0f00 	cmp.w	sl, #0
 80163b2:	d048      	beq.n	8016446 <__gethex+0x3bc>
 80163b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80163b8:	2b02      	cmp	r3, #2
 80163ba:	d015      	beq.n	80163e8 <__gethex+0x35e>
 80163bc:	2b03      	cmp	r3, #3
 80163be:	d017      	beq.n	80163f0 <__gethex+0x366>
 80163c0:	2b01      	cmp	r3, #1
 80163c2:	d109      	bne.n	80163d8 <__gethex+0x34e>
 80163c4:	f01a 0f02 	tst.w	sl, #2
 80163c8:	d006      	beq.n	80163d8 <__gethex+0x34e>
 80163ca:	f8d9 3000 	ldr.w	r3, [r9]
 80163ce:	ea4a 0a03 	orr.w	sl, sl, r3
 80163d2:	f01a 0f01 	tst.w	sl, #1
 80163d6:	d10e      	bne.n	80163f6 <__gethex+0x36c>
 80163d8:	f047 0710 	orr.w	r7, r7, #16
 80163dc:	e033      	b.n	8016446 <__gethex+0x3bc>
 80163de:	f04f 0a01 	mov.w	sl, #1
 80163e2:	e7d0      	b.n	8016386 <__gethex+0x2fc>
 80163e4:	2701      	movs	r7, #1
 80163e6:	e7e2      	b.n	80163ae <__gethex+0x324>
 80163e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163ea:	f1c3 0301 	rsb	r3, r3, #1
 80163ee:	9315      	str	r3, [sp, #84]	; 0x54
 80163f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d0f0      	beq.n	80163d8 <__gethex+0x34e>
 80163f6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80163fa:	f105 0314 	add.w	r3, r5, #20
 80163fe:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8016402:	eb03 010a 	add.w	r1, r3, sl
 8016406:	f04f 0c00 	mov.w	ip, #0
 801640a:	4618      	mov	r0, r3
 801640c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016410:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016414:	d01c      	beq.n	8016450 <__gethex+0x3c6>
 8016416:	3201      	adds	r2, #1
 8016418:	6002      	str	r2, [r0, #0]
 801641a:	2f02      	cmp	r7, #2
 801641c:	f105 0314 	add.w	r3, r5, #20
 8016420:	d138      	bne.n	8016494 <__gethex+0x40a>
 8016422:	f8d8 2000 	ldr.w	r2, [r8]
 8016426:	3a01      	subs	r2, #1
 8016428:	42b2      	cmp	r2, r6
 801642a:	d10a      	bne.n	8016442 <__gethex+0x3b8>
 801642c:	1171      	asrs	r1, r6, #5
 801642e:	2201      	movs	r2, #1
 8016430:	f006 061f 	and.w	r6, r6, #31
 8016434:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016438:	fa02 f606 	lsl.w	r6, r2, r6
 801643c:	421e      	tst	r6, r3
 801643e:	bf18      	it	ne
 8016440:	4617      	movne	r7, r2
 8016442:	f047 0720 	orr.w	r7, r7, #32
 8016446:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016448:	601d      	str	r5, [r3, #0]
 801644a:	9b06      	ldr	r3, [sp, #24]
 801644c:	601c      	str	r4, [r3, #0]
 801644e:	e6a4      	b.n	801619a <__gethex+0x110>
 8016450:	4299      	cmp	r1, r3
 8016452:	f843 cc04 	str.w	ip, [r3, #-4]
 8016456:	d8d8      	bhi.n	801640a <__gethex+0x380>
 8016458:	68ab      	ldr	r3, [r5, #8]
 801645a:	4599      	cmp	r9, r3
 801645c:	db12      	blt.n	8016484 <__gethex+0x3fa>
 801645e:	6869      	ldr	r1, [r5, #4]
 8016460:	9802      	ldr	r0, [sp, #8]
 8016462:	3101      	adds	r1, #1
 8016464:	f000 f99a 	bl	801679c <_Balloc>
 8016468:	692a      	ldr	r2, [r5, #16]
 801646a:	3202      	adds	r2, #2
 801646c:	f105 010c 	add.w	r1, r5, #12
 8016470:	4683      	mov	fp, r0
 8016472:	0092      	lsls	r2, r2, #2
 8016474:	300c      	adds	r0, #12
 8016476:	f7fc fe97 	bl	80131a8 <memcpy>
 801647a:	4629      	mov	r1, r5
 801647c:	9802      	ldr	r0, [sp, #8]
 801647e:	f000 f9c1 	bl	8016804 <_Bfree>
 8016482:	465d      	mov	r5, fp
 8016484:	692b      	ldr	r3, [r5, #16]
 8016486:	1c5a      	adds	r2, r3, #1
 8016488:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801648c:	612a      	str	r2, [r5, #16]
 801648e:	2201      	movs	r2, #1
 8016490:	615a      	str	r2, [r3, #20]
 8016492:	e7c2      	b.n	801641a <__gethex+0x390>
 8016494:	692a      	ldr	r2, [r5, #16]
 8016496:	454a      	cmp	r2, r9
 8016498:	dd0b      	ble.n	80164b2 <__gethex+0x428>
 801649a:	2101      	movs	r1, #1
 801649c:	4628      	mov	r0, r5
 801649e:	f7ff fda5 	bl	8015fec <rshift>
 80164a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80164a6:	3401      	adds	r4, #1
 80164a8:	42a3      	cmp	r3, r4
 80164aa:	f6ff aed9 	blt.w	8016260 <__gethex+0x1d6>
 80164ae:	2701      	movs	r7, #1
 80164b0:	e7c7      	b.n	8016442 <__gethex+0x3b8>
 80164b2:	f016 061f 	ands.w	r6, r6, #31
 80164b6:	d0fa      	beq.n	80164ae <__gethex+0x424>
 80164b8:	449a      	add	sl, r3
 80164ba:	f1c6 0620 	rsb	r6, r6, #32
 80164be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80164c2:	f000 fa2f 	bl	8016924 <__hi0bits>
 80164c6:	42b0      	cmp	r0, r6
 80164c8:	dbe7      	blt.n	801649a <__gethex+0x410>
 80164ca:	e7f0      	b.n	80164ae <__gethex+0x424>

080164cc <L_shift>:
 80164cc:	f1c2 0208 	rsb	r2, r2, #8
 80164d0:	0092      	lsls	r2, r2, #2
 80164d2:	b570      	push	{r4, r5, r6, lr}
 80164d4:	f1c2 0620 	rsb	r6, r2, #32
 80164d8:	6843      	ldr	r3, [r0, #4]
 80164da:	6804      	ldr	r4, [r0, #0]
 80164dc:	fa03 f506 	lsl.w	r5, r3, r6
 80164e0:	432c      	orrs	r4, r5
 80164e2:	40d3      	lsrs	r3, r2
 80164e4:	6004      	str	r4, [r0, #0]
 80164e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80164ea:	4288      	cmp	r0, r1
 80164ec:	d3f4      	bcc.n	80164d8 <L_shift+0xc>
 80164ee:	bd70      	pop	{r4, r5, r6, pc}

080164f0 <__match>:
 80164f0:	b530      	push	{r4, r5, lr}
 80164f2:	6803      	ldr	r3, [r0, #0]
 80164f4:	3301      	adds	r3, #1
 80164f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164fa:	b914      	cbnz	r4, 8016502 <__match+0x12>
 80164fc:	6003      	str	r3, [r0, #0]
 80164fe:	2001      	movs	r0, #1
 8016500:	bd30      	pop	{r4, r5, pc}
 8016502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016506:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801650a:	2d19      	cmp	r5, #25
 801650c:	bf98      	it	ls
 801650e:	3220      	addls	r2, #32
 8016510:	42a2      	cmp	r2, r4
 8016512:	d0f0      	beq.n	80164f6 <__match+0x6>
 8016514:	2000      	movs	r0, #0
 8016516:	e7f3      	b.n	8016500 <__match+0x10>

08016518 <__hexnan>:
 8016518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801651c:	680b      	ldr	r3, [r1, #0]
 801651e:	6801      	ldr	r1, [r0, #0]
 8016520:	115f      	asrs	r7, r3, #5
 8016522:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016526:	f013 031f 	ands.w	r3, r3, #31
 801652a:	b087      	sub	sp, #28
 801652c:	bf18      	it	ne
 801652e:	3704      	addne	r7, #4
 8016530:	2500      	movs	r5, #0
 8016532:	1f3e      	subs	r6, r7, #4
 8016534:	4682      	mov	sl, r0
 8016536:	4690      	mov	r8, r2
 8016538:	9301      	str	r3, [sp, #4]
 801653a:	f847 5c04 	str.w	r5, [r7, #-4]
 801653e:	46b1      	mov	r9, r6
 8016540:	4634      	mov	r4, r6
 8016542:	9502      	str	r5, [sp, #8]
 8016544:	46ab      	mov	fp, r5
 8016546:	784a      	ldrb	r2, [r1, #1]
 8016548:	1c4b      	adds	r3, r1, #1
 801654a:	9303      	str	r3, [sp, #12]
 801654c:	b342      	cbz	r2, 80165a0 <__hexnan+0x88>
 801654e:	4610      	mov	r0, r2
 8016550:	9105      	str	r1, [sp, #20]
 8016552:	9204      	str	r2, [sp, #16]
 8016554:	f7ff fd84 	bl	8016060 <__hexdig_fun>
 8016558:	2800      	cmp	r0, #0
 801655a:	d143      	bne.n	80165e4 <__hexnan+0xcc>
 801655c:	9a04      	ldr	r2, [sp, #16]
 801655e:	9905      	ldr	r1, [sp, #20]
 8016560:	2a20      	cmp	r2, #32
 8016562:	d818      	bhi.n	8016596 <__hexnan+0x7e>
 8016564:	9b02      	ldr	r3, [sp, #8]
 8016566:	459b      	cmp	fp, r3
 8016568:	dd13      	ble.n	8016592 <__hexnan+0x7a>
 801656a:	454c      	cmp	r4, r9
 801656c:	d206      	bcs.n	801657c <__hexnan+0x64>
 801656e:	2d07      	cmp	r5, #7
 8016570:	dc04      	bgt.n	801657c <__hexnan+0x64>
 8016572:	462a      	mov	r2, r5
 8016574:	4649      	mov	r1, r9
 8016576:	4620      	mov	r0, r4
 8016578:	f7ff ffa8 	bl	80164cc <L_shift>
 801657c:	4544      	cmp	r4, r8
 801657e:	d944      	bls.n	801660a <__hexnan+0xf2>
 8016580:	2300      	movs	r3, #0
 8016582:	f1a4 0904 	sub.w	r9, r4, #4
 8016586:	f844 3c04 	str.w	r3, [r4, #-4]
 801658a:	f8cd b008 	str.w	fp, [sp, #8]
 801658e:	464c      	mov	r4, r9
 8016590:	461d      	mov	r5, r3
 8016592:	9903      	ldr	r1, [sp, #12]
 8016594:	e7d7      	b.n	8016546 <__hexnan+0x2e>
 8016596:	2a29      	cmp	r2, #41	; 0x29
 8016598:	d14a      	bne.n	8016630 <__hexnan+0x118>
 801659a:	3102      	adds	r1, #2
 801659c:	f8ca 1000 	str.w	r1, [sl]
 80165a0:	f1bb 0f00 	cmp.w	fp, #0
 80165a4:	d044      	beq.n	8016630 <__hexnan+0x118>
 80165a6:	454c      	cmp	r4, r9
 80165a8:	d206      	bcs.n	80165b8 <__hexnan+0xa0>
 80165aa:	2d07      	cmp	r5, #7
 80165ac:	dc04      	bgt.n	80165b8 <__hexnan+0xa0>
 80165ae:	462a      	mov	r2, r5
 80165b0:	4649      	mov	r1, r9
 80165b2:	4620      	mov	r0, r4
 80165b4:	f7ff ff8a 	bl	80164cc <L_shift>
 80165b8:	4544      	cmp	r4, r8
 80165ba:	d928      	bls.n	801660e <__hexnan+0xf6>
 80165bc:	4643      	mov	r3, r8
 80165be:	f854 2b04 	ldr.w	r2, [r4], #4
 80165c2:	f843 2b04 	str.w	r2, [r3], #4
 80165c6:	42a6      	cmp	r6, r4
 80165c8:	d2f9      	bcs.n	80165be <__hexnan+0xa6>
 80165ca:	2200      	movs	r2, #0
 80165cc:	f843 2b04 	str.w	r2, [r3], #4
 80165d0:	429e      	cmp	r6, r3
 80165d2:	d2fb      	bcs.n	80165cc <__hexnan+0xb4>
 80165d4:	6833      	ldr	r3, [r6, #0]
 80165d6:	b91b      	cbnz	r3, 80165e0 <__hexnan+0xc8>
 80165d8:	4546      	cmp	r6, r8
 80165da:	d127      	bne.n	801662c <__hexnan+0x114>
 80165dc:	2301      	movs	r3, #1
 80165de:	6033      	str	r3, [r6, #0]
 80165e0:	2005      	movs	r0, #5
 80165e2:	e026      	b.n	8016632 <__hexnan+0x11a>
 80165e4:	3501      	adds	r5, #1
 80165e6:	2d08      	cmp	r5, #8
 80165e8:	f10b 0b01 	add.w	fp, fp, #1
 80165ec:	dd06      	ble.n	80165fc <__hexnan+0xe4>
 80165ee:	4544      	cmp	r4, r8
 80165f0:	d9cf      	bls.n	8016592 <__hexnan+0x7a>
 80165f2:	2300      	movs	r3, #0
 80165f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80165f8:	2501      	movs	r5, #1
 80165fa:	3c04      	subs	r4, #4
 80165fc:	6822      	ldr	r2, [r4, #0]
 80165fe:	f000 000f 	and.w	r0, r0, #15
 8016602:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016606:	6020      	str	r0, [r4, #0]
 8016608:	e7c3      	b.n	8016592 <__hexnan+0x7a>
 801660a:	2508      	movs	r5, #8
 801660c:	e7c1      	b.n	8016592 <__hexnan+0x7a>
 801660e:	9b01      	ldr	r3, [sp, #4]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d0df      	beq.n	80165d4 <__hexnan+0xbc>
 8016614:	f04f 32ff 	mov.w	r2, #4294967295
 8016618:	f1c3 0320 	rsb	r3, r3, #32
 801661c:	fa22 f303 	lsr.w	r3, r2, r3
 8016620:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016624:	401a      	ands	r2, r3
 8016626:	f847 2c04 	str.w	r2, [r7, #-4]
 801662a:	e7d3      	b.n	80165d4 <__hexnan+0xbc>
 801662c:	3e04      	subs	r6, #4
 801662e:	e7d1      	b.n	80165d4 <__hexnan+0xbc>
 8016630:	2004      	movs	r0, #4
 8016632:	b007      	add	sp, #28
 8016634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016638 <__locale_ctype_ptr_l>:
 8016638:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801663c:	4770      	bx	lr
	...

08016640 <__locale_ctype_ptr>:
 8016640:	4b04      	ldr	r3, [pc, #16]	; (8016654 <__locale_ctype_ptr+0x14>)
 8016642:	4a05      	ldr	r2, [pc, #20]	; (8016658 <__locale_ctype_ptr+0x18>)
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	6a1b      	ldr	r3, [r3, #32]
 8016648:	2b00      	cmp	r3, #0
 801664a:	bf08      	it	eq
 801664c:	4613      	moveq	r3, r2
 801664e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016652:	4770      	bx	lr
 8016654:	2000000c 	.word	0x2000000c
 8016658:	20000070 	.word	0x20000070

0801665c <__localeconv_l>:
 801665c:	30f0      	adds	r0, #240	; 0xf0
 801665e:	4770      	bx	lr

08016660 <_localeconv_r>:
 8016660:	4b04      	ldr	r3, [pc, #16]	; (8016674 <_localeconv_r+0x14>)
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	6a18      	ldr	r0, [r3, #32]
 8016666:	4b04      	ldr	r3, [pc, #16]	; (8016678 <_localeconv_r+0x18>)
 8016668:	2800      	cmp	r0, #0
 801666a:	bf08      	it	eq
 801666c:	4618      	moveq	r0, r3
 801666e:	30f0      	adds	r0, #240	; 0xf0
 8016670:	4770      	bx	lr
 8016672:	bf00      	nop
 8016674:	2000000c 	.word	0x2000000c
 8016678:	20000070 	.word	0x20000070

0801667c <_lseek_r>:
 801667c:	b538      	push	{r3, r4, r5, lr}
 801667e:	4c07      	ldr	r4, [pc, #28]	; (801669c <_lseek_r+0x20>)
 8016680:	4605      	mov	r5, r0
 8016682:	4608      	mov	r0, r1
 8016684:	4611      	mov	r1, r2
 8016686:	2200      	movs	r2, #0
 8016688:	6022      	str	r2, [r4, #0]
 801668a:	461a      	mov	r2, r3
 801668c:	f7ef fc22 	bl	8005ed4 <_lseek>
 8016690:	1c43      	adds	r3, r0, #1
 8016692:	d102      	bne.n	801669a <_lseek_r+0x1e>
 8016694:	6823      	ldr	r3, [r4, #0]
 8016696:	b103      	cbz	r3, 801669a <_lseek_r+0x1e>
 8016698:	602b      	str	r3, [r5, #0]
 801669a:	bd38      	pop	{r3, r4, r5, pc}
 801669c:	20037fac 	.word	0x20037fac

080166a0 <__swhatbuf_r>:
 80166a0:	b570      	push	{r4, r5, r6, lr}
 80166a2:	460e      	mov	r6, r1
 80166a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166a8:	2900      	cmp	r1, #0
 80166aa:	b096      	sub	sp, #88	; 0x58
 80166ac:	4614      	mov	r4, r2
 80166ae:	461d      	mov	r5, r3
 80166b0:	da07      	bge.n	80166c2 <__swhatbuf_r+0x22>
 80166b2:	2300      	movs	r3, #0
 80166b4:	602b      	str	r3, [r5, #0]
 80166b6:	89b3      	ldrh	r3, [r6, #12]
 80166b8:	061a      	lsls	r2, r3, #24
 80166ba:	d410      	bmi.n	80166de <__swhatbuf_r+0x3e>
 80166bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80166c0:	e00e      	b.n	80166e0 <__swhatbuf_r+0x40>
 80166c2:	466a      	mov	r2, sp
 80166c4:	f001 fc24 	bl	8017f10 <_fstat_r>
 80166c8:	2800      	cmp	r0, #0
 80166ca:	dbf2      	blt.n	80166b2 <__swhatbuf_r+0x12>
 80166cc:	9a01      	ldr	r2, [sp, #4]
 80166ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80166d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80166d6:	425a      	negs	r2, r3
 80166d8:	415a      	adcs	r2, r3
 80166da:	602a      	str	r2, [r5, #0]
 80166dc:	e7ee      	b.n	80166bc <__swhatbuf_r+0x1c>
 80166de:	2340      	movs	r3, #64	; 0x40
 80166e0:	2000      	movs	r0, #0
 80166e2:	6023      	str	r3, [r4, #0]
 80166e4:	b016      	add	sp, #88	; 0x58
 80166e6:	bd70      	pop	{r4, r5, r6, pc}

080166e8 <__smakebuf_r>:
 80166e8:	898b      	ldrh	r3, [r1, #12]
 80166ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80166ec:	079d      	lsls	r5, r3, #30
 80166ee:	4606      	mov	r6, r0
 80166f0:	460c      	mov	r4, r1
 80166f2:	d507      	bpl.n	8016704 <__smakebuf_r+0x1c>
 80166f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80166f8:	6023      	str	r3, [r4, #0]
 80166fa:	6123      	str	r3, [r4, #16]
 80166fc:	2301      	movs	r3, #1
 80166fe:	6163      	str	r3, [r4, #20]
 8016700:	b002      	add	sp, #8
 8016702:	bd70      	pop	{r4, r5, r6, pc}
 8016704:	ab01      	add	r3, sp, #4
 8016706:	466a      	mov	r2, sp
 8016708:	f7ff ffca 	bl	80166a0 <__swhatbuf_r>
 801670c:	9900      	ldr	r1, [sp, #0]
 801670e:	4605      	mov	r5, r0
 8016710:	4630      	mov	r0, r6
 8016712:	f000 fc9f 	bl	8017054 <_malloc_r>
 8016716:	b948      	cbnz	r0, 801672c <__smakebuf_r+0x44>
 8016718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801671c:	059a      	lsls	r2, r3, #22
 801671e:	d4ef      	bmi.n	8016700 <__smakebuf_r+0x18>
 8016720:	f023 0303 	bic.w	r3, r3, #3
 8016724:	f043 0302 	orr.w	r3, r3, #2
 8016728:	81a3      	strh	r3, [r4, #12]
 801672a:	e7e3      	b.n	80166f4 <__smakebuf_r+0xc>
 801672c:	4b0d      	ldr	r3, [pc, #52]	; (8016764 <__smakebuf_r+0x7c>)
 801672e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016730:	89a3      	ldrh	r3, [r4, #12]
 8016732:	6020      	str	r0, [r4, #0]
 8016734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016738:	81a3      	strh	r3, [r4, #12]
 801673a:	9b00      	ldr	r3, [sp, #0]
 801673c:	6163      	str	r3, [r4, #20]
 801673e:	9b01      	ldr	r3, [sp, #4]
 8016740:	6120      	str	r0, [r4, #16]
 8016742:	b15b      	cbz	r3, 801675c <__smakebuf_r+0x74>
 8016744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016748:	4630      	mov	r0, r6
 801674a:	f001 fbf3 	bl	8017f34 <_isatty_r>
 801674e:	b128      	cbz	r0, 801675c <__smakebuf_r+0x74>
 8016750:	89a3      	ldrh	r3, [r4, #12]
 8016752:	f023 0303 	bic.w	r3, r3, #3
 8016756:	f043 0301 	orr.w	r3, r3, #1
 801675a:	81a3      	strh	r3, [r4, #12]
 801675c:	89a3      	ldrh	r3, [r4, #12]
 801675e:	431d      	orrs	r5, r3
 8016760:	81a5      	strh	r5, [r4, #12]
 8016762:	e7cd      	b.n	8016700 <__smakebuf_r+0x18>
 8016764:	08015ea1 	.word	0x08015ea1

08016768 <malloc>:
 8016768:	4b02      	ldr	r3, [pc, #8]	; (8016774 <malloc+0xc>)
 801676a:	4601      	mov	r1, r0
 801676c:	6818      	ldr	r0, [r3, #0]
 801676e:	f000 bc71 	b.w	8017054 <_malloc_r>
 8016772:	bf00      	nop
 8016774:	2000000c 	.word	0x2000000c

08016778 <__ascii_mbtowc>:
 8016778:	b082      	sub	sp, #8
 801677a:	b901      	cbnz	r1, 801677e <__ascii_mbtowc+0x6>
 801677c:	a901      	add	r1, sp, #4
 801677e:	b142      	cbz	r2, 8016792 <__ascii_mbtowc+0x1a>
 8016780:	b14b      	cbz	r3, 8016796 <__ascii_mbtowc+0x1e>
 8016782:	7813      	ldrb	r3, [r2, #0]
 8016784:	600b      	str	r3, [r1, #0]
 8016786:	7812      	ldrb	r2, [r2, #0]
 8016788:	1c10      	adds	r0, r2, #0
 801678a:	bf18      	it	ne
 801678c:	2001      	movne	r0, #1
 801678e:	b002      	add	sp, #8
 8016790:	4770      	bx	lr
 8016792:	4610      	mov	r0, r2
 8016794:	e7fb      	b.n	801678e <__ascii_mbtowc+0x16>
 8016796:	f06f 0001 	mvn.w	r0, #1
 801679a:	e7f8      	b.n	801678e <__ascii_mbtowc+0x16>

0801679c <_Balloc>:
 801679c:	b570      	push	{r4, r5, r6, lr}
 801679e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80167a0:	4604      	mov	r4, r0
 80167a2:	460e      	mov	r6, r1
 80167a4:	b93d      	cbnz	r5, 80167b6 <_Balloc+0x1a>
 80167a6:	2010      	movs	r0, #16
 80167a8:	f7ff ffde 	bl	8016768 <malloc>
 80167ac:	6260      	str	r0, [r4, #36]	; 0x24
 80167ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80167b2:	6005      	str	r5, [r0, #0]
 80167b4:	60c5      	str	r5, [r0, #12]
 80167b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80167b8:	68eb      	ldr	r3, [r5, #12]
 80167ba:	b183      	cbz	r3, 80167de <_Balloc+0x42>
 80167bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167be:	68db      	ldr	r3, [r3, #12]
 80167c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80167c4:	b9b8      	cbnz	r0, 80167f6 <_Balloc+0x5a>
 80167c6:	2101      	movs	r1, #1
 80167c8:	fa01 f506 	lsl.w	r5, r1, r6
 80167cc:	1d6a      	adds	r2, r5, #5
 80167ce:	0092      	lsls	r2, r2, #2
 80167d0:	4620      	mov	r0, r4
 80167d2:	f000 fbe2 	bl	8016f9a <_calloc_r>
 80167d6:	b160      	cbz	r0, 80167f2 <_Balloc+0x56>
 80167d8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80167dc:	e00e      	b.n	80167fc <_Balloc+0x60>
 80167de:	2221      	movs	r2, #33	; 0x21
 80167e0:	2104      	movs	r1, #4
 80167e2:	4620      	mov	r0, r4
 80167e4:	f000 fbd9 	bl	8016f9a <_calloc_r>
 80167e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167ea:	60e8      	str	r0, [r5, #12]
 80167ec:	68db      	ldr	r3, [r3, #12]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d1e4      	bne.n	80167bc <_Balloc+0x20>
 80167f2:	2000      	movs	r0, #0
 80167f4:	bd70      	pop	{r4, r5, r6, pc}
 80167f6:	6802      	ldr	r2, [r0, #0]
 80167f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80167fc:	2300      	movs	r3, #0
 80167fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016802:	e7f7      	b.n	80167f4 <_Balloc+0x58>

08016804 <_Bfree>:
 8016804:	b570      	push	{r4, r5, r6, lr}
 8016806:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016808:	4606      	mov	r6, r0
 801680a:	460d      	mov	r5, r1
 801680c:	b93c      	cbnz	r4, 801681e <_Bfree+0x1a>
 801680e:	2010      	movs	r0, #16
 8016810:	f7ff ffaa 	bl	8016768 <malloc>
 8016814:	6270      	str	r0, [r6, #36]	; 0x24
 8016816:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801681a:	6004      	str	r4, [r0, #0]
 801681c:	60c4      	str	r4, [r0, #12]
 801681e:	b13d      	cbz	r5, 8016830 <_Bfree+0x2c>
 8016820:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016822:	686a      	ldr	r2, [r5, #4]
 8016824:	68db      	ldr	r3, [r3, #12]
 8016826:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801682a:	6029      	str	r1, [r5, #0]
 801682c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016830:	bd70      	pop	{r4, r5, r6, pc}

08016832 <__multadd>:
 8016832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016836:	690d      	ldr	r5, [r1, #16]
 8016838:	461f      	mov	r7, r3
 801683a:	4606      	mov	r6, r0
 801683c:	460c      	mov	r4, r1
 801683e:	f101 0c14 	add.w	ip, r1, #20
 8016842:	2300      	movs	r3, #0
 8016844:	f8dc 0000 	ldr.w	r0, [ip]
 8016848:	b281      	uxth	r1, r0
 801684a:	fb02 7101 	mla	r1, r2, r1, r7
 801684e:	0c0f      	lsrs	r7, r1, #16
 8016850:	0c00      	lsrs	r0, r0, #16
 8016852:	fb02 7000 	mla	r0, r2, r0, r7
 8016856:	b289      	uxth	r1, r1
 8016858:	3301      	adds	r3, #1
 801685a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801685e:	429d      	cmp	r5, r3
 8016860:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016864:	f84c 1b04 	str.w	r1, [ip], #4
 8016868:	dcec      	bgt.n	8016844 <__multadd+0x12>
 801686a:	b1d7      	cbz	r7, 80168a2 <__multadd+0x70>
 801686c:	68a3      	ldr	r3, [r4, #8]
 801686e:	42ab      	cmp	r3, r5
 8016870:	dc12      	bgt.n	8016898 <__multadd+0x66>
 8016872:	6861      	ldr	r1, [r4, #4]
 8016874:	4630      	mov	r0, r6
 8016876:	3101      	adds	r1, #1
 8016878:	f7ff ff90 	bl	801679c <_Balloc>
 801687c:	6922      	ldr	r2, [r4, #16]
 801687e:	3202      	adds	r2, #2
 8016880:	f104 010c 	add.w	r1, r4, #12
 8016884:	4680      	mov	r8, r0
 8016886:	0092      	lsls	r2, r2, #2
 8016888:	300c      	adds	r0, #12
 801688a:	f7fc fc8d 	bl	80131a8 <memcpy>
 801688e:	4621      	mov	r1, r4
 8016890:	4630      	mov	r0, r6
 8016892:	f7ff ffb7 	bl	8016804 <_Bfree>
 8016896:	4644      	mov	r4, r8
 8016898:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801689c:	3501      	adds	r5, #1
 801689e:	615f      	str	r7, [r3, #20]
 80168a0:	6125      	str	r5, [r4, #16]
 80168a2:	4620      	mov	r0, r4
 80168a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080168a8 <__s2b>:
 80168a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168ac:	460c      	mov	r4, r1
 80168ae:	4615      	mov	r5, r2
 80168b0:	461f      	mov	r7, r3
 80168b2:	2209      	movs	r2, #9
 80168b4:	3308      	adds	r3, #8
 80168b6:	4606      	mov	r6, r0
 80168b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80168bc:	2100      	movs	r1, #0
 80168be:	2201      	movs	r2, #1
 80168c0:	429a      	cmp	r2, r3
 80168c2:	db20      	blt.n	8016906 <__s2b+0x5e>
 80168c4:	4630      	mov	r0, r6
 80168c6:	f7ff ff69 	bl	801679c <_Balloc>
 80168ca:	9b08      	ldr	r3, [sp, #32]
 80168cc:	6143      	str	r3, [r0, #20]
 80168ce:	2d09      	cmp	r5, #9
 80168d0:	f04f 0301 	mov.w	r3, #1
 80168d4:	6103      	str	r3, [r0, #16]
 80168d6:	dd19      	ble.n	801690c <__s2b+0x64>
 80168d8:	f104 0809 	add.w	r8, r4, #9
 80168dc:	46c1      	mov	r9, r8
 80168de:	442c      	add	r4, r5
 80168e0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80168e4:	4601      	mov	r1, r0
 80168e6:	3b30      	subs	r3, #48	; 0x30
 80168e8:	220a      	movs	r2, #10
 80168ea:	4630      	mov	r0, r6
 80168ec:	f7ff ffa1 	bl	8016832 <__multadd>
 80168f0:	45a1      	cmp	r9, r4
 80168f2:	d1f5      	bne.n	80168e0 <__s2b+0x38>
 80168f4:	eb08 0405 	add.w	r4, r8, r5
 80168f8:	3c08      	subs	r4, #8
 80168fa:	1b2d      	subs	r5, r5, r4
 80168fc:	1963      	adds	r3, r4, r5
 80168fe:	42bb      	cmp	r3, r7
 8016900:	db07      	blt.n	8016912 <__s2b+0x6a>
 8016902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016906:	0052      	lsls	r2, r2, #1
 8016908:	3101      	adds	r1, #1
 801690a:	e7d9      	b.n	80168c0 <__s2b+0x18>
 801690c:	340a      	adds	r4, #10
 801690e:	2509      	movs	r5, #9
 8016910:	e7f3      	b.n	80168fa <__s2b+0x52>
 8016912:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016916:	4601      	mov	r1, r0
 8016918:	3b30      	subs	r3, #48	; 0x30
 801691a:	220a      	movs	r2, #10
 801691c:	4630      	mov	r0, r6
 801691e:	f7ff ff88 	bl	8016832 <__multadd>
 8016922:	e7eb      	b.n	80168fc <__s2b+0x54>

08016924 <__hi0bits>:
 8016924:	0c02      	lsrs	r2, r0, #16
 8016926:	0412      	lsls	r2, r2, #16
 8016928:	4603      	mov	r3, r0
 801692a:	b9b2      	cbnz	r2, 801695a <__hi0bits+0x36>
 801692c:	0403      	lsls	r3, r0, #16
 801692e:	2010      	movs	r0, #16
 8016930:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016934:	bf04      	itt	eq
 8016936:	021b      	lsleq	r3, r3, #8
 8016938:	3008      	addeq	r0, #8
 801693a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801693e:	bf04      	itt	eq
 8016940:	011b      	lsleq	r3, r3, #4
 8016942:	3004      	addeq	r0, #4
 8016944:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016948:	bf04      	itt	eq
 801694a:	009b      	lsleq	r3, r3, #2
 801694c:	3002      	addeq	r0, #2
 801694e:	2b00      	cmp	r3, #0
 8016950:	db06      	blt.n	8016960 <__hi0bits+0x3c>
 8016952:	005b      	lsls	r3, r3, #1
 8016954:	d503      	bpl.n	801695e <__hi0bits+0x3a>
 8016956:	3001      	adds	r0, #1
 8016958:	4770      	bx	lr
 801695a:	2000      	movs	r0, #0
 801695c:	e7e8      	b.n	8016930 <__hi0bits+0xc>
 801695e:	2020      	movs	r0, #32
 8016960:	4770      	bx	lr

08016962 <__lo0bits>:
 8016962:	6803      	ldr	r3, [r0, #0]
 8016964:	f013 0207 	ands.w	r2, r3, #7
 8016968:	4601      	mov	r1, r0
 801696a:	d00b      	beq.n	8016984 <__lo0bits+0x22>
 801696c:	07da      	lsls	r2, r3, #31
 801696e:	d423      	bmi.n	80169b8 <__lo0bits+0x56>
 8016970:	0798      	lsls	r0, r3, #30
 8016972:	bf49      	itett	mi
 8016974:	085b      	lsrmi	r3, r3, #1
 8016976:	089b      	lsrpl	r3, r3, #2
 8016978:	2001      	movmi	r0, #1
 801697a:	600b      	strmi	r3, [r1, #0]
 801697c:	bf5c      	itt	pl
 801697e:	600b      	strpl	r3, [r1, #0]
 8016980:	2002      	movpl	r0, #2
 8016982:	4770      	bx	lr
 8016984:	b298      	uxth	r0, r3
 8016986:	b9a8      	cbnz	r0, 80169b4 <__lo0bits+0x52>
 8016988:	0c1b      	lsrs	r3, r3, #16
 801698a:	2010      	movs	r0, #16
 801698c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016990:	bf04      	itt	eq
 8016992:	0a1b      	lsreq	r3, r3, #8
 8016994:	3008      	addeq	r0, #8
 8016996:	071a      	lsls	r2, r3, #28
 8016998:	bf04      	itt	eq
 801699a:	091b      	lsreq	r3, r3, #4
 801699c:	3004      	addeq	r0, #4
 801699e:	079a      	lsls	r2, r3, #30
 80169a0:	bf04      	itt	eq
 80169a2:	089b      	lsreq	r3, r3, #2
 80169a4:	3002      	addeq	r0, #2
 80169a6:	07da      	lsls	r2, r3, #31
 80169a8:	d402      	bmi.n	80169b0 <__lo0bits+0x4e>
 80169aa:	085b      	lsrs	r3, r3, #1
 80169ac:	d006      	beq.n	80169bc <__lo0bits+0x5a>
 80169ae:	3001      	adds	r0, #1
 80169b0:	600b      	str	r3, [r1, #0]
 80169b2:	4770      	bx	lr
 80169b4:	4610      	mov	r0, r2
 80169b6:	e7e9      	b.n	801698c <__lo0bits+0x2a>
 80169b8:	2000      	movs	r0, #0
 80169ba:	4770      	bx	lr
 80169bc:	2020      	movs	r0, #32
 80169be:	4770      	bx	lr

080169c0 <__i2b>:
 80169c0:	b510      	push	{r4, lr}
 80169c2:	460c      	mov	r4, r1
 80169c4:	2101      	movs	r1, #1
 80169c6:	f7ff fee9 	bl	801679c <_Balloc>
 80169ca:	2201      	movs	r2, #1
 80169cc:	6144      	str	r4, [r0, #20]
 80169ce:	6102      	str	r2, [r0, #16]
 80169d0:	bd10      	pop	{r4, pc}

080169d2 <__multiply>:
 80169d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d6:	4614      	mov	r4, r2
 80169d8:	690a      	ldr	r2, [r1, #16]
 80169da:	6923      	ldr	r3, [r4, #16]
 80169dc:	429a      	cmp	r2, r3
 80169de:	bfb8      	it	lt
 80169e0:	460b      	movlt	r3, r1
 80169e2:	4688      	mov	r8, r1
 80169e4:	bfbc      	itt	lt
 80169e6:	46a0      	movlt	r8, r4
 80169e8:	461c      	movlt	r4, r3
 80169ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80169ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80169f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80169f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80169fa:	eb07 0609 	add.w	r6, r7, r9
 80169fe:	42b3      	cmp	r3, r6
 8016a00:	bfb8      	it	lt
 8016a02:	3101      	addlt	r1, #1
 8016a04:	f7ff feca 	bl	801679c <_Balloc>
 8016a08:	f100 0514 	add.w	r5, r0, #20
 8016a0c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016a10:	462b      	mov	r3, r5
 8016a12:	2200      	movs	r2, #0
 8016a14:	4573      	cmp	r3, lr
 8016a16:	d316      	bcc.n	8016a46 <__multiply+0x74>
 8016a18:	f104 0214 	add.w	r2, r4, #20
 8016a1c:	f108 0114 	add.w	r1, r8, #20
 8016a20:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016a24:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016a28:	9300      	str	r3, [sp, #0]
 8016a2a:	9b00      	ldr	r3, [sp, #0]
 8016a2c:	9201      	str	r2, [sp, #4]
 8016a2e:	4293      	cmp	r3, r2
 8016a30:	d80c      	bhi.n	8016a4c <__multiply+0x7a>
 8016a32:	2e00      	cmp	r6, #0
 8016a34:	dd03      	ble.n	8016a3e <__multiply+0x6c>
 8016a36:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d05d      	beq.n	8016afa <__multiply+0x128>
 8016a3e:	6106      	str	r6, [r0, #16]
 8016a40:	b003      	add	sp, #12
 8016a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a46:	f843 2b04 	str.w	r2, [r3], #4
 8016a4a:	e7e3      	b.n	8016a14 <__multiply+0x42>
 8016a4c:	f8b2 b000 	ldrh.w	fp, [r2]
 8016a50:	f1bb 0f00 	cmp.w	fp, #0
 8016a54:	d023      	beq.n	8016a9e <__multiply+0xcc>
 8016a56:	4689      	mov	r9, r1
 8016a58:	46ac      	mov	ip, r5
 8016a5a:	f04f 0800 	mov.w	r8, #0
 8016a5e:	f859 4b04 	ldr.w	r4, [r9], #4
 8016a62:	f8dc a000 	ldr.w	sl, [ip]
 8016a66:	b2a3      	uxth	r3, r4
 8016a68:	fa1f fa8a 	uxth.w	sl, sl
 8016a6c:	fb0b a303 	mla	r3, fp, r3, sl
 8016a70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016a74:	f8dc 4000 	ldr.w	r4, [ip]
 8016a78:	4443      	add	r3, r8
 8016a7a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016a7e:	fb0b 840a 	mla	r4, fp, sl, r8
 8016a82:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016a86:	46e2      	mov	sl, ip
 8016a88:	b29b      	uxth	r3, r3
 8016a8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016a8e:	454f      	cmp	r7, r9
 8016a90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016a94:	f84a 3b04 	str.w	r3, [sl], #4
 8016a98:	d82b      	bhi.n	8016af2 <__multiply+0x120>
 8016a9a:	f8cc 8004 	str.w	r8, [ip, #4]
 8016a9e:	9b01      	ldr	r3, [sp, #4]
 8016aa0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016aa4:	3204      	adds	r2, #4
 8016aa6:	f1ba 0f00 	cmp.w	sl, #0
 8016aaa:	d020      	beq.n	8016aee <__multiply+0x11c>
 8016aac:	682b      	ldr	r3, [r5, #0]
 8016aae:	4689      	mov	r9, r1
 8016ab0:	46a8      	mov	r8, r5
 8016ab2:	f04f 0b00 	mov.w	fp, #0
 8016ab6:	f8b9 c000 	ldrh.w	ip, [r9]
 8016aba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016abe:	fb0a 440c 	mla	r4, sl, ip, r4
 8016ac2:	445c      	add	r4, fp
 8016ac4:	46c4      	mov	ip, r8
 8016ac6:	b29b      	uxth	r3, r3
 8016ac8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016acc:	f84c 3b04 	str.w	r3, [ip], #4
 8016ad0:	f859 3b04 	ldr.w	r3, [r9], #4
 8016ad4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016ad8:	0c1b      	lsrs	r3, r3, #16
 8016ada:	fb0a b303 	mla	r3, sl, r3, fp
 8016ade:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016ae2:	454f      	cmp	r7, r9
 8016ae4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016ae8:	d805      	bhi.n	8016af6 <__multiply+0x124>
 8016aea:	f8c8 3004 	str.w	r3, [r8, #4]
 8016aee:	3504      	adds	r5, #4
 8016af0:	e79b      	b.n	8016a2a <__multiply+0x58>
 8016af2:	46d4      	mov	ip, sl
 8016af4:	e7b3      	b.n	8016a5e <__multiply+0x8c>
 8016af6:	46e0      	mov	r8, ip
 8016af8:	e7dd      	b.n	8016ab6 <__multiply+0xe4>
 8016afa:	3e01      	subs	r6, #1
 8016afc:	e799      	b.n	8016a32 <__multiply+0x60>
	...

08016b00 <__pow5mult>:
 8016b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b04:	4615      	mov	r5, r2
 8016b06:	f012 0203 	ands.w	r2, r2, #3
 8016b0a:	4606      	mov	r6, r0
 8016b0c:	460f      	mov	r7, r1
 8016b0e:	d007      	beq.n	8016b20 <__pow5mult+0x20>
 8016b10:	3a01      	subs	r2, #1
 8016b12:	4c21      	ldr	r4, [pc, #132]	; (8016b98 <__pow5mult+0x98>)
 8016b14:	2300      	movs	r3, #0
 8016b16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016b1a:	f7ff fe8a 	bl	8016832 <__multadd>
 8016b1e:	4607      	mov	r7, r0
 8016b20:	10ad      	asrs	r5, r5, #2
 8016b22:	d035      	beq.n	8016b90 <__pow5mult+0x90>
 8016b24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016b26:	b93c      	cbnz	r4, 8016b38 <__pow5mult+0x38>
 8016b28:	2010      	movs	r0, #16
 8016b2a:	f7ff fe1d 	bl	8016768 <malloc>
 8016b2e:	6270      	str	r0, [r6, #36]	; 0x24
 8016b30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016b34:	6004      	str	r4, [r0, #0]
 8016b36:	60c4      	str	r4, [r0, #12]
 8016b38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016b3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016b40:	b94c      	cbnz	r4, 8016b56 <__pow5mult+0x56>
 8016b42:	f240 2171 	movw	r1, #625	; 0x271
 8016b46:	4630      	mov	r0, r6
 8016b48:	f7ff ff3a 	bl	80169c0 <__i2b>
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b52:	4604      	mov	r4, r0
 8016b54:	6003      	str	r3, [r0, #0]
 8016b56:	f04f 0800 	mov.w	r8, #0
 8016b5a:	07eb      	lsls	r3, r5, #31
 8016b5c:	d50a      	bpl.n	8016b74 <__pow5mult+0x74>
 8016b5e:	4639      	mov	r1, r7
 8016b60:	4622      	mov	r2, r4
 8016b62:	4630      	mov	r0, r6
 8016b64:	f7ff ff35 	bl	80169d2 <__multiply>
 8016b68:	4639      	mov	r1, r7
 8016b6a:	4681      	mov	r9, r0
 8016b6c:	4630      	mov	r0, r6
 8016b6e:	f7ff fe49 	bl	8016804 <_Bfree>
 8016b72:	464f      	mov	r7, r9
 8016b74:	106d      	asrs	r5, r5, #1
 8016b76:	d00b      	beq.n	8016b90 <__pow5mult+0x90>
 8016b78:	6820      	ldr	r0, [r4, #0]
 8016b7a:	b938      	cbnz	r0, 8016b8c <__pow5mult+0x8c>
 8016b7c:	4622      	mov	r2, r4
 8016b7e:	4621      	mov	r1, r4
 8016b80:	4630      	mov	r0, r6
 8016b82:	f7ff ff26 	bl	80169d2 <__multiply>
 8016b86:	6020      	str	r0, [r4, #0]
 8016b88:	f8c0 8000 	str.w	r8, [r0]
 8016b8c:	4604      	mov	r4, r0
 8016b8e:	e7e4      	b.n	8016b5a <__pow5mult+0x5a>
 8016b90:	4638      	mov	r0, r7
 8016b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b96:	bf00      	nop
 8016b98:	080189d0 	.word	0x080189d0

08016b9c <__lshift>:
 8016b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ba0:	460c      	mov	r4, r1
 8016ba2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016ba6:	6923      	ldr	r3, [r4, #16]
 8016ba8:	6849      	ldr	r1, [r1, #4]
 8016baa:	eb0a 0903 	add.w	r9, sl, r3
 8016bae:	68a3      	ldr	r3, [r4, #8]
 8016bb0:	4607      	mov	r7, r0
 8016bb2:	4616      	mov	r6, r2
 8016bb4:	f109 0501 	add.w	r5, r9, #1
 8016bb8:	42ab      	cmp	r3, r5
 8016bba:	db32      	blt.n	8016c22 <__lshift+0x86>
 8016bbc:	4638      	mov	r0, r7
 8016bbe:	f7ff fded 	bl	801679c <_Balloc>
 8016bc2:	2300      	movs	r3, #0
 8016bc4:	4680      	mov	r8, r0
 8016bc6:	f100 0114 	add.w	r1, r0, #20
 8016bca:	461a      	mov	r2, r3
 8016bcc:	4553      	cmp	r3, sl
 8016bce:	db2b      	blt.n	8016c28 <__lshift+0x8c>
 8016bd0:	6920      	ldr	r0, [r4, #16]
 8016bd2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016bd6:	f104 0314 	add.w	r3, r4, #20
 8016bda:	f016 021f 	ands.w	r2, r6, #31
 8016bde:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016be2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016be6:	d025      	beq.n	8016c34 <__lshift+0x98>
 8016be8:	f1c2 0e20 	rsb	lr, r2, #32
 8016bec:	2000      	movs	r0, #0
 8016bee:	681e      	ldr	r6, [r3, #0]
 8016bf0:	468a      	mov	sl, r1
 8016bf2:	4096      	lsls	r6, r2
 8016bf4:	4330      	orrs	r0, r6
 8016bf6:	f84a 0b04 	str.w	r0, [sl], #4
 8016bfa:	f853 0b04 	ldr.w	r0, [r3], #4
 8016bfe:	459c      	cmp	ip, r3
 8016c00:	fa20 f00e 	lsr.w	r0, r0, lr
 8016c04:	d814      	bhi.n	8016c30 <__lshift+0x94>
 8016c06:	6048      	str	r0, [r1, #4]
 8016c08:	b108      	cbz	r0, 8016c0e <__lshift+0x72>
 8016c0a:	f109 0502 	add.w	r5, r9, #2
 8016c0e:	3d01      	subs	r5, #1
 8016c10:	4638      	mov	r0, r7
 8016c12:	f8c8 5010 	str.w	r5, [r8, #16]
 8016c16:	4621      	mov	r1, r4
 8016c18:	f7ff fdf4 	bl	8016804 <_Bfree>
 8016c1c:	4640      	mov	r0, r8
 8016c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c22:	3101      	adds	r1, #1
 8016c24:	005b      	lsls	r3, r3, #1
 8016c26:	e7c7      	b.n	8016bb8 <__lshift+0x1c>
 8016c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016c2c:	3301      	adds	r3, #1
 8016c2e:	e7cd      	b.n	8016bcc <__lshift+0x30>
 8016c30:	4651      	mov	r1, sl
 8016c32:	e7dc      	b.n	8016bee <__lshift+0x52>
 8016c34:	3904      	subs	r1, #4
 8016c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8016c3e:	459c      	cmp	ip, r3
 8016c40:	d8f9      	bhi.n	8016c36 <__lshift+0x9a>
 8016c42:	e7e4      	b.n	8016c0e <__lshift+0x72>

08016c44 <__mcmp>:
 8016c44:	6903      	ldr	r3, [r0, #16]
 8016c46:	690a      	ldr	r2, [r1, #16]
 8016c48:	1a9b      	subs	r3, r3, r2
 8016c4a:	b530      	push	{r4, r5, lr}
 8016c4c:	d10c      	bne.n	8016c68 <__mcmp+0x24>
 8016c4e:	0092      	lsls	r2, r2, #2
 8016c50:	3014      	adds	r0, #20
 8016c52:	3114      	adds	r1, #20
 8016c54:	1884      	adds	r4, r0, r2
 8016c56:	4411      	add	r1, r2
 8016c58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016c5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016c60:	4295      	cmp	r5, r2
 8016c62:	d003      	beq.n	8016c6c <__mcmp+0x28>
 8016c64:	d305      	bcc.n	8016c72 <__mcmp+0x2e>
 8016c66:	2301      	movs	r3, #1
 8016c68:	4618      	mov	r0, r3
 8016c6a:	bd30      	pop	{r4, r5, pc}
 8016c6c:	42a0      	cmp	r0, r4
 8016c6e:	d3f3      	bcc.n	8016c58 <__mcmp+0x14>
 8016c70:	e7fa      	b.n	8016c68 <__mcmp+0x24>
 8016c72:	f04f 33ff 	mov.w	r3, #4294967295
 8016c76:	e7f7      	b.n	8016c68 <__mcmp+0x24>

08016c78 <__mdiff>:
 8016c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c7c:	460d      	mov	r5, r1
 8016c7e:	4607      	mov	r7, r0
 8016c80:	4611      	mov	r1, r2
 8016c82:	4628      	mov	r0, r5
 8016c84:	4614      	mov	r4, r2
 8016c86:	f7ff ffdd 	bl	8016c44 <__mcmp>
 8016c8a:	1e06      	subs	r6, r0, #0
 8016c8c:	d108      	bne.n	8016ca0 <__mdiff+0x28>
 8016c8e:	4631      	mov	r1, r6
 8016c90:	4638      	mov	r0, r7
 8016c92:	f7ff fd83 	bl	801679c <_Balloc>
 8016c96:	2301      	movs	r3, #1
 8016c98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ca0:	bfa4      	itt	ge
 8016ca2:	4623      	movge	r3, r4
 8016ca4:	462c      	movge	r4, r5
 8016ca6:	4638      	mov	r0, r7
 8016ca8:	6861      	ldr	r1, [r4, #4]
 8016caa:	bfa6      	itte	ge
 8016cac:	461d      	movge	r5, r3
 8016cae:	2600      	movge	r6, #0
 8016cb0:	2601      	movlt	r6, #1
 8016cb2:	f7ff fd73 	bl	801679c <_Balloc>
 8016cb6:	692b      	ldr	r3, [r5, #16]
 8016cb8:	60c6      	str	r6, [r0, #12]
 8016cba:	6926      	ldr	r6, [r4, #16]
 8016cbc:	f105 0914 	add.w	r9, r5, #20
 8016cc0:	f104 0214 	add.w	r2, r4, #20
 8016cc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016cc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016ccc:	f100 0514 	add.w	r5, r0, #20
 8016cd0:	f04f 0e00 	mov.w	lr, #0
 8016cd4:	f852 ab04 	ldr.w	sl, [r2], #4
 8016cd8:	f859 4b04 	ldr.w	r4, [r9], #4
 8016cdc:	fa1e f18a 	uxtah	r1, lr, sl
 8016ce0:	b2a3      	uxth	r3, r4
 8016ce2:	1ac9      	subs	r1, r1, r3
 8016ce4:	0c23      	lsrs	r3, r4, #16
 8016ce6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016cea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016cee:	b289      	uxth	r1, r1
 8016cf0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016cf4:	45c8      	cmp	r8, r9
 8016cf6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016cfa:	4694      	mov	ip, r2
 8016cfc:	f845 3b04 	str.w	r3, [r5], #4
 8016d00:	d8e8      	bhi.n	8016cd4 <__mdiff+0x5c>
 8016d02:	45bc      	cmp	ip, r7
 8016d04:	d304      	bcc.n	8016d10 <__mdiff+0x98>
 8016d06:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016d0a:	b183      	cbz	r3, 8016d2e <__mdiff+0xb6>
 8016d0c:	6106      	str	r6, [r0, #16]
 8016d0e:	e7c5      	b.n	8016c9c <__mdiff+0x24>
 8016d10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016d14:	fa1e f381 	uxtah	r3, lr, r1
 8016d18:	141a      	asrs	r2, r3, #16
 8016d1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016d24:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016d28:	f845 3b04 	str.w	r3, [r5], #4
 8016d2c:	e7e9      	b.n	8016d02 <__mdiff+0x8a>
 8016d2e:	3e01      	subs	r6, #1
 8016d30:	e7e9      	b.n	8016d06 <__mdiff+0x8e>
	...

08016d34 <__ulp>:
 8016d34:	4b12      	ldr	r3, [pc, #72]	; (8016d80 <__ulp+0x4c>)
 8016d36:	ee10 2a90 	vmov	r2, s1
 8016d3a:	401a      	ands	r2, r3
 8016d3c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	dd04      	ble.n	8016d4e <__ulp+0x1a>
 8016d44:	2000      	movs	r0, #0
 8016d46:	4619      	mov	r1, r3
 8016d48:	ec41 0b10 	vmov	d0, r0, r1
 8016d4c:	4770      	bx	lr
 8016d4e:	425b      	negs	r3, r3
 8016d50:	151b      	asrs	r3, r3, #20
 8016d52:	2b13      	cmp	r3, #19
 8016d54:	f04f 0000 	mov.w	r0, #0
 8016d58:	f04f 0100 	mov.w	r1, #0
 8016d5c:	dc04      	bgt.n	8016d68 <__ulp+0x34>
 8016d5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016d62:	fa42 f103 	asr.w	r1, r2, r3
 8016d66:	e7ef      	b.n	8016d48 <__ulp+0x14>
 8016d68:	3b14      	subs	r3, #20
 8016d6a:	2b1e      	cmp	r3, #30
 8016d6c:	f04f 0201 	mov.w	r2, #1
 8016d70:	bfda      	itte	le
 8016d72:	f1c3 031f 	rsble	r3, r3, #31
 8016d76:	fa02 f303 	lslle.w	r3, r2, r3
 8016d7a:	4613      	movgt	r3, r2
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	e7e3      	b.n	8016d48 <__ulp+0x14>
 8016d80:	7ff00000 	.word	0x7ff00000

08016d84 <__b2d>:
 8016d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d86:	6905      	ldr	r5, [r0, #16]
 8016d88:	f100 0714 	add.w	r7, r0, #20
 8016d8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016d90:	1f2e      	subs	r6, r5, #4
 8016d92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016d96:	4620      	mov	r0, r4
 8016d98:	f7ff fdc4 	bl	8016924 <__hi0bits>
 8016d9c:	f1c0 0320 	rsb	r3, r0, #32
 8016da0:	280a      	cmp	r0, #10
 8016da2:	600b      	str	r3, [r1, #0]
 8016da4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016e1c <__b2d+0x98>
 8016da8:	dc14      	bgt.n	8016dd4 <__b2d+0x50>
 8016daa:	f1c0 0e0b 	rsb	lr, r0, #11
 8016dae:	fa24 f10e 	lsr.w	r1, r4, lr
 8016db2:	42b7      	cmp	r7, r6
 8016db4:	ea41 030c 	orr.w	r3, r1, ip
 8016db8:	bf34      	ite	cc
 8016dba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016dbe:	2100      	movcs	r1, #0
 8016dc0:	3015      	adds	r0, #21
 8016dc2:	fa04 f000 	lsl.w	r0, r4, r0
 8016dc6:	fa21 f10e 	lsr.w	r1, r1, lr
 8016dca:	ea40 0201 	orr.w	r2, r0, r1
 8016dce:	ec43 2b10 	vmov	d0, r2, r3
 8016dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dd4:	42b7      	cmp	r7, r6
 8016dd6:	bf3a      	itte	cc
 8016dd8:	f1a5 0608 	subcc.w	r6, r5, #8
 8016ddc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016de0:	2100      	movcs	r1, #0
 8016de2:	380b      	subs	r0, #11
 8016de4:	d015      	beq.n	8016e12 <__b2d+0x8e>
 8016de6:	4084      	lsls	r4, r0
 8016de8:	f1c0 0520 	rsb	r5, r0, #32
 8016dec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016df0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016df4:	42be      	cmp	r6, r7
 8016df6:	fa21 fc05 	lsr.w	ip, r1, r5
 8016dfa:	ea44 030c 	orr.w	r3, r4, ip
 8016dfe:	bf8c      	ite	hi
 8016e00:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016e04:	2400      	movls	r4, #0
 8016e06:	fa01 f000 	lsl.w	r0, r1, r0
 8016e0a:	40ec      	lsrs	r4, r5
 8016e0c:	ea40 0204 	orr.w	r2, r0, r4
 8016e10:	e7dd      	b.n	8016dce <__b2d+0x4a>
 8016e12:	ea44 030c 	orr.w	r3, r4, ip
 8016e16:	460a      	mov	r2, r1
 8016e18:	e7d9      	b.n	8016dce <__b2d+0x4a>
 8016e1a:	bf00      	nop
 8016e1c:	3ff00000 	.word	0x3ff00000

08016e20 <__d2b>:
 8016e20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016e24:	460e      	mov	r6, r1
 8016e26:	2101      	movs	r1, #1
 8016e28:	ec59 8b10 	vmov	r8, r9, d0
 8016e2c:	4615      	mov	r5, r2
 8016e2e:	f7ff fcb5 	bl	801679c <_Balloc>
 8016e32:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016e36:	4607      	mov	r7, r0
 8016e38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016e3c:	bb34      	cbnz	r4, 8016e8c <__d2b+0x6c>
 8016e3e:	9301      	str	r3, [sp, #4]
 8016e40:	f1b8 0300 	subs.w	r3, r8, #0
 8016e44:	d027      	beq.n	8016e96 <__d2b+0x76>
 8016e46:	a802      	add	r0, sp, #8
 8016e48:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016e4c:	f7ff fd89 	bl	8016962 <__lo0bits>
 8016e50:	9900      	ldr	r1, [sp, #0]
 8016e52:	b1f0      	cbz	r0, 8016e92 <__d2b+0x72>
 8016e54:	9a01      	ldr	r2, [sp, #4]
 8016e56:	f1c0 0320 	rsb	r3, r0, #32
 8016e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8016e5e:	430b      	orrs	r3, r1
 8016e60:	40c2      	lsrs	r2, r0
 8016e62:	617b      	str	r3, [r7, #20]
 8016e64:	9201      	str	r2, [sp, #4]
 8016e66:	9b01      	ldr	r3, [sp, #4]
 8016e68:	61bb      	str	r3, [r7, #24]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	bf14      	ite	ne
 8016e6e:	2102      	movne	r1, #2
 8016e70:	2101      	moveq	r1, #1
 8016e72:	6139      	str	r1, [r7, #16]
 8016e74:	b1c4      	cbz	r4, 8016ea8 <__d2b+0x88>
 8016e76:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016e7a:	4404      	add	r4, r0
 8016e7c:	6034      	str	r4, [r6, #0]
 8016e7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016e82:	6028      	str	r0, [r5, #0]
 8016e84:	4638      	mov	r0, r7
 8016e86:	b003      	add	sp, #12
 8016e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016e90:	e7d5      	b.n	8016e3e <__d2b+0x1e>
 8016e92:	6179      	str	r1, [r7, #20]
 8016e94:	e7e7      	b.n	8016e66 <__d2b+0x46>
 8016e96:	a801      	add	r0, sp, #4
 8016e98:	f7ff fd63 	bl	8016962 <__lo0bits>
 8016e9c:	9b01      	ldr	r3, [sp, #4]
 8016e9e:	617b      	str	r3, [r7, #20]
 8016ea0:	2101      	movs	r1, #1
 8016ea2:	6139      	str	r1, [r7, #16]
 8016ea4:	3020      	adds	r0, #32
 8016ea6:	e7e5      	b.n	8016e74 <__d2b+0x54>
 8016ea8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016eac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016eb0:	6030      	str	r0, [r6, #0]
 8016eb2:	6918      	ldr	r0, [r3, #16]
 8016eb4:	f7ff fd36 	bl	8016924 <__hi0bits>
 8016eb8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016ebc:	e7e1      	b.n	8016e82 <__d2b+0x62>

08016ebe <__ratio>:
 8016ebe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ec2:	4688      	mov	r8, r1
 8016ec4:	4669      	mov	r1, sp
 8016ec6:	4681      	mov	r9, r0
 8016ec8:	f7ff ff5c 	bl	8016d84 <__b2d>
 8016ecc:	a901      	add	r1, sp, #4
 8016ece:	4640      	mov	r0, r8
 8016ed0:	ec57 6b10 	vmov	r6, r7, d0
 8016ed4:	f7ff ff56 	bl	8016d84 <__b2d>
 8016ed8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016edc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016ee0:	eba3 0c02 	sub.w	ip, r3, r2
 8016ee4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016ee8:	1a9b      	subs	r3, r3, r2
 8016eea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016eee:	ec5b ab10 	vmov	sl, fp, d0
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	bfce      	itee	gt
 8016ef6:	463a      	movgt	r2, r7
 8016ef8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016efc:	465a      	movle	r2, fp
 8016efe:	4659      	mov	r1, fp
 8016f00:	463d      	mov	r5, r7
 8016f02:	bfd4      	ite	le
 8016f04:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016f08:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016f0c:	4630      	mov	r0, r6
 8016f0e:	ee10 2a10 	vmov	r2, s0
 8016f12:	460b      	mov	r3, r1
 8016f14:	4629      	mov	r1, r5
 8016f16:	f7e9 fcb1 	bl	800087c <__aeabi_ddiv>
 8016f1a:	ec41 0b10 	vmov	d0, r0, r1
 8016f1e:	b003      	add	sp, #12
 8016f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f24 <__copybits>:
 8016f24:	3901      	subs	r1, #1
 8016f26:	b510      	push	{r4, lr}
 8016f28:	1149      	asrs	r1, r1, #5
 8016f2a:	6914      	ldr	r4, [r2, #16]
 8016f2c:	3101      	adds	r1, #1
 8016f2e:	f102 0314 	add.w	r3, r2, #20
 8016f32:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016f36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016f3a:	42a3      	cmp	r3, r4
 8016f3c:	4602      	mov	r2, r0
 8016f3e:	d303      	bcc.n	8016f48 <__copybits+0x24>
 8016f40:	2300      	movs	r3, #0
 8016f42:	428a      	cmp	r2, r1
 8016f44:	d305      	bcc.n	8016f52 <__copybits+0x2e>
 8016f46:	bd10      	pop	{r4, pc}
 8016f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f4c:	f840 2b04 	str.w	r2, [r0], #4
 8016f50:	e7f3      	b.n	8016f3a <__copybits+0x16>
 8016f52:	f842 3b04 	str.w	r3, [r2], #4
 8016f56:	e7f4      	b.n	8016f42 <__copybits+0x1e>

08016f58 <__any_on>:
 8016f58:	f100 0214 	add.w	r2, r0, #20
 8016f5c:	6900      	ldr	r0, [r0, #16]
 8016f5e:	114b      	asrs	r3, r1, #5
 8016f60:	4298      	cmp	r0, r3
 8016f62:	b510      	push	{r4, lr}
 8016f64:	db11      	blt.n	8016f8a <__any_on+0x32>
 8016f66:	dd0a      	ble.n	8016f7e <__any_on+0x26>
 8016f68:	f011 011f 	ands.w	r1, r1, #31
 8016f6c:	d007      	beq.n	8016f7e <__any_on+0x26>
 8016f6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016f72:	fa24 f001 	lsr.w	r0, r4, r1
 8016f76:	fa00 f101 	lsl.w	r1, r0, r1
 8016f7a:	428c      	cmp	r4, r1
 8016f7c:	d10b      	bne.n	8016f96 <__any_on+0x3e>
 8016f7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016f82:	4293      	cmp	r3, r2
 8016f84:	d803      	bhi.n	8016f8e <__any_on+0x36>
 8016f86:	2000      	movs	r0, #0
 8016f88:	bd10      	pop	{r4, pc}
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	e7f7      	b.n	8016f7e <__any_on+0x26>
 8016f8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016f92:	2900      	cmp	r1, #0
 8016f94:	d0f5      	beq.n	8016f82 <__any_on+0x2a>
 8016f96:	2001      	movs	r0, #1
 8016f98:	e7f6      	b.n	8016f88 <__any_on+0x30>

08016f9a <_calloc_r>:
 8016f9a:	b538      	push	{r3, r4, r5, lr}
 8016f9c:	fb02 f401 	mul.w	r4, r2, r1
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	f000 f857 	bl	8017054 <_malloc_r>
 8016fa6:	4605      	mov	r5, r0
 8016fa8:	b118      	cbz	r0, 8016fb2 <_calloc_r+0x18>
 8016faa:	4622      	mov	r2, r4
 8016fac:	2100      	movs	r1, #0
 8016fae:	f7fc f906 	bl	80131be <memset>
 8016fb2:	4628      	mov	r0, r5
 8016fb4:	bd38      	pop	{r3, r4, r5, pc}
	...

08016fb8 <_free_r>:
 8016fb8:	b538      	push	{r3, r4, r5, lr}
 8016fba:	4605      	mov	r5, r0
 8016fbc:	2900      	cmp	r1, #0
 8016fbe:	d045      	beq.n	801704c <_free_r+0x94>
 8016fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016fc4:	1f0c      	subs	r4, r1, #4
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	bfb8      	it	lt
 8016fca:	18e4      	addlt	r4, r4, r3
 8016fcc:	f000 ffdb 	bl	8017f86 <__malloc_lock>
 8016fd0:	4a1f      	ldr	r2, [pc, #124]	; (8017050 <_free_r+0x98>)
 8016fd2:	6813      	ldr	r3, [r2, #0]
 8016fd4:	4610      	mov	r0, r2
 8016fd6:	b933      	cbnz	r3, 8016fe6 <_free_r+0x2e>
 8016fd8:	6063      	str	r3, [r4, #4]
 8016fda:	6014      	str	r4, [r2, #0]
 8016fdc:	4628      	mov	r0, r5
 8016fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fe2:	f000 bfd1 	b.w	8017f88 <__malloc_unlock>
 8016fe6:	42a3      	cmp	r3, r4
 8016fe8:	d90c      	bls.n	8017004 <_free_r+0x4c>
 8016fea:	6821      	ldr	r1, [r4, #0]
 8016fec:	1862      	adds	r2, r4, r1
 8016fee:	4293      	cmp	r3, r2
 8016ff0:	bf04      	itt	eq
 8016ff2:	681a      	ldreq	r2, [r3, #0]
 8016ff4:	685b      	ldreq	r3, [r3, #4]
 8016ff6:	6063      	str	r3, [r4, #4]
 8016ff8:	bf04      	itt	eq
 8016ffa:	1852      	addeq	r2, r2, r1
 8016ffc:	6022      	streq	r2, [r4, #0]
 8016ffe:	6004      	str	r4, [r0, #0]
 8017000:	e7ec      	b.n	8016fdc <_free_r+0x24>
 8017002:	4613      	mov	r3, r2
 8017004:	685a      	ldr	r2, [r3, #4]
 8017006:	b10a      	cbz	r2, 801700c <_free_r+0x54>
 8017008:	42a2      	cmp	r2, r4
 801700a:	d9fa      	bls.n	8017002 <_free_r+0x4a>
 801700c:	6819      	ldr	r1, [r3, #0]
 801700e:	1858      	adds	r0, r3, r1
 8017010:	42a0      	cmp	r0, r4
 8017012:	d10b      	bne.n	801702c <_free_r+0x74>
 8017014:	6820      	ldr	r0, [r4, #0]
 8017016:	4401      	add	r1, r0
 8017018:	1858      	adds	r0, r3, r1
 801701a:	4282      	cmp	r2, r0
 801701c:	6019      	str	r1, [r3, #0]
 801701e:	d1dd      	bne.n	8016fdc <_free_r+0x24>
 8017020:	6810      	ldr	r0, [r2, #0]
 8017022:	6852      	ldr	r2, [r2, #4]
 8017024:	605a      	str	r2, [r3, #4]
 8017026:	4401      	add	r1, r0
 8017028:	6019      	str	r1, [r3, #0]
 801702a:	e7d7      	b.n	8016fdc <_free_r+0x24>
 801702c:	d902      	bls.n	8017034 <_free_r+0x7c>
 801702e:	230c      	movs	r3, #12
 8017030:	602b      	str	r3, [r5, #0]
 8017032:	e7d3      	b.n	8016fdc <_free_r+0x24>
 8017034:	6820      	ldr	r0, [r4, #0]
 8017036:	1821      	adds	r1, r4, r0
 8017038:	428a      	cmp	r2, r1
 801703a:	bf04      	itt	eq
 801703c:	6811      	ldreq	r1, [r2, #0]
 801703e:	6852      	ldreq	r2, [r2, #4]
 8017040:	6062      	str	r2, [r4, #4]
 8017042:	bf04      	itt	eq
 8017044:	1809      	addeq	r1, r1, r0
 8017046:	6021      	streq	r1, [r4, #0]
 8017048:	605c      	str	r4, [r3, #4]
 801704a:	e7c7      	b.n	8016fdc <_free_r+0x24>
 801704c:	bd38      	pop	{r3, r4, r5, pc}
 801704e:	bf00      	nop
 8017050:	2003360c 	.word	0x2003360c

08017054 <_malloc_r>:
 8017054:	b570      	push	{r4, r5, r6, lr}
 8017056:	1ccd      	adds	r5, r1, #3
 8017058:	f025 0503 	bic.w	r5, r5, #3
 801705c:	3508      	adds	r5, #8
 801705e:	2d0c      	cmp	r5, #12
 8017060:	bf38      	it	cc
 8017062:	250c      	movcc	r5, #12
 8017064:	2d00      	cmp	r5, #0
 8017066:	4606      	mov	r6, r0
 8017068:	db01      	blt.n	801706e <_malloc_r+0x1a>
 801706a:	42a9      	cmp	r1, r5
 801706c:	d903      	bls.n	8017076 <_malloc_r+0x22>
 801706e:	230c      	movs	r3, #12
 8017070:	6033      	str	r3, [r6, #0]
 8017072:	2000      	movs	r0, #0
 8017074:	bd70      	pop	{r4, r5, r6, pc}
 8017076:	f000 ff86 	bl	8017f86 <__malloc_lock>
 801707a:	4a21      	ldr	r2, [pc, #132]	; (8017100 <_malloc_r+0xac>)
 801707c:	6814      	ldr	r4, [r2, #0]
 801707e:	4621      	mov	r1, r4
 8017080:	b991      	cbnz	r1, 80170a8 <_malloc_r+0x54>
 8017082:	4c20      	ldr	r4, [pc, #128]	; (8017104 <_malloc_r+0xb0>)
 8017084:	6823      	ldr	r3, [r4, #0]
 8017086:	b91b      	cbnz	r3, 8017090 <_malloc_r+0x3c>
 8017088:	4630      	mov	r0, r6
 801708a:	f000 fe19 	bl	8017cc0 <_sbrk_r>
 801708e:	6020      	str	r0, [r4, #0]
 8017090:	4629      	mov	r1, r5
 8017092:	4630      	mov	r0, r6
 8017094:	f000 fe14 	bl	8017cc0 <_sbrk_r>
 8017098:	1c43      	adds	r3, r0, #1
 801709a:	d124      	bne.n	80170e6 <_malloc_r+0x92>
 801709c:	230c      	movs	r3, #12
 801709e:	6033      	str	r3, [r6, #0]
 80170a0:	4630      	mov	r0, r6
 80170a2:	f000 ff71 	bl	8017f88 <__malloc_unlock>
 80170a6:	e7e4      	b.n	8017072 <_malloc_r+0x1e>
 80170a8:	680b      	ldr	r3, [r1, #0]
 80170aa:	1b5b      	subs	r3, r3, r5
 80170ac:	d418      	bmi.n	80170e0 <_malloc_r+0x8c>
 80170ae:	2b0b      	cmp	r3, #11
 80170b0:	d90f      	bls.n	80170d2 <_malloc_r+0x7e>
 80170b2:	600b      	str	r3, [r1, #0]
 80170b4:	50cd      	str	r5, [r1, r3]
 80170b6:	18cc      	adds	r4, r1, r3
 80170b8:	4630      	mov	r0, r6
 80170ba:	f000 ff65 	bl	8017f88 <__malloc_unlock>
 80170be:	f104 000b 	add.w	r0, r4, #11
 80170c2:	1d23      	adds	r3, r4, #4
 80170c4:	f020 0007 	bic.w	r0, r0, #7
 80170c8:	1ac3      	subs	r3, r0, r3
 80170ca:	d0d3      	beq.n	8017074 <_malloc_r+0x20>
 80170cc:	425a      	negs	r2, r3
 80170ce:	50e2      	str	r2, [r4, r3]
 80170d0:	e7d0      	b.n	8017074 <_malloc_r+0x20>
 80170d2:	428c      	cmp	r4, r1
 80170d4:	684b      	ldr	r3, [r1, #4]
 80170d6:	bf16      	itet	ne
 80170d8:	6063      	strne	r3, [r4, #4]
 80170da:	6013      	streq	r3, [r2, #0]
 80170dc:	460c      	movne	r4, r1
 80170de:	e7eb      	b.n	80170b8 <_malloc_r+0x64>
 80170e0:	460c      	mov	r4, r1
 80170e2:	6849      	ldr	r1, [r1, #4]
 80170e4:	e7cc      	b.n	8017080 <_malloc_r+0x2c>
 80170e6:	1cc4      	adds	r4, r0, #3
 80170e8:	f024 0403 	bic.w	r4, r4, #3
 80170ec:	42a0      	cmp	r0, r4
 80170ee:	d005      	beq.n	80170fc <_malloc_r+0xa8>
 80170f0:	1a21      	subs	r1, r4, r0
 80170f2:	4630      	mov	r0, r6
 80170f4:	f000 fde4 	bl	8017cc0 <_sbrk_r>
 80170f8:	3001      	adds	r0, #1
 80170fa:	d0cf      	beq.n	801709c <_malloc_r+0x48>
 80170fc:	6025      	str	r5, [r4, #0]
 80170fe:	e7db      	b.n	80170b8 <_malloc_r+0x64>
 8017100:	2003360c 	.word	0x2003360c
 8017104:	20033610 	.word	0x20033610

08017108 <__ssputs_r>:
 8017108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801710c:	688e      	ldr	r6, [r1, #8]
 801710e:	429e      	cmp	r6, r3
 8017110:	4682      	mov	sl, r0
 8017112:	460c      	mov	r4, r1
 8017114:	4690      	mov	r8, r2
 8017116:	4699      	mov	r9, r3
 8017118:	d837      	bhi.n	801718a <__ssputs_r+0x82>
 801711a:	898a      	ldrh	r2, [r1, #12]
 801711c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017120:	d031      	beq.n	8017186 <__ssputs_r+0x7e>
 8017122:	6825      	ldr	r5, [r4, #0]
 8017124:	6909      	ldr	r1, [r1, #16]
 8017126:	1a6f      	subs	r7, r5, r1
 8017128:	6965      	ldr	r5, [r4, #20]
 801712a:	2302      	movs	r3, #2
 801712c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017130:	fb95 f5f3 	sdiv	r5, r5, r3
 8017134:	f109 0301 	add.w	r3, r9, #1
 8017138:	443b      	add	r3, r7
 801713a:	429d      	cmp	r5, r3
 801713c:	bf38      	it	cc
 801713e:	461d      	movcc	r5, r3
 8017140:	0553      	lsls	r3, r2, #21
 8017142:	d530      	bpl.n	80171a6 <__ssputs_r+0x9e>
 8017144:	4629      	mov	r1, r5
 8017146:	f7ff ff85 	bl	8017054 <_malloc_r>
 801714a:	4606      	mov	r6, r0
 801714c:	b950      	cbnz	r0, 8017164 <__ssputs_r+0x5c>
 801714e:	230c      	movs	r3, #12
 8017150:	f8ca 3000 	str.w	r3, [sl]
 8017154:	89a3      	ldrh	r3, [r4, #12]
 8017156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801715a:	81a3      	strh	r3, [r4, #12]
 801715c:	f04f 30ff 	mov.w	r0, #4294967295
 8017160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017164:	463a      	mov	r2, r7
 8017166:	6921      	ldr	r1, [r4, #16]
 8017168:	f7fc f81e 	bl	80131a8 <memcpy>
 801716c:	89a3      	ldrh	r3, [r4, #12]
 801716e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017176:	81a3      	strh	r3, [r4, #12]
 8017178:	6126      	str	r6, [r4, #16]
 801717a:	6165      	str	r5, [r4, #20]
 801717c:	443e      	add	r6, r7
 801717e:	1bed      	subs	r5, r5, r7
 8017180:	6026      	str	r6, [r4, #0]
 8017182:	60a5      	str	r5, [r4, #8]
 8017184:	464e      	mov	r6, r9
 8017186:	454e      	cmp	r6, r9
 8017188:	d900      	bls.n	801718c <__ssputs_r+0x84>
 801718a:	464e      	mov	r6, r9
 801718c:	4632      	mov	r2, r6
 801718e:	4641      	mov	r1, r8
 8017190:	6820      	ldr	r0, [r4, #0]
 8017192:	f000 fedf 	bl	8017f54 <memmove>
 8017196:	68a3      	ldr	r3, [r4, #8]
 8017198:	1b9b      	subs	r3, r3, r6
 801719a:	60a3      	str	r3, [r4, #8]
 801719c:	6823      	ldr	r3, [r4, #0]
 801719e:	441e      	add	r6, r3
 80171a0:	6026      	str	r6, [r4, #0]
 80171a2:	2000      	movs	r0, #0
 80171a4:	e7dc      	b.n	8017160 <__ssputs_r+0x58>
 80171a6:	462a      	mov	r2, r5
 80171a8:	f000 feef 	bl	8017f8a <_realloc_r>
 80171ac:	4606      	mov	r6, r0
 80171ae:	2800      	cmp	r0, #0
 80171b0:	d1e2      	bne.n	8017178 <__ssputs_r+0x70>
 80171b2:	6921      	ldr	r1, [r4, #16]
 80171b4:	4650      	mov	r0, sl
 80171b6:	f7ff feff 	bl	8016fb8 <_free_r>
 80171ba:	e7c8      	b.n	801714e <__ssputs_r+0x46>

080171bc <_svfiprintf_r>:
 80171bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c0:	461d      	mov	r5, r3
 80171c2:	898b      	ldrh	r3, [r1, #12]
 80171c4:	061f      	lsls	r7, r3, #24
 80171c6:	b09d      	sub	sp, #116	; 0x74
 80171c8:	4680      	mov	r8, r0
 80171ca:	460c      	mov	r4, r1
 80171cc:	4616      	mov	r6, r2
 80171ce:	d50f      	bpl.n	80171f0 <_svfiprintf_r+0x34>
 80171d0:	690b      	ldr	r3, [r1, #16]
 80171d2:	b96b      	cbnz	r3, 80171f0 <_svfiprintf_r+0x34>
 80171d4:	2140      	movs	r1, #64	; 0x40
 80171d6:	f7ff ff3d 	bl	8017054 <_malloc_r>
 80171da:	6020      	str	r0, [r4, #0]
 80171dc:	6120      	str	r0, [r4, #16]
 80171de:	b928      	cbnz	r0, 80171ec <_svfiprintf_r+0x30>
 80171e0:	230c      	movs	r3, #12
 80171e2:	f8c8 3000 	str.w	r3, [r8]
 80171e6:	f04f 30ff 	mov.w	r0, #4294967295
 80171ea:	e0c8      	b.n	801737e <_svfiprintf_r+0x1c2>
 80171ec:	2340      	movs	r3, #64	; 0x40
 80171ee:	6163      	str	r3, [r4, #20]
 80171f0:	2300      	movs	r3, #0
 80171f2:	9309      	str	r3, [sp, #36]	; 0x24
 80171f4:	2320      	movs	r3, #32
 80171f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80171fa:	2330      	movs	r3, #48	; 0x30
 80171fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017200:	9503      	str	r5, [sp, #12]
 8017202:	f04f 0b01 	mov.w	fp, #1
 8017206:	4637      	mov	r7, r6
 8017208:	463d      	mov	r5, r7
 801720a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801720e:	b10b      	cbz	r3, 8017214 <_svfiprintf_r+0x58>
 8017210:	2b25      	cmp	r3, #37	; 0x25
 8017212:	d13e      	bne.n	8017292 <_svfiprintf_r+0xd6>
 8017214:	ebb7 0a06 	subs.w	sl, r7, r6
 8017218:	d00b      	beq.n	8017232 <_svfiprintf_r+0x76>
 801721a:	4653      	mov	r3, sl
 801721c:	4632      	mov	r2, r6
 801721e:	4621      	mov	r1, r4
 8017220:	4640      	mov	r0, r8
 8017222:	f7ff ff71 	bl	8017108 <__ssputs_r>
 8017226:	3001      	adds	r0, #1
 8017228:	f000 80a4 	beq.w	8017374 <_svfiprintf_r+0x1b8>
 801722c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801722e:	4453      	add	r3, sl
 8017230:	9309      	str	r3, [sp, #36]	; 0x24
 8017232:	783b      	ldrb	r3, [r7, #0]
 8017234:	2b00      	cmp	r3, #0
 8017236:	f000 809d 	beq.w	8017374 <_svfiprintf_r+0x1b8>
 801723a:	2300      	movs	r3, #0
 801723c:	f04f 32ff 	mov.w	r2, #4294967295
 8017240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017244:	9304      	str	r3, [sp, #16]
 8017246:	9307      	str	r3, [sp, #28]
 8017248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801724c:	931a      	str	r3, [sp, #104]	; 0x68
 801724e:	462f      	mov	r7, r5
 8017250:	2205      	movs	r2, #5
 8017252:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017256:	4850      	ldr	r0, [pc, #320]	; (8017398 <_svfiprintf_r+0x1dc>)
 8017258:	f7e8 ffda 	bl	8000210 <memchr>
 801725c:	9b04      	ldr	r3, [sp, #16]
 801725e:	b9d0      	cbnz	r0, 8017296 <_svfiprintf_r+0xda>
 8017260:	06d9      	lsls	r1, r3, #27
 8017262:	bf44      	itt	mi
 8017264:	2220      	movmi	r2, #32
 8017266:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801726a:	071a      	lsls	r2, r3, #28
 801726c:	bf44      	itt	mi
 801726e:	222b      	movmi	r2, #43	; 0x2b
 8017270:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017274:	782a      	ldrb	r2, [r5, #0]
 8017276:	2a2a      	cmp	r2, #42	; 0x2a
 8017278:	d015      	beq.n	80172a6 <_svfiprintf_r+0xea>
 801727a:	9a07      	ldr	r2, [sp, #28]
 801727c:	462f      	mov	r7, r5
 801727e:	2000      	movs	r0, #0
 8017280:	250a      	movs	r5, #10
 8017282:	4639      	mov	r1, r7
 8017284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017288:	3b30      	subs	r3, #48	; 0x30
 801728a:	2b09      	cmp	r3, #9
 801728c:	d94d      	bls.n	801732a <_svfiprintf_r+0x16e>
 801728e:	b1b8      	cbz	r0, 80172c0 <_svfiprintf_r+0x104>
 8017290:	e00f      	b.n	80172b2 <_svfiprintf_r+0xf6>
 8017292:	462f      	mov	r7, r5
 8017294:	e7b8      	b.n	8017208 <_svfiprintf_r+0x4c>
 8017296:	4a40      	ldr	r2, [pc, #256]	; (8017398 <_svfiprintf_r+0x1dc>)
 8017298:	1a80      	subs	r0, r0, r2
 801729a:	fa0b f000 	lsl.w	r0, fp, r0
 801729e:	4318      	orrs	r0, r3
 80172a0:	9004      	str	r0, [sp, #16]
 80172a2:	463d      	mov	r5, r7
 80172a4:	e7d3      	b.n	801724e <_svfiprintf_r+0x92>
 80172a6:	9a03      	ldr	r2, [sp, #12]
 80172a8:	1d11      	adds	r1, r2, #4
 80172aa:	6812      	ldr	r2, [r2, #0]
 80172ac:	9103      	str	r1, [sp, #12]
 80172ae:	2a00      	cmp	r2, #0
 80172b0:	db01      	blt.n	80172b6 <_svfiprintf_r+0xfa>
 80172b2:	9207      	str	r2, [sp, #28]
 80172b4:	e004      	b.n	80172c0 <_svfiprintf_r+0x104>
 80172b6:	4252      	negs	r2, r2
 80172b8:	f043 0302 	orr.w	r3, r3, #2
 80172bc:	9207      	str	r2, [sp, #28]
 80172be:	9304      	str	r3, [sp, #16]
 80172c0:	783b      	ldrb	r3, [r7, #0]
 80172c2:	2b2e      	cmp	r3, #46	; 0x2e
 80172c4:	d10c      	bne.n	80172e0 <_svfiprintf_r+0x124>
 80172c6:	787b      	ldrb	r3, [r7, #1]
 80172c8:	2b2a      	cmp	r3, #42	; 0x2a
 80172ca:	d133      	bne.n	8017334 <_svfiprintf_r+0x178>
 80172cc:	9b03      	ldr	r3, [sp, #12]
 80172ce:	1d1a      	adds	r2, r3, #4
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	9203      	str	r2, [sp, #12]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	bfb8      	it	lt
 80172d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80172dc:	3702      	adds	r7, #2
 80172de:	9305      	str	r3, [sp, #20]
 80172e0:	4d2e      	ldr	r5, [pc, #184]	; (801739c <_svfiprintf_r+0x1e0>)
 80172e2:	7839      	ldrb	r1, [r7, #0]
 80172e4:	2203      	movs	r2, #3
 80172e6:	4628      	mov	r0, r5
 80172e8:	f7e8 ff92 	bl	8000210 <memchr>
 80172ec:	b138      	cbz	r0, 80172fe <_svfiprintf_r+0x142>
 80172ee:	2340      	movs	r3, #64	; 0x40
 80172f0:	1b40      	subs	r0, r0, r5
 80172f2:	fa03 f000 	lsl.w	r0, r3, r0
 80172f6:	9b04      	ldr	r3, [sp, #16]
 80172f8:	4303      	orrs	r3, r0
 80172fa:	3701      	adds	r7, #1
 80172fc:	9304      	str	r3, [sp, #16]
 80172fe:	7839      	ldrb	r1, [r7, #0]
 8017300:	4827      	ldr	r0, [pc, #156]	; (80173a0 <_svfiprintf_r+0x1e4>)
 8017302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017306:	2206      	movs	r2, #6
 8017308:	1c7e      	adds	r6, r7, #1
 801730a:	f7e8 ff81 	bl	8000210 <memchr>
 801730e:	2800      	cmp	r0, #0
 8017310:	d038      	beq.n	8017384 <_svfiprintf_r+0x1c8>
 8017312:	4b24      	ldr	r3, [pc, #144]	; (80173a4 <_svfiprintf_r+0x1e8>)
 8017314:	bb13      	cbnz	r3, 801735c <_svfiprintf_r+0x1a0>
 8017316:	9b03      	ldr	r3, [sp, #12]
 8017318:	3307      	adds	r3, #7
 801731a:	f023 0307 	bic.w	r3, r3, #7
 801731e:	3308      	adds	r3, #8
 8017320:	9303      	str	r3, [sp, #12]
 8017322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017324:	444b      	add	r3, r9
 8017326:	9309      	str	r3, [sp, #36]	; 0x24
 8017328:	e76d      	b.n	8017206 <_svfiprintf_r+0x4a>
 801732a:	fb05 3202 	mla	r2, r5, r2, r3
 801732e:	2001      	movs	r0, #1
 8017330:	460f      	mov	r7, r1
 8017332:	e7a6      	b.n	8017282 <_svfiprintf_r+0xc6>
 8017334:	2300      	movs	r3, #0
 8017336:	3701      	adds	r7, #1
 8017338:	9305      	str	r3, [sp, #20]
 801733a:	4619      	mov	r1, r3
 801733c:	250a      	movs	r5, #10
 801733e:	4638      	mov	r0, r7
 8017340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017344:	3a30      	subs	r2, #48	; 0x30
 8017346:	2a09      	cmp	r2, #9
 8017348:	d903      	bls.n	8017352 <_svfiprintf_r+0x196>
 801734a:	2b00      	cmp	r3, #0
 801734c:	d0c8      	beq.n	80172e0 <_svfiprintf_r+0x124>
 801734e:	9105      	str	r1, [sp, #20]
 8017350:	e7c6      	b.n	80172e0 <_svfiprintf_r+0x124>
 8017352:	fb05 2101 	mla	r1, r5, r1, r2
 8017356:	2301      	movs	r3, #1
 8017358:	4607      	mov	r7, r0
 801735a:	e7f0      	b.n	801733e <_svfiprintf_r+0x182>
 801735c:	ab03      	add	r3, sp, #12
 801735e:	9300      	str	r3, [sp, #0]
 8017360:	4622      	mov	r2, r4
 8017362:	4b11      	ldr	r3, [pc, #68]	; (80173a8 <_svfiprintf_r+0x1ec>)
 8017364:	a904      	add	r1, sp, #16
 8017366:	4640      	mov	r0, r8
 8017368:	f7fb ffc6 	bl	80132f8 <_printf_float>
 801736c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017370:	4681      	mov	r9, r0
 8017372:	d1d6      	bne.n	8017322 <_svfiprintf_r+0x166>
 8017374:	89a3      	ldrh	r3, [r4, #12]
 8017376:	065b      	lsls	r3, r3, #25
 8017378:	f53f af35 	bmi.w	80171e6 <_svfiprintf_r+0x2a>
 801737c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801737e:	b01d      	add	sp, #116	; 0x74
 8017380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017384:	ab03      	add	r3, sp, #12
 8017386:	9300      	str	r3, [sp, #0]
 8017388:	4622      	mov	r2, r4
 801738a:	4b07      	ldr	r3, [pc, #28]	; (80173a8 <_svfiprintf_r+0x1ec>)
 801738c:	a904      	add	r1, sp, #16
 801738e:	4640      	mov	r0, r8
 8017390:	f7fc fa68 	bl	8013864 <_printf_i>
 8017394:	e7ea      	b.n	801736c <_svfiprintf_r+0x1b0>
 8017396:	bf00      	nop
 8017398:	080189dc 	.word	0x080189dc
 801739c:	080189e2 	.word	0x080189e2
 80173a0:	080189e6 	.word	0x080189e6
 80173a4:	080132f9 	.word	0x080132f9
 80173a8:	08017109 	.word	0x08017109

080173ac <_sungetc_r>:
 80173ac:	b538      	push	{r3, r4, r5, lr}
 80173ae:	1c4b      	adds	r3, r1, #1
 80173b0:	4614      	mov	r4, r2
 80173b2:	d103      	bne.n	80173bc <_sungetc_r+0x10>
 80173b4:	f04f 35ff 	mov.w	r5, #4294967295
 80173b8:	4628      	mov	r0, r5
 80173ba:	bd38      	pop	{r3, r4, r5, pc}
 80173bc:	8993      	ldrh	r3, [r2, #12]
 80173be:	f023 0320 	bic.w	r3, r3, #32
 80173c2:	8193      	strh	r3, [r2, #12]
 80173c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80173c6:	6852      	ldr	r2, [r2, #4]
 80173c8:	b2cd      	uxtb	r5, r1
 80173ca:	b18b      	cbz	r3, 80173f0 <_sungetc_r+0x44>
 80173cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80173ce:	4293      	cmp	r3, r2
 80173d0:	dd08      	ble.n	80173e4 <_sungetc_r+0x38>
 80173d2:	6823      	ldr	r3, [r4, #0]
 80173d4:	1e5a      	subs	r2, r3, #1
 80173d6:	6022      	str	r2, [r4, #0]
 80173d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80173dc:	6863      	ldr	r3, [r4, #4]
 80173de:	3301      	adds	r3, #1
 80173e0:	6063      	str	r3, [r4, #4]
 80173e2:	e7e9      	b.n	80173b8 <_sungetc_r+0xc>
 80173e4:	4621      	mov	r1, r4
 80173e6:	f000 fd4b 	bl	8017e80 <__submore>
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d0f1      	beq.n	80173d2 <_sungetc_r+0x26>
 80173ee:	e7e1      	b.n	80173b4 <_sungetc_r+0x8>
 80173f0:	6921      	ldr	r1, [r4, #16]
 80173f2:	6823      	ldr	r3, [r4, #0]
 80173f4:	b151      	cbz	r1, 801740c <_sungetc_r+0x60>
 80173f6:	4299      	cmp	r1, r3
 80173f8:	d208      	bcs.n	801740c <_sungetc_r+0x60>
 80173fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80173fe:	42a9      	cmp	r1, r5
 8017400:	d104      	bne.n	801740c <_sungetc_r+0x60>
 8017402:	3b01      	subs	r3, #1
 8017404:	3201      	adds	r2, #1
 8017406:	6023      	str	r3, [r4, #0]
 8017408:	6062      	str	r2, [r4, #4]
 801740a:	e7d5      	b.n	80173b8 <_sungetc_r+0xc>
 801740c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017410:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017414:	6363      	str	r3, [r4, #52]	; 0x34
 8017416:	2303      	movs	r3, #3
 8017418:	63a3      	str	r3, [r4, #56]	; 0x38
 801741a:	4623      	mov	r3, r4
 801741c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017420:	6023      	str	r3, [r4, #0]
 8017422:	2301      	movs	r3, #1
 8017424:	e7dc      	b.n	80173e0 <_sungetc_r+0x34>

08017426 <__ssrefill_r>:
 8017426:	b510      	push	{r4, lr}
 8017428:	460c      	mov	r4, r1
 801742a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801742c:	b169      	cbz	r1, 801744a <__ssrefill_r+0x24>
 801742e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017432:	4299      	cmp	r1, r3
 8017434:	d001      	beq.n	801743a <__ssrefill_r+0x14>
 8017436:	f7ff fdbf 	bl	8016fb8 <_free_r>
 801743a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801743c:	6063      	str	r3, [r4, #4]
 801743e:	2000      	movs	r0, #0
 8017440:	6360      	str	r0, [r4, #52]	; 0x34
 8017442:	b113      	cbz	r3, 801744a <__ssrefill_r+0x24>
 8017444:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017446:	6023      	str	r3, [r4, #0]
 8017448:	bd10      	pop	{r4, pc}
 801744a:	6923      	ldr	r3, [r4, #16]
 801744c:	6023      	str	r3, [r4, #0]
 801744e:	2300      	movs	r3, #0
 8017450:	6063      	str	r3, [r4, #4]
 8017452:	89a3      	ldrh	r3, [r4, #12]
 8017454:	f043 0320 	orr.w	r3, r3, #32
 8017458:	81a3      	strh	r3, [r4, #12]
 801745a:	f04f 30ff 	mov.w	r0, #4294967295
 801745e:	e7f3      	b.n	8017448 <__ssrefill_r+0x22>

08017460 <__ssvfiscanf_r>:
 8017460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017464:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017468:	460c      	mov	r4, r1
 801746a:	2100      	movs	r1, #0
 801746c:	9144      	str	r1, [sp, #272]	; 0x110
 801746e:	9145      	str	r1, [sp, #276]	; 0x114
 8017470:	499f      	ldr	r1, [pc, #636]	; (80176f0 <__ssvfiscanf_r+0x290>)
 8017472:	91a0      	str	r1, [sp, #640]	; 0x280
 8017474:	f10d 0804 	add.w	r8, sp, #4
 8017478:	499e      	ldr	r1, [pc, #632]	; (80176f4 <__ssvfiscanf_r+0x294>)
 801747a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80176f8 <__ssvfiscanf_r+0x298>
 801747e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017482:	4606      	mov	r6, r0
 8017484:	4692      	mov	sl, r2
 8017486:	91a1      	str	r1, [sp, #644]	; 0x284
 8017488:	9300      	str	r3, [sp, #0]
 801748a:	270a      	movs	r7, #10
 801748c:	f89a 3000 	ldrb.w	r3, [sl]
 8017490:	2b00      	cmp	r3, #0
 8017492:	f000 812a 	beq.w	80176ea <__ssvfiscanf_r+0x28a>
 8017496:	4655      	mov	r5, sl
 8017498:	f7ff f8d2 	bl	8016640 <__locale_ctype_ptr>
 801749c:	f815 bb01 	ldrb.w	fp, [r5], #1
 80174a0:	4458      	add	r0, fp
 80174a2:	7843      	ldrb	r3, [r0, #1]
 80174a4:	f013 0308 	ands.w	r3, r3, #8
 80174a8:	d01c      	beq.n	80174e4 <__ssvfiscanf_r+0x84>
 80174aa:	6863      	ldr	r3, [r4, #4]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	dd12      	ble.n	80174d6 <__ssvfiscanf_r+0x76>
 80174b0:	f7ff f8c6 	bl	8016640 <__locale_ctype_ptr>
 80174b4:	6823      	ldr	r3, [r4, #0]
 80174b6:	781a      	ldrb	r2, [r3, #0]
 80174b8:	4410      	add	r0, r2
 80174ba:	7842      	ldrb	r2, [r0, #1]
 80174bc:	0712      	lsls	r2, r2, #28
 80174be:	d401      	bmi.n	80174c4 <__ssvfiscanf_r+0x64>
 80174c0:	46aa      	mov	sl, r5
 80174c2:	e7e3      	b.n	801748c <__ssvfiscanf_r+0x2c>
 80174c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80174c6:	3201      	adds	r2, #1
 80174c8:	9245      	str	r2, [sp, #276]	; 0x114
 80174ca:	6862      	ldr	r2, [r4, #4]
 80174cc:	3301      	adds	r3, #1
 80174ce:	3a01      	subs	r2, #1
 80174d0:	6062      	str	r2, [r4, #4]
 80174d2:	6023      	str	r3, [r4, #0]
 80174d4:	e7e9      	b.n	80174aa <__ssvfiscanf_r+0x4a>
 80174d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80174d8:	4621      	mov	r1, r4
 80174da:	4630      	mov	r0, r6
 80174dc:	4798      	blx	r3
 80174de:	2800      	cmp	r0, #0
 80174e0:	d0e6      	beq.n	80174b0 <__ssvfiscanf_r+0x50>
 80174e2:	e7ed      	b.n	80174c0 <__ssvfiscanf_r+0x60>
 80174e4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80174e8:	f040 8082 	bne.w	80175f0 <__ssvfiscanf_r+0x190>
 80174ec:	9343      	str	r3, [sp, #268]	; 0x10c
 80174ee:	9341      	str	r3, [sp, #260]	; 0x104
 80174f0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80174f4:	2b2a      	cmp	r3, #42	; 0x2a
 80174f6:	d103      	bne.n	8017500 <__ssvfiscanf_r+0xa0>
 80174f8:	2310      	movs	r3, #16
 80174fa:	9341      	str	r3, [sp, #260]	; 0x104
 80174fc:	f10a 0502 	add.w	r5, sl, #2
 8017500:	46aa      	mov	sl, r5
 8017502:	f815 1b01 	ldrb.w	r1, [r5], #1
 8017506:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801750a:	2a09      	cmp	r2, #9
 801750c:	d922      	bls.n	8017554 <__ssvfiscanf_r+0xf4>
 801750e:	2203      	movs	r2, #3
 8017510:	4879      	ldr	r0, [pc, #484]	; (80176f8 <__ssvfiscanf_r+0x298>)
 8017512:	f7e8 fe7d 	bl	8000210 <memchr>
 8017516:	b138      	cbz	r0, 8017528 <__ssvfiscanf_r+0xc8>
 8017518:	eba0 0309 	sub.w	r3, r0, r9
 801751c:	2001      	movs	r0, #1
 801751e:	4098      	lsls	r0, r3
 8017520:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017522:	4318      	orrs	r0, r3
 8017524:	9041      	str	r0, [sp, #260]	; 0x104
 8017526:	46aa      	mov	sl, r5
 8017528:	f89a 3000 	ldrb.w	r3, [sl]
 801752c:	2b67      	cmp	r3, #103	; 0x67
 801752e:	f10a 0501 	add.w	r5, sl, #1
 8017532:	d82b      	bhi.n	801758c <__ssvfiscanf_r+0x12c>
 8017534:	2b65      	cmp	r3, #101	; 0x65
 8017536:	f080 809f 	bcs.w	8017678 <__ssvfiscanf_r+0x218>
 801753a:	2b47      	cmp	r3, #71	; 0x47
 801753c:	d810      	bhi.n	8017560 <__ssvfiscanf_r+0x100>
 801753e:	2b45      	cmp	r3, #69	; 0x45
 8017540:	f080 809a 	bcs.w	8017678 <__ssvfiscanf_r+0x218>
 8017544:	2b00      	cmp	r3, #0
 8017546:	d06c      	beq.n	8017622 <__ssvfiscanf_r+0x1c2>
 8017548:	2b25      	cmp	r3, #37	; 0x25
 801754a:	d051      	beq.n	80175f0 <__ssvfiscanf_r+0x190>
 801754c:	2303      	movs	r3, #3
 801754e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017550:	9742      	str	r7, [sp, #264]	; 0x108
 8017552:	e027      	b.n	80175a4 <__ssvfiscanf_r+0x144>
 8017554:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017556:	fb07 1303 	mla	r3, r7, r3, r1
 801755a:	3b30      	subs	r3, #48	; 0x30
 801755c:	9343      	str	r3, [sp, #268]	; 0x10c
 801755e:	e7cf      	b.n	8017500 <__ssvfiscanf_r+0xa0>
 8017560:	2b5b      	cmp	r3, #91	; 0x5b
 8017562:	d06a      	beq.n	801763a <__ssvfiscanf_r+0x1da>
 8017564:	d80c      	bhi.n	8017580 <__ssvfiscanf_r+0x120>
 8017566:	2b58      	cmp	r3, #88	; 0x58
 8017568:	d1f0      	bne.n	801754c <__ssvfiscanf_r+0xec>
 801756a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801756c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017570:	9241      	str	r2, [sp, #260]	; 0x104
 8017572:	2210      	movs	r2, #16
 8017574:	9242      	str	r2, [sp, #264]	; 0x108
 8017576:	2b6e      	cmp	r3, #110	; 0x6e
 8017578:	bf8c      	ite	hi
 801757a:	2304      	movhi	r3, #4
 801757c:	2303      	movls	r3, #3
 801757e:	e010      	b.n	80175a2 <__ssvfiscanf_r+0x142>
 8017580:	2b63      	cmp	r3, #99	; 0x63
 8017582:	d065      	beq.n	8017650 <__ssvfiscanf_r+0x1f0>
 8017584:	2b64      	cmp	r3, #100	; 0x64
 8017586:	d1e1      	bne.n	801754c <__ssvfiscanf_r+0xec>
 8017588:	9742      	str	r7, [sp, #264]	; 0x108
 801758a:	e7f4      	b.n	8017576 <__ssvfiscanf_r+0x116>
 801758c:	2b70      	cmp	r3, #112	; 0x70
 801758e:	d04b      	beq.n	8017628 <__ssvfiscanf_r+0x1c8>
 8017590:	d826      	bhi.n	80175e0 <__ssvfiscanf_r+0x180>
 8017592:	2b6e      	cmp	r3, #110	; 0x6e
 8017594:	d062      	beq.n	801765c <__ssvfiscanf_r+0x1fc>
 8017596:	d84c      	bhi.n	8017632 <__ssvfiscanf_r+0x1d2>
 8017598:	2b69      	cmp	r3, #105	; 0x69
 801759a:	d1d7      	bne.n	801754c <__ssvfiscanf_r+0xec>
 801759c:	2300      	movs	r3, #0
 801759e:	9342      	str	r3, [sp, #264]	; 0x108
 80175a0:	2303      	movs	r3, #3
 80175a2:	9347      	str	r3, [sp, #284]	; 0x11c
 80175a4:	6863      	ldr	r3, [r4, #4]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	dd68      	ble.n	801767c <__ssvfiscanf_r+0x21c>
 80175aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80175ac:	0659      	lsls	r1, r3, #25
 80175ae:	d407      	bmi.n	80175c0 <__ssvfiscanf_r+0x160>
 80175b0:	f7ff f846 	bl	8016640 <__locale_ctype_ptr>
 80175b4:	6823      	ldr	r3, [r4, #0]
 80175b6:	781a      	ldrb	r2, [r3, #0]
 80175b8:	4410      	add	r0, r2
 80175ba:	7842      	ldrb	r2, [r0, #1]
 80175bc:	0712      	lsls	r2, r2, #28
 80175be:	d464      	bmi.n	801768a <__ssvfiscanf_r+0x22a>
 80175c0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80175c2:	2b02      	cmp	r3, #2
 80175c4:	dc73      	bgt.n	80176ae <__ssvfiscanf_r+0x24e>
 80175c6:	466b      	mov	r3, sp
 80175c8:	4622      	mov	r2, r4
 80175ca:	a941      	add	r1, sp, #260	; 0x104
 80175cc:	4630      	mov	r0, r6
 80175ce:	f000 f9d7 	bl	8017980 <_scanf_chars>
 80175d2:	2801      	cmp	r0, #1
 80175d4:	f000 8089 	beq.w	80176ea <__ssvfiscanf_r+0x28a>
 80175d8:	2802      	cmp	r0, #2
 80175da:	f47f af71 	bne.w	80174c0 <__ssvfiscanf_r+0x60>
 80175de:	e01d      	b.n	801761c <__ssvfiscanf_r+0x1bc>
 80175e0:	2b75      	cmp	r3, #117	; 0x75
 80175e2:	d0d1      	beq.n	8017588 <__ssvfiscanf_r+0x128>
 80175e4:	2b78      	cmp	r3, #120	; 0x78
 80175e6:	d0c0      	beq.n	801756a <__ssvfiscanf_r+0x10a>
 80175e8:	2b73      	cmp	r3, #115	; 0x73
 80175ea:	d1af      	bne.n	801754c <__ssvfiscanf_r+0xec>
 80175ec:	2302      	movs	r3, #2
 80175ee:	e7d8      	b.n	80175a2 <__ssvfiscanf_r+0x142>
 80175f0:	6863      	ldr	r3, [r4, #4]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	dd0c      	ble.n	8017610 <__ssvfiscanf_r+0x1b0>
 80175f6:	6823      	ldr	r3, [r4, #0]
 80175f8:	781a      	ldrb	r2, [r3, #0]
 80175fa:	455a      	cmp	r2, fp
 80175fc:	d175      	bne.n	80176ea <__ssvfiscanf_r+0x28a>
 80175fe:	3301      	adds	r3, #1
 8017600:	6862      	ldr	r2, [r4, #4]
 8017602:	6023      	str	r3, [r4, #0]
 8017604:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017606:	3a01      	subs	r2, #1
 8017608:	3301      	adds	r3, #1
 801760a:	6062      	str	r2, [r4, #4]
 801760c:	9345      	str	r3, [sp, #276]	; 0x114
 801760e:	e757      	b.n	80174c0 <__ssvfiscanf_r+0x60>
 8017610:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017612:	4621      	mov	r1, r4
 8017614:	4630      	mov	r0, r6
 8017616:	4798      	blx	r3
 8017618:	2800      	cmp	r0, #0
 801761a:	d0ec      	beq.n	80175f6 <__ssvfiscanf_r+0x196>
 801761c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801761e:	2800      	cmp	r0, #0
 8017620:	d159      	bne.n	80176d6 <__ssvfiscanf_r+0x276>
 8017622:	f04f 30ff 	mov.w	r0, #4294967295
 8017626:	e05c      	b.n	80176e2 <__ssvfiscanf_r+0x282>
 8017628:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801762a:	f042 0220 	orr.w	r2, r2, #32
 801762e:	9241      	str	r2, [sp, #260]	; 0x104
 8017630:	e79b      	b.n	801756a <__ssvfiscanf_r+0x10a>
 8017632:	2308      	movs	r3, #8
 8017634:	9342      	str	r3, [sp, #264]	; 0x108
 8017636:	2304      	movs	r3, #4
 8017638:	e7b3      	b.n	80175a2 <__ssvfiscanf_r+0x142>
 801763a:	4629      	mov	r1, r5
 801763c:	4640      	mov	r0, r8
 801763e:	f000 fb4f 	bl	8017ce0 <__sccl>
 8017642:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017648:	9341      	str	r3, [sp, #260]	; 0x104
 801764a:	4605      	mov	r5, r0
 801764c:	2301      	movs	r3, #1
 801764e:	e7a8      	b.n	80175a2 <__ssvfiscanf_r+0x142>
 8017650:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017656:	9341      	str	r3, [sp, #260]	; 0x104
 8017658:	2300      	movs	r3, #0
 801765a:	e7a2      	b.n	80175a2 <__ssvfiscanf_r+0x142>
 801765c:	9841      	ldr	r0, [sp, #260]	; 0x104
 801765e:	06c3      	lsls	r3, r0, #27
 8017660:	f53f af2e 	bmi.w	80174c0 <__ssvfiscanf_r+0x60>
 8017664:	9b00      	ldr	r3, [sp, #0]
 8017666:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017668:	1d19      	adds	r1, r3, #4
 801766a:	9100      	str	r1, [sp, #0]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	07c0      	lsls	r0, r0, #31
 8017670:	bf4c      	ite	mi
 8017672:	801a      	strhmi	r2, [r3, #0]
 8017674:	601a      	strpl	r2, [r3, #0]
 8017676:	e723      	b.n	80174c0 <__ssvfiscanf_r+0x60>
 8017678:	2305      	movs	r3, #5
 801767a:	e792      	b.n	80175a2 <__ssvfiscanf_r+0x142>
 801767c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801767e:	4621      	mov	r1, r4
 8017680:	4630      	mov	r0, r6
 8017682:	4798      	blx	r3
 8017684:	2800      	cmp	r0, #0
 8017686:	d090      	beq.n	80175aa <__ssvfiscanf_r+0x14a>
 8017688:	e7c8      	b.n	801761c <__ssvfiscanf_r+0x1bc>
 801768a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801768c:	3201      	adds	r2, #1
 801768e:	9245      	str	r2, [sp, #276]	; 0x114
 8017690:	6862      	ldr	r2, [r4, #4]
 8017692:	3a01      	subs	r2, #1
 8017694:	2a00      	cmp	r2, #0
 8017696:	6062      	str	r2, [r4, #4]
 8017698:	dd02      	ble.n	80176a0 <__ssvfiscanf_r+0x240>
 801769a:	3301      	adds	r3, #1
 801769c:	6023      	str	r3, [r4, #0]
 801769e:	e787      	b.n	80175b0 <__ssvfiscanf_r+0x150>
 80176a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80176a2:	4621      	mov	r1, r4
 80176a4:	4630      	mov	r0, r6
 80176a6:	4798      	blx	r3
 80176a8:	2800      	cmp	r0, #0
 80176aa:	d081      	beq.n	80175b0 <__ssvfiscanf_r+0x150>
 80176ac:	e7b6      	b.n	801761c <__ssvfiscanf_r+0x1bc>
 80176ae:	2b04      	cmp	r3, #4
 80176b0:	dc06      	bgt.n	80176c0 <__ssvfiscanf_r+0x260>
 80176b2:	466b      	mov	r3, sp
 80176b4:	4622      	mov	r2, r4
 80176b6:	a941      	add	r1, sp, #260	; 0x104
 80176b8:	4630      	mov	r0, r6
 80176ba:	f000 f9c5 	bl	8017a48 <_scanf_i>
 80176be:	e788      	b.n	80175d2 <__ssvfiscanf_r+0x172>
 80176c0:	4b0e      	ldr	r3, [pc, #56]	; (80176fc <__ssvfiscanf_r+0x29c>)
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	f43f aefc 	beq.w	80174c0 <__ssvfiscanf_r+0x60>
 80176c8:	466b      	mov	r3, sp
 80176ca:	4622      	mov	r2, r4
 80176cc:	a941      	add	r1, sp, #260	; 0x104
 80176ce:	4630      	mov	r0, r6
 80176d0:	f7fc f9da 	bl	8013a88 <_scanf_float>
 80176d4:	e77d      	b.n	80175d2 <__ssvfiscanf_r+0x172>
 80176d6:	89a3      	ldrh	r3, [r4, #12]
 80176d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80176dc:	bf18      	it	ne
 80176de:	f04f 30ff 	movne.w	r0, #4294967295
 80176e2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80176e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176ea:	9844      	ldr	r0, [sp, #272]	; 0x110
 80176ec:	e7f9      	b.n	80176e2 <__ssvfiscanf_r+0x282>
 80176ee:	bf00      	nop
 80176f0:	080173ad 	.word	0x080173ad
 80176f4:	08017427 	.word	0x08017427
 80176f8:	080189e2 	.word	0x080189e2
 80176fc:	08013a89 	.word	0x08013a89

08017700 <__sfputc_r>:
 8017700:	6893      	ldr	r3, [r2, #8]
 8017702:	3b01      	subs	r3, #1
 8017704:	2b00      	cmp	r3, #0
 8017706:	b410      	push	{r4}
 8017708:	6093      	str	r3, [r2, #8]
 801770a:	da08      	bge.n	801771e <__sfputc_r+0x1e>
 801770c:	6994      	ldr	r4, [r2, #24]
 801770e:	42a3      	cmp	r3, r4
 8017710:	db01      	blt.n	8017716 <__sfputc_r+0x16>
 8017712:	290a      	cmp	r1, #10
 8017714:	d103      	bne.n	801771e <__sfputc_r+0x1e>
 8017716:	f85d 4b04 	ldr.w	r4, [sp], #4
 801771a:	f7fd bbc7 	b.w	8014eac <__swbuf_r>
 801771e:	6813      	ldr	r3, [r2, #0]
 8017720:	1c58      	adds	r0, r3, #1
 8017722:	6010      	str	r0, [r2, #0]
 8017724:	7019      	strb	r1, [r3, #0]
 8017726:	4608      	mov	r0, r1
 8017728:	f85d 4b04 	ldr.w	r4, [sp], #4
 801772c:	4770      	bx	lr

0801772e <__sfputs_r>:
 801772e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017730:	4606      	mov	r6, r0
 8017732:	460f      	mov	r7, r1
 8017734:	4614      	mov	r4, r2
 8017736:	18d5      	adds	r5, r2, r3
 8017738:	42ac      	cmp	r4, r5
 801773a:	d101      	bne.n	8017740 <__sfputs_r+0x12>
 801773c:	2000      	movs	r0, #0
 801773e:	e007      	b.n	8017750 <__sfputs_r+0x22>
 8017740:	463a      	mov	r2, r7
 8017742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017746:	4630      	mov	r0, r6
 8017748:	f7ff ffda 	bl	8017700 <__sfputc_r>
 801774c:	1c43      	adds	r3, r0, #1
 801774e:	d1f3      	bne.n	8017738 <__sfputs_r+0xa>
 8017750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017754 <_vfiprintf_r>:
 8017754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017758:	460c      	mov	r4, r1
 801775a:	b09d      	sub	sp, #116	; 0x74
 801775c:	4617      	mov	r7, r2
 801775e:	461d      	mov	r5, r3
 8017760:	4606      	mov	r6, r0
 8017762:	b118      	cbz	r0, 801776c <_vfiprintf_r+0x18>
 8017764:	6983      	ldr	r3, [r0, #24]
 8017766:	b90b      	cbnz	r3, 801776c <_vfiprintf_r+0x18>
 8017768:	f7fe fbb6 	bl	8015ed8 <__sinit>
 801776c:	4b7c      	ldr	r3, [pc, #496]	; (8017960 <_vfiprintf_r+0x20c>)
 801776e:	429c      	cmp	r4, r3
 8017770:	d158      	bne.n	8017824 <_vfiprintf_r+0xd0>
 8017772:	6874      	ldr	r4, [r6, #4]
 8017774:	89a3      	ldrh	r3, [r4, #12]
 8017776:	0718      	lsls	r0, r3, #28
 8017778:	d55e      	bpl.n	8017838 <_vfiprintf_r+0xe4>
 801777a:	6923      	ldr	r3, [r4, #16]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d05b      	beq.n	8017838 <_vfiprintf_r+0xe4>
 8017780:	2300      	movs	r3, #0
 8017782:	9309      	str	r3, [sp, #36]	; 0x24
 8017784:	2320      	movs	r3, #32
 8017786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801778a:	2330      	movs	r3, #48	; 0x30
 801778c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017790:	9503      	str	r5, [sp, #12]
 8017792:	f04f 0b01 	mov.w	fp, #1
 8017796:	46b8      	mov	r8, r7
 8017798:	4645      	mov	r5, r8
 801779a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801779e:	b10b      	cbz	r3, 80177a4 <_vfiprintf_r+0x50>
 80177a0:	2b25      	cmp	r3, #37	; 0x25
 80177a2:	d154      	bne.n	801784e <_vfiprintf_r+0xfa>
 80177a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80177a8:	d00b      	beq.n	80177c2 <_vfiprintf_r+0x6e>
 80177aa:	4653      	mov	r3, sl
 80177ac:	463a      	mov	r2, r7
 80177ae:	4621      	mov	r1, r4
 80177b0:	4630      	mov	r0, r6
 80177b2:	f7ff ffbc 	bl	801772e <__sfputs_r>
 80177b6:	3001      	adds	r0, #1
 80177b8:	f000 80c2 	beq.w	8017940 <_vfiprintf_r+0x1ec>
 80177bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177be:	4453      	add	r3, sl
 80177c0:	9309      	str	r3, [sp, #36]	; 0x24
 80177c2:	f898 3000 	ldrb.w	r3, [r8]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	f000 80ba 	beq.w	8017940 <_vfiprintf_r+0x1ec>
 80177cc:	2300      	movs	r3, #0
 80177ce:	f04f 32ff 	mov.w	r2, #4294967295
 80177d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177d6:	9304      	str	r3, [sp, #16]
 80177d8:	9307      	str	r3, [sp, #28]
 80177da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177de:	931a      	str	r3, [sp, #104]	; 0x68
 80177e0:	46a8      	mov	r8, r5
 80177e2:	2205      	movs	r2, #5
 80177e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80177e8:	485e      	ldr	r0, [pc, #376]	; (8017964 <_vfiprintf_r+0x210>)
 80177ea:	f7e8 fd11 	bl	8000210 <memchr>
 80177ee:	9b04      	ldr	r3, [sp, #16]
 80177f0:	bb78      	cbnz	r0, 8017852 <_vfiprintf_r+0xfe>
 80177f2:	06d9      	lsls	r1, r3, #27
 80177f4:	bf44      	itt	mi
 80177f6:	2220      	movmi	r2, #32
 80177f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177fc:	071a      	lsls	r2, r3, #28
 80177fe:	bf44      	itt	mi
 8017800:	222b      	movmi	r2, #43	; 0x2b
 8017802:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017806:	782a      	ldrb	r2, [r5, #0]
 8017808:	2a2a      	cmp	r2, #42	; 0x2a
 801780a:	d02a      	beq.n	8017862 <_vfiprintf_r+0x10e>
 801780c:	9a07      	ldr	r2, [sp, #28]
 801780e:	46a8      	mov	r8, r5
 8017810:	2000      	movs	r0, #0
 8017812:	250a      	movs	r5, #10
 8017814:	4641      	mov	r1, r8
 8017816:	f811 3b01 	ldrb.w	r3, [r1], #1
 801781a:	3b30      	subs	r3, #48	; 0x30
 801781c:	2b09      	cmp	r3, #9
 801781e:	d969      	bls.n	80178f4 <_vfiprintf_r+0x1a0>
 8017820:	b360      	cbz	r0, 801787c <_vfiprintf_r+0x128>
 8017822:	e024      	b.n	801786e <_vfiprintf_r+0x11a>
 8017824:	4b50      	ldr	r3, [pc, #320]	; (8017968 <_vfiprintf_r+0x214>)
 8017826:	429c      	cmp	r4, r3
 8017828:	d101      	bne.n	801782e <_vfiprintf_r+0xda>
 801782a:	68b4      	ldr	r4, [r6, #8]
 801782c:	e7a2      	b.n	8017774 <_vfiprintf_r+0x20>
 801782e:	4b4f      	ldr	r3, [pc, #316]	; (801796c <_vfiprintf_r+0x218>)
 8017830:	429c      	cmp	r4, r3
 8017832:	bf08      	it	eq
 8017834:	68f4      	ldreq	r4, [r6, #12]
 8017836:	e79d      	b.n	8017774 <_vfiprintf_r+0x20>
 8017838:	4621      	mov	r1, r4
 801783a:	4630      	mov	r0, r6
 801783c:	f7fd fb9a 	bl	8014f74 <__swsetup_r>
 8017840:	2800      	cmp	r0, #0
 8017842:	d09d      	beq.n	8017780 <_vfiprintf_r+0x2c>
 8017844:	f04f 30ff 	mov.w	r0, #4294967295
 8017848:	b01d      	add	sp, #116	; 0x74
 801784a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801784e:	46a8      	mov	r8, r5
 8017850:	e7a2      	b.n	8017798 <_vfiprintf_r+0x44>
 8017852:	4a44      	ldr	r2, [pc, #272]	; (8017964 <_vfiprintf_r+0x210>)
 8017854:	1a80      	subs	r0, r0, r2
 8017856:	fa0b f000 	lsl.w	r0, fp, r0
 801785a:	4318      	orrs	r0, r3
 801785c:	9004      	str	r0, [sp, #16]
 801785e:	4645      	mov	r5, r8
 8017860:	e7be      	b.n	80177e0 <_vfiprintf_r+0x8c>
 8017862:	9a03      	ldr	r2, [sp, #12]
 8017864:	1d11      	adds	r1, r2, #4
 8017866:	6812      	ldr	r2, [r2, #0]
 8017868:	9103      	str	r1, [sp, #12]
 801786a:	2a00      	cmp	r2, #0
 801786c:	db01      	blt.n	8017872 <_vfiprintf_r+0x11e>
 801786e:	9207      	str	r2, [sp, #28]
 8017870:	e004      	b.n	801787c <_vfiprintf_r+0x128>
 8017872:	4252      	negs	r2, r2
 8017874:	f043 0302 	orr.w	r3, r3, #2
 8017878:	9207      	str	r2, [sp, #28]
 801787a:	9304      	str	r3, [sp, #16]
 801787c:	f898 3000 	ldrb.w	r3, [r8]
 8017880:	2b2e      	cmp	r3, #46	; 0x2e
 8017882:	d10e      	bne.n	80178a2 <_vfiprintf_r+0x14e>
 8017884:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017888:	2b2a      	cmp	r3, #42	; 0x2a
 801788a:	d138      	bne.n	80178fe <_vfiprintf_r+0x1aa>
 801788c:	9b03      	ldr	r3, [sp, #12]
 801788e:	1d1a      	adds	r2, r3, #4
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	9203      	str	r2, [sp, #12]
 8017894:	2b00      	cmp	r3, #0
 8017896:	bfb8      	it	lt
 8017898:	f04f 33ff 	movlt.w	r3, #4294967295
 801789c:	f108 0802 	add.w	r8, r8, #2
 80178a0:	9305      	str	r3, [sp, #20]
 80178a2:	4d33      	ldr	r5, [pc, #204]	; (8017970 <_vfiprintf_r+0x21c>)
 80178a4:	f898 1000 	ldrb.w	r1, [r8]
 80178a8:	2203      	movs	r2, #3
 80178aa:	4628      	mov	r0, r5
 80178ac:	f7e8 fcb0 	bl	8000210 <memchr>
 80178b0:	b140      	cbz	r0, 80178c4 <_vfiprintf_r+0x170>
 80178b2:	2340      	movs	r3, #64	; 0x40
 80178b4:	1b40      	subs	r0, r0, r5
 80178b6:	fa03 f000 	lsl.w	r0, r3, r0
 80178ba:	9b04      	ldr	r3, [sp, #16]
 80178bc:	4303      	orrs	r3, r0
 80178be:	f108 0801 	add.w	r8, r8, #1
 80178c2:	9304      	str	r3, [sp, #16]
 80178c4:	f898 1000 	ldrb.w	r1, [r8]
 80178c8:	482a      	ldr	r0, [pc, #168]	; (8017974 <_vfiprintf_r+0x220>)
 80178ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80178ce:	2206      	movs	r2, #6
 80178d0:	f108 0701 	add.w	r7, r8, #1
 80178d4:	f7e8 fc9c 	bl	8000210 <memchr>
 80178d8:	2800      	cmp	r0, #0
 80178da:	d037      	beq.n	801794c <_vfiprintf_r+0x1f8>
 80178dc:	4b26      	ldr	r3, [pc, #152]	; (8017978 <_vfiprintf_r+0x224>)
 80178de:	bb1b      	cbnz	r3, 8017928 <_vfiprintf_r+0x1d4>
 80178e0:	9b03      	ldr	r3, [sp, #12]
 80178e2:	3307      	adds	r3, #7
 80178e4:	f023 0307 	bic.w	r3, r3, #7
 80178e8:	3308      	adds	r3, #8
 80178ea:	9303      	str	r3, [sp, #12]
 80178ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178ee:	444b      	add	r3, r9
 80178f0:	9309      	str	r3, [sp, #36]	; 0x24
 80178f2:	e750      	b.n	8017796 <_vfiprintf_r+0x42>
 80178f4:	fb05 3202 	mla	r2, r5, r2, r3
 80178f8:	2001      	movs	r0, #1
 80178fa:	4688      	mov	r8, r1
 80178fc:	e78a      	b.n	8017814 <_vfiprintf_r+0xc0>
 80178fe:	2300      	movs	r3, #0
 8017900:	f108 0801 	add.w	r8, r8, #1
 8017904:	9305      	str	r3, [sp, #20]
 8017906:	4619      	mov	r1, r3
 8017908:	250a      	movs	r5, #10
 801790a:	4640      	mov	r0, r8
 801790c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017910:	3a30      	subs	r2, #48	; 0x30
 8017912:	2a09      	cmp	r2, #9
 8017914:	d903      	bls.n	801791e <_vfiprintf_r+0x1ca>
 8017916:	2b00      	cmp	r3, #0
 8017918:	d0c3      	beq.n	80178a2 <_vfiprintf_r+0x14e>
 801791a:	9105      	str	r1, [sp, #20]
 801791c:	e7c1      	b.n	80178a2 <_vfiprintf_r+0x14e>
 801791e:	fb05 2101 	mla	r1, r5, r1, r2
 8017922:	2301      	movs	r3, #1
 8017924:	4680      	mov	r8, r0
 8017926:	e7f0      	b.n	801790a <_vfiprintf_r+0x1b6>
 8017928:	ab03      	add	r3, sp, #12
 801792a:	9300      	str	r3, [sp, #0]
 801792c:	4622      	mov	r2, r4
 801792e:	4b13      	ldr	r3, [pc, #76]	; (801797c <_vfiprintf_r+0x228>)
 8017930:	a904      	add	r1, sp, #16
 8017932:	4630      	mov	r0, r6
 8017934:	f7fb fce0 	bl	80132f8 <_printf_float>
 8017938:	f1b0 3fff 	cmp.w	r0, #4294967295
 801793c:	4681      	mov	r9, r0
 801793e:	d1d5      	bne.n	80178ec <_vfiprintf_r+0x198>
 8017940:	89a3      	ldrh	r3, [r4, #12]
 8017942:	065b      	lsls	r3, r3, #25
 8017944:	f53f af7e 	bmi.w	8017844 <_vfiprintf_r+0xf0>
 8017948:	9809      	ldr	r0, [sp, #36]	; 0x24
 801794a:	e77d      	b.n	8017848 <_vfiprintf_r+0xf4>
 801794c:	ab03      	add	r3, sp, #12
 801794e:	9300      	str	r3, [sp, #0]
 8017950:	4622      	mov	r2, r4
 8017952:	4b0a      	ldr	r3, [pc, #40]	; (801797c <_vfiprintf_r+0x228>)
 8017954:	a904      	add	r1, sp, #16
 8017956:	4630      	mov	r0, r6
 8017958:	f7fb ff84 	bl	8013864 <_printf_i>
 801795c:	e7ec      	b.n	8017938 <_vfiprintf_r+0x1e4>
 801795e:	bf00      	nop
 8017960:	08018890 	.word	0x08018890
 8017964:	080189dc 	.word	0x080189dc
 8017968:	080188b0 	.word	0x080188b0
 801796c:	08018870 	.word	0x08018870
 8017970:	080189e2 	.word	0x080189e2
 8017974:	080189e6 	.word	0x080189e6
 8017978:	080132f9 	.word	0x080132f9
 801797c:	0801772f 	.word	0x0801772f

08017980 <_scanf_chars>:
 8017980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017984:	4615      	mov	r5, r2
 8017986:	688a      	ldr	r2, [r1, #8]
 8017988:	4680      	mov	r8, r0
 801798a:	460c      	mov	r4, r1
 801798c:	b932      	cbnz	r2, 801799c <_scanf_chars+0x1c>
 801798e:	698a      	ldr	r2, [r1, #24]
 8017990:	2a00      	cmp	r2, #0
 8017992:	bf14      	ite	ne
 8017994:	f04f 32ff 	movne.w	r2, #4294967295
 8017998:	2201      	moveq	r2, #1
 801799a:	608a      	str	r2, [r1, #8]
 801799c:	6822      	ldr	r2, [r4, #0]
 801799e:	06d1      	lsls	r1, r2, #27
 80179a0:	bf5f      	itttt	pl
 80179a2:	681a      	ldrpl	r2, [r3, #0]
 80179a4:	1d11      	addpl	r1, r2, #4
 80179a6:	6019      	strpl	r1, [r3, #0]
 80179a8:	6817      	ldrpl	r7, [r2, #0]
 80179aa:	2600      	movs	r6, #0
 80179ac:	69a3      	ldr	r3, [r4, #24]
 80179ae:	b1db      	cbz	r3, 80179e8 <_scanf_chars+0x68>
 80179b0:	2b01      	cmp	r3, #1
 80179b2:	d107      	bne.n	80179c4 <_scanf_chars+0x44>
 80179b4:	682b      	ldr	r3, [r5, #0]
 80179b6:	6962      	ldr	r2, [r4, #20]
 80179b8:	781b      	ldrb	r3, [r3, #0]
 80179ba:	5cd3      	ldrb	r3, [r2, r3]
 80179bc:	b9a3      	cbnz	r3, 80179e8 <_scanf_chars+0x68>
 80179be:	2e00      	cmp	r6, #0
 80179c0:	d132      	bne.n	8017a28 <_scanf_chars+0xa8>
 80179c2:	e006      	b.n	80179d2 <_scanf_chars+0x52>
 80179c4:	2b02      	cmp	r3, #2
 80179c6:	d007      	beq.n	80179d8 <_scanf_chars+0x58>
 80179c8:	2e00      	cmp	r6, #0
 80179ca:	d12d      	bne.n	8017a28 <_scanf_chars+0xa8>
 80179cc:	69a3      	ldr	r3, [r4, #24]
 80179ce:	2b01      	cmp	r3, #1
 80179d0:	d12a      	bne.n	8017a28 <_scanf_chars+0xa8>
 80179d2:	2001      	movs	r0, #1
 80179d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179d8:	f7fe fe32 	bl	8016640 <__locale_ctype_ptr>
 80179dc:	682b      	ldr	r3, [r5, #0]
 80179de:	781b      	ldrb	r3, [r3, #0]
 80179e0:	4418      	add	r0, r3
 80179e2:	7843      	ldrb	r3, [r0, #1]
 80179e4:	071b      	lsls	r3, r3, #28
 80179e6:	d4ef      	bmi.n	80179c8 <_scanf_chars+0x48>
 80179e8:	6823      	ldr	r3, [r4, #0]
 80179ea:	06da      	lsls	r2, r3, #27
 80179ec:	bf5e      	ittt	pl
 80179ee:	682b      	ldrpl	r3, [r5, #0]
 80179f0:	781b      	ldrbpl	r3, [r3, #0]
 80179f2:	703b      	strbpl	r3, [r7, #0]
 80179f4:	682a      	ldr	r2, [r5, #0]
 80179f6:	686b      	ldr	r3, [r5, #4]
 80179f8:	f102 0201 	add.w	r2, r2, #1
 80179fc:	602a      	str	r2, [r5, #0]
 80179fe:	68a2      	ldr	r2, [r4, #8]
 8017a00:	f103 33ff 	add.w	r3, r3, #4294967295
 8017a04:	f102 32ff 	add.w	r2, r2, #4294967295
 8017a08:	606b      	str	r3, [r5, #4]
 8017a0a:	f106 0601 	add.w	r6, r6, #1
 8017a0e:	bf58      	it	pl
 8017a10:	3701      	addpl	r7, #1
 8017a12:	60a2      	str	r2, [r4, #8]
 8017a14:	b142      	cbz	r2, 8017a28 <_scanf_chars+0xa8>
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	dcc8      	bgt.n	80179ac <_scanf_chars+0x2c>
 8017a1a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017a1e:	4629      	mov	r1, r5
 8017a20:	4640      	mov	r0, r8
 8017a22:	4798      	blx	r3
 8017a24:	2800      	cmp	r0, #0
 8017a26:	d0c1      	beq.n	80179ac <_scanf_chars+0x2c>
 8017a28:	6823      	ldr	r3, [r4, #0]
 8017a2a:	f013 0310 	ands.w	r3, r3, #16
 8017a2e:	d105      	bne.n	8017a3c <_scanf_chars+0xbc>
 8017a30:	68e2      	ldr	r2, [r4, #12]
 8017a32:	3201      	adds	r2, #1
 8017a34:	60e2      	str	r2, [r4, #12]
 8017a36:	69a2      	ldr	r2, [r4, #24]
 8017a38:	b102      	cbz	r2, 8017a3c <_scanf_chars+0xbc>
 8017a3a:	703b      	strb	r3, [r7, #0]
 8017a3c:	6923      	ldr	r3, [r4, #16]
 8017a3e:	441e      	add	r6, r3
 8017a40:	6126      	str	r6, [r4, #16]
 8017a42:	2000      	movs	r0, #0
 8017a44:	e7c6      	b.n	80179d4 <_scanf_chars+0x54>
	...

08017a48 <_scanf_i>:
 8017a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a4c:	469a      	mov	sl, r3
 8017a4e:	4b74      	ldr	r3, [pc, #464]	; (8017c20 <_scanf_i+0x1d8>)
 8017a50:	460c      	mov	r4, r1
 8017a52:	4683      	mov	fp, r0
 8017a54:	4616      	mov	r6, r2
 8017a56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017a5a:	b087      	sub	sp, #28
 8017a5c:	ab03      	add	r3, sp, #12
 8017a5e:	68a7      	ldr	r7, [r4, #8]
 8017a60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017a64:	4b6f      	ldr	r3, [pc, #444]	; (8017c24 <_scanf_i+0x1dc>)
 8017a66:	69a1      	ldr	r1, [r4, #24]
 8017a68:	4a6f      	ldr	r2, [pc, #444]	; (8017c28 <_scanf_i+0x1e0>)
 8017a6a:	2903      	cmp	r1, #3
 8017a6c:	bf08      	it	eq
 8017a6e:	461a      	moveq	r2, r3
 8017a70:	1e7b      	subs	r3, r7, #1
 8017a72:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017a76:	bf84      	itt	hi
 8017a78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017a7c:	60a3      	strhi	r3, [r4, #8]
 8017a7e:	6823      	ldr	r3, [r4, #0]
 8017a80:	9200      	str	r2, [sp, #0]
 8017a82:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017a86:	bf88      	it	hi
 8017a88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017a8c:	f104 091c 	add.w	r9, r4, #28
 8017a90:	6023      	str	r3, [r4, #0]
 8017a92:	bf8c      	ite	hi
 8017a94:	197f      	addhi	r7, r7, r5
 8017a96:	2700      	movls	r7, #0
 8017a98:	464b      	mov	r3, r9
 8017a9a:	f04f 0800 	mov.w	r8, #0
 8017a9e:	9301      	str	r3, [sp, #4]
 8017aa0:	6831      	ldr	r1, [r6, #0]
 8017aa2:	ab03      	add	r3, sp, #12
 8017aa4:	2202      	movs	r2, #2
 8017aa6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017aaa:	7809      	ldrb	r1, [r1, #0]
 8017aac:	f7e8 fbb0 	bl	8000210 <memchr>
 8017ab0:	9b01      	ldr	r3, [sp, #4]
 8017ab2:	b330      	cbz	r0, 8017b02 <_scanf_i+0xba>
 8017ab4:	f1b8 0f01 	cmp.w	r8, #1
 8017ab8:	d15a      	bne.n	8017b70 <_scanf_i+0x128>
 8017aba:	6862      	ldr	r2, [r4, #4]
 8017abc:	b92a      	cbnz	r2, 8017aca <_scanf_i+0x82>
 8017abe:	6822      	ldr	r2, [r4, #0]
 8017ac0:	2108      	movs	r1, #8
 8017ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017ac6:	6061      	str	r1, [r4, #4]
 8017ac8:	6022      	str	r2, [r4, #0]
 8017aca:	6822      	ldr	r2, [r4, #0]
 8017acc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017ad0:	6022      	str	r2, [r4, #0]
 8017ad2:	68a2      	ldr	r2, [r4, #8]
 8017ad4:	1e51      	subs	r1, r2, #1
 8017ad6:	60a1      	str	r1, [r4, #8]
 8017ad8:	b19a      	cbz	r2, 8017b02 <_scanf_i+0xba>
 8017ada:	6832      	ldr	r2, [r6, #0]
 8017adc:	1c51      	adds	r1, r2, #1
 8017ade:	6031      	str	r1, [r6, #0]
 8017ae0:	7812      	ldrb	r2, [r2, #0]
 8017ae2:	701a      	strb	r2, [r3, #0]
 8017ae4:	1c5d      	adds	r5, r3, #1
 8017ae6:	6873      	ldr	r3, [r6, #4]
 8017ae8:	3b01      	subs	r3, #1
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	6073      	str	r3, [r6, #4]
 8017aee:	dc07      	bgt.n	8017b00 <_scanf_i+0xb8>
 8017af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017af4:	4631      	mov	r1, r6
 8017af6:	4658      	mov	r0, fp
 8017af8:	4798      	blx	r3
 8017afa:	2800      	cmp	r0, #0
 8017afc:	f040 8086 	bne.w	8017c0c <_scanf_i+0x1c4>
 8017b00:	462b      	mov	r3, r5
 8017b02:	f108 0801 	add.w	r8, r8, #1
 8017b06:	f1b8 0f03 	cmp.w	r8, #3
 8017b0a:	d1c8      	bne.n	8017a9e <_scanf_i+0x56>
 8017b0c:	6862      	ldr	r2, [r4, #4]
 8017b0e:	b90a      	cbnz	r2, 8017b14 <_scanf_i+0xcc>
 8017b10:	220a      	movs	r2, #10
 8017b12:	6062      	str	r2, [r4, #4]
 8017b14:	6862      	ldr	r2, [r4, #4]
 8017b16:	4945      	ldr	r1, [pc, #276]	; (8017c2c <_scanf_i+0x1e4>)
 8017b18:	6960      	ldr	r0, [r4, #20]
 8017b1a:	9301      	str	r3, [sp, #4]
 8017b1c:	1a89      	subs	r1, r1, r2
 8017b1e:	f000 f8df 	bl	8017ce0 <__sccl>
 8017b22:	9b01      	ldr	r3, [sp, #4]
 8017b24:	f04f 0800 	mov.w	r8, #0
 8017b28:	461d      	mov	r5, r3
 8017b2a:	68a3      	ldr	r3, [r4, #8]
 8017b2c:	6822      	ldr	r2, [r4, #0]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d03a      	beq.n	8017ba8 <_scanf_i+0x160>
 8017b32:	6831      	ldr	r1, [r6, #0]
 8017b34:	6960      	ldr	r0, [r4, #20]
 8017b36:	f891 c000 	ldrb.w	ip, [r1]
 8017b3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017b3e:	2800      	cmp	r0, #0
 8017b40:	d032      	beq.n	8017ba8 <_scanf_i+0x160>
 8017b42:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017b46:	d121      	bne.n	8017b8c <_scanf_i+0x144>
 8017b48:	0510      	lsls	r0, r2, #20
 8017b4a:	d51f      	bpl.n	8017b8c <_scanf_i+0x144>
 8017b4c:	f108 0801 	add.w	r8, r8, #1
 8017b50:	b117      	cbz	r7, 8017b58 <_scanf_i+0x110>
 8017b52:	3301      	adds	r3, #1
 8017b54:	3f01      	subs	r7, #1
 8017b56:	60a3      	str	r3, [r4, #8]
 8017b58:	6873      	ldr	r3, [r6, #4]
 8017b5a:	3b01      	subs	r3, #1
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	6073      	str	r3, [r6, #4]
 8017b60:	dd1b      	ble.n	8017b9a <_scanf_i+0x152>
 8017b62:	6833      	ldr	r3, [r6, #0]
 8017b64:	3301      	adds	r3, #1
 8017b66:	6033      	str	r3, [r6, #0]
 8017b68:	68a3      	ldr	r3, [r4, #8]
 8017b6a:	3b01      	subs	r3, #1
 8017b6c:	60a3      	str	r3, [r4, #8]
 8017b6e:	e7dc      	b.n	8017b2a <_scanf_i+0xe2>
 8017b70:	f1b8 0f02 	cmp.w	r8, #2
 8017b74:	d1ad      	bne.n	8017ad2 <_scanf_i+0x8a>
 8017b76:	6822      	ldr	r2, [r4, #0]
 8017b78:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017b7c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017b80:	d1bf      	bne.n	8017b02 <_scanf_i+0xba>
 8017b82:	2110      	movs	r1, #16
 8017b84:	6061      	str	r1, [r4, #4]
 8017b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017b8a:	e7a1      	b.n	8017ad0 <_scanf_i+0x88>
 8017b8c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017b90:	6022      	str	r2, [r4, #0]
 8017b92:	780b      	ldrb	r3, [r1, #0]
 8017b94:	702b      	strb	r3, [r5, #0]
 8017b96:	3501      	adds	r5, #1
 8017b98:	e7de      	b.n	8017b58 <_scanf_i+0x110>
 8017b9a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017b9e:	4631      	mov	r1, r6
 8017ba0:	4658      	mov	r0, fp
 8017ba2:	4798      	blx	r3
 8017ba4:	2800      	cmp	r0, #0
 8017ba6:	d0df      	beq.n	8017b68 <_scanf_i+0x120>
 8017ba8:	6823      	ldr	r3, [r4, #0]
 8017baa:	05d9      	lsls	r1, r3, #23
 8017bac:	d50c      	bpl.n	8017bc8 <_scanf_i+0x180>
 8017bae:	454d      	cmp	r5, r9
 8017bb0:	d908      	bls.n	8017bc4 <_scanf_i+0x17c>
 8017bb2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017bb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017bba:	4632      	mov	r2, r6
 8017bbc:	4658      	mov	r0, fp
 8017bbe:	4798      	blx	r3
 8017bc0:	1e6f      	subs	r7, r5, #1
 8017bc2:	463d      	mov	r5, r7
 8017bc4:	454d      	cmp	r5, r9
 8017bc6:	d029      	beq.n	8017c1c <_scanf_i+0x1d4>
 8017bc8:	6822      	ldr	r2, [r4, #0]
 8017bca:	f012 0210 	ands.w	r2, r2, #16
 8017bce:	d113      	bne.n	8017bf8 <_scanf_i+0x1b0>
 8017bd0:	702a      	strb	r2, [r5, #0]
 8017bd2:	6863      	ldr	r3, [r4, #4]
 8017bd4:	9e00      	ldr	r6, [sp, #0]
 8017bd6:	4649      	mov	r1, r9
 8017bd8:	4658      	mov	r0, fp
 8017bda:	47b0      	blx	r6
 8017bdc:	f8da 3000 	ldr.w	r3, [sl]
 8017be0:	6821      	ldr	r1, [r4, #0]
 8017be2:	1d1a      	adds	r2, r3, #4
 8017be4:	f8ca 2000 	str.w	r2, [sl]
 8017be8:	f011 0f20 	tst.w	r1, #32
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	d010      	beq.n	8017c12 <_scanf_i+0x1ca>
 8017bf0:	6018      	str	r0, [r3, #0]
 8017bf2:	68e3      	ldr	r3, [r4, #12]
 8017bf4:	3301      	adds	r3, #1
 8017bf6:	60e3      	str	r3, [r4, #12]
 8017bf8:	eba5 0509 	sub.w	r5, r5, r9
 8017bfc:	44a8      	add	r8, r5
 8017bfe:	6925      	ldr	r5, [r4, #16]
 8017c00:	4445      	add	r5, r8
 8017c02:	6125      	str	r5, [r4, #16]
 8017c04:	2000      	movs	r0, #0
 8017c06:	b007      	add	sp, #28
 8017c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c0c:	f04f 0800 	mov.w	r8, #0
 8017c10:	e7ca      	b.n	8017ba8 <_scanf_i+0x160>
 8017c12:	07ca      	lsls	r2, r1, #31
 8017c14:	bf4c      	ite	mi
 8017c16:	8018      	strhmi	r0, [r3, #0]
 8017c18:	6018      	strpl	r0, [r3, #0]
 8017c1a:	e7ea      	b.n	8017bf2 <_scanf_i+0x1aa>
 8017c1c:	2001      	movs	r0, #1
 8017c1e:	e7f2      	b.n	8017c06 <_scanf_i+0x1be>
 8017c20:	08018538 	.word	0x08018538
 8017c24:	08014e49 	.word	0x08014e49
 8017c28:	08017e5d 	.word	0x08017e5d
 8017c2c:	080189fd 	.word	0x080189fd

08017c30 <_putc_r>:
 8017c30:	b570      	push	{r4, r5, r6, lr}
 8017c32:	460d      	mov	r5, r1
 8017c34:	4614      	mov	r4, r2
 8017c36:	4606      	mov	r6, r0
 8017c38:	b118      	cbz	r0, 8017c42 <_putc_r+0x12>
 8017c3a:	6983      	ldr	r3, [r0, #24]
 8017c3c:	b90b      	cbnz	r3, 8017c42 <_putc_r+0x12>
 8017c3e:	f7fe f94b 	bl	8015ed8 <__sinit>
 8017c42:	4b13      	ldr	r3, [pc, #76]	; (8017c90 <_putc_r+0x60>)
 8017c44:	429c      	cmp	r4, r3
 8017c46:	d112      	bne.n	8017c6e <_putc_r+0x3e>
 8017c48:	6874      	ldr	r4, [r6, #4]
 8017c4a:	68a3      	ldr	r3, [r4, #8]
 8017c4c:	3b01      	subs	r3, #1
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	60a3      	str	r3, [r4, #8]
 8017c52:	da16      	bge.n	8017c82 <_putc_r+0x52>
 8017c54:	69a2      	ldr	r2, [r4, #24]
 8017c56:	4293      	cmp	r3, r2
 8017c58:	db02      	blt.n	8017c60 <_putc_r+0x30>
 8017c5a:	b2eb      	uxtb	r3, r5
 8017c5c:	2b0a      	cmp	r3, #10
 8017c5e:	d110      	bne.n	8017c82 <_putc_r+0x52>
 8017c60:	4622      	mov	r2, r4
 8017c62:	4629      	mov	r1, r5
 8017c64:	4630      	mov	r0, r6
 8017c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c6a:	f7fd b91f 	b.w	8014eac <__swbuf_r>
 8017c6e:	4b09      	ldr	r3, [pc, #36]	; (8017c94 <_putc_r+0x64>)
 8017c70:	429c      	cmp	r4, r3
 8017c72:	d101      	bne.n	8017c78 <_putc_r+0x48>
 8017c74:	68b4      	ldr	r4, [r6, #8]
 8017c76:	e7e8      	b.n	8017c4a <_putc_r+0x1a>
 8017c78:	4b07      	ldr	r3, [pc, #28]	; (8017c98 <_putc_r+0x68>)
 8017c7a:	429c      	cmp	r4, r3
 8017c7c:	bf08      	it	eq
 8017c7e:	68f4      	ldreq	r4, [r6, #12]
 8017c80:	e7e3      	b.n	8017c4a <_putc_r+0x1a>
 8017c82:	6823      	ldr	r3, [r4, #0]
 8017c84:	1c5a      	adds	r2, r3, #1
 8017c86:	6022      	str	r2, [r4, #0]
 8017c88:	701d      	strb	r5, [r3, #0]
 8017c8a:	b2e8      	uxtb	r0, r5
 8017c8c:	bd70      	pop	{r4, r5, r6, pc}
 8017c8e:	bf00      	nop
 8017c90:	08018890 	.word	0x08018890
 8017c94:	080188b0 	.word	0x080188b0
 8017c98:	08018870 	.word	0x08018870

08017c9c <_read_r>:
 8017c9c:	b538      	push	{r3, r4, r5, lr}
 8017c9e:	4c07      	ldr	r4, [pc, #28]	; (8017cbc <_read_r+0x20>)
 8017ca0:	4605      	mov	r5, r0
 8017ca2:	4608      	mov	r0, r1
 8017ca4:	4611      	mov	r1, r2
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	6022      	str	r2, [r4, #0]
 8017caa:	461a      	mov	r2, r3
 8017cac:	f7ee f8ce 	bl	8005e4c <_read>
 8017cb0:	1c43      	adds	r3, r0, #1
 8017cb2:	d102      	bne.n	8017cba <_read_r+0x1e>
 8017cb4:	6823      	ldr	r3, [r4, #0]
 8017cb6:	b103      	cbz	r3, 8017cba <_read_r+0x1e>
 8017cb8:	602b      	str	r3, [r5, #0]
 8017cba:	bd38      	pop	{r3, r4, r5, pc}
 8017cbc:	20037fac 	.word	0x20037fac

08017cc0 <_sbrk_r>:
 8017cc0:	b538      	push	{r3, r4, r5, lr}
 8017cc2:	4c06      	ldr	r4, [pc, #24]	; (8017cdc <_sbrk_r+0x1c>)
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	4605      	mov	r5, r0
 8017cc8:	4608      	mov	r0, r1
 8017cca:	6023      	str	r3, [r4, #0]
 8017ccc:	f7ee f910 	bl	8005ef0 <_sbrk>
 8017cd0:	1c43      	adds	r3, r0, #1
 8017cd2:	d102      	bne.n	8017cda <_sbrk_r+0x1a>
 8017cd4:	6823      	ldr	r3, [r4, #0]
 8017cd6:	b103      	cbz	r3, 8017cda <_sbrk_r+0x1a>
 8017cd8:	602b      	str	r3, [r5, #0]
 8017cda:	bd38      	pop	{r3, r4, r5, pc}
 8017cdc:	20037fac 	.word	0x20037fac

08017ce0 <__sccl>:
 8017ce0:	b570      	push	{r4, r5, r6, lr}
 8017ce2:	780b      	ldrb	r3, [r1, #0]
 8017ce4:	2b5e      	cmp	r3, #94	; 0x5e
 8017ce6:	bf13      	iteet	ne
 8017ce8:	1c4a      	addne	r2, r1, #1
 8017cea:	1c8a      	addeq	r2, r1, #2
 8017cec:	784b      	ldrbeq	r3, [r1, #1]
 8017cee:	2100      	movne	r1, #0
 8017cf0:	bf08      	it	eq
 8017cf2:	2101      	moveq	r1, #1
 8017cf4:	1e44      	subs	r4, r0, #1
 8017cf6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017cfa:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017cfe:	42ac      	cmp	r4, r5
 8017d00:	d1fb      	bne.n	8017cfa <__sccl+0x1a>
 8017d02:	b913      	cbnz	r3, 8017d0a <__sccl+0x2a>
 8017d04:	3a01      	subs	r2, #1
 8017d06:	4610      	mov	r0, r2
 8017d08:	bd70      	pop	{r4, r5, r6, pc}
 8017d0a:	f081 0401 	eor.w	r4, r1, #1
 8017d0e:	54c4      	strb	r4, [r0, r3]
 8017d10:	1c51      	adds	r1, r2, #1
 8017d12:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017d16:	2d2d      	cmp	r5, #45	; 0x2d
 8017d18:	f101 36ff 	add.w	r6, r1, #4294967295
 8017d1c:	460a      	mov	r2, r1
 8017d1e:	d006      	beq.n	8017d2e <__sccl+0x4e>
 8017d20:	2d5d      	cmp	r5, #93	; 0x5d
 8017d22:	d0f0      	beq.n	8017d06 <__sccl+0x26>
 8017d24:	b90d      	cbnz	r5, 8017d2a <__sccl+0x4a>
 8017d26:	4632      	mov	r2, r6
 8017d28:	e7ed      	b.n	8017d06 <__sccl+0x26>
 8017d2a:	462b      	mov	r3, r5
 8017d2c:	e7ef      	b.n	8017d0e <__sccl+0x2e>
 8017d2e:	780e      	ldrb	r6, [r1, #0]
 8017d30:	2e5d      	cmp	r6, #93	; 0x5d
 8017d32:	d0fa      	beq.n	8017d2a <__sccl+0x4a>
 8017d34:	42b3      	cmp	r3, r6
 8017d36:	dcf8      	bgt.n	8017d2a <__sccl+0x4a>
 8017d38:	3301      	adds	r3, #1
 8017d3a:	429e      	cmp	r6, r3
 8017d3c:	54c4      	strb	r4, [r0, r3]
 8017d3e:	dcfb      	bgt.n	8017d38 <__sccl+0x58>
 8017d40:	3102      	adds	r1, #2
 8017d42:	e7e6      	b.n	8017d12 <__sccl+0x32>

08017d44 <strncmp>:
 8017d44:	b510      	push	{r4, lr}
 8017d46:	b16a      	cbz	r2, 8017d64 <strncmp+0x20>
 8017d48:	3901      	subs	r1, #1
 8017d4a:	1884      	adds	r4, r0, r2
 8017d4c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017d50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017d54:	4293      	cmp	r3, r2
 8017d56:	d103      	bne.n	8017d60 <strncmp+0x1c>
 8017d58:	42a0      	cmp	r0, r4
 8017d5a:	d001      	beq.n	8017d60 <strncmp+0x1c>
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d1f5      	bne.n	8017d4c <strncmp+0x8>
 8017d60:	1a98      	subs	r0, r3, r2
 8017d62:	bd10      	pop	{r4, pc}
 8017d64:	4610      	mov	r0, r2
 8017d66:	e7fc      	b.n	8017d62 <strncmp+0x1e>

08017d68 <_strtoul_l.isra.0>:
 8017d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d6c:	4680      	mov	r8, r0
 8017d6e:	4689      	mov	r9, r1
 8017d70:	4692      	mov	sl, r2
 8017d72:	461e      	mov	r6, r3
 8017d74:	460f      	mov	r7, r1
 8017d76:	463d      	mov	r5, r7
 8017d78:	9808      	ldr	r0, [sp, #32]
 8017d7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d7e:	f7fe fc5b 	bl	8016638 <__locale_ctype_ptr_l>
 8017d82:	4420      	add	r0, r4
 8017d84:	7843      	ldrb	r3, [r0, #1]
 8017d86:	f013 0308 	ands.w	r3, r3, #8
 8017d8a:	d130      	bne.n	8017dee <_strtoul_l.isra.0+0x86>
 8017d8c:	2c2d      	cmp	r4, #45	; 0x2d
 8017d8e:	d130      	bne.n	8017df2 <_strtoul_l.isra.0+0x8a>
 8017d90:	787c      	ldrb	r4, [r7, #1]
 8017d92:	1cbd      	adds	r5, r7, #2
 8017d94:	2101      	movs	r1, #1
 8017d96:	2e00      	cmp	r6, #0
 8017d98:	d05c      	beq.n	8017e54 <_strtoul_l.isra.0+0xec>
 8017d9a:	2e10      	cmp	r6, #16
 8017d9c:	d109      	bne.n	8017db2 <_strtoul_l.isra.0+0x4a>
 8017d9e:	2c30      	cmp	r4, #48	; 0x30
 8017da0:	d107      	bne.n	8017db2 <_strtoul_l.isra.0+0x4a>
 8017da2:	782b      	ldrb	r3, [r5, #0]
 8017da4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017da8:	2b58      	cmp	r3, #88	; 0x58
 8017daa:	d14e      	bne.n	8017e4a <_strtoul_l.isra.0+0xe2>
 8017dac:	786c      	ldrb	r4, [r5, #1]
 8017dae:	2610      	movs	r6, #16
 8017db0:	3502      	adds	r5, #2
 8017db2:	f04f 32ff 	mov.w	r2, #4294967295
 8017db6:	2300      	movs	r3, #0
 8017db8:	fbb2 f2f6 	udiv	r2, r2, r6
 8017dbc:	fb06 fc02 	mul.w	ip, r6, r2
 8017dc0:	ea6f 0c0c 	mvn.w	ip, ip
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017dca:	2f09      	cmp	r7, #9
 8017dcc:	d817      	bhi.n	8017dfe <_strtoul_l.isra.0+0x96>
 8017dce:	463c      	mov	r4, r7
 8017dd0:	42a6      	cmp	r6, r4
 8017dd2:	dd23      	ble.n	8017e1c <_strtoul_l.isra.0+0xb4>
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	db1e      	blt.n	8017e16 <_strtoul_l.isra.0+0xae>
 8017dd8:	4282      	cmp	r2, r0
 8017dda:	d31c      	bcc.n	8017e16 <_strtoul_l.isra.0+0xae>
 8017ddc:	d101      	bne.n	8017de2 <_strtoul_l.isra.0+0x7a>
 8017dde:	45a4      	cmp	ip, r4
 8017de0:	db19      	blt.n	8017e16 <_strtoul_l.isra.0+0xae>
 8017de2:	fb00 4006 	mla	r0, r0, r6, r4
 8017de6:	2301      	movs	r3, #1
 8017de8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017dec:	e7eb      	b.n	8017dc6 <_strtoul_l.isra.0+0x5e>
 8017dee:	462f      	mov	r7, r5
 8017df0:	e7c1      	b.n	8017d76 <_strtoul_l.isra.0+0xe>
 8017df2:	2c2b      	cmp	r4, #43	; 0x2b
 8017df4:	bf04      	itt	eq
 8017df6:	1cbd      	addeq	r5, r7, #2
 8017df8:	787c      	ldrbeq	r4, [r7, #1]
 8017dfa:	4619      	mov	r1, r3
 8017dfc:	e7cb      	b.n	8017d96 <_strtoul_l.isra.0+0x2e>
 8017dfe:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017e02:	2f19      	cmp	r7, #25
 8017e04:	d801      	bhi.n	8017e0a <_strtoul_l.isra.0+0xa2>
 8017e06:	3c37      	subs	r4, #55	; 0x37
 8017e08:	e7e2      	b.n	8017dd0 <_strtoul_l.isra.0+0x68>
 8017e0a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017e0e:	2f19      	cmp	r7, #25
 8017e10:	d804      	bhi.n	8017e1c <_strtoul_l.isra.0+0xb4>
 8017e12:	3c57      	subs	r4, #87	; 0x57
 8017e14:	e7dc      	b.n	8017dd0 <_strtoul_l.isra.0+0x68>
 8017e16:	f04f 33ff 	mov.w	r3, #4294967295
 8017e1a:	e7e5      	b.n	8017de8 <_strtoul_l.isra.0+0x80>
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	da09      	bge.n	8017e34 <_strtoul_l.isra.0+0xcc>
 8017e20:	2322      	movs	r3, #34	; 0x22
 8017e22:	f8c8 3000 	str.w	r3, [r8]
 8017e26:	f04f 30ff 	mov.w	r0, #4294967295
 8017e2a:	f1ba 0f00 	cmp.w	sl, #0
 8017e2e:	d107      	bne.n	8017e40 <_strtoul_l.isra.0+0xd8>
 8017e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e34:	b101      	cbz	r1, 8017e38 <_strtoul_l.isra.0+0xd0>
 8017e36:	4240      	negs	r0, r0
 8017e38:	f1ba 0f00 	cmp.w	sl, #0
 8017e3c:	d0f8      	beq.n	8017e30 <_strtoul_l.isra.0+0xc8>
 8017e3e:	b10b      	cbz	r3, 8017e44 <_strtoul_l.isra.0+0xdc>
 8017e40:	f105 39ff 	add.w	r9, r5, #4294967295
 8017e44:	f8ca 9000 	str.w	r9, [sl]
 8017e48:	e7f2      	b.n	8017e30 <_strtoul_l.isra.0+0xc8>
 8017e4a:	2430      	movs	r4, #48	; 0x30
 8017e4c:	2e00      	cmp	r6, #0
 8017e4e:	d1b0      	bne.n	8017db2 <_strtoul_l.isra.0+0x4a>
 8017e50:	2608      	movs	r6, #8
 8017e52:	e7ae      	b.n	8017db2 <_strtoul_l.isra.0+0x4a>
 8017e54:	2c30      	cmp	r4, #48	; 0x30
 8017e56:	d0a4      	beq.n	8017da2 <_strtoul_l.isra.0+0x3a>
 8017e58:	260a      	movs	r6, #10
 8017e5a:	e7aa      	b.n	8017db2 <_strtoul_l.isra.0+0x4a>

08017e5c <_strtoul_r>:
 8017e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e5e:	4c06      	ldr	r4, [pc, #24]	; (8017e78 <_strtoul_r+0x1c>)
 8017e60:	4d06      	ldr	r5, [pc, #24]	; (8017e7c <_strtoul_r+0x20>)
 8017e62:	6824      	ldr	r4, [r4, #0]
 8017e64:	6a24      	ldr	r4, [r4, #32]
 8017e66:	2c00      	cmp	r4, #0
 8017e68:	bf08      	it	eq
 8017e6a:	462c      	moveq	r4, r5
 8017e6c:	9400      	str	r4, [sp, #0]
 8017e6e:	f7ff ff7b 	bl	8017d68 <_strtoul_l.isra.0>
 8017e72:	b003      	add	sp, #12
 8017e74:	bd30      	pop	{r4, r5, pc}
 8017e76:	bf00      	nop
 8017e78:	2000000c 	.word	0x2000000c
 8017e7c:	20000070 	.word	0x20000070

08017e80 <__submore>:
 8017e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e84:	460c      	mov	r4, r1
 8017e86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e8c:	4299      	cmp	r1, r3
 8017e8e:	d11d      	bne.n	8017ecc <__submore+0x4c>
 8017e90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017e94:	f7ff f8de 	bl	8017054 <_malloc_r>
 8017e98:	b918      	cbnz	r0, 8017ea2 <__submore+0x22>
 8017e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8017e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ea6:	63a3      	str	r3, [r4, #56]	; 0x38
 8017ea8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017eac:	6360      	str	r0, [r4, #52]	; 0x34
 8017eae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017eb2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017eb6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017eba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017ebe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017ec2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017ec6:	6020      	str	r0, [r4, #0]
 8017ec8:	2000      	movs	r0, #0
 8017eca:	e7e8      	b.n	8017e9e <__submore+0x1e>
 8017ecc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017ece:	0077      	lsls	r7, r6, #1
 8017ed0:	463a      	mov	r2, r7
 8017ed2:	f000 f85a 	bl	8017f8a <_realloc_r>
 8017ed6:	4605      	mov	r5, r0
 8017ed8:	2800      	cmp	r0, #0
 8017eda:	d0de      	beq.n	8017e9a <__submore+0x1a>
 8017edc:	eb00 0806 	add.w	r8, r0, r6
 8017ee0:	4601      	mov	r1, r0
 8017ee2:	4632      	mov	r2, r6
 8017ee4:	4640      	mov	r0, r8
 8017ee6:	f7fb f95f 	bl	80131a8 <memcpy>
 8017eea:	f8c4 8000 	str.w	r8, [r4]
 8017eee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017ef2:	e7e9      	b.n	8017ec8 <__submore+0x48>

08017ef4 <__ascii_wctomb>:
 8017ef4:	b149      	cbz	r1, 8017f0a <__ascii_wctomb+0x16>
 8017ef6:	2aff      	cmp	r2, #255	; 0xff
 8017ef8:	bf85      	ittet	hi
 8017efa:	238a      	movhi	r3, #138	; 0x8a
 8017efc:	6003      	strhi	r3, [r0, #0]
 8017efe:	700a      	strbls	r2, [r1, #0]
 8017f00:	f04f 30ff 	movhi.w	r0, #4294967295
 8017f04:	bf98      	it	ls
 8017f06:	2001      	movls	r0, #1
 8017f08:	4770      	bx	lr
 8017f0a:	4608      	mov	r0, r1
 8017f0c:	4770      	bx	lr
	...

08017f10 <_fstat_r>:
 8017f10:	b538      	push	{r3, r4, r5, lr}
 8017f12:	4c07      	ldr	r4, [pc, #28]	; (8017f30 <_fstat_r+0x20>)
 8017f14:	2300      	movs	r3, #0
 8017f16:	4605      	mov	r5, r0
 8017f18:	4608      	mov	r0, r1
 8017f1a:	4611      	mov	r1, r2
 8017f1c:	6023      	str	r3, [r4, #0]
 8017f1e:	f7ed ffbe 	bl	8005e9e <_fstat>
 8017f22:	1c43      	adds	r3, r0, #1
 8017f24:	d102      	bne.n	8017f2c <_fstat_r+0x1c>
 8017f26:	6823      	ldr	r3, [r4, #0]
 8017f28:	b103      	cbz	r3, 8017f2c <_fstat_r+0x1c>
 8017f2a:	602b      	str	r3, [r5, #0]
 8017f2c:	bd38      	pop	{r3, r4, r5, pc}
 8017f2e:	bf00      	nop
 8017f30:	20037fac 	.word	0x20037fac

08017f34 <_isatty_r>:
 8017f34:	b538      	push	{r3, r4, r5, lr}
 8017f36:	4c06      	ldr	r4, [pc, #24]	; (8017f50 <_isatty_r+0x1c>)
 8017f38:	2300      	movs	r3, #0
 8017f3a:	4605      	mov	r5, r0
 8017f3c:	4608      	mov	r0, r1
 8017f3e:	6023      	str	r3, [r4, #0]
 8017f40:	f7ed ffbd 	bl	8005ebe <_isatty>
 8017f44:	1c43      	adds	r3, r0, #1
 8017f46:	d102      	bne.n	8017f4e <_isatty_r+0x1a>
 8017f48:	6823      	ldr	r3, [r4, #0]
 8017f4a:	b103      	cbz	r3, 8017f4e <_isatty_r+0x1a>
 8017f4c:	602b      	str	r3, [r5, #0]
 8017f4e:	bd38      	pop	{r3, r4, r5, pc}
 8017f50:	20037fac 	.word	0x20037fac

08017f54 <memmove>:
 8017f54:	4288      	cmp	r0, r1
 8017f56:	b510      	push	{r4, lr}
 8017f58:	eb01 0302 	add.w	r3, r1, r2
 8017f5c:	d807      	bhi.n	8017f6e <memmove+0x1a>
 8017f5e:	1e42      	subs	r2, r0, #1
 8017f60:	4299      	cmp	r1, r3
 8017f62:	d00a      	beq.n	8017f7a <memmove+0x26>
 8017f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017f6c:	e7f8      	b.n	8017f60 <memmove+0xc>
 8017f6e:	4283      	cmp	r3, r0
 8017f70:	d9f5      	bls.n	8017f5e <memmove+0xa>
 8017f72:	1881      	adds	r1, r0, r2
 8017f74:	1ad2      	subs	r2, r2, r3
 8017f76:	42d3      	cmn	r3, r2
 8017f78:	d100      	bne.n	8017f7c <memmove+0x28>
 8017f7a:	bd10      	pop	{r4, pc}
 8017f7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017f80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017f84:	e7f7      	b.n	8017f76 <memmove+0x22>

08017f86 <__malloc_lock>:
 8017f86:	4770      	bx	lr

08017f88 <__malloc_unlock>:
 8017f88:	4770      	bx	lr

08017f8a <_realloc_r>:
 8017f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f8c:	4607      	mov	r7, r0
 8017f8e:	4614      	mov	r4, r2
 8017f90:	460e      	mov	r6, r1
 8017f92:	b921      	cbnz	r1, 8017f9e <_realloc_r+0x14>
 8017f94:	4611      	mov	r1, r2
 8017f96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017f9a:	f7ff b85b 	b.w	8017054 <_malloc_r>
 8017f9e:	b922      	cbnz	r2, 8017faa <_realloc_r+0x20>
 8017fa0:	f7ff f80a 	bl	8016fb8 <_free_r>
 8017fa4:	4625      	mov	r5, r4
 8017fa6:	4628      	mov	r0, r5
 8017fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017faa:	f000 f814 	bl	8017fd6 <_malloc_usable_size_r>
 8017fae:	42a0      	cmp	r0, r4
 8017fb0:	d20f      	bcs.n	8017fd2 <_realloc_r+0x48>
 8017fb2:	4621      	mov	r1, r4
 8017fb4:	4638      	mov	r0, r7
 8017fb6:	f7ff f84d 	bl	8017054 <_malloc_r>
 8017fba:	4605      	mov	r5, r0
 8017fbc:	2800      	cmp	r0, #0
 8017fbe:	d0f2      	beq.n	8017fa6 <_realloc_r+0x1c>
 8017fc0:	4631      	mov	r1, r6
 8017fc2:	4622      	mov	r2, r4
 8017fc4:	f7fb f8f0 	bl	80131a8 <memcpy>
 8017fc8:	4631      	mov	r1, r6
 8017fca:	4638      	mov	r0, r7
 8017fcc:	f7fe fff4 	bl	8016fb8 <_free_r>
 8017fd0:	e7e9      	b.n	8017fa6 <_realloc_r+0x1c>
 8017fd2:	4635      	mov	r5, r6
 8017fd4:	e7e7      	b.n	8017fa6 <_realloc_r+0x1c>

08017fd6 <_malloc_usable_size_r>:
 8017fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fda:	1f18      	subs	r0, r3, #4
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	bfbc      	itt	lt
 8017fe0:	580b      	ldrlt	r3, [r1, r0]
 8017fe2:	18c0      	addlt	r0, r0, r3
 8017fe4:	4770      	bx	lr
	...

08017fe8 <_init>:
 8017fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fea:	bf00      	nop
 8017fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fee:	bc08      	pop	{r3}
 8017ff0:	469e      	mov	lr, r3
 8017ff2:	4770      	bx	lr

08017ff4 <_fini>:
 8017ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ff6:	bf00      	nop
 8017ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ffa:	bc08      	pop	{r3}
 8017ffc:	469e      	mov	lr, r3
 8017ffe:	4770      	bx	lr
