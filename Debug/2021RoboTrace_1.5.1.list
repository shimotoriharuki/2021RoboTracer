
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000192b8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  08019478  08019478  00029478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a084  0801a084  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a084  0801a084  0002a084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a08c  0801a08c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a08c  0801a08c  0002a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a094  0801a094  0002a094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a098  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00045af8  200001e0  0801a274  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20045cd8  0801a274  00035cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003aa48  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007bec  00000000  00000000  0006ac54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022f8  00000000  00000000  00072840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002028  00000000  00000000  00074b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354a8  00000000  00000000  00076b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000264d6  00000000  00000000  000ac008  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110e1b  00000000  00000000  000d24de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e32f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a604  00000000  00000000  001e3374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019460 	.word	0x08019460

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019460 	.word	0x08019460

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 fee4 	bl	800ada4 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200437cc 	.word	0x200437cc

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 fecc 	bl	800ada4 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200437cc 	.word	0x200437cc

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 fd6d 	bl	800ab00 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fad4 	bl	80095d4 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 face 	bl	80095d4 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fac8 	bl	80095d4 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fac2 	bl	80095d4 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fabc 	bl	80095d4 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fab6 	bl	80095d4 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fab0 	bl	80095d4 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 faaa 	bl	80095d4 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 faa4 	bl	80095d4 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fa9e 	bl	80095d4 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fa92 	bl	80095d4 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fa8c 	bl	80095d4 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fd6d 	bl	8016c08 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fb9c 	bl	800e934 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d fb98 	bl	800e934 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d fb94 	bl	800e934 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d fb90 	bl	800e934 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200438b8 	.word	0x200438b8
 8001248:	20043820 	.word	0x20043820
 800124c:	20043940 	.word	0x20043940

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200438b8 	.word	0x200438b8
 800137c:	20043940 	.word	0x20043940
 8001380:	20043820 	.word	0x20043820

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200438b8 	.word	0x200438b8
 80013c4:	20043820 	.word	0x20043820
 80013c8:	20043940 	.word	0x20043940

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fb50 	bl	800ead4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fb4c 	bl	800ead4 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20043a20 	.word	0x20043a20
 8001458:	20043704 	.word	0x20043704
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f978 	bl	8001a98 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f98c 	bl	8001ac4 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f011 fee0 	bl	8013588 <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20042610 	.word	0x20042610

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 faad 	bl	8015d70 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f011 ff24 	bl	8013670 <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f011 ff1f 	bl	8013670 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f011 fc8d 	bl	801315e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f958 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019478 	.word	0x08019478
 8001870:	20042580 	.word	0x20042580
 8001874:	20042610 	.word	0x20042610
 8001878:	20042600 	.word	0x20042600

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f900 	bl	8001a98 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f011 fe9b 	bl	80135dc <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 f906 	bl	8013ab8 <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f011 fe95 	bl	80135dc <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f907 	bl	8001ac4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fa48 	bl	8015d70 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f011 fec2 	bl	8013670 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f011 fc30 	bl	801315e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f8fb 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f011 fe34 	bl	8013588 <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	20042480 	.word	0x20042480
 8001930:	20041340 	.word	0x20041340
 8001934:	08019494 	.word	0x08019494
 8001938:	08019478 	.word	0x08019478
 800193c:	20042580 	.word	0x20042580
 8001940:	20042610 	.word	0x20042610
 8001944:	20042600 	.word	0x20042600

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f898 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f8ac 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fa4b 	bl	8015e18 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fa64 	bl	8013e74 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f8a1 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f011 fde6 	bl	8013588 <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019484 	.word	0x08019484
 80019cc:	20042580 	.word	0x20042580
 80019d0:	20042610 	.word	0x20042610

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f852 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f866 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fa05 	bl	8015e18 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 fa1e 	bl	8013e74 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f85b 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f011 fda0 	bl	8013588 <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019490 	.word	0x08019490
 8001a58:	20042580 	.word	0x20042580
 8001a5c:	20042610 	.word	0x20042610

08001a60 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4908      	ldr	r1, [pc, #32]	; (8001a90 <sd_mount+0x30>)
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <sd_mount+0x34>)
 8001a70:	f011 f802 	bl	8012a78 <f_mount>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <sd_mount+0x20>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e001      	b.n	8001a84 <sd_mount+0x24>
	else ret = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	080194a0 	.word	0x080194a0
 8001a94:	20041440 	.word	0x20041440

08001a98 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <create_path+0x24>)
 8001aa6:	f014 f9e3 	bl	8015e70 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <create_path+0x28>)
 8001aae:	f014 f9df 	bl	8015e70 <strcpy>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20042480 	.word	0x20042480
 8001ac0:	20041340 	.word	0x20041340

08001ac4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001aca:	f012 f8b7 	bl	8013c3c <f_mkdir>

	f_chdir(dirpath);
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001ad0:	f011 fd84 	bl	80135dc <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ad4:	2213      	movs	r2, #19
 8001ad6:	4905      	ldr	r1, [pc, #20]	; (8001aec <fopen_folder_and_file+0x28>)
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <fopen_folder_and_file+0x2c>)
 8001ada:	f011 f813 	bl	8012b04 <f_open>

	f_chdir("..");
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <fopen_folder_and_file+0x30>)
 8001ae0:	f011 fd7c 	bl	80135dc <f_chdir>


}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20042480 	.word	0x20042480
 8001aec:	20041340 	.word	0x20041340
 8001af0:	20042610 	.word	0x20042610
 8001af4:	08019494 	.word	0x08019494

08001af8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	e007      	b.n	8001b14 <bufclear+0x1c>
		buffer[i] = '\0';
 8001b04:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <bufclear+0x30>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b7f      	cmp	r3, #127	; 0x7f
 8001b18:	ddf4      	ble.n	8001b04 <bufclear+0xc>
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20042580 	.word	0x20042580

08001b2c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <read_byte+0x54>)
 8001b48:	f008 ffda 	bl	800ab00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b4c:	f107 010f 	add.w	r1, r7, #15
 8001b50:	2364      	movs	r3, #100	; 0x64
 8001b52:	2201      	movs	r2, #1
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <read_byte+0x58>)
 8001b56:	f00c f983 	bl	800de60 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001b5a:	f107 010e 	add.w	r1, r7, #14
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	2201      	movs	r2, #1
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <read_byte+0x58>)
 8001b64:	f00c fab0 	bl	800e0c8 <HAL_SPI_Receive>
	CS_SET;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <read_byte+0x54>)
 8001b70:	f008 ffc6 	bl	800ab00 <HAL_GPIO_WritePin>

	return val;
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020400 	.word	0x40020400
 8001b84:	200436ac 	.word	0x200436ac

08001b88 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460a      	mov	r2, r1
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <write_byte+0x54>)
 8001baa:	f008 ffa9 	bl	800ab00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001bae:	f107 010f 	add.w	r1, r7, #15
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	480a      	ldr	r0, [pc, #40]	; (8001be0 <write_byte+0x58>)
 8001bb8:	f00c f952 	bl	800de60 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001bbc:	1db9      	adds	r1, r7, #6
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4807      	ldr	r0, [pc, #28]	; (8001be0 <write_byte+0x58>)
 8001bc4:	f00c f94c 	bl	800de60 <HAL_SPI_Transmit>
	CS_SET;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <write_byte+0x54>)
 8001bd0:	f008 ff96 	bl	800ab00 <HAL_GPIO_WritePin>
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	200436ac 	.word	0x200436ac

08001be4 <IMU_init>:

uint16_t IMU_init() {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff ff9c 	bl	8001b2c <read_byte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001bf8:	797b      	ldrb	r3, [r7, #5]
 8001bfa:	2be0      	cmp	r3, #224	; 0xe0
 8001bfc:	d119      	bne.n	8001c32 <IMU_init+0x4e>
		ret = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001c02:	2101      	movs	r1, #1
 8001c04:	2006      	movs	r0, #6
 8001c06:	f7ff ffbf 	bl	8001b88 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001c0a:	2110      	movs	r1, #16
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f7ff ffbb 	bl	8001b88 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001c12:	2120      	movs	r1, #32
 8001c14:	207f      	movs	r0, #127	; 0x7f
 8001c16:	f7ff ffb7 	bl	8001b88 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001c1a:	2106      	movs	r1, #6
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff ffb3 	bl	8001b88 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001c22:	2106      	movs	r1, #6
 8001c24:	2014      	movs	r0, #20
 8001c26:	f7ff ffaf 	bl	8001b88 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	207f      	movs	r0, #127	; 0x7f
 8001c2e:	f7ff ffab 	bl	8001b88 <write_byte>
	}
	return ret;
 8001c32:	88fb      	ldrh	r3, [r7, #6]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <read_gyro_data>:

void read_gyro_data() {
 8001c3c:	b598      	push	{r3, r4, r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001c40:	2033      	movs	r0, #51	; 0x33
 8001c42:	f7ff ff73 	bl	8001b2c <read_byte>
 8001c46:	4603      	mov	r3, r0
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21c      	sxth	r4, r3
 8001c4c:	2034      	movs	r0, #52	; 0x34
 8001c4e:	f7ff ff6d 	bl	8001b2c <read_byte>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4323      	orrs	r3, r4
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <read_gyro_data+0x64>)
 8001c5c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001c5e:	2035      	movs	r0, #53	; 0x35
 8001c60:	f7ff ff64 	bl	8001b2c <read_byte>
 8001c64:	4603      	mov	r3, r0
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21c      	sxth	r4, r3
 8001c6a:	2036      	movs	r0, #54	; 0x36
 8001c6c:	f7ff ff5e 	bl	8001b2c <read_byte>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	4323      	orrs	r3, r4
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <read_gyro_data+0x68>)
 8001c7a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c7c:	2037      	movs	r0, #55	; 0x37
 8001c7e:	f7ff ff55 	bl	8001b2c <read_byte>
 8001c82:	4603      	mov	r3, r0
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21c      	sxth	r4, r3
 8001c88:	2038      	movs	r0, #56	; 0x38
 8001c8a:	f7ff ff4f 	bl	8001b2c <read_byte>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4323      	orrs	r3, r4
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <read_gyro_data+0x6c>)
 8001c98:	801a      	strh	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	bd98      	pop	{r3, r4, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20043648 	.word	0x20043648
 8001ca4:	20043646 	.word	0x20043646
 8001ca8:	20043640 	.word	0x20043640

08001cac <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	805a      	strh	r2, [r3, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	809a      	strh	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	80da      	strh	r2, [r3, #6]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	811a      	strh	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	815a      	strh	r2, [r3, #10]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
{

}
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001cf8:	f7ff ff74 	bl	8001be4 <IMU_init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001d00:	f7ff f9ce 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff f9da 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <_ZN3IMU4initEv+0x44>)
 8001d0e:	f7ff fa01 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001d12:	2101      	movs	r1, #1
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff f9d3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001d1a:	89fb      	ldrh	r3, [r7, #14]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <_ZN3IMU4initEv+0x48>)
 8001d20:	f7ff f9f8 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d28:	f007 fc54 	bl	80095d4 <HAL_Delay>

}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	080194a4 	.word	0x080194a4
 8001d38:	080194b0 	.word	0x080194b0
 8001d3c:	00000000 	.word	0x00000000

08001d40 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001d48:	f7ff ff78 	bl	8001c3c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbef 	bl	8000554 <__aeabi_i2d>
 8001d76:	a316      	add	r3, pc, #88	; (adr r3, 8001dd0 <_ZN3IMU12updateValuesEv+0x90>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fc54 	bl	8000628 <__aeabi_dmul>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4625      	mov	r5, r4
 8001d86:	461c      	mov	r4, r3
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <_ZN3IMU12updateValuesEv+0xac>)
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbe0 	bl	8000554 <__aeabi_i2d>
 8001d94:	a310      	add	r3, pc, #64	; (adr r3, 8001dd8 <_ZN3IMU12updateValuesEv+0x98>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fc45 	bl	8000628 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fa89 	bl	80002bc <__adddf3>
 8001daa:	4603      	mov	r3, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	4618      	mov	r0, r3
 8001db0:	4621      	mov	r1, r4
 8001db2:	f7fe fee9 	bl	8000b88 <__aeabi_d2iz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <_ZN3IMU12updateValuesEv+0xac>)
 8001dc6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd0:	eb851eb8 	.word	0xeb851eb8
 8001dd4:	3f9eb851 	.word	0x3f9eb851
 8001dd8:	70a3d70a 	.word	0x70a3d70a
 8001ddc:	3fef0a3d 	.word	0x3fef0a3d
 8001de0:	20043648 	.word	0x20043648
 8001de4:	20043646 	.word	0x20043646
 8001de8:	20043640 	.word	0x20043640
 8001dec:	20000210 	.word	0x20000210

08001df0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e10:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7fe fbaf 	bl	8000578 <__aeabi_f2d>
 8001e1a:	a316      	add	r3, pc, #88	; (adr r3, 8001e74 <_ZN3IMU8getOmegaEv+0x84>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fd2c 	bl	800087c <__aeabi_ddiv>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e2e:	a313      	add	r3, pc, #76	; (adr r3, 8001e7c <_ZN3IMU8getOmegaEv+0x8c>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fbf6 	bl	8000628 <__aeabi_dmul>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	4618      	mov	r0, r3
 8001e42:	4621      	mov	r1, r4
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <_ZN3IMU8getOmegaEv+0x80>)
 8001e4a:	f7fe fd17 	bl	800087c <__aeabi_ddiv>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	4618      	mov	r0, r3
 8001e54:	4621      	mov	r1, r4
 8001e56:	f7fe fedf 	bl	8000c18 <__aeabi_d2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	ee07 3a90 	vmov	s15, r3
}
 8001e60:	eeb0 0a67 	vmov.f32	s0, s15
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	f3af 8000 	nop.w
 8001e70:	40668000 	.word	0x40668000
 8001e74:	66666666 	.word	0x66666666
 8001e78:	40306666 	.word	0x40306666
 8001e7c:	54411744 	.word	0x54411744
 8001e80:	400921fb 	.word	0x400921fb

08001e84 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e86:	b08b      	sub	sp, #44	; 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e8c:	466b      	mov	r3, sp
 8001e8e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e94:	f007 fb9e 	bl	80095d4 <HAL_Delay>
	lcd_clear();
 8001e98:	f7ff f902 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff f90e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001ea4:	4840      	ldr	r0, [pc, #256]	; (8001fa8 <_ZN3IMU11calibrationEv+0x124>)
 8001ea6:	f7ff f935 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff f907 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001eb2:	483e      	ldr	r0, [pc, #248]	; (8001fac <_ZN3IMU11calibrationEv+0x128>)
 8001eb4:	f7ff f92e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001eb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ebc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001ebe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ec2:	1e5d      	subs	r5, r3, #1
 8001ec4:	61bd      	str	r5, [r7, #24]
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	f04f 0400 	mov.w	r4, #0
 8001ed8:	0154      	lsls	r4, r2, #5
 8001eda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ede:	014b      	lsls	r3, r1, #5
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f04f 0400 	mov.w	r4, #0
 8001ef2:	0154      	lsls	r4, r2, #5
 8001ef4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ef8:	014b      	lsls	r3, r1, #5
 8001efa:	462b      	mov	r3, r5
 8001efc:	3301      	adds	r3, #1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3303      	adds	r3, #3
 8001f02:	3307      	adds	r3, #7
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	ebad 0d03 	sub.w	sp, sp, r3
 8001f0c:	466b      	mov	r3, sp
 8001f0e:	3303      	adds	r3, #3
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001f16:	2300      	movs	r3, #0
 8001f18:	83fb      	strh	r3, [r7, #30]
 8001f1a:	8bfa      	ldrh	r2, [r7, #30]
 8001f1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	da13      	bge.n	8001f4c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f2a:	8bfb      	ldrh	r3, [r7, #30]
 8001f2c:	ee07 2a90 	vmov	s15, r2
 8001f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001f3e:	2002      	movs	r0, #2
 8001f40:	f007 fb48 	bl	80095d4 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f44:	8bfb      	ldrh	r3, [r7, #30]
 8001f46:	3301      	adds	r3, #1
 8001f48:	83fb      	strh	r3, [r7, #30]
 8001f4a:	e7e6      	b.n	8001f1a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	462b      	mov	r3, r5
 8001f54:	3301      	adds	r3, #1
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d00e      	beq.n	8001f82 <_ZN3IMU11calibrationEv+0xfe>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f76:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	e7ec      	b.n	8001f5c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f9c:	46b5      	mov	sp, r6
}
 8001f9e:	bf00      	nop
 8001fa0:	372c      	adds	r7, #44	; 0x2c
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	080194b4 	.word	0x080194b4
 8001fac:	080194c0 	.word	0x080194c0

08001fb0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460a      	mov	r2, r1
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	b299      	uxth	r1, r3
 8001fc4:	1dfa      	adds	r2, r7, #7
 8001fc6:	2364      	movs	r3, #100	; 0x64
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <INA260_read+0x50>)
 8001fce:	f008 fee9 	bl	800ada4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	f107 020c 	add.w	r2, r7, #12
 8001fda:	2364      	movs	r3, #100	; 0x64
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	4807      	ldr	r0, [pc, #28]	; (8002000 <INA260_read+0x50>)
 8001fe2:	f008 ffdd 	bl	800afa0 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001fe6:	7b3b      	ldrb	r3, [r7, #12]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	7b7b      	ldrb	r3, [r7, #13]
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20043860 	.word	0x20043860

08002004 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b087      	sub	sp, #28
 8002008:	af02      	add	r7, sp, #8
 800200a:	4604      	mov	r4, r0
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4623      	mov	r3, r4
 8002014:	71fb      	strb	r3, [r7, #7]
 8002016:	4603      	mov	r3, r0
 8002018:	71bb      	strb	r3, [r7, #6]
 800201a:	460b      	mov	r3, r1
 800201c:	717b      	strb	r3, [r7, #5]
 800201e:	4613      	mov	r3, r2
 8002020:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	733b      	strb	r3, [r7, #12]
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	737b      	strb	r3, [r7, #13]
 800202a:	797b      	ldrb	r3, [r7, #5]
 800202c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800202e:	793b      	ldrb	r3, [r7, #4]
 8002030:	b299      	uxth	r1, r3
 8002032:	f107 020c 	add.w	r2, r7, #12
 8002036:	2364      	movs	r3, #100	; 0x64
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2303      	movs	r3, #3
 800203c:	4803      	ldr	r0, [pc, #12]	; (800204c <INA260_write+0x48>)
 800203e:	f008 feb1 	bl	800ada4 <HAL_I2C_Master_Transmit>
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}
 800204a:	bf00      	nop
 800204c:	20043860 	.word	0x20043860

08002050 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
 800205a:	460b      	mov	r3, r1
 800205c:	71bb      	strb	r3, [r7, #6]
 800205e:	4613      	mov	r3, r2
 8002060:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002062:	797b      	ldrb	r3, [r7, #5]
 8002064:	79ba      	ldrb	r2, [r7, #6]
 8002066:	79f9      	ldrb	r1, [r7, #7]
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff ffcb 	bl	8002004 <INA260_write>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	461a      	mov	r2, r3
 8002084:	21df      	movs	r1, #223	; 0xdf
 8002086:	2000      	movs	r0, #0
 8002088:	f7ff ffe2 	bl	8002050 <setConfig>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
{

}
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 80020b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020bc:	482a      	ldr	r0, [pc, #168]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 80020be:	f008 fd07 	bl	800aad0 <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <_ZN8JoyStick8getValueEv+0x2e>
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80020da:	2101      	movs	r1, #1
 80020dc:	4823      	ldr	r0, [pc, #140]	; (800216c <_ZN8JoyStick8getValueEv+0xc0>)
 80020de:	f008 fcf7 	bl	800aad0 <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <_ZN8JoyStick8getValueEv+0x4e>
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80020fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fe:	481a      	ldr	r0, [pc, #104]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 8002100:	f008 fce6 	bl	800aad0 <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <_ZN8JoyStick8getValueEv+0x70>
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800211c:	2104      	movs	r1, #4
 800211e:	4814      	ldr	r0, [pc, #80]	; (8002170 <_ZN8JoyStick8getValueEv+0xc4>)
 8002120:	f008 fcd6 	bl	800aad0 <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <_ZN8JoyStick8getValueEv+0x90>
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	480a      	ldr	r0, [pc, #40]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 8002140:	f008 fcc6 	bl	800aad0 <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <_ZN8JoyStick8getValueEv+0xb0>
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800215c:	89fb      	ldrh	r3, [r7, #14]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40020400 	.word	0x40020400

08002174 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b52      	cmp	r3, #82	; 0x52
 8002184:	d112      	bne.n	80021ac <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800218c:	4856      	ldr	r0, [pc, #344]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800218e:	f008 fcb7 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002198:	4853      	ldr	r0, [pc, #332]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800219a:	f008 fcb1 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800219e:	2201      	movs	r2, #1
 80021a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a4:	4850      	ldr	r0, [pc, #320]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021a6:	f008 fcab 	bl	800ab00 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80021aa:	e098      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	2b47      	cmp	r3, #71	; 0x47
 80021b0:	d112      	bne.n	80021d8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b8:	484b      	ldr	r0, [pc, #300]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021ba:	f008 fca1 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c4:	4848      	ldr	r0, [pc, #288]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f008 fc9b 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021d0:	4845      	ldr	r0, [pc, #276]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021d2:	f008 fc95 	bl	800ab00 <HAL_GPIO_WritePin>
}
 80021d6:	e082      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	2b42      	cmp	r3, #66	; 0x42
 80021dc:	d112      	bne.n	8002204 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e4:	4840      	ldr	r0, [pc, #256]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021e6:	f008 fc8b 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f0:	483d      	ldr	r0, [pc, #244]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f008 fc85 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021fc:	483a      	ldr	r0, [pc, #232]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021fe:	f008 fc7f 	bl	800ab00 <HAL_GPIO_WritePin>
}
 8002202:	e06c      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	2b43      	cmp	r3, #67	; 0x43
 8002208:	d112      	bne.n	8002230 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002210:	4835      	ldr	r0, [pc, #212]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002212:	f008 fc75 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800221c:	4832      	ldr	r0, [pc, #200]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800221e:	f008 fc6f 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002228:	482f      	ldr	r0, [pc, #188]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800222a:	f008 fc69 	bl	800ab00 <HAL_GPIO_WritePin>
}
 800222e:	e056      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	2b4d      	cmp	r3, #77	; 0x4d
 8002234:	d112      	bne.n	800225c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223c:	482a      	ldr	r0, [pc, #168]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800223e:	f008 fc5f 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002242:	2201      	movs	r2, #1
 8002244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002248:	4827      	ldr	r0, [pc, #156]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800224a:	f008 fc59 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002254:	4824      	ldr	r0, [pc, #144]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002256:	f008 fc53 	bl	800ab00 <HAL_GPIO_WritePin>
}
 800225a:	e040      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b59      	cmp	r3, #89	; 0x59
 8002260:	d112      	bne.n	8002288 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002268:	481f      	ldr	r0, [pc, #124]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800226a:	f008 fc49 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002274:	481c      	ldr	r0, [pc, #112]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002276:	f008 fc43 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800227a:	2201      	movs	r2, #1
 800227c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002280:	4819      	ldr	r0, [pc, #100]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002282:	f008 fc3d 	bl	800ab00 <HAL_GPIO_WritePin>
}
 8002286:	e02a      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	2b57      	cmp	r3, #87	; 0x57
 800228c:	d112      	bne.n	80022b4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002294:	4814      	ldr	r0, [pc, #80]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002296:	f008 fc33 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4811      	ldr	r0, [pc, #68]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022a2:	f008 fc2d 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022ac:	480e      	ldr	r0, [pc, #56]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022ae:	f008 fc27 	bl	800ab00 <HAL_GPIO_WritePin>
}
 80022b2:	e014      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	2b7e      	cmp	r3, #126	; 0x7e
 80022b8:	d111      	bne.n	80022de <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c0:	4809      	ldr	r0, [pc, #36]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022c2:	f008 fc1d 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022cc:	4806      	ldr	r0, [pc, #24]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022ce:	f008 fc17 	bl	800ab00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022da:	f008 fc11 	bl	800ab00 <HAL_GPIO_WritePin>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40020000 	.word	0x40020000

080022ec <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
 80022f8:	4613      	mov	r3, r2
 80022fa:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80022fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230a:	4813      	ldr	r0, [pc, #76]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 800230c:	f008 fbf8 	bl	800ab00 <HAL_GPIO_WritePin>
 8002310:	e009      	b.n	8002326 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800231a:	2200      	movs	r2, #0
 800231c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 8002322:	f008 fbed 	bl	800ab00 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002326:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d106      	bne.n	800233c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800232e:	2201      	movs	r2, #1
 8002330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002334:	4808      	ldr	r0, [pc, #32]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 8002336:	f008 fbe3 	bl	800ab00 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800233a:	e009      	b.n	8002350 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800233c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800234a:	4803      	ldr	r0, [pc, #12]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 800234c:	f008 fbd8 	bl	800ab00 <HAL_GPIO_WritePin>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40020000 	.word	0x40020000

0800235c <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 800235c:	b580      	push	{r7, lr}
 800235e:	b092      	sub	sp, #72	; 0x48
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fe92 	bl	8002094 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	331c      	adds	r3, #28
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
 800237e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	429a      	cmp	r2, r3
 8002384:	d008      	beq.n	8002398 <_ZN10LineSensorC1Ev+0x3c>
 8002386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	2200      	movs	r2, #0
 800238e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	3302      	adds	r3, #2
 8002394:	647b      	str	r3, [r7, #68]	; 0x44
 8002396:	e7f2      	b.n	800237e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	3338      	adds	r3, #56	; 0x38
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d009      	beq.n	80023c6 <_ZN10LineSensorC1Ev+0x6a>
 80023b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b4:	623b      	str	r3, [r7, #32]
		s = 0;
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80023be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c0:	3304      	adds	r3, #4
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
 80023c4:	e7f1      	b.n	80023aa <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3338      	adds	r3, #56	; 0x38
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d009      	beq.n	80023f4 <_ZN10LineSensorC1Ev+0x98>
 80023e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e2:	617b      	str	r3, [r7, #20]
		m = 0;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80023ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ee:	3304      	adds	r3, #4
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f2:	e7f1      	b.n	80023d8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	3338      	adds	r3, #56	; 0x38
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	429a      	cmp	r2, r3
 800240c:	d009      	beq.n	8002422 <_ZN10LineSensorC1Ev+0xc6>
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002418:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	3304      	adds	r3, #4
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002420:	e7f1      	b.n	8002406 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4618      	mov	r0, r3
 8002426:	3748      	adds	r7, #72	; 0x48
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	220e      	movs	r2, #14
 8002438:	4619      	mov	r1, r3
 800243a:	4803      	ldr	r0, [pc, #12]	; (8002448 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800243c:	f007 f930 	bl	80096a0 <HAL_ADC_Start_DMA>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20043784 	.word	0x20043784

0800244c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b0d      	cmp	r3, #13
 800245c:	dc2f      	bgt.n	80024be <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3392      	adds	r3, #146	; 0x92
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	ed93 7a00 	vldr	s14, [r3]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	33a0      	adds	r3, #160	; 0xa0
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	1a5b      	subs	r3, r3, r1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	68f9      	ldr	r1, [r7, #12]
 80024a8:	440b      	add	r3, r1
 80024aa:	3306      	adds	r3, #6
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3304      	adds	r3, #4
 80024b2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3301      	adds	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e7cc      	b.n	8002458 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024c8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d902      	bls.n	80024d8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]


}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	2000021c 	.word	0x2000021c

080024e8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80024e8:	b5b0      	push	{r4, r5, r7, lr}
 80024ea:	b08e      	sub	sp, #56	; 0x38
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024fa:	2b0d      	cmp	r3, #13
 80024fc:	f200 80b8 	bhi.w	8002670 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002500:	2300      	movs	r3, #0
 8002502:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002506:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800250a:	2b09      	cmp	r3, #9
 800250c:	d81c      	bhi.n	8002548 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800250e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002512:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002516:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4423      	add	r3, r4
 8002526:	3306      	adds	r3, #6
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4403      	add	r3, r0
 800252c:	3304      	adds	r3, #4
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	008b      	lsls	r3, r1, #2
 8002532:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002536:	440b      	add	r3, r1
 8002538:	3b30      	subs	r3, #48	; 0x30
 800253a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800253c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002540:	3301      	adds	r3, #1
 8002542:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002546:	e7de      	b.n	8002506 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800254e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002552:	2b09      	cmp	r3, #9
 8002554:	d84d      	bhi.n	80025f2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002556:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800255a:	3301      	adds	r3, #1
 800255c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002560:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002564:	2b09      	cmp	r3, #9
 8002566:	d83e      	bhi.n	80025e6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002568:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002572:	4413      	add	r3, r2
 8002574:	3b30      	subs	r3, #48	; 0x30
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002584:	4413      	add	r3, r2
 8002586:	3b30      	subs	r3, #48	; 0x30
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	d521      	bpl.n	80025da <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002596:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025a0:	4413      	add	r3, r2
 80025a2:	3b30      	subs	r3, #48	; 0x30
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80025a8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80025ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025b6:	440a      	add	r2, r1
 80025b8:	3a30      	subs	r2, #48	; 0x30
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025c2:	440b      	add	r3, r1
 80025c4:	3b30      	subs	r3, #48	; 0x30
 80025c6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80025c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025d2:	4413      	add	r3, r2
 80025d4:	3b30      	subs	r3, #48	; 0x30
 80025d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80025da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025de:	3301      	adds	r3, #1
 80025e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025e4:	e7bc      	b.n	8002560 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80025e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ea:	3301      	adds	r3, #1
 80025ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025f0:	e7ad      	b.n	800254e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ffbf 	bl	8000578 <__aeabi_f2d>
 80025fa:	a32a      	add	r3, pc, #168	; (adr r3, 80026a4 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fe f812 	bl	8000628 <__aeabi_dmul>
 8002604:	4603      	mov	r3, r0
 8002606:	460c      	mov	r4, r1
 8002608:	4625      	mov	r5, r4
 800260a:	461c      	mov	r4, r3
 800260c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002610:	4a21      	ldr	r2, [pc, #132]	; (8002698 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ffad 	bl	8000578 <__aeabi_f2d>
 800261e:	a31c      	add	r3, pc, #112	; (adr r3, 8002690 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	f7fe f800 	bl	8000628 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fe44 	bl	80002bc <__adddf3>
 8002634:	4603      	mov	r3, r0
 8002636:	460c      	mov	r4, r1
 8002638:	461a      	mov	r2, r3
 800263a:	4623      	mov	r3, r4
 800263c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f7fe fae8 	bl	8000c18 <__aeabi_d2f>
 8002648:	4601      	mov	r1, r0
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002668:	3301      	adds	r3, #1
 800266a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800266e:	e742      	b.n	80024f6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002678:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	3738      	adds	r7, #56	; 0x38
 8002688:	46bd      	mov	sp, r7
 800268a:	bdb0      	pop	{r4, r5, r7, pc}
 800268c:	f3af 8000 	nop.w
 8002690:	66666666 	.word	0x66666666
 8002694:	3fee6666 	.word	0x3fee6666
 8002698:	20000220 	.word	0x20000220
 800269c:	20000214 	.word	0x20000214
 80026a0:	20000218 	.word	0x20000218
 80026a4:	9999999a 	.word	0x9999999a
 80026a8:	3fa99999 	.word	0x3fa99999

080026ac <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0a0      	sub	sp, #128	; 0x80
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80026b4:	2064      	movs	r0, #100	; 0x64
 80026b6:	f006 ff8d 	bl	80095d4 <HAL_Delay>

	lcd_clear();
 80026ba:	f7fe fcf1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80026be:	2100      	movs	r1, #0
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fcfd 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80026c6:	4886      	ldr	r0, [pc, #536]	; (80028e0 <_ZN10LineSensor11calibrationEv+0x234>)
 80026c8:	f7fe fd24 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80026cc:	2101      	movs	r1, #1
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe fcf6 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80026d4:	4883      	ldr	r0, [pc, #524]	; (80028e4 <_ZN10LineSensor11calibrationEv+0x238>)
 80026d6:	f7fe fd1d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026da:	2300      	movs	r3, #0
 80026dc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80026e0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80026e4:	2b0d      	cmp	r3, #13
 80026e6:	d823      	bhi.n	8002730 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80026e8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80026ec:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	32b0      	adds	r2, #176	; 0xb0
 80026f4:	0092      	lsls	r2, r2, #2
 80026f6:	440a      	add	r2, r1
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002700:	440b      	add	r3, r1
 8002702:	3b40      	subs	r3, #64	; 0x40
 8002704:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002706:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800270a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	32b0      	adds	r2, #176	; 0xb0
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	440a      	add	r2, r1
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800271e:	440b      	add	r3, r1
 8002720:	3b78      	subs	r3, #120	; 0x78
 8002722:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002724:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002728:	3301      	adds	r3, #1
 800272a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800272e:	e7d7      	b.n	80026e0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fcb8 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800273c:	4603      	mov	r3, r0
 800273e:	2b02      	cmp	r3, #2
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d079      	beq.n	8002840 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800274c:	2300      	movs	r3, #0
 800274e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002752:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002756:	2b0d      	cmp	r3, #13
 8002758:	d850      	bhi.n	80027fc <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800275a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002764:	4413      	add	r3, r2
 8002766:	3b40      	subs	r3, #64	; 0x40
 8002768:	ed93 7a00 	vldr	s14, [r3]
 800276c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	33b0      	adds	r3, #176	; 0xb0
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002784:	d50f      	bpl.n	80027a6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002786:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800278a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	32b0      	adds	r2, #176	; 0xb0
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	440a      	add	r2, r1
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800279e:	440b      	add	r3, r1
 80027a0:	3b40      	subs	r3, #64	; 0x40
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e024      	b.n	80027f0 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80027a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027b0:	4413      	add	r3, r2
 80027b2:	3b78      	subs	r3, #120	; 0x78
 80027b4:	ed93 7a00 	vldr	s14, [r3]
 80027b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	33b0      	adds	r3, #176	; 0xb0
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d0:	dd0e      	ble.n	80027f0 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80027d2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80027d6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	32b0      	adds	r2, #176	; 0xb0
 80027de:	0092      	lsls	r2, r2, #2
 80027e0:	440a      	add	r2, r1
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027ea:	440b      	add	r3, r1
 80027ec:	3b78      	subs	r3, #120	; 0x78
 80027ee:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027f0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027f4:	3301      	adds	r3, #1
 80027f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80027fa:	e7aa      	b.n	8002752 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002802:	4618      	mov	r0, r3
 8002804:	f002 fdb2 	bl	800536c <_ZN12RotarySwitch8getValueEv>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	bf0c      	ite	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	2300      	movne	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800281e:	2201      	movs	r2, #1
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fd61 	bl	80022ec <_ZN3LED2LREaa>
 800282a:	e781      	b.n	8002730 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002832:	2200      	movs	r2, #0
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fd57 	bl	80022ec <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800283e:	e777      	b.n	8002730 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002840:	2300      	movs	r3, #0
 8002842:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002846:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800284a:	2b0d      	cmp	r3, #13
 800284c:	d826      	bhi.n	800289c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800284e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002858:	4413      	add	r3, r2
 800285a:	3b40      	subs	r3, #64	; 0x40
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800286a:	4413      	add	r3, r2
 800286c:	3b78      	subs	r3, #120	; 0x78
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002876:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800287a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80028e8 <_ZN10LineSensor11calibrationEv+0x23c>
 800287e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	3392      	adds	r3, #146	; 0x92
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3304      	adds	r3, #4
 800288c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002890:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002894:	3301      	adds	r3, #1
 8002896:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800289a:	e7d4      	b.n	8002846 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800289c:	2300      	movs	r3, #0
 800289e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80028a2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028a6:	2b0d      	cmp	r3, #13
 80028a8:	d815      	bhi.n	80028d6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80028aa:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80028ae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028b8:	440a      	add	r2, r1
 80028ba:	3a78      	subs	r2, #120	; 0x78
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	33a0      	adds	r3, #160	; 0xa0
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3304      	adds	r3, #4
 80028c8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028ca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028ce:	3301      	adds	r3, #1
 80028d0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80028d4:	e7e5      	b.n	80028a2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80028d6:	bf00      	nop
 80028d8:	3780      	adds	r7, #128	; 0x80
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	080194cc 	.word	0x080194cc
 80028e4:	080194d8 	.word	0x080194d8
 80028e8:	447a0000 	.word	0x447a0000

080028ec <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3338      	adds	r3, #56	; 0x38
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	429a      	cmp	r2, r3
 8002910:	d012      	beq.n	8002938 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	60fb      	str	r3, [r7, #12]
		if(s >= 550) out_cnt++;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800298c <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	db02      	blt.n	8002930 <_ZN10LineSensor13emergencyStopEv+0x44>
 800292a:	8bfb      	ldrh	r3, [r7, #30]
 800292c:	3301      	adds	r3, #1
 800292e:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	3304      	adds	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	e7e8      	b.n	800290a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 8002938:	8bfb      	ldrh	r3, [r7, #30]
 800293a:	2b0d      	cmp	r3, #13
 800293c:	d906      	bls.n	800294c <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	e002      	b.n	8002952 <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800294e:	2200      	movs	r2, #0
 8002950:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	2b31      	cmp	r3, #49	; 0x31
 8002958:	d903      	bls.n	8002962 <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e002      	b.n	8002968 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002970:	4293      	cmp	r3, r2
 8002972:	d903      	bls.n	800297c <_ZN10LineSensor13emergencyStopEv+0x90>
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002976:	f242 7210 	movw	r2, #10000	; 0x2710
 800297a:	801a      	strh	r2, [r3, #0]

	return flag;
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800297e:	781b      	ldrb	r3, [r3, #0]

}
 8002980:	4618      	mov	r0, r3
 8002982:	3724      	adds	r7, #36	; 0x24
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	44098000 	.word	0x44098000
 8002990:	20000258 	.word	0x20000258
 8002994:	2000025a 	.word	0x2000025a

08002998 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	ed87 0a01 	vstr	s0, [r7, #4]
 80029a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a6:	eef0 7ae7 	vabs.f32	s15, s15
 80029aa:	eeb0 0a67 	vmov.f32	s0, s15
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	639a      	str	r2, [r3, #56]	; 0x38
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002a42:	3344      	adds	r3, #68	; 0x44
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002a4e:	3346      	adds	r3, #70	; 0x46
 8002a50:	2200      	movs	r2, #0
 8002a52:	801a      	strh	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002a5a:	3348      	adds	r3, #72	; 0x48
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	801a      	strh	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a66:	331c      	adds	r3, #28
 8002a68:	2200      	movs	r2, #0
 8002a6a:	801a      	strh	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a72:	331e      	adds	r3, #30
 8002a74:	2200      	movs	r2, #0
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a7e:	3320      	adds	r3, #32
 8002a80:	2200      	movs	r2, #0
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a8a:	3322      	adds	r3, #34	; 0x22
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a96:	3323      	adds	r3, #35	; 0x23
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002aa2:	3324      	adds	r3, #36	; 0x24
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002aae:	3328      	adds	r3, #40	; 0x28
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002abc:	332c      	adds	r3, #44	; 0x2c
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002aca:	3330      	adds	r3, #48	; 0x30
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ad8:	3334      	adds	r3, #52	; 0x34
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ae6:	3338      	adds	r3, #56	; 0x38
 8002ae8:	2200      	movs	r2, #0
 8002aea:	801a      	strh	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002af2:	333a      	adds	r3, #58	; 0x3a
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1a:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b20:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b26:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b2e:	2300      	movs	r3, #0
 8002b30:	82fb      	strh	r3, [r7, #22]
 8002b32:	8afb      	ldrh	r3, [r7, #22]
 8002b34:	f241 726f 	movw	r2, #5999	; 0x176f
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d80d      	bhi.n	8002b58 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a0>
		velocity_table_[i] = 0;
 8002b3c:	8afb      	ldrh	r3, [r7, #22]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b50:	8afb      	ldrh	r3, [r7, #22]
 8002b52:	3301      	adds	r3, #1
 8002b54:	82fb      	strh	r3, [r7, #22]
 8002b56:	e7ec      	b.n	8002b32 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17a>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b58:	2300      	movs	r3, #0
 8002b5a:	82bb      	strh	r3, [r7, #20]
 8002b5c:	8abb      	ldrh	r3, [r7, #20]
 8002b5e:	2b63      	cmp	r3, #99	; 0x63
 8002b60:	d80e      	bhi.n	8002b80 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002b62:	8abb      	ldrh	r3, [r7, #20]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002b6a:	3312      	adds	r3, #18
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	3304      	adds	r3, #4
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b78:	8abb      	ldrh	r3, [r7, #20]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	82bb      	strh	r3, [r7, #20]
 8002b7e:	e7ed      	b.n	8002b5c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b80:	2300      	movs	r3, #0
 8002b82:	827b      	strh	r3, [r7, #18]
 8002b84:	8a7b      	ldrh	r3, [r7, #18]
 8002b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b8a:	d20e      	bcs.n	8002baa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f2>
		sideline_distance_[i] = 0;
 8002b8c:	8a7b      	ldrh	r3, [r7, #18]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002b94:	3336      	adds	r3, #54	; 0x36
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ba2:	8a7b      	ldrh	r3, [r7, #18]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	827b      	strh	r3, [r7, #18]
 8002ba8:	e7ec      	b.n	8002b84 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002baa:	2300      	movs	r3, #0
 8002bac:	823b      	strh	r3, [r7, #16]
 8002bae:	8a3b      	ldrh	r3, [r7, #16]
 8002bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb4:	d20e      	bcs.n	8002bd4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x21c>
		all_sideline_distance_[i] = 0;
 8002bb6:	8a3b      	ldrh	r3, [r7, #16]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8002bbe:	331e      	adds	r3, #30
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002bcc:	8a3b      	ldrh	r3, [r7, #16]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	823b      	strh	r3, [r7, #16]
 8002bd2:	e7ec      	b.n	8002bae <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f6>
	}
}
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	0000      	movs	r0, r0
 8002be4:	0000      	movs	r0, r0
	...

08002be8 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002c50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002c5c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002c68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002c74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002c80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c90:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002c94:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <_ZN9LineTrace9calcErrorEv+0x128>)
 8002c9c:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc69 	bl	8000578 <__aeabi_f2d>
 8002ca6:	a316      	add	r3, pc, #88	; (adr r3, 8002d00 <_ZN9LineTrace9calcErrorEv+0x118>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f7fd fcbc 	bl	8000628 <__aeabi_dmul>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	4625      	mov	r5, r4
 8002cb6:	461c      	mov	r4, r3
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <_ZN9LineTrace9calcErrorEv+0x12c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fc5b 	bl	8000578 <__aeabi_f2d>
 8002cc2:	a311      	add	r3, pc, #68	; (adr r3, 8002d08 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f7fd fcae 	bl	8000628 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	f7fd faf2 	bl	80002bc <__adddf3>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	460c      	mov	r4, r1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	4621      	mov	r1, r4
 8002ce0:	f7fd ff9a 	bl	8000c18 <__aeabi_d2f>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	60fb      	str	r3, [r7, #12]
	//mon_diff_lpf = diff;

	pre_diff = diff;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <_ZN9LineTrace9calcErrorEv+0x12c>)
 8002cec:	6013      	str	r3, [r2, #0]

	return diff;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	ee07 3a90 	vmov	s15, r3

}
 8002cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	47ae147b 	.word	0x47ae147b
 8002d04:	3fb47ae1 	.word	0x3fb47ae1
 8002d08:	d70a3d71 	.word	0xd70a3d71
 8002d0c:	3fed70a3 	.word	0x3fed70a3
 8002d10:	2000025c 	.word	0x2000025c
 8002d14:	2000027c 	.word	0x2000027c

08002d18 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff61 	bl	8002be8 <_ZN9LineTrace9calcErrorEv>
 8002d26:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002d34:	4b3c      	ldr	r3, [pc, #240]	; (8002e28 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	p = kp_ * diff;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d52:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002d5c:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d66:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	ee17 0a90 	vmov	r0, s15
 8002d72:	f7fd fc01 	bl	8000578 <__aeabi_f2d>
 8002d76:	a32a      	add	r3, pc, #168	; (adr r3, 8002e20 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f7fd fd7e 	bl	800087c <__aeabi_ddiv>
 8002d80:	4603      	mov	r3, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	4618      	mov	r0, r3
 8002d86:	4621      	mov	r1, r4
 8002d88:	f7fd ff46 	bl	8000c18 <__aeabi_d2f>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fbef 	bl	8000578 <__aeabi_f2d>
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	460d      	mov	r5, r1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002da4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dac:	ee17 0a90 	vmov	r0, s15
 8002db0:	f7fd fbe2 	bl	8000578 <__aeabi_f2d>
 8002db4:	a31a      	add	r3, pc, #104	; (adr r3, 8002e20 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f7fd fc35 	bl	8000628 <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd fa79 	bl	80002bc <__adddf3>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	4618      	mov	r0, r3
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	f7fd ff21 	bl	8000c18 <__aeabi_d2f>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002dda:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002ddc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002de0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002de4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df2:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8002e00:	edd7 0a02 	vldr	s1, [r7, #8]
 8002e04:	eeb0 0a67 	vmov.f32	s0, s15
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f002 fe2d 	bl	8005a68 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002e0e:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	6013      	str	r3, [r2, #0]

}
 8002e14:	bf00      	nop
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e1c:	f3af 8000 	nop.w
 8002e20:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e24:	3f50624d 	.word	0x3f50624d
 8002e28:	20000284 	.word	0x20000284
 8002e2c:	20000280 	.word	0x20000280

08002e30 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fc6f 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f002 f952 	bl	80050f0 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f001 fe7f 	bl	8004b54 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 fee3 	bl	8004c3e <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002e9a:	331c      	adds	r3, #28
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	461c      	mov	r4, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f7fe fc1f 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002ea6:	eef0 7a40 	vmov.f32	s15, s0
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002eb0:	3312      	adds	r3, #18
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ec2:	331c      	adds	r3, #28
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ed0:	331c      	adds	r3, #28
 8002ed2:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002eda:	331c      	adds	r3, #28
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	2b63      	cmp	r3, #99	; 0x63
 8002ee0:	d905      	bls.n	8002eee <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ee8:	331c      	adds	r3, #28
 8002eea:	2263      	movs	r2, #99	; 0x63
 8002eec:	801a      	strh	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}

08002ef6 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002ef6:	b590      	push	{r4, r7, lr}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f08:	331e      	adds	r3, #30
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	461c      	mov	r4, r3
 8002f0e:	4610      	mov	r0, r2
 8002f10:	f7fe fbe8 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f14:	eef0 7a40 	vmov.f32	s15, s0
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002f1e:	3336      	adds	r3, #54	; 0x36
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f30:	331e      	adds	r3, #30
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f3e:	331e      	adds	r3, #30
 8002f40:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f48:	331e      	adds	r3, #30
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f50:	d306      	bcc.n	8002f60 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f58:	331e      	adds	r3, #30
 8002f5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f5e:	801a      	strh	r2, [r3, #0]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd90      	pop	{r4, r7, pc}

08002f68 <_ZN9LineTrace24storeAllSideLineDistanceEv>:

void LineTrace::storeAllSideLineDistance()
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	all_sideline_distance_[all_sideline_idx_] = encoder_->getTotalDistance();
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f7a:	3320      	adds	r3, #32
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	461c      	mov	r4, r3
 8002f80:	4610      	mov	r0, r2
 8002f82:	f7fe fbaf 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f86:	eef0 7a40 	vmov.f32	s15, s0
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	f504 534d 	add.w	r3, r4, #13120	; 0x3340
 8002f90:	331e      	adds	r3, #30
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	3304      	adds	r3, #4
 8002f98:	edc3 7a00 	vstr	s15, [r3]
	all_sideline_idx_++;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002fa2:	3320      	adds	r3, #32
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002fb0:	3320      	adds	r3, #32
 8002fb2:	801a      	strh	r2, [r3, #0]

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002fba:	3320      	adds	r3, #32
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc2:	d306      	bcc.n	8002fd2 <_ZN9LineTrace24storeAllSideLineDistanceEv+0x6a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002fca:	3320      	adds	r3, #32
 8002fcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002fd0:	801a      	strh	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
	...

08002fdc <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8002fdc:	b590      	push	{r4, r7, lr}
 8002fde:	ed2d 8b02 	vpush	{d8}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d046      	beq.n	8003080 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ff8:	3348      	adds	r3, #72	; 0x48
 8002ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d11c      	bne.n	800303c <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69dc      	ldr	r4, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fb5b 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003010:	eeb0 8a40 	vmov.f32	s16, s0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	4618      	mov	r0, r3
 800301a:	f002 f858 	bl	80050ce <_ZN8Odometry8getThetaEv>
 800301e:	ec53 2b10 	vmov	r2, r3, d0
 8003022:	4610      	mov	r0, r2
 8003024:	4619      	mov	r1, r3
 8003026:	f7fd fdf7 	bl	8000c18 <__aeabi_d2f>
 800302a:	4603      	mov	r3, r0
 800302c:	ee00 3a90 	vmov	s1, r3
 8003030:	eeb0 0a48 	vmov.f32	s0, s16
 8003034:	4620      	mov	r0, r4
 8003036:	f001 fc53 	bl	80048e0 <_ZN6Logger21storeDistanceAndThetaEff>
 800303a:	e01b      	b.n	8003074 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69dc      	ldr	r4, [r3, #28]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4618      	mov	r0, r3
 8003046:	f002 fd97 	bl	8005b78 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 800304a:	eeb0 8a40 	vmov.f32	s16, s0
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	4618      	mov	r0, r3
 8003054:	f002 f83b 	bl	80050ce <_ZN8Odometry8getThetaEv>
 8003058:	ec53 2b10 	vmov	r2, r3, d0
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f7fd fdda 	bl	8000c18 <__aeabi_d2f>
 8003064:	4603      	mov	r3, r0
 8003066:	ee00 3a90 	vmov	s1, r3
 800306a:	eeb0 0a48 	vmov.f32	s0, s16
 800306e:	4620      	mov	r0, r4
 8003070:	f001 fc7e 	bl	8004970 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	b29a      	uxth	r2, r3
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <_ZN9LineTrace9storeLogsEv+0xb0>)
 800307e:	801a      	strh	r2, [r3, #0]
	}
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	ecbd 8b02 	vpop	{d8}
 800308a:	bd90      	pop	{r4, r7, pc}
 800308c:	20000260 	.word	0x20000260

08003090 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6959      	ldr	r1, [r3, #20]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030a2:	331c      	adds	r3, #28
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80030ac:	3312      	adds	r3, #18
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	3304      	adds	r3, #4
 80030b4:	edd3 7a00 	vldr	s15, [r3]
 80030b8:	eeb0 0a67 	vmov.f32	s0, s15
 80030bc:	4608      	mov	r0, r1
 80030be:	f7fe fb20 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030c8:	331c      	adds	r3, #28
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030d6:	331c      	adds	r3, #28
 80030d8:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030e0:	331c      	adds	r3, #28
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	2b63      	cmp	r3, #99	; 0x63
 80030e6:	d905      	bls.n	80030f4 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030ee:	331c      	adds	r3, #28
 80030f0:	2263      	movs	r2, #99	; 0x63
 80030f2:	801a      	strh	r2, [r3, #0]

}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003104:	2300      	movs	r3, #0
 8003106:	82fb      	strh	r3, [r7, #22]
 8003108:	8afb      	ldrh	r3, [r7, #22]
 800310a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800310e:	d239      	bcs.n	8003184 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8003110:	8afb      	ldrh	r3, [r7, #22]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003118:	3336      	adds	r3, #54	; 0x36
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	3304      	adds	r3, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe fadb 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800312e:	eeb0 7a40 	vmov.f32	s14, s0
 8003132:	edd7 7a04 	vldr	s15, [r7, #16]
 8003136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800313a:	eeb0 0a67 	vmov.f32	s0, s15
 800313e:	f7ff fc2b 	bl	8002998 <_ZSt3absf>
 8003142:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 8003146:	edd7 7a03 	vldr	s15, [r7, #12]
 800314a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80031ac <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 800314e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	d811      	bhi.n	800317c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6959      	ldr	r1, [r3, #20]
 800315c:	8afb      	ldrh	r3, [r7, #22]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003164:	3336      	adds	r3, #54	; 0x36
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	3304      	adds	r3, #4
 800316c:	edd3 7a00 	vldr	s15, [r3]
 8003170:	eeb0 0a67 	vmov.f32	s0, s15
 8003174:	4608      	mov	r0, r1
 8003176:	f7fe fac4 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 800317a:	e003      	b.n	8003184 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800317c:	8afb      	ldrh	r3, [r7, #22]
 800317e:	3301      	adds	r3, #1
 8003180:	82fb      	strh	r3, [r7, #22]
 8003182:	e7c1      	b.n	8003108 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800318a:	331e      	adds	r3, #30
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003192:	d306      	bcc.n	80031a2 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800319a:	331e      	adds	r3, #30
 800319c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031a0:	801a      	strh	r2, [r3, #0]

}
 80031a2:	bf00      	nop
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	42a00000 	.word	0x42a00000

080031b0 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031c2:	3348      	adds	r3, #72	; 0x48
 80031c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d143      	bne.n	8003254 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 80031cc:	edd7 7a00 	vldr	s15, [r7]
 80031d0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80032ec <_ZN9LineTrace15radius2VelocityEf+0x13c>
 80031d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	d504      	bpl.n	80031e8 <_ZN9LineTrace15radius2VelocityEf+0x38>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	e076      	b.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 80031e8:	edd7 7a00 	vldr	s15, [r7]
 80031ec:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80032f0 <_ZN9LineTrace15radius2VelocityEf+0x140>
 80031f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f8:	d502      	bpl.n	8003200 <_ZN9LineTrace15radius2VelocityEf+0x50>
 80031fa:	4b3e      	ldr	r3, [pc, #248]	; (80032f4 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	e06a      	b.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 8003200:	edd7 7a00 	vldr	s15, [r7]
 8003204:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80032f8 <_ZN9LineTrace15radius2VelocityEf+0x148>
 8003208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800320c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003210:	d503      	bpl.n	800321a <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8003212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e05d      	b.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 800321a:	edd7 7a00 	vldr	s15, [r7]
 800321e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80032fc <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8003222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d502      	bpl.n	8003232 <_ZN9LineTrace15radius2VelocityEf+0x82>
 800322c:	4b34      	ldr	r3, [pc, #208]	; (8003300 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e051      	b.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003232:	edd7 7a00 	vldr	s15, [r7]
 8003236:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003304 <_ZN9LineTrace15radius2VelocityEf+0x154>
 800323a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d502      	bpl.n	800324a <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8003244:	4b30      	ldr	r3, [pc, #192]	; (8003308 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e045      	b.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e040      	b.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800325a:	3348      	adds	r3, #72	; 0x48
 800325c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d136      	bne.n	80032d2 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8003264:	edd7 7a00 	vldr	s15, [r7]
 8003268:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80032ec <_ZN9LineTrace15radius2VelocityEf+0x13c>
 800326c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003274:	d504      	bpl.n	8003280 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e02a      	b.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8003280:	edd7 7a00 	vldr	s15, [r7]
 8003284:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80032fc <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8003288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003290:	d502      	bpl.n	8003298 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8003292:	4b1e      	ldr	r3, [pc, #120]	; (800330c <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e01e      	b.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003298:	edd7 7a00 	vldr	s15, [r7]
 800329c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003304 <_ZN9LineTrace15radius2VelocityEf+0x154>
 80032a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a8:	d502      	bpl.n	80032b0 <_ZN9LineTrace15radius2VelocityEf+0x100>
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e012      	b.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 80032b0:	edd7 7a00 	vldr	s15, [r7]
 80032b4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003310 <_ZN9LineTrace15radius2VelocityEf+0x160>
 80032b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c0:	d502      	bpl.n	80032c8 <_ZN9LineTrace15radius2VelocityEf+0x118>
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	e006      	b.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e001      	b.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80032d4:	60fb      	str	r3, [r7, #12]

	return velocity;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	ee07 3a90 	vmov	s15, r3
}
 80032dc:	eeb0 0a67 	vmov.f32	s0, s15
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	43960000 	.word	0x43960000
 80032f0:	44480000 	.word	0x44480000
 80032f4:	3fd9999a 	.word	0x3fd9999a
 80032f8:	447a0000 	.word	0x447a0000
 80032fc:	44bb8000 	.word	0x44bb8000
 8003300:	40133333 	.word	0x40133333
 8003304:	44fa0000 	.word	0x44fa0000
 8003308:	40200000 	.word	0x40200000
 800330c:	40066666 	.word	0x40066666
 8003310:	451c4000 	.word	0x451c4000
 8003314:	40400000 	.word	0x40400000
 8003318:	3fa66666 	.word	0x3fa66666
 800331c:	00000000 	.word	0x00000000

08003320 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	ed87 0a02 	vstr	s0, [r7, #8]
 800332c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800332e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003332:	83fb      	strh	r3, [r7, #30]
 8003334:	8bfb      	ldrh	r3, [r7, #30]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 808d 	beq.w	8003456 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800333c:	8bfb      	ldrh	r3, [r7, #30]
 800333e:	3b01      	subs	r3, #1
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	3304      	adds	r3, #4
 800334c:	ed93 7a00 	vldr	s14, [r3]
 8003350:	8bfb      	ldrh	r3, [r7, #30]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	3304      	adds	r3, #4
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003366:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800336a:	edd7 7a06 	vldr	s15, [r7, #24]
 800336e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	dd6a      	ble.n	800344e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003378:	8bfb      	ldrh	r3, [r7, #30]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8f8 	bl	8000578 <__aeabi_f2d>
 8003388:	a335      	add	r3, pc, #212	; (adr r3, 8003460 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	f7fd f94b 	bl	8000628 <__aeabi_dmul>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	4625      	mov	r5, r4
 8003398:	461c      	mov	r4, r3
 800339a:	69b8      	ldr	r0, [r7, #24]
 800339c:	f7fd f8ec 	bl	8000578 <__aeabi_f2d>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4620      	mov	r0, r4
 80033a6:	4629      	mov	r1, r5
 80033a8:	f7fd fa68 	bl	800087c <__aeabi_ddiv>
 80033ac:	4603      	mov	r3, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	4618      	mov	r0, r3
 80033b2:	4621      	mov	r1, r4
 80033b4:	f7fd fc30 	bl	8000c18 <__aeabi_d2f>
 80033b8:	4603      	mov	r3, r0
 80033ba:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80033bc:	edd7 6a06 	vldr	s13, [r7, #24]
 80033c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80033c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c8:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80033cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80033d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80033d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	dd37      	ble.n	800344e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80033de:	8bfb      	ldrh	r3, [r7, #30]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	3304      	adds	r3, #4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f8c2 	bl	8000578 <__aeabi_f2d>
 80033f4:	4604      	mov	r4, r0
 80033f6:	460d      	mov	r5, r1
 80033f8:	8bfb      	ldrh	r3, [r7, #30]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	ed93 7a00 	vldr	s14, [r3]
 8003404:	edd7 7a02 	vldr	s15, [r7, #8]
 8003408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340c:	ee17 0a90 	vmov	r0, s15
 8003410:	f7fd f8b2 	bl	8000578 <__aeabi_f2d>
 8003414:	a312      	add	r3, pc, #72	; (adr r3, 8003460 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f905 	bl	8000628 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4620      	mov	r0, r4
 8003424:	4629      	mov	r1, r5
 8003426:	f7fc ff49 	bl	80002bc <__adddf3>
 800342a:	4603      	mov	r3, r0
 800342c:	460c      	mov	r4, r1
 800342e:	4619      	mov	r1, r3
 8003430:	4622      	mov	r2, r4
 8003432:	8bfb      	ldrh	r3, [r7, #30]
 8003434:	1e5c      	subs	r4, r3, #1
 8003436:	4608      	mov	r0, r1
 8003438:	4611      	mov	r1, r2
 800343a:	f7fd fbed 	bl	8000c18 <__aeabi_d2f>
 800343e:	4601      	mov	r1, r0
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800344e:	8bfb      	ldrh	r3, [r7, #30]
 8003450:	3b01      	subs	r3, #1
 8003452:	83fb      	strh	r3, [r7, #30]
 8003454:	e76e      	b.n	8003334 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bdb0      	pop	{r4, r5, r7, pc}
 800345e:	bf00      	nop
 8003460:	d2f1a9fc 	.word	0xd2f1a9fc
 8003464:	3f50624d 	.word	0x3f50624d

08003468 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	ed87 0a02 	vstr	s0, [r7, #8]
 8003474:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003476:	2300      	movs	r3, #0
 8003478:	83fb      	strh	r3, [r7, #30]
 800347a:	8bfb      	ldrh	r3, [r7, #30]
 800347c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003480:	4293      	cmp	r3, r2
 8003482:	f200 808d 	bhi.w	80035a0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003486:	8bfb      	ldrh	r3, [r7, #30]
 8003488:	3301      	adds	r3, #1
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	3304      	adds	r3, #4
 8003496:	ed93 7a00 	vldr	s14, [r3]
 800349a:	8bfb      	ldrh	r3, [r7, #30]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	3304      	adds	r3, #4
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b0:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80034b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80034b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	dd6a      	ble.n	8003598 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80034c2:	8bfb      	ldrh	r3, [r7, #30]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f853 	bl	8000578 <__aeabi_f2d>
 80034d2:	a335      	add	r3, pc, #212	; (adr r3, 80035a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f7fd f8a6 	bl	8000628 <__aeabi_dmul>
 80034dc:	4603      	mov	r3, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	4625      	mov	r5, r4
 80034e2:	461c      	mov	r4, r3
 80034e4:	69b8      	ldr	r0, [r7, #24]
 80034e6:	f7fd f847 	bl	8000578 <__aeabi_f2d>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4620      	mov	r0, r4
 80034f0:	4629      	mov	r1, r5
 80034f2:	f7fd f9c3 	bl	800087c <__aeabi_ddiv>
 80034f6:	4603      	mov	r3, r0
 80034f8:	460c      	mov	r4, r1
 80034fa:	4618      	mov	r0, r3
 80034fc:	4621      	mov	r1, r4
 80034fe:	f7fd fb8b 	bl	8000c18 <__aeabi_d2f>
 8003502:	4603      	mov	r3, r0
 8003504:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003506:	edd7 6a06 	vldr	s13, [r7, #24]
 800350a:	ed97 7a05 	vldr	s14, [r7, #20]
 800350e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003512:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003516:	ed97 7a04 	vldr	s14, [r7, #16]
 800351a:	edd7 7a02 	vldr	s15, [r7, #8]
 800351e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	dd37      	ble.n	8003598 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003528:	8bfb      	ldrh	r3, [r7, #30]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	3304      	adds	r3, #4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7fd f81d 	bl	8000578 <__aeabi_f2d>
 800353e:	4604      	mov	r4, r0
 8003540:	460d      	mov	r5, r1
 8003542:	8bfb      	ldrh	r3, [r7, #30]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	ed93 7a00 	vldr	s14, [r3]
 800354e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	ee17 0a90 	vmov	r0, s15
 800355a:	f7fd f80d 	bl	8000578 <__aeabi_f2d>
 800355e:	a312      	add	r3, pc, #72	; (adr r3, 80035a8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fd f860 	bl	8000628 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4620      	mov	r0, r4
 800356e:	4629      	mov	r1, r5
 8003570:	f7fc fea4 	bl	80002bc <__adddf3>
 8003574:	4603      	mov	r3, r0
 8003576:	460c      	mov	r4, r1
 8003578:	4619      	mov	r1, r3
 800357a:	4622      	mov	r2, r4
 800357c:	8bfb      	ldrh	r3, [r7, #30]
 800357e:	1c5c      	adds	r4, r3, #1
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	f7fd fb48 	bl	8000c18 <__aeabi_d2f>
 8003588:	4601      	mov	r1, r0
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	3304      	adds	r3, #4
 8003596:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003598:	8bfb      	ldrh	r3, [r7, #30]
 800359a:	3301      	adds	r3, #1
 800359c:	83fb      	strh	r3, [r7, #30]
 800359e:	e76c      	b.n	800347a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80035a0:	bf00      	nop
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bdb0      	pop	{r4, r5, r7, pc}
 80035a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80035ac:	3f50624d 	.word	0x3f50624d

080035b0 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe f8bd 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035c8:	3344      	adds	r3, #68	; 0x44
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035e4:	3344      	adds	r3, #68	; 0x44
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035f0:	3346      	adds	r3, #70	; 0x46
 80035f2:	2200      	movs	r2, #0
 80035f4:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800361e:	3344      	adds	r3, #68	; 0x44
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8081 	beq.w	800372a <_ZN9LineTrace20updateTargetVelocityEv+0x11a>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe f859 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003632:	eeb0 7a40 	vmov.f32	s14, s0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003648:	bfac      	ite	ge
 800364a:	2301      	movge	r3, #1
 800364c:	2300      	movlt	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d023      	beq.n	800369c <_ZN9LineTrace20updateTargetVelocityEv+0x8c>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800365a:	ed93 7a00 	vldr	s14, [r3]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003664:	3346      	adds	r3, #70	; 0x46
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	3330      	adds	r3, #48	; 0x30
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	edd3 7a00 	vldr	s15, [r3]
 8003674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800367e:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003688:	3346      	adds	r3, #70	; 0x46
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003696:	3346      	adds	r3, #70	; 0x46
 8003698:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 800369a:	e7c5      	b.n	8003628 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036a2:	3346      	adds	r3, #70	; 0x46
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	f241 726f 	movw	r2, #5999	; 0x176f
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d906      	bls.n	80036bc <_ZN9LineTrace20updateTargetVelocityEv+0xac>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036b4:	3346      	adds	r3, #70	; 0x46
 80036b6:	f241 726f 	movw	r2, #5999	; 0x176f
 80036ba:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <_ZN9LineTrace20updateTargetVelocityEv+0x124>)
 80036c6:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe f809 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80036d2:	eef0 7a40 	vmov.f32	s15, s0
 80036d6:	4b18      	ldr	r3, [pc, #96]	; (8003738 <_ZN9LineTrace20updateTargetVelocityEv+0x128>)
 80036d8:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036e2:	3346      	adds	r3, #70	; 0x46
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 80036e8:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036f0:	3346      	adds	r3, #70	; 0x46
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	3304      	adds	r3, #4
 8003700:	edd3 7a00 	vldr	s15, [r3]
 8003704:	eeb0 0a67 	vmov.f32	s0, s15
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fa88 	bl	8003c1e <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003714:	3346      	adds	r3, #70	; 0x46
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a06      	ldr	r2, [pc, #24]	; (8003740 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 8003728:	6013      	str	r3, [r2, #0]

	}
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	2000026c 	.word	0x2000026c
 8003738:	20000270 	.word	0x20000270
 800373c:	20000274 	.word	0x20000274
 8003740:	20000278 	.word	0x20000278

08003744 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fd ffb4 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 800375e:	eeb0 7a40 	vmov.f32	s14, s0
 8003762:	edd7 7a00 	vldr	s15, [r7]
 8003766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376e:	bf94      	ite	ls
 8003770:	2301      	movls	r3, #1
 8003772:	2300      	movhi	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80037a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80037ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80037b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037b8:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80037cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80037d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037dc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80037e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037e4:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80037e8:	4a40      	ldr	r2, [pc, #256]	; (80038ec <_ZN9LineTrace11isCrossLineEv+0x164>)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80037ee:	4a40      	ldr	r2, [pc, #256]	; (80038f0 <_ZN9LineTrace11isCrossLineEv+0x168>)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80037f4:	4b3f      	ldr	r3, [pc, #252]	; (80038f4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	f083 0301 	eor.w	r3, r3, #1
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d044      	beq.n	800388c <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8003802:	edd7 7a03 	vldr	s15, [r7, #12]
 8003806:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80038f8 <_ZN9LineTrace11isCrossLineEv+0x170>
 800380a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	d50f      	bpl.n	8003834 <_ZN9LineTrace11isCrossLineEv+0xac>
 8003814:	edd7 7a02 	vldr	s15, [r7, #8]
 8003818:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80038f8 <_ZN9LineTrace11isCrossLineEv+0x170>
 800381c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003824:	d506      	bpl.n	8003834 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8003826:	4b35      	ldr	r3, [pc, #212]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	3301      	adds	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	4b33      	ldr	r3, [pc, #204]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003830:	801a      	strh	r2, [r3, #0]
 8003832:	e002      	b.n	800383a <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003836:	2200      	movs	r2, #0
 8003838:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 800383a:	4b30      	ldr	r3, [pc, #192]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x174>)
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d94d      	bls.n	80038de <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8003842:	4b2f      	ldr	r3, [pc, #188]	; (8003900 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8003848:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800384e:	4b2b      	ldr	r3, [pc, #172]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003850:	2200      	movs	r2, #0
 8003852:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800385a:	3324      	adds	r3, #36	; 0x24
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003866:	3348      	adds	r3, #72	; 0x48
 8003868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d103      	bne.n	8003878 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff fb09 	bl	8002e88 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003876:	e032      	b.n	80038de <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff fc09 	bl	8003090 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003884:	3338      	adds	r3, #56	; 0x38
 8003886:	2200      	movs	r2, #0
 8003888:	801a      	strh	r2, [r3, #0]
 800388a:	e028      	b.n	80038de <_ZN9LineTrace11isCrossLineEv+0x156>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 800388c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003890:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003904 <_ZN9LineTrace11isCrossLineEv+0x17c>
 8003894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389c:	dd0f      	ble.n	80038be <_ZN9LineTrace11isCrossLineEv+0x136>
 800389e:	edd7 7a02 	vldr	s15, [r7, #8]
 80038a2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003904 <_ZN9LineTrace11isCrossLineEv+0x17c>
 80038a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	dd06      	ble.n	80038be <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x174>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x174>)
 80038ba:	801a      	strh	r2, [r3, #0]
 80038bc:	e002      	b.n	80038c4 <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x174>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 80038c4:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x174>)
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	2b09      	cmp	r3, #9
 80038ca:	d908      	bls.n	80038de <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x174>)
 80038da:	2200      	movs	r2, #0
 80038dc:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000264 	.word	0x20000264
 80038f0:	20000268 	.word	0x20000268
 80038f4:	2000028b 	.word	0x2000028b
 80038f8:	44160000 	.word	0x44160000
 80038fc:	20000288 	.word	0x20000288
 8003900:	2000028a 	.word	0x2000028a
 8003904:	43fa0000 	.word	0x43fa0000

08003908 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003910:	2300      	movs	r3, #0
 8003912:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fed4 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 800391e:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	4618      	mov	r0, r3
 8003928:	f001 fbd1 	bl	80050ce <_ZN8Odometry8getThetaEv>
 800392c:	ec54 3b10 	vmov	r3, r4, d0
 8003930:	4618      	mov	r0, r3
 8003932:	4621      	mov	r1, r4
 8003934:	f7fd f970 	bl	8000c18 <__aeabi_d2f>
 8003938:	4603      	mov	r3, r0
 800393a:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 800393c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003940:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003948:	d101      	bne.n	800394e <_ZN9LineTrace8isStableEv+0x46>
 800394a:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <_ZN9LineTrace8isStableEv+0xd0>)
 800394c:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800394e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003952:	edd7 7a04 	vldr	s15, [r7, #16]
 8003956:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800395a:	eeb0 0a66 	vmov.f32	s0, s13
 800395e:	f7ff f81b 	bl	8002998 <_ZSt3absf>
 8003962:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003966:	edd7 7a03 	vldr	s15, [r7, #12]
 800396a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039dc <_ZN9LineTrace8isStableEv+0xd4>
 800396e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003976:	db01      	blt.n	800397c <_ZN9LineTrace8isStableEv+0x74>
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <_ZN9LineTrace8isStableEv+0xd8>)
 800397a:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003982:	3324      	adds	r3, #36	; 0x24
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <_ZN9LineTrace8isStableEv+0xdc>)
 800398c:	2200      	movs	r2, #0
 800398e:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003996:	3324      	adds	r3, #36	; 0x24
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 800399c:	edd7 7a03 	vldr	s15, [r7, #12]
 80039a0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039e8 <_ZN9LineTrace8isStableEv+0xe0>
 80039a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ac:	db06      	blt.n	80039bc <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <_ZN9LineTrace8isStableEv+0xdc>)
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	3301      	adds	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <_ZN9LineTrace8isStableEv+0xdc>)
 80039b8:	801a      	strh	r2, [r3, #0]
 80039ba:	e002      	b.n	80039c2 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <_ZN9LineTrace8isStableEv+0xdc>)
 80039be:	2200      	movs	r2, #0
 80039c0:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <_ZN9LineTrace8isStableEv+0xdc>)
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	2b16      	cmp	r3, #22
 80039c8:	d901      	bls.n	80039ce <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd90      	pop	{r4, r7, pc}
 80039d8:	3727c5ac 	.word	0x3727c5ac
 80039dc:	459c4000 	.word	0x459c4000
 80039e0:	459c4000 	.word	0x459c4000
 80039e4:	2000028c 	.word	0x2000028c
 80039e8:	44fa0000 	.word	0x44fa0000

080039ec <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08e      	sub	sp, #56	; 0x38
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80039f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039f8:	2201      	movs	r2, #1
 80039fa:	4951      	ldr	r1, [pc, #324]	; (8003b40 <_ZN9LineTrace4initEv+0x154>)
 80039fc:	4851      	ldr	r0, [pc, #324]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 80039fe:	f7fd ffa3 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a06:	2201      	movs	r2, #1
 8003a08:	494f      	ldr	r1, [pc, #316]	; (8003b48 <_ZN9LineTrace4initEv+0x15c>)
 8003a0a:	484e      	ldr	r0, [pc, #312]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 8003a0c:	f7fd ff9c 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003a10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a14:	2201      	movs	r2, #1
 8003a16:	494d      	ldr	r1, [pc, #308]	; (8003b4c <_ZN9LineTrace4initEv+0x160>)
 8003a18:	484a      	ldr	r0, [pc, #296]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 8003a1a:	f7fd ff95 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003a1e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003a22:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003a26:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003a2a:	eeb0 1a66 	vmov.f32	s2, s13
 8003a2e:	eef0 0a47 	vmov.f32	s1, s14
 8003a32:	eeb0 0a67 	vmov.f32	s0, s15
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f89c 	bl	8003b74 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a40:	2201      	movs	r2, #1
 8003a42:	4943      	ldr	r1, [pc, #268]	; (8003b50 <_ZN9LineTrace4initEv+0x164>)
 8003a44:	483f      	ldr	r0, [pc, #252]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 8003a46:	f7fd ff7f 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4940      	ldr	r1, [pc, #256]	; (8003b54 <_ZN9LineTrace4initEv+0x168>)
 8003a52:	483c      	ldr	r0, [pc, #240]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 8003a54:	f7fd ff78 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a58:	f107 0320 	add.w	r3, r7, #32
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	493e      	ldr	r1, [pc, #248]	; (8003b58 <_ZN9LineTrace4initEv+0x16c>)
 8003a60:	4838      	ldr	r0, [pc, #224]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 8003a62:	f7fd ff71 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a66:	f107 031c 	add.w	r3, r7, #28
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	493b      	ldr	r1, [pc, #236]	; (8003b5c <_ZN9LineTrace4initEv+0x170>)
 8003a6e:	4835      	ldr	r0, [pc, #212]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 8003a70:	f7fd ff6a 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a74:	f107 0318 	add.w	r3, r7, #24
 8003a78:	2201      	movs	r2, #1
 8003a7a:	4939      	ldr	r1, [pc, #228]	; (8003b60 <_ZN9LineTrace4initEv+0x174>)
 8003a7c:	4831      	ldr	r0, [pc, #196]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 8003a7e:	f7fd ff63 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a86:	eeb0 0a67 	vmov.f32	s0, s15
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8c7 	bl	8003c1e <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003a90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a94:	eeb0 0a67 	vmov.f32	s0, s15
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f8d0 	bl	8003c3e <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003a9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f8d9 	bl	8003c5e <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003aac:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f8e2 	bl	8003c7e <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003aba:	edd7 7a06 	vldr	s15, [r7, #24]
 8003abe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8eb 	bl	8003c9e <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003ac8:	f107 0314 	add.w	r3, r7, #20
 8003acc:	2201      	movs	r2, #1
 8003ace:	4925      	ldr	r1, [pc, #148]	; (8003b64 <_ZN9LineTrace4initEv+0x178>)
 8003ad0:	481c      	ldr	r0, [pc, #112]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 8003ad2:	f7fd ff39 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003ad6:	f107 0310 	add.w	r3, r7, #16
 8003ada:	2201      	movs	r2, #1
 8003adc:	4922      	ldr	r1, [pc, #136]	; (8003b68 <_ZN9LineTrace4initEv+0x17c>)
 8003ade:	4819      	ldr	r0, [pc, #100]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 8003ae0:	f7fd ff32 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003ae4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ae8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003aec:	eef0 0a47 	vmov.f32	s1, s14
 8003af0:	eeb0 0a67 	vmov.f32	s0, s15
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f932 	bl	8003d5e <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	60bb      	str	r3, [r7, #8]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003b06:	f107 030c 	add.w	r3, r7, #12
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4917      	ldr	r1, [pc, #92]	; (8003b6c <_ZN9LineTrace4initEv+0x180>)
 8003b0e:	480d      	ldr	r0, [pc, #52]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 8003b10:	f7fd ff1a 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003b14:	f107 0308 	add.w	r3, r7, #8
 8003b18:	2201      	movs	r2, #1
 8003b1a:	4915      	ldr	r1, [pc, #84]	; (8003b70 <_ZN9LineTrace4initEv+0x184>)
 8003b1c:	4809      	ldr	r0, [pc, #36]	; (8003b44 <_ZN9LineTrace4initEv+0x158>)
 8003b1e:	f7fd ff13 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003b22:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b26:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b2a:	eef0 0a47 	vmov.f32	s1, s14
 8003b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f92d 	bl	8003d92 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003b38:	bf00      	nop
 8003b3a:	3738      	adds	r7, #56	; 0x38
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	08019550 	.word	0x08019550
 8003b44:	08019558 	.word	0x08019558
 8003b48:	08019560 	.word	0x08019560
 8003b4c:	08019568 	.word	0x08019568
 8003b50:	08019570 	.word	0x08019570
 8003b54:	0801957c 	.word	0x0801957c
 8003b58:	08019588 	.word	0x08019588
 8003b5c:	08019594 	.word	0x08019594
 8003b60:	080195a0 	.word	0x080195a0
 8003b64:	080195ac 	.word	0x080195ac
 8003b68:	080195b4 	.word	0x080195b4
 8003b6c:	080195bc 	.word	0x080195bc
 8003b70:	080195c8 	.word	0x080195c8

08003b74 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b80:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b84:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
	return kp_;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	ee07 3a90 	vmov	s15, r3
}
 8003bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
	return ki_;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	ee07 3a90 	vmov	s15, r3
}
 8003bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
	return kd_;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bee:	ee07 3a90 	vmov	s15, r3
}
 8003bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ccc:	ee07 3a90 	vmov	s15, r3
}
 8003cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cec:	ee07 3a90 	vmov	s15, r3
}
 8003cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d0c:	ee07 3a90 	vmov	s15, r3
}
 8003d10:	eeb0 0a67 	vmov.f32	s0, s15
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d2c:	ee07 3a90 	vmov	s15, r3
}
 8003d30:	eeb0 0a67 	vmov.f32	s0, s15
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d4c:	ee07 3a90 	vmov	s15, r3
}
 8003d50:	eeb0 0a67 	vmov.f32	s0, s15
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d6a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d74:	3328      	adds	r3, #40	; 0x28
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d80:	332c      	adds	r3, #44	; 0x2c
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	601a      	str	r2, [r3, #0]
}
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d9e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003da8:	3330      	adds	r3, #48	; 0x30
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003db4:	3334      	adds	r3, #52	; 0x34
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	601a      	str	r2, [r3, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003dd4:	3328      	adds	r3, #40	; 0x28
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	ee07 3a90 	vmov	s15, r3
}
 8003ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003df8:	3334      	adds	r3, #52	; 0x34
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	ee07 3a90 	vmov	s15, r3
}
 8003e00:	eeb0 0a67 	vmov.f32	s0, s15
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e1c:	3330      	adds	r3, #48	; 0x30
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	ee07 3a90 	vmov	s15, r3
}
 8003e24:	eeb0 0a67 	vmov.f32	s0, s15
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e40:	332c      	adds	r3, #44	; 0x2c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	ee07 3a90 	vmov	s15, r3
}
 8003e48:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	//calcAngle();

	if(excution_flag_ == true){
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8160 	beq.w	800412c <_ZN9LineTrace4flipEv+0x2d4>
		// ---- line following processing -----//
		pidTrace();
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7fe ff53 	bl	8002d18 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003e72:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff fc64 	bl	8003744 <_ZN9LineTrace16isTargetDistanceEf>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d040      	beq.n	8003f04 <_ZN9LineTrace4flipEv+0xac>
			// ---- Store Logs ------//
			storeLogs();
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff f8aa 	bl	8002fdc <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69dc      	ldr	r4, [r3, #28]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fd ffad 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 8003e96:	eef0 7a40 	vmov.f32	s15, s0
 8003e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f000 fca2 	bl	80047e8 <_ZN6Logger8storeLogEf>
			logger_->storeLog2(target_omega_);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8003eae:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f000 fcd5 	bl	8004862 <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff fd25 	bl	8003908 <_ZN9LineTrace8isStableEv>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00c      	beq.n	8003ede <_ZN9LineTrace4flipEv+0x86>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 fb9f 	bl	800560c <_ZN10SideSensor9getStatusEv>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d101      	bne.n	8003ede <_ZN9LineTrace4flipEv+0x86>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <_ZN9LineTrace4flipEv+0x88>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <_ZN9LineTrace4flipEv+0x98>
				stable_flag_ = true;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003eea:	3323      	adds	r3, #35	; 0x23
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fd fc13 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 f8f6 	bl	80050f0 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff fb83 	bl	8003610 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff fc3c 	bl	8003788 <_ZN9LineTrace11isCrossLineEv>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <_ZN9LineTrace4flipEv+0xd2>
			side_sensor_->enableIgnore();
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 fb9e 	bl	800565c <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fd fc26 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 fbae 	bl	8005690 <_ZN10SideSensor13getIgnoreFlagEv>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00f      	beq.n	8003f5a <_ZN9LineTrace4flipEv+0x102>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fd fc0a 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003f44:	eeb0 7a40 	vmov.f32	s14, s0
 8003f48:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8004134 <_ZN9LineTrace4flipEv+0x2dc>
 8003f4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f54:	db01      	blt.n	8003f5a <_ZN9LineTrace4flipEv+0x102>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <_ZN9LineTrace4flipEv+0x104>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <_ZN9LineTrace4flipEv+0x112>
			side_sensor_->disableIgnore();
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 fb86 	bl	8005676 <_ZN10SideSensor13disableIgnoreEv>

		}

		// ------- Store side line distance ------//
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f70:	3323      	adds	r3, #35	; 0x23
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00b      	beq.n	8003f90 <_ZN9LineTrace4flipEv+0x138>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fb45 	bl	800560c <_ZN10SideSensor9getStatusEv>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d101      	bne.n	8003f90 <_ZN9LineTrace4flipEv+0x138>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <_ZN9LineTrace4flipEv+0x13a>
 8003f90:	2300      	movs	r3, #0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d020      	beq.n	8003fd8 <_ZN9LineTrace4flipEv+0x180>
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f9c:	3348      	adds	r3, #72	; 0x48
 8003f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <_ZN9LineTrace4flipEv+0x156>
				storeSideLineDistance();
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fe ffa5 	bl	8002ef6 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003fac:	e008      	b.n	8003fc0 <_ZN9LineTrace4flipEv+0x168>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff f8a4 	bl	80030fc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fba:	3338      	adds	r3, #56	; 0x38
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fc6:	3323      	adds	r3, #35	; 0x23
 8003fc8:	2200      	movs	r2, #0
 8003fca:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fd2:	3324      	adds	r3, #36	; 0x24
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fde:	3323      	adds	r3, #35	; 0x23
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <_ZN9LineTrace4flipEv+0x1a0>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	2201      	movs	r2, #1
 8003fec:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe f97b 	bl	80022ec <_ZN3LED2LREaa>
 8003ff6:	e007      	b.n	8004008 <_ZN9LineTrace4flipEv+0x1b0>
		else led_.LR(-1, 0);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f04f 31ff 	mov.w	r1, #4294967295
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe f972 	bl	80022ec <_ZN3LED2LREaa>

		// ------ All sideline storing -------//
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x02) == 0x02){
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800400e:	333a      	adds	r3, #58	; 0x3a
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	f083 0301 	eor.w	r3, r3, #1
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <_ZN9LineTrace4flipEv+0x1dc>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	4618      	mov	r0, r3
 8004022:	f001 faf3 	bl	800560c <_ZN10SideSensor9getStatusEv>
 8004026:	4603      	mov	r3, r0
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b02      	cmp	r3, #2
 800402e:	d101      	bne.n	8004034 <_ZN9LineTrace4flipEv+0x1dc>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <_ZN9LineTrace4flipEv+0x1de>
 8004034:	2300      	movs	r3, #0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d011      	beq.n	800405e <_ZN9LineTrace4flipEv+0x206>
			all_sideline_flag_ = true;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004040:	333a      	adds	r3, #58	; 0x3a
 8004042:	2201      	movs	r2, #1
 8004044:	701a      	strb	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800404c:	3348      	adds	r3, #72	; 0x48
 800404e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d120      	bne.n	8004098 <_ZN9LineTrace4flipEv+0x240>
				storeAllSideLineDistance();
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fe ff86 	bl	8002f68 <_ZN9LineTrace24storeAllSideLineDistanceEv>
 800405c:	e01c      	b.n	8004098 <_ZN9LineTrace4flipEv+0x240>
			else{
				//correctionTotalDistanceFromAllSideMarker();
				//correction_check_cnt_ = 0;
			}
		}
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004064:	333a      	adds	r3, #58	; 0x3a
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00c      	beq.n	8004086 <_ZN9LineTrace4flipEv+0x22e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	4618      	mov	r0, r3
 8004072:	f001 facb 	bl	800560c <_ZN10SideSensor9getStatusEv>
 8004076:	4603      	mov	r3, r0
 8004078:	43db      	mvns	r3, r3
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d101      	bne.n	8004086 <_ZN9LineTrace4flipEv+0x22e>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <_ZN9LineTrace4flipEv+0x230>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <_ZN9LineTrace4flipEv+0x240>
			all_sideline_flag_ = false;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004092:	333a      	adds	r3, #58	; 0x3a
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
		}


		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe fc25 	bl	80028ec <_ZN10LineSensor13emergencyStopEv>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <_ZN9LineTrace4flipEv+0x26c>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	eddf 0a22 	vldr	s1, [pc, #136]	; 8004138 <_ZN9LineTrace4flipEv+0x2e0>
 80040b0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8004138 <_ZN9LineTrace4flipEv+0x2e0>
 80040b4:	4618      	mov	r0, r3
 80040b6:	f001 fcd7 	bl	8005a68 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fd f960 	bl	8001384 <_ZN3ESC3offEv>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040ca:	3338      	adds	r3, #56	; 0x38
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040d8:	3338      	adds	r3, #56	; 0x38
 80040da:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040e2:	3338      	adds	r3, #56	; 0x38
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d906      	bls.n	80040fc <_ZN9LineTrace4flipEv+0x2a4>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040f4:	3338      	adds	r3, #56	; 0x38
 80040f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80040fa:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004102:	3338      	adds	r3, #56	; 0x38
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	2b50      	cmp	r3, #80	; 0x50
 8004108:	d808      	bhi.n	800411c <_ZN9LineTrace4flipEv+0x2c4>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	330c      	adds	r3, #12
 800410e:	2201      	movs	r2, #1
 8004110:	f04f 31ff 	mov.w	r1, #4294967295
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe f8e9 	bl	80022ec <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 800411a:	e007      	b.n	800412c <_ZN9LineTrace4flipEv+0x2d4>
		else led_.LR(-1, 0);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	330c      	adds	r3, #12
 8004120:	2200      	movs	r2, #0
 8004122:	f04f 31ff 	mov.w	r1, #4294967295
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe f8e0 	bl	80022ec <_ZN3LED2LREaa>
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bd90      	pop	{r4, r7, pc}
 8004134:	43480000 	.word	0x43480000
 8004138:	00000000 	.word	0x00000000

0800413c <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800414e:	3348      	adds	r3, #72	; 0x48
 8004150:	887a      	ldrh	r2, [r7, #2]
 8004152:	801a      	strh	r2, [r3, #0]
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	i_reset_flag_ = true;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	velocity_ctrl_->start();
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4618      	mov	r0, r3
 800417e:	f001 fccc 	bl	8005b1a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fa58 	bl	800563c <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004192:	331c      	adds	r3, #28
 8004194:	2200      	movs	r2, #0
 8004196:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800419e:	331e      	adds	r3, #30
 80041a0:	2200      	movs	r2, #0
 80041a2:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80041aa:	3320      	adds	r3, #32
 80041ac:	2200      	movs	r2, #0
 80041ae:	801a      	strh	r2, [r3, #0]
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80041c4:	2300      	movs	r3, #0
 80041c6:	737b      	strb	r3, [r7, #13]
	start();
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7ff ffc9 	bl	8004160 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80041ce:	7b7b      	ldrb	r3, [r7, #13]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d15b      	bne.n	800428c <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 80041d4:	89fb      	ldrh	r3, [r7, #14]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <_ZN9LineTrace7runningEv+0x28>
 80041da:	2b0a      	cmp	r3, #10
 80041dc:	d030      	beq.n	8004240 <_ZN9LineTrace7runningEv+0x88>
 80041de:	e054      	b.n	800428a <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fa1d 	bl	8005624 <_ZN10SideSensor16getWhiteLineCntREv>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d044      	beq.n	8004284 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fe fe18 	bl	8002e30 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004206:	3348      	adds	r3, #72	; 0x48
 8004208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff f9cd 	bl	80035b0 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd faab 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	4618      	mov	r0, r3
 8004226:	f7fd fa89 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	330c      	adds	r3, #12
 800422e:	f04f 32ff 	mov.w	r2, #4294967295
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f7fe f859 	bl	80022ec <_ZN3LED2LREaa>
				stage = 10;
 800423a:	230a      	movs	r3, #10
 800423c:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800423e:	e021      	b.n	8004284 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	4618      	mov	r0, r3
 8004246:	f001 f9ed 	bl	8005624 <_ZN10SideSensor16getWhiteLineCntREv>
 800424a:	4603      	mov	r3, r0
 800424c:	2b02      	cmp	r3, #2
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fe fe03 	bl	8002e66 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff f9b8 	bl	80035d6 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004266:	2064      	movs	r0, #100	; 0x64
 8004268:	f005 f9b4 	bl	80095d4 <HAL_Delay>

				setTargetVelocity(0);
 800426c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800429c <_ZN9LineTrace7runningEv+0xe4>
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fcd4 	bl	8003c1e <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004276:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800427a:	f005 f9ab 	bl	80095d4 <HAL_Delay>

				goal_flag = true;
 800427e:	2301      	movs	r3, #1
 8004280:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004282:	e001      	b.n	8004288 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8004284:	bf00      	nop
 8004286:	e7a2      	b.n	80041ce <_ZN9LineTrace7runningEv+0x16>
			break;
 8004288:	bf00      	nop
	while(goal_flag == false){
 800428a:	e7a0      	b.n	80041ce <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f807 	bl	80042a0 <_ZN9LineTrace4stopEv>
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	00000000 	.word	0x00000000

080042a0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	velocity_ctrl_->stop();
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 fc43 	bl	8005b40 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	330c      	adds	r3, #12
 80042be:	2201      	movs	r2, #1
 80042c0:	f04f 31ff 	mov.w	r1, #4294967295
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fe f811 	bl	80022ec <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042d0:	3348      	adds	r3, #72	; 0x48
 80042d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d107      	bne.n	80042ea <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69d8      	ldr	r0, [r3, #28]
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <_ZN9LineTrace4stopEv+0xcc>)
 80042e0:	4a23      	ldr	r2, [pc, #140]	; (8004370 <_ZN9LineTrace4stopEv+0xd0>)
 80042e2:	4924      	ldr	r1, [pc, #144]	; (8004374 <_ZN9LineTrace4stopEv+0xd4>)
 80042e4:	f000 fbd1 	bl	8004a8a <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 80042e8:	e006      	b.n	80042f8 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69d8      	ldr	r0, [r3, #28]
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <_ZN9LineTrace4stopEv+0xd8>)
 80042f0:	4a22      	ldr	r2, [pc, #136]	; (800437c <_ZN9LineTrace4stopEv+0xdc>)
 80042f2:	4920      	ldr	r1, [pc, #128]	; (8004374 <_ZN9LineTrace4stopEv+0xd4>)
 80042f4:	f000 fbec 	bl	8004ad0 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042fe:	334c      	adds	r3, #76	; 0x4c
 8004300:	2200      	movs	r2, #0
 8004302:	9200      	str	r2, [sp, #0]
 8004304:	2264      	movs	r2, #100	; 0x64
 8004306:	491e      	ldr	r1, [pc, #120]	; (8004380 <_ZN9LineTrace4stopEv+0xe0>)
 8004308:	481a      	ldr	r0, [pc, #104]	; (8004374 <_ZN9LineTrace4stopEv+0xd4>)
 800430a:	f7fd fab7 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004314:	33dc      	adds	r3, #220	; 0xdc
 8004316:	2200      	movs	r2, #0
 8004318:	9200      	str	r2, [sp, #0]
 800431a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800431e:	4919      	ldr	r1, [pc, #100]	; (8004384 <_ZN9LineTrace4stopEv+0xe4>)
 8004320:	4814      	ldr	r0, [pc, #80]	; (8004374 <_ZN9LineTrace4stopEv+0xd4>)
 8004322:	f7fd faab 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800432c:	337c      	adds	r3, #124	; 0x7c
 800432e:	2200      	movs	r2, #0
 8004330:	9200      	str	r2, [sp, #0]
 8004332:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004336:	4914      	ldr	r1, [pc, #80]	; (8004388 <_ZN9LineTrace4stopEv+0xe8>)
 8004338:	480e      	ldr	r0, [pc, #56]	; (8004374 <_ZN9LineTrace4stopEv+0xd4>)
 800433a:	f7fd fa9f 	bl	800187c <sd_write_array_float>

	led_.LR(-1, 0);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	330c      	adds	r3, #12
 8004342:	2200      	movs	r2, #0
 8004344:	f04f 31ff 	mov.w	r1, #4294967295
 8004348:	4618      	mov	r0, r3
 800434a:	f7fd ffcf 	bl	80022ec <_ZN3LED2LREaa>

	logger_->resetIdx();
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fc4a 	bl	8004bec <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fbf9 	bl	8004b54 <_ZN6Logger10resetLogs2Ev>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	080195d4 	.word	0x080195d4
 8004370:	080195e0 	.word	0x080195e0
 8004374:	080195f0 	.word	0x080195f0
 8004378:	080195fc 	.word	0x080195fc
 800437c:	08019608 	.word	0x08019608
 8004380:	08019618 	.word	0x08019618
 8004384:	08019628 	.word	0x08019628
 8004388:	08019634 	.word	0x08019634

0800438c <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b08b      	sub	sp, #44	; 0x2c
 8004390:	af02      	add	r7, sp, #8
 8004392:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fb31 	bl	8004a00 <_ZN6Logger23getDistanceArrayPointerEv>
 800439e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fb38 	bl	8004a1a <_ZN6Logger20getThetaArrayPointerEv>
 80043aa:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80043ac:	2300      	movs	r3, #0
 80043ae:	837b      	strh	r3, [r7, #26]
 80043b0:	8b7b      	ldrh	r3, [r7, #26]
 80043b2:	f241 726f 	movw	r2, #5999	; 0x176f
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d84a      	bhi.n	8004450 <_ZN9LineTrace20createVelocityTabeleEv+0xc4>
		temp_distance = p_distance[i];
 80043ba:	8b7b      	ldrh	r3, [r7, #26]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4413      	add	r3, r2
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80043c6:	8b7b      	ldrh	r3, [r7, #26]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80043d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80043d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	d101      	bne.n	80043e4 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 80043e0:	4b4c      	ldr	r3, [pc, #304]	; (8004514 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 80043e2:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 80043e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80043e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80043ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043f0:	eeb0 0a66 	vmov.f32	s0, s13
 80043f4:	f7fe fad0 	bl	8002998 <_ZSt3absf>
 80043f8:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 80043fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004400:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004518 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440c:	db01      	blt.n	8004412 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800440e:	4b43      	ldr	r3, [pc, #268]	; (800451c <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004410:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004412:	8b7c      	ldrh	r4, [r7, #26]
 8004414:	ed97 0a05 	vldr	s0, [r7, #20]
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fe fec9 	bl	80031b0 <_ZN9LineTrace15radius2VelocityEf>
 800441e:	eef0 7a40 	vmov.f32	s15, s0
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	3304      	adds	r3, #4
 800442e:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004432:	8b7b      	ldrh	r3, [r7, #26]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	441a      	add	r2, r3
 800443a:	8b7b      	ldrh	r3, [r7, #26]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	3330      	adds	r3, #48	; 0x30
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004448:	8b7b      	ldrh	r3, [r7, #26]
 800444a:	3301      	adds	r3, #1
 800444c:	837b      	strh	r3, [r7, #26]
 800444e:	e7af      	b.n	80043b0 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004456:	3348      	adds	r3, #72	; 0x48
 8004458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d120      	bne.n	80044a2 <_ZN9LineTrace20createVelocityTabeleEv+0x116>
		velocity_table_[0] = min_velocity_;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800446c:	3304      	adds	r3, #4
 800446e:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004476:	332c      	adds	r3, #44	; 0x2c
 8004478:	edd3 7a00 	vldr	s15, [r3]
 800447c:	6939      	ldr	r1, [r7, #16]
 800447e:	eeb0 0a67 	vmov.f32	s0, s15
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fe ff4c 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800448e:	3328      	adds	r3, #40	; 0x28
 8004490:	edd3 7a00 	vldr	s15, [r3]
 8004494:	6939      	ldr	r1, [r7, #16]
 8004496:	eeb0 0a67 	vmov.f32	s0, s15
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fe ffe4 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80044a0:	e027      	b.n	80044f2 <_ZN9LineTrace20createVelocityTabeleEv+0x166>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80044a8:	3348      	adds	r3, #72	; 0x48
 80044aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d11f      	bne.n	80044f2 <_ZN9LineTrace20createVelocityTabeleEv+0x166>
		velocity_table_[0] = min_velocity2_;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044be:	3304      	adds	r3, #4
 80044c0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044c8:	3334      	adds	r3, #52	; 0x34
 80044ca:	edd3 7a00 	vldr	s15, [r3]
 80044ce:	6939      	ldr	r1, [r7, #16]
 80044d0:	eeb0 0a67 	vmov.f32	s0, s15
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7fe ff23 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044e0:	3330      	adds	r3, #48	; 0x30
 80044e2:	edd3 7a00 	vldr	s15, [r3]
 80044e6:	6939      	ldr	r1, [r7, #16]
 80044e8:	eeb0 0a67 	vmov.f32	s0, s15
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7fe ffbb 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044f8:	3304      	adds	r3, #4
 80044fa:	2200      	movs	r2, #0
 80044fc:	9200      	str	r2, [sp, #0]
 80044fe:	f241 7270 	movw	r2, #6000	; 0x1770
 8004502:	4907      	ldr	r1, [pc, #28]	; (8004520 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004504:	4807      	ldr	r0, [pc, #28]	; (8004524 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004506:	f7fd f9b9 	bl	800187c <sd_write_array_float>

}
 800450a:	bf00      	nop
 800450c:	3724      	adds	r7, #36	; 0x24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd90      	pop	{r4, r7, pc}
 8004512:	bf00      	nop
 8004514:	3727c5ac 	.word	0x3727c5ac
 8004518:	459c4000 	.word	0x459c4000
 800451c:	459c4000 	.word	0x459c4000
 8004520:	08019644 	.word	0x08019644
 8004524:	080195f0 	.word	0x080195f0

08004528 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004528:	b590      	push	{r4, r7, lr}
 800452a:	b08b      	sub	sp, #44	; 0x2c
 800452c:	af02      	add	r7, sp, #8
 800452e:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69d8      	ldr	r0, [r3, #28]
 8004534:	4b6b      	ldr	r3, [pc, #428]	; (80046e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8004536:	4a6c      	ldr	r2, [pc, #432]	; (80046e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004538:	496c      	ldr	r1, [pc, #432]	; (80046ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800453a:	f000 faed 	bl	8004b18 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004544:	334c      	adds	r3, #76	; 0x4c
 8004546:	2264      	movs	r2, #100	; 0x64
 8004548:	4969      	ldr	r1, [pc, #420]	; (80046f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 800454a:	4868      	ldr	r0, [pc, #416]	; (80046ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800454c:	f7fd f9fc 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004556:	33dc      	adds	r3, #220	; 0xdc
 8004558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800455c:	4965      	ldr	r1, [pc, #404]	; (80046f4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 800455e:	4863      	ldr	r0, [pc, #396]	; (80046ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004560:	f7fd f9f2 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fa49 	bl	8004a00 <_ZN6Logger23getDistanceArrayPointerEv>
 800456e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fa50 	bl	8004a1a <_ZN6Logger20getThetaArrayPointerEv>
 800457a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800457c:	2300      	movs	r3, #0
 800457e:	837b      	strh	r3, [r7, #26]
 8004580:	8b7b      	ldrh	r3, [r7, #26]
 8004582:	f241 726f 	movw	r2, #5999	; 0x176f
 8004586:	4293      	cmp	r3, r2
 8004588:	d84a      	bhi.n	8004620 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xf8>

		temp_distance = p_distance[i];
 800458a:	8b7b      	ldrh	r3, [r7, #26]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4413      	add	r3, r2
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004596:	8b7b      	ldrh	r3, [r7, #26]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4413      	add	r3, r2
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80045a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80045a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80045aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ae:	d101      	bne.n	80045b4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80045b0:	4b51      	ldr	r3, [pc, #324]	; (80046f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 80045b2:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80045b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80045b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80045bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045c0:	eeb0 0a66 	vmov.f32	s0, s13
 80045c4:	f7fe f9e8 	bl	8002998 <_ZSt3absf>
 80045c8:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 80045cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80045d0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80046fc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 80045d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045dc:	db01      	blt.n	80045e2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80045de:	4b48      	ldr	r3, [pc, #288]	; (8004700 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 80045e0:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80045e2:	8b7c      	ldrh	r4, [r7, #26]
 80045e4:	ed97 0a05 	vldr	s0, [r7, #20]
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fe fde1 	bl	80031b0 <_ZN9LineTrace15radius2VelocityEf>
 80045ee:	eef0 7a40 	vmov.f32	s15, s0
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	3304      	adds	r3, #4
 80045fe:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004602:	8b7b      	ldrh	r3, [r7, #26]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	441a      	add	r2, r3
 800460a:	8b7b      	ldrh	r3, [r7, #26]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	3330      	adds	r3, #48	; 0x30
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004618:	8b7b      	ldrh	r3, [r7, #26]
 800461a:	3301      	adds	r3, #1
 800461c:	837b      	strh	r3, [r7, #26]
 800461e:	e7af      	b.n	8004580 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004626:	3348      	adds	r3, #72	; 0x48
 8004628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d120      	bne.n	8004672 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14a>
		velocity_table_[0] = min_velocity_;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800463c:	3304      	adds	r3, #4
 800463e:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004646:	332c      	adds	r3, #44	; 0x2c
 8004648:	edd3 7a00 	vldr	s15, [r3]
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	eeb0 0a67 	vmov.f32	s0, s15
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fe fe64 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800465e:	3328      	adds	r3, #40	; 0x28
 8004660:	edd3 7a00 	vldr	s15, [r3]
 8004664:	6939      	ldr	r1, [r7, #16]
 8004666:	eeb0 0a67 	vmov.f32	s0, s15
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fe fefc 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004670:	e027      	b.n	80046c2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19a>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004678:	3348      	adds	r3, #72	; 0x48
 800467a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d11f      	bne.n	80046c2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19a>
		velocity_table_[0] = min_velocity2_;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800468e:	3304      	adds	r3, #4
 8004690:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004698:	3334      	adds	r3, #52	; 0x34
 800469a:	edd3 7a00 	vldr	s15, [r3]
 800469e:	6939      	ldr	r1, [r7, #16]
 80046a0:	eeb0 0a67 	vmov.f32	s0, s15
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7fe fe3b 	bl	8003320 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80046b0:	3330      	adds	r3, #48	; 0x30
 80046b2:	edd3 7a00 	vldr	s15, [r3]
 80046b6:	6939      	ldr	r1, [r7, #16]
 80046b8:	eeb0 0a67 	vmov.f32	s0, s15
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fe fed3 	bl	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80046c8:	3304      	adds	r3, #4
 80046ca:	2200      	movs	r2, #0
 80046cc:	9200      	str	r2, [sp, #0]
 80046ce:	f241 7270 	movw	r2, #6000	; 0x1770
 80046d2:	490c      	ldr	r1, [pc, #48]	; (8004704 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 80046d4:	4805      	ldr	r0, [pc, #20]	; (80046ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046d6:	f7fd f8d1 	bl	800187c <sd_write_array_float>

}
 80046da:	bf00      	nop
 80046dc:	3724      	adds	r7, #36	; 0x24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd90      	pop	{r4, r7, pc}
 80046e2:	bf00      	nop
 80046e4:	080195d4 	.word	0x080195d4
 80046e8:	080195e0 	.word	0x080195e0
 80046ec:	080195f0 	.word	0x080195f0
 80046f0:	08019618 	.word	0x08019618
 80046f4:	08019628 	.word	0x08019628
 80046f8:	3727c5ac 	.word	0x3727c5ac
 80046fc:	459c4000 	.word	0x459c4000
 8004700:	459c4000 	.word	0x459c4000
 8004704:	08019644 	.word	0x08019644

08004708 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004716:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004724:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004728:	2200      	movs	r2, #0
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004732:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004736:	2200      	movs	r2, #0
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004740:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004744:	2200      	movs	r2, #0
 8004746:	801a      	strh	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4618      	mov	r0, r3
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004760:	2300      	movs	r3, #0
 8004762:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004764:	f7fd f97c 	bl	8001a60 <sd_mount>
 8004768:	4603      	mov	r3, r0
 800476a:	2b01      	cmp	r3, #1
 800476c:	bf0c      	ite	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	2300      	movne	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d016      	beq.n	80047a6 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004778:	f7fc fc92 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800477c:	2100      	movs	r1, #0
 800477e:	2000      	movs	r0, #0
 8004780:	f7fc fc9e 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004784:	4815      	ldr	r0, [pc, #84]	; (80047dc <_ZN6Logger10sdCardInitEv+0x84>)
 8004786:	f7fc fcc5 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800478a:	2101      	movs	r1, #1
 800478c:	2000      	movs	r0, #0
 800478e:	f7fc fc97 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004792:	4813      	ldr	r0, [pc, #76]	; (80047e0 <_ZN6Logger10sdCardInitEv+0x88>)
 8004794:	f7fc fcbe 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004798:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800479c:	f004 ff1a 	bl	80095d4 <HAL_Delay>

	  ret = true;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
 80047a4:	e015      	b.n	80047d2 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80047a6:	f7fc fc7b 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80047aa:	2100      	movs	r1, #0
 80047ac:	2000      	movs	r0, #0
 80047ae:	f7fc fc87 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80047b2:	480a      	ldr	r0, [pc, #40]	; (80047dc <_ZN6Logger10sdCardInitEv+0x84>)
 80047b4:	f7fc fcae 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80047b8:	2101      	movs	r1, #1
 80047ba:	2000      	movs	r0, #0
 80047bc:	f7fc fc80 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80047c0:	4808      	ldr	r0, [pc, #32]	; (80047e4 <_ZN6Logger10sdCardInitEv+0x8c>)
 80047c2:	f7fc fca7 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80047c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047ca:	f004 ff03 	bl	80095d4 <HAL_Delay>

	  ret = false;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	08019654 	.word	0x08019654
 80047e0:	08019660 	.word	0x08019660
 80047e4:	08019668 	.word	0x08019668

080047e8 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047fa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d028      	beq.n	8004856 <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800480a:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004820:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	3301      	adds	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004830:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004834:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800483c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004846:	d306      	bcc.n	8004856 <_ZN6Logger8storeLogEf+0x6e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800484e:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004852:	2200      	movs	r2, #0
 8004854:	801a      	strh	r2, [r3, #0]
	}
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004874:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02a      	beq.n	80048d4 <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004884:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800489e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048ae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80048b2:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048ba:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80048c4:	d306      	bcc.n	80048d4 <_ZN6Logger9storeLog2Ef+0x72>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048cc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80048d0:	2200      	movs	r2, #0
 80048d2:	801a      	strh	r2, [r3, #0]
	}
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80048ec:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048f6:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004910:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800491c:	3310      	adds	r3, #16
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800492c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	3301      	adds	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800493c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004940:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004948:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004952:	4293      	cmp	r3, r2
 8004954:	d906      	bls.n	8004964 <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800495c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004960:	2200      	movs	r2, #0
 8004962:	801a      	strh	r2, [r3, #0]
	//}
}
 8004964:	bf00      	nop
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	ed87 0a02 	vstr	s0, [r7, #8]
 800497c:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004986:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049a0:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	f503 43ab 	add.w	r3, r3, #21888	; 0x5580
 80049ac:	3370      	adds	r3, #112	; 0x70
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049bc:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	3301      	adds	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049cc:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049d0:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049d8:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	f241 726f 	movw	r2, #5999	; 0x176f
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d906      	bls.n	80049f4 <_ZN6Logger22storeDistanceAndTheta2Eff+0x84>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80049ec:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80049f0:	2200      	movs	r2, #0
 80049f2:	801a      	strh	r2, [r3, #0]
	//}
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004a28:	3340      	adds	r3, #64	; 0x40
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b086      	sub	sp, #24
 8004a3a:	af02      	add	r7, sp, #8
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	2300      	movs	r3, #0
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	68b8      	ldr	r0, [r7, #8]
 8004a52:	f7fc ff13 	bl	800187c <sd_write_array_float>
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af02      	add	r7, sp, #8
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8004a70:	2300      	movs	r3, #0
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4613      	mov	r3, r2
 8004a76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	68b8      	ldr	r0, [r7, #8]
 8004a7e:	f7fc fefd 	bl	800187c <sd_write_array_float>
}
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af02      	add	r7, sp, #8
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	f241 7270 	movw	r2, #6000	; 0x1770
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	68b8      	ldr	r0, [r7, #8]
 8004aac:	f7fc fee6 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004ab6:	3340      	adds	r3, #64	; 0x40
 8004ab8:	2200      	movs	r2, #0
 8004aba:	9200      	str	r2, [sp, #0]
 8004abc:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ac0:	6839      	ldr	r1, [r7, #0]
 8004ac2:	68b8      	ldr	r0, [r7, #8]
 8004ac4:	f7fc feda 	bl	800187c <sd_write_array_float>
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	f241 7270 	movw	r2, #6000	; 0x1770
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	68b8      	ldr	r0, [r7, #8]
 8004af2:	f7fc fec3 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004afc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004b00:	2200      	movs	r2, #0
 8004b02:	9200      	str	r2, [sp, #0]
 8004b04:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b08:	6839      	ldr	r1, [r7, #0]
 8004b0a:	68b8      	ldr	r0, [r7, #8]
 8004b0c:	f7fc feb6 	bl	800187c <sd_write_array_float>
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8004b2c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	68b8      	ldr	r0, [r7, #8]
 8004b34:	f7fc ff08 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004b3e:	3340      	adds	r3, #64	; 0x40
 8004b40:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b44:	6839      	ldr	r1, [r7, #0]
 8004b46:	68b8      	ldr	r0, [r7, #8]
 8004b48:	f7fc fefe 	bl	8001948 <sd_read_array_float>
}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004b54:	b480      	push	{r7}
 8004b56:	b08b      	sub	sp, #44	; 0x2c
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b6e:	3340      	adds	r3, #64	; 0x40
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d009      	beq.n	8004b8e <_ZN6Logger10resetLogs2Ev+0x3a>
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	617b      	str	r3, [r7, #20]
		log = 0;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	3304      	adds	r3, #4
 8004b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8c:	e7f1      	b.n	8004b72 <_ZN6Logger10resetLogs2Ev+0x1e>
	}
	for(auto &log : store_theta2_){
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004b94:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	623b      	str	r3, [r7, #32]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004ba4:	3340      	adds	r3, #64	; 0x40
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	6a3a      	ldr	r2, [r7, #32]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d009      	beq.n	8004bc4 <_ZN6Logger10resetLogs2Ev+0x70>
 8004bb0:	6a3b      	ldr	r3, [r7, #32]
 8004bb2:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	e7f1      	b.n	8004ba8 <_ZN6Logger10resetLogs2Ev+0x54>
	}

	log_index_tim_ = 0;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004bca:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004bce:	2200      	movs	r2, #0
 8004bd0:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004bd8:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004bdc:	2200      	movs	r2, #0
 8004bde:	801a      	strh	r2, [r3, #0]
}
 8004be0:	bf00      	nop
 8004be2:	372c      	adds	r7, #44	; 0x2c
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004bfa:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004bfe:	2200      	movs	r2, #0
 8004c00:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004c08:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	801a      	strh	r2, [r3, #0]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <_ZN6Logger5startEv>:

void Logger::start()
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004c2a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c2e:	2201      	movs	r2, #1
 8004c30:	701a      	strb	r2, [r3, #0]
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004c4c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	805a      	strh	r2, [r3, #2]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004c8c:	2108      	movs	r1, #8
 8004c8e:	4805      	ldr	r0, [pc, #20]	; (8004ca4 <_ZN5Motor4initEv+0x20>)
 8004c90:	f009 fe50 	bl	800e934 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004c94:	210c      	movs	r1, #12
 8004c96:	4803      	ldr	r0, [pc, #12]	; (8004ca4 <_ZN5Motor4initEv+0x20>)
 8004c98:	f009 fe4c 	bl	800e934 <HAL_TIM_PWM_Start>

}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20043744 	.word	0x20043744

08004ca8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	da0d      	bge.n	8004cd6 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cc0:	481f      	ldr	r0, [pc, #124]	; (8004d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8004cc2:	f005 ff1d 	bl	800ab00 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	425b      	negs	r3, r3
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	81fb      	strh	r3, [r7, #14]
 8004cd4:	e00a      	b.n	8004cec <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cdc:	4818      	ldr	r0, [pc, #96]	; (8004d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8004cde:	f005 ff0f 	bl	800ab00 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da0d      	bge.n	8004d12 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cfc:	4810      	ldr	r0, [pc, #64]	; (8004d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8004cfe:	f005 feff 	bl	800ab00 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	425b      	negs	r3, r3
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	81bb      	strh	r3, [r7, #12]
 8004d10:	e00a      	b.n	8004d28 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004d12:	2200      	movs	r2, #0
 8004d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d18:	4809      	ldr	r0, [pc, #36]	; (8004d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d1a:	f005 fef1 	bl	800ab00 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004d28:	89fa      	ldrh	r2, [r7, #14]
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004d30:	89ba      	ldrh	r2, [r7, #12]
 8004d32:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40020c00 	.word	0x40020c00
 8004d44:	20043744 	.word	0x20043744

08004d48 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6178      	str	r0, [r7, #20]
 8004d50:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d54:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	4b30      	ldr	r3, [pc, #192]	; (8004e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d62:	f7fb fef1 	bl	8000b48 <__aeabi_dcmpgt>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <_ZN5Motor8setRatioEdd+0x30>
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	4c2b      	ldr	r4, [pc, #172]	; (8004e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d72:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004d76:	e00e      	b.n	8004d96 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d82:	f7fb fec3 	bl	8000b0c <__aeabi_dcmplt>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <_ZN5Motor8setRatioEdd+0x4e>
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	4c24      	ldr	r4, [pc, #144]	; (8004e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d92:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	4b21      	ldr	r3, [pc, #132]	; (8004e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004da0:	f7fb fed2 	bl	8000b48 <__aeabi_dcmpgt>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <_ZN5Motor8setRatioEdd+0x6e>
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	4c1c      	ldr	r4, [pc, #112]	; (8004e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8004db0:	e9c7 3400 	strd	r3, r4, [r7]
 8004db4:	e00e      	b.n	8004dd4 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8004dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dc0:	f7fb fea4 	bl	8000b0c <__aeabi_dcmplt>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d004      	beq.n	8004dd4 <_ZN5Motor8setRatioEdd+0x8c>
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	4c15      	ldr	r4, [pc, #84]	; (8004e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8004dd0:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <_ZN5Motor8setRatioEdd+0xe0>)
 8004dda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dde:	f7fb fc23 	bl	8000628 <__aeabi_dmul>
 8004de2:	4603      	mov	r3, r0
 8004de4:	460c      	mov	r4, r1
 8004de6:	4618      	mov	r0, r3
 8004de8:	4621      	mov	r1, r4
 8004dea:	f7fb fecd 	bl	8000b88 <__aeabi_d2iz>
 8004dee:	4603      	mov	r3, r0
 8004df0:	b21a      	sxth	r2, r3
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <_ZN5Motor8setRatioEdd+0xe0>)
 8004dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e00:	f7fb fc12 	bl	8000628 <__aeabi_dmul>
 8004e04:	4603      	mov	r3, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	4618      	mov	r0, r3
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	f7fb febc 	bl	8000b88 <__aeabi_d2iz>
 8004e10:	4603      	mov	r3, r0
 8004e12:	b21a      	sxth	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	805a      	strh	r2, [r3, #2]

}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd90      	pop	{r4, r7, pc}
 8004e20:	3ff00000 	.word	0x3ff00000
 8004e24:	bff00000 	.word	0xbff00000
 8004e28:	409c2000 	.word	0x409c2000

08004e2c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004e2c:	b490      	push	{r4, r7}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	603b      	str	r3, [r7, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	f04f 0400 	mov.w	r4, #0
 8004e44:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	f04f 0400 	mov.w	r4, #0
 8004e52:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	f04f 0400 	mov.w	r4, #0
 8004e60:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	f04f 0400 	mov.w	r4, #0
 8004e6e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	f04f 0400 	mov.w	r4, #0
 8004e7c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	609a      	str	r2, [r3, #8]
}
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc90      	pop	{r4, r7}
 8004e9c:	4770      	bx	lr
	...

08004ea0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fc ff9e 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 8004eb4:	ee10 3a10 	vmov	r3, s0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fb fb5d 	bl	8000578 <__aeabi_f2d>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fc fbec 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004ed0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004ed4:	a376      	add	r3, pc, #472	; (adr r3, 80050b0 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ede:	f7fb fba3 	bl	8000628 <__aeabi_dmul>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f7fb fb40 	bl	8000578 <__aeabi_f2d>
 8004ef8:	4682      	mov	sl, r0
 8004efa:	468b      	mov	fp, r1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f10:	f7fb fcb4 	bl	800087c <__aeabi_ddiv>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4640      	mov	r0, r8
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	f7fb f9ce 	bl	80002bc <__adddf3>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	ec43 2b17 	vmov	d7, r2, r3
 8004f28:	eeb0 0a47 	vmov.f32	s0, s14
 8004f2c:	eef0 0a67 	vmov.f32	s1, s15
 8004f30:	f00f f846 	bl	8013fc0 <cos>
 8004f34:	ec53 2b10 	vmov	r2, r3, d0
 8004f38:	4650      	mov	r0, sl
 8004f3a:	4659      	mov	r1, fp
 8004f3c:	f7fb fb74 	bl	8000628 <__aeabi_dmul>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4620      	mov	r0, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	f7fb f9b8 	bl	80002bc <__adddf3>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f7fb fb0b 	bl	8000578 <__aeabi_f2d>
 8004f62:	4682      	mov	sl, r0
 8004f64:	468b      	mov	fp, r1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f7a:	f7fb fc7f 	bl	800087c <__aeabi_ddiv>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4640      	mov	r0, r8
 8004f84:	4649      	mov	r1, r9
 8004f86:	f7fb f999 	bl	80002bc <__adddf3>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	ec43 2b17 	vmov	d7, r2, r3
 8004f92:	eeb0 0a47 	vmov.f32	s0, s14
 8004f96:	eef0 0a67 	vmov.f32	s1, s15
 8004f9a:	f00f f855 	bl	8014048 <sin>
 8004f9e:	ec53 2b10 	vmov	r2, r3, d0
 8004fa2:	4650      	mov	r0, sl
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	f7fb fb3f 	bl	8000628 <__aeabi_dmul>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4620      	mov	r0, r4
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	f7fb f983 	bl	80002bc <__adddf3>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	f7fb f974 	bl	80002bc <__adddf3>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	460c      	mov	r4, r1
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	ed93 7b08 	vldr	d7, [r3, #32]
 8004fea:	eeb0 0a47 	vmov.f32	s0, s14
 8004fee:	eef0 0a67 	vmov.f32	s1, s15
 8004ff2:	f00e ffe5 	bl	8013fc0 <cos>
 8004ff6:	ec51 0b10 	vmov	r0, r1, d0
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	4b28      	ldr	r3, [pc, #160]	; (80050a0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005000:	f7fb fb12 	bl	8000628 <__aeabi_dmul>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4620      	mov	r0, r4
 800500a:	4629      	mov	r1, r5
 800500c:	f7fb f956 	bl	80002bc <__adddf3>
 8005010:	4603      	mov	r3, r0
 8005012:	460c      	mov	r4, r1
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	ed93 7b08 	vldr	d7, [r3, #32]
 8005026:	eeb0 0a47 	vmov.f32	s0, s14
 800502a:	eef0 0a67 	vmov.f32	s1, s15
 800502e:	f00f f80b 	bl	8014048 <sin>
 8005032:	ec51 0b10 	vmov	r0, r1, d0
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	4b19      	ldr	r3, [pc, #100]	; (80050a0 <_ZN8Odometry12calcPotitionEv+0x200>)
 800503c:	f7fb faf4 	bl	8000628 <__aeabi_dmul>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb f938 	bl	80002bc <__adddf3>
 800504c:	4603      	mov	r3, r0
 800504e:	460c      	mov	r4, r1
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800505c:	4618      	mov	r0, r3
 800505e:	4621      	mov	r1, r4
 8005060:	f7fb fdda 	bl	8000c18 <__aeabi_d2f>
 8005064:	4602      	mov	r2, r0
 8005066:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <_ZN8Odometry12calcPotitionEv+0x204>)
 8005068:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005070:	4618      	mov	r0, r3
 8005072:	4621      	mov	r1, r4
 8005074:	f7fb fdd0 	bl	8000c18 <__aeabi_d2f>
 8005078:	4602      	mov	r2, r0
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <_ZN8Odometry12calcPotitionEv+0x208>)
 800507c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005084:	4618      	mov	r0, r3
 8005086:	4621      	mov	r1, r4
 8005088:	f7fb fdc6 	bl	8000c18 <__aeabi_d2f>
 800508c:	4602      	mov	r2, r0
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005090:	601a      	str	r2, [r3, #0]
}
 8005092:	bf00      	nop
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800509c:	f3af 8000 	nop.w
 80050a0:	405b8000 	.word	0x405b8000
 80050a4:	20000290 	.word	0x20000290
 80050a8:	20000294 	.word	0x20000294
 80050ac:	20000298 	.word	0x20000298
 80050b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80050b4:	3f50624d 	.word	0x3f50624d

080050b8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	calcPotition();
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff feed 	bl	8004ea0 <_ZN8Odometry12calcPotitionEv>
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80050ce:	b490      	push	{r4, r7}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
	return theta_;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80050dc:	ec44 3b17 	vmov	d7, r3, r4
}
 80050e0:	eeb0 0a47 	vmov.f32	s0, s14
 80050e4:	eef0 0a67 	vmov.f32	s1, s15
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc90      	pop	{r4, r7}
 80050ee:	4770      	bx	lr

080050f0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80050f0:	b490      	push	{r4, r7}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	f04f 0400 	mov.w	r4, #0
 8005102:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	f04f 0400 	mov.w	r4, #0
 8005110:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	f04f 0400 	mov.w	r4, #0
 800511e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bc90      	pop	{r4, r7}
 800512a:	4770      	bx	lr

0800512c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 800512c:	b490      	push	{r4, r7}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	f04f 0400 	mov.w	r4, #0
 8005144:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	f04f 0400 	mov.w	r4, #0
 8005152:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	f04f 0400 	mov.w	r4, #0
 8005160:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800516a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800516e:	2200      	movs	r2, #0
 8005170:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005172:	4a29      	ldr	r2, [pc, #164]	; (8005218 <_ZN13PathFollowingC1Ev+0xec>)
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	f04f 0400 	mov.w	r4, #0
 800517c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005180:	4a25      	ldr	r2, [pc, #148]	; (8005218 <_ZN13PathFollowingC1Ev+0xec>)
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	f04f 0400 	mov.w	r4, #0
 800518a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800518e:	4a22      	ldr	r2, [pc, #136]	; (8005218 <_ZN13PathFollowingC1Ev+0xec>)
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	f04f 0400 	mov.w	r4, #0
 8005198:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 800519c:	4a1f      	ldr	r2, [pc, #124]	; (800521c <_ZN13PathFollowingC1Ev+0xf0>)
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	f04f 0400 	mov.w	r4, #0
 80051a6:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80051aa:	4a1c      	ldr	r2, [pc, #112]	; (800521c <_ZN13PathFollowingC1Ev+0xf0>)
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	f04f 0400 	mov.w	r4, #0
 80051b4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80051b8:	4a18      	ldr	r2, [pc, #96]	; (800521c <_ZN13PathFollowingC1Ev+0xf0>)
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	f04f 0400 	mov.w	r4, #0
 80051c2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80051c6:	4a15      	ldr	r2, [pc, #84]	; (800521c <_ZN13PathFollowingC1Ev+0xf0>)
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	f04f 0400 	mov.w	r4, #0
 80051d0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80051d4:	4a11      	ldr	r2, [pc, #68]	; (800521c <_ZN13PathFollowingC1Ev+0xf0>)
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80051e2:	4a0e      	ldr	r2, [pc, #56]	; (800521c <_ZN13PathFollowingC1Ev+0xf0>)
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	f04f 0400 	mov.w	r4, #0
 80051ec:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80051f0:	4a0b      	ldr	r2, [pc, #44]	; (8005220 <_ZN13PathFollowingC1Ev+0xf4>)
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	f04f 0400 	mov.w	r4, #0
 80051fa:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80051fe:	4a08      	ldr	r2, [pc, #32]	; (8005220 <_ZN13PathFollowingC1Ev+0xf4>)
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	f04f 0400 	mov.w	r4, #0
 8005208:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bc90      	pop	{r4, r7}
 8005216:	4770      	bx	lr
 8005218:	20043c48 	.word	0x20043c48
 800521c:	20043bd8 	.word	0x20043bd8
 8005220:	20043c38 	.word	0x20043c38

08005224 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800522c:	f001 fc2e 	bl	8006a8c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005230:	f107 0318 	add.w	r3, r7, #24
 8005234:	2201      	movs	r2, #1
 8005236:	4915      	ldr	r1, [pc, #84]	; (800528c <_ZN13PathFollowing4initEv+0x68>)
 8005238:	4815      	ldr	r0, [pc, #84]	; (8005290 <_ZN13PathFollowing4initEv+0x6c>)
 800523a:	f7fc fbcb 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800523e:	f107 0310 	add.w	r3, r7, #16
 8005242:	2201      	movs	r2, #1
 8005244:	4913      	ldr	r1, [pc, #76]	; (8005294 <_ZN13PathFollowing4initEv+0x70>)
 8005246:	4812      	ldr	r0, [pc, #72]	; (8005290 <_ZN13PathFollowing4initEv+0x6c>)
 8005248:	f7fc fbc4 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 800524c:	f107 0308 	add.w	r3, r7, #8
 8005250:	2201      	movs	r2, #1
 8005252:	4911      	ldr	r1, [pc, #68]	; (8005298 <_ZN13PathFollowing4initEv+0x74>)
 8005254:	480e      	ldr	r0, [pc, #56]	; (8005290 <_ZN13PathFollowing4initEv+0x6c>)
 8005256:	f7fc fbbd 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800525a:	ed97 7b06 	vldr	d7, [r7, #24]
 800525e:	ed97 6b04 	vldr	d6, [r7, #16]
 8005262:	ed97 5b02 	vldr	d5, [r7, #8]
 8005266:	eeb0 2a45 	vmov.f32	s4, s10
 800526a:	eef0 2a65 	vmov.f32	s5, s11
 800526e:	eeb0 1a46 	vmov.f32	s2, s12
 8005272:	eef0 1a66 	vmov.f32	s3, s13
 8005276:	eeb0 0a47 	vmov.f32	s0, s14
 800527a:	eef0 0a67 	vmov.f32	s1, s15
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f80c 	bl	800529c <_ZN13PathFollowing7setGainEddd>
}
 8005284:	bf00      	nop
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	08019670 	.word	0x08019670
 8005290:	08019678 	.word	0x08019678
 8005294:	08019680 	.word	0x08019680
 8005298:	08019688 	.word	0x08019688

0800529c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 800529c:	b490      	push	{r4, r7}
 800529e:	b088      	sub	sp, #32
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	61f8      	str	r0, [r7, #28]
 80052a4:	ed87 0b04 	vstr	d0, [r7, #16]
 80052a8:	ed87 1b02 	vstr	d1, [r7, #8]
 80052ac:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80052b0:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052b2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80052b6:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80052ba:	4a07      	ldr	r2, [pc, #28]	; (80052d8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052bc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80052c0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80052c4:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052c6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052ca:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80052ce:	bf00      	nop
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc90      	pop	{r4, r7}
 80052d6:	4770      	bx	lr
 80052d8:	20043c48 	.word	0x20043c48

080052dc <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80052e4:	2088      	movs	r0, #136	; 0x88
 80052e6:	f7fc fec6 	bl	8002076 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80052ea:	2080      	movs	r0, #128	; 0x80
 80052ec:	f7fc fec3 	bl	8002076 <INA260_init>
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80052f8:	b590      	push	{r4, r7, lr}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005300:	2188      	movs	r1, #136	; 0x88
 8005302:	2002      	movs	r0, #2
 8005304:	f7fc fe54 	bl	8001fb0 <INA260_read>
 8005308:	4603      	mov	r3, r0
 800530a:	4618      	mov	r0, r3
 800530c:	f7fb f922 	bl	8000554 <__aeabi_i2d>
 8005310:	a30c      	add	r3, pc, #48	; (adr r3, 8005344 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	f7fb f987 	bl	8000628 <__aeabi_dmul>
 800531a:	4603      	mov	r3, r0
 800531c:	460c      	mov	r4, r1
 800531e:	4618      	mov	r0, r3
 8005320:	4621      	mov	r1, r4
 8005322:	f7fb fc79 	bl	8000c18 <__aeabi_d2f>
 8005326:	4602      	mov	r2, r0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	4a03      	ldr	r2, [pc, #12]	; (8005340 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005332:	6013      	str	r3, [r2, #0]
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	bd90      	pop	{r4, r7, pc}
 800533c:	f3af 8000 	nop.w
 8005340:	2000029c 	.word	0x2000029c
 8005344:	47ae147b 	.word	0x47ae147b
 8005348:	3f547ae1 	.word	0x3f547ae1

0800534c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	ee07 3a90 	vmov	s15, r3

}
 800535c:	eeb0 0a67 	vmov.f32	s0, s15
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005378:	2102      	movs	r1, #2
 800537a:	4822      	ldr	r0, [pc, #136]	; (8005404 <_ZN12RotarySwitch8getValueEv+0x98>)
 800537c:	f005 fba8 	bl	800aad0 <HAL_GPIO_ReadPin>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf0c      	ite	eq
 8005386:	2301      	moveq	r3, #1
 8005388:	2300      	movne	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005390:	89fb      	ldrh	r3, [r7, #14]
 8005392:	f043 0301 	orr.w	r3, r3, #1
 8005396:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005398:	2108      	movs	r1, #8
 800539a:	481a      	ldr	r0, [pc, #104]	; (8005404 <_ZN12RotarySwitch8getValueEv+0x98>)
 800539c:	f005 fb98 	bl	800aad0 <HAL_GPIO_ReadPin>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf0c      	ite	eq
 80053a6:	2301      	moveq	r3, #1
 80053a8:	2300      	movne	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <_ZN12RotarySwitch8getValueEv+0x4c>
 80053b0:	89fb      	ldrh	r3, [r7, #14]
 80053b2:	f043 0302 	orr.w	r3, r3, #2
 80053b6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80053b8:	2110      	movs	r1, #16
 80053ba:	4812      	ldr	r0, [pc, #72]	; (8005404 <_ZN12RotarySwitch8getValueEv+0x98>)
 80053bc:	f005 fb88 	bl	800aad0 <HAL_GPIO_ReadPin>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	bf0c      	ite	eq
 80053c6:	2301      	moveq	r3, #1
 80053c8:	2300      	movne	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80053d0:	89fb      	ldrh	r3, [r7, #14]
 80053d2:	f043 0304 	orr.w	r3, r3, #4
 80053d6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80053d8:	2180      	movs	r1, #128	; 0x80
 80053da:	480a      	ldr	r0, [pc, #40]	; (8005404 <_ZN12RotarySwitch8getValueEv+0x98>)
 80053dc:	f005 fb78 	bl	800aad0 <HAL_GPIO_ReadPin>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80053f0:	89fb      	ldrh	r3, [r7, #14]
 80053f2:	f043 0308 	orr.w	r3, r3, #8
 80053f6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80053f8:	89fb      	ldrh	r3, [r7, #14]

}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40020c00 	.word	0x40020c00

08005408 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	805a      	strh	r2, [r3, #2]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	809a      	strh	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	719a      	strb	r2, [r3, #6]
{

}
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	799b      	ldrb	r3, [r3, #6]
 8005444:	f083 0301 	eor.w	r3, r3, #1
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80c7 	beq.w	80055de <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8005450:	4b65      	ldr	r3, [pc, #404]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	f083 0301 	eor.w	r3, r3, #1
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d027      	beq.n	80054ae <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800545e:	2104      	movs	r1, #4
 8005460:	4862      	ldr	r0, [pc, #392]	; (80055ec <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005462:	f005 fb35 	bl	800aad0 <HAL_GPIO_ReadPin>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d006      	beq.n	8005484 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8005476:	4b5e      	ldr	r3, [pc, #376]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	3301      	adds	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	4b5c      	ldr	r3, [pc, #368]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005480:	801a      	strh	r2, [r3, #0]
 8005482:	e002      	b.n	800548a <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8005484:	4b5a      	ldr	r3, [pc, #360]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005486:	2200      	movs	r2, #0
 8005488:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800548a:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	2b04      	cmp	r3, #4
 8005490:	d93f      	bls.n	8005512 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 80054a0:	4b51      	ldr	r3, [pc, #324]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80054a6:	4b52      	ldr	r3, [pc, #328]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	e031      	b.n	8005512 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 80054ae:	4b4e      	ldr	r3, [pc, #312]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d02d      	beq.n	8005512 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80054b6:	2104      	movs	r1, #4
 80054b8:	484c      	ldr	r0, [pc, #304]	; (80055ec <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80054ba:	f005 fb09 	bl	800aad0 <HAL_GPIO_ReadPin>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf14      	ite	ne
 80054c4:	2301      	movne	r3, #1
 80054c6:	2300      	moveq	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d006      	beq.n	80054dc <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 80054ce:	4b48      	ldr	r3, [pc, #288]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	4b46      	ldr	r3, [pc, #280]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	e002      	b.n	80054e2 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 80054dc:	4b44      	ldr	r3, [pc, #272]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054de:	2200      	movs	r2, #0
 80054e0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80054e2:	4b43      	ldr	r3, [pc, #268]	; (80055f0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d913      	bls.n	8005512 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	f083 0301 	eor.w	r3, r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 80054f8:	4b3b      	ldr	r3, [pc, #236]	; (80055e8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	889b      	ldrh	r3, [r3, #4]
 8005502:	3301      	adds	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	889a      	ldrh	r2, [r3, #4]
 800550e:	4b39      	ldr	r3, [pc, #228]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8005510:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005512:	4b39      	ldr	r3, [pc, #228]	; (80055f8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	f083 0301 	eor.w	r3, r3, #1
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d027      	beq.n	8005570 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005524:	4835      	ldr	r0, [pc, #212]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8005526:	f005 fad3 	bl	800aad0 <HAL_GPIO_ReadPin>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d006      	beq.n	8005548 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 800553a:	4b31      	ldr	r3, [pc, #196]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	4b2f      	ldr	r3, [pc, #188]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	e002      	b.n	800554e <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8005548:	4b2d      	ldr	r3, [pc, #180]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800554a:	2200      	movs	r2, #0
 800554c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800554e:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	2b04      	cmp	r3, #4
 8005554:	d90c      	bls.n	8005570 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	f043 0302 	orr.w	r3, r3, #2
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8005564:	4b24      	ldr	r3, [pc, #144]	; (80055f8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 800556a:	4b25      	ldr	r3, [pc, #148]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800556c:	2200      	movs	r2, #0
 800556e:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005570:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d02e      	beq.n	80055d6 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800557c:	481f      	ldr	r0, [pc, #124]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800557e:	f005 faa7 	bl	800aad0 <HAL_GPIO_ReadPin>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	bf14      	ite	ne
 8005588:	2301      	movne	r3, #1
 800558a:	2300      	moveq	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d006      	beq.n	80055a0 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 8005592:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	3301      	adds	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	4b19      	ldr	r3, [pc, #100]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800559c:	801a      	strh	r2, [r3, #0]
 800559e:	e002      	b.n	80055a6 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 80055a0:	4b17      	ldr	r3, [pc, #92]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80055a6:	4b16      	ldr	r3, [pc, #88]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80055a8:	881b      	ldrh	r3, [r3, #0]
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d913      	bls.n	80055d6 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	f083 0302 	eor.w	r3, r3, #2
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 80055bc:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	885b      	ldrh	r3, [r3, #2]
 80055c6:	3301      	adds	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	885a      	ldrh	r2, [r3, #2]
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 80055d4:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	881a      	ldrh	r2, [r3, #0]
 80055da:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 80055dc:	801a      	strh	r2, [r3, #0]
	}

}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	200002a6 	.word	0x200002a6
 80055ec:	40021000 	.word	0x40021000
 80055f0:	200002aa 	.word	0x200002aa
 80055f4:	200002a4 	.word	0x200002a4
 80055f8:	200002a7 	.word	0x200002a7
 80055fc:	40020c00 	.word	0x40020c00
 8005600:	200002a8 	.word	0x200002a8
 8005604:	200002a2 	.word	0x200002a2
 8005608:	200002a0 	.word	0x200002a0

0800560c <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	return status_;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	881b      	ldrh	r3, [r3, #0]
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	889b      	ldrh	r3, [r3, #4]
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	809a      	strh	r2, [r3, #4]
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	719a      	strb	r2, [r3, #6]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	719a      	strb	r2, [r3, #6]
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	799b      	ldrb	r3, [r3, #6]
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4a10      	ldr	r2, [pc, #64]	; (80056f8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80056b8:	3308      	adds	r3, #8
 80056ba:	4611      	mov	r1, r2
 80056bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f00f fcfd 	bl	80150c0 <memcpy>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	080196ac 	.word	0x080196ac

080056fc <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800570e:	2b00      	cmp	r3, #0
 8005710:	d010      	beq.n	8005734 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	ed97 0a00 	vldr	s0, [r7]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff f864 	bl	80047e8 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800572a:	eeb0 0a67 	vmov.f32	s0, s15
 800572e:	4610      	mov	r0, r2
 8005730:	f7ff f897 	bl	8004862 <_ZN6Logger9storeLog2Ef>
	}

}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 800573c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800574a:	2b00      	cmp	r3, #0
 800574c:	d046      	beq.n	80057dc <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800575a:	461a      	mov	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3204      	adds	r2, #4
 8005760:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005764:	ee07 3a90 	vmov	s15, r3
 8005768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800576c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800577c:	3301      	adds	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800578c:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 800578e:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005796:	2bf9      	cmp	r3, #249	; 0xf9
 8005798:	d903      	bls.n	80057a2 <_ZN20SystemIdentification10updateMsigEv+0x66>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	22fa      	movs	r2, #250	; 0xfa
 800579e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685c      	ldr	r4, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fa fee3 	bl	8000578 <__aeabi_f2d>
 80057b2:	4605      	mov	r5, r0
 80057b4:	460e      	mov	r6, r1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80057bc:	eef1 7a67 	vneg.f32	s15, s15
 80057c0:	ee17 3a90 	vmov	r3, s15
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fa fed7 	bl	8000578 <__aeabi_f2d>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	ec43 2b11 	vmov	d1, r2, r3
 80057d2:	ec46 5b10 	vmov	d0, r5, r6
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7ff fab6 	bl	8004d48 <_ZN5Motor8setRatioEdd>

	}

}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e4:	200002ac 	.word	0x200002ac

080057e8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	605a      	str	r2, [r3, #4]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	609a      	str	r2, [r3, #8]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	60da      	str	r2, [r3, #12]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	611a      	str	r2, [r3, #16]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	615a      	str	r2, [r3, #20]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	619a      	str	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	61da      	str	r2, [r3, #28]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	621a      	str	r2, [r3, #32]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	625a      	str	r2, [r3, #36]	; 0x24
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005880:	b590      	push	{r4, r7, lr}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588c:	f107 020c 	add.w	r2, r7, #12
 8005890:	f107 0110 	add.w	r1, r7, #16
 8005894:	4618      	mov	r0, r3
 8005896:	f7fb fef3 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800589a:	ed97 7a04 	vldr	s14, [r7, #16]
 800589e:	edd7 7a03 	vldr	s15, [r7, #12]
 80058a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80058aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058ae:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80058b2:	6978      	ldr	r0, [r7, #20]
 80058b4:	f7fa fe60 	bl	8000578 <__aeabi_f2d>
 80058b8:	a30b      	add	r3, pc, #44	; (adr r3, 80058e8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f7fa feb3 	bl	8000628 <__aeabi_dmul>
 80058c2:	4603      	mov	r3, r0
 80058c4:	460c      	mov	r4, r1
 80058c6:	4618      	mov	r0, r3
 80058c8:	4621      	mov	r1, r4
 80058ca:	f7fb f9a5 	bl	8000c18 <__aeabi_d2f>
 80058ce:	4602      	mov	r2, r0
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	ee07 3a90 	vmov	s15, r3
}
 80058dc:	eeb0 0a67 	vmov.f32	s0, s15
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd90      	pop	{r4, r7, pc}
 80058e6:	bf00      	nop
 80058e8:	1ab1d998 	.word	0x1ab1d998
 80058ec:	3f7830b5 	.word	0x3f7830b5

080058f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80058f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	ed93 7a00 	vldr	s14, [r3]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	edd3 7a02 	vldr	s15, [r3, #8]
 8005904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005908:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005916:	4b48      	ldr	r3, [pc, #288]	; (8005a38 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	edd3 7a04 	vldr	s15, [r3, #16]
 800592c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005934:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005938:	4b3f      	ldr	r3, [pc, #252]	; (8005a38 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f7fa fe1b 	bl	8000578 <__aeabi_f2d>
 8005942:	4604      	mov	r4, r0
 8005944:	460d      	mov	r5, r1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	ed93 7a06 	vldr	s14, [r3, #24]
 800594c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005954:	ee17 0a90 	vmov	r0, s15
 8005958:	f7fa fe0e 	bl	8000578 <__aeabi_f2d>
 800595c:	a334      	add	r3, pc, #208	; (adr r3, 8005a30 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f7fa fe61 	bl	8000628 <__aeabi_dmul>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4620      	mov	r0, r4
 800596c:	4629      	mov	r1, r5
 800596e:	f7fa fca5 	bl	80002bc <__adddf3>
 8005972:	4603      	mov	r3, r0
 8005974:	460c      	mov	r4, r1
 8005976:	4618      	mov	r0, r3
 8005978:	4621      	mov	r1, r4
 800597a:	f7fb f94d 	bl	8000c18 <__aeabi_d2f>
 800597e:	4602      	mov	r2, r0
 8005980:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005982:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	ed93 7a05 	vldr	s14, [r3, #20]
 800598a:	4b2c      	ldr	r3, [pc, #176]	; (8005a3c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800598c:	edd3 7a00 	vldr	s15, [r3]
 8005990:	edd7 6a05 	vldr	s13, [r7, #20]
 8005994:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800599c:	ee17 0a90 	vmov	r0, s15
 80059a0:	f7fa fdea 	bl	8000578 <__aeabi_f2d>
 80059a4:	a322      	add	r3, pc, #136	; (adr r3, 8005a30 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	f7fa ff67 	bl	800087c <__aeabi_ddiv>
 80059ae:	4603      	mov	r3, r0
 80059b0:	460c      	mov	r4, r1
 80059b2:	4618      	mov	r0, r3
 80059b4:	4621      	mov	r1, r4
 80059b6:	f7fb f92f 	bl	8000c18 <__aeabi_d2f>
 80059ba:	4603      	mov	r3, r0
 80059bc:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80059be:	ed97 7a04 	vldr	s14, [r7, #16]
 80059c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80059c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059ca:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80059cc:	edd3 7a00 	vldr	s15, [r3]
 80059d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059d4:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80059e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80059e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ea:	ee17 0a90 	vmov	r0, s15
 80059ee:	f7fa fdc3 	bl	8000578 <__aeabi_f2d>
 80059f2:	4605      	mov	r5, r0
 80059f4:	460e      	mov	r6, r1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80059fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a04:	ee17 0a90 	vmov	r0, s15
 8005a08:	f7fa fdb6 	bl	8000578 <__aeabi_f2d>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	ec43 2b11 	vmov	d1, r2, r3
 8005a14:	ec46 5b10 	vmov	d0, r5, r6
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f7ff f995 	bl	8004d48 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005a1e:	4a07      	ldr	r2, [pc, #28]	; (8005a3c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	6013      	str	r3, [r2, #0]
}
 8005a24:	bf00      	nop
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2c:	f3af 8000 	nop.w
 8005a30:	d2f1a9fc 	.word	0xd2f1a9fc
 8005a34:	3f50624d 	.word	0x3f50624d
 8005a38:	200002b4 	.word	0x200002b4
 8005a3c:	200002b0 	.word	0x200002b0

08005a40 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a4c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	605a      	str	r2, [r3, #4]
}
 8005a5c:	bf00      	nop
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a74:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a9c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005aa0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	615a      	str	r2, [r3, #20]
}
 8005ab6:	bf00      	nop
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ace:	edc7 0a01 	vstr	s1, [r7, #4]
 8005ad2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	621a      	str	r2, [r3, #32]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff febf 	bl	8005880 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff feef 	bl	80058f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005b70 <_ZN12VelocityCtrl4stopEv+0x30>
 8005b58:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005b70 <_ZN12VelocityCtrl4stopEv+0x30>
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff f8f3 	bl	8004d48 <_ZN5Motor8setRatioEdd>

}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	f3af 8000 	nop.w
	...

08005b78 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	ee07 3a90 	vmov	s15, r3
}
 8005b88:	eeb0 0a67 	vmov.f32	s0, s15
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
	...

08005b98 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1e      	ldr	r2, [pc, #120]	; (8005c20 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005baa:	f001 fe2b 	bl	8007804 <cppFlip100ns>

		tim7_timer++;
 8005bae:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005bb6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005bb8:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1a      	ldr	r2, [pc, #104]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d902      	bls.n	8005bc8 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005bc2:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a17      	ldr	r2, [pc, #92]	; (8005c2c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005bd2:	f001 fdcd 	bl	8007770 <cppFlip1ms>

		tim6_timer++;
 8005bd6:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	4a14      	ldr	r2, [pc, #80]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bde:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005be0:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a10      	ldr	r2, [pc, #64]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d902      	bls.n	8005bf0 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a0f      	ldr	r2, [pc, #60]	; (8005c34 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d10e      	bne.n	8005c18 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005bfa:	f001 fe0d 	bl	8007818 <cppFlip10ms>

		tim13_timer++;
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3301      	adds	r3, #1
 8005c04:	4a0c      	ldr	r2, [pc, #48]	; (8005c38 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005c06:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a06      	ldr	r2, [pc, #24]	; (8005c28 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d902      	bls.n	8005c18 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
	}

}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40001400 	.word	0x40001400
 8005c24:	200438f8 	.word	0x200438f8
 8005c28:	0001869f 	.word	0x0001869f
 8005c2c:	40001000 	.word	0x40001000
 8005c30:	200438b4 	.word	0x200438b4
 8005c34:	40001c00 	.word	0x40001c00
 8005c38:	200438fc 	.word	0x200438fc

08005c3c <init>:

void init()
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005c40:	2201      	movs	r2, #1
 8005c42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c46:	4808      	ldr	r0, [pc, #32]	; (8005c68 <init+0x2c>)
 8005c48:	f004 ff5a 	bl	800ab00 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005c4c:	4807      	ldr	r0, [pc, #28]	; (8005c6c <init+0x30>)
 8005c4e:	f008 fe22 	bl	800e896 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005c52:	4807      	ldr	r0, [pc, #28]	; (8005c70 <init+0x34>)
 8005c54:	f008 fe1f 	bl	800e896 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005c58:	4806      	ldr	r0, [pc, #24]	; (8005c74 <init+0x38>)
 8005c5a:	f008 fe1c 	bl	800e896 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005c5e:	f001 fce3 	bl	8007628 <cppInit>

	//path_following_initialize();

}
 8005c62:	bf00      	nop
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	200439e0 	.word	0x200439e0
 8005c70:	20043b84 	.word	0x20043b84
 8005c74:	20043900 	.word	0x20043900

08005c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c7c:	f003 fc38 	bl	80094f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c80:	f000 f82a 	bl	8005cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c84:	f000 fdbc 	bl	8006800 <MX_GPIO_Init>
  MX_DMA_Init();
 8005c88:	f000 fd8a 	bl	80067a0 <MX_DMA_Init>
  MX_I2C2_Init();
 8005c8c:	f000 f9e8 	bl	8006060 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005c90:	f000 fa14 	bl	80060bc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005c94:	f000 fa32 	bl	80060fc <MX_SPI2_Init>
  MX_TIM1_Init();
 8005c98:	f000 fa66 	bl	8006168 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005c9c:	f000 fb70 	bl	8006380 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005ca0:	f000 fc3c 	bl	800651c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005ca4:	f000 fd52 	bl	800674c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005ca8:	f00a fdc8 	bl	801083c <MX_FATFS_Init>
  MX_TIM6_Init();
 8005cac:	f000 fbcc 	bl	8006448 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005cb0:	f000 f9a8 	bl	8006004 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005cb4:	f000 fb00 	bl	80062b8 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005cb8:	f000 fc88 	bl	80065cc <MX_TIM10_Init>
  MX_TIM11_Init();
 8005cbc:	f000 fcd4 	bl	8006668 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005cc0:	f000 f898 	bl	8005df4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005cc4:	f000 fbf6 	bl	80064b4 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005cc8:	f000 fd1c 	bl	8006704 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005ccc:	f7ff ffb6 	bl	8005c3c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005cd0:	f001 fdba 	bl	8007848 <cppLoop>
 8005cd4:	e7fc      	b.n	8005cd0 <main+0x58>
	...

08005cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b0a4      	sub	sp, #144	; 0x90
 8005cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005cde:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ce2:	2234      	movs	r2, #52	; 0x34
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f00f f9f5 	bl	80150d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	609a      	str	r2, [r3, #8]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005cfc:	f107 030c 	add.w	r3, r7, #12
 8005d00:	223c      	movs	r2, #60	; 0x3c
 8005d02:	2100      	movs	r1, #0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f00f f9e6 	bl	80150d6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]
 8005d0e:	4b37      	ldr	r3, [pc, #220]	; (8005dec <SystemClock_Config+0x114>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	4a36      	ldr	r2, [pc, #216]	; (8005dec <SystemClock_Config+0x114>)
 8005d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d18:	6413      	str	r3, [r2, #64]	; 0x40
 8005d1a:	4b34      	ldr	r3, [pc, #208]	; (8005dec <SystemClock_Config+0x114>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d22:	60bb      	str	r3, [r7, #8]
 8005d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d26:	2300      	movs	r3, #0
 8005d28:	607b      	str	r3, [r7, #4]
 8005d2a:	4b31      	ldr	r3, [pc, #196]	; (8005df0 <SystemClock_Config+0x118>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a30      	ldr	r2, [pc, #192]	; (8005df0 <SystemClock_Config+0x118>)
 8005d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	4b2e      	ldr	r3, [pc, #184]	; (8005df0 <SystemClock_Config+0x118>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d3e:	607b      	str	r3, [r7, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d42:	2301      	movs	r3, #1
 8005d44:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d4a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d54:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005d56:	2308      	movs	r3, #8
 8005d58:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005d5a:	23b4      	movs	r3, #180	; 0xb4
 8005d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d60:	2302      	movs	r3, #2
 8005d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005d66:	2308      	movs	r3, #8
 8005d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005d76:	4618      	mov	r0, r3
 8005d78:	f006 fae4 	bl	800c344 <HAL_RCC_OscConfig>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005d82:	f000 fe7f 	bl	8006a84 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005d86:	f005 fe5f 	bl	800ba48 <HAL_PWREx_EnableOverDrive>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005d90:	f000 fe78 	bl	8006a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d94:	230f      	movs	r3, #15
 8005d96:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005da0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005da4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005daa:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005dac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005db0:	2105      	movs	r1, #5
 8005db2:	4618      	mov	r0, r3
 8005db4:	f005 fe98 	bl	800bae8 <HAL_RCC_ClockConfig>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005dbe:	f000 fe61 	bl	8006a84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005dc2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005dc6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005dd0:	f107 030c 	add.w	r3, r7, #12
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f006 f877 	bl	800bec8 <HAL_RCCEx_PeriphCLKConfig>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005de0:	f000 fe50 	bl	8006a84 <Error_Handler>
  }
}
 8005de4:	bf00      	nop
 8005de6:	3790      	adds	r7, #144	; 0x90
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40023800 	.word	0x40023800
 8005df0:	40007000 	.word	0x40007000

08005df4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	605a      	str	r2, [r3, #4]
 8005e02:	609a      	str	r2, [r3, #8]
 8005e04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005e06:	4b7c      	ldr	r3, [pc, #496]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e08:	4a7c      	ldr	r2, [pc, #496]	; (8005ffc <MX_ADC2_Init+0x208>)
 8005e0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005e0c:	4b7a      	ldr	r3, [pc, #488]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005e12:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005e14:	4b78      	ldr	r3, [pc, #480]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005e1a:	4b77      	ldr	r3, [pc, #476]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005e20:	4b75      	ldr	r3, [pc, #468]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005e26:	4b74      	ldr	r3, [pc, #464]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005e2e:	4b72      	ldr	r3, [pc, #456]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005e34:	4b70      	ldr	r3, [pc, #448]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e36:	4a72      	ldr	r2, [pc, #456]	; (8006000 <MX_ADC2_Init+0x20c>)
 8005e38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005e3a:	4b6f      	ldr	r3, [pc, #444]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005e40:	4b6d      	ldr	r3, [pc, #436]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e42:	220e      	movs	r2, #14
 8005e44:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005e46:	4b6c      	ldr	r3, [pc, #432]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005e4e:	4b6a      	ldr	r3, [pc, #424]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005e54:	4868      	ldr	r0, [pc, #416]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e56:	f003 fbdf 	bl	8009618 <HAL_ADC_Init>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005e60:	f000 fe10 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005e64:	230a      	movs	r3, #10
 8005e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005e6c:	2306      	movs	r3, #6
 8005e6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e70:	463b      	mov	r3, r7
 8005e72:	4619      	mov	r1, r3
 8005e74:	4860      	ldr	r0, [pc, #384]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e76:	f003 fd23 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005e80:	f000 fe00 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005e84:	230b      	movs	r3, #11
 8005e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4859      	ldr	r0, [pc, #356]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005e92:	f003 fd15 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005e9c:	f000 fdf2 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005ea0:	230c      	movs	r3, #12
 8005ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ea8:	463b      	mov	r3, r7
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4852      	ldr	r0, [pc, #328]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005eae:	f003 fd07 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005eb8:	f000 fde4 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005ebc:	230d      	movs	r3, #13
 8005ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ec4:	463b      	mov	r3, r7
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	484b      	ldr	r0, [pc, #300]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005eca:	f003 fcf9 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005ed4:	f000 fdd6 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005edc:	2305      	movs	r3, #5
 8005ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ee0:	463b      	mov	r3, r7
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4844      	ldr	r0, [pc, #272]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005ee6:	f003 fceb 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005ef0:	f000 fdc8 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005ef8:	2306      	movs	r3, #6
 8005efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005efc:	463b      	mov	r3, r7
 8005efe:	4619      	mov	r1, r3
 8005f00:	483d      	ldr	r0, [pc, #244]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005f02:	f003 fcdd 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005f0c:	f000 fdba 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005f10:	2302      	movs	r3, #2
 8005f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005f14:	2307      	movs	r3, #7
 8005f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f18:	463b      	mov	r3, r7
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4836      	ldr	r0, [pc, #216]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005f1e:	f003 fccf 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005f28:	f000 fdac 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005f30:	2308      	movs	r3, #8
 8005f32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f34:	463b      	mov	r3, r7
 8005f36:	4619      	mov	r1, r3
 8005f38:	482f      	ldr	r0, [pc, #188]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005f3a:	f003 fcc1 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005f44:	f000 fd9e 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005f48:	2304      	movs	r3, #4
 8005f4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005f4c:	2309      	movs	r3, #9
 8005f4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f50:	463b      	mov	r3, r7
 8005f52:	4619      	mov	r1, r3
 8005f54:	4828      	ldr	r0, [pc, #160]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005f56:	f003 fcb3 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005f60:	f000 fd90 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005f64:	2305      	movs	r3, #5
 8005f66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005f68:	230a      	movs	r3, #10
 8005f6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4821      	ldr	r0, [pc, #132]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005f72:	f003 fca5 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005f7c:	f000 fd82 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005f80:	2306      	movs	r3, #6
 8005f82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005f84:	230b      	movs	r3, #11
 8005f86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f88:	463b      	mov	r3, r7
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	481a      	ldr	r0, [pc, #104]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005f8e:	f003 fc97 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005f98:	f000 fd74 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005f9c:	2307      	movs	r3, #7
 8005f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fa4:	463b      	mov	r3, r7
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4813      	ldr	r0, [pc, #76]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005faa:	f003 fc89 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005fb4:	f000 fd66 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005fb8:	2308      	movs	r3, #8
 8005fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005fbc:	230d      	movs	r3, #13
 8005fbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	480c      	ldr	r0, [pc, #48]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005fc6:	f003 fc7b 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005fd0:	f000 fd58 	bl	8006a84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005fd4:	2309      	movs	r3, #9
 8005fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005fd8:	230e      	movs	r3, #14
 8005fda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fdc:	463b      	mov	r3, r7
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4805      	ldr	r0, [pc, #20]	; (8005ff8 <MX_ADC2_Init+0x204>)
 8005fe2:	f003 fc6d 	bl	80098c0 <HAL_ADC_ConfigChannel>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005fec:	f000 fd4a 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005ff0:	bf00      	nop
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20043784 	.word	0x20043784
 8005ffc:	40012100 	.word	0x40012100
 8006000:	0f000001 	.word	0x0f000001

08006004 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006008:	4b12      	ldr	r3, [pc, #72]	; (8006054 <MX_I2C1_Init+0x50>)
 800600a:	4a13      	ldr	r2, [pc, #76]	; (8006058 <MX_I2C1_Init+0x54>)
 800600c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800600e:	4b11      	ldr	r3, [pc, #68]	; (8006054 <MX_I2C1_Init+0x50>)
 8006010:	4a12      	ldr	r2, [pc, #72]	; (800605c <MX_I2C1_Init+0x58>)
 8006012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006014:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <MX_I2C1_Init+0x50>)
 8006016:	2200      	movs	r2, #0
 8006018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800601a:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <MX_I2C1_Init+0x50>)
 800601c:	2200      	movs	r2, #0
 800601e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006020:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <MX_I2C1_Init+0x50>)
 8006022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006026:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <MX_I2C1_Init+0x50>)
 800602a:	2200      	movs	r2, #0
 800602c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800602e:	4b09      	ldr	r3, [pc, #36]	; (8006054 <MX_I2C1_Init+0x50>)
 8006030:	2200      	movs	r2, #0
 8006032:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006034:	4b07      	ldr	r3, [pc, #28]	; (8006054 <MX_I2C1_Init+0x50>)
 8006036:	2200      	movs	r2, #0
 8006038:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800603a:	4b06      	ldr	r3, [pc, #24]	; (8006054 <MX_I2C1_Init+0x50>)
 800603c:	2280      	movs	r2, #128	; 0x80
 800603e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006040:	4804      	ldr	r0, [pc, #16]	; (8006054 <MX_I2C1_Init+0x50>)
 8006042:	f004 fd77 	bl	800ab34 <HAL_I2C_Init>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800604c:	f000 fd1a 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006050:	bf00      	nop
 8006052:	bd80      	pop	{r7, pc}
 8006054:	200437cc 	.word	0x200437cc
 8006058:	40005400 	.word	0x40005400
 800605c:	000186a0 	.word	0x000186a0

08006060 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006064:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <MX_I2C2_Init+0x50>)
 8006066:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <MX_I2C2_Init+0x54>)
 8006068:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800606a:	4b11      	ldr	r3, [pc, #68]	; (80060b0 <MX_I2C2_Init+0x50>)
 800606c:	4a12      	ldr	r2, [pc, #72]	; (80060b8 <MX_I2C2_Init+0x58>)
 800606e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006070:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <MX_I2C2_Init+0x50>)
 8006072:	2200      	movs	r2, #0
 8006074:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006076:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <MX_I2C2_Init+0x50>)
 8006078:	2200      	movs	r2, #0
 800607a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800607c:	4b0c      	ldr	r3, [pc, #48]	; (80060b0 <MX_I2C2_Init+0x50>)
 800607e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006082:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006084:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <MX_I2C2_Init+0x50>)
 8006086:	2200      	movs	r2, #0
 8006088:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800608a:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <MX_I2C2_Init+0x50>)
 800608c:	2200      	movs	r2, #0
 800608e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <MX_I2C2_Init+0x50>)
 8006092:	2200      	movs	r2, #0
 8006094:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <MX_I2C2_Init+0x50>)
 8006098:	2280      	movs	r2, #128	; 0x80
 800609a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800609c:	4804      	ldr	r0, [pc, #16]	; (80060b0 <MX_I2C2_Init+0x50>)
 800609e:	f004 fd49 	bl	800ab34 <HAL_I2C_Init>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80060a8:	f000 fcec 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80060ac:	bf00      	nop
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20043860 	.word	0x20043860
 80060b4:	40005800 	.word	0x40005800
 80060b8:	000186a0 	.word	0x000186a0

080060bc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80060c0:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <MX_SDIO_SD_Init+0x38>)
 80060c2:	4a0d      	ldr	r2, [pc, #52]	; (80060f8 <MX_SDIO_SD_Init+0x3c>)
 80060c4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80060c6:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <MX_SDIO_SD_Init+0x38>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80060cc:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <MX_SDIO_SD_Init+0x38>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060d2:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <MX_SDIO_SD_Init+0x38>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80060d8:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <MX_SDIO_SD_Init+0x38>)
 80060da:	2200      	movs	r2, #0
 80060dc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060de:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <MX_SDIO_SD_Init+0x38>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80060e4:	4b03      	ldr	r3, [pc, #12]	; (80060f4 <MX_SDIO_SD_Init+0x38>)
 80060e6:	2202      	movs	r2, #2
 80060e8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80060ea:	bf00      	nop
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	20043a60 	.word	0x20043a60
 80060f8:	40012c00 	.word	0x40012c00

080060fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006100:	4b17      	ldr	r3, [pc, #92]	; (8006160 <MX_SPI2_Init+0x64>)
 8006102:	4a18      	ldr	r2, [pc, #96]	; (8006164 <MX_SPI2_Init+0x68>)
 8006104:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006106:	4b16      	ldr	r3, [pc, #88]	; (8006160 <MX_SPI2_Init+0x64>)
 8006108:	f44f 7282 	mov.w	r2, #260	; 0x104
 800610c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800610e:	4b14      	ldr	r3, [pc, #80]	; (8006160 <MX_SPI2_Init+0x64>)
 8006110:	2200      	movs	r2, #0
 8006112:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006114:	4b12      	ldr	r3, [pc, #72]	; (8006160 <MX_SPI2_Init+0x64>)
 8006116:	2200      	movs	r2, #0
 8006118:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800611a:	4b11      	ldr	r3, [pc, #68]	; (8006160 <MX_SPI2_Init+0x64>)
 800611c:	2202      	movs	r2, #2
 800611e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006120:	4b0f      	ldr	r3, [pc, #60]	; (8006160 <MX_SPI2_Init+0x64>)
 8006122:	2201      	movs	r2, #1
 8006124:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006126:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <MX_SPI2_Init+0x64>)
 8006128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800612c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800612e:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <MX_SPI2_Init+0x64>)
 8006130:	2228      	movs	r2, #40	; 0x28
 8006132:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006134:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <MX_SPI2_Init+0x64>)
 8006136:	2200      	movs	r2, #0
 8006138:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <MX_SPI2_Init+0x64>)
 800613c:	2200      	movs	r2, #0
 800613e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <MX_SPI2_Init+0x64>)
 8006142:	2200      	movs	r2, #0
 8006144:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006146:	4b06      	ldr	r3, [pc, #24]	; (8006160 <MX_SPI2_Init+0x64>)
 8006148:	220a      	movs	r2, #10
 800614a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800614c:	4804      	ldr	r0, [pc, #16]	; (8006160 <MX_SPI2_Init+0x64>)
 800614e:	f007 fe23 	bl	800dd98 <HAL_SPI_Init>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006158:	f000 fc94 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800615c:	bf00      	nop
 800615e:	bd80      	pop	{r7, pc}
 8006160:	200436ac 	.word	0x200436ac
 8006164:	40003800 	.word	0x40003800

08006168 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b09a      	sub	sp, #104	; 0x68
 800616c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800616e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006172:	2224      	movs	r2, #36	; 0x24
 8006174:	2100      	movs	r1, #0
 8006176:	4618      	mov	r0, r3
 8006178:	f00e ffad 	bl	80150d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800617c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006186:	f107 0320 	add.w	r3, r7, #32
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	605a      	str	r2, [r3, #4]
 8006190:	609a      	str	r2, [r3, #8]
 8006192:	60da      	str	r2, [r3, #12]
 8006194:	611a      	str	r2, [r3, #16]
 8006196:	615a      	str	r2, [r3, #20]
 8006198:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800619a:	463b      	mov	r3, r7
 800619c:	2220      	movs	r2, #32
 800619e:	2100      	movs	r1, #0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f00e ff98 	bl	80150d6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80061a6:	4b42      	ldr	r3, [pc, #264]	; (80062b0 <MX_TIM1_Init+0x148>)
 80061a8:	4a42      	ldr	r2, [pc, #264]	; (80062b4 <MX_TIM1_Init+0x14c>)
 80061aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80061ac:	4b40      	ldr	r3, [pc, #256]	; (80062b0 <MX_TIM1_Init+0x148>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061b2:	4b3f      	ldr	r3, [pc, #252]	; (80062b0 <MX_TIM1_Init+0x148>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80061b8:	4b3d      	ldr	r3, [pc, #244]	; (80062b0 <MX_TIM1_Init+0x148>)
 80061ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061c0:	4b3b      	ldr	r3, [pc, #236]	; (80062b0 <MX_TIM1_Init+0x148>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80061c6:	4b3a      	ldr	r3, [pc, #232]	; (80062b0 <MX_TIM1_Init+0x148>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061cc:	4b38      	ldr	r3, [pc, #224]	; (80062b0 <MX_TIM1_Init+0x148>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80061d2:	4837      	ldr	r0, [pc, #220]	; (80062b0 <MX_TIM1_Init+0x148>)
 80061d4:	f008 fb83 	bl	800e8de <HAL_TIM_PWM_Init>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80061de:	f000 fc51 	bl	8006a84 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80061e2:	2303      	movs	r3, #3
 80061e4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80061e6:	2300      	movs	r3, #0
 80061e8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80061ea:	2301      	movs	r3, #1
 80061ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80061ee:	2300      	movs	r3, #0
 80061f0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80061f6:	2300      	movs	r3, #0
 80061f8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80061fa:	2301      	movs	r3, #1
 80061fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80061fe:	2300      	movs	r3, #0
 8006200:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006206:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800620a:	4619      	mov	r1, r3
 800620c:	4828      	ldr	r0, [pc, #160]	; (80062b0 <MX_TIM1_Init+0x148>)
 800620e:	f008 fbcf 	bl	800e9b0 <HAL_TIM_Encoder_Init>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006218:	f000 fc34 	bl	8006a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800621c:	2300      	movs	r3, #0
 800621e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006220:	2300      	movs	r3, #0
 8006222:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006224:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006228:	4619      	mov	r1, r3
 800622a:	4821      	ldr	r0, [pc, #132]	; (80062b0 <MX_TIM1_Init+0x148>)
 800622c:	f009 f8f6 	bl	800f41c <HAL_TIMEx_MasterConfigSynchronization>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006236:	f000 fc25 	bl	8006a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800623a:	2360      	movs	r3, #96	; 0x60
 800623c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006242:	2300      	movs	r3, #0
 8006244:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006246:	2300      	movs	r3, #0
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800624a:	2300      	movs	r3, #0
 800624c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800624e:	2300      	movs	r3, #0
 8006250:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006252:	2300      	movs	r3, #0
 8006254:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006256:	f107 0320 	add.w	r3, r7, #32
 800625a:	2208      	movs	r2, #8
 800625c:	4619      	mov	r1, r3
 800625e:	4814      	ldr	r0, [pc, #80]	; (80062b0 <MX_TIM1_Init+0x148>)
 8006260:	f008 fd78 	bl	800ed54 <HAL_TIM_PWM_ConfigChannel>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800626a:	f000 fc0b 	bl	8006a84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800626e:	2300      	movs	r3, #0
 8006270:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800627e:	2300      	movs	r3, #0
 8006280:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006282:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006286:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800628c:	463b      	mov	r3, r7
 800628e:	4619      	mov	r1, r3
 8006290:	4807      	ldr	r0, [pc, #28]	; (80062b0 <MX_TIM1_Init+0x148>)
 8006292:	f009 f93f 	bl	800f514 <HAL_TIMEx_ConfigBreakDeadTime>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800629c:	f000 fbf2 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80062a0:	4803      	ldr	r0, [pc, #12]	; (80062b0 <MX_TIM1_Init+0x148>)
 80062a2:	f000 ffdf 	bl	8007264 <HAL_TIM_MspPostInit>

}
 80062a6:	bf00      	nop
 80062a8:	3768      	adds	r7, #104	; 0x68
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20043a20 	.word	0x20043a20
 80062b4:	40010000 	.word	0x40010000

080062b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b08a      	sub	sp, #40	; 0x28
 80062bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062be:	f107 0320 	add.w	r3, r7, #32
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062c8:	1d3b      	adds	r3, r7, #4
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	605a      	str	r2, [r3, #4]
 80062d0:	609a      	str	r2, [r3, #8]
 80062d2:	60da      	str	r2, [r3, #12]
 80062d4:	611a      	str	r2, [r3, #16]
 80062d6:	615a      	str	r2, [r3, #20]
 80062d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80062da:	4b27      	ldr	r3, [pc, #156]	; (8006378 <MX_TIM3_Init+0xc0>)
 80062dc:	4a27      	ldr	r2, [pc, #156]	; (800637c <MX_TIM3_Init+0xc4>)
 80062de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80062e0:	4b25      	ldr	r3, [pc, #148]	; (8006378 <MX_TIM3_Init+0xc0>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062e6:	4b24      	ldr	r3, [pc, #144]	; (8006378 <MX_TIM3_Init+0xc0>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80062ec:	4b22      	ldr	r3, [pc, #136]	; (8006378 <MX_TIM3_Init+0xc0>)
 80062ee:	f241 1293 	movw	r2, #4499	; 0x1193
 80062f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062f4:	4b20      	ldr	r3, [pc, #128]	; (8006378 <MX_TIM3_Init+0xc0>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062fa:	4b1f      	ldr	r3, [pc, #124]	; (8006378 <MX_TIM3_Init+0xc0>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006300:	481d      	ldr	r0, [pc, #116]	; (8006378 <MX_TIM3_Init+0xc0>)
 8006302:	f008 faec 	bl	800e8de <HAL_TIM_PWM_Init>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800630c:	f000 fbba 	bl	8006a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006310:	2300      	movs	r3, #0
 8006312:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006314:	2300      	movs	r3, #0
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006318:	f107 0320 	add.w	r3, r7, #32
 800631c:	4619      	mov	r1, r3
 800631e:	4816      	ldr	r0, [pc, #88]	; (8006378 <MX_TIM3_Init+0xc0>)
 8006320:	f009 f87c 	bl	800f41c <HAL_TIMEx_MasterConfigSynchronization>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800632a:	f000 fbab 	bl	8006a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800632e:	2360      	movs	r3, #96	; 0x60
 8006330:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	2200      	movs	r2, #0
 8006342:	4619      	mov	r1, r3
 8006344:	480c      	ldr	r0, [pc, #48]	; (8006378 <MX_TIM3_Init+0xc0>)
 8006346:	f008 fd05 	bl	800ed54 <HAL_TIM_PWM_ConfigChannel>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006350:	f000 fb98 	bl	8006a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006354:	1d3b      	adds	r3, r7, #4
 8006356:	2204      	movs	r2, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4807      	ldr	r0, [pc, #28]	; (8006378 <MX_TIM3_Init+0xc0>)
 800635c:	f008 fcfa 	bl	800ed54 <HAL_TIM_PWM_ConfigChannel>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006366:	f000 fb8d 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800636a:	4803      	ldr	r0, [pc, #12]	; (8006378 <MX_TIM3_Init+0xc0>)
 800636c:	f000 ff7a 	bl	8007264 <HAL_TIM_MspPostInit>

}
 8006370:	bf00      	nop
 8006372:	3728      	adds	r7, #40	; 0x28
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	200438b8 	.word	0x200438b8
 800637c:	40000400 	.word	0x40000400

08006380 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006386:	f107 0320 	add.w	r3, r7, #32
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006390:	1d3b      	adds	r3, r7, #4
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	605a      	str	r2, [r3, #4]
 8006398:	609a      	str	r2, [r3, #8]
 800639a:	60da      	str	r2, [r3, #12]
 800639c:	611a      	str	r2, [r3, #16]
 800639e:	615a      	str	r2, [r3, #20]
 80063a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80063a2:	4b27      	ldr	r3, [pc, #156]	; (8006440 <MX_TIM4_Init+0xc0>)
 80063a4:	4a27      	ldr	r2, [pc, #156]	; (8006444 <MX_TIM4_Init+0xc4>)
 80063a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80063a8:	4b25      	ldr	r3, [pc, #148]	; (8006440 <MX_TIM4_Init+0xc0>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063ae:	4b24      	ldr	r3, [pc, #144]	; (8006440 <MX_TIM4_Init+0xc0>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80063b4:	4b22      	ldr	r3, [pc, #136]	; (8006440 <MX_TIM4_Init+0xc0>)
 80063b6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80063ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063bc:	4b20      	ldr	r3, [pc, #128]	; (8006440 <MX_TIM4_Init+0xc0>)
 80063be:	2200      	movs	r2, #0
 80063c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063c2:	4b1f      	ldr	r3, [pc, #124]	; (8006440 <MX_TIM4_Init+0xc0>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80063c8:	481d      	ldr	r0, [pc, #116]	; (8006440 <MX_TIM4_Init+0xc0>)
 80063ca:	f008 fa88 	bl	800e8de <HAL_TIM_PWM_Init>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80063d4:	f000 fb56 	bl	8006a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063d8:	2300      	movs	r3, #0
 80063da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063dc:	2300      	movs	r3, #0
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80063e0:	f107 0320 	add.w	r3, r7, #32
 80063e4:	4619      	mov	r1, r3
 80063e6:	4816      	ldr	r0, [pc, #88]	; (8006440 <MX_TIM4_Init+0xc0>)
 80063e8:	f009 f818 	bl	800f41c <HAL_TIMEx_MasterConfigSynchronization>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80063f2:	f000 fb47 	bl	8006a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063f6:	2360      	movs	r3, #96	; 0x60
 80063f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006406:	1d3b      	adds	r3, r7, #4
 8006408:	2208      	movs	r2, #8
 800640a:	4619      	mov	r1, r3
 800640c:	480c      	ldr	r0, [pc, #48]	; (8006440 <MX_TIM4_Init+0xc0>)
 800640e:	f008 fca1 	bl	800ed54 <HAL_TIM_PWM_ConfigChannel>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006418:	f000 fb34 	bl	8006a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800641c:	1d3b      	adds	r3, r7, #4
 800641e:	220c      	movs	r2, #12
 8006420:	4619      	mov	r1, r3
 8006422:	4807      	ldr	r0, [pc, #28]	; (8006440 <MX_TIM4_Init+0xc0>)
 8006424:	f008 fc96 	bl	800ed54 <HAL_TIM_PWM_ConfigChannel>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800642e:	f000 fb29 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006432:	4803      	ldr	r0, [pc, #12]	; (8006440 <MX_TIM4_Init+0xc0>)
 8006434:	f000 ff16 	bl	8007264 <HAL_TIM_MspPostInit>

}
 8006438:	bf00      	nop
 800643a:	3728      	adds	r7, #40	; 0x28
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	20043744 	.word	0x20043744
 8006444:	40000800 	.word	0x40000800

08006448 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800644e:	463b      	mov	r3, r7
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006456:	4b15      	ldr	r3, [pc, #84]	; (80064ac <MX_TIM6_Init+0x64>)
 8006458:	4a15      	ldr	r2, [pc, #84]	; (80064b0 <MX_TIM6_Init+0x68>)
 800645a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800645c:	4b13      	ldr	r3, [pc, #76]	; (80064ac <MX_TIM6_Init+0x64>)
 800645e:	2259      	movs	r2, #89	; 0x59
 8006460:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006462:	4b12      	ldr	r3, [pc, #72]	; (80064ac <MX_TIM6_Init+0x64>)
 8006464:	2200      	movs	r2, #0
 8006466:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006468:	4b10      	ldr	r3, [pc, #64]	; (80064ac <MX_TIM6_Init+0x64>)
 800646a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800646e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006470:	4b0e      	ldr	r3, [pc, #56]	; (80064ac <MX_TIM6_Init+0x64>)
 8006472:	2280      	movs	r2, #128	; 0x80
 8006474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006476:	480d      	ldr	r0, [pc, #52]	; (80064ac <MX_TIM6_Init+0x64>)
 8006478:	f008 f9e2 	bl	800e840 <HAL_TIM_Base_Init>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006482:	f000 faff 	bl	8006a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006486:	2300      	movs	r3, #0
 8006488:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800648a:	2300      	movs	r3, #0
 800648c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800648e:	463b      	mov	r3, r7
 8006490:	4619      	mov	r1, r3
 8006492:	4806      	ldr	r0, [pc, #24]	; (80064ac <MX_TIM6_Init+0x64>)
 8006494:	f008 ffc2 	bl	800f41c <HAL_TIMEx_MasterConfigSynchronization>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800649e:	f000 faf1 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80064a2:	bf00      	nop
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	200439e0 	.word	0x200439e0
 80064b0:	40001000 	.word	0x40001000

080064b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064ba:	463b      	mov	r3, r7
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80064c2:	4b14      	ldr	r3, [pc, #80]	; (8006514 <MX_TIM7_Init+0x60>)
 80064c4:	4a14      	ldr	r2, [pc, #80]	; (8006518 <MX_TIM7_Init+0x64>)
 80064c6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80064c8:	4b12      	ldr	r3, [pc, #72]	; (8006514 <MX_TIM7_Init+0x60>)
 80064ca:	22b3      	movs	r2, #179	; 0xb3
 80064cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064ce:	4b11      	ldr	r3, [pc, #68]	; (8006514 <MX_TIM7_Init+0x60>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80064d4:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <MX_TIM7_Init+0x60>)
 80064d6:	2231      	movs	r2, #49	; 0x31
 80064d8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80064da:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <MX_TIM7_Init+0x60>)
 80064dc:	2280      	movs	r2, #128	; 0x80
 80064de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80064e0:	480c      	ldr	r0, [pc, #48]	; (8006514 <MX_TIM7_Init+0x60>)
 80064e2:	f008 f9ad 	bl	800e840 <HAL_TIM_Base_Init>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80064ec:	f000 faca 	bl	8006a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064f0:	2300      	movs	r3, #0
 80064f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80064f8:	463b      	mov	r3, r7
 80064fa:	4619      	mov	r1, r3
 80064fc:	4805      	ldr	r0, [pc, #20]	; (8006514 <MX_TIM7_Init+0x60>)
 80064fe:	f008 ff8d 	bl	800f41c <HAL_TIMEx_MasterConfigSynchronization>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006508:	f000 fabc 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20043b84 	.word	0x20043b84
 8006518:	40001400 	.word	0x40001400

0800651c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08c      	sub	sp, #48	; 0x30
 8006520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006522:	f107 030c 	add.w	r3, r7, #12
 8006526:	2224      	movs	r2, #36	; 0x24
 8006528:	2100      	movs	r1, #0
 800652a:	4618      	mov	r0, r3
 800652c:	f00e fdd3 	bl	80150d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006530:	1d3b      	adds	r3, r7, #4
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006538:	4b22      	ldr	r3, [pc, #136]	; (80065c4 <MX_TIM8_Init+0xa8>)
 800653a:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <MX_TIM8_Init+0xac>)
 800653c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800653e:	4b21      	ldr	r3, [pc, #132]	; (80065c4 <MX_TIM8_Init+0xa8>)
 8006540:	2200      	movs	r2, #0
 8006542:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006544:	4b1f      	ldr	r3, [pc, #124]	; (80065c4 <MX_TIM8_Init+0xa8>)
 8006546:	2210      	movs	r2, #16
 8006548:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800654a:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <MX_TIM8_Init+0xa8>)
 800654c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006550:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006552:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <MX_TIM8_Init+0xa8>)
 8006554:	2200      	movs	r2, #0
 8006556:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006558:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <MX_TIM8_Init+0xa8>)
 800655a:	2200      	movs	r2, #0
 800655c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800655e:	4b19      	ldr	r3, [pc, #100]	; (80065c4 <MX_TIM8_Init+0xa8>)
 8006560:	2200      	movs	r2, #0
 8006562:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006564:	2303      	movs	r3, #3
 8006566:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006568:	2300      	movs	r3, #0
 800656a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800656c:	2301      	movs	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006570:	2300      	movs	r3, #0
 8006572:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006578:	2300      	movs	r3, #0
 800657a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800657c:	2301      	movs	r3, #1
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006580:	2300      	movs	r3, #0
 8006582:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006588:	f107 030c 	add.w	r3, r7, #12
 800658c:	4619      	mov	r1, r3
 800658e:	480d      	ldr	r0, [pc, #52]	; (80065c4 <MX_TIM8_Init+0xa8>)
 8006590:	f008 fa0e 	bl	800e9b0 <HAL_TIM_Encoder_Init>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800659a:	f000 fa73 	bl	8006a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800659e:	2300      	movs	r3, #0
 80065a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80065a6:	1d3b      	adds	r3, r7, #4
 80065a8:	4619      	mov	r1, r3
 80065aa:	4806      	ldr	r0, [pc, #24]	; (80065c4 <MX_TIM8_Init+0xa8>)
 80065ac:	f008 ff36 	bl	800f41c <HAL_TIMEx_MasterConfigSynchronization>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80065b6:	f000 fa65 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80065ba:	bf00      	nop
 80065bc:	3730      	adds	r7, #48	; 0x30
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20043704 	.word	0x20043704
 80065c8:	40010400 	.word	0x40010400

080065cc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80065d2:	1d3b      	adds	r3, r7, #4
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	609a      	str	r2, [r3, #8]
 80065dc:	60da      	str	r2, [r3, #12]
 80065de:	611a      	str	r2, [r3, #16]
 80065e0:	615a      	str	r2, [r3, #20]
 80065e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80065e4:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <MX_TIM10_Init+0x94>)
 80065e6:	4a1f      	ldr	r2, [pc, #124]	; (8006664 <MX_TIM10_Init+0x98>)
 80065e8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80065ea:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <MX_TIM10_Init+0x94>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065f0:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <MX_TIM10_Init+0x94>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80065f6:	4b1a      	ldr	r3, [pc, #104]	; (8006660 <MX_TIM10_Init+0x94>)
 80065f8:	f242 3227 	movw	r2, #8999	; 0x2327
 80065fc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065fe:	4b18      	ldr	r3, [pc, #96]	; (8006660 <MX_TIM10_Init+0x94>)
 8006600:	2200      	movs	r2, #0
 8006602:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006604:	4b16      	ldr	r3, [pc, #88]	; (8006660 <MX_TIM10_Init+0x94>)
 8006606:	2200      	movs	r2, #0
 8006608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800660a:	4815      	ldr	r0, [pc, #84]	; (8006660 <MX_TIM10_Init+0x94>)
 800660c:	f008 f918 	bl	800e840 <HAL_TIM_Base_Init>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006616:	f000 fa35 	bl	8006a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800661a:	4811      	ldr	r0, [pc, #68]	; (8006660 <MX_TIM10_Init+0x94>)
 800661c:	f008 f95f 	bl	800e8de <HAL_TIM_PWM_Init>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006626:	f000 fa2d 	bl	8006a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800662a:	2360      	movs	r3, #96	; 0x60
 800662c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	2200      	movs	r2, #0
 800663e:	4619      	mov	r1, r3
 8006640:	4807      	ldr	r0, [pc, #28]	; (8006660 <MX_TIM10_Init+0x94>)
 8006642:	f008 fb87 	bl	800ed54 <HAL_TIM_PWM_ConfigChannel>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800664c:	f000 fa1a 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006650:	4803      	ldr	r0, [pc, #12]	; (8006660 <MX_TIM10_Init+0x94>)
 8006652:	f000 fe07 	bl	8007264 <HAL_TIM_MspPostInit>

}
 8006656:	bf00      	nop
 8006658:	3720      	adds	r7, #32
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20043820 	.word	0x20043820
 8006664:	40014400 	.word	0x40014400

08006668 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800666e:	1d3b      	adds	r3, r7, #4
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	605a      	str	r2, [r3, #4]
 8006676:	609a      	str	r2, [r3, #8]
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	611a      	str	r2, [r3, #16]
 800667c:	615a      	str	r2, [r3, #20]
 800667e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006680:	4b1e      	ldr	r3, [pc, #120]	; (80066fc <MX_TIM11_Init+0x94>)
 8006682:	4a1f      	ldr	r2, [pc, #124]	; (8006700 <MX_TIM11_Init+0x98>)
 8006684:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006686:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <MX_TIM11_Init+0x94>)
 8006688:	2201      	movs	r2, #1
 800668a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800668c:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <MX_TIM11_Init+0x94>)
 800668e:	2200      	movs	r2, #0
 8006690:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006692:	4b1a      	ldr	r3, [pc, #104]	; (80066fc <MX_TIM11_Init+0x94>)
 8006694:	f242 3227 	movw	r2, #8999	; 0x2327
 8006698:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800669a:	4b18      	ldr	r3, [pc, #96]	; (80066fc <MX_TIM11_Init+0x94>)
 800669c:	2200      	movs	r2, #0
 800669e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066a0:	4b16      	ldr	r3, [pc, #88]	; (80066fc <MX_TIM11_Init+0x94>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80066a6:	4815      	ldr	r0, [pc, #84]	; (80066fc <MX_TIM11_Init+0x94>)
 80066a8:	f008 f8ca 	bl	800e840 <HAL_TIM_Base_Init>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80066b2:	f000 f9e7 	bl	8006a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80066b6:	4811      	ldr	r0, [pc, #68]	; (80066fc <MX_TIM11_Init+0x94>)
 80066b8:	f008 f911 	bl	800e8de <HAL_TIM_PWM_Init>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80066c2:	f000 f9df 	bl	8006a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066c6:	2360      	movs	r3, #96	; 0x60
 80066c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066d6:	1d3b      	adds	r3, r7, #4
 80066d8:	2200      	movs	r2, #0
 80066da:	4619      	mov	r1, r3
 80066dc:	4807      	ldr	r0, [pc, #28]	; (80066fc <MX_TIM11_Init+0x94>)
 80066de:	f008 fb39 	bl	800ed54 <HAL_TIM_PWM_ConfigChannel>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80066e8:	f000 f9cc 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80066ec:	4803      	ldr	r0, [pc, #12]	; (80066fc <MX_TIM11_Init+0x94>)
 80066ee:	f000 fdb9 	bl	8007264 <HAL_TIM_MspPostInit>

}
 80066f2:	bf00      	nop
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20043940 	.word	0x20043940
 8006700:	40014800 	.word	0x40014800

08006704 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006708:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <MX_TIM13_Init+0x40>)
 800670a:	4a0f      	ldr	r2, [pc, #60]	; (8006748 <MX_TIM13_Init+0x44>)
 800670c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800670e:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <MX_TIM13_Init+0x40>)
 8006710:	2259      	movs	r2, #89	; 0x59
 8006712:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006714:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <MX_TIM13_Init+0x40>)
 8006716:	2200      	movs	r2, #0
 8006718:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800671a:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <MX_TIM13_Init+0x40>)
 800671c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006720:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006722:	4b08      	ldr	r3, [pc, #32]	; (8006744 <MX_TIM13_Init+0x40>)
 8006724:	2200      	movs	r2, #0
 8006726:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006728:	4b06      	ldr	r3, [pc, #24]	; (8006744 <MX_TIM13_Init+0x40>)
 800672a:	2280      	movs	r2, #128	; 0x80
 800672c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800672e:	4805      	ldr	r0, [pc, #20]	; (8006744 <MX_TIM13_Init+0x40>)
 8006730:	f008 f886 	bl	800e840 <HAL_TIM_Base_Init>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800673a:	f000 f9a3 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800673e:	bf00      	nop
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20043900 	.word	0x20043900
 8006748:	40001c00 	.word	0x40001c00

0800674c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006750:	4b11      	ldr	r3, [pc, #68]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006752:	4a12      	ldr	r2, [pc, #72]	; (800679c <MX_USART2_UART_Init+0x50>)
 8006754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006756:	4b10      	ldr	r3, [pc, #64]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800675c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800675e:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006760:	2200      	movs	r2, #0
 8006762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006766:	2200      	movs	r2, #0
 8006768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800676a:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 800676c:	2200      	movs	r2, #0
 800676e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006770:	4b09      	ldr	r3, [pc, #36]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006772:	220c      	movs	r2, #12
 8006774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006776:	4b08      	ldr	r3, [pc, #32]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006778:	2200      	movs	r2, #0
 800677a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 800677e:	2200      	movs	r2, #0
 8006780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006782:	4805      	ldr	r0, [pc, #20]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006784:	f008 ff2c 	bl	800f5e0 <HAL_UART_Init>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800678e:	f000 f979 	bl	8006a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20043ae4 	.word	0x20043ae4
 800679c:	40004400 	.word	0x40004400

080067a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80067a6:	2300      	movs	r3, #0
 80067a8:	607b      	str	r3, [r7, #4]
 80067aa:	4b14      	ldr	r3, [pc, #80]	; (80067fc <MX_DMA_Init+0x5c>)
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	4a13      	ldr	r2, [pc, #76]	; (80067fc <MX_DMA_Init+0x5c>)
 80067b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067b4:	6313      	str	r3, [r2, #48]	; 0x30
 80067b6:	4b11      	ldr	r3, [pc, #68]	; (80067fc <MX_DMA_Init+0x5c>)
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067be:	607b      	str	r3, [r7, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80067c2:	2200      	movs	r2, #0
 80067c4:	2100      	movs	r1, #0
 80067c6:	203a      	movs	r0, #58	; 0x3a
 80067c8:	f003 fc05 	bl	8009fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80067cc:	203a      	movs	r0, #58	; 0x3a
 80067ce:	f003 fc1e 	bl	800a00e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80067d2:	2200      	movs	r2, #0
 80067d4:	2100      	movs	r1, #0
 80067d6:	203b      	movs	r0, #59	; 0x3b
 80067d8:	f003 fbfd 	bl	8009fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80067dc:	203b      	movs	r0, #59	; 0x3b
 80067de:	f003 fc16 	bl	800a00e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80067e2:	2200      	movs	r2, #0
 80067e4:	2100      	movs	r1, #0
 80067e6:	2045      	movs	r0, #69	; 0x45
 80067e8:	f003 fbf5 	bl	8009fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80067ec:	2045      	movs	r0, #69	; 0x45
 80067ee:	f003 fc0e 	bl	800a00e <HAL_NVIC_EnableIRQ>

}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40023800 	.word	0x40023800

08006800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08c      	sub	sp, #48	; 0x30
 8006804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006806:	f107 031c 	add.w	r3, r7, #28
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	605a      	str	r2, [r3, #4]
 8006810:	609a      	str	r2, [r3, #8]
 8006812:	60da      	str	r2, [r3, #12]
 8006814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006816:	2300      	movs	r3, #0
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	4b94      	ldr	r3, [pc, #592]	; (8006a6c <MX_GPIO_Init+0x26c>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	4a93      	ldr	r2, [pc, #588]	; (8006a6c <MX_GPIO_Init+0x26c>)
 8006820:	f043 0310 	orr.w	r3, r3, #16
 8006824:	6313      	str	r3, [r2, #48]	; 0x30
 8006826:	4b91      	ldr	r3, [pc, #580]	; (8006a6c <MX_GPIO_Init+0x26c>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	f003 0310 	and.w	r3, r3, #16
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006832:	2300      	movs	r3, #0
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	4b8d      	ldr	r3, [pc, #564]	; (8006a6c <MX_GPIO_Init+0x26c>)
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	4a8c      	ldr	r2, [pc, #560]	; (8006a6c <MX_GPIO_Init+0x26c>)
 800683c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006840:	6313      	str	r3, [r2, #48]	; 0x30
 8006842:	4b8a      	ldr	r3, [pc, #552]	; (8006a6c <MX_GPIO_Init+0x26c>)
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800684e:	2300      	movs	r3, #0
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	4b86      	ldr	r3, [pc, #536]	; (8006a6c <MX_GPIO_Init+0x26c>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	4a85      	ldr	r2, [pc, #532]	; (8006a6c <MX_GPIO_Init+0x26c>)
 8006858:	f043 0304 	orr.w	r3, r3, #4
 800685c:	6313      	str	r3, [r2, #48]	; 0x30
 800685e:	4b83      	ldr	r3, [pc, #524]	; (8006a6c <MX_GPIO_Init+0x26c>)
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	f003 0304 	and.w	r3, r3, #4
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	4b7f      	ldr	r3, [pc, #508]	; (8006a6c <MX_GPIO_Init+0x26c>)
 8006870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006872:	4a7e      	ldr	r2, [pc, #504]	; (8006a6c <MX_GPIO_Init+0x26c>)
 8006874:	f043 0301 	orr.w	r3, r3, #1
 8006878:	6313      	str	r3, [r2, #48]	; 0x30
 800687a:	4b7c      	ldr	r3, [pc, #496]	; (8006a6c <MX_GPIO_Init+0x26c>)
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006886:	2300      	movs	r3, #0
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	4b78      	ldr	r3, [pc, #480]	; (8006a6c <MX_GPIO_Init+0x26c>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	4a77      	ldr	r2, [pc, #476]	; (8006a6c <MX_GPIO_Init+0x26c>)
 8006890:	f043 0302 	orr.w	r3, r3, #2
 8006894:	6313      	str	r3, [r2, #48]	; 0x30
 8006896:	4b75      	ldr	r3, [pc, #468]	; (8006a6c <MX_GPIO_Init+0x26c>)
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	60bb      	str	r3, [r7, #8]
 80068a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80068a2:	2300      	movs	r3, #0
 80068a4:	607b      	str	r3, [r7, #4]
 80068a6:	4b71      	ldr	r3, [pc, #452]	; (8006a6c <MX_GPIO_Init+0x26c>)
 80068a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068aa:	4a70      	ldr	r2, [pc, #448]	; (8006a6c <MX_GPIO_Init+0x26c>)
 80068ac:	f043 0308 	orr.w	r3, r3, #8
 80068b0:	6313      	str	r3, [r2, #48]	; 0x30
 80068b2:	4b6e      	ldr	r3, [pc, #440]	; (8006a6c <MX_GPIO_Init+0x26c>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	607b      	str	r3, [r7, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80068be:	2200      	movs	r2, #0
 80068c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068c4:	486a      	ldr	r0, [pc, #424]	; (8006a70 <MX_GPIO_Init+0x270>)
 80068c6:	f004 f91b 	bl	800ab00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80068ca:	2200      	movs	r2, #0
 80068cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068d0:	4868      	ldr	r0, [pc, #416]	; (8006a74 <MX_GPIO_Init+0x274>)
 80068d2:	f004 f915 	bl	800ab00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80068d6:	2200      	movs	r2, #0
 80068d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068dc:	4866      	ldr	r0, [pc, #408]	; (8006a78 <MX_GPIO_Init+0x278>)
 80068de:	f004 f90f 	bl	800ab00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80068e2:	2200      	movs	r2, #0
 80068e4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80068e8:	4864      	ldr	r0, [pc, #400]	; (8006a7c <MX_GPIO_Init+0x27c>)
 80068ea:	f004 f909 	bl	800ab00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068ee:	2304      	movs	r3, #4
 80068f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068f2:	2300      	movs	r3, #0
 80068f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068fa:	f107 031c 	add.w	r3, r7, #28
 80068fe:	4619      	mov	r1, r3
 8006900:	485b      	ldr	r0, [pc, #364]	; (8006a70 <MX_GPIO_Init+0x270>)
 8006902:	f003 ff3b 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006906:	230f      	movs	r3, #15
 8006908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800690a:	2303      	movs	r3, #3
 800690c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006912:	f107 031c 	add.w	r3, r7, #28
 8006916:	4619      	mov	r1, r3
 8006918:	4859      	ldr	r0, [pc, #356]	; (8006a80 <MX_GPIO_Init+0x280>)
 800691a:	f003 ff2f 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800691e:	23e1      	movs	r3, #225	; 0xe1
 8006920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006922:	2303      	movs	r3, #3
 8006924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006926:	2300      	movs	r3, #0
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800692a:	f107 031c 	add.w	r3, r7, #28
 800692e:	4619      	mov	r1, r3
 8006930:	4852      	ldr	r0, [pc, #328]	; (8006a7c <MX_GPIO_Init+0x27c>)
 8006932:	f003 ff23 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006936:	2303      	movs	r3, #3
 8006938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800693a:	2303      	movs	r3, #3
 800693c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693e:	2300      	movs	r3, #0
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006942:	f107 031c 	add.w	r3, r7, #28
 8006946:	4619      	mov	r1, r3
 8006948:	484a      	ldr	r0, [pc, #296]	; (8006a74 <MX_GPIO_Init+0x274>)
 800694a:	f003 ff17 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800694e:	2304      	movs	r3, #4
 8006950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006952:	2300      	movs	r3, #0
 8006954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006956:	2301      	movs	r3, #1
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800695a:	f107 031c 	add.w	r3, r7, #28
 800695e:	4619      	mov	r1, r3
 8006960:	4844      	ldr	r0, [pc, #272]	; (8006a74 <MX_GPIO_Init+0x274>)
 8006962:	f003 ff0b 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006966:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800696a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800696c:	2300      	movs	r3, #0
 800696e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006970:	2301      	movs	r3, #1
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006974:	f107 031c 	add.w	r3, r7, #28
 8006978:	4619      	mov	r1, r3
 800697a:	483d      	ldr	r0, [pc, #244]	; (8006a70 <MX_GPIO_Init+0x270>)
 800697c:	f003 fefe 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006986:	2301      	movs	r3, #1
 8006988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698a:	2300      	movs	r3, #0
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800698e:	2300      	movs	r3, #0
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006992:	f107 031c 	add.w	r3, r7, #28
 8006996:	4619      	mov	r1, r3
 8006998:	4835      	ldr	r0, [pc, #212]	; (8006a70 <MX_GPIO_Init+0x270>)
 800699a:	f003 feef 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800699e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069a4:	2301      	movs	r3, #1
 80069a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ac:	2300      	movs	r3, #0
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069b0:	f107 031c 	add.w	r3, r7, #28
 80069b4:	4619      	mov	r1, r3
 80069b6:	482f      	ldr	r0, [pc, #188]	; (8006a74 <MX_GPIO_Init+0x274>)
 80069b8:	f003 fee0 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80069bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069c2:	2300      	movs	r3, #0
 80069c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069ca:	f107 031c 	add.w	r3, r7, #28
 80069ce:	4619      	mov	r1, r3
 80069d0:	4829      	ldr	r0, [pc, #164]	; (8006a78 <MX_GPIO_Init+0x278>)
 80069d2:	f003 fed3 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069dc:	2301      	movs	r3, #1
 80069de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e4:	2300      	movs	r3, #0
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069e8:	f107 031c 	add.w	r3, r7, #28
 80069ec:	4619      	mov	r1, r3
 80069ee:	4822      	ldr	r0, [pc, #136]	; (8006a78 <MX_GPIO_Init+0x278>)
 80069f0:	f003 fec4 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80069f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069fa:	2301      	movs	r3, #1
 80069fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069fe:	2301      	movs	r3, #1
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a02:	2300      	movs	r3, #0
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a06:	f107 031c 	add.w	r3, r7, #28
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	481a      	ldr	r0, [pc, #104]	; (8006a78 <MX_GPIO_Init+0x278>)
 8006a0e:	f003 feb5 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006a12:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006a16:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a20:	2300      	movs	r3, #0
 8006a22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a24:	f107 031c 	add.w	r3, r7, #28
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4814      	ldr	r0, [pc, #80]	; (8006a7c <MX_GPIO_Init+0x27c>)
 8006a2c:	f003 fea6 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a36:	2300      	movs	r3, #0
 8006a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a3e:	f107 031c 	add.w	r3, r7, #28
 8006a42:	4619      	mov	r1, r3
 8006a44:	480d      	ldr	r0, [pc, #52]	; (8006a7c <MX_GPIO_Init+0x27c>)
 8006a46:	f003 fe99 	bl	800a77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006a4a:	239b      	movs	r3, #155	; 0x9b
 8006a4c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a52:	2301      	movs	r3, #1
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a56:	f107 031c 	add.w	r3, r7, #28
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4806      	ldr	r0, [pc, #24]	; (8006a78 <MX_GPIO_Init+0x278>)
 8006a5e:	f003 fe8d 	bl	800a77c <HAL_GPIO_Init>

}
 8006a62:	bf00      	nop
 8006a64:	3730      	adds	r7, #48	; 0x30
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	40021000 	.word	0x40021000
 8006a74:	40020400 	.word	0x40020400
 8006a78:	40020c00 	.word	0x40020c00
 8006a7c:	40020000 	.word	0x40020000
 8006a80:	40020800 	.word	0x40020800

08006a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a88:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a8a:	e7fe      	b.n	8006a8a <Error_Handler+0x6>

08006a8c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006a90:	bf00      	nop
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
	...

08006a9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	607b      	str	r3, [r7, #4]
 8006aa6:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <HAL_MspInit+0x4c>)
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	4a0f      	ldr	r2, [pc, #60]	; (8006ae8 <HAL_MspInit+0x4c>)
 8006aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <HAL_MspInit+0x4c>)
 8006ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aba:	607b      	str	r3, [r7, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006abe:	2300      	movs	r3, #0
 8006ac0:	603b      	str	r3, [r7, #0]
 8006ac2:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <HAL_MspInit+0x4c>)
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <HAL_MspInit+0x4c>)
 8006ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006acc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ace:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <HAL_MspInit+0x4c>)
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40023800 	.word	0x40023800

08006aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	; 0x30
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006af4:	f107 031c 	add.w	r3, r7, #28
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	605a      	str	r2, [r3, #4]
 8006afe:	609a      	str	r2, [r3, #8]
 8006b00:	60da      	str	r2, [r3, #12]
 8006b02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a4a      	ldr	r2, [pc, #296]	; (8006c34 <HAL_ADC_MspInit+0x148>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	f040 808e 	bne.w	8006c2c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006b10:	2300      	movs	r3, #0
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	4b48      	ldr	r3, [pc, #288]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b18:	4a47      	ldr	r2, [pc, #284]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b1e:	6453      	str	r3, [r2, #68]	; 0x44
 8006b20:	4b45      	ldr	r3, [pc, #276]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	4b41      	ldr	r3, [pc, #260]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b34:	4a40      	ldr	r2, [pc, #256]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b36:	f043 0304 	orr.w	r3, r3, #4
 8006b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b3c:	4b3e      	ldr	r3, [pc, #248]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b48:	2300      	movs	r3, #0
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	4b3a      	ldr	r3, [pc, #232]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	4a39      	ldr	r2, [pc, #228]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	6313      	str	r3, [r2, #48]	; 0x30
 8006b58:	4b37      	ldr	r3, [pc, #220]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
 8006b68:	4b33      	ldr	r3, [pc, #204]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	4a32      	ldr	r2, [pc, #200]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b6e:	f043 0302 	orr.w	r3, r3, #2
 8006b72:	6313      	str	r3, [r2, #48]	; 0x30
 8006b74:	4b30      	ldr	r3, [pc, #192]	; (8006c38 <HAL_ADC_MspInit+0x14c>)
 8006b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	60fb      	str	r3, [r7, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006b80:	230f      	movs	r3, #15
 8006b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b84:	2303      	movs	r3, #3
 8006b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b8c:	f107 031c 	add.w	r3, r7, #28
 8006b90:	4619      	mov	r1, r3
 8006b92:	482a      	ldr	r0, [pc, #168]	; (8006c3c <HAL_ADC_MspInit+0x150>)
 8006b94:	f003 fdf2 	bl	800a77c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006b98:	23ff      	movs	r3, #255	; 0xff
 8006b9a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ba4:	f107 031c 	add.w	r3, r7, #28
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4825      	ldr	r0, [pc, #148]	; (8006c40 <HAL_ADC_MspInit+0x154>)
 8006bac:	f003 fde6 	bl	800a77c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bbc:	f107 031c 	add.w	r3, r7, #28
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4820      	ldr	r0, [pc, #128]	; (8006c44 <HAL_ADC_MspInit+0x158>)
 8006bc4:	f003 fdda 	bl	800a77c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006bc8:	4b1f      	ldr	r3, [pc, #124]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006bca:	4a20      	ldr	r2, [pc, #128]	; (8006c4c <HAL_ADC_MspInit+0x160>)
 8006bcc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006bce:	4b1e      	ldr	r3, [pc, #120]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bd4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bd6:	4b1c      	ldr	r3, [pc, #112]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bdc:	4b1a      	ldr	r3, [pc, #104]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006be2:	4b19      	ldr	r3, [pc, #100]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006be8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006bea:	4b17      	ldr	r3, [pc, #92]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bf0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006bf2:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006bf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bf8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006bfa:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c00:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006c02:	4b11      	ldr	r3, [pc, #68]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006c04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c08:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006c10:	480d      	ldr	r0, [pc, #52]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006c12:	f003 fa17 	bl	800a044 <HAL_DMA_Init>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006c1c:	f7ff ff32 	bl	8006a84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38
 8006c26:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <HAL_ADC_MspInit+0x15c>)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006c2c:	bf00      	nop
 8006c2e:	3730      	adds	r7, #48	; 0x30
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	40012100 	.word	0x40012100
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	40020800 	.word	0x40020800
 8006c40:	40020000 	.word	0x40020000
 8006c44:	40020400 	.word	0x40020400
 8006c48:	20043b24 	.word	0x20043b24
 8006c4c:	40026440 	.word	0x40026440

08006c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08c      	sub	sp, #48	; 0x30
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c58:	f107 031c 	add.w	r3, r7, #28
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	605a      	str	r2, [r3, #4]
 8006c62:	609a      	str	r2, [r3, #8]
 8006c64:	60da      	str	r2, [r3, #12]
 8006c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a32      	ldr	r2, [pc, #200]	; (8006d38 <HAL_I2C_MspInit+0xe8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d12c      	bne.n	8006ccc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c72:	2300      	movs	r3, #0
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	4b31      	ldr	r3, [pc, #196]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	4a30      	ldr	r2, [pc, #192]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006c7c:	f043 0302 	orr.w	r3, r3, #2
 8006c80:	6313      	str	r3, [r2, #48]	; 0x30
 8006c82:	4b2e      	ldr	r3, [pc, #184]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c8e:	23c0      	movs	r3, #192	; 0xc0
 8006c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c92:	2312      	movs	r3, #18
 8006c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c96:	2301      	movs	r3, #1
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c9e:	2304      	movs	r3, #4
 8006ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ca2:	f107 031c 	add.w	r3, r7, #28
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4825      	ldr	r0, [pc, #148]	; (8006d40 <HAL_I2C_MspInit+0xf0>)
 8006caa:	f003 fd67 	bl	800a77c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	4b22      	ldr	r3, [pc, #136]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	4a21      	ldr	r2, [pc, #132]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006cb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cbe:	4b1f      	ldr	r3, [pc, #124]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006cca:	e031      	b.n	8006d30 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	; (8006d44 <HAL_I2C_MspInit+0xf4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d12c      	bne.n	8006d30 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	613b      	str	r3, [r7, #16]
 8006cda:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	4a17      	ldr	r2, [pc, #92]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006ce0:	f043 0302 	orr.w	r3, r3, #2
 8006ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce6:	4b15      	ldr	r3, [pc, #84]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006cf2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006cf8:	2312      	movs	r3, #18
 8006cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d00:	2303      	movs	r3, #3
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006d04:	2304      	movs	r3, #4
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d08:	f107 031c 	add.w	r3, r7, #28
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	480c      	ldr	r0, [pc, #48]	; (8006d40 <HAL_I2C_MspInit+0xf0>)
 8006d10:	f003 fd34 	bl	800a77c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1c:	4a07      	ldr	r2, [pc, #28]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006d1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d22:	6413      	str	r3, [r2, #64]	; 0x40
 8006d24:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <HAL_I2C_MspInit+0xec>)
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	bf00      	nop
 8006d32:	3730      	adds	r7, #48	; 0x30
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40005400 	.word	0x40005400
 8006d3c:	40023800 	.word	0x40023800
 8006d40:	40020400 	.word	0x40020400
 8006d44:	40005800 	.word	0x40005800

08006d48 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08a      	sub	sp, #40	; 0x28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d50:	f107 0314 	add.w	r3, r7, #20
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	605a      	str	r2, [r3, #4]
 8006d5a:	609a      	str	r2, [r3, #8]
 8006d5c:	60da      	str	r2, [r3, #12]
 8006d5e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a69      	ldr	r2, [pc, #420]	; (8006f0c <HAL_SD_MspInit+0x1c4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	f040 80cb 	bne.w	8006f02 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	4b67      	ldr	r3, [pc, #412]	; (8006f10 <HAL_SD_MspInit+0x1c8>)
 8006d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d74:	4a66      	ldr	r2, [pc, #408]	; (8006f10 <HAL_SD_MspInit+0x1c8>)
 8006d76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d7a:	6453      	str	r3, [r2, #68]	; 0x44
 8006d7c:	4b64      	ldr	r3, [pc, #400]	; (8006f10 <HAL_SD_MspInit+0x1c8>)
 8006d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	4b60      	ldr	r3, [pc, #384]	; (8006f10 <HAL_SD_MspInit+0x1c8>)
 8006d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d90:	4a5f      	ldr	r2, [pc, #380]	; (8006f10 <HAL_SD_MspInit+0x1c8>)
 8006d92:	f043 0304 	orr.w	r3, r3, #4
 8006d96:	6313      	str	r3, [r2, #48]	; 0x30
 8006d98:	4b5d      	ldr	r3, [pc, #372]	; (8006f10 <HAL_SD_MspInit+0x1c8>)
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006da4:	2300      	movs	r3, #0
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	4b59      	ldr	r3, [pc, #356]	; (8006f10 <HAL_SD_MspInit+0x1c8>)
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	4a58      	ldr	r2, [pc, #352]	; (8006f10 <HAL_SD_MspInit+0x1c8>)
 8006dae:	f043 0308 	orr.w	r3, r3, #8
 8006db2:	6313      	str	r3, [r2, #48]	; 0x30
 8006db4:	4b56      	ldr	r3, [pc, #344]	; (8006f10 <HAL_SD_MspInit+0x1c8>)
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006dc0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006dc4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dd6:	f107 0314 	add.w	r3, r7, #20
 8006dda:	4619      	mov	r1, r3
 8006ddc:	484d      	ldr	r0, [pc, #308]	; (8006f14 <HAL_SD_MspInit+0x1cc>)
 8006dde:	f003 fccd 	bl	800a77c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006de2:	2304      	movs	r3, #4
 8006de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de6:	2302      	movs	r3, #2
 8006de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dee:	2303      	movs	r3, #3
 8006df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006df2:	230c      	movs	r3, #12
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006df6:	f107 0314 	add.w	r3, r7, #20
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4846      	ldr	r0, [pc, #280]	; (8006f18 <HAL_SD_MspInit+0x1d0>)
 8006dfe:	f003 fcbd 	bl	800a77c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006e02:	4b46      	ldr	r3, [pc, #280]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e04:	4a46      	ldr	r2, [pc, #280]	; (8006f20 <HAL_SD_MspInit+0x1d8>)
 8006e06:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006e08:	4b44      	ldr	r3, [pc, #272]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e0e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e10:	4b42      	ldr	r3, [pc, #264]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e16:	4b41      	ldr	r3, [pc, #260]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e1c:	4b3f      	ldr	r3, [pc, #252]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e22:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e24:	4b3d      	ldr	r3, [pc, #244]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e2a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e2c:	4b3b      	ldr	r3, [pc, #236]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e32:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006e34:	4b39      	ldr	r3, [pc, #228]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e36:	2220      	movs	r2, #32
 8006e38:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e3a:	4b38      	ldr	r3, [pc, #224]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e40:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e42:	4b36      	ldr	r3, [pc, #216]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e44:	2204      	movs	r2, #4
 8006e46:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e48:	4b34      	ldr	r3, [pc, #208]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006e4e:	4b33      	ldr	r3, [pc, #204]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006e56:	4b31      	ldr	r3, [pc, #196]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e5c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006e5e:	482f      	ldr	r0, [pc, #188]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e60:	f003 f8f0 	bl	800a044 <HAL_DMA_Init>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006e6a:	f7ff fe0b 	bl	8006a84 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a2a      	ldr	r2, [pc, #168]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e72:	641a      	str	r2, [r3, #64]	; 0x40
 8006e74:	4a29      	ldr	r2, [pc, #164]	; (8006f1c <HAL_SD_MspInit+0x1d4>)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006e7a:	4b2a      	ldr	r3, [pc, #168]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006e7c:	4a2a      	ldr	r2, [pc, #168]	; (8006f28 <HAL_SD_MspInit+0x1e0>)
 8006e7e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006e80:	4b28      	ldr	r3, [pc, #160]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e86:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e88:	4b26      	ldr	r3, [pc, #152]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006e8a:	2240      	movs	r2, #64	; 0x40
 8006e8c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e8e:	4b25      	ldr	r3, [pc, #148]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e94:	4b23      	ldr	r3, [pc, #140]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e9a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e9c:	4b21      	ldr	r3, [pc, #132]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006e9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ea2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ea4:	4b1f      	ldr	r3, [pc, #124]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006ea6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006eaa:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006eac:	4b1d      	ldr	r3, [pc, #116]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006eae:	2220      	movs	r2, #32
 8006eb0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006eb2:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006eb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006eb8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006eba:	4b1a      	ldr	r3, [pc, #104]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006ebc:	2204      	movs	r2, #4
 8006ebe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006ec0:	4b18      	ldr	r3, [pc, #96]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006ec6:	4b17      	ldr	r3, [pc, #92]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006ec8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006ecc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006ece:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006ed0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006ed4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006ed6:	4813      	ldr	r0, [pc, #76]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006ed8:	f003 f8b4 	bl	800a044 <HAL_DMA_Init>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006ee2:	f7ff fdcf 	bl	8006a84 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a0e      	ldr	r2, [pc, #56]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006eea:	63da      	str	r2, [r3, #60]	; 0x3c
 8006eec:	4a0d      	ldr	r2, [pc, #52]	; (8006f24 <HAL_SD_MspInit+0x1dc>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	2031      	movs	r0, #49	; 0x31
 8006ef8:	f003 f86d 	bl	8009fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006efc:	2031      	movs	r0, #49	; 0x31
 8006efe:	f003 f886 	bl	800a00e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006f02:	bf00      	nop
 8006f04:	3728      	adds	r7, #40	; 0x28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40023800 	.word	0x40023800
 8006f14:	40020800 	.word	0x40020800
 8006f18:	40020c00 	.word	0x40020c00
 8006f1c:	2004364c 	.word	0x2004364c
 8006f20:	40026458 	.word	0x40026458
 8006f24:	20043980 	.word	0x20043980
 8006f28:	400264a0 	.word	0x400264a0

08006f2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08a      	sub	sp, #40	; 0x28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f34:	f107 0314 	add.w	r3, r7, #20
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	605a      	str	r2, [r3, #4]
 8006f3e:	609a      	str	r2, [r3, #8]
 8006f40:	60da      	str	r2, [r3, #12]
 8006f42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <HAL_SPI_MspInit+0x84>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d12c      	bne.n	8006fa8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f4e:	2300      	movs	r3, #0
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	4b18      	ldr	r3, [pc, #96]	; (8006fb4 <HAL_SPI_MspInit+0x88>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	4a17      	ldr	r2, [pc, #92]	; (8006fb4 <HAL_SPI_MspInit+0x88>)
 8006f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f5e:	4b15      	ldr	r3, [pc, #84]	; (8006fb4 <HAL_SPI_MspInit+0x88>)
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
 8006f6e:	4b11      	ldr	r3, [pc, #68]	; (8006fb4 <HAL_SPI_MspInit+0x88>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	4a10      	ldr	r2, [pc, #64]	; (8006fb4 <HAL_SPI_MspInit+0x88>)
 8006f74:	f043 0302 	orr.w	r3, r3, #2
 8006f78:	6313      	str	r3, [r2, #48]	; 0x30
 8006f7a:	4b0e      	ldr	r3, [pc, #56]	; (8006fb4 <HAL_SPI_MspInit+0x88>)
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006f86:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f94:	2303      	movs	r3, #3
 8006f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006f98:	2305      	movs	r3, #5
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f9c:	f107 0314 	add.w	r3, r7, #20
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4805      	ldr	r0, [pc, #20]	; (8006fb8 <HAL_SPI_MspInit+0x8c>)
 8006fa4:	f003 fbea 	bl	800a77c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006fa8:	bf00      	nop
 8006faa:	3728      	adds	r7, #40	; 0x28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40003800 	.word	0x40003800
 8006fb4:	40023800 	.word	0x40023800
 8006fb8:	40020400 	.word	0x40020400

08006fbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08c      	sub	sp, #48	; 0x30
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fc4:	f107 031c 	add.w	r3, r7, #28
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	605a      	str	r2, [r3, #4]
 8006fce:	609a      	str	r2, [r3, #8]
 8006fd0:	60da      	str	r2, [r3, #12]
 8006fd2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a2d      	ldr	r2, [pc, #180]	; (8007090 <HAL_TIM_PWM_MspInit+0xd4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d12d      	bne.n	800703a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	4b2c      	ldr	r3, [pc, #176]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe6:	4a2b      	ldr	r2, [pc, #172]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	6453      	str	r3, [r2, #68]	; 0x44
 8006fee:	4b29      	ldr	r3, [pc, #164]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	4b25      	ldr	r3, [pc, #148]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	4a24      	ldr	r2, [pc, #144]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 8007004:	f043 0310 	orr.w	r3, r3, #16
 8007008:	6313      	str	r3, [r2, #48]	; 0x30
 800700a:	4b22      	ldr	r3, [pc, #136]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	f003 0310 	and.w	r3, r3, #16
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007016:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800701a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800701c:	2302      	movs	r3, #2
 800701e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007020:	2300      	movs	r3, #0
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007024:	2300      	movs	r3, #0
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007028:	2301      	movs	r3, #1
 800702a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800702c:	f107 031c 	add.w	r3, r7, #28
 8007030:	4619      	mov	r1, r3
 8007032:	4819      	ldr	r0, [pc, #100]	; (8007098 <HAL_TIM_PWM_MspInit+0xdc>)
 8007034:	f003 fba2 	bl	800a77c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007038:	e026      	b.n	8007088 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a17      	ldr	r2, [pc, #92]	; (800709c <HAL_TIM_PWM_MspInit+0xe0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d10e      	bne.n	8007062 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007044:	2300      	movs	r3, #0
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	4b12      	ldr	r3, [pc, #72]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	4a11      	ldr	r2, [pc, #68]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 800704e:	f043 0302 	orr.w	r3, r3, #2
 8007052:	6413      	str	r3, [r2, #64]	; 0x40
 8007054:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	613b      	str	r3, [r7, #16]
 800705e:	693b      	ldr	r3, [r7, #16]
}
 8007060:	e012      	b.n	8007088 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a0e      	ldr	r2, [pc, #56]	; (80070a0 <HAL_TIM_PWM_MspInit+0xe4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d10d      	bne.n	8007088 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	4b08      	ldr	r3, [pc, #32]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 8007072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007074:	4a07      	ldr	r2, [pc, #28]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 8007076:	f043 0304 	orr.w	r3, r3, #4
 800707a:	6413      	str	r3, [r2, #64]	; 0x40
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <HAL_TIM_PWM_MspInit+0xd8>)
 800707e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	68fb      	ldr	r3, [r7, #12]
}
 8007088:	bf00      	nop
 800708a:	3730      	adds	r7, #48	; 0x30
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40010000 	.word	0x40010000
 8007094:	40023800 	.word	0x40023800
 8007098:	40021000 	.word	0x40021000
 800709c:	40000400 	.word	0x40000400
 80070a0:	40000800 	.word	0x40000800

080070a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a3e      	ldr	r2, [pc, #248]	; (80071ac <HAL_TIM_Base_MspInit+0x108>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d116      	bne.n	80070e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80070b6:	2300      	movs	r3, #0
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	4b3d      	ldr	r3, [pc, #244]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	4a3c      	ldr	r2, [pc, #240]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 80070c0:	f043 0310 	orr.w	r3, r3, #16
 80070c4:	6413      	str	r3, [r2, #64]	; 0x40
 80070c6:	4b3a      	ldr	r3, [pc, #232]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	f003 0310 	and.w	r3, r3, #16
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80070d2:	2200      	movs	r2, #0
 80070d4:	2101      	movs	r1, #1
 80070d6:	2036      	movs	r0, #54	; 0x36
 80070d8:	f002 ff7d 	bl	8009fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80070dc:	2036      	movs	r0, #54	; 0x36
 80070de:	f002 ff96 	bl	800a00e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80070e2:	e05e      	b.n	80071a2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a32      	ldr	r2, [pc, #200]	; (80071b4 <HAL_TIM_Base_MspInit+0x110>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d116      	bne.n	800711c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80070ee:	2300      	movs	r3, #0
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	4b2f      	ldr	r3, [pc, #188]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	4a2e      	ldr	r2, [pc, #184]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 80070f8:	f043 0320 	orr.w	r3, r3, #32
 80070fc:	6413      	str	r3, [r2, #64]	; 0x40
 80070fe:	4b2c      	ldr	r3, [pc, #176]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	f003 0320 	and.w	r3, r3, #32
 8007106:	61bb      	str	r3, [r7, #24]
 8007108:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800710a:	2200      	movs	r2, #0
 800710c:	2100      	movs	r1, #0
 800710e:	2037      	movs	r0, #55	; 0x37
 8007110:	f002 ff61 	bl	8009fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007114:	2037      	movs	r0, #55	; 0x37
 8007116:	f002 ff7a 	bl	800a00e <HAL_NVIC_EnableIRQ>
}
 800711a:	e042      	b.n	80071a2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a25      	ldr	r2, [pc, #148]	; (80071b8 <HAL_TIM_Base_MspInit+0x114>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d10e      	bne.n	8007144 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	4b21      	ldr	r3, [pc, #132]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 800712c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712e:	4a20      	ldr	r2, [pc, #128]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 8007130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007134:	6453      	str	r3, [r2, #68]	; 0x44
 8007136:	4b1e      	ldr	r3, [pc, #120]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 8007138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	697b      	ldr	r3, [r7, #20]
}
 8007142:	e02e      	b.n	80071a2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <HAL_TIM_Base_MspInit+0x118>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d10e      	bne.n	800716c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800714e:	2300      	movs	r3, #0
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	4b17      	ldr	r3, [pc, #92]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	4a16      	ldr	r2, [pc, #88]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 8007158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800715c:	6453      	str	r3, [r2, #68]	; 0x44
 800715e:	4b14      	ldr	r3, [pc, #80]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 8007160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	693b      	ldr	r3, [r7, #16]
}
 800716a:	e01a      	b.n	80071a2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a13      	ldr	r2, [pc, #76]	; (80071c0 <HAL_TIM_Base_MspInit+0x11c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d115      	bne.n	80071a2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	4b0d      	ldr	r3, [pc, #52]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	4a0c      	ldr	r2, [pc, #48]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 8007180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007184:	6413      	str	r3, [r2, #64]	; 0x40
 8007186:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <HAL_TIM_Base_MspInit+0x10c>)
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007192:	2200      	movs	r2, #0
 8007194:	2100      	movs	r1, #0
 8007196:	202c      	movs	r0, #44	; 0x2c
 8007198:	f002 ff1d 	bl	8009fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800719c:	202c      	movs	r0, #44	; 0x2c
 800719e:	f002 ff36 	bl	800a00e <HAL_NVIC_EnableIRQ>
}
 80071a2:	bf00      	nop
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40001000 	.word	0x40001000
 80071b0:	40023800 	.word	0x40023800
 80071b4:	40001400 	.word	0x40001400
 80071b8:	40014400 	.word	0x40014400
 80071bc:	40014800 	.word	0x40014800
 80071c0:	40001c00 	.word	0x40001c00

080071c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08a      	sub	sp, #40	; 0x28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071cc:	f107 0314 	add.w	r3, r7, #20
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	605a      	str	r2, [r3, #4]
 80071d6:	609a      	str	r2, [r3, #8]
 80071d8:	60da      	str	r2, [r3, #12]
 80071da:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1d      	ldr	r2, [pc, #116]	; (8007258 <HAL_TIM_Encoder_MspInit+0x94>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d133      	bne.n	800724e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80071e6:	2300      	movs	r3, #0
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	4b1c      	ldr	r3, [pc, #112]	; (800725c <HAL_TIM_Encoder_MspInit+0x98>)
 80071ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ee:	4a1b      	ldr	r2, [pc, #108]	; (800725c <HAL_TIM_Encoder_MspInit+0x98>)
 80071f0:	f043 0302 	orr.w	r3, r3, #2
 80071f4:	6453      	str	r3, [r2, #68]	; 0x44
 80071f6:	4b19      	ldr	r3, [pc, #100]	; (800725c <HAL_TIM_Encoder_MspInit+0x98>)
 80071f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <HAL_TIM_Encoder_MspInit+0x98>)
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	4a14      	ldr	r2, [pc, #80]	; (800725c <HAL_TIM_Encoder_MspInit+0x98>)
 800720c:	f043 0304 	orr.w	r3, r3, #4
 8007210:	6313      	str	r3, [r2, #48]	; 0x30
 8007212:	4b12      	ldr	r3, [pc, #72]	; (800725c <HAL_TIM_Encoder_MspInit+0x98>)
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800721e:	23c0      	movs	r3, #192	; 0xc0
 8007220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007222:	2302      	movs	r3, #2
 8007224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800722a:	2300      	movs	r3, #0
 800722c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800722e:	2303      	movs	r3, #3
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007232:	f107 0314 	add.w	r3, r7, #20
 8007236:	4619      	mov	r1, r3
 8007238:	4809      	ldr	r0, [pc, #36]	; (8007260 <HAL_TIM_Encoder_MspInit+0x9c>)
 800723a:	f003 fa9f 	bl	800a77c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800723e:	2200      	movs	r2, #0
 8007240:	2100      	movs	r1, #0
 8007242:	202c      	movs	r0, #44	; 0x2c
 8007244:	f002 fec7 	bl	8009fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007248:	202c      	movs	r0, #44	; 0x2c
 800724a:	f002 fee0 	bl	800a00e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800724e:	bf00      	nop
 8007250:	3728      	adds	r7, #40	; 0x28
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40010400 	.word	0x40010400
 800725c:	40023800 	.word	0x40023800
 8007260:	40020800 	.word	0x40020800

08007264 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08c      	sub	sp, #48	; 0x30
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800726c:	f107 031c 	add.w	r3, r7, #28
 8007270:	2200      	movs	r2, #0
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	605a      	str	r2, [r3, #4]
 8007276:	609a      	str	r2, [r3, #8]
 8007278:	60da      	str	r2, [r3, #12]
 800727a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a5c      	ldr	r2, [pc, #368]	; (80073f4 <HAL_TIM_MspPostInit+0x190>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d11f      	bne.n	80072c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007286:	2300      	movs	r3, #0
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	4b5b      	ldr	r3, [pc, #364]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	4a5a      	ldr	r2, [pc, #360]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 8007290:	f043 0310 	orr.w	r3, r3, #16
 8007294:	6313      	str	r3, [r2, #48]	; 0x30
 8007296:	4b58      	ldr	r3, [pc, #352]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	61bb      	str	r3, [r7, #24]
 80072a0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80072a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072a8:	2302      	movs	r3, #2
 80072aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ac:	2300      	movs	r3, #0
 80072ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072b0:	2300      	movs	r3, #0
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80072b4:	2301      	movs	r3, #1
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80072b8:	f107 031c 	add.w	r3, r7, #28
 80072bc:	4619      	mov	r1, r3
 80072be:	484f      	ldr	r0, [pc, #316]	; (80073fc <HAL_TIM_MspPostInit+0x198>)
 80072c0:	f003 fa5c 	bl	800a77c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80072c4:	e091      	b.n	80073ea <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a4d      	ldr	r2, [pc, #308]	; (8007400 <HAL_TIM_MspPostInit+0x19c>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d11e      	bne.n	800730e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072d0:	2300      	movs	r3, #0
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	4b48      	ldr	r3, [pc, #288]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	4a47      	ldr	r2, [pc, #284]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 80072da:	f043 0302 	orr.w	r3, r3, #2
 80072de:	6313      	str	r3, [r2, #48]	; 0x30
 80072e0:	4b45      	ldr	r3, [pc, #276]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 80072e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80072ec:	2330      	movs	r3, #48	; 0x30
 80072ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072f0:	2302      	movs	r3, #2
 80072f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072f8:	2300      	movs	r3, #0
 80072fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80072fc:	2302      	movs	r3, #2
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007300:	f107 031c 	add.w	r3, r7, #28
 8007304:	4619      	mov	r1, r3
 8007306:	483f      	ldr	r0, [pc, #252]	; (8007404 <HAL_TIM_MspPostInit+0x1a0>)
 8007308:	f003 fa38 	bl	800a77c <HAL_GPIO_Init>
}
 800730c:	e06d      	b.n	80073ea <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a3d      	ldr	r2, [pc, #244]	; (8007408 <HAL_TIM_MspPostInit+0x1a4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d11f      	bne.n	8007358 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007318:	2300      	movs	r3, #0
 800731a:	613b      	str	r3, [r7, #16]
 800731c:	4b36      	ldr	r3, [pc, #216]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 800731e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007320:	4a35      	ldr	r2, [pc, #212]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 8007322:	f043 0308 	orr.w	r3, r3, #8
 8007326:	6313      	str	r3, [r2, #48]	; 0x30
 8007328:	4b33      	ldr	r3, [pc, #204]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 800732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	613b      	str	r3, [r7, #16]
 8007332:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007334:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800733a:	2302      	movs	r3, #2
 800733c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800733e:	2300      	movs	r3, #0
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007342:	2300      	movs	r3, #0
 8007344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007346:	2302      	movs	r3, #2
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800734a:	f107 031c 	add.w	r3, r7, #28
 800734e:	4619      	mov	r1, r3
 8007350:	482e      	ldr	r0, [pc, #184]	; (800740c <HAL_TIM_MspPostInit+0x1a8>)
 8007352:	f003 fa13 	bl	800a77c <HAL_GPIO_Init>
}
 8007356:	e048      	b.n	80073ea <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a2c      	ldr	r2, [pc, #176]	; (8007410 <HAL_TIM_MspPostInit+0x1ac>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d11f      	bne.n	80073a2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	4b24      	ldr	r3, [pc, #144]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	4a23      	ldr	r2, [pc, #140]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 800736c:	f043 0302 	orr.w	r3, r3, #2
 8007370:	6313      	str	r3, [r2, #48]	; 0x30
 8007372:	4b21      	ldr	r3, [pc, #132]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800737e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007384:	2302      	movs	r3, #2
 8007386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007388:	2300      	movs	r3, #0
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800738c:	2300      	movs	r3, #0
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007390:	2303      	movs	r3, #3
 8007392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007394:	f107 031c 	add.w	r3, r7, #28
 8007398:	4619      	mov	r1, r3
 800739a:	481a      	ldr	r0, [pc, #104]	; (8007404 <HAL_TIM_MspPostInit+0x1a0>)
 800739c:	f003 f9ee 	bl	800a77c <HAL_GPIO_Init>
}
 80073a0:	e023      	b.n	80073ea <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1b      	ldr	r2, [pc, #108]	; (8007414 <HAL_TIM_MspPostInit+0x1b0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d11e      	bne.n	80073ea <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073ac:	2300      	movs	r3, #0
 80073ae:	60bb      	str	r3, [r7, #8]
 80073b0:	4b11      	ldr	r3, [pc, #68]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 80073b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b4:	4a10      	ldr	r2, [pc, #64]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 80073b6:	f043 0302 	orr.w	r3, r3, #2
 80073ba:	6313      	str	r3, [r2, #48]	; 0x30
 80073bc:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <HAL_TIM_MspPostInit+0x194>)
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80073c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ce:	2302      	movs	r3, #2
 80073d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073d6:	2300      	movs	r3, #0
 80073d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80073da:	2303      	movs	r3, #3
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073de:	f107 031c 	add.w	r3, r7, #28
 80073e2:	4619      	mov	r1, r3
 80073e4:	4807      	ldr	r0, [pc, #28]	; (8007404 <HAL_TIM_MspPostInit+0x1a0>)
 80073e6:	f003 f9c9 	bl	800a77c <HAL_GPIO_Init>
}
 80073ea:	bf00      	nop
 80073ec:	3730      	adds	r7, #48	; 0x30
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	40010000 	.word	0x40010000
 80073f8:	40023800 	.word	0x40023800
 80073fc:	40021000 	.word	0x40021000
 8007400:	40000400 	.word	0x40000400
 8007404:	40020400 	.word	0x40020400
 8007408:	40000800 	.word	0x40000800
 800740c:	40020c00 	.word	0x40020c00
 8007410:	40014400 	.word	0x40014400
 8007414:	40014800 	.word	0x40014800

08007418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08a      	sub	sp, #40	; 0x28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007420:	f107 0314 	add.w	r3, r7, #20
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	609a      	str	r2, [r3, #8]
 800742c:	60da      	str	r2, [r3, #12]
 800742e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a19      	ldr	r2, [pc, #100]	; (800749c <HAL_UART_MspInit+0x84>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d12b      	bne.n	8007492 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800743a:	2300      	movs	r3, #0
 800743c:	613b      	str	r3, [r7, #16]
 800743e:	4b18      	ldr	r3, [pc, #96]	; (80074a0 <HAL_UART_MspInit+0x88>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	4a17      	ldr	r2, [pc, #92]	; (80074a0 <HAL_UART_MspInit+0x88>)
 8007444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007448:	6413      	str	r3, [r2, #64]	; 0x40
 800744a:	4b15      	ldr	r3, [pc, #84]	; (80074a0 <HAL_UART_MspInit+0x88>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007452:	613b      	str	r3, [r7, #16]
 8007454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007456:	2300      	movs	r3, #0
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	4b11      	ldr	r3, [pc, #68]	; (80074a0 <HAL_UART_MspInit+0x88>)
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	4a10      	ldr	r2, [pc, #64]	; (80074a0 <HAL_UART_MspInit+0x88>)
 8007460:	f043 0308 	orr.w	r3, r3, #8
 8007464:	6313      	str	r3, [r2, #48]	; 0x30
 8007466:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <HAL_UART_MspInit+0x88>)
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	f003 0308 	and.w	r3, r3, #8
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007472:	2360      	movs	r3, #96	; 0x60
 8007474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007476:	2302      	movs	r3, #2
 8007478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800747e:	2303      	movs	r3, #3
 8007480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007482:	2307      	movs	r3, #7
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007486:	f107 0314 	add.w	r3, r7, #20
 800748a:	4619      	mov	r1, r3
 800748c:	4805      	ldr	r0, [pc, #20]	; (80074a4 <HAL_UART_MspInit+0x8c>)
 800748e:	f003 f975 	bl	800a77c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007492:	bf00      	nop
 8007494:	3728      	adds	r7, #40	; 0x28
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	40004400 	.word	0x40004400
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40020c00 	.word	0x40020c00

080074a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80074ac:	e7fe      	b.n	80074ac <NMI_Handler+0x4>

080074ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074ae:	b480      	push	{r7}
 80074b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074b2:	e7fe      	b.n	80074b2 <HardFault_Handler+0x4>

080074b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074b4:	b480      	push	{r7}
 80074b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074b8:	e7fe      	b.n	80074b8 <MemManage_Handler+0x4>

080074ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80074ba:	b480      	push	{r7}
 80074bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074be:	e7fe      	b.n	80074be <BusFault_Handler+0x4>

080074c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074c4:	e7fe      	b.n	80074c4 <UsageFault_Handler+0x4>

080074c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80074c6:	b480      	push	{r7}
 80074c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074ca:	bf00      	nop
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074d8:	bf00      	nop
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074e2:	b480      	push	{r7}
 80074e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074e6:	bf00      	nop
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074f4:	f002 f84e 	bl	8009594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074f8:	bf00      	nop
 80074fa:	bd80      	pop	{r7, pc}

080074fc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007500:	4803      	ldr	r0, [pc, #12]	; (8007510 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007502:	f007 fb1e 	bl	800eb42 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007506:	4803      	ldr	r0, [pc, #12]	; (8007514 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007508:	f007 fb1b 	bl	800eb42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800750c:	bf00      	nop
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20043704 	.word	0x20043704
 8007514:	20043900 	.word	0x20043900

08007518 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800751c:	4802      	ldr	r0, [pc, #8]	; (8007528 <SDIO_IRQHandler+0x10>)
 800751e:	f005 fbb7 	bl	800cc90 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007522:	bf00      	nop
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20043a60 	.word	0x20043a60

0800752c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007530:	4802      	ldr	r0, [pc, #8]	; (800753c <TIM6_DAC_IRQHandler+0x10>)
 8007532:	f007 fb06 	bl	800eb42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007536:	bf00      	nop
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	200439e0 	.word	0x200439e0

08007540 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007544:	4802      	ldr	r0, [pc, #8]	; (8007550 <TIM7_IRQHandler+0x10>)
 8007546:	f007 fafc 	bl	800eb42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800754a:	bf00      	nop
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20043b84 	.word	0x20043b84

08007554 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007558:	4802      	ldr	r0, [pc, #8]	; (8007564 <DMA2_Stream2_IRQHandler+0x10>)
 800755a:	f002 fe9b 	bl	800a294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800755e:	bf00      	nop
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20043b24 	.word	0x20043b24

08007568 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800756c:	4802      	ldr	r0, [pc, #8]	; (8007578 <DMA2_Stream3_IRQHandler+0x10>)
 800756e:	f002 fe91 	bl	800a294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007572:	bf00      	nop
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	2004364c 	.word	0x2004364c

0800757c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007580:	4802      	ldr	r0, [pc, #8]	; (800758c <DMA2_Stream6_IRQHandler+0x10>)
 8007582:	f002 fe87 	bl	800a294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007586:	bf00      	nop
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20043980 	.word	0x20043980

08007590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007598:	4a14      	ldr	r2, [pc, #80]	; (80075ec <_sbrk+0x5c>)
 800759a:	4b15      	ldr	r3, [pc, #84]	; (80075f0 <_sbrk+0x60>)
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80075a4:	4b13      	ldr	r3, [pc, #76]	; (80075f4 <_sbrk+0x64>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80075ac:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <_sbrk+0x64>)
 80075ae:	4a12      	ldr	r2, [pc, #72]	; (80075f8 <_sbrk+0x68>)
 80075b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075b2:	4b10      	ldr	r3, [pc, #64]	; (80075f4 <_sbrk+0x64>)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4413      	add	r3, r2
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d207      	bcs.n	80075d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075c0:	f00d fd54 	bl	801506c <__errno>
 80075c4:	4602      	mov	r2, r0
 80075c6:	230c      	movs	r3, #12
 80075c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80075ca:	f04f 33ff 	mov.w	r3, #4294967295
 80075ce:	e009      	b.n	80075e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075d0:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <_sbrk+0x64>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80075d6:	4b07      	ldr	r3, [pc, #28]	; (80075f4 <_sbrk+0x64>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	4a05      	ldr	r2, [pc, #20]	; (80075f4 <_sbrk+0x64>)
 80075e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80075e2:	68fb      	ldr	r3, [r7, #12]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20050000 	.word	0x20050000
 80075f0:	00000800 	.word	0x00000800
 80075f4:	200002b8 	.word	0x200002b8
 80075f8:	20045cd8 	.word	0x20045cd8

080075fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007600:	4b08      	ldr	r3, [pc, #32]	; (8007624 <SystemInit+0x28>)
 8007602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007606:	4a07      	ldr	r2, [pc, #28]	; (8007624 <SystemInit+0x28>)
 8007608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800760c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007610:	4b04      	ldr	r3, [pc, #16]	; (8007624 <SystemInit+0x28>)
 8007612:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007616:	609a      	str	r2, [r3, #8]
#endif
}
 8007618:	bf00      	nop
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	e000ed00 	.word	0xe000ed00

08007628 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007628:	b598      	push	{r3, r4, r7, lr}
 800762a:	af00      	add	r7, sp, #0
	lcd_init();
 800762c:	f7f9 fcf4 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007630:	483b      	ldr	r0, [pc, #236]	; (8007720 <cppInit+0xf8>)
 8007632:	f7fd fe53 	bl	80052dc <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007636:	2064      	movs	r0, #100	; 0x64
 8007638:	f001 ffcc 	bl	80095d4 <HAL_Delay>
	power_sensor.updateValues();
 800763c:	4838      	ldr	r0, [pc, #224]	; (8007720 <cppInit+0xf8>)
 800763e:	f7fd fe5b 	bl	80052f8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007642:	f7f9 fd2d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007646:	2100      	movs	r1, #0
 8007648:	2000      	movs	r0, #0
 800764a:	f7f9 fd39 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800764e:	4835      	ldr	r0, [pc, #212]	; (8007724 <cppInit+0xfc>)
 8007650:	f7f9 fd60 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007654:	2101      	movs	r1, #1
 8007656:	2000      	movs	r0, #0
 8007658:	f7f9 fd32 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 800765c:	4830      	ldr	r0, [pc, #192]	; (8007720 <cppInit+0xf8>)
 800765e:	f7fd fe75 	bl	800534c <_ZN11PowerSensor17getButteryVoltageEv>
 8007662:	ee10 3a10 	vmov	r3, s0
 8007666:	4618      	mov	r0, r3
 8007668:	f7f8 ff86 	bl	8000578 <__aeabi_f2d>
 800766c:	4603      	mov	r3, r0
 800766e:	460c      	mov	r4, r1
 8007670:	461a      	mov	r2, r3
 8007672:	4623      	mov	r3, r4
 8007674:	482c      	ldr	r0, [pc, #176]	; (8007728 <cppInit+0x100>)
 8007676:	f7f9 fd4d 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 800767a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800767e:	f001 ffa9 	bl	80095d4 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007682:	482a      	ldr	r0, [pc, #168]	; (800772c <cppInit+0x104>)
 8007684:	f7fd f868 	bl	8004758 <_ZN6Logger10sdCardInitEv>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <cppInit+0x76>
		led.fullColor('G');
 800768e:	2147      	movs	r1, #71	; 0x47
 8007690:	4827      	ldr	r0, [pc, #156]	; (8007730 <cppInit+0x108>)
 8007692:	f7fa fd6f 	bl	8002174 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007696:	2064      	movs	r0, #100	; 0x64
 8007698:	f001 ff9c 	bl	80095d4 <HAL_Delay>
 800769c:	e006      	b.n	80076ac <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800769e:	2152      	movs	r1, #82	; 0x52
 80076a0:	4823      	ldr	r0, [pc, #140]	; (8007730 <cppInit+0x108>)
 80076a2:	f7fa fd67 	bl	8002174 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80076a6:	2064      	movs	r0, #100	; 0x64
 80076a8:	f001 ff94 	bl	80095d4 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80076ac:	4821      	ldr	r0, [pc, #132]	; (8007734 <cppInit+0x10c>)
 80076ae:	f7fa febd 	bl	800242c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80076b2:	4821      	ldr	r0, [pc, #132]	; (8007738 <cppInit+0x110>)
 80076b4:	f7fd fae6 	bl	8004c84 <_ZN5Motor4initEv>
	encoder.init();
 80076b8:	4820      	ldr	r0, [pc, #128]	; (800773c <cppInit+0x114>)
 80076ba:	f7f9 feb3 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 80076be:	4820      	ldr	r0, [pc, #128]	; (8007740 <cppInit+0x118>)
 80076c0:	f7fa fb16 	bl	8001cf0 <_ZN3IMU4initEv>
	line_trace.init();
 80076c4:	481f      	ldr	r0, [pc, #124]	; (8007744 <cppInit+0x11c>)
 80076c6:	f7fc f991 	bl	80039ec <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80076ca:	481a      	ldr	r0, [pc, #104]	; (8007734 <cppInit+0x10c>)
 80076cc:	f7fa ffee 	bl	80026ac <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80076d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076d4:	f001 ff7e 	bl	80095d4 <HAL_Delay>

	led.fullColor('M');
 80076d8:	214d      	movs	r1, #77	; 0x4d
 80076da:	4815      	ldr	r0, [pc, #84]	; (8007730 <cppInit+0x108>)
 80076dc:	f7fa fd4a 	bl	8002174 <_ZN3LED9fullColorEc>
	imu.calibration();
 80076e0:	4817      	ldr	r0, [pc, #92]	; (8007740 <cppInit+0x118>)
 80076e2:	f7fa fbcf 	bl	8001e84 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80076e6:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007748 <cppInit+0x120>
 80076ea:	eddf 0a18 	vldr	s1, [pc, #96]	; 800774c <cppInit+0x124>
 80076ee:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007750 <cppInit+0x128>
 80076f2:	4818      	ldr	r0, [pc, #96]	; (8007754 <cppInit+0x12c>)
 80076f4:	f7fe f9cc 	bl	8005a90 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	//velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000);
 80076f8:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007758 <cppInit+0x130>
 80076fc:	eddf 0a17 	vldr	s1, [pc, #92]	; 800775c <cppInit+0x134>
 8007700:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007760 <cppInit+0x138>
 8007704:	4813      	ldr	r0, [pc, #76]	; (8007754 <cppInit+0x12c>)
 8007706:	f7fe f9dc 	bl	8005ac2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 800770a:	4816      	ldr	r0, [pc, #88]	; (8007764 <cppInit+0x13c>)
 800770c:	f7fd fcf0 	bl	80050f0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007710:	4815      	ldr	r0, [pc, #84]	; (8007768 <cppInit+0x140>)
 8007712:	f7fd fd87 	bl	8005224 <_ZN13PathFollowing4initEv>

	esc.init();
 8007716:	4815      	ldr	r0, [pc, #84]	; (800776c <cppInit+0x144>)
 8007718:	f7f9 fd68 	bl	80011ec <_ZN3ESC4initEv>

}
 800771c:	bf00      	nop
 800771e:	bd98      	pop	{r3, r4, r7, pc}
 8007720:	200005cc 	.word	0x200005cc
 8007724:	080198d0 	.word	0x080198d0
 8007728:	080198d8 	.word	0x080198d8
 800772c:	200005ec 	.word	0x200005ec
 8007730:	200005c8 	.word	0x200005c8
 8007734:	200002bc 	.word	0x200002bc
 8007738:	200005c4 	.word	0x200005c4
 800773c:	2001bb74 	.word	0x2001bb74
 8007740:	200005d8 	.word	0x200005d8
 8007744:	2001bc14 	.word	0x2001bc14
 8007748:	3cceca68 	.word	0x3cceca68
 800774c:	4180f06f 	.word	0x4180f06f
 8007750:	3fea2d0e 	.word	0x3fea2d0e
 8007754:	2001bb94 	.word	0x2001bb94
 8007758:	00000000 	.word	0x00000000
 800775c:	3f5e3fbc 	.word	0x3f5e3fbc
 8007760:	3d75c28f 	.word	0x3d75c28f
 8007764:	2001bbd0 	.word	0x2001bbd0
 8007768:	20029b60 	.word	0x20029b60
 800776c:	2001bc10 	.word	0x2001bc10

08007770 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007774:	4819      	ldr	r0, [pc, #100]	; (80077dc <cppFlip1ms+0x6c>)
 8007776:	f7fa feb7 	bl	80024e8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800777a:	4819      	ldr	r0, [pc, #100]	; (80077e0 <cppFlip1ms+0x70>)
 800777c:	f7fa fae0 	bl	8001d40 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007780:	4818      	ldr	r0, [pc, #96]	; (80077e4 <cppFlip1ms+0x74>)
 8007782:	f7f9 fe71 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007786:	4818      	ldr	r0, [pc, #96]	; (80077e8 <cppFlip1ms+0x78>)
 8007788:	f7fc fb66 	bl	8003e58 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800778c:	4817      	ldr	r0, [pc, #92]	; (80077ec <cppFlip1ms+0x7c>)
 800778e:	f7fe f9b1 	bl	8005af4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007792:	4817      	ldr	r0, [pc, #92]	; (80077f0 <cppFlip1ms+0x80>)
 8007794:	f7fd fc90 	bl	80050b8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007798:	4816      	ldr	r0, [pc, #88]	; (80077f4 <cppFlip1ms+0x84>)
 800779a:	f7fd fe4d 	bl	8005438 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800779e:	4816      	ldr	r0, [pc, #88]	; (80077f8 <cppFlip1ms+0x88>)
 80077a0:	f7fd fa82 	bl	8004ca8 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 80077a4:	4b15      	ldr	r3, [pc, #84]	; (80077fc <cppFlip1ms+0x8c>)
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	3301      	adds	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	4b13      	ldr	r3, [pc, #76]	; (80077fc <cppFlip1ms+0x8c>)
 80077ae:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 80077b0:	4b12      	ldr	r3, [pc, #72]	; (80077fc <cppFlip1ms+0x8c>)
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d90c      	bls.n	80077d2 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 80077b8:	4809      	ldr	r0, [pc, #36]	; (80077e0 <cppFlip1ms+0x70>)
 80077ba:	f7fa fb19 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 80077be:	eef0 7a40 	vmov.f32	s15, s0
 80077c2:	eeb0 0a67 	vmov.f32	s0, s15
 80077c6:	480e      	ldr	r0, [pc, #56]	; (8007800 <cppFlip1ms+0x90>)
 80077c8:	f7fd ff98 	bl	80056fc <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80077cc:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <cppFlip1ms+0x8c>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80077d2:	4804      	ldr	r0, [pc, #16]	; (80077e4 <cppFlip1ms+0x74>)
 80077d4:	f7f9 ff32 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80077d8:	bf00      	nop
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	200002bc 	.word	0x200002bc
 80077e0:	200005d8 	.word	0x200005d8
 80077e4:	2001bb74 	.word	0x2001bb74
 80077e8:	2001bc14 	.word	0x2001bc14
 80077ec:	2001bb94 	.word	0x2001bb94
 80077f0:	2001bbd0 	.word	0x2001bbd0
 80077f4:	200005b4 	.word	0x200005b4
 80077f8:	200005c4 	.word	0x200005c4
 80077fc:	20041288 	.word	0x20041288
 8007800:	20029950 	.word	0x20029950

08007804 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007808:	4802      	ldr	r0, [pc, #8]	; (8007814 <cppFlip100ns+0x10>)
 800780a:	f7fa fe1f 	bl	800244c <_ZN10LineSensor17storeSensorValuesEv>
}
 800780e:	bf00      	nop
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	200002bc 	.word	0x200002bc

08007818 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 800781c:	4b08      	ldr	r3, [pc, #32]	; (8007840 <cppFlip10ms+0x28>)
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	3301      	adds	r3, #1
 8007822:	b29a      	uxth	r2, r3
 8007824:	4b06      	ldr	r3, [pc, #24]	; (8007840 <cppFlip10ms+0x28>)
 8007826:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007828:	4b05      	ldr	r3, [pc, #20]	; (8007840 <cppFlip10ms+0x28>)
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	2b06      	cmp	r3, #6
 800782e:	d905      	bls.n	800783c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007830:	4804      	ldr	r0, [pc, #16]	; (8007844 <cppFlip10ms+0x2c>)
 8007832:	f7fd ff83 	bl	800573c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007836:	4b02      	ldr	r3, [pc, #8]	; (8007840 <cppFlip10ms+0x28>)
 8007838:	2200      	movs	r2, #0
 800783a:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 800783c:	bf00      	nop
 800783e:	bd80      	pop	{r7, pc}
 8007840:	2004128a 	.word	0x2004128a
 8007844:	20029950 	.word	0x20029950

08007848 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800784a:	b085      	sub	sp, #20
 800784c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 800784e:	4baf      	ldr	r3, [pc, #700]	; (8007b0c <cppLoop+0x2c4>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	f3bf 8f5b 	dmb	ish
 8007856:	b2db      	uxtb	r3, r3
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	bf0c      	ite	eq
 8007860:	2301      	moveq	r3, #1
 8007862:	2300      	movne	r3, #0
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d015      	beq.n	8007896 <cppLoop+0x4e>
 800786a:	48a8      	ldr	r0, [pc, #672]	; (8007b0c <cppLoop+0x2c4>)
 800786c:	f00c fb97 	bl	8013f9e <__cxa_guard_acquire>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	bf14      	ite	ne
 8007876:	2301      	movne	r3, #1
 8007878:	2300      	moveq	r3, #0
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00a      	beq.n	8007896 <cppLoop+0x4e>
 8007880:	48a3      	ldr	r0, [pc, #652]	; (8007b10 <cppLoop+0x2c8>)
 8007882:	f7fc f990 	bl	8003ba6 <_ZN9LineTrace5getKpEv>
 8007886:	eef0 7a40 	vmov.f32	s15, s0
 800788a:	4ba2      	ldr	r3, [pc, #648]	; (8007b14 <cppLoop+0x2cc>)
 800788c:	edc3 7a00 	vstr	s15, [r3]
 8007890:	489e      	ldr	r0, [pc, #632]	; (8007b0c <cppLoop+0x2c4>)
 8007892:	f00c fb90 	bl	8013fb6 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007896:	4ba0      	ldr	r3, [pc, #640]	; (8007b18 <cppLoop+0x2d0>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	f3bf 8f5b 	dmb	ish
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bf0c      	ite	eq
 80078a8:	2301      	moveq	r3, #1
 80078aa:	2300      	movne	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d015      	beq.n	80078de <cppLoop+0x96>
 80078b2:	4899      	ldr	r0, [pc, #612]	; (8007b18 <cppLoop+0x2d0>)
 80078b4:	f00c fb73 	bl	8013f9e <__cxa_guard_acquire>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bf14      	ite	ne
 80078be:	2301      	movne	r3, #1
 80078c0:	2300      	moveq	r3, #0
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00a      	beq.n	80078de <cppLoop+0x96>
 80078c8:	4891      	ldr	r0, [pc, #580]	; (8007b10 <cppLoop+0x2c8>)
 80078ca:	f7fc f97b 	bl	8003bc4 <_ZN9LineTrace5getKiEv>
 80078ce:	eef0 7a40 	vmov.f32	s15, s0
 80078d2:	4b92      	ldr	r3, [pc, #584]	; (8007b1c <cppLoop+0x2d4>)
 80078d4:	edc3 7a00 	vstr	s15, [r3]
 80078d8:	488f      	ldr	r0, [pc, #572]	; (8007b18 <cppLoop+0x2d0>)
 80078da:	f00c fb6c 	bl	8013fb6 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80078de:	4b90      	ldr	r3, [pc, #576]	; (8007b20 <cppLoop+0x2d8>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	f3bf 8f5b 	dmb	ish
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bf0c      	ite	eq
 80078f0:	2301      	moveq	r3, #1
 80078f2:	2300      	movne	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d015      	beq.n	8007926 <cppLoop+0xde>
 80078fa:	4889      	ldr	r0, [pc, #548]	; (8007b20 <cppLoop+0x2d8>)
 80078fc:	f00c fb4f 	bl	8013f9e <__cxa_guard_acquire>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	bf14      	ite	ne
 8007906:	2301      	movne	r3, #1
 8007908:	2300      	moveq	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <cppLoop+0xde>
 8007910:	487f      	ldr	r0, [pc, #508]	; (8007b10 <cppLoop+0x2c8>)
 8007912:	f7fc f966 	bl	8003be2 <_ZN9LineTrace5getKdEv>
 8007916:	eef0 7a40 	vmov.f32	s15, s0
 800791a:	4b82      	ldr	r3, [pc, #520]	; (8007b24 <cppLoop+0x2dc>)
 800791c:	edc3 7a00 	vstr	s15, [r3]
 8007920:	487f      	ldr	r0, [pc, #508]	; (8007b20 <cppLoop+0x2d8>)
 8007922:	f00c fb48 	bl	8013fb6 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007926:	4b80      	ldr	r3, [pc, #512]	; (8007b28 <cppLoop+0x2e0>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	f3bf 8f5b 	dmb	ish
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	bf0c      	ite	eq
 8007938:	2301      	moveq	r3, #1
 800793a:	2300      	movne	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d015      	beq.n	800796e <cppLoop+0x126>
 8007942:	4879      	ldr	r0, [pc, #484]	; (8007b28 <cppLoop+0x2e0>)
 8007944:	f00c fb2b 	bl	8013f9e <__cxa_guard_acquire>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	bf14      	ite	ne
 800794e:	2301      	movne	r3, #1
 8007950:	2300      	moveq	r3, #0
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00a      	beq.n	800796e <cppLoop+0x126>
 8007958:	486d      	ldr	r0, [pc, #436]	; (8007b10 <cppLoop+0x2c8>)
 800795a:	f7fc f9b0 	bl	8003cbe <_ZN9LineTrace17getTargetVelocityEv>
 800795e:	eef0 7a40 	vmov.f32	s15, s0
 8007962:	4b72      	ldr	r3, [pc, #456]	; (8007b2c <cppLoop+0x2e4>)
 8007964:	edc3 7a00 	vstr	s15, [r3]
 8007968:	486f      	ldr	r0, [pc, #444]	; (8007b28 <cppLoop+0x2e0>)
 800796a:	f00c fb24 	bl	8013fb6 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 800796e:	4b70      	ldr	r3, [pc, #448]	; (8007b30 <cppLoop+0x2e8>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	f3bf 8f5b 	dmb	ish
 8007976:	b2db      	uxtb	r3, r3
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	bf0c      	ite	eq
 8007980:	2301      	moveq	r3, #1
 8007982:	2300      	movne	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d015      	beq.n	80079b6 <cppLoop+0x16e>
 800798a:	4869      	ldr	r0, [pc, #420]	; (8007b30 <cppLoop+0x2e8>)
 800798c:	f00c fb07 	bl	8013f9e <__cxa_guard_acquire>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	bf14      	ite	ne
 8007996:	2301      	movne	r3, #1
 8007998:	2300      	moveq	r3, #0
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00a      	beq.n	80079b6 <cppLoop+0x16e>
 80079a0:	485b      	ldr	r0, [pc, #364]	; (8007b10 <cppLoop+0x2c8>)
 80079a2:	f7fc f99c 	bl	8003cde <_ZN9LineTrace14getMaxVelocityEv>
 80079a6:	eef0 7a40 	vmov.f32	s15, s0
 80079aa:	4b62      	ldr	r3, [pc, #392]	; (8007b34 <cppLoop+0x2ec>)
 80079ac:	edc3 7a00 	vstr	s15, [r3]
 80079b0:	485f      	ldr	r0, [pc, #380]	; (8007b30 <cppLoop+0x2e8>)
 80079b2:	f00c fb00 	bl	8013fb6 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 80079b6:	4b60      	ldr	r3, [pc, #384]	; (8007b38 <cppLoop+0x2f0>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	f3bf 8f5b 	dmb	ish
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	bf0c      	ite	eq
 80079c8:	2301      	moveq	r3, #1
 80079ca:	2300      	movne	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d015      	beq.n	80079fe <cppLoop+0x1b6>
 80079d2:	4859      	ldr	r0, [pc, #356]	; (8007b38 <cppLoop+0x2f0>)
 80079d4:	f00c fae3 	bl	8013f9e <__cxa_guard_acquire>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bf14      	ite	ne
 80079de:	2301      	movne	r3, #1
 80079e0:	2300      	moveq	r3, #0
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <cppLoop+0x1b6>
 80079e8:	4849      	ldr	r0, [pc, #292]	; (8007b10 <cppLoop+0x2c8>)
 80079ea:	f7fc f988 	bl	8003cfe <_ZN9LineTrace15getMaxVelocity2Ev>
 80079ee:	eef0 7a40 	vmov.f32	s15, s0
 80079f2:	4b52      	ldr	r3, [pc, #328]	; (8007b3c <cppLoop+0x2f4>)
 80079f4:	edc3 7a00 	vstr	s15, [r3]
 80079f8:	484f      	ldr	r0, [pc, #316]	; (8007b38 <cppLoop+0x2f0>)
 80079fa:	f00c fadc 	bl	8013fb6 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 80079fe:	4b50      	ldr	r3, [pc, #320]	; (8007b40 <cppLoop+0x2f8>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	f3bf 8f5b 	dmb	ish
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	bf0c      	ite	eq
 8007a10:	2301      	moveq	r3, #1
 8007a12:	2300      	movne	r3, #0
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d015      	beq.n	8007a46 <cppLoop+0x1fe>
 8007a1a:	4849      	ldr	r0, [pc, #292]	; (8007b40 <cppLoop+0x2f8>)
 8007a1c:	f00c fabf 	bl	8013f9e <__cxa_guard_acquire>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	bf14      	ite	ne
 8007a26:	2301      	movne	r3, #1
 8007a28:	2300      	moveq	r3, #0
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00a      	beq.n	8007a46 <cppLoop+0x1fe>
 8007a30:	4837      	ldr	r0, [pc, #220]	; (8007b10 <cppLoop+0x2c8>)
 8007a32:	f7fc f974 	bl	8003d1e <_ZN9LineTrace14getMinVelocityEv>
 8007a36:	eef0 7a40 	vmov.f32	s15, s0
 8007a3a:	4b42      	ldr	r3, [pc, #264]	; (8007b44 <cppLoop+0x2fc>)
 8007a3c:	edc3 7a00 	vstr	s15, [r3]
 8007a40:	483f      	ldr	r0, [pc, #252]	; (8007b40 <cppLoop+0x2f8>)
 8007a42:	f00c fab8 	bl	8013fb6 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007a46:	4b40      	ldr	r3, [pc, #256]	; (8007b48 <cppLoop+0x300>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	f3bf 8f5b 	dmb	ish
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bf0c      	ite	eq
 8007a58:	2301      	moveq	r3, #1
 8007a5a:	2300      	movne	r3, #0
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d015      	beq.n	8007a8e <cppLoop+0x246>
 8007a62:	4839      	ldr	r0, [pc, #228]	; (8007b48 <cppLoop+0x300>)
 8007a64:	f00c fa9b 	bl	8013f9e <__cxa_guard_acquire>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bf14      	ite	ne
 8007a6e:	2301      	movne	r3, #1
 8007a70:	2300      	moveq	r3, #0
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <cppLoop+0x246>
 8007a78:	4825      	ldr	r0, [pc, #148]	; (8007b10 <cppLoop+0x2c8>)
 8007a7a:	f7fc f960 	bl	8003d3e <_ZN9LineTrace15getMinVelocity2Ev>
 8007a7e:	eef0 7a40 	vmov.f32	s15, s0
 8007a82:	4b32      	ldr	r3, [pc, #200]	; (8007b4c <cppLoop+0x304>)
 8007a84:	edc3 7a00 	vstr	s15, [r3]
 8007a88:	482f      	ldr	r0, [pc, #188]	; (8007b48 <cppLoop+0x300>)
 8007a8a:	f00c fa94 	bl	8013fb6 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007a8e:	4b30      	ldr	r3, [pc, #192]	; (8007b50 <cppLoop+0x308>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	f3bf 8f5b 	dmb	ish
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bf0c      	ite	eq
 8007aa0:	2301      	moveq	r3, #1
 8007aa2:	2300      	movne	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d015      	beq.n	8007ad6 <cppLoop+0x28e>
 8007aaa:	4829      	ldr	r0, [pc, #164]	; (8007b50 <cppLoop+0x308>)
 8007aac:	f00c fa77 	bl	8013f9e <__cxa_guard_acquire>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	bf14      	ite	ne
 8007ab6:	2301      	movne	r3, #1
 8007ab8:	2300      	moveq	r3, #0
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <cppLoop+0x28e>
 8007ac0:	4813      	ldr	r0, [pc, #76]	; (8007b10 <cppLoop+0x2c8>)
 8007ac2:	f7fc f980 	bl	8003dc6 <_ZN9LineTrace9getMaxAccEv>
 8007ac6:	eef0 7a40 	vmov.f32	s15, s0
 8007aca:	4b22      	ldr	r3, [pc, #136]	; (8007b54 <cppLoop+0x30c>)
 8007acc:	edc3 7a00 	vstr	s15, [r3]
 8007ad0:	481f      	ldr	r0, [pc, #124]	; (8007b50 <cppLoop+0x308>)
 8007ad2:	f00c fa70 	bl	8013fb6 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007ad6:	4b20      	ldr	r3, [pc, #128]	; (8007b58 <cppLoop+0x310>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	f3bf 8f5b 	dmb	ish
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bf0c      	ite	eq
 8007ae8:	2301      	moveq	r3, #1
 8007aea:	2300      	movne	r3, #0
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d03f      	beq.n	8007b72 <cppLoop+0x32a>
 8007af2:	4819      	ldr	r0, [pc, #100]	; (8007b58 <cppLoop+0x310>)
 8007af4:	f00c fa53 	bl	8013f9e <__cxa_guard_acquire>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bf14      	ite	ne
 8007afe:	2301      	movne	r3, #1
 8007b00:	2300      	moveq	r3, #0
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d034      	beq.n	8007b72 <cppLoop+0x32a>
 8007b08:	e028      	b.n	8007b5c <cppLoop+0x314>
 8007b0a:	bf00      	nop
 8007b0c:	2004129c 	.word	0x2004129c
 8007b10:	2001bc14 	.word	0x2001bc14
 8007b14:	20041298 	.word	0x20041298
 8007b18:	200412a4 	.word	0x200412a4
 8007b1c:	200412a0 	.word	0x200412a0
 8007b20:	200412ac 	.word	0x200412ac
 8007b24:	200412a8 	.word	0x200412a8
 8007b28:	200412b4 	.word	0x200412b4
 8007b2c:	200412b0 	.word	0x200412b0
 8007b30:	200412bc 	.word	0x200412bc
 8007b34:	200412b8 	.word	0x200412b8
 8007b38:	200412c4 	.word	0x200412c4
 8007b3c:	200412c0 	.word	0x200412c0
 8007b40:	200412cc 	.word	0x200412cc
 8007b44:	200412c8 	.word	0x200412c8
 8007b48:	200412d4 	.word	0x200412d4
 8007b4c:	200412d0 	.word	0x200412d0
 8007b50:	200412dc 	.word	0x200412dc
 8007b54:	200412d8 	.word	0x200412d8
 8007b58:	200412e4 	.word	0x200412e4
 8007b5c:	48b2      	ldr	r0, [pc, #712]	; (8007e28 <cppLoop+0x5e0>)
 8007b5e:	f7fc f968 	bl	8003e32 <_ZN9LineTrace9getMaxDecEv>
 8007b62:	eef0 7a40 	vmov.f32	s15, s0
 8007b66:	4bb1      	ldr	r3, [pc, #708]	; (8007e2c <cppLoop+0x5e4>)
 8007b68:	edc3 7a00 	vstr	s15, [r3]
 8007b6c:	48b0      	ldr	r0, [pc, #704]	; (8007e30 <cppLoop+0x5e8>)
 8007b6e:	f00c fa22 	bl	8013fb6 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007b72:	4bb0      	ldr	r3, [pc, #704]	; (8007e34 <cppLoop+0x5ec>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	f3bf 8f5b 	dmb	ish
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	bf0c      	ite	eq
 8007b84:	2301      	moveq	r3, #1
 8007b86:	2300      	movne	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d015      	beq.n	8007bba <cppLoop+0x372>
 8007b8e:	48a9      	ldr	r0, [pc, #676]	; (8007e34 <cppLoop+0x5ec>)
 8007b90:	f00c fa05 	bl	8013f9e <__cxa_guard_acquire>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bf14      	ite	ne
 8007b9a:	2301      	movne	r3, #1
 8007b9c:	2300      	moveq	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <cppLoop+0x372>
 8007ba4:	48a0      	ldr	r0, [pc, #640]	; (8007e28 <cppLoop+0x5e0>)
 8007ba6:	f7fc f932 	bl	8003e0e <_ZN9LineTrace10getMaxAcc2Ev>
 8007baa:	eef0 7a40 	vmov.f32	s15, s0
 8007bae:	4ba2      	ldr	r3, [pc, #648]	; (8007e38 <cppLoop+0x5f0>)
 8007bb0:	edc3 7a00 	vstr	s15, [r3]
 8007bb4:	489f      	ldr	r0, [pc, #636]	; (8007e34 <cppLoop+0x5ec>)
 8007bb6:	f00c f9fe 	bl	8013fb6 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007bba:	4ba0      	ldr	r3, [pc, #640]	; (8007e3c <cppLoop+0x5f4>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	f3bf 8f5b 	dmb	ish
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	bf0c      	ite	eq
 8007bcc:	2301      	moveq	r3, #1
 8007bce:	2300      	movne	r3, #0
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d015      	beq.n	8007c02 <cppLoop+0x3ba>
 8007bd6:	4899      	ldr	r0, [pc, #612]	; (8007e3c <cppLoop+0x5f4>)
 8007bd8:	f00c f9e1 	bl	8013f9e <__cxa_guard_acquire>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bf14      	ite	ne
 8007be2:	2301      	movne	r3, #1
 8007be4:	2300      	moveq	r3, #0
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <cppLoop+0x3ba>
 8007bec:	488e      	ldr	r0, [pc, #568]	; (8007e28 <cppLoop+0x5e0>)
 8007bee:	f7fc f8fc 	bl	8003dea <_ZN9LineTrace10getMaxDec2Ev>
 8007bf2:	eef0 7a40 	vmov.f32	s15, s0
 8007bf6:	4b92      	ldr	r3, [pc, #584]	; (8007e40 <cppLoop+0x5f8>)
 8007bf8:	edc3 7a00 	vstr	s15, [r3]
 8007bfc:	488f      	ldr	r0, [pc, #572]	; (8007e3c <cppLoop+0x5f4>)
 8007bfe:	f00c f9da 	bl	8013fb6 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007c02:	4890      	ldr	r0, [pc, #576]	; (8007e44 <cppLoop+0x5fc>)
 8007c04:	f7fd fbb2 	bl	800536c <_ZN12RotarySwitch8getValueEv>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b0f      	cmp	r3, #15
 8007c0c:	f201 8397 	bhi.w	800933e <cppLoop+0x1af6>
 8007c10:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <cppLoop+0x3d0>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007c59 	.word	0x08007c59
 8007c1c:	08008009 	.word	0x08008009
 8007c20:	080080c1 	.word	0x080080c1
 8007c24:	08008273 	.word	0x08008273
 8007c28:	0800833f 	.word	0x0800833f
 8007c2c:	080085cd 	.word	0x080085cd
 8007c30:	08008699 	.word	0x08008699
 8007c34:	0800892f 	.word	0x0800892f
 8007c38:	08008bbb 	.word	0x08008bbb
 8007c3c:	08008e45 	.word	0x08008e45
 8007c40:	08008f01 	.word	0x08008f01
 8007c44:	08008fa1 	.word	0x08008fa1
 8007c48:	08009027 	.word	0x08009027
 8007c4c:	080090c1 	.word	0x080090c1
 8007c50:	080091d1 	.word	0x080091d1
 8007c54:	08009289 	.word	0x08009289
	case 0:
		led.fullColor('W');
 8007c58:	2157      	movs	r1, #87	; 0x57
 8007c5a:	487b      	ldr	r0, [pc, #492]	; (8007e48 <cppLoop+0x600>)
 8007c5c:	f7fa fa8a 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007c60:	f7f9 fa1e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c64:	2100      	movs	r1, #0
 8007c66:	2000      	movs	r0, #0
 8007c68:	f7f9 fa2a 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007c6c:	486e      	ldr	r0, [pc, #440]	; (8007e28 <cppLoop+0x5e0>)
 8007c6e:	f7fb ff9a 	bl	8003ba6 <_ZN9LineTrace5getKpEv>
 8007c72:	eeb0 7a40 	vmov.f32	s14, s0
 8007c76:	eddf 7a75 	vldr	s15, [pc, #468]	; 8007e4c <cppLoop+0x604>
 8007c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c7e:	ee17 0a90 	vmov	r0, s15
 8007c82:	f7f8 fc79 	bl	8000578 <__aeabi_f2d>
 8007c86:	4603      	mov	r3, r0
 8007c88:	460c      	mov	r4, r1
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4623      	mov	r3, r4
 8007c8e:	4870      	ldr	r0, [pc, #448]	; (8007e50 <cppLoop+0x608>)
 8007c90:	f7f9 fa40 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c94:	2101      	movs	r1, #1
 8007c96:	2000      	movs	r0, #0
 8007c98:	f7f9 fa12 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007c9c:	4862      	ldr	r0, [pc, #392]	; (8007e28 <cppLoop+0x5e0>)
 8007c9e:	f7fb ff91 	bl	8003bc4 <_ZN9LineTrace5getKiEv>
 8007ca2:	eeb0 7a40 	vmov.f32	s14, s0
 8007ca6:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8007e54 <cppLoop+0x60c>
 8007caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cae:	ee17 0a90 	vmov	r0, s15
 8007cb2:	f7f8 fc61 	bl	8000578 <__aeabi_f2d>
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	460e      	mov	r6, r1
 8007cba:	485b      	ldr	r0, [pc, #364]	; (8007e28 <cppLoop+0x5e0>)
 8007cbc:	f7fb ff91 	bl	8003be2 <_ZN9LineTrace5getKdEv>
 8007cc0:	eeb0 7a40 	vmov.f32	s14, s0
 8007cc4:	eddf 7a64 	vldr	s15, [pc, #400]	; 8007e58 <cppLoop+0x610>
 8007cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ccc:	ee17 0a90 	vmov	r0, s15
 8007cd0:	f7f8 fc52 	bl	8000578 <__aeabi_f2d>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	e9cd 3400 	strd	r3, r4, [sp]
 8007cdc:	462a      	mov	r2, r5
 8007cde:	4633      	mov	r3, r6
 8007ce0:	485e      	ldr	r0, [pc, #376]	; (8007e5c <cppLoop+0x614>)
 8007ce2:	f7f9 fa17 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007ce6:	485e      	ldr	r0, [pc, #376]	; (8007e60 <cppLoop+0x618>)
 8007ce8:	f7fa f9e0 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b08      	cmp	r3, #8
 8007cf0:	bf0c      	ite	eq
 8007cf2:	2301      	moveq	r3, #1
 8007cf4:	2300      	movne	r3, #0
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d022      	beq.n	8007d42 <cppLoop+0x4fa>
			led.LR(-1, 1);
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8007d02:	4851      	ldr	r0, [pc, #324]	; (8007e48 <cppLoop+0x600>)
 8007d04:	f7fa faf2 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007d08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007d0c:	f001 fc62 	bl	80095d4 <HAL_Delay>

			selector++;
 8007d10:	4b54      	ldr	r3, [pc, #336]	; (8007e64 <cppLoop+0x61c>)
 8007d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	3301      	adds	r3, #1
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	b21a      	sxth	r2, r3
 8007d1e:	4b51      	ldr	r3, [pc, #324]	; (8007e64 <cppLoop+0x61c>)
 8007d20:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007d22:	4b50      	ldr	r3, [pc, #320]	; (8007e64 <cppLoop+0x61c>)
 8007d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	dd02      	ble.n	8007d32 <cppLoop+0x4ea>
 8007d2c:	4b4d      	ldr	r3, [pc, #308]	; (8007e64 <cppLoop+0x61c>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007d32:	2200      	movs	r2, #0
 8007d34:	f04f 31ff 	mov.w	r1, #4294967295
 8007d38:	4843      	ldr	r0, [pc, #268]	; (8007e48 <cppLoop+0x600>)
 8007d3a:	f7fa fad7 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007d3e:	f001 bb00 	b.w	8009342 <cppLoop+0x1afa>
		else if(joy_stick.getValue() == JOY_R){
 8007d42:	4847      	ldr	r0, [pc, #284]	; (8007e60 <cppLoop+0x618>)
 8007d44:	f7fa f9b2 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b10      	cmp	r3, #16
 8007d4c:	bf0c      	ite	eq
 8007d4e:	2301      	moveq	r3, #1
 8007d50:	2300      	movne	r3, #0
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 808d 	beq.w	8007e74 <cppLoop+0x62c>
			led.LR(-1, 1);
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8007d60:	4839      	ldr	r0, [pc, #228]	; (8007e48 <cppLoop+0x600>)
 8007d62:	f7fa fac3 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007d66:	2064      	movs	r0, #100	; 0x64
 8007d68:	f001 fc34 	bl	80095d4 <HAL_Delay>
			if(selector == 0){
 8007d6c:	4b3d      	ldr	r3, [pc, #244]	; (8007e64 <cppLoop+0x61c>)
 8007d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d113      	bne.n	8007d9e <cppLoop+0x556>
				adj_kp = adj_kp + 0.00001;
 8007d76:	4b3c      	ldr	r3, [pc, #240]	; (8007e68 <cppLoop+0x620>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7f8 fbfc 	bl	8000578 <__aeabi_f2d>
 8007d80:	a323      	add	r3, pc, #140	; (adr r3, 8007e10 <cppLoop+0x5c8>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fa99 	bl	80002bc <__adddf3>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	4618      	mov	r0, r3
 8007d90:	4621      	mov	r1, r4
 8007d92:	f7f8 ff41 	bl	8000c18 <__aeabi_d2f>
 8007d96:	4602      	mov	r2, r0
 8007d98:	4b33      	ldr	r3, [pc, #204]	; (8007e68 <cppLoop+0x620>)
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	e02b      	b.n	8007df6 <cppLoop+0x5ae>
			else if(selector == 1){
 8007d9e:	4b31      	ldr	r3, [pc, #196]	; (8007e64 <cppLoop+0x61c>)
 8007da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d113      	bne.n	8007dd0 <cppLoop+0x588>
				adj_ki = adj_ki + 0.0001;
 8007da8:	4b30      	ldr	r3, [pc, #192]	; (8007e6c <cppLoop+0x624>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7f8 fbe3 	bl	8000578 <__aeabi_f2d>
 8007db2:	a319      	add	r3, pc, #100	; (adr r3, 8007e18 <cppLoop+0x5d0>)
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f7f8 fa80 	bl	80002bc <__adddf3>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	f7f8 ff28 	bl	8000c18 <__aeabi_d2f>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	4b28      	ldr	r3, [pc, #160]	; (8007e6c <cppLoop+0x624>)
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	e012      	b.n	8007df6 <cppLoop+0x5ae>
				adj_kd = adj_kd + 0.000001;
 8007dd0:	4b27      	ldr	r3, [pc, #156]	; (8007e70 <cppLoop+0x628>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7f8 fbcf 	bl	8000578 <__aeabi_f2d>
 8007dda:	a311      	add	r3, pc, #68	; (adr r3, 8007e20 <cppLoop+0x5d8>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f7f8 fa6c 	bl	80002bc <__adddf3>
 8007de4:	4603      	mov	r3, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	4618      	mov	r0, r3
 8007dea:	4621      	mov	r1, r4
 8007dec:	f7f8 ff14 	bl	8000c18 <__aeabi_d2f>
 8007df0:	4602      	mov	r2, r0
 8007df2:	4b1f      	ldr	r3, [pc, #124]	; (8007e70 <cppLoop+0x628>)
 8007df4:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007df6:	2152      	movs	r1, #82	; 0x52
 8007df8:	4813      	ldr	r0, [pc, #76]	; (8007e48 <cppLoop+0x600>)
 8007dfa:	f7fa f9bb 	bl	8002174 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f04f 31ff 	mov.w	r1, #4294967295
 8007e04:	4810      	ldr	r0, [pc, #64]	; (8007e48 <cppLoop+0x600>)
 8007e06:	f7fa fa71 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007e0a:	f001 ba9a 	b.w	8009342 <cppLoop+0x1afa>
 8007e0e:	bf00      	nop
 8007e10:	88e368f1 	.word	0x88e368f1
 8007e14:	3ee4f8b5 	.word	0x3ee4f8b5
 8007e18:	eb1c432d 	.word	0xeb1c432d
 8007e1c:	3f1a36e2 	.word	0x3f1a36e2
 8007e20:	a0b5ed8d 	.word	0xa0b5ed8d
 8007e24:	3eb0c6f7 	.word	0x3eb0c6f7
 8007e28:	2001bc14 	.word	0x2001bc14
 8007e2c:	200412e0 	.word	0x200412e0
 8007e30:	200412e4 	.word	0x200412e4
 8007e34:	200412ec 	.word	0x200412ec
 8007e38:	200412e8 	.word	0x200412e8
 8007e3c:	200412f4 	.word	0x200412f4
 8007e40:	200412f0 	.word	0x200412f0
 8007e44:	200005c0 	.word	0x200005c0
 8007e48:	200005c8 	.word	0x200005c8
 8007e4c:	447a0000 	.word	0x447a0000
 8007e50:	080198dc 	.word	0x080198dc
 8007e54:	42c80000 	.word	0x42c80000
 8007e58:	461c4000 	.word	0x461c4000
 8007e5c:	080198e8 	.word	0x080198e8
 8007e60:	200005bc 	.word	0x200005bc
 8007e64:	2004128c 	.word	0x2004128c
 8007e68:	20041298 	.word	0x20041298
 8007e6c:	200412a0 	.word	0x200412a0
 8007e70:	200412a8 	.word	0x200412a8
		else if(joy_stick.getValue() == JOY_L){
 8007e74:	48c0      	ldr	r0, [pc, #768]	; (8008178 <cppLoop+0x930>)
 8007e76:	f7fa f919 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	bf0c      	ite	eq
 8007e80:	2301      	moveq	r3, #1
 8007e82:	2300      	movne	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d059      	beq.n	8007f3e <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e90:	48ba      	ldr	r0, [pc, #744]	; (800817c <cppLoop+0x934>)
 8007e92:	f7fa fa2b 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007e96:	2064      	movs	r0, #100	; 0x64
 8007e98:	f001 fb9c 	bl	80095d4 <HAL_Delay>
			if(selector == 0){
 8007e9c:	4bb8      	ldr	r3, [pc, #736]	; (8008180 <cppLoop+0x938>)
 8007e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d113      	bne.n	8007ece <cppLoop+0x686>
				adj_kp = adj_kp - 0.00001;
 8007ea6:	4bb7      	ldr	r3, [pc, #732]	; (8008184 <cppLoop+0x93c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7f8 fb64 	bl	8000578 <__aeabi_f2d>
 8007eb0:	a3a9      	add	r3, pc, #676	; (adr r3, 8008158 <cppLoop+0x910>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	f7f8 f9ff 	bl	80002b8 <__aeabi_dsub>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	f7f8 fea9 	bl	8000c18 <__aeabi_d2f>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	4bae      	ldr	r3, [pc, #696]	; (8008184 <cppLoop+0x93c>)
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	e02b      	b.n	8007f26 <cppLoop+0x6de>
			else if(selector == 1){
 8007ece:	4bac      	ldr	r3, [pc, #688]	; (8008180 <cppLoop+0x938>)
 8007ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d113      	bne.n	8007f00 <cppLoop+0x6b8>
				adj_ki = adj_ki - 0.0001;
 8007ed8:	4bab      	ldr	r3, [pc, #684]	; (8008188 <cppLoop+0x940>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7f8 fb4b 	bl	8000578 <__aeabi_f2d>
 8007ee2:	a39f      	add	r3, pc, #636	; (adr r3, 8008160 <cppLoop+0x918>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f7f8 f9e6 	bl	80002b8 <__aeabi_dsub>
 8007eec:	4603      	mov	r3, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	f7f8 fe90 	bl	8000c18 <__aeabi_d2f>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	4ba3      	ldr	r3, [pc, #652]	; (8008188 <cppLoop+0x940>)
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	e012      	b.n	8007f26 <cppLoop+0x6de>
				adj_kd = adj_kd - 0.000001;
 8007f00:	4ba2      	ldr	r3, [pc, #648]	; (800818c <cppLoop+0x944>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7f8 fb37 	bl	8000578 <__aeabi_f2d>
 8007f0a:	a397      	add	r3, pc, #604	; (adr r3, 8008168 <cppLoop+0x920>)
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	f7f8 f9d2 	bl	80002b8 <__aeabi_dsub>
 8007f14:	4603      	mov	r3, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	4618      	mov	r0, r3
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	f7f8 fe7c 	bl	8000c18 <__aeabi_d2f>
 8007f20:	4602      	mov	r2, r0
 8007f22:	4b9a      	ldr	r3, [pc, #616]	; (800818c <cppLoop+0x944>)
 8007f24:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007f26:	2152      	movs	r1, #82	; 0x52
 8007f28:	4894      	ldr	r0, [pc, #592]	; (800817c <cppLoop+0x934>)
 8007f2a:	f7fa f923 	bl	8002174 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f04f 31ff 	mov.w	r1, #4294967295
 8007f34:	4891      	ldr	r0, [pc, #580]	; (800817c <cppLoop+0x934>)
 8007f36:	f7fa f9d9 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007f3a:	f001 ba02 	b.w	8009342 <cppLoop+0x1afa>
		else if(joy_stick.getValue() == JOY_D){
 8007f3e:	488e      	ldr	r0, [pc, #568]	; (8008178 <cppLoop+0x930>)
 8007f40:	f7fa f8b4 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	bf0c      	ite	eq
 8007f4a:	2301      	moveq	r3, #1
 8007f4c:	2300      	movne	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d011      	beq.n	8007f78 <cppLoop+0x730>
			led.LR(-1, 1);
 8007f54:	2201      	movs	r2, #1
 8007f56:	f04f 31ff 	mov.w	r1, #4294967295
 8007f5a:	4888      	ldr	r0, [pc, #544]	; (800817c <cppLoop+0x934>)
 8007f5c:	f7fa f9c6 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f64:	f001 fb36 	bl	80095d4 <HAL_Delay>
			led.LR(-1, 0);
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8007f6e:	4883      	ldr	r0, [pc, #524]	; (800817c <cppLoop+0x934>)
 8007f70:	f7fa f9bc 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007f74:	f001 b9e5 	b.w	8009342 <cppLoop+0x1afa>
		else if(joy_stick.getValue() == JOY_C){
 8007f78:	487f      	ldr	r0, [pc, #508]	; (8008178 <cppLoop+0x930>)
 8007f7a:	f7fa f897 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	bf0c      	ite	eq
 8007f84:	2301      	moveq	r3, #1
 8007f86:	2300      	movne	r3, #0
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f001 81d9 	beq.w	8009342 <cppLoop+0x1afa>
			led.LR(-1, 1);
 8007f90:	2201      	movs	r2, #1
 8007f92:	f04f 31ff 	mov.w	r1, #4294967295
 8007f96:	4879      	ldr	r0, [pc, #484]	; (800817c <cppLoop+0x934>)
 8007f98:	f7fa f9a8 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007fa0:	f001 fb18 	bl	80095d4 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	4b76      	ldr	r3, [pc, #472]	; (8008184 <cppLoop+0x93c>)
 8007faa:	2201      	movs	r2, #1
 8007fac:	4978      	ldr	r1, [pc, #480]	; (8008190 <cppLoop+0x948>)
 8007fae:	4879      	ldr	r0, [pc, #484]	; (8008194 <cppLoop+0x94c>)
 8007fb0:	f7f9 fc64 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	4b73      	ldr	r3, [pc, #460]	; (8008188 <cppLoop+0x940>)
 8007fba:	2201      	movs	r2, #1
 8007fbc:	4976      	ldr	r1, [pc, #472]	; (8008198 <cppLoop+0x950>)
 8007fbe:	4875      	ldr	r0, [pc, #468]	; (8008194 <cppLoop+0x94c>)
 8007fc0:	f7f9 fc5c 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	4b70      	ldr	r3, [pc, #448]	; (800818c <cppLoop+0x944>)
 8007fca:	2201      	movs	r2, #1
 8007fcc:	4973      	ldr	r1, [pc, #460]	; (800819c <cppLoop+0x954>)
 8007fce:	4871      	ldr	r0, [pc, #452]	; (8008194 <cppLoop+0x94c>)
 8007fd0:	f7f9 fc54 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007fd4:	4b6b      	ldr	r3, [pc, #428]	; (8008184 <cppLoop+0x93c>)
 8007fd6:	edd3 7a00 	vldr	s15, [r3]
 8007fda:	4b6b      	ldr	r3, [pc, #428]	; (8008188 <cppLoop+0x940>)
 8007fdc:	ed93 7a00 	vldr	s14, [r3]
 8007fe0:	4b6a      	ldr	r3, [pc, #424]	; (800818c <cppLoop+0x944>)
 8007fe2:	edd3 6a00 	vldr	s13, [r3]
 8007fe6:	eeb0 1a66 	vmov.f32	s2, s13
 8007fea:	eef0 0a47 	vmov.f32	s1, s14
 8007fee:	eeb0 0a67 	vmov.f32	s0, s15
 8007ff2:	486b      	ldr	r0, [pc, #428]	; (80081a0 <cppLoop+0x958>)
 8007ff4:	f7fb fdbe 	bl	8003b74 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f04f 31ff 	mov.w	r1, #4294967295
 8007ffe:	485f      	ldr	r0, [pc, #380]	; (800817c <cppLoop+0x934>)
 8008000:	f7fa f974 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008004:	f001 b99d 	b.w	8009342 <cppLoop+0x1afa>

	case 1:
		led.fullColor('C');
 8008008:	2143      	movs	r1, #67	; 0x43
 800800a:	485c      	ldr	r0, [pc, #368]	; (800817c <cppLoop+0x934>)
 800800c:	f7fa f8b2 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008010:	f7f9 f846 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008014:	2100      	movs	r1, #0
 8008016:	2000      	movs	r0, #0
 8008018:	f7f9 f852 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 800801c:	4861      	ldr	r0, [pc, #388]	; (80081a4 <cppLoop+0x95c>)
 800801e:	f7f9 f879 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008022:	2101      	movs	r1, #1
 8008024:	2000      	movs	r0, #0
 8008026:	f7f9 f84b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 800802a:	4b5f      	ldr	r3, [pc, #380]	; (80081a8 <cppLoop+0x960>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f7f8 faa2 	bl	8000578 <__aeabi_f2d>
 8008034:	4603      	mov	r3, r0
 8008036:	460c      	mov	r4, r1
 8008038:	461a      	mov	r2, r3
 800803a:	4623      	mov	r3, r4
 800803c:	485b      	ldr	r0, [pc, #364]	; (80081ac <cppLoop+0x964>)
 800803e:	f7f9 f869 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008042:	484d      	ldr	r0, [pc, #308]	; (8008178 <cppLoop+0x930>)
 8008044:	f7fa f832 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008048:	4603      	mov	r3, r0
 800804a:	2b02      	cmp	r3, #2
 800804c:	bf0c      	ite	eq
 800804e:	2301      	moveq	r3, #1
 8008050:	2300      	movne	r3, #0
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	f001 8176 	beq.w	8009346 <cppLoop+0x1afe>
			HAL_Delay(500);
 800805a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800805e:	f001 fab9 	bl	80095d4 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8008062:	4b51      	ldr	r3, [pc, #324]	; (80081a8 <cppLoop+0x960>)
 8008064:	edd3 7a00 	vldr	s15, [r3]
 8008068:	eeb0 0a67 	vmov.f32	s0, s15
 800806c:	484c      	ldr	r0, [pc, #304]	; (80081a0 <cppLoop+0x958>)
 800806e:	f7fb fdd6 	bl	8003c1e <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8008072:	f04f 32ff 	mov.w	r2, #4294967295
 8008076:	2101      	movs	r1, #1
 8008078:	4840      	ldr	r0, [pc, #256]	; (800817c <cppLoop+0x934>)
 800807a:	f7fa f937 	bl	80022ec <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 800807e:	2100      	movs	r1, #0
 8008080:	4847      	ldr	r0, [pc, #284]	; (80081a0 <cppLoop+0x958>)
 8008082:	f7fc f85b 	bl	800413c <_ZN9LineTrace7setModeEs>
			esc.on(0.5, 0.5, 0.5, 0.5);
 8008086:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800808a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800808e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8008092:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008096:	4846      	ldr	r0, [pc, #280]	; (80081b0 <cppLoop+0x968>)
 8008098:	f7f9 f8da 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 800809c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80080a0:	f001 fa98 	bl	80095d4 <HAL_Delay>
			line_trace.running();
 80080a4:	483e      	ldr	r0, [pc, #248]	; (80081a0 <cppLoop+0x958>)
 80080a6:	f7fc f887 	bl	80041b8 <_ZN9LineTrace7runningEv>
			esc.off();
 80080aa:	4841      	ldr	r0, [pc, #260]	; (80081b0 <cppLoop+0x968>)
 80080ac:	f7f9 f96a 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80080b0:	f04f 32ff 	mov.w	r2, #4294967295
 80080b4:	2100      	movs	r1, #0
 80080b6:	4831      	ldr	r0, [pc, #196]	; (800817c <cppLoop+0x934>)
 80080b8:	f7fa f918 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 80080bc:	f001 b943 	b.w	8009346 <cppLoop+0x1afe>

	case 2:
		led.fullColor('B');
 80080c0:	2142      	movs	r1, #66	; 0x42
 80080c2:	482e      	ldr	r0, [pc, #184]	; (800817c <cppLoop+0x934>)
 80080c4:	f7fa f856 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80080c8:	f7f8 ffea 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80080cc:	2100      	movs	r1, #0
 80080ce:	2000      	movs	r0, #0
 80080d0:	f7f8 fff6 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80080d4:	4833      	ldr	r0, [pc, #204]	; (80081a4 <cppLoop+0x95c>)
 80080d6:	f7f9 f81d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080da:	2101      	movs	r1, #1
 80080dc:	2000      	movs	r0, #0
 80080de:	f7f8 ffef 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80080e2:	4b31      	ldr	r3, [pc, #196]	; (80081a8 <cppLoop+0x960>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7f8 fa46 	bl	8000578 <__aeabi_f2d>
 80080ec:	4603      	mov	r3, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	461a      	mov	r2, r3
 80080f2:	4623      	mov	r3, r4
 80080f4:	482f      	ldr	r0, [pc, #188]	; (80081b4 <cppLoop+0x96c>)
 80080f6:	f7f9 f80d 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80080fa:	481f      	ldr	r0, [pc, #124]	; (8008178 <cppLoop+0x930>)
 80080fc:	f7f9 ffd6 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008100:	4603      	mov	r3, r0
 8008102:	2b10      	cmp	r3, #16
 8008104:	bf0c      	ite	eq
 8008106:	2301      	moveq	r3, #1
 8008108:	2300      	movne	r3, #0
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d053      	beq.n	80081b8 <cppLoop+0x970>
			led.LR(-1, 1);
 8008110:	2201      	movs	r2, #1
 8008112:	f04f 31ff 	mov.w	r1, #4294967295
 8008116:	4819      	ldr	r0, [pc, #100]	; (800817c <cppLoop+0x934>)
 8008118:	f7fa f8e8 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 800811c:	2064      	movs	r0, #100	; 0x64
 800811e:	f001 fa59 	bl	80095d4 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8008122:	4b21      	ldr	r3, [pc, #132]	; (80081a8 <cppLoop+0x960>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4618      	mov	r0, r3
 8008128:	f7f8 fa26 	bl	8000578 <__aeabi_f2d>
 800812c:	a310      	add	r3, pc, #64	; (adr r3, 8008170 <cppLoop+0x928>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	f7f8 f8c3 	bl	80002bc <__adddf3>
 8008136:	4603      	mov	r3, r0
 8008138:	460c      	mov	r4, r1
 800813a:	4618      	mov	r0, r3
 800813c:	4621      	mov	r1, r4
 800813e:	f7f8 fd6b 	bl	8000c18 <__aeabi_d2f>
 8008142:	4602      	mov	r2, r0
 8008144:	4b18      	ldr	r3, [pc, #96]	; (80081a8 <cppLoop+0x960>)
 8008146:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008148:	2200      	movs	r2, #0
 800814a:	f04f 31ff 	mov.w	r1, #4294967295
 800814e:	480b      	ldr	r0, [pc, #44]	; (800817c <cppLoop+0x934>)
 8008150:	f7fa f8cc 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008154:	f001 b8f9 	b.w	800934a <cppLoop+0x1b02>
 8008158:	88e368f1 	.word	0x88e368f1
 800815c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008160:	eb1c432d 	.word	0xeb1c432d
 8008164:	3f1a36e2 	.word	0x3f1a36e2
 8008168:	a0b5ed8d 	.word	0xa0b5ed8d
 800816c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008170:	9999999a 	.word	0x9999999a
 8008174:	3fb99999 	.word	0x3fb99999
 8008178:	200005bc 	.word	0x200005bc
 800817c:	200005c8 	.word	0x200005c8
 8008180:	2004128c 	.word	0x2004128c
 8008184:	20041298 	.word	0x20041298
 8008188:	200412a0 	.word	0x200412a0
 800818c:	200412a8 	.word	0x200412a8
 8008190:	080198f8 	.word	0x080198f8
 8008194:	08019900 	.word	0x08019900
 8008198:	08019908 	.word	0x08019908
 800819c:	08019910 	.word	0x08019910
 80081a0:	2001bc14 	.word	0x2001bc14
 80081a4:	08019918 	.word	0x08019918
 80081a8:	200412b0 	.word	0x200412b0
 80081ac:	08019924 	.word	0x08019924
 80081b0:	2001bc10 	.word	0x2001bc10
 80081b4:	08019930 	.word	0x08019930
		else if(joy_stick.getValue() == JOY_L){
 80081b8:	48b5      	ldr	r0, [pc, #724]	; (8008490 <cppLoop+0xc48>)
 80081ba:	f7f9 ff77 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	bf0c      	ite	eq
 80081c4:	2301      	moveq	r3, #1
 80081c6:	2300      	movne	r3, #0
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d023      	beq.n	8008216 <cppLoop+0x9ce>
			led.LR(-1, 1);
 80081ce:	2201      	movs	r2, #1
 80081d0:	f04f 31ff 	mov.w	r1, #4294967295
 80081d4:	48af      	ldr	r0, [pc, #700]	; (8008494 <cppLoop+0xc4c>)
 80081d6:	f7fa f889 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081da:	2064      	movs	r0, #100	; 0x64
 80081dc:	f001 f9fa 	bl	80095d4 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 80081e0:	4bad      	ldr	r3, [pc, #692]	; (8008498 <cppLoop+0xc50>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7f8 f9c7 	bl	8000578 <__aeabi_f2d>
 80081ea:	a3a7      	add	r3, pc, #668	; (adr r3, 8008488 <cppLoop+0xc40>)
 80081ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f0:	f7f8 f862 	bl	80002b8 <__aeabi_dsub>
 80081f4:	4603      	mov	r3, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	4618      	mov	r0, r3
 80081fa:	4621      	mov	r1, r4
 80081fc:	f7f8 fd0c 	bl	8000c18 <__aeabi_d2f>
 8008200:	4602      	mov	r2, r0
 8008202:	4ba5      	ldr	r3, [pc, #660]	; (8008498 <cppLoop+0xc50>)
 8008204:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008206:	2200      	movs	r2, #0
 8008208:	f04f 31ff 	mov.w	r1, #4294967295
 800820c:	48a1      	ldr	r0, [pc, #644]	; (8008494 <cppLoop+0xc4c>)
 800820e:	f7fa f86d 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008212:	f001 b89a 	b.w	800934a <cppLoop+0x1b02>
		else if(joy_stick.getValue() == JOY_C){
 8008216:	489e      	ldr	r0, [pc, #632]	; (8008490 <cppLoop+0xc48>)
 8008218:	f7f9 ff48 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800821c:	4603      	mov	r3, r0
 800821e:	2b02      	cmp	r3, #2
 8008220:	bf0c      	ite	eq
 8008222:	2301      	moveq	r3, #1
 8008224:	2300      	movne	r3, #0
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	f001 808e 	beq.w	800934a <cppLoop+0x1b02>
			led.LR(-1, 1);
 800822e:	2201      	movs	r2, #1
 8008230:	f04f 31ff 	mov.w	r1, #4294967295
 8008234:	4897      	ldr	r0, [pc, #604]	; (8008494 <cppLoop+0xc4c>)
 8008236:	f7fa f859 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 800823a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800823e:	f001 f9c9 	bl	80095d4 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008242:	2300      	movs	r3, #0
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	4b94      	ldr	r3, [pc, #592]	; (8008498 <cppLoop+0xc50>)
 8008248:	2201      	movs	r2, #1
 800824a:	4994      	ldr	r1, [pc, #592]	; (800849c <cppLoop+0xc54>)
 800824c:	4894      	ldr	r0, [pc, #592]	; (80084a0 <cppLoop+0xc58>)
 800824e:	f7f9 fb15 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8008252:	4b91      	ldr	r3, [pc, #580]	; (8008498 <cppLoop+0xc50>)
 8008254:	edd3 7a00 	vldr	s15, [r3]
 8008258:	eeb0 0a67 	vmov.f32	s0, s15
 800825c:	4891      	ldr	r0, [pc, #580]	; (80084a4 <cppLoop+0xc5c>)
 800825e:	f7fb fcde 	bl	8003c1e <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8008262:	2200      	movs	r2, #0
 8008264:	f04f 31ff 	mov.w	r1, #4294967295
 8008268:	488a      	ldr	r0, [pc, #552]	; (8008494 <cppLoop+0xc4c>)
 800826a:	f7fa f83f 	bl	80022ec <_ZN3LED2LREaa>
		break;
 800826e:	f001 b86c 	b.w	800934a <cppLoop+0x1b02>

	case 3:
		led.fullColor('Y');
 8008272:	2159      	movs	r1, #89	; 0x59
 8008274:	4887      	ldr	r0, [pc, #540]	; (8008494 <cppLoop+0xc4c>)
 8008276:	f7f9 ff7d 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 800827a:	f7f8 ff11 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800827e:	2100      	movs	r1, #0
 8008280:	2000      	movs	r0, #0
 8008282:	f7f8 ff1d 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8008286:	4b88      	ldr	r3, [pc, #544]	; (80084a8 <cppLoop+0xc60>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f7f8 f974 	bl	8000578 <__aeabi_f2d>
 8008290:	4603      	mov	r3, r0
 8008292:	460c      	mov	r4, r1
 8008294:	461a      	mov	r2, r3
 8008296:	4623      	mov	r3, r4
 8008298:	4884      	ldr	r0, [pc, #528]	; (80084ac <cppLoop+0xc64>)
 800829a:	f7f8 ff3b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800829e:	2101      	movs	r1, #1
 80082a0:	2000      	movs	r0, #0
 80082a2:	f7f8 ff0d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 80082a6:	4b82      	ldr	r3, [pc, #520]	; (80084b0 <cppLoop+0xc68>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f8 f964 	bl	8000578 <__aeabi_f2d>
 80082b0:	4603      	mov	r3, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	461a      	mov	r2, r3
 80082b6:	4623      	mov	r3, r4
 80082b8:	487e      	ldr	r0, [pc, #504]	; (80084b4 <cppLoop+0xc6c>)
 80082ba:	f7f8 ff2b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80082be:	4874      	ldr	r0, [pc, #464]	; (8008490 <cppLoop+0xc48>)
 80082c0:	f7f9 fef4 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	bf0c      	ite	eq
 80082ca:	2301      	moveq	r3, #1
 80082cc:	2300      	movne	r3, #0
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f001 803c 	beq.w	800934e <cppLoop+0x1b06>
			HAL_Delay(500);
 80082d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80082da:	f001 f97b 	bl	80095d4 <HAL_Delay>

			led.LR(1, -1);
 80082de:	f04f 32ff 	mov.w	r2, #4294967295
 80082e2:	2101      	movs	r1, #1
 80082e4:	486b      	ldr	r0, [pc, #428]	; (8008494 <cppLoop+0xc4c>)
 80082e6:	f7fa f801 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80082ea:	2101      	movs	r1, #1
 80082ec:	486d      	ldr	r0, [pc, #436]	; (80084a4 <cppLoop+0xc5c>)
 80082ee:	f7fb ff25 	bl	800413c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80082f2:	4b6f      	ldr	r3, [pc, #444]	; (80084b0 <cppLoop+0xc68>)
 80082f4:	edd3 7a00 	vldr	s15, [r3]
 80082f8:	eeb0 0a67 	vmov.f32	s0, s15
 80082fc:	4869      	ldr	r0, [pc, #420]	; (80084a4 <cppLoop+0xc5c>)
 80082fe:	f7fb fc8e 	bl	8003c1e <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008302:	4b69      	ldr	r3, [pc, #420]	; (80084a8 <cppLoop+0xc60>)
 8008304:	edd3 7a00 	vldr	s15, [r3]
 8008308:	eeb0 0a67 	vmov.f32	s0, s15
 800830c:	4865      	ldr	r0, [pc, #404]	; (80084a4 <cppLoop+0xc5c>)
 800830e:	f7fb fc96 	bl	8003c3e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008312:	4b67      	ldr	r3, [pc, #412]	; (80084b0 <cppLoop+0xc68>)
 8008314:	edd3 7a00 	vldr	s15, [r3]
 8008318:	eeb0 0a67 	vmov.f32	s0, s15
 800831c:	4861      	ldr	r0, [pc, #388]	; (80084a4 <cppLoop+0xc5c>)
 800831e:	f7fb fcae 	bl	8003c7e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008322:	4860      	ldr	r0, [pc, #384]	; (80084a4 <cppLoop+0xc5c>)
 8008324:	f7fc f832 	bl	800438c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008328:	485e      	ldr	r0, [pc, #376]	; (80084a4 <cppLoop+0xc5c>)
 800832a:	f7fb ff45 	bl	80041b8 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800832e:	f04f 32ff 	mov.w	r2, #4294967295
 8008332:	2100      	movs	r1, #0
 8008334:	4857      	ldr	r0, [pc, #348]	; (8008494 <cppLoop+0xc4c>)
 8008336:	f7f9 ffd9 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 800833a:	f001 b808 	b.w	800934e <cppLoop+0x1b06>

	case 4:
		led.fullColor('G');
 800833e:	2147      	movs	r1, #71	; 0x47
 8008340:	4854      	ldr	r0, [pc, #336]	; (8008494 <cppLoop+0xc4c>)
 8008342:	f7f9 ff17 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008346:	f7f8 feab 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800834a:	2100      	movs	r1, #0
 800834c:	2000      	movs	r0, #0
 800834e:	f7f8 feb7 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008352:	4854      	ldr	r0, [pc, #336]	; (80084a4 <cppLoop+0xc5c>)
 8008354:	f7fb fcc3 	bl	8003cde <_ZN9LineTrace14getMaxVelocityEv>
 8008358:	ee10 3a10 	vmov	r3, s0
 800835c:	4618      	mov	r0, r3
 800835e:	f7f8 f90b 	bl	8000578 <__aeabi_f2d>
 8008362:	4603      	mov	r3, r0
 8008364:	460c      	mov	r4, r1
 8008366:	461a      	mov	r2, r3
 8008368:	4623      	mov	r3, r4
 800836a:	4850      	ldr	r0, [pc, #320]	; (80084ac <cppLoop+0xc64>)
 800836c:	f7f8 fed2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008370:	2101      	movs	r1, #1
 8008372:	2000      	movs	r0, #0
 8008374:	f7f8 fea4 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008378:	484a      	ldr	r0, [pc, #296]	; (80084a4 <cppLoop+0xc5c>)
 800837a:	f7fb fcd0 	bl	8003d1e <_ZN9LineTrace14getMinVelocityEv>
 800837e:	ee10 3a10 	vmov	r3, s0
 8008382:	4618      	mov	r0, r3
 8008384:	f7f8 f8f8 	bl	8000578 <__aeabi_f2d>
 8008388:	4603      	mov	r3, r0
 800838a:	460c      	mov	r4, r1
 800838c:	461a      	mov	r2, r3
 800838e:	4623      	mov	r3, r4
 8008390:	4849      	ldr	r0, [pc, #292]	; (80084b8 <cppLoop+0xc70>)
 8008392:	f7f8 febf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008396:	483e      	ldr	r0, [pc, #248]	; (8008490 <cppLoop+0xc48>)
 8008398:	f7f9 fe88 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800839c:	4603      	mov	r3, r0
 800839e:	2b08      	cmp	r3, #8
 80083a0:	bf0c      	ite	eq
 80083a2:	2301      	moveq	r3, #1
 80083a4:	2300      	movne	r3, #0
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d022      	beq.n	80083f2 <cppLoop+0xbaa>
			led.LR(-1, 1);
 80083ac:	2201      	movs	r2, #1
 80083ae:	f04f 31ff 	mov.w	r1, #4294967295
 80083b2:	4838      	ldr	r0, [pc, #224]	; (8008494 <cppLoop+0xc4c>)
 80083b4:	f7f9 ff9a 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 80083b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80083bc:	f001 f90a 	bl	80095d4 <HAL_Delay>

			selector_vel++;
 80083c0:	4b3e      	ldr	r3, [pc, #248]	; (80084bc <cppLoop+0xc74>)
 80083c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	3301      	adds	r3, #1
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	b21a      	sxth	r2, r3
 80083ce:	4b3b      	ldr	r3, [pc, #236]	; (80084bc <cppLoop+0xc74>)
 80083d0:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 80083d2:	4b3a      	ldr	r3, [pc, #232]	; (80084bc <cppLoop+0xc74>)
 80083d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	dd02      	ble.n	80083e2 <cppLoop+0xb9a>
 80083dc:	4b37      	ldr	r3, [pc, #220]	; (80084bc <cppLoop+0xc74>)
 80083de:	2200      	movs	r2, #0
 80083e0:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80083e2:	2200      	movs	r2, #0
 80083e4:	f04f 31ff 	mov.w	r1, #4294967295
 80083e8:	482a      	ldr	r0, [pc, #168]	; (8008494 <cppLoop+0xc4c>)
 80083ea:	f7f9 ff7f 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80083ee:	f000 bfb0 	b.w	8009352 <cppLoop+0x1b0a>
		else if(joy_stick.getValue() == JOY_R){
 80083f2:	4827      	ldr	r0, [pc, #156]	; (8008490 <cppLoop+0xc48>)
 80083f4:	f7f9 fe5a 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b10      	cmp	r3, #16
 80083fc:	bf0c      	ite	eq
 80083fe:	2301      	moveq	r3, #1
 8008400:	2300      	movne	r3, #0
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d05b      	beq.n	80084c0 <cppLoop+0xc78>
			led.LR(-1, 1);
 8008408:	2201      	movs	r2, #1
 800840a:	f04f 31ff 	mov.w	r1, #4294967295
 800840e:	4821      	ldr	r0, [pc, #132]	; (8008494 <cppLoop+0xc4c>)
 8008410:	f7f9 ff6c 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008414:	2064      	movs	r0, #100	; 0x64
 8008416:	f001 f8dd 	bl	80095d4 <HAL_Delay>
			if(selector_vel == 0)
 800841a:	4b28      	ldr	r3, [pc, #160]	; (80084bc <cppLoop+0xc74>)
 800841c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d113      	bne.n	800844c <cppLoop+0xc04>
				adj_max_velocity = adj_max_velocity + 0.1;
 8008424:	4b20      	ldr	r3, [pc, #128]	; (80084a8 <cppLoop+0xc60>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4618      	mov	r0, r3
 800842a:	f7f8 f8a5 	bl	8000578 <__aeabi_f2d>
 800842e:	a316      	add	r3, pc, #88	; (adr r3, 8008488 <cppLoop+0xc40>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f7f7 ff42 	bl	80002bc <__adddf3>
 8008438:	4603      	mov	r3, r0
 800843a:	460c      	mov	r4, r1
 800843c:	4618      	mov	r0, r3
 800843e:	4621      	mov	r1, r4
 8008440:	f7f8 fbea 	bl	8000c18 <__aeabi_d2f>
 8008444:	4602      	mov	r2, r0
 8008446:	4b18      	ldr	r3, [pc, #96]	; (80084a8 <cppLoop+0xc60>)
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	e012      	b.n	8008472 <cppLoop+0xc2a>
				adj_min_velocity = adj_min_velocity + 0.1;
 800844c:	4b18      	ldr	r3, [pc, #96]	; (80084b0 <cppLoop+0xc68>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4618      	mov	r0, r3
 8008452:	f7f8 f891 	bl	8000578 <__aeabi_f2d>
 8008456:	a30c      	add	r3, pc, #48	; (adr r3, 8008488 <cppLoop+0xc40>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f7f7 ff2e 	bl	80002bc <__adddf3>
 8008460:	4603      	mov	r3, r0
 8008462:	460c      	mov	r4, r1
 8008464:	4618      	mov	r0, r3
 8008466:	4621      	mov	r1, r4
 8008468:	f7f8 fbd6 	bl	8000c18 <__aeabi_d2f>
 800846c:	4602      	mov	r2, r0
 800846e:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <cppLoop+0xc68>)
 8008470:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008472:	2200      	movs	r2, #0
 8008474:	f04f 31ff 	mov.w	r1, #4294967295
 8008478:	4806      	ldr	r0, [pc, #24]	; (8008494 <cppLoop+0xc4c>)
 800847a:	f7f9 ff37 	bl	80022ec <_ZN3LED2LREaa>
		break;
 800847e:	f000 bf68 	b.w	8009352 <cppLoop+0x1b0a>
 8008482:	bf00      	nop
 8008484:	f3af 8000 	nop.w
 8008488:	9999999a 	.word	0x9999999a
 800848c:	3fb99999 	.word	0x3fb99999
 8008490:	200005bc 	.word	0x200005bc
 8008494:	200005c8 	.word	0x200005c8
 8008498:	200412b0 	.word	0x200412b0
 800849c:	0801993c 	.word	0x0801993c
 80084a0:	08019900 	.word	0x08019900
 80084a4:	2001bc14 	.word	0x2001bc14
 80084a8:	200412b8 	.word	0x200412b8
 80084ac:	08019948 	.word	0x08019948
 80084b0:	200412c8 	.word	0x200412c8
 80084b4:	08019924 	.word	0x08019924
 80084b8:	08019930 	.word	0x08019930
 80084bc:	20041292 	.word	0x20041292
		else if(joy_stick.getValue() == JOY_L){
 80084c0:	48bb      	ldr	r0, [pc, #748]	; (80087b0 <cppLoop+0xf68>)
 80084c2:	f7f9 fdf3 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	bf0c      	ite	eq
 80084cc:	2301      	moveq	r3, #1
 80084ce:	2300      	movne	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d03c      	beq.n	8008550 <cppLoop+0xd08>
			led.LR(-1, 1);
 80084d6:	2201      	movs	r2, #1
 80084d8:	f04f 31ff 	mov.w	r1, #4294967295
 80084dc:	48b5      	ldr	r0, [pc, #724]	; (80087b4 <cppLoop+0xf6c>)
 80084de:	f7f9 ff05 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80084e2:	2064      	movs	r0, #100	; 0x64
 80084e4:	f001 f876 	bl	80095d4 <HAL_Delay>
			if(selector_vel == 0)
 80084e8:	4bb3      	ldr	r3, [pc, #716]	; (80087b8 <cppLoop+0xf70>)
 80084ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d113      	bne.n	800851a <cppLoop+0xcd2>
				adj_max_velocity = adj_max_velocity - 0.1;
 80084f2:	4bb2      	ldr	r3, [pc, #712]	; (80087bc <cppLoop+0xf74>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7f8 f83e 	bl	8000578 <__aeabi_f2d>
 80084fc:	a3aa      	add	r3, pc, #680	; (adr r3, 80087a8 <cppLoop+0xf60>)
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f7f7 fed9 	bl	80002b8 <__aeabi_dsub>
 8008506:	4603      	mov	r3, r0
 8008508:	460c      	mov	r4, r1
 800850a:	4618      	mov	r0, r3
 800850c:	4621      	mov	r1, r4
 800850e:	f7f8 fb83 	bl	8000c18 <__aeabi_d2f>
 8008512:	4602      	mov	r2, r0
 8008514:	4ba9      	ldr	r3, [pc, #676]	; (80087bc <cppLoop+0xf74>)
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	e012      	b.n	8008540 <cppLoop+0xcf8>
				adj_min_velocity = adj_min_velocity - 0.1;
 800851a:	4ba9      	ldr	r3, [pc, #676]	; (80087c0 <cppLoop+0xf78>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f7f8 f82a 	bl	8000578 <__aeabi_f2d>
 8008524:	a3a0      	add	r3, pc, #640	; (adr r3, 80087a8 <cppLoop+0xf60>)
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	f7f7 fec5 	bl	80002b8 <__aeabi_dsub>
 800852e:	4603      	mov	r3, r0
 8008530:	460c      	mov	r4, r1
 8008532:	4618      	mov	r0, r3
 8008534:	4621      	mov	r1, r4
 8008536:	f7f8 fb6f 	bl	8000c18 <__aeabi_d2f>
 800853a:	4602      	mov	r2, r0
 800853c:	4ba0      	ldr	r3, [pc, #640]	; (80087c0 <cppLoop+0xf78>)
 800853e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008540:	2200      	movs	r2, #0
 8008542:	f04f 31ff 	mov.w	r1, #4294967295
 8008546:	489b      	ldr	r0, [pc, #620]	; (80087b4 <cppLoop+0xf6c>)
 8008548:	f7f9 fed0 	bl	80022ec <_ZN3LED2LREaa>
		break;
 800854c:	f000 bf01 	b.w	8009352 <cppLoop+0x1b0a>
		else if(joy_stick.getValue() == JOY_C){
 8008550:	4897      	ldr	r0, [pc, #604]	; (80087b0 <cppLoop+0xf68>)
 8008552:	f7f9 fdab 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008556:	4603      	mov	r3, r0
 8008558:	2b02      	cmp	r3, #2
 800855a:	bf0c      	ite	eq
 800855c:	2301      	moveq	r3, #1
 800855e:	2300      	movne	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 86f5 	beq.w	8009352 <cppLoop+0x1b0a>
			led.LR(-1, 1);
 8008568:	2201      	movs	r2, #1
 800856a:	f04f 31ff 	mov.w	r1, #4294967295
 800856e:	4891      	ldr	r0, [pc, #580]	; (80087b4 <cppLoop+0xf6c>)
 8008570:	f7f9 febc 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008574:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008578:	f001 f82c 	bl	80095d4 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 800857c:	2300      	movs	r3, #0
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4b8e      	ldr	r3, [pc, #568]	; (80087bc <cppLoop+0xf74>)
 8008582:	2201      	movs	r2, #1
 8008584:	498f      	ldr	r1, [pc, #572]	; (80087c4 <cppLoop+0xf7c>)
 8008586:	4890      	ldr	r0, [pc, #576]	; (80087c8 <cppLoop+0xf80>)
 8008588:	f7f9 f978 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 800858c:	2300      	movs	r3, #0
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	4b8b      	ldr	r3, [pc, #556]	; (80087c0 <cppLoop+0xf78>)
 8008592:	2201      	movs	r2, #1
 8008594:	498d      	ldr	r1, [pc, #564]	; (80087cc <cppLoop+0xf84>)
 8008596:	488c      	ldr	r0, [pc, #560]	; (80087c8 <cppLoop+0xf80>)
 8008598:	f7f9 f970 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 800859c:	4b87      	ldr	r3, [pc, #540]	; (80087bc <cppLoop+0xf74>)
 800859e:	edd3 7a00 	vldr	s15, [r3]
 80085a2:	eeb0 0a67 	vmov.f32	s0, s15
 80085a6:	488a      	ldr	r0, [pc, #552]	; (80087d0 <cppLoop+0xf88>)
 80085a8:	f7fb fb49 	bl	8003c3e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80085ac:	4b84      	ldr	r3, [pc, #528]	; (80087c0 <cppLoop+0xf78>)
 80085ae:	edd3 7a00 	vldr	s15, [r3]
 80085b2:	eeb0 0a67 	vmov.f32	s0, s15
 80085b6:	4886      	ldr	r0, [pc, #536]	; (80087d0 <cppLoop+0xf88>)
 80085b8:	f7fb fb61 	bl	8003c7e <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 80085bc:	2200      	movs	r2, #0
 80085be:	f04f 31ff 	mov.w	r1, #4294967295
 80085c2:	487c      	ldr	r0, [pc, #496]	; (80087b4 <cppLoop+0xf6c>)
 80085c4:	f7f9 fe92 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80085c8:	f000 bec3 	b.w	8009352 <cppLoop+0x1b0a>

	case 5:
		led.fullColor('M');
 80085cc:	214d      	movs	r1, #77	; 0x4d
 80085ce:	4879      	ldr	r0, [pc, #484]	; (80087b4 <cppLoop+0xf6c>)
 80085d0:	f7f9 fdd0 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80085d4:	f7f8 fd64 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80085d8:	2100      	movs	r1, #0
 80085da:	2000      	movs	r0, #0
 80085dc:	f7f8 fd70 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80085e0:	4b7c      	ldr	r3, [pc, #496]	; (80087d4 <cppLoop+0xf8c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7f7 ffc7 	bl	8000578 <__aeabi_f2d>
 80085ea:	4603      	mov	r3, r0
 80085ec:	460c      	mov	r4, r1
 80085ee:	461a      	mov	r2, r3
 80085f0:	4623      	mov	r3, r4
 80085f2:	4879      	ldr	r0, [pc, #484]	; (80087d8 <cppLoop+0xf90>)
 80085f4:	f7f8 fd8e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085f8:	2101      	movs	r1, #1
 80085fa:	2000      	movs	r0, #0
 80085fc:	f7f8 fd60 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008600:	4b76      	ldr	r3, [pc, #472]	; (80087dc <cppLoop+0xf94>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f7f7 ffb7 	bl	8000578 <__aeabi_f2d>
 800860a:	4603      	mov	r3, r0
 800860c:	460c      	mov	r4, r1
 800860e:	461a      	mov	r2, r3
 8008610:	4623      	mov	r3, r4
 8008612:	4873      	ldr	r0, [pc, #460]	; (80087e0 <cppLoop+0xf98>)
 8008614:	f7f8 fd7e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008618:	4865      	ldr	r0, [pc, #404]	; (80087b0 <cppLoop+0xf68>)
 800861a:	f7f9 fd47 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800861e:	4603      	mov	r3, r0
 8008620:	2b02      	cmp	r3, #2
 8008622:	bf0c      	ite	eq
 8008624:	2301      	moveq	r3, #1
 8008626:	2300      	movne	r3, #0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 8693 	beq.w	8009356 <cppLoop+0x1b0e>
			HAL_Delay(500);
 8008630:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008634:	f000 ffce 	bl	80095d4 <HAL_Delay>

			led.LR(1, -1);
 8008638:	f04f 32ff 	mov.w	r2, #4294967295
 800863c:	2101      	movs	r1, #1
 800863e:	485d      	ldr	r0, [pc, #372]	; (80087b4 <cppLoop+0xf6c>)
 8008640:	f7f9 fe54 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008644:	2102      	movs	r1, #2
 8008646:	4862      	ldr	r0, [pc, #392]	; (80087d0 <cppLoop+0xf88>)
 8008648:	f7fb fd78 	bl	800413c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800864c:	4b63      	ldr	r3, [pc, #396]	; (80087dc <cppLoop+0xf94>)
 800864e:	edd3 7a00 	vldr	s15, [r3]
 8008652:	eeb0 0a67 	vmov.f32	s0, s15
 8008656:	485e      	ldr	r0, [pc, #376]	; (80087d0 <cppLoop+0xf88>)
 8008658:	f7fb fae1 	bl	8003c1e <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 800865c:	4b5d      	ldr	r3, [pc, #372]	; (80087d4 <cppLoop+0xf8c>)
 800865e:	edd3 7a00 	vldr	s15, [r3]
 8008662:	eeb0 0a67 	vmov.f32	s0, s15
 8008666:	485a      	ldr	r0, [pc, #360]	; (80087d0 <cppLoop+0xf88>)
 8008668:	f7fb faf9 	bl	8003c5e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 800866c:	4b5b      	ldr	r3, [pc, #364]	; (80087dc <cppLoop+0xf94>)
 800866e:	edd3 7a00 	vldr	s15, [r3]
 8008672:	eeb0 0a67 	vmov.f32	s0, s15
 8008676:	4856      	ldr	r0, [pc, #344]	; (80087d0 <cppLoop+0xf88>)
 8008678:	f7fb fb11 	bl	8003c9e <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 800867c:	4854      	ldr	r0, [pc, #336]	; (80087d0 <cppLoop+0xf88>)
 800867e:	f7fb fe85 	bl	800438c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008682:	4853      	ldr	r0, [pc, #332]	; (80087d0 <cppLoop+0xf88>)
 8008684:	f7fb fd98 	bl	80041b8 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008688:	f04f 32ff 	mov.w	r2, #4294967295
 800868c:	2100      	movs	r1, #0
 800868e:	4849      	ldr	r0, [pc, #292]	; (80087b4 <cppLoop+0xf6c>)
 8008690:	f7f9 fe2c 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 8008694:	f000 be5f 	b.w	8009356 <cppLoop+0x1b0e>

	case 6:
		led.fullColor('R');
 8008698:	2152      	movs	r1, #82	; 0x52
 800869a:	4846      	ldr	r0, [pc, #280]	; (80087b4 <cppLoop+0xf6c>)
 800869c:	f7f9 fd6a 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80086a0:	f7f8 fcfe 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80086a4:	2100      	movs	r1, #0
 80086a6:	2000      	movs	r0, #0
 80086a8:	f7f8 fd0a 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 80086ac:	4848      	ldr	r0, [pc, #288]	; (80087d0 <cppLoop+0xf88>)
 80086ae:	f7fb fb26 	bl	8003cfe <_ZN9LineTrace15getMaxVelocity2Ev>
 80086b2:	ee10 3a10 	vmov	r3, s0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7f7 ff5e 	bl	8000578 <__aeabi_f2d>
 80086bc:	4603      	mov	r3, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	461a      	mov	r2, r3
 80086c2:	4623      	mov	r3, r4
 80086c4:	4844      	ldr	r0, [pc, #272]	; (80087d8 <cppLoop+0xf90>)
 80086c6:	f7f8 fd25 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80086ca:	2101      	movs	r1, #1
 80086cc:	2000      	movs	r0, #0
 80086ce:	f7f8 fcf7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80086d2:	483f      	ldr	r0, [pc, #252]	; (80087d0 <cppLoop+0xf88>)
 80086d4:	f7fb fb33 	bl	8003d3e <_ZN9LineTrace15getMinVelocity2Ev>
 80086d8:	ee10 3a10 	vmov	r3, s0
 80086dc:	4618      	mov	r0, r3
 80086de:	f7f7 ff4b 	bl	8000578 <__aeabi_f2d>
 80086e2:	4603      	mov	r3, r0
 80086e4:	460c      	mov	r4, r1
 80086e6:	461a      	mov	r2, r3
 80086e8:	4623      	mov	r3, r4
 80086ea:	483e      	ldr	r0, [pc, #248]	; (80087e4 <cppLoop+0xf9c>)
 80086ec:	f7f8 fd12 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80086f0:	482f      	ldr	r0, [pc, #188]	; (80087b0 <cppLoop+0xf68>)
 80086f2:	f7f9 fcdb 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	bf0c      	ite	eq
 80086fc:	2301      	moveq	r3, #1
 80086fe:	2300      	movne	r3, #0
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d022      	beq.n	800874c <cppLoop+0xf04>
			led.LR(-1, 1);
 8008706:	2201      	movs	r2, #1
 8008708:	f04f 31ff 	mov.w	r1, #4294967295
 800870c:	4829      	ldr	r0, [pc, #164]	; (80087b4 <cppLoop+0xf6c>)
 800870e:	f7f9 fded 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008712:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008716:	f000 ff5d 	bl	80095d4 <HAL_Delay>

			selector_vel2++;
 800871a:	4b33      	ldr	r3, [pc, #204]	; (80087e8 <cppLoop+0xfa0>)
 800871c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008720:	b29b      	uxth	r3, r3
 8008722:	3301      	adds	r3, #1
 8008724:	b29b      	uxth	r3, r3
 8008726:	b21a      	sxth	r2, r3
 8008728:	4b2f      	ldr	r3, [pc, #188]	; (80087e8 <cppLoop+0xfa0>)
 800872a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 800872c:	4b2e      	ldr	r3, [pc, #184]	; (80087e8 <cppLoop+0xfa0>)
 800872e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008732:	2b01      	cmp	r3, #1
 8008734:	dd02      	ble.n	800873c <cppLoop+0xef4>
 8008736:	4b2c      	ldr	r3, [pc, #176]	; (80087e8 <cppLoop+0xfa0>)
 8008738:	2200      	movs	r2, #0
 800873a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800873c:	2200      	movs	r2, #0
 800873e:	f04f 31ff 	mov.w	r1, #4294967295
 8008742:	481c      	ldr	r0, [pc, #112]	; (80087b4 <cppLoop+0xf6c>)
 8008744:	f7f9 fdd2 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008748:	f000 be07 	b.w	800935a <cppLoop+0x1b12>
		else if(joy_stick.getValue() == JOY_R){
 800874c:	4818      	ldr	r0, [pc, #96]	; (80087b0 <cppLoop+0xf68>)
 800874e:	f7f9 fcad 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008752:	4603      	mov	r3, r0
 8008754:	2b10      	cmp	r3, #16
 8008756:	bf0c      	ite	eq
 8008758:	2301      	moveq	r3, #1
 800875a:	2300      	movne	r3, #0
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d05f      	beq.n	8008822 <cppLoop+0xfda>
			led.LR(-1, 1);
 8008762:	2201      	movs	r2, #1
 8008764:	f04f 31ff 	mov.w	r1, #4294967295
 8008768:	4812      	ldr	r0, [pc, #72]	; (80087b4 <cppLoop+0xf6c>)
 800876a:	f7f9 fdbf 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 800876e:	2064      	movs	r0, #100	; 0x64
 8008770:	f000 ff30 	bl	80095d4 <HAL_Delay>
			if(selector_vel2 == 0)
 8008774:	4b1c      	ldr	r3, [pc, #112]	; (80087e8 <cppLoop+0xfa0>)
 8008776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d136      	bne.n	80087ec <cppLoop+0xfa4>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 800877e:	4b15      	ldr	r3, [pc, #84]	; (80087d4 <cppLoop+0xf8c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4618      	mov	r0, r3
 8008784:	f7f7 fef8 	bl	8000578 <__aeabi_f2d>
 8008788:	a307      	add	r3, pc, #28	; (adr r3, 80087a8 <cppLoop+0xf60>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 fd95 	bl	80002bc <__adddf3>
 8008792:	4603      	mov	r3, r0
 8008794:	460c      	mov	r4, r1
 8008796:	4618      	mov	r0, r3
 8008798:	4621      	mov	r1, r4
 800879a:	f7f8 fa3d 	bl	8000c18 <__aeabi_d2f>
 800879e:	4602      	mov	r2, r0
 80087a0:	4b0c      	ldr	r3, [pc, #48]	; (80087d4 <cppLoop+0xf8c>)
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e035      	b.n	8008812 <cppLoop+0xfca>
 80087a6:	bf00      	nop
 80087a8:	9999999a 	.word	0x9999999a
 80087ac:	3fb99999 	.word	0x3fb99999
 80087b0:	200005bc 	.word	0x200005bc
 80087b4:	200005c8 	.word	0x200005c8
 80087b8:	20041292 	.word	0x20041292
 80087bc:	200412b8 	.word	0x200412b8
 80087c0:	200412c8 	.word	0x200412c8
 80087c4:	08019954 	.word	0x08019954
 80087c8:	08019900 	.word	0x08019900
 80087cc:	08019960 	.word	0x08019960
 80087d0:	2001bc14 	.word	0x2001bc14
 80087d4:	200412c0 	.word	0x200412c0
 80087d8:	0801996c 	.word	0x0801996c
 80087dc:	200412d0 	.word	0x200412d0
 80087e0:	08019924 	.word	0x08019924
 80087e4:	08019930 	.word	0x08019930
 80087e8:	20041294 	.word	0x20041294
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 80087ec:	4bba      	ldr	r3, [pc, #744]	; (8008ad8 <cppLoop+0x1290>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7f7 fec1 	bl	8000578 <__aeabi_f2d>
 80087f6:	a3b6      	add	r3, pc, #728	; (adr r3, 8008ad0 <cppLoop+0x1288>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	f7f7 fd5e 	bl	80002bc <__adddf3>
 8008800:	4603      	mov	r3, r0
 8008802:	460c      	mov	r4, r1
 8008804:	4618      	mov	r0, r3
 8008806:	4621      	mov	r1, r4
 8008808:	f7f8 fa06 	bl	8000c18 <__aeabi_d2f>
 800880c:	4602      	mov	r2, r0
 800880e:	4bb2      	ldr	r3, [pc, #712]	; (8008ad8 <cppLoop+0x1290>)
 8008810:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008812:	2200      	movs	r2, #0
 8008814:	f04f 31ff 	mov.w	r1, #4294967295
 8008818:	48b0      	ldr	r0, [pc, #704]	; (8008adc <cppLoop+0x1294>)
 800881a:	f7f9 fd67 	bl	80022ec <_ZN3LED2LREaa>
		break;
 800881e:	f000 bd9c 	b.w	800935a <cppLoop+0x1b12>
		else if(joy_stick.getValue() == JOY_L){
 8008822:	48af      	ldr	r0, [pc, #700]	; (8008ae0 <cppLoop+0x1298>)
 8008824:	f7f9 fc42 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008828:	4603      	mov	r3, r0
 800882a:	2b01      	cmp	r3, #1
 800882c:	bf0c      	ite	eq
 800882e:	2301      	moveq	r3, #1
 8008830:	2300      	movne	r3, #0
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d03c      	beq.n	80088b2 <cppLoop+0x106a>
			led.LR(-1, 1);
 8008838:	2201      	movs	r2, #1
 800883a:	f04f 31ff 	mov.w	r1, #4294967295
 800883e:	48a7      	ldr	r0, [pc, #668]	; (8008adc <cppLoop+0x1294>)
 8008840:	f7f9 fd54 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008844:	2064      	movs	r0, #100	; 0x64
 8008846:	f000 fec5 	bl	80095d4 <HAL_Delay>
			if(selector_vel2 == 0)
 800884a:	4ba6      	ldr	r3, [pc, #664]	; (8008ae4 <cppLoop+0x129c>)
 800884c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d113      	bne.n	800887c <cppLoop+0x1034>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008854:	4ba4      	ldr	r3, [pc, #656]	; (8008ae8 <cppLoop+0x12a0>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	f7f7 fe8d 	bl	8000578 <__aeabi_f2d>
 800885e:	a39c      	add	r3, pc, #624	; (adr r3, 8008ad0 <cppLoop+0x1288>)
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	f7f7 fd28 	bl	80002b8 <__aeabi_dsub>
 8008868:	4603      	mov	r3, r0
 800886a:	460c      	mov	r4, r1
 800886c:	4618      	mov	r0, r3
 800886e:	4621      	mov	r1, r4
 8008870:	f7f8 f9d2 	bl	8000c18 <__aeabi_d2f>
 8008874:	4602      	mov	r2, r0
 8008876:	4b9c      	ldr	r3, [pc, #624]	; (8008ae8 <cppLoop+0x12a0>)
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	e012      	b.n	80088a2 <cppLoop+0x105a>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 800887c:	4b96      	ldr	r3, [pc, #600]	; (8008ad8 <cppLoop+0x1290>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4618      	mov	r0, r3
 8008882:	f7f7 fe79 	bl	8000578 <__aeabi_f2d>
 8008886:	a392      	add	r3, pc, #584	; (adr r3, 8008ad0 <cppLoop+0x1288>)
 8008888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888c:	f7f7 fd14 	bl	80002b8 <__aeabi_dsub>
 8008890:	4603      	mov	r3, r0
 8008892:	460c      	mov	r4, r1
 8008894:	4618      	mov	r0, r3
 8008896:	4621      	mov	r1, r4
 8008898:	f7f8 f9be 	bl	8000c18 <__aeabi_d2f>
 800889c:	4602      	mov	r2, r0
 800889e:	4b8e      	ldr	r3, [pc, #568]	; (8008ad8 <cppLoop+0x1290>)
 80088a0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80088a2:	2200      	movs	r2, #0
 80088a4:	f04f 31ff 	mov.w	r1, #4294967295
 80088a8:	488c      	ldr	r0, [pc, #560]	; (8008adc <cppLoop+0x1294>)
 80088aa:	f7f9 fd1f 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80088ae:	f000 bd54 	b.w	800935a <cppLoop+0x1b12>
		else if(joy_stick.getValue() == JOY_C){
 80088b2:	488b      	ldr	r0, [pc, #556]	; (8008ae0 <cppLoop+0x1298>)
 80088b4:	f7f9 fbfa 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	bf0c      	ite	eq
 80088be:	2301      	moveq	r3, #1
 80088c0:	2300      	movne	r3, #0
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8548 	beq.w	800935a <cppLoop+0x1b12>
			led.LR(-1, 1);
 80088ca:	2201      	movs	r2, #1
 80088cc:	f04f 31ff 	mov.w	r1, #4294967295
 80088d0:	4882      	ldr	r0, [pc, #520]	; (8008adc <cppLoop+0x1294>)
 80088d2:	f7f9 fd0b 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 80088d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80088da:	f000 fe7b 	bl	80095d4 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80088de:	2300      	movs	r3, #0
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	4b81      	ldr	r3, [pc, #516]	; (8008ae8 <cppLoop+0x12a0>)
 80088e4:	2201      	movs	r2, #1
 80088e6:	4981      	ldr	r1, [pc, #516]	; (8008aec <cppLoop+0x12a4>)
 80088e8:	4881      	ldr	r0, [pc, #516]	; (8008af0 <cppLoop+0x12a8>)
 80088ea:	f7f8 ffc7 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80088ee:	2300      	movs	r3, #0
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	4b79      	ldr	r3, [pc, #484]	; (8008ad8 <cppLoop+0x1290>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	497f      	ldr	r1, [pc, #508]	; (8008af4 <cppLoop+0x12ac>)
 80088f8:	487d      	ldr	r0, [pc, #500]	; (8008af0 <cppLoop+0x12a8>)
 80088fa:	f7f8 ffbf 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80088fe:	4b7a      	ldr	r3, [pc, #488]	; (8008ae8 <cppLoop+0x12a0>)
 8008900:	edd3 7a00 	vldr	s15, [r3]
 8008904:	eeb0 0a67 	vmov.f32	s0, s15
 8008908:	487b      	ldr	r0, [pc, #492]	; (8008af8 <cppLoop+0x12b0>)
 800890a:	f7fb f9a8 	bl	8003c5e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 800890e:	4b72      	ldr	r3, [pc, #456]	; (8008ad8 <cppLoop+0x1290>)
 8008910:	edd3 7a00 	vldr	s15, [r3]
 8008914:	eeb0 0a67 	vmov.f32	s0, s15
 8008918:	4877      	ldr	r0, [pc, #476]	; (8008af8 <cppLoop+0x12b0>)
 800891a:	f7fb f9c0 	bl	8003c9e <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 800891e:	2200      	movs	r2, #0
 8008920:	f04f 31ff 	mov.w	r1, #4294967295
 8008924:	486d      	ldr	r0, [pc, #436]	; (8008adc <cppLoop+0x1294>)
 8008926:	f7f9 fce1 	bl	80022ec <_ZN3LED2LREaa>
		break;
 800892a:	f000 bd16 	b.w	800935a <cppLoop+0x1b12>

	case 7:
		led.fullColor('W');
 800892e:	2157      	movs	r1, #87	; 0x57
 8008930:	486a      	ldr	r0, [pc, #424]	; (8008adc <cppLoop+0x1294>)
 8008932:	f7f9 fc1f 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008936:	f7f8 fbb3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800893a:	2100      	movs	r1, #0
 800893c:	2000      	movs	r0, #0
 800893e:	f7f8 fbbf 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008942:	486d      	ldr	r0, [pc, #436]	; (8008af8 <cppLoop+0x12b0>)
 8008944:	f7fb fa3f 	bl	8003dc6 <_ZN9LineTrace9getMaxAccEv>
 8008948:	ee10 3a10 	vmov	r3, s0
 800894c:	4618      	mov	r0, r3
 800894e:	f7f7 fe13 	bl	8000578 <__aeabi_f2d>
 8008952:	4603      	mov	r3, r0
 8008954:	460c      	mov	r4, r1
 8008956:	461a      	mov	r2, r3
 8008958:	4623      	mov	r3, r4
 800895a:	4868      	ldr	r0, [pc, #416]	; (8008afc <cppLoop+0x12b4>)
 800895c:	f7f8 fbda 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008960:	2101      	movs	r1, #1
 8008962:	2000      	movs	r0, #0
 8008964:	f7f8 fbac 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008968:	4863      	ldr	r0, [pc, #396]	; (8008af8 <cppLoop+0x12b0>)
 800896a:	f7fb fa62 	bl	8003e32 <_ZN9LineTrace9getMaxDecEv>
 800896e:	ee10 3a10 	vmov	r3, s0
 8008972:	4618      	mov	r0, r3
 8008974:	f7f7 fe00 	bl	8000578 <__aeabi_f2d>
 8008978:	4603      	mov	r3, r0
 800897a:	460c      	mov	r4, r1
 800897c:	461a      	mov	r2, r3
 800897e:	4623      	mov	r3, r4
 8008980:	485f      	ldr	r0, [pc, #380]	; (8008b00 <cppLoop+0x12b8>)
 8008982:	f7f8 fbc7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008986:	4856      	ldr	r0, [pc, #344]	; (8008ae0 <cppLoop+0x1298>)
 8008988:	f7f9 fb90 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800898c:	4603      	mov	r3, r0
 800898e:	2b08      	cmp	r3, #8
 8008990:	bf0c      	ite	eq
 8008992:	2301      	moveq	r3, #1
 8008994:	2300      	movne	r3, #0
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d022      	beq.n	80089e2 <cppLoop+0x119a>
			led.LR(-1, 1);
 800899c:	2201      	movs	r2, #1
 800899e:	f04f 31ff 	mov.w	r1, #4294967295
 80089a2:	484e      	ldr	r0, [pc, #312]	; (8008adc <cppLoop+0x1294>)
 80089a4:	f7f9 fca2 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 80089a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80089ac:	f000 fe12 	bl	80095d4 <HAL_Delay>

			selector_acc++;
 80089b0:	4b54      	ldr	r3, [pc, #336]	; (8008b04 <cppLoop+0x12bc>)
 80089b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	3301      	adds	r3, #1
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	b21a      	sxth	r2, r3
 80089be:	4b51      	ldr	r3, [pc, #324]	; (8008b04 <cppLoop+0x12bc>)
 80089c0:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 80089c2:	4b50      	ldr	r3, [pc, #320]	; (8008b04 <cppLoop+0x12bc>)
 80089c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	dd02      	ble.n	80089d2 <cppLoop+0x118a>
 80089cc:	4b4d      	ldr	r3, [pc, #308]	; (8008b04 <cppLoop+0x12bc>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80089d2:	2200      	movs	r2, #0
 80089d4:	f04f 31ff 	mov.w	r1, #4294967295
 80089d8:	4840      	ldr	r0, [pc, #256]	; (8008adc <cppLoop+0x1294>)
 80089da:	f7f9 fc87 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80089de:	f000 bcbe 	b.w	800935e <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_R){
 80089e2:	483f      	ldr	r0, [pc, #252]	; (8008ae0 <cppLoop+0x1298>)
 80089e4:	f7f9 fb62 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b10      	cmp	r3, #16
 80089ec:	bf0c      	ite	eq
 80089ee:	2301      	moveq	r3, #1
 80089f0:	2300      	movne	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d03c      	beq.n	8008a72 <cppLoop+0x122a>
			led.LR(-1, 1);
 80089f8:	2201      	movs	r2, #1
 80089fa:	f04f 31ff 	mov.w	r1, #4294967295
 80089fe:	4837      	ldr	r0, [pc, #220]	; (8008adc <cppLoop+0x1294>)
 8008a00:	f7f9 fc74 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a04:	2064      	movs	r0, #100	; 0x64
 8008a06:	f000 fde5 	bl	80095d4 <HAL_Delay>
			if(selector_acc == 0){
 8008a0a:	4b3e      	ldr	r3, [pc, #248]	; (8008b04 <cppLoop+0x12bc>)
 8008a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d113      	bne.n	8008a3c <cppLoop+0x11f4>
				adj_acc = adj_acc + 0.1;
 8008a14:	4b3c      	ldr	r3, [pc, #240]	; (8008b08 <cppLoop+0x12c0>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7f7 fdad 	bl	8000578 <__aeabi_f2d>
 8008a1e:	a32c      	add	r3, pc, #176	; (adr r3, 8008ad0 <cppLoop+0x1288>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	f7f7 fc4a 	bl	80002bc <__adddf3>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	4621      	mov	r1, r4
 8008a30:	f7f8 f8f2 	bl	8000c18 <__aeabi_d2f>
 8008a34:	4602      	mov	r2, r0
 8008a36:	4b34      	ldr	r3, [pc, #208]	; (8008b08 <cppLoop+0x12c0>)
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	e012      	b.n	8008a62 <cppLoop+0x121a>
				adj_dec = adj_dec + 0.1;
 8008a3c:	4b33      	ldr	r3, [pc, #204]	; (8008b0c <cppLoop+0x12c4>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7f7 fd99 	bl	8000578 <__aeabi_f2d>
 8008a46:	a322      	add	r3, pc, #136	; (adr r3, 8008ad0 <cppLoop+0x1288>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f7f7 fc36 	bl	80002bc <__adddf3>
 8008a50:	4603      	mov	r3, r0
 8008a52:	460c      	mov	r4, r1
 8008a54:	4618      	mov	r0, r3
 8008a56:	4621      	mov	r1, r4
 8008a58:	f7f8 f8de 	bl	8000c18 <__aeabi_d2f>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	4b2b      	ldr	r3, [pc, #172]	; (8008b0c <cppLoop+0x12c4>)
 8008a60:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a62:	2200      	movs	r2, #0
 8008a64:	f04f 31ff 	mov.w	r1, #4294967295
 8008a68:	481c      	ldr	r0, [pc, #112]	; (8008adc <cppLoop+0x1294>)
 8008a6a:	f7f9 fc3f 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008a6e:	f000 bc76 	b.w	800935e <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_L){
 8008a72:	481b      	ldr	r0, [pc, #108]	; (8008ae0 <cppLoop+0x1298>)
 8008a74:	f7f9 fb1a 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	bf0c      	ite	eq
 8008a7e:	2301      	moveq	r3, #1
 8008a80:	2300      	movne	r3, #0
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d05e      	beq.n	8008b46 <cppLoop+0x12fe>
			led.LR(-1, 1);
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008a8e:	4813      	ldr	r0, [pc, #76]	; (8008adc <cppLoop+0x1294>)
 8008a90:	f7f9 fc2c 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a94:	2064      	movs	r0, #100	; 0x64
 8008a96:	f000 fd9d 	bl	80095d4 <HAL_Delay>
			if(selector_acc == 0){
 8008a9a:	4b1a      	ldr	r3, [pc, #104]	; (8008b04 <cppLoop+0x12bc>)
 8008a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d135      	bne.n	8008b10 <cppLoop+0x12c8>
				adj_acc = adj_acc - 0.1;
 8008aa4:	4b18      	ldr	r3, [pc, #96]	; (8008b08 <cppLoop+0x12c0>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7f7 fd65 	bl	8000578 <__aeabi_f2d>
 8008aae:	a308      	add	r3, pc, #32	; (adr r3, 8008ad0 <cppLoop+0x1288>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 fc00 	bl	80002b8 <__aeabi_dsub>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	460c      	mov	r4, r1
 8008abc:	4618      	mov	r0, r3
 8008abe:	4621      	mov	r1, r4
 8008ac0:	f7f8 f8aa 	bl	8000c18 <__aeabi_d2f>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	4b10      	ldr	r3, [pc, #64]	; (8008b08 <cppLoop+0x12c0>)
 8008ac8:	601a      	str	r2, [r3, #0]
 8008aca:	e034      	b.n	8008b36 <cppLoop+0x12ee>
 8008acc:	f3af 8000 	nop.w
 8008ad0:	9999999a 	.word	0x9999999a
 8008ad4:	3fb99999 	.word	0x3fb99999
 8008ad8:	200412d0 	.word	0x200412d0
 8008adc:	200005c8 	.word	0x200005c8
 8008ae0:	200005bc 	.word	0x200005bc
 8008ae4:	20041294 	.word	0x20041294
 8008ae8:	200412c0 	.word	0x200412c0
 8008aec:	08019978 	.word	0x08019978
 8008af0:	08019900 	.word	0x08019900
 8008af4:	08019984 	.word	0x08019984
 8008af8:	2001bc14 	.word	0x2001bc14
 8008afc:	08019990 	.word	0x08019990
 8008b00:	0801999c 	.word	0x0801999c
 8008b04:	2004128e 	.word	0x2004128e
 8008b08:	200412d8 	.word	0x200412d8
 8008b0c:	200412e0 	.word	0x200412e0
				adj_dec = adj_dec - 0.1;
 8008b10:	4bbd      	ldr	r3, [pc, #756]	; (8008e08 <cppLoop+0x15c0>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7f7 fd2f 	bl	8000578 <__aeabi_f2d>
 8008b1a:	a3b9      	add	r3, pc, #740	; (adr r3, 8008e00 <cppLoop+0x15b8>)
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	f7f7 fbca 	bl	80002b8 <__aeabi_dsub>
 8008b24:	4603      	mov	r3, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	4618      	mov	r0, r3
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	f7f8 f874 	bl	8000c18 <__aeabi_d2f>
 8008b30:	4602      	mov	r2, r0
 8008b32:	4bb5      	ldr	r3, [pc, #724]	; (8008e08 <cppLoop+0x15c0>)
 8008b34:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b36:	2200      	movs	r2, #0
 8008b38:	f04f 31ff 	mov.w	r1, #4294967295
 8008b3c:	48b3      	ldr	r0, [pc, #716]	; (8008e0c <cppLoop+0x15c4>)
 8008b3e:	f7f9 fbd5 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008b42:	f000 bc0c 	b.w	800935e <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_C){
 8008b46:	48b2      	ldr	r0, [pc, #712]	; (8008e10 <cppLoop+0x15c8>)
 8008b48:	f7f9 fab0 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	bf0c      	ite	eq
 8008b52:	2301      	moveq	r3, #1
 8008b54:	2300      	movne	r3, #0
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 8400 	beq.w	800935e <cppLoop+0x1b16>
			led.LR(-1, 1);
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f04f 31ff 	mov.w	r1, #4294967295
 8008b64:	48a9      	ldr	r0, [pc, #676]	; (8008e0c <cppLoop+0x15c4>)
 8008b66:	f7f9 fbc1 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b6a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b6e:	f000 fd31 	bl	80095d4 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008b72:	2300      	movs	r3, #0
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	4ba7      	ldr	r3, [pc, #668]	; (8008e14 <cppLoop+0x15cc>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	49a7      	ldr	r1, [pc, #668]	; (8008e18 <cppLoop+0x15d0>)
 8008b7c:	48a7      	ldr	r0, [pc, #668]	; (8008e1c <cppLoop+0x15d4>)
 8008b7e:	f7f8 fe7d 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008b82:	2300      	movs	r3, #0
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	4ba0      	ldr	r3, [pc, #640]	; (8008e08 <cppLoop+0x15c0>)
 8008b88:	2201      	movs	r2, #1
 8008b8a:	49a5      	ldr	r1, [pc, #660]	; (8008e20 <cppLoop+0x15d8>)
 8008b8c:	48a3      	ldr	r0, [pc, #652]	; (8008e1c <cppLoop+0x15d4>)
 8008b8e:	f7f8 fe75 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008b92:	4ba0      	ldr	r3, [pc, #640]	; (8008e14 <cppLoop+0x15cc>)
 8008b94:	edd3 7a00 	vldr	s15, [r3]
 8008b98:	4b9b      	ldr	r3, [pc, #620]	; (8008e08 <cppLoop+0x15c0>)
 8008b9a:	ed93 7a00 	vldr	s14, [r3]
 8008b9e:	eef0 0a47 	vmov.f32	s1, s14
 8008ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ba6:	489f      	ldr	r0, [pc, #636]	; (8008e24 <cppLoop+0x15dc>)
 8008ba8:	f7fb f8d9 	bl	8003d5e <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008bac:	2200      	movs	r2, #0
 8008bae:	f04f 31ff 	mov.w	r1, #4294967295
 8008bb2:	4896      	ldr	r0, [pc, #600]	; (8008e0c <cppLoop+0x15c4>)
 8008bb4:	f7f9 fb9a 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008bb8:	e3d1      	b.n	800935e <cppLoop+0x1b16>

	case 8:
		led.fullColor('W');
 8008bba:	2157      	movs	r1, #87	; 0x57
 8008bbc:	4893      	ldr	r0, [pc, #588]	; (8008e0c <cppLoop+0x15c4>)
 8008bbe:	f7f9 fad9 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008bc2:	f7f8 fa6d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	2000      	movs	r0, #0
 8008bca:	f7f8 fa79 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008bce:	4895      	ldr	r0, [pc, #596]	; (8008e24 <cppLoop+0x15dc>)
 8008bd0:	f7fb f91d 	bl	8003e0e <_ZN9LineTrace10getMaxAcc2Ev>
 8008bd4:	ee10 3a10 	vmov	r3, s0
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7f7 fccd 	bl	8000578 <__aeabi_f2d>
 8008bde:	4603      	mov	r3, r0
 8008be0:	460c      	mov	r4, r1
 8008be2:	461a      	mov	r2, r3
 8008be4:	4623      	mov	r3, r4
 8008be6:	4890      	ldr	r0, [pc, #576]	; (8008e28 <cppLoop+0x15e0>)
 8008be8:	f7f8 fa94 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008bec:	2101      	movs	r1, #1
 8008bee:	2000      	movs	r0, #0
 8008bf0:	f7f8 fa66 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008bf4:	488b      	ldr	r0, [pc, #556]	; (8008e24 <cppLoop+0x15dc>)
 8008bf6:	f7fb f8f8 	bl	8003dea <_ZN9LineTrace10getMaxDec2Ev>
 8008bfa:	ee10 3a10 	vmov	r3, s0
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7f7 fcba 	bl	8000578 <__aeabi_f2d>
 8008c04:	4603      	mov	r3, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	461a      	mov	r2, r3
 8008c0a:	4623      	mov	r3, r4
 8008c0c:	4887      	ldr	r0, [pc, #540]	; (8008e2c <cppLoop+0x15e4>)
 8008c0e:	f7f8 fa81 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008c12:	487f      	ldr	r0, [pc, #508]	; (8008e10 <cppLoop+0x15c8>)
 8008c14:	f7f9 fa4a 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b08      	cmp	r3, #8
 8008c1c:	bf0c      	ite	eq
 8008c1e:	2301      	moveq	r3, #1
 8008c20:	2300      	movne	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d021      	beq.n	8008c6c <cppLoop+0x1424>
			led.LR(-1, 1);
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c2e:	4877      	ldr	r0, [pc, #476]	; (8008e0c <cppLoop+0x15c4>)
 8008c30:	f7f9 fb5c 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c34:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c38:	f000 fccc 	bl	80095d4 <HAL_Delay>

			selector_acc2++;
 8008c3c:	4b7c      	ldr	r3, [pc, #496]	; (8008e30 <cppLoop+0x15e8>)
 8008c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	3301      	adds	r3, #1
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	b21a      	sxth	r2, r3
 8008c4a:	4b79      	ldr	r3, [pc, #484]	; (8008e30 <cppLoop+0x15e8>)
 8008c4c:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008c4e:	4b78      	ldr	r3, [pc, #480]	; (8008e30 <cppLoop+0x15e8>)
 8008c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	dd02      	ble.n	8008c5e <cppLoop+0x1416>
 8008c58:	4b75      	ldr	r3, [pc, #468]	; (8008e30 <cppLoop+0x15e8>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f04f 31ff 	mov.w	r1, #4294967295
 8008c64:	4869      	ldr	r0, [pc, #420]	; (8008e0c <cppLoop+0x15c4>)
 8008c66:	f7f9 fb41 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008c6a:	e37a      	b.n	8009362 <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_R){
 8008c6c:	4868      	ldr	r0, [pc, #416]	; (8008e10 <cppLoop+0x15c8>)
 8008c6e:	f7f9 fa1d 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b10      	cmp	r3, #16
 8008c76:	bf0c      	ite	eq
 8008c78:	2301      	moveq	r3, #1
 8008c7a:	2300      	movne	r3, #0
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d03b      	beq.n	8008cfa <cppLoop+0x14b2>
			led.LR(-1, 1);
 8008c82:	2201      	movs	r2, #1
 8008c84:	f04f 31ff 	mov.w	r1, #4294967295
 8008c88:	4860      	ldr	r0, [pc, #384]	; (8008e0c <cppLoop+0x15c4>)
 8008c8a:	f7f9 fb2f 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c8e:	2064      	movs	r0, #100	; 0x64
 8008c90:	f000 fca0 	bl	80095d4 <HAL_Delay>
			if(selector_acc2 == 0){
 8008c94:	4b66      	ldr	r3, [pc, #408]	; (8008e30 <cppLoop+0x15e8>)
 8008c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d113      	bne.n	8008cc6 <cppLoop+0x147e>
				adj_acc2 = adj_acc2 + 0.1;
 8008c9e:	4b65      	ldr	r3, [pc, #404]	; (8008e34 <cppLoop+0x15ec>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7f7 fc68 	bl	8000578 <__aeabi_f2d>
 8008ca8:	a355      	add	r3, pc, #340	; (adr r3, 8008e00 <cppLoop+0x15b8>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 fb05 	bl	80002bc <__adddf3>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	4621      	mov	r1, r4
 8008cba:	f7f7 ffad 	bl	8000c18 <__aeabi_d2f>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	4b5c      	ldr	r3, [pc, #368]	; (8008e34 <cppLoop+0x15ec>)
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	e012      	b.n	8008cec <cppLoop+0x14a4>
				adj_dec2 = adj_dec2 + 0.1;
 8008cc6:	4b5c      	ldr	r3, [pc, #368]	; (8008e38 <cppLoop+0x15f0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7f7 fc54 	bl	8000578 <__aeabi_f2d>
 8008cd0:	a34b      	add	r3, pc, #300	; (adr r3, 8008e00 <cppLoop+0x15b8>)
 8008cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd6:	f7f7 faf1 	bl	80002bc <__adddf3>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	460c      	mov	r4, r1
 8008cde:	4618      	mov	r0, r3
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	f7f7 ff99 	bl	8000c18 <__aeabi_d2f>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	4b53      	ldr	r3, [pc, #332]	; (8008e38 <cppLoop+0x15f0>)
 8008cea:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008cec:	2200      	movs	r2, #0
 8008cee:	f04f 31ff 	mov.w	r1, #4294967295
 8008cf2:	4846      	ldr	r0, [pc, #280]	; (8008e0c <cppLoop+0x15c4>)
 8008cf4:	f7f9 fafa 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008cf8:	e333      	b.n	8009362 <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_L){
 8008cfa:	4845      	ldr	r0, [pc, #276]	; (8008e10 <cppLoop+0x15c8>)
 8008cfc:	f7f9 f9d6 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	bf0c      	ite	eq
 8008d06:	2301      	moveq	r3, #1
 8008d08:	2300      	movne	r3, #0
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d03b      	beq.n	8008d88 <cppLoop+0x1540>
			led.LR(-1, 1);
 8008d10:	2201      	movs	r2, #1
 8008d12:	f04f 31ff 	mov.w	r1, #4294967295
 8008d16:	483d      	ldr	r0, [pc, #244]	; (8008e0c <cppLoop+0x15c4>)
 8008d18:	f7f9 fae8 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d1c:	2064      	movs	r0, #100	; 0x64
 8008d1e:	f000 fc59 	bl	80095d4 <HAL_Delay>
			if(selector_acc2 == 0){
 8008d22:	4b43      	ldr	r3, [pc, #268]	; (8008e30 <cppLoop+0x15e8>)
 8008d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d113      	bne.n	8008d54 <cppLoop+0x150c>
				adj_acc2 = adj_acc2 - 0.1;
 8008d2c:	4b41      	ldr	r3, [pc, #260]	; (8008e34 <cppLoop+0x15ec>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7f7 fc21 	bl	8000578 <__aeabi_f2d>
 8008d36:	a332      	add	r3, pc, #200	; (adr r3, 8008e00 <cppLoop+0x15b8>)
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	f7f7 fabc 	bl	80002b8 <__aeabi_dsub>
 8008d40:	4603      	mov	r3, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	4618      	mov	r0, r3
 8008d46:	4621      	mov	r1, r4
 8008d48:	f7f7 ff66 	bl	8000c18 <__aeabi_d2f>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	4b39      	ldr	r3, [pc, #228]	; (8008e34 <cppLoop+0x15ec>)
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	e012      	b.n	8008d7a <cppLoop+0x1532>
				adj_dec2 = adj_dec2 - 0.1;
 8008d54:	4b38      	ldr	r3, [pc, #224]	; (8008e38 <cppLoop+0x15f0>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7f7 fc0d 	bl	8000578 <__aeabi_f2d>
 8008d5e:	a328      	add	r3, pc, #160	; (adr r3, 8008e00 <cppLoop+0x15b8>)
 8008d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d64:	f7f7 faa8 	bl	80002b8 <__aeabi_dsub>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	4621      	mov	r1, r4
 8008d70:	f7f7 ff52 	bl	8000c18 <__aeabi_d2f>
 8008d74:	4602      	mov	r2, r0
 8008d76:	4b30      	ldr	r3, [pc, #192]	; (8008e38 <cppLoop+0x15f0>)
 8008d78:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d80:	4822      	ldr	r0, [pc, #136]	; (8008e0c <cppLoop+0x15c4>)
 8008d82:	f7f9 fab3 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008d86:	e2ec      	b.n	8009362 <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_C){
 8008d88:	4821      	ldr	r0, [pc, #132]	; (8008e10 <cppLoop+0x15c8>)
 8008d8a:	f7f9 f98f 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	bf0c      	ite	eq
 8008d94:	2301      	moveq	r3, #1
 8008d96:	2300      	movne	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 82e1 	beq.w	8009362 <cppLoop+0x1b1a>
			led.LR(-1, 1);
 8008da0:	2201      	movs	r2, #1
 8008da2:	f04f 31ff 	mov.w	r1, #4294967295
 8008da6:	4819      	ldr	r0, [pc, #100]	; (8008e0c <cppLoop+0x15c4>)
 8008da8:	f7f9 faa0 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008dac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008db0:	f000 fc10 	bl	80095d4 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008db4:	2300      	movs	r3, #0
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	4b1e      	ldr	r3, [pc, #120]	; (8008e34 <cppLoop+0x15ec>)
 8008dba:	2201      	movs	r2, #1
 8008dbc:	491f      	ldr	r1, [pc, #124]	; (8008e3c <cppLoop+0x15f4>)
 8008dbe:	4817      	ldr	r0, [pc, #92]	; (8008e1c <cppLoop+0x15d4>)
 8008dc0:	f7f8 fd5c 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	4b1b      	ldr	r3, [pc, #108]	; (8008e38 <cppLoop+0x15f0>)
 8008dca:	2201      	movs	r2, #1
 8008dcc:	491c      	ldr	r1, [pc, #112]	; (8008e40 <cppLoop+0x15f8>)
 8008dce:	4813      	ldr	r0, [pc, #76]	; (8008e1c <cppLoop+0x15d4>)
 8008dd0:	f7f8 fd54 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008dd4:	4b17      	ldr	r3, [pc, #92]	; (8008e34 <cppLoop+0x15ec>)
 8008dd6:	edd3 7a00 	vldr	s15, [r3]
 8008dda:	4b17      	ldr	r3, [pc, #92]	; (8008e38 <cppLoop+0x15f0>)
 8008ddc:	ed93 7a00 	vldr	s14, [r3]
 8008de0:	eef0 0a47 	vmov.f32	s1, s14
 8008de4:	eeb0 0a67 	vmov.f32	s0, s15
 8008de8:	480e      	ldr	r0, [pc, #56]	; (8008e24 <cppLoop+0x15dc>)
 8008dea:	f7fa ffd2 	bl	8003d92 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008dee:	2200      	movs	r2, #0
 8008df0:	f04f 31ff 	mov.w	r1, #4294967295
 8008df4:	4805      	ldr	r0, [pc, #20]	; (8008e0c <cppLoop+0x15c4>)
 8008df6:	f7f9 fa79 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008dfa:	e2b2      	b.n	8009362 <cppLoop+0x1b1a>
 8008dfc:	f3af 8000 	nop.w
 8008e00:	9999999a 	.word	0x9999999a
 8008e04:	3fb99999 	.word	0x3fb99999
 8008e08:	200412e0 	.word	0x200412e0
 8008e0c:	200005c8 	.word	0x200005c8
 8008e10:	200005bc 	.word	0x200005bc
 8008e14:	200412d8 	.word	0x200412d8
 8008e18:	080199a8 	.word	0x080199a8
 8008e1c:	08019900 	.word	0x08019900
 8008e20:	080199b0 	.word	0x080199b0
 8008e24:	2001bc14 	.word	0x2001bc14
 8008e28:	080199b8 	.word	0x080199b8
 8008e2c:	080199c4 	.word	0x080199c4
 8008e30:	20041290 	.word	0x20041290
 8008e34:	200412e8 	.word	0x200412e8
 8008e38:	200412f0 	.word	0x200412f0
 8008e3c:	080199d0 	.word	0x080199d0
 8008e40:	080199dc 	.word	0x080199dc

	case 9:
		led.fullColor('~');
 8008e44:	217e      	movs	r1, #126	; 0x7e
 8008e46:	48c6      	ldr	r0, [pc, #792]	; (8009160 <cppLoop+0x1918>)
 8008e48:	f7f9 f994 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008e4c:	f7f8 f928 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008e50:	2100      	movs	r1, #0
 8008e52:	2000      	movs	r0, #0
 8008e54:	f7f8 f934 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8008e58:	48c2      	ldr	r0, [pc, #776]	; (8009164 <cppLoop+0x191c>)
 8008e5a:	f7f8 f95b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008e5e:	2101      	movs	r1, #1
 8008e60:	2000      	movs	r0, #0
 8008e62:	f7f8 f92d 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8008e66:	48c0      	ldr	r0, [pc, #768]	; (8009168 <cppLoop+0x1920>)
 8008e68:	f7f8 f954 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008e6c:	48bf      	ldr	r0, [pc, #764]	; (800916c <cppLoop+0x1924>)
 8008e6e:	f7f9 f91d 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	bf0c      	ite	eq
 8008e78:	2301      	moveq	r3, #1
 8008e7a:	2300      	movne	r3, #0
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 8271 	beq.w	8009366 <cppLoop+0x1b1e>
			led.LR(-1, 1);
 8008e84:	2201      	movs	r2, #1
 8008e86:	f04f 31ff 	mov.w	r1, #4294967295
 8008e8a:	48b5      	ldr	r0, [pc, #724]	; (8009160 <cppLoop+0x1918>)
 8008e8c:	f7f9 fa2e 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(500);
 8008e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e94:	f000 fb9e 	bl	80095d4 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8008e98:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8009170 <cppLoop+0x1928>
 8008e9c:	48b5      	ldr	r0, [pc, #724]	; (8009174 <cppLoop+0x192c>)
 8008e9e:	f7fa feaf 	bl	8003c00 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008ea2:	48b4      	ldr	r0, [pc, #720]	; (8009174 <cppLoop+0x192c>)
 8008ea4:	f7fb f95c 	bl	8004160 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8008ea8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008eac:	f000 fb92 	bl	80095d4 <HAL_Delay>

			led.fullColor('R');
 8008eb0:	2152      	movs	r1, #82	; 0x52
 8008eb2:	48ab      	ldr	r0, [pc, #684]	; (8009160 <cppLoop+0x1918>)
 8008eb4:	f7f9 f95e 	bl	8002174 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8008eb8:	48af      	ldr	r0, [pc, #700]	; (8009178 <cppLoop+0x1930>)
 8008eba:	f7f8 fc31 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8008ebe:	f242 7010 	movw	r0, #10000	; 0x2710
 8008ec2:	f000 fb87 	bl	80095d4 <HAL_Delay>

			line_trace.stop();
 8008ec6:	48ab      	ldr	r0, [pc, #684]	; (8009174 <cppLoop+0x192c>)
 8008ec8:	f7fb f9ea 	bl	80042a0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8008ecc:	49ab      	ldr	r1, [pc, #684]	; (800917c <cppLoop+0x1934>)
 8008ece:	48ac      	ldr	r0, [pc, #688]	; (8009180 <cppLoop+0x1938>)
 8008ed0:	f7f8 fc5f 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 8008ed4:	48a8      	ldr	r0, [pc, #672]	; (8009178 <cppLoop+0x1930>)
 8008ed6:	f7f8 fbe7 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8008eda:	eef0 7a40 	vmov.f32	s15, s0
 8008ede:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8008ee2:	1d3b      	adds	r3, r7, #4
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	2001      	movs	r0, #1
 8008eea:	f7f8 fc75 	bl	80017d8 <sd_write_float>
			user_fclose();
 8008eee:	f7f8 fc63 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ef8:	4899      	ldr	r0, [pc, #612]	; (8009160 <cppLoop+0x1918>)
 8008efa:	f7f9 f9f7 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 8008efe:	e232      	b.n	8009366 <cppLoop+0x1b1e>

	case 10:
		led.fullColor('~');
 8008f00:	217e      	movs	r1, #126	; 0x7e
 8008f02:	4897      	ldr	r0, [pc, #604]	; (8009160 <cppLoop+0x1918>)
 8008f04:	f7f9 f936 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f08:	f7f8 f8ca 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	2000      	movs	r0, #0
 8008f10:	f7f8 f8d6 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8008f14:	489b      	ldr	r0, [pc, #620]	; (8009184 <cppLoop+0x193c>)
 8008f16:	f7f8 f8fd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	f7f8 f8cf 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8008f22:	4899      	ldr	r0, [pc, #612]	; (8009188 <cppLoop+0x1940>)
 8008f24:	f7f8 f8f6 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8008f28:	4890      	ldr	r0, [pc, #576]	; (800916c <cppLoop+0x1924>)
 8008f2a:	f7f9 f8bf 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	bf0c      	ite	eq
 8008f34:	2301      	moveq	r3, #1
 8008f36:	2300      	movne	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 8215 	beq.w	800936a <cppLoop+0x1b22>
			HAL_Delay(500);
 8008f40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f44:	f000 fb46 	bl	80095d4 <HAL_Delay>
			led.LR(-1, 1);
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f4e:	4884      	ldr	r0, [pc, #528]	; (8009160 <cppLoop+0x1918>)
 8008f50:	f7f9 f9cc 	bl	80022ec <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8008f54:	2102      	movs	r1, #2
 8008f56:	4887      	ldr	r0, [pc, #540]	; (8009174 <cppLoop+0x192c>)
 8008f58:	f7fb f8f0 	bl	800413c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008f5c:	4b8b      	ldr	r3, [pc, #556]	; (800918c <cppLoop+0x1944>)
 8008f5e:	edd3 7a00 	vldr	s15, [r3]
 8008f62:	eeb0 0a67 	vmov.f32	s0, s15
 8008f66:	4883      	ldr	r0, [pc, #524]	; (8009174 <cppLoop+0x192c>)
 8008f68:	f7fa fe59 	bl	8003c1e <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008f6c:	4b87      	ldr	r3, [pc, #540]	; (800918c <cppLoop+0x1944>)
 8008f6e:	edd3 7a00 	vldr	s15, [r3]
 8008f72:	eeb0 0a67 	vmov.f32	s0, s15
 8008f76:	487f      	ldr	r0, [pc, #508]	; (8009174 <cppLoop+0x192c>)
 8008f78:	f7fa fe61 	bl	8003c3e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8008f7c:	4b83      	ldr	r3, [pc, #524]	; (800918c <cppLoop+0x1944>)
 8008f7e:	edd3 7a00 	vldr	s15, [r3]
 8008f82:	eeb0 0a67 	vmov.f32	s0, s15
 8008f86:	487b      	ldr	r0, [pc, #492]	; (8009174 <cppLoop+0x192c>)
 8008f88:	f7fa fe79 	bl	8003c7e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008f8c:	4879      	ldr	r0, [pc, #484]	; (8009174 <cppLoop+0x192c>)
 8008f8e:	f7fb facb 	bl	8004528 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8008f92:	2200      	movs	r2, #0
 8008f94:	f04f 31ff 	mov.w	r1, #4294967295
 8008f98:	4871      	ldr	r0, [pc, #452]	; (8009160 <cppLoop+0x1918>)
 8008f9a:	f7f9 f9a7 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 8008f9e:	e1e4      	b.n	800936a <cppLoop+0x1b22>

	case 11:
		led.fullColor('~');
 8008fa0:	217e      	movs	r1, #126	; 0x7e
 8008fa2:	486f      	ldr	r0, [pc, #444]	; (8009160 <cppLoop+0x1918>)
 8008fa4:	f7f9 f8e6 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008fa8:	f7f8 f87a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008fac:	2100      	movs	r1, #0
 8008fae:	2000      	movs	r0, #0
 8008fb0:	f7f8 f886 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 8008fb4:	4876      	ldr	r0, [pc, #472]	; (8009190 <cppLoop+0x1948>)
 8008fb6:	f7f8 f8ad 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008fba:	2101      	movs	r1, #1
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	f7f8 f87f 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8008fc2:	4874      	ldr	r0, [pc, #464]	; (8009194 <cppLoop+0x194c>)
 8008fc4:	f7f8 f8a6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008fc8:	4868      	ldr	r0, [pc, #416]	; (800916c <cppLoop+0x1924>)
 8008fca:	f7f9 f86f 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	bf0c      	ite	eq
 8008fd4:	2301      	moveq	r3, #1
 8008fd6:	2300      	movne	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 81c7 	beq.w	800936e <cppLoop+0x1b26>
			HAL_Delay(1000);
 8008fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008fe4:	f000 faf6 	bl	80095d4 <HAL_Delay>
			led.LR(-1, 1);
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f04f 31ff 	mov.w	r1, #4294967295
 8008fee:	485c      	ldr	r0, [pc, #368]	; (8009160 <cppLoop+0x1918>)
 8008ff0:	f7f9 f97c 	bl	80022ec <_ZN3LED2LREaa>

			esc.on(0.5, 0.5, 0.5, 0.5);
 8008ff4:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8008ff8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8008ffc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8009000:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009004:	4864      	ldr	r0, [pc, #400]	; (8009198 <cppLoop+0x1950>)
 8009006:	f7f8 f923 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(2000);
 800900a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800900e:	f000 fae1 	bl	80095d4 <HAL_Delay>
			esc.off();
 8009012:	4861      	ldr	r0, [pc, #388]	; (8009198 <cppLoop+0x1950>)
 8009014:	f7f8 f9b6 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009018:	2200      	movs	r2, #0
 800901a:	f04f 31ff 	mov.w	r1, #4294967295
 800901e:	4850      	ldr	r0, [pc, #320]	; (8009160 <cppLoop+0x1918>)
 8009020:	f7f9 f964 	bl	80022ec <_ZN3LED2LREaa>
			logger.saveLogs("SYSIDENT", "STEPRES.txt");

			led.LR(-1, 0);
		}
		*/
		break;
 8009024:	e1a3      	b.n	800936e <cppLoop+0x1b26>

	case 12:
		led.fullColor('~');
 8009026:	217e      	movs	r1, #126	; 0x7e
 8009028:	484d      	ldr	r0, [pc, #308]	; (8009160 <cppLoop+0x1918>)
 800902a:	f7f9 f8a3 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 800902e:	f7f8 f837 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009032:	2100      	movs	r1, #0
 8009034:	2000      	movs	r0, #0
 8009036:	f7f8 f843 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800903a:	4858      	ldr	r0, [pc, #352]	; (800919c <cppLoop+0x1954>)
 800903c:	f7f8 f86a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009040:	2101      	movs	r1, #1
 8009042:	2000      	movs	r0, #0
 8009044:	f7f8 f83c 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009048:	4855      	ldr	r0, [pc, #340]	; (80091a0 <cppLoop+0x1958>)
 800904a:	f7f8 f863 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800904e:	4847      	ldr	r0, [pc, #284]	; (800916c <cppLoop+0x1924>)
 8009050:	f7f9 f82c 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8009054:	4603      	mov	r3, r0
 8009056:	2b02      	cmp	r3, #2
 8009058:	bf0c      	ite	eq
 800905a:	2301      	moveq	r3, #1
 800905c:	2300      	movne	r3, #0
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 8186 	beq.w	8009372 <cppLoop+0x1b2a>
			HAL_Delay(1500);
 8009066:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800906a:	f000 fab3 	bl	80095d4 <HAL_Delay>
			led.LR(-1, 1);
 800906e:	2201      	movs	r2, #1
 8009070:	f04f 31ff 	mov.w	r1, #4294967295
 8009074:	483a      	ldr	r0, [pc, #232]	; (8009160 <cppLoop+0x1918>)
 8009076:	f7f9 f939 	bl	80022ec <_ZN3LED2LREaa>

			logger.start();
 800907a:	484a      	ldr	r0, [pc, #296]	; (80091a4 <cppLoop+0x195c>)
 800907c:	f7fb fdce 	bl	8004c1c <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8009080:	4849      	ldr	r0, [pc, #292]	; (80091a8 <cppLoop+0x1960>)
 8009082:	f7fc fd4a 	bl	8005b1a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 3.14);
 8009086:	eddf 0a49 	vldr	s1, [pc, #292]	; 80091ac <cppLoop+0x1964>
 800908a:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8009170 <cppLoop+0x1928>
 800908e:	4846      	ldr	r0, [pc, #280]	; (80091a8 <cppLoop+0x1960>)
 8009090:	f7fc fcd6 	bl	8005a40 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009098:	f000 fa9c 	bl	80095d4 <HAL_Delay>

			logger.stop();
 800909c:	4841      	ldr	r0, [pc, #260]	; (80091a4 <cppLoop+0x195c>)
 800909e:	f7fb fdce 	bl	8004c3e <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80090a2:	4841      	ldr	r0, [pc, #260]	; (80091a8 <cppLoop+0x1960>)
 80090a4:	f7fc fd4c 	bl	8005b40 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80090a8:	4a41      	ldr	r2, [pc, #260]	; (80091b0 <cppLoop+0x1968>)
 80090aa:	4942      	ldr	r1, [pc, #264]	; (80091b4 <cppLoop+0x196c>)
 80090ac:	483d      	ldr	r0, [pc, #244]	; (80091a4 <cppLoop+0x195c>)
 80090ae:	f7fb fcc2 	bl	8004a36 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80090b2:	2200      	movs	r2, #0
 80090b4:	f04f 31ff 	mov.w	r1, #4294967295
 80090b8:	4829      	ldr	r0, [pc, #164]	; (8009160 <cppLoop+0x1918>)
 80090ba:	f7f9 f917 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 80090be:	e158      	b.n	8009372 <cppLoop+0x1b2a>

	case 13:

		led.fullColor('~');
 80090c0:	217e      	movs	r1, #126	; 0x7e
 80090c2:	4827      	ldr	r0, [pc, #156]	; (8009160 <cppLoop+0x1918>)
 80090c4:	f7f9 f856 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80090c8:	f7f7 ffea 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80090cc:	2100      	movs	r1, #0
 80090ce:	2000      	movs	r0, #0
 80090d0:	f7f7 fff6 	bl	80010c0 <lcd_locate>
		lcd_printf("Steer");
 80090d4:	4838      	ldr	r0, [pc, #224]	; (80091b8 <cppLoop+0x1970>)
 80090d6:	f7f8 f81d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80090da:	2101      	movs	r1, #1
 80090dc:	2000      	movs	r0, #0
 80090de:	f7f7 ffef 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80090e2:	4836      	ldr	r0, [pc, #216]	; (80091bc <cppLoop+0x1974>)
 80090e4:	f7f8 f816 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80090e8:	4820      	ldr	r0, [pc, #128]	; (800916c <cppLoop+0x1924>)
 80090ea:	f7f8 ffdf 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	bf0c      	ite	eq
 80090f4:	2301      	moveq	r3, #1
 80090f6:	2300      	movne	r3, #0
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 813b 	beq.w	8009376 <cppLoop+0x1b2e>
			HAL_Delay(500);
 8009100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009104:	f000 fa66 	bl	80095d4 <HAL_Delay>

			line_trace.setTargetVelocity(0.3);
 8009108:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80091c0 <cppLoop+0x1978>
 800910c:	4819      	ldr	r0, [pc, #100]	; (8009174 <cppLoop+0x192c>)
 800910e:	f7fa fd86 	bl	8003c1e <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8009112:	f04f 32ff 	mov.w	r2, #4294967295
 8009116:	2101      	movs	r1, #1
 8009118:	4811      	ldr	r0, [pc, #68]	; (8009160 <cppLoop+0x1918>)
 800911a:	f7f9 f8e7 	bl	80022ec <_ZN3LED2LREaa>

			logger.resetIdx();
 800911e:	4821      	ldr	r0, [pc, #132]	; (80091a4 <cppLoop+0x195c>)
 8009120:	f7fb fd64 	bl	8004bec <_ZN6Logger8resetIdxEv>
			line_trace.setMode(FIRST_RUNNING);
 8009124:	2100      	movs	r1, #0
 8009126:	4813      	ldr	r0, [pc, #76]	; (8009174 <cppLoop+0x192c>)
 8009128:	f7fb f808 	bl	800413c <_ZN9LineTrace7setModeEs>
			logger.start();
 800912c:	481d      	ldr	r0, [pc, #116]	; (80091a4 <cppLoop+0x195c>)
 800912e:	f7fb fd75 	bl	8004c1c <_ZN6Logger5startEv>
			line_trace.running();
 8009132:	4810      	ldr	r0, [pc, #64]	; (8009174 <cppLoop+0x192c>)
 8009134:	f7fb f840 	bl	80041b8 <_ZN9LineTrace7runningEv>
			logger.stop();
 8009138:	481a      	ldr	r0, [pc, #104]	; (80091a4 <cppLoop+0x195c>)
 800913a:	f7fb fd80 	bl	8004c3e <_ZN6Logger4stopEv>

			logger.saveLogs("STATELOG", "COMEGA.TXT");
 800913e:	4a21      	ldr	r2, [pc, #132]	; (80091c4 <cppLoop+0x197c>)
 8009140:	4921      	ldr	r1, [pc, #132]	; (80091c8 <cppLoop+0x1980>)
 8009142:	4818      	ldr	r0, [pc, #96]	; (80091a4 <cppLoop+0x195c>)
 8009144:	f7fb fc77 	bl	8004a36 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TOMEGA.TXT");
 8009148:	4a20      	ldr	r2, [pc, #128]	; (80091cc <cppLoop+0x1984>)
 800914a:	491f      	ldr	r1, [pc, #124]	; (80091c8 <cppLoop+0x1980>)
 800914c:	4815      	ldr	r0, [pc, #84]	; (80091a4 <cppLoop+0x195c>)
 800914e:	f7fb fc86 	bl	8004a5e <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8009152:	f04f 32ff 	mov.w	r2, #4294967295
 8009156:	2100      	movs	r1, #0
 8009158:	4801      	ldr	r0, [pc, #4]	; (8009160 <cppLoop+0x1918>)
 800915a:	f7f9 f8c7 	bl	80022ec <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 800915e:	e10a      	b.n	8009376 <cppLoop+0x1b2e>
 8009160:	200005c8 	.word	0x200005c8
 8009164:	080199e8 	.word	0x080199e8
 8009168:	080199f0 	.word	0x080199f0
 800916c:	200005bc 	.word	0x200005bc
 8009170:	00000000 	.word	0x00000000
 8009174:	2001bc14 	.word	0x2001bc14
 8009178:	2001bb74 	.word	0x2001bb74
 800917c:	080199fc 	.word	0x080199fc
 8009180:	08019a04 	.word	0x08019a04
 8009184:	08019a10 	.word	0x08019a10
 8009188:	08019a1c 	.word	0x08019a1c
 800918c:	200412c0 	.word	0x200412c0
 8009190:	08019a28 	.word	0x08019a28
 8009194:	08019a2c 	.word	0x08019a2c
 8009198:	2001bc10 	.word	0x2001bc10
 800919c:	08019a34 	.word	0x08019a34
 80091a0:	08019a38 	.word	0x08019a38
 80091a4:	200005ec 	.word	0x200005ec
 80091a8:	2001bb94 	.word	0x2001bb94
 80091ac:	4048f5c3 	.word	0x4048f5c3
 80091b0:	08019a44 	.word	0x08019a44
 80091b4:	08019a50 	.word	0x08019a50
 80091b8:	08019a5c 	.word	0x08019a5c
 80091bc:	08019a64 	.word	0x08019a64
 80091c0:	3e99999a 	.word	0x3e99999a
 80091c4:	08019a6c 	.word	0x08019a6c
 80091c8:	08019a78 	.word	0x08019a78
 80091cc:	08019a84 	.word	0x08019a84

	case 14:
		led.fullColor('W');
 80091d0:	2157      	movs	r1, #87	; 0x57
 80091d2:	486f      	ldr	r0, [pc, #444]	; (8009390 <cppLoop+0x1b48>)
 80091d4:	f7f8 ffce 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80091d8:	f7f7 ff62 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80091dc:	2100      	movs	r1, #0
 80091de:	2000      	movs	r0, #0
 80091e0:	f7f7 ff6e 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 80091e4:	486b      	ldr	r0, [pc, #428]	; (8009394 <cppLoop+0x1b4c>)
 80091e6:	f7f7 ff95 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80091ea:	2101      	movs	r1, #1
 80091ec:	2000      	movs	r0, #0
 80091ee:	f7f7 ff67 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80091f2:	4b69      	ldr	r3, [pc, #420]	; (8009398 <cppLoop+0x1b50>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7f7 f9be 	bl	8000578 <__aeabi_f2d>
 80091fc:	4603      	mov	r3, r0
 80091fe:	460c      	mov	r4, r1
 8009200:	461a      	mov	r2, r3
 8009202:	4623      	mov	r3, r4
 8009204:	4865      	ldr	r0, [pc, #404]	; (800939c <cppLoop+0x1b54>)
 8009206:	f7f7 ff85 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800920a:	4865      	ldr	r0, [pc, #404]	; (80093a0 <cppLoop+0x1b58>)
 800920c:	f7f8 ff4e 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8009210:	4603      	mov	r3, r0
 8009212:	2b02      	cmp	r3, #2
 8009214:	bf0c      	ite	eq
 8009216:	2301      	moveq	r3, #1
 8009218:	2300      	movne	r3, #0
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 80ac 	beq.w	800937a <cppLoop+0x1b32>
			HAL_Delay(500);
 8009222:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009226:	f000 f9d5 	bl	80095d4 <HAL_Delay>

			led.LR(1, -1);
 800922a:	f04f 32ff 	mov.w	r2, #4294967295
 800922e:	2101      	movs	r1, #1
 8009230:	4857      	ldr	r0, [pc, #348]	; (8009390 <cppLoop+0x1b48>)
 8009232:	f7f9 f85b 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009236:	2102      	movs	r1, #2
 8009238:	485a      	ldr	r0, [pc, #360]	; (80093a4 <cppLoop+0x1b5c>)
 800923a:	f7fa ff7f 	bl	800413c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800923e:	4b5a      	ldr	r3, [pc, #360]	; (80093a8 <cppLoop+0x1b60>)
 8009240:	edd3 7a00 	vldr	s15, [r3]
 8009244:	eeb0 0a67 	vmov.f32	s0, s15
 8009248:	4856      	ldr	r0, [pc, #344]	; (80093a4 <cppLoop+0x1b5c>)
 800924a:	f7fa fce8 	bl	8003c1e <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800924e:	4b52      	ldr	r3, [pc, #328]	; (8009398 <cppLoop+0x1b50>)
 8009250:	edd3 7a00 	vldr	s15, [r3]
 8009254:	eeb0 0a67 	vmov.f32	s0, s15
 8009258:	4852      	ldr	r0, [pc, #328]	; (80093a4 <cppLoop+0x1b5c>)
 800925a:	f7fa fcf0 	bl	8003c3e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800925e:	4b4e      	ldr	r3, [pc, #312]	; (8009398 <cppLoop+0x1b50>)
 8009260:	edd3 7a00 	vldr	s15, [r3]
 8009264:	eeb0 0a67 	vmov.f32	s0, s15
 8009268:	484e      	ldr	r0, [pc, #312]	; (80093a4 <cppLoop+0x1b5c>)
 800926a:	f7fa fd08 	bl	8003c7e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800926e:	484d      	ldr	r0, [pc, #308]	; (80093a4 <cppLoop+0x1b5c>)
 8009270:	f7fb f95a 	bl	8004528 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8009274:	484b      	ldr	r0, [pc, #300]	; (80093a4 <cppLoop+0x1b5c>)
 8009276:	f7fa ff9f 	bl	80041b8 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800927a:	f04f 32ff 	mov.w	r2, #4294967295
 800927e:	2100      	movs	r1, #0
 8009280:	4843      	ldr	r0, [pc, #268]	; (8009390 <cppLoop+0x1b48>)
 8009282:	f7f9 f833 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 8009286:	e078      	b.n	800937a <cppLoop+0x1b32>

	case 15:
		led.fullColor('W');
 8009288:	2157      	movs	r1, #87	; 0x57
 800928a:	4841      	ldr	r0, [pc, #260]	; (8009390 <cppLoop+0x1b48>)
 800928c:	f7f8 ff72 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009290:	f7f7 ff06 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009294:	2100      	movs	r1, #0
 8009296:	2000      	movs	r0, #0
 8009298:	f7f7 ff12 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 800929c:	4843      	ldr	r0, [pc, #268]	; (80093ac <cppLoop+0x1b64>)
 800929e:	f7f7 ff39 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80092a2:	2101      	movs	r1, #1
 80092a4:	2000      	movs	r0, #0
 80092a6:	f7f7 ff0b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80092aa:	4b41      	ldr	r3, [pc, #260]	; (80093b0 <cppLoop+0x1b68>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7f7 f962 	bl	8000578 <__aeabi_f2d>
 80092b4:	4603      	mov	r3, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	461a      	mov	r2, r3
 80092ba:	4623      	mov	r3, r4
 80092bc:	4837      	ldr	r0, [pc, #220]	; (800939c <cppLoop+0x1b54>)
 80092be:	f7f7 ff29 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80092c2:	4837      	ldr	r0, [pc, #220]	; (80093a0 <cppLoop+0x1b58>)
 80092c4:	f7f8 fef2 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	bf0c      	ite	eq
 80092ce:	2301      	moveq	r3, #1
 80092d0:	2300      	movne	r3, #0
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d052      	beq.n	800937e <cppLoop+0x1b36>
			HAL_Delay(500);
 80092d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092dc:	f000 f97a 	bl	80095d4 <HAL_Delay>

			led.LR(1, -1);
 80092e0:	f04f 32ff 	mov.w	r2, #4294967295
 80092e4:	2101      	movs	r1, #1
 80092e6:	482a      	ldr	r0, [pc, #168]	; (8009390 <cppLoop+0x1b48>)
 80092e8:	f7f9 f800 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80092ec:	2101      	movs	r1, #1
 80092ee:	482d      	ldr	r0, [pc, #180]	; (80093a4 <cppLoop+0x1b5c>)
 80092f0:	f7fa ff24 	bl	800413c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80092f4:	4b2f      	ldr	r3, [pc, #188]	; (80093b4 <cppLoop+0x1b6c>)
 80092f6:	edd3 7a00 	vldr	s15, [r3]
 80092fa:	eeb0 0a67 	vmov.f32	s0, s15
 80092fe:	4829      	ldr	r0, [pc, #164]	; (80093a4 <cppLoop+0x1b5c>)
 8009300:	f7fa fc8d 	bl	8003c1e <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009304:	4b2a      	ldr	r3, [pc, #168]	; (80093b0 <cppLoop+0x1b68>)
 8009306:	edd3 7a00 	vldr	s15, [r3]
 800930a:	eeb0 0a67 	vmov.f32	s0, s15
 800930e:	4825      	ldr	r0, [pc, #148]	; (80093a4 <cppLoop+0x1b5c>)
 8009310:	f7fa fc95 	bl	8003c3e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009314:	4b27      	ldr	r3, [pc, #156]	; (80093b4 <cppLoop+0x1b6c>)
 8009316:	edd3 7a00 	vldr	s15, [r3]
 800931a:	eeb0 0a67 	vmov.f32	s0, s15
 800931e:	4821      	ldr	r0, [pc, #132]	; (80093a4 <cppLoop+0x1b5c>)
 8009320:	f7fa fcad 	bl	8003c7e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009324:	481f      	ldr	r0, [pc, #124]	; (80093a4 <cppLoop+0x1b5c>)
 8009326:	f7fb f8ff 	bl	8004528 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 800932a:	481e      	ldr	r0, [pc, #120]	; (80093a4 <cppLoop+0x1b5c>)
 800932c:	f7fa ff44 	bl	80041b8 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8009330:	f04f 32ff 	mov.w	r2, #4294967295
 8009334:	2100      	movs	r1, #0
 8009336:	4816      	ldr	r0, [pc, #88]	; (8009390 <cppLoop+0x1b48>)
 8009338:	f7f8 ffd8 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 800933c:	e01f      	b.n	800937e <cppLoop+0x1b36>

	default:
		break;
 800933e:	bf00      	nop
 8009340:	e01e      	b.n	8009380 <cppLoop+0x1b38>
		break;
 8009342:	bf00      	nop
 8009344:	e01c      	b.n	8009380 <cppLoop+0x1b38>
		break;
 8009346:	bf00      	nop
 8009348:	e01a      	b.n	8009380 <cppLoop+0x1b38>
		break;
 800934a:	bf00      	nop
 800934c:	e018      	b.n	8009380 <cppLoop+0x1b38>
		break;
 800934e:	bf00      	nop
 8009350:	e016      	b.n	8009380 <cppLoop+0x1b38>
		break;
 8009352:	bf00      	nop
 8009354:	e014      	b.n	8009380 <cppLoop+0x1b38>
		break;
 8009356:	bf00      	nop
 8009358:	e012      	b.n	8009380 <cppLoop+0x1b38>
		break;
 800935a:	bf00      	nop
 800935c:	e010      	b.n	8009380 <cppLoop+0x1b38>
		break;
 800935e:	bf00      	nop
 8009360:	e00e      	b.n	8009380 <cppLoop+0x1b38>
		break;
 8009362:	bf00      	nop
 8009364:	e00c      	b.n	8009380 <cppLoop+0x1b38>
		break;
 8009366:	bf00      	nop
 8009368:	e00a      	b.n	8009380 <cppLoop+0x1b38>
		break;
 800936a:	bf00      	nop
 800936c:	e008      	b.n	8009380 <cppLoop+0x1b38>
		break;
 800936e:	bf00      	nop
 8009370:	e006      	b.n	8009380 <cppLoop+0x1b38>
		break;
 8009372:	bf00      	nop
 8009374:	e004      	b.n	8009380 <cppLoop+0x1b38>
		break;
 8009376:	bf00      	nop
 8009378:	e002      	b.n	8009380 <cppLoop+0x1b38>
		break;
 800937a:	bf00      	nop
 800937c:	e000      	b.n	8009380 <cppLoop+0x1b38>
		break;
 800937e:	bf00      	nop

	}

	HAL_Delay(30);
 8009380:	201e      	movs	r0, #30
 8009382:	f000 f927 	bl	80095d4 <HAL_Delay>

}
 8009386:	bf00      	nop
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800938e:	bf00      	nop
 8009390:	200005c8 	.word	0x200005c8
 8009394:	08019a90 	.word	0x08019a90
 8009398:	200412c0 	.word	0x200412c0
 800939c:	08019924 	.word	0x08019924
 80093a0:	200005bc 	.word	0x200005bc
 80093a4:	2001bc14 	.word	0x2001bc14
 80093a8:	200412d0 	.word	0x200412d0
 80093ac:	08019a9c 	.word	0x08019a9c
 80093b0:	200412b8 	.word	0x200412b8
 80093b4:	200412c8 	.word	0x200412c8

080093b8 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af06      	add	r7, sp, #24
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d142      	bne.n	800944e <_Z41__static_initialization_and_destruction_0ii+0x96>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d13d      	bne.n	800944e <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 80093d2:	4821      	ldr	r0, [pc, #132]	; (8009458 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80093d4:	f7f8 ffc2 	bl	800235c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80093d8:	4820      	ldr	r0, [pc, #128]	; (800945c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80093da:	f7fc f815 	bl	8005408 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80093de:	4820      	ldr	r0, [pc, #128]	; (8009460 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80093e0:	f7f8 fe58 	bl	8002094 <_ZN8JoyStickC1Ev>
Motor motor;
 80093e4:	481f      	ldr	r0, [pc, #124]	; (8009464 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80093e6:	f7fb fc3b 	bl	8004c60 <_ZN5MotorC1Ev>
IMU imu;
 80093ea:	481f      	ldr	r0, [pc, #124]	; (8009468 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80093ec:	f7f8 fc5e 	bl	8001cac <_ZN3IMUC1Ev>
Logger logger;
 80093f0:	481e      	ldr	r0, [pc, #120]	; (800946c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80093f2:	f7fb f989 	bl	8004708 <_ZN6LoggerC1Ev>
Encoder encoder;
 80093f6:	481e      	ldr	r0, [pc, #120]	; (8009470 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80093f8:	f7f7 ffe8 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80093fc:	4b1a      	ldr	r3, [pc, #104]	; (8009468 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80093fe:	4a1c      	ldr	r2, [pc, #112]	; (8009470 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009400:	4918      	ldr	r1, [pc, #96]	; (8009464 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009402:	481c      	ldr	r0, [pc, #112]	; (8009474 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009404:	f7fc f9f0 	bl	80057e8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009408:	4b1a      	ldr	r3, [pc, #104]	; (8009474 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800940a:	4a17      	ldr	r2, [pc, #92]	; (8009468 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800940c:	4918      	ldr	r1, [pc, #96]	; (8009470 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800940e:	481a      	ldr	r0, [pc, #104]	; (8009478 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009410:	f7fb fd0c 	bl	8004e2c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009414:	4819      	ldr	r0, [pc, #100]	; (800947c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009416:	f7f7 fedd 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 800941a:	4b18      	ldr	r3, [pc, #96]	; (800947c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800941c:	9305      	str	r3, [sp, #20]
 800941e:	4b12      	ldr	r3, [pc, #72]	; (8009468 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	4b12      	ldr	r3, [pc, #72]	; (800946c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009424:	9303      	str	r3, [sp, #12]
 8009426:	4b14      	ldr	r3, [pc, #80]	; (8009478 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009428:	9302      	str	r3, [sp, #8]
 800942a:	4b11      	ldr	r3, [pc, #68]	; (8009470 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	4b0b      	ldr	r3, [pc, #44]	; (800945c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	4b10      	ldr	r3, [pc, #64]	; (8009474 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009434:	4a08      	ldr	r2, [pc, #32]	; (8009458 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009436:	490b      	ldr	r1, [pc, #44]	; (8009464 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009438:	4811      	ldr	r0, [pc, #68]	; (8009480 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800943a:	f7f9 fabd 	bl	80029b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 800943e:	4a09      	ldr	r2, [pc, #36]	; (8009464 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009440:	490a      	ldr	r1, [pc, #40]	; (800946c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009442:	4810      	ldr	r0, [pc, #64]	; (8009484 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009444:	f7fc f930 	bl	80056a8 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009448:	480f      	ldr	r0, [pc, #60]	; (8009488 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800944a:	f7fb fe6f 	bl	800512c <_ZN13PathFollowingC1Ev>
}
 800944e:	bf00      	nop
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	200002bc 	.word	0x200002bc
 800945c:	200005b4 	.word	0x200005b4
 8009460:	200005bc 	.word	0x200005bc
 8009464:	200005c4 	.word	0x200005c4
 8009468:	200005d8 	.word	0x200005d8
 800946c:	200005ec 	.word	0x200005ec
 8009470:	2001bb74 	.word	0x2001bb74
 8009474:	2001bb94 	.word	0x2001bb94
 8009478:	2001bbd0 	.word	0x2001bbd0
 800947c:	2001bc10 	.word	0x2001bc10
 8009480:	2001bc14 	.word	0x2001bc14
 8009484:	20029950 	.word	0x20029950
 8009488:	20029b60 	.word	0x20029b60

0800948c <_GLOBAL__sub_I_line_sensor>:
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
 8009490:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009494:	2001      	movs	r0, #1
 8009496:	f7ff ff8f 	bl	80093b8 <_Z41__static_initialization_and_destruction_0ii>
 800949a:	bd80      	pop	{r7, pc}

0800949c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800949c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80094d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80094a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80094a2:	e003      	b.n	80094ac <LoopCopyDataInit>

080094a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80094a4:	4b0c      	ldr	r3, [pc, #48]	; (80094d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80094a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80094a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80094aa:	3104      	adds	r1, #4

080094ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80094ac:	480b      	ldr	r0, [pc, #44]	; (80094dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80094ae:	4b0c      	ldr	r3, [pc, #48]	; (80094e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80094b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80094b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80094b4:	d3f6      	bcc.n	80094a4 <CopyDataInit>
  ldr  r2, =_sbss
 80094b6:	4a0b      	ldr	r2, [pc, #44]	; (80094e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80094b8:	e002      	b.n	80094c0 <LoopFillZerobss>

080094ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80094ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80094bc:	f842 3b04 	str.w	r3, [r2], #4

080094c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80094c0:	4b09      	ldr	r3, [pc, #36]	; (80094e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80094c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80094c4:	d3f9      	bcc.n	80094ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80094c6:	f7fe f899 	bl	80075fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80094ca:	f00b fdd5 	bl	8015078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80094ce:	f7fc fbd3 	bl	8005c78 <main>
  bx  lr    
 80094d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80094d4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80094d8:	0801a098 	.word	0x0801a098
  ldr  r0, =_sdata
 80094dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80094e0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80094e4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80094e8:	20045cd8 	.word	0x20045cd8

080094ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80094ec:	e7fe      	b.n	80094ec <ADC_IRQHandler>
	...

080094f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80094f4:	4b0e      	ldr	r3, [pc, #56]	; (8009530 <HAL_Init+0x40>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a0d      	ldr	r2, [pc, #52]	; (8009530 <HAL_Init+0x40>)
 80094fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009500:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <HAL_Init+0x40>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a0a      	ldr	r2, [pc, #40]	; (8009530 <HAL_Init+0x40>)
 8009506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800950a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800950c:	4b08      	ldr	r3, [pc, #32]	; (8009530 <HAL_Init+0x40>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a07      	ldr	r2, [pc, #28]	; (8009530 <HAL_Init+0x40>)
 8009512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009518:	2003      	movs	r0, #3
 800951a:	f000 fd51 	bl	8009fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800951e:	2000      	movs	r0, #0
 8009520:	f000 f808 	bl	8009534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009524:	f7fd faba 	bl	8006a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	40023c00 	.word	0x40023c00

08009534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800953c:	4b12      	ldr	r3, [pc, #72]	; (8009588 <HAL_InitTick+0x54>)
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	4b12      	ldr	r3, [pc, #72]	; (800958c <HAL_InitTick+0x58>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	4619      	mov	r1, r3
 8009546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800954a:	fbb3 f3f1 	udiv	r3, r3, r1
 800954e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009552:	4618      	mov	r0, r3
 8009554:	f000 fd69 	bl	800a02a <HAL_SYSTICK_Config>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e00e      	b.n	8009580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b0f      	cmp	r3, #15
 8009566:	d80a      	bhi.n	800957e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009568:	2200      	movs	r2, #0
 800956a:	6879      	ldr	r1, [r7, #4]
 800956c:	f04f 30ff 	mov.w	r0, #4294967295
 8009570:	f000 fd31 	bl	8009fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009574:	4a06      	ldr	r2, [pc, #24]	; (8009590 <HAL_InitTick+0x5c>)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	e000      	b.n	8009580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
}
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000000 	.word	0x20000000
 800958c:	20000008 	.word	0x20000008
 8009590:	20000004 	.word	0x20000004

08009594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009598:	4b06      	ldr	r3, [pc, #24]	; (80095b4 <HAL_IncTick+0x20>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <HAL_IncTick+0x24>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4413      	add	r3, r2
 80095a4:	4a04      	ldr	r2, [pc, #16]	; (80095b8 <HAL_IncTick+0x24>)
 80095a6:	6013      	str	r3, [r2, #0]
}
 80095a8:	bf00      	nop
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	20000008 	.word	0x20000008
 80095b8:	20043c60 	.word	0x20043c60

080095bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
  return uwTick;
 80095c0:	4b03      	ldr	r3, [pc, #12]	; (80095d0 <HAL_GetTick+0x14>)
 80095c2:	681b      	ldr	r3, [r3, #0]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	20043c60 	.word	0x20043c60

080095d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80095dc:	f7ff ffee 	bl	80095bc <HAL_GetTick>
 80095e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ec:	d005      	beq.n	80095fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <HAL_Delay+0x40>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	4413      	add	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80095fa:	bf00      	nop
 80095fc:	f7ff ffde 	bl	80095bc <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	429a      	cmp	r2, r3
 800960a:	d8f7      	bhi.n	80095fc <HAL_Delay+0x28>
  {
  }
}
 800960c:	bf00      	nop
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20000008 	.word	0x20000008

08009618 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e033      	b.n	8009696 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009632:	2b00      	cmp	r3, #0
 8009634:	d109      	bne.n	800964a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7fd fa58 	bl	8006aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	f003 0310 	and.w	r3, r3, #16
 8009652:	2b00      	cmp	r3, #0
 8009654:	d118      	bne.n	8009688 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800965e:	f023 0302 	bic.w	r3, r3, #2
 8009662:	f043 0202 	orr.w	r2, r3, #2
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fa5a 	bl	8009b24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967a:	f023 0303 	bic.w	r3, r3, #3
 800967e:	f043 0201 	orr.w	r2, r3, #1
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	641a      	str	r2, [r3, #64]	; 0x40
 8009686:	e001      	b.n	800968c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009694:	7bfb      	ldrb	r3, [r7, #15]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d101      	bne.n	80096be <HAL_ADC_Start_DMA+0x1e>
 80096ba:	2302      	movs	r3, #2
 80096bc:	e0cc      	b.n	8009858 <HAL_ADC_Start_DMA+0x1b8>
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d018      	beq.n	8009706 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689a      	ldr	r2, [r3, #8]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0201 	orr.w	r2, r2, #1
 80096e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80096e4:	4b5e      	ldr	r3, [pc, #376]	; (8009860 <HAL_ADC_Start_DMA+0x1c0>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a5e      	ldr	r2, [pc, #376]	; (8009864 <HAL_ADC_Start_DMA+0x1c4>)
 80096ea:	fba2 2303 	umull	r2, r3, r2, r3
 80096ee:	0c9a      	lsrs	r2, r3, #18
 80096f0:	4613      	mov	r3, r2
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	4413      	add	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80096f8:	e002      	b.n	8009700 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1f9      	bne.n	80096fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b01      	cmp	r3, #1
 8009712:	f040 80a0 	bne.w	8009856 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800971e:	f023 0301 	bic.w	r3, r3, #1
 8009722:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009734:	2b00      	cmp	r3, #0
 8009736:	d007      	beq.n	8009748 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009740:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009754:	d106      	bne.n	8009764 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800975a:	f023 0206 	bic.w	r2, r3, #6
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	645a      	str	r2, [r3, #68]	; 0x44
 8009762:	e002      	b.n	800976a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009772:	4b3d      	ldr	r3, [pc, #244]	; (8009868 <HAL_ADC_Start_DMA+0x1c8>)
 8009774:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977a:	4a3c      	ldr	r2, [pc, #240]	; (800986c <HAL_ADC_Start_DMA+0x1cc>)
 800977c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	4a3b      	ldr	r2, [pc, #236]	; (8009870 <HAL_ADC_Start_DMA+0x1d0>)
 8009784:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978a:	4a3a      	ldr	r2, [pc, #232]	; (8009874 <HAL_ADC_Start_DMA+0x1d4>)
 800978c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009796:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685a      	ldr	r2, [r3, #4]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80097a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689a      	ldr	r2, [r3, #8]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	334c      	adds	r3, #76	; 0x4c
 80097c2:	4619      	mov	r1, r3
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f000 fcea 	bl	800a1a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f003 031f 	and.w	r3, r3, #31
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d12a      	bne.n	800982e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a26      	ldr	r2, [pc, #152]	; (8009878 <HAL_ADC_Start_DMA+0x1d8>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d015      	beq.n	800980e <HAL_ADC_Start_DMA+0x16e>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a25      	ldr	r2, [pc, #148]	; (800987c <HAL_ADC_Start_DMA+0x1dc>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d105      	bne.n	80097f8 <HAL_ADC_Start_DMA+0x158>
 80097ec:	4b1e      	ldr	r3, [pc, #120]	; (8009868 <HAL_ADC_Start_DMA+0x1c8>)
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	f003 031f 	and.w	r3, r3, #31
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00a      	beq.n	800980e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a20      	ldr	r2, [pc, #128]	; (8009880 <HAL_ADC_Start_DMA+0x1e0>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d129      	bne.n	8009856 <HAL_ADC_Start_DMA+0x1b6>
 8009802:	4b19      	ldr	r3, [pc, #100]	; (8009868 <HAL_ADC_Start_DMA+0x1c8>)
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	f003 031f 	and.w	r3, r3, #31
 800980a:	2b0f      	cmp	r3, #15
 800980c:	d823      	bhi.n	8009856 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d11c      	bne.n	8009856 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	689a      	ldr	r2, [r3, #8]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800982a:	609a      	str	r2, [r3, #8]
 800982c:	e013      	b.n	8009856 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a11      	ldr	r2, [pc, #68]	; (8009878 <HAL_ADC_Start_DMA+0x1d8>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d10e      	bne.n	8009856 <HAL_ADC_Start_DMA+0x1b6>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d107      	bne.n	8009856 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009854:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20000000 	.word	0x20000000
 8009864:	431bde83 	.word	0x431bde83
 8009868:	40012300 	.word	0x40012300
 800986c:	08009d1d 	.word	0x08009d1d
 8009870:	08009dd7 	.word	0x08009dd7
 8009874:	08009df3 	.word	0x08009df3
 8009878:	40012000 	.word	0x40012000
 800987c:	40012100 	.word	0x40012100
 8009880:	40012200 	.word	0x40012200

08009884 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d101      	bne.n	80098dc <HAL_ADC_ConfigChannel+0x1c>
 80098d8:	2302      	movs	r3, #2
 80098da:	e113      	b.n	8009b04 <HAL_ADC_ConfigChannel+0x244>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b09      	cmp	r3, #9
 80098ea:	d925      	bls.n	8009938 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68d9      	ldr	r1, [r3, #12]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	461a      	mov	r2, r3
 80098fa:	4613      	mov	r3, r2
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	4413      	add	r3, r2
 8009900:	3b1e      	subs	r3, #30
 8009902:	2207      	movs	r2, #7
 8009904:	fa02 f303 	lsl.w	r3, r2, r3
 8009908:	43da      	mvns	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	400a      	ands	r2, r1
 8009910:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68d9      	ldr	r1, [r3, #12]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	b29b      	uxth	r3, r3
 8009922:	4618      	mov	r0, r3
 8009924:	4603      	mov	r3, r0
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	4403      	add	r3, r0
 800992a:	3b1e      	subs	r3, #30
 800992c:	409a      	lsls	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	430a      	orrs	r2, r1
 8009934:	60da      	str	r2, [r3, #12]
 8009936:	e022      	b.n	800997e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	6919      	ldr	r1, [r3, #16]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	b29b      	uxth	r3, r3
 8009944:	461a      	mov	r2, r3
 8009946:	4613      	mov	r3, r2
 8009948:	005b      	lsls	r3, r3, #1
 800994a:	4413      	add	r3, r2
 800994c:	2207      	movs	r2, #7
 800994e:	fa02 f303 	lsl.w	r3, r2, r3
 8009952:	43da      	mvns	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	400a      	ands	r2, r1
 800995a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6919      	ldr	r1, [r3, #16]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	689a      	ldr	r2, [r3, #8]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	b29b      	uxth	r3, r3
 800996c:	4618      	mov	r0, r3
 800996e:	4603      	mov	r3, r0
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	4403      	add	r3, r0
 8009974:	409a      	lsls	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	430a      	orrs	r2, r1
 800997c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	2b06      	cmp	r3, #6
 8009984:	d824      	bhi.n	80099d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	4613      	mov	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	3b05      	subs	r3, #5
 8009998:	221f      	movs	r2, #31
 800999a:	fa02 f303 	lsl.w	r3, r2, r3
 800999e:	43da      	mvns	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	400a      	ands	r2, r1
 80099a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	4618      	mov	r0, r3
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	4613      	mov	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	3b05      	subs	r3, #5
 80099c2:	fa00 f203 	lsl.w	r2, r0, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	430a      	orrs	r2, r1
 80099cc:	635a      	str	r2, [r3, #52]	; 0x34
 80099ce:	e04c      	b.n	8009a6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	2b0c      	cmp	r3, #12
 80099d6:	d824      	bhi.n	8009a22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	3b23      	subs	r3, #35	; 0x23
 80099ea:	221f      	movs	r2, #31
 80099ec:	fa02 f303 	lsl.w	r3, r2, r3
 80099f0:	43da      	mvns	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	400a      	ands	r2, r1
 80099f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	4618      	mov	r0, r3
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	3b23      	subs	r3, #35	; 0x23
 8009a14:	fa00 f203 	lsl.w	r2, r0, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8009a20:	e023      	b.n	8009a6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	3b41      	subs	r3, #65	; 0x41
 8009a34:	221f      	movs	r2, #31
 8009a36:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3a:	43da      	mvns	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	400a      	ands	r2, r1
 8009a42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	4618      	mov	r0, r3
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	4613      	mov	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	3b41      	subs	r3, #65	; 0x41
 8009a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009a6a:	4b29      	ldr	r3, [pc, #164]	; (8009b10 <HAL_ADC_ConfigChannel+0x250>)
 8009a6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a28      	ldr	r2, [pc, #160]	; (8009b14 <HAL_ADC_ConfigChannel+0x254>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d10f      	bne.n	8009a98 <HAL_ADC_ConfigChannel+0x1d8>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b12      	cmp	r3, #18
 8009a7e:	d10b      	bne.n	8009a98 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a1d      	ldr	r2, [pc, #116]	; (8009b14 <HAL_ADC_ConfigChannel+0x254>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d12b      	bne.n	8009afa <HAL_ADC_ConfigChannel+0x23a>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a1c      	ldr	r2, [pc, #112]	; (8009b18 <HAL_ADC_ConfigChannel+0x258>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d003      	beq.n	8009ab4 <HAL_ADC_ConfigChannel+0x1f4>
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b11      	cmp	r3, #17
 8009ab2:	d122      	bne.n	8009afa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a11      	ldr	r2, [pc, #68]	; (8009b18 <HAL_ADC_ConfigChannel+0x258>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d111      	bne.n	8009afa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009ad6:	4b11      	ldr	r3, [pc, #68]	; (8009b1c <HAL_ADC_ConfigChannel+0x25c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a11      	ldr	r2, [pc, #68]	; (8009b20 <HAL_ADC_ConfigChannel+0x260>)
 8009adc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae0:	0c9a      	lsrs	r2, r3, #18
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009aec:	e002      	b.n	8009af4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1f9      	bne.n	8009aee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	40012300 	.word	0x40012300
 8009b14:	40012000 	.word	0x40012000
 8009b18:	10000012 	.word	0x10000012
 8009b1c:	20000000 	.word	0x20000000
 8009b20:	431bde83 	.word	0x431bde83

08009b24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009b2c:	4b79      	ldr	r3, [pc, #484]	; (8009d14 <ADC_Init+0x1f0>)
 8009b2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	431a      	orrs	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6859      	ldr	r1, [r3, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	021a      	lsls	r2, r3, #8
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	685a      	ldr	r2, [r3, #4]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009b7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	6859      	ldr	r1, [r3, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689a      	ldr	r2, [r3, #8]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6899      	ldr	r1, [r3, #8]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb6:	4a58      	ldr	r2, [pc, #352]	; (8009d18 <ADC_Init+0x1f4>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d022      	beq.n	8009c02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009bca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6899      	ldr	r1, [r3, #8]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689a      	ldr	r2, [r3, #8]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6899      	ldr	r1, [r3, #8]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	609a      	str	r2, [r3, #8]
 8009c00:	e00f      	b.n	8009c22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	689a      	ldr	r2, [r3, #8]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009c10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009c20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689a      	ldr	r2, [r3, #8]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0202 	bic.w	r2, r2, #2
 8009c30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6899      	ldr	r1, [r3, #8]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	7e1b      	ldrb	r3, [r3, #24]
 8009c3c:	005a      	lsls	r2, r3, #1
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	430a      	orrs	r2, r1
 8009c44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d01b      	beq.n	8009c88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009c6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6859      	ldr	r1, [r3, #4]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	035a      	lsls	r2, r3, #13
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	430a      	orrs	r2, r1
 8009c84:	605a      	str	r2, [r3, #4]
 8009c86:	e007      	b.n	8009c98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	685a      	ldr	r2, [r3, #4]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	051a      	lsls	r2, r3, #20
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	430a      	orrs	r2, r1
 8009cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6899      	ldr	r1, [r3, #8]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009cda:	025a      	lsls	r2, r3, #9
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6899      	ldr	r1, [r3, #8]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	029a      	lsls	r2, r3, #10
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	609a      	str	r2, [r3, #8]
}
 8009d08:	bf00      	nop
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	40012300 	.word	0x40012300
 8009d18:	0f000001 	.word	0x0f000001

08009d1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d13c      	bne.n	8009db0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d12b      	bne.n	8009da8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d127      	bne.n	8009da8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d006      	beq.n	8009d74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d119      	bne.n	8009da8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f022 0220 	bic.w	r2, r2, #32
 8009d82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d105      	bne.n	8009da8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da0:	f043 0201 	orr.w	r2, r3, #1
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f7ff fd6b 	bl	8009884 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009dae:	e00e      	b.n	8009dce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db4:	f003 0310 	and.w	r3, r3, #16
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f7ff fd75 	bl	80098ac <HAL_ADC_ErrorCallback>
}
 8009dc2:	e004      	b.n	8009dce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	4798      	blx	r3
}
 8009dce:	bf00      	nop
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b084      	sub	sp, #16
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f7ff fd57 	bl	8009898 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009dea:	bf00      	nop
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2240      	movs	r2, #64	; 0x40
 8009e04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e0a:	f043 0204 	orr.w	r2, r3, #4
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f7ff fd4a 	bl	80098ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f003 0307 	and.w	r3, r3, #7
 8009e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e30:	4b0c      	ldr	r3, [pc, #48]	; (8009e64 <__NVIC_SetPriorityGrouping+0x44>)
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e52:	4a04      	ldr	r2, [pc, #16]	; (8009e64 <__NVIC_SetPriorityGrouping+0x44>)
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	60d3      	str	r3, [r2, #12]
}
 8009e58:	bf00      	nop
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	e000ed00 	.word	0xe000ed00

08009e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e6c:	4b04      	ldr	r3, [pc, #16]	; (8009e80 <__NVIC_GetPriorityGrouping+0x18>)
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	0a1b      	lsrs	r3, r3, #8
 8009e72:	f003 0307 	and.w	r3, r3, #7
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	e000ed00 	.word	0xe000ed00

08009e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	db0b      	blt.n	8009eae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	f003 021f 	and.w	r2, r3, #31
 8009e9c:	4907      	ldr	r1, [pc, #28]	; (8009ebc <__NVIC_EnableIRQ+0x38>)
 8009e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ea2:	095b      	lsrs	r3, r3, #5
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8009eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009eae:	bf00      	nop
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	e000e100 	.word	0xe000e100

08009ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	6039      	str	r1, [r7, #0]
 8009eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	db0a      	blt.n	8009eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	490c      	ldr	r1, [pc, #48]	; (8009f0c <__NVIC_SetPriority+0x4c>)
 8009eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ede:	0112      	lsls	r2, r2, #4
 8009ee0:	b2d2      	uxtb	r2, r2
 8009ee2:	440b      	add	r3, r1
 8009ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009ee8:	e00a      	b.n	8009f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	4908      	ldr	r1, [pc, #32]	; (8009f10 <__NVIC_SetPriority+0x50>)
 8009ef0:	79fb      	ldrb	r3, [r7, #7]
 8009ef2:	f003 030f 	and.w	r3, r3, #15
 8009ef6:	3b04      	subs	r3, #4
 8009ef8:	0112      	lsls	r2, r2, #4
 8009efa:	b2d2      	uxtb	r2, r2
 8009efc:	440b      	add	r3, r1
 8009efe:	761a      	strb	r2, [r3, #24]
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	e000e100 	.word	0xe000e100
 8009f10:	e000ed00 	.word	0xe000ed00

08009f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b089      	sub	sp, #36	; 0x24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f003 0307 	and.w	r3, r3, #7
 8009f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	f1c3 0307 	rsb	r3, r3, #7
 8009f2e:	2b04      	cmp	r3, #4
 8009f30:	bf28      	it	cs
 8009f32:	2304      	movcs	r3, #4
 8009f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	2b06      	cmp	r3, #6
 8009f3c:	d902      	bls.n	8009f44 <NVIC_EncodePriority+0x30>
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	3b03      	subs	r3, #3
 8009f42:	e000      	b.n	8009f46 <NVIC_EncodePriority+0x32>
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f48:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f52:	43da      	mvns	r2, r3
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	401a      	ands	r2, r3
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	fa01 f303 	lsl.w	r3, r1, r3
 8009f66:	43d9      	mvns	r1, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f6c:	4313      	orrs	r3, r2
         );
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3724      	adds	r7, #36	; 0x24
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
	...

08009f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3b01      	subs	r3, #1
 8009f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f8c:	d301      	bcc.n	8009f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e00f      	b.n	8009fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009f92:	4a0a      	ldr	r2, [pc, #40]	; (8009fbc <SysTick_Config+0x40>)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009f9a:	210f      	movs	r1, #15
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	f7ff ff8e 	bl	8009ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009fa4:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <SysTick_Config+0x40>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009faa:	4b04      	ldr	r3, [pc, #16]	; (8009fbc <SysTick_Config+0x40>)
 8009fac:	2207      	movs	r2, #7
 8009fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	e000e010 	.word	0xe000e010

08009fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7ff ff29 	bl	8009e20 <__NVIC_SetPriorityGrouping>
}
 8009fce:	bf00      	nop
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b086      	sub	sp, #24
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	4603      	mov	r3, r0
 8009fde:	60b9      	str	r1, [r7, #8]
 8009fe0:	607a      	str	r2, [r7, #4]
 8009fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009fe8:	f7ff ff3e 	bl	8009e68 <__NVIC_GetPriorityGrouping>
 8009fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	68b9      	ldr	r1, [r7, #8]
 8009ff2:	6978      	ldr	r0, [r7, #20]
 8009ff4:	f7ff ff8e 	bl	8009f14 <NVIC_EncodePriority>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ffe:	4611      	mov	r1, r2
 800a000:	4618      	mov	r0, r3
 800a002:	f7ff ff5d 	bl	8009ec0 <__NVIC_SetPriority>
}
 800a006:	bf00      	nop
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b082      	sub	sp, #8
 800a012:	af00      	add	r7, sp, #0
 800a014:	4603      	mov	r3, r0
 800a016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7ff ff31 	bl	8009e84 <__NVIC_EnableIRQ>
}
 800a022:	bf00      	nop
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b082      	sub	sp, #8
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7ff ffa2 	bl	8009f7c <SysTick_Config>
 800a038:	4603      	mov	r3, r0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a050:	f7ff fab4 	bl	80095bc <HAL_GetTick>
 800a054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e099      	b.n	800a194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2202      	movs	r2, #2
 800a06c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f022 0201 	bic.w	r2, r2, #1
 800a07e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a080:	e00f      	b.n	800a0a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a082:	f7ff fa9b 	bl	80095bc <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	2b05      	cmp	r3, #5
 800a08e:	d908      	bls.n	800a0a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2220      	movs	r2, #32
 800a094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2203      	movs	r2, #3
 800a09a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e078      	b.n	800a194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e8      	bne.n	800a082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	4b38      	ldr	r3, [pc, #224]	; (800a19c <HAL_DMA_Init+0x158>)
 800a0bc:	4013      	ands	r3, r2
 800a0be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685a      	ldr	r2, [r3, #4]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a0da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a0e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f8:	2b04      	cmp	r3, #4
 800a0fa:	d107      	bne.n	800a10c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a104:	4313      	orrs	r3, r2
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	4313      	orrs	r3, r2
 800a10a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f023 0307 	bic.w	r3, r3, #7
 800a122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a132:	2b04      	cmp	r3, #4
 800a134:	d117      	bne.n	800a166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00e      	beq.n	800a166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fa9d 	bl	800a688 <DMA_CheckFifoParam>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d008      	beq.n	800a166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2240      	movs	r2, #64	; 0x40
 800a158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a162:	2301      	movs	r3, #1
 800a164:	e016      	b.n	800a194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fa54 	bl	800a61c <DMA_CalcBaseAndBitshift>
 800a174:	4603      	mov	r3, r0
 800a176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a17c:	223f      	movs	r2, #63	; 0x3f
 800a17e:	409a      	lsls	r2, r3
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	f010803f 	.word	0xf010803f

0800a1a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d101      	bne.n	800a1c6 <HAL_DMA_Start_IT+0x26>
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	e040      	b.n	800a248 <HAL_DMA_Start_IT+0xa8>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d12f      	bne.n	800a23a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2202      	movs	r2, #2
 800a1de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	68b9      	ldr	r1, [r7, #8]
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 f9e6 	bl	800a5c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1f8:	223f      	movs	r2, #63	; 0x3f
 800a1fa:	409a      	lsls	r2, r3
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f042 0216 	orr.w	r2, r2, #22
 800a20e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a214:	2b00      	cmp	r3, #0
 800a216:	d007      	beq.n	800a228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f042 0208 	orr.w	r2, r2, #8
 800a226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f042 0201 	orr.w	r2, r2, #1
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	e005      	b.n	800a246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a242:	2302      	movs	r3, #2
 800a244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a246:	7dfb      	ldrb	r3, [r7, #23]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3718      	adds	r7, #24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b02      	cmp	r3, #2
 800a262:	d004      	beq.n	800a26e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2280      	movs	r2, #128	; 0x80
 800a268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e00c      	b.n	800a288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2205      	movs	r2, #5
 800a272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f022 0201 	bic.w	r2, r2, #1
 800a284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a29c:	2300      	movs	r3, #0
 800a29e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a2a0:	4b92      	ldr	r3, [pc, #584]	; (800a4ec <HAL_DMA_IRQHandler+0x258>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a92      	ldr	r2, [pc, #584]	; (800a4f0 <HAL_DMA_IRQHandler+0x25c>)
 800a2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2aa:	0a9b      	lsrs	r3, r3, #10
 800a2ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2be:	2208      	movs	r2, #8
 800a2c0:	409a      	lsls	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d01a      	beq.n	800a300 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d013      	beq.n	800a300 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 0204 	bic.w	r2, r2, #4
 800a2e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ec:	2208      	movs	r2, #8
 800a2ee:	409a      	lsls	r2, r3
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f8:	f043 0201 	orr.w	r2, r3, #1
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a304:	2201      	movs	r2, #1
 800a306:	409a      	lsls	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4013      	ands	r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d012      	beq.n	800a336 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00b      	beq.n	800a336 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a322:	2201      	movs	r2, #1
 800a324:	409a      	lsls	r2, r3
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a32e:	f043 0202 	orr.w	r2, r3, #2
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a33a:	2204      	movs	r2, #4
 800a33c:	409a      	lsls	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	4013      	ands	r3, r2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d012      	beq.n	800a36c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00b      	beq.n	800a36c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a358:	2204      	movs	r2, #4
 800a35a:	409a      	lsls	r2, r3
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a364:	f043 0204 	orr.w	r2, r3, #4
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a370:	2210      	movs	r2, #16
 800a372:	409a      	lsls	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	4013      	ands	r3, r2
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d043      	beq.n	800a404 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0308 	and.w	r3, r3, #8
 800a386:	2b00      	cmp	r3, #0
 800a388:	d03c      	beq.n	800a404 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a38e:	2210      	movs	r2, #16
 800a390:	409a      	lsls	r2, r3
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d018      	beq.n	800a3d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d108      	bne.n	800a3c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d024      	beq.n	800a404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	4798      	blx	r3
 800a3c2:	e01f      	b.n	800a404 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d01b      	beq.n	800a404 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	4798      	blx	r3
 800a3d4:	e016      	b.n	800a404 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d107      	bne.n	800a3f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f022 0208 	bic.w	r2, r2, #8
 800a3f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d003      	beq.n	800a404 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a408:	2220      	movs	r2, #32
 800a40a:	409a      	lsls	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	4013      	ands	r3, r2
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 808e 	beq.w	800a532 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0310 	and.w	r3, r3, #16
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 8086 	beq.w	800a532 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a42a:	2220      	movs	r2, #32
 800a42c:	409a      	lsls	r2, r3
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	2b05      	cmp	r3, #5
 800a43c:	d136      	bne.n	800a4ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 0216 	bic.w	r2, r2, #22
 800a44c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	695a      	ldr	r2, [r3, #20]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a45c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	2b00      	cmp	r3, #0
 800a464:	d103      	bne.n	800a46e <HAL_DMA_IRQHandler+0x1da>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d007      	beq.n	800a47e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 0208 	bic.w	r2, r2, #8
 800a47c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a482:	223f      	movs	r2, #63	; 0x3f
 800a484:	409a      	lsls	r2, r3
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d07d      	beq.n	800a59e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	4798      	blx	r3
        }
        return;
 800a4aa:	e078      	b.n	800a59e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d01c      	beq.n	800a4f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d108      	bne.n	800a4da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d030      	beq.n	800a532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	4798      	blx	r3
 800a4d8:	e02b      	b.n	800a532 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d027      	beq.n	800a532 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	4798      	blx	r3
 800a4ea:	e022      	b.n	800a532 <HAL_DMA_IRQHandler+0x29e>
 800a4ec:	20000000 	.word	0x20000000
 800a4f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10f      	bne.n	800a522 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f022 0210 	bic.w	r2, r2, #16
 800a510:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a536:	2b00      	cmp	r3, #0
 800a538:	d032      	beq.n	800a5a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	d022      	beq.n	800a58c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2205      	movs	r2, #5
 800a54a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f022 0201 	bic.w	r2, r2, #1
 800a55c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	3301      	adds	r3, #1
 800a562:	60bb      	str	r3, [r7, #8]
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	429a      	cmp	r2, r3
 800a568:	d307      	bcc.n	800a57a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1f2      	bne.n	800a55e <HAL_DMA_IRQHandler+0x2ca>
 800a578:	e000      	b.n	800a57c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a57a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a590:	2b00      	cmp	r3, #0
 800a592:	d005      	beq.n	800a5a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	4798      	blx	r3
 800a59c:	e000      	b.n	800a5a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a59e:	bf00      	nop
    }
  }
}
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop

0800a5a8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
 800a5cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a5dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	2b40      	cmp	r3, #64	; 0x40
 800a5ec:	d108      	bne.n	800a600 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a5fe:	e007      	b.n	800a610 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	60da      	str	r2, [r3, #12]
}
 800a610:	bf00      	nop
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	3b10      	subs	r3, #16
 800a62c:	4a14      	ldr	r2, [pc, #80]	; (800a680 <DMA_CalcBaseAndBitshift+0x64>)
 800a62e:	fba2 2303 	umull	r2, r3, r2, r3
 800a632:	091b      	lsrs	r3, r3, #4
 800a634:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a636:	4a13      	ldr	r2, [pc, #76]	; (800a684 <DMA_CalcBaseAndBitshift+0x68>)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	4413      	add	r3, r2
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2b03      	cmp	r3, #3
 800a648:	d909      	bls.n	800a65e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a652:	f023 0303 	bic.w	r3, r3, #3
 800a656:	1d1a      	adds	r2, r3, #4
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	659a      	str	r2, [r3, #88]	; 0x58
 800a65c:	e007      	b.n	800a66e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a666:	f023 0303 	bic.w	r3, r3, #3
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a672:	4618      	mov	r0, r3
 800a674:	3714      	adds	r7, #20
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	aaaaaaab 	.word	0xaaaaaaab
 800a684:	08019adc 	.word	0x08019adc

0800a688 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a690:	2300      	movs	r3, #0
 800a692:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a698:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d11f      	bne.n	800a6e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d855      	bhi.n	800a754 <DMA_CheckFifoParam+0xcc>
 800a6a8:	a201      	add	r2, pc, #4	; (adr r2, 800a6b0 <DMA_CheckFifoParam+0x28>)
 800a6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ae:	bf00      	nop
 800a6b0:	0800a6c1 	.word	0x0800a6c1
 800a6b4:	0800a6d3 	.word	0x0800a6d3
 800a6b8:	0800a6c1 	.word	0x0800a6c1
 800a6bc:	0800a755 	.word	0x0800a755
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d045      	beq.n	800a758 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6d0:	e042      	b.n	800a758 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a6da:	d13f      	bne.n	800a75c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6e0:	e03c      	b.n	800a75c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ea:	d121      	bne.n	800a730 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d836      	bhi.n	800a760 <DMA_CheckFifoParam+0xd8>
 800a6f2:	a201      	add	r2, pc, #4	; (adr r2, 800a6f8 <DMA_CheckFifoParam+0x70>)
 800a6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f8:	0800a709 	.word	0x0800a709
 800a6fc:	0800a70f 	.word	0x0800a70f
 800a700:	0800a709 	.word	0x0800a709
 800a704:	0800a721 	.word	0x0800a721
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	73fb      	strb	r3, [r7, #15]
      break;
 800a70c:	e02f      	b.n	800a76e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d024      	beq.n	800a764 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a71e:	e021      	b.n	800a764 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a724:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a728:	d11e      	bne.n	800a768 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a72e:	e01b      	b.n	800a768 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2b02      	cmp	r3, #2
 800a734:	d902      	bls.n	800a73c <DMA_CheckFifoParam+0xb4>
 800a736:	2b03      	cmp	r3, #3
 800a738:	d003      	beq.n	800a742 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a73a:	e018      	b.n	800a76e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	73fb      	strb	r3, [r7, #15]
      break;
 800a740:	e015      	b.n	800a76e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00e      	beq.n	800a76c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	73fb      	strb	r3, [r7, #15]
      break;
 800a752:	e00b      	b.n	800a76c <DMA_CheckFifoParam+0xe4>
      break;
 800a754:	bf00      	nop
 800a756:	e00a      	b.n	800a76e <DMA_CheckFifoParam+0xe6>
      break;
 800a758:	bf00      	nop
 800a75a:	e008      	b.n	800a76e <DMA_CheckFifoParam+0xe6>
      break;
 800a75c:	bf00      	nop
 800a75e:	e006      	b.n	800a76e <DMA_CheckFifoParam+0xe6>
      break;
 800a760:	bf00      	nop
 800a762:	e004      	b.n	800a76e <DMA_CheckFifoParam+0xe6>
      break;
 800a764:	bf00      	nop
 800a766:	e002      	b.n	800a76e <DMA_CheckFifoParam+0xe6>
      break;   
 800a768:	bf00      	nop
 800a76a:	e000      	b.n	800a76e <DMA_CheckFifoParam+0xe6>
      break;
 800a76c:	bf00      	nop
    }
  } 
  
  return status; 
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3714      	adds	r7, #20
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b089      	sub	sp, #36	; 0x24
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a78a:	2300      	movs	r3, #0
 800a78c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a78e:	2300      	movs	r3, #0
 800a790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a792:	2300      	movs	r3, #0
 800a794:	61fb      	str	r3, [r7, #28]
 800a796:	e177      	b.n	800aa88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a798:	2201      	movs	r2, #1
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	f040 8166 	bne.w	800aa82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d00b      	beq.n	800a7d6 <HAL_GPIO_Init+0x5a>
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	d007      	beq.n	800a7d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a7ca:	2b11      	cmp	r3, #17
 800a7cc:	d003      	beq.n	800a7d6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	2b12      	cmp	r3, #18
 800a7d4:	d130      	bne.n	800a838 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	005b      	lsls	r3, r3, #1
 800a7e0:	2203      	movs	r2, #3
 800a7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e6:	43db      	mvns	r3, r3
 800a7e8:	69ba      	ldr	r2, [r7, #24]
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	68da      	ldr	r2, [r3, #12]
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fa:	69ba      	ldr	r2, [r7, #24]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	69ba      	ldr	r2, [r7, #24]
 800a804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a80c:	2201      	movs	r2, #1
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	fa02 f303 	lsl.w	r3, r2, r3
 800a814:	43db      	mvns	r3, r3
 800a816:	69ba      	ldr	r2, [r7, #24]
 800a818:	4013      	ands	r3, r2
 800a81a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	091b      	lsrs	r3, r3, #4
 800a822:	f003 0201 	and.w	r2, r3, #1
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	fa02 f303 	lsl.w	r3, r2, r3
 800a82c:	69ba      	ldr	r2, [r7, #24]
 800a82e:	4313      	orrs	r3, r2
 800a830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	69ba      	ldr	r2, [r7, #24]
 800a836:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	2203      	movs	r2, #3
 800a844:	fa02 f303 	lsl.w	r3, r2, r3
 800a848:	43db      	mvns	r3, r3
 800a84a:	69ba      	ldr	r2, [r7, #24]
 800a84c:	4013      	ands	r3, r2
 800a84e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	689a      	ldr	r2, [r3, #8]
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	fa02 f303 	lsl.w	r3, r2, r3
 800a85c:	69ba      	ldr	r2, [r7, #24]
 800a85e:	4313      	orrs	r3, r2
 800a860:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	69ba      	ldr	r2, [r7, #24]
 800a866:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	2b02      	cmp	r3, #2
 800a86e:	d003      	beq.n	800a878 <HAL_GPIO_Init+0xfc>
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	2b12      	cmp	r3, #18
 800a876:	d123      	bne.n	800a8c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	08da      	lsrs	r2, r3, #3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	3208      	adds	r2, #8
 800a880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	f003 0307 	and.w	r3, r3, #7
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	220f      	movs	r2, #15
 800a890:	fa02 f303 	lsl.w	r3, r2, r3
 800a894:	43db      	mvns	r3, r3
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	4013      	ands	r3, r2
 800a89a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	691a      	ldr	r2, [r3, #16]
 800a8a0:	69fb      	ldr	r3, [r7, #28]
 800a8a2:	f003 0307 	and.w	r3, r3, #7
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	08da      	lsrs	r2, r3, #3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	3208      	adds	r2, #8
 800a8ba:	69b9      	ldr	r1, [r7, #24]
 800a8bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	2203      	movs	r2, #3
 800a8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d0:	43db      	mvns	r3, r3
 800a8d2:	69ba      	ldr	r2, [r7, #24]
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f003 0203 	and.w	r2, r3, #3
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e8:	69ba      	ldr	r2, [r7, #24]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	69ba      	ldr	r2, [r7, #24]
 800a8f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f000 80c0 	beq.w	800aa82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a902:	2300      	movs	r3, #0
 800a904:	60fb      	str	r3, [r7, #12]
 800a906:	4b65      	ldr	r3, [pc, #404]	; (800aa9c <HAL_GPIO_Init+0x320>)
 800a908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a90a:	4a64      	ldr	r2, [pc, #400]	; (800aa9c <HAL_GPIO_Init+0x320>)
 800a90c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a910:	6453      	str	r3, [r2, #68]	; 0x44
 800a912:	4b62      	ldr	r3, [pc, #392]	; (800aa9c <HAL_GPIO_Init+0x320>)
 800a914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a91e:	4a60      	ldr	r2, [pc, #384]	; (800aaa0 <HAL_GPIO_Init+0x324>)
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	089b      	lsrs	r3, r3, #2
 800a924:	3302      	adds	r3, #2
 800a926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a92a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	f003 0303 	and.w	r3, r3, #3
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	220f      	movs	r2, #15
 800a936:	fa02 f303 	lsl.w	r3, r2, r3
 800a93a:	43db      	mvns	r3, r3
 800a93c:	69ba      	ldr	r2, [r7, #24]
 800a93e:	4013      	ands	r3, r2
 800a940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a57      	ldr	r2, [pc, #348]	; (800aaa4 <HAL_GPIO_Init+0x328>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d037      	beq.n	800a9ba <HAL_GPIO_Init+0x23e>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a56      	ldr	r2, [pc, #344]	; (800aaa8 <HAL_GPIO_Init+0x32c>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d031      	beq.n	800a9b6 <HAL_GPIO_Init+0x23a>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a55      	ldr	r2, [pc, #340]	; (800aaac <HAL_GPIO_Init+0x330>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d02b      	beq.n	800a9b2 <HAL_GPIO_Init+0x236>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a54      	ldr	r2, [pc, #336]	; (800aab0 <HAL_GPIO_Init+0x334>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d025      	beq.n	800a9ae <HAL_GPIO_Init+0x232>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a53      	ldr	r2, [pc, #332]	; (800aab4 <HAL_GPIO_Init+0x338>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d01f      	beq.n	800a9aa <HAL_GPIO_Init+0x22e>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a52      	ldr	r2, [pc, #328]	; (800aab8 <HAL_GPIO_Init+0x33c>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d019      	beq.n	800a9a6 <HAL_GPIO_Init+0x22a>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a51      	ldr	r2, [pc, #324]	; (800aabc <HAL_GPIO_Init+0x340>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d013      	beq.n	800a9a2 <HAL_GPIO_Init+0x226>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a50      	ldr	r2, [pc, #320]	; (800aac0 <HAL_GPIO_Init+0x344>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d00d      	beq.n	800a99e <HAL_GPIO_Init+0x222>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a4f      	ldr	r2, [pc, #316]	; (800aac4 <HAL_GPIO_Init+0x348>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d007      	beq.n	800a99a <HAL_GPIO_Init+0x21e>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a4e      	ldr	r2, [pc, #312]	; (800aac8 <HAL_GPIO_Init+0x34c>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d101      	bne.n	800a996 <HAL_GPIO_Init+0x21a>
 800a992:	2309      	movs	r3, #9
 800a994:	e012      	b.n	800a9bc <HAL_GPIO_Init+0x240>
 800a996:	230a      	movs	r3, #10
 800a998:	e010      	b.n	800a9bc <HAL_GPIO_Init+0x240>
 800a99a:	2308      	movs	r3, #8
 800a99c:	e00e      	b.n	800a9bc <HAL_GPIO_Init+0x240>
 800a99e:	2307      	movs	r3, #7
 800a9a0:	e00c      	b.n	800a9bc <HAL_GPIO_Init+0x240>
 800a9a2:	2306      	movs	r3, #6
 800a9a4:	e00a      	b.n	800a9bc <HAL_GPIO_Init+0x240>
 800a9a6:	2305      	movs	r3, #5
 800a9a8:	e008      	b.n	800a9bc <HAL_GPIO_Init+0x240>
 800a9aa:	2304      	movs	r3, #4
 800a9ac:	e006      	b.n	800a9bc <HAL_GPIO_Init+0x240>
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e004      	b.n	800a9bc <HAL_GPIO_Init+0x240>
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	e002      	b.n	800a9bc <HAL_GPIO_Init+0x240>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e000      	b.n	800a9bc <HAL_GPIO_Init+0x240>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	69fa      	ldr	r2, [r7, #28]
 800a9be:	f002 0203 	and.w	r2, r2, #3
 800a9c2:	0092      	lsls	r2, r2, #2
 800a9c4:	4093      	lsls	r3, r2
 800a9c6:	69ba      	ldr	r2, [r7, #24]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a9cc:	4934      	ldr	r1, [pc, #208]	; (800aaa0 <HAL_GPIO_Init+0x324>)
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	089b      	lsrs	r3, r3, #2
 800a9d2:	3302      	adds	r3, #2
 800a9d4:	69ba      	ldr	r2, [r7, #24]
 800a9d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a9da:	4b3c      	ldr	r3, [pc, #240]	; (800aacc <HAL_GPIO_Init+0x350>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	43db      	mvns	r3, r3
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d003      	beq.n	800a9fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a9f6:	69ba      	ldr	r2, [r7, #24]
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a9fe:	4a33      	ldr	r2, [pc, #204]	; (800aacc <HAL_GPIO_Init+0x350>)
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800aa04:	4b31      	ldr	r3, [pc, #196]	; (800aacc <HAL_GPIO_Init+0x350>)
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	43db      	mvns	r3, r3
 800aa0e:	69ba      	ldr	r2, [r7, #24]
 800aa10:	4013      	ands	r3, r2
 800aa12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800aa20:	69ba      	ldr	r2, [r7, #24]
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800aa28:	4a28      	ldr	r2, [pc, #160]	; (800aacc <HAL_GPIO_Init+0x350>)
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800aa2e:	4b27      	ldr	r3, [pc, #156]	; (800aacc <HAL_GPIO_Init+0x350>)
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	43db      	mvns	r3, r3
 800aa38:	69ba      	ldr	r2, [r7, #24]
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800aa4a:	69ba      	ldr	r2, [r7, #24]
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800aa52:	4a1e      	ldr	r2, [pc, #120]	; (800aacc <HAL_GPIO_Init+0x350>)
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800aa58:	4b1c      	ldr	r3, [pc, #112]	; (800aacc <HAL_GPIO_Init+0x350>)
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	43db      	mvns	r3, r3
 800aa62:	69ba      	ldr	r2, [r7, #24]
 800aa64:	4013      	ands	r3, r2
 800aa66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d003      	beq.n	800aa7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800aa74:	69ba      	ldr	r2, [r7, #24]
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aa7c:	4a13      	ldr	r2, [pc, #76]	; (800aacc <HAL_GPIO_Init+0x350>)
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	3301      	adds	r3, #1
 800aa86:	61fb      	str	r3, [r7, #28]
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	2b0f      	cmp	r3, #15
 800aa8c:	f67f ae84 	bls.w	800a798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aa90:	bf00      	nop
 800aa92:	3724      	adds	r7, #36	; 0x24
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	40023800 	.word	0x40023800
 800aaa0:	40013800 	.word	0x40013800
 800aaa4:	40020000 	.word	0x40020000
 800aaa8:	40020400 	.word	0x40020400
 800aaac:	40020800 	.word	0x40020800
 800aab0:	40020c00 	.word	0x40020c00
 800aab4:	40021000 	.word	0x40021000
 800aab8:	40021400 	.word	0x40021400
 800aabc:	40021800 	.word	0x40021800
 800aac0:	40021c00 	.word	0x40021c00
 800aac4:	40022000 	.word	0x40022000
 800aac8:	40022400 	.word	0x40022400
 800aacc:	40013c00 	.word	0x40013c00

0800aad0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	691a      	ldr	r2, [r3, #16]
 800aae0:	887b      	ldrh	r3, [r7, #2]
 800aae2:	4013      	ands	r3, r2
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aae8:	2301      	movs	r3, #1
 800aaea:	73fb      	strb	r3, [r7, #15]
 800aaec:	e001      	b.n	800aaf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	460b      	mov	r3, r1
 800ab0a:	807b      	strh	r3, [r7, #2]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ab10:	787b      	ldrb	r3, [r7, #1]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ab16:	887a      	ldrh	r2, [r7, #2]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ab1c:	e003      	b.n	800ab26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ab1e:	887b      	ldrh	r3, [r7, #2]
 800ab20:	041a      	lsls	r2, r3, #16
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	619a      	str	r2, [r3, #24]
}
 800ab26:	bf00      	nop
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
	...

0800ab34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e11f      	b.n	800ad86 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7fc f878 	bl	8006c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2224      	movs	r2, #36	; 0x24
 800ab64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f022 0201 	bic.w	r2, r2, #1
 800ab76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ab98:	f001 f96e 	bl	800be78 <HAL_RCC_GetPCLK1Freq>
 800ab9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	4a7b      	ldr	r2, [pc, #492]	; (800ad90 <HAL_I2C_Init+0x25c>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d807      	bhi.n	800abb8 <HAL_I2C_Init+0x84>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	4a7a      	ldr	r2, [pc, #488]	; (800ad94 <HAL_I2C_Init+0x260>)
 800abac:	4293      	cmp	r3, r2
 800abae:	bf94      	ite	ls
 800abb0:	2301      	movls	r3, #1
 800abb2:	2300      	movhi	r3, #0
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	e006      	b.n	800abc6 <HAL_I2C_Init+0x92>
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4a77      	ldr	r2, [pc, #476]	; (800ad98 <HAL_I2C_Init+0x264>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	bf94      	ite	ls
 800abc0:	2301      	movls	r3, #1
 800abc2:	2300      	movhi	r3, #0
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e0db      	b.n	800ad86 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	4a72      	ldr	r2, [pc, #456]	; (800ad9c <HAL_I2C_Init+0x268>)
 800abd2:	fba2 2303 	umull	r2, r3, r2, r3
 800abd6:	0c9b      	lsrs	r3, r3, #18
 800abd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	430a      	orrs	r2, r1
 800abec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	6a1b      	ldr	r3, [r3, #32]
 800abf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	4a64      	ldr	r2, [pc, #400]	; (800ad90 <HAL_I2C_Init+0x25c>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d802      	bhi.n	800ac08 <HAL_I2C_Init+0xd4>
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	3301      	adds	r3, #1
 800ac06:	e009      	b.n	800ac1c <HAL_I2C_Init+0xe8>
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ac0e:	fb02 f303 	mul.w	r3, r2, r3
 800ac12:	4a63      	ldr	r2, [pc, #396]	; (800ada0 <HAL_I2C_Init+0x26c>)
 800ac14:	fba2 2303 	umull	r2, r3, r2, r3
 800ac18:	099b      	lsrs	r3, r3, #6
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	6812      	ldr	r2, [r2, #0]
 800ac20:	430b      	orrs	r3, r1
 800ac22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	69db      	ldr	r3, [r3, #28]
 800ac2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ac2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	4956      	ldr	r1, [pc, #344]	; (800ad90 <HAL_I2C_Init+0x25c>)
 800ac38:	428b      	cmp	r3, r1
 800ac3a:	d80d      	bhi.n	800ac58 <HAL_I2C_Init+0x124>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	1e59      	subs	r1, r3, #1
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	005b      	lsls	r3, r3, #1
 800ac46:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac50:	2b04      	cmp	r3, #4
 800ac52:	bf38      	it	cc
 800ac54:	2304      	movcc	r3, #4
 800ac56:	e04f      	b.n	800acf8 <HAL_I2C_Init+0x1c4>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d111      	bne.n	800ac84 <HAL_I2C_Init+0x150>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	1e58      	subs	r0, r3, #1
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6859      	ldr	r1, [r3, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	005b      	lsls	r3, r3, #1
 800ac6c:	440b      	add	r3, r1
 800ac6e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac72:	3301      	adds	r3, #1
 800ac74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	bf0c      	ite	eq
 800ac7c:	2301      	moveq	r3, #1
 800ac7e:	2300      	movne	r3, #0
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	e012      	b.n	800acaa <HAL_I2C_Init+0x176>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	1e58      	subs	r0, r3, #1
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6859      	ldr	r1, [r3, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	440b      	add	r3, r1
 800ac92:	0099      	lsls	r1, r3, #2
 800ac94:	440b      	add	r3, r1
 800ac96:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	bf0c      	ite	eq
 800aca4:	2301      	moveq	r3, #1
 800aca6:	2300      	movne	r3, #0
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d001      	beq.n	800acb2 <HAL_I2C_Init+0x17e>
 800acae:	2301      	movs	r3, #1
 800acb0:	e022      	b.n	800acf8 <HAL_I2C_Init+0x1c4>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10e      	bne.n	800acd8 <HAL_I2C_Init+0x1a4>
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	1e58      	subs	r0, r3, #1
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6859      	ldr	r1, [r3, #4]
 800acc2:	460b      	mov	r3, r1
 800acc4:	005b      	lsls	r3, r3, #1
 800acc6:	440b      	add	r3, r1
 800acc8:	fbb0 f3f3 	udiv	r3, r0, r3
 800accc:	3301      	adds	r3, #1
 800acce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acd6:	e00f      	b.n	800acf8 <HAL_I2C_Init+0x1c4>
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	1e58      	subs	r0, r3, #1
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6859      	ldr	r1, [r3, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	440b      	add	r3, r1
 800ace6:	0099      	lsls	r1, r3, #2
 800ace8:	440b      	add	r3, r1
 800acea:	fbb0 f3f3 	udiv	r3, r0, r3
 800acee:	3301      	adds	r3, #1
 800acf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	6809      	ldr	r1, [r1, #0]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	69da      	ldr	r2, [r3, #28]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	431a      	orrs	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	430a      	orrs	r2, r1
 800ad1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ad26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	6911      	ldr	r1, [r2, #16]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	68d2      	ldr	r2, [r2, #12]
 800ad32:	4311      	orrs	r1, r2
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	6812      	ldr	r2, [r2, #0]
 800ad38:	430b      	orrs	r3, r1
 800ad3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	695a      	ldr	r2, [r3, #20]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	431a      	orrs	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	430a      	orrs	r2, r1
 800ad56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f042 0201 	orr.w	r2, r2, #1
 800ad66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2220      	movs	r2, #32
 800ad72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	000186a0 	.word	0x000186a0
 800ad94:	001e847f 	.word	0x001e847f
 800ad98:	003d08ff 	.word	0x003d08ff
 800ad9c:	431bde83 	.word	0x431bde83
 800ada0:	10624dd3 	.word	0x10624dd3

0800ada4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af02      	add	r7, sp, #8
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	607a      	str	r2, [r7, #4]
 800adae:	461a      	mov	r2, r3
 800adb0:	460b      	mov	r3, r1
 800adb2:	817b      	strh	r3, [r7, #10]
 800adb4:	4613      	mov	r3, r2
 800adb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800adb8:	f7fe fc00 	bl	80095bc <HAL_GetTick>
 800adbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b20      	cmp	r3, #32
 800adc8:	f040 80e0 	bne.w	800af8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	2319      	movs	r3, #25
 800add2:	2201      	movs	r2, #1
 800add4:	4970      	ldr	r1, [pc, #448]	; (800af98 <HAL_I2C_Master_Transmit+0x1f4>)
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f000 fc58 	bl	800b68c <I2C_WaitOnFlagUntilTimeout>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ade2:	2302      	movs	r3, #2
 800ade4:	e0d3      	b.n	800af8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adec:	2b01      	cmp	r3, #1
 800adee:	d101      	bne.n	800adf4 <HAL_I2C_Master_Transmit+0x50>
 800adf0:	2302      	movs	r3, #2
 800adf2:	e0cc      	b.n	800af8e <HAL_I2C_Master_Transmit+0x1ea>
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 0301 	and.w	r3, r3, #1
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d007      	beq.n	800ae1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f042 0201 	orr.w	r2, r2, #1
 800ae18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2221      	movs	r2, #33	; 0x21
 800ae2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2210      	movs	r2, #16
 800ae36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	893a      	ldrh	r2, [r7, #8]
 800ae4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	4a50      	ldr	r2, [pc, #320]	; (800af9c <HAL_I2C_Master_Transmit+0x1f8>)
 800ae5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ae5c:	8979      	ldrh	r1, [r7, #10]
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	6a3a      	ldr	r2, [r7, #32]
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 fac2 	bl	800b3ec <I2C_MasterRequestWrite>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e08d      	b.n	800af8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae72:	2300      	movs	r3, #0
 800ae74:	613b      	str	r3, [r7, #16]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	613b      	str	r3, [r7, #16]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	613b      	str	r3, [r7, #16]
 800ae86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ae88:	e066      	b.n	800af58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	6a39      	ldr	r1, [r7, #32]
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 fcd2 	bl	800b838 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00d      	beq.n	800aeb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9e:	2b04      	cmp	r3, #4
 800aea0:	d107      	bne.n	800aeb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e06b      	b.n	800af8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	781a      	ldrb	r2, [r3, #0]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec6:	1c5a      	adds	r2, r3, #1
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	3b01      	subs	r3, #1
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aede:	3b01      	subs	r3, #1
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	f003 0304 	and.w	r3, r3, #4
 800aef0:	2b04      	cmp	r3, #4
 800aef2:	d11b      	bne.n	800af2c <HAL_I2C_Master_Transmit+0x188>
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d017      	beq.n	800af2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	781a      	ldrb	r2, [r3, #0]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	1c5a      	adds	r2, r3, #1
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af16:	b29b      	uxth	r3, r3
 800af18:	3b01      	subs	r3, #1
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af24:	3b01      	subs	r3, #1
 800af26:	b29a      	uxth	r2, r3
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af2c:	697a      	ldr	r2, [r7, #20]
 800af2e:	6a39      	ldr	r1, [r7, #32]
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f000 fcc2 	bl	800b8ba <I2C_WaitOnBTFFlagUntilTimeout>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00d      	beq.n	800af58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af40:	2b04      	cmp	r3, #4
 800af42:	d107      	bne.n	800af54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	e01a      	b.n	800af8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d194      	bne.n	800ae8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2220      	movs	r2, #32
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800af88:	2300      	movs	r3, #0
 800af8a:	e000      	b.n	800af8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800af8c:	2302      	movs	r3, #2
  }
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	00100002 	.word	0x00100002
 800af9c:	ffff0000 	.word	0xffff0000

0800afa0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08c      	sub	sp, #48	; 0x30
 800afa4:	af02      	add	r7, sp, #8
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	607a      	str	r2, [r7, #4]
 800afaa:	461a      	mov	r2, r3
 800afac:	460b      	mov	r3, r1
 800afae:	817b      	strh	r3, [r7, #10]
 800afb0:	4613      	mov	r3, r2
 800afb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800afb4:	f7fe fb02 	bl	80095bc <HAL_GetTick>
 800afb8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b20      	cmp	r3, #32
 800afc4:	f040 820b 	bne.w	800b3de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	2319      	movs	r3, #25
 800afce:	2201      	movs	r2, #1
 800afd0:	497c      	ldr	r1, [pc, #496]	; (800b1c4 <HAL_I2C_Master_Receive+0x224>)
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f000 fb5a 	bl	800b68c <I2C_WaitOnFlagUntilTimeout>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800afde:	2302      	movs	r3, #2
 800afe0:	e1fe      	b.n	800b3e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d101      	bne.n	800aff0 <HAL_I2C_Master_Receive+0x50>
 800afec:	2302      	movs	r3, #2
 800afee:	e1f7      	b.n	800b3e0 <HAL_I2C_Master_Receive+0x440>
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	2b01      	cmp	r3, #1
 800b004:	d007      	beq.n	800b016 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f042 0201 	orr.w	r2, r2, #1
 800b014:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b024:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2222      	movs	r2, #34	; 0x22
 800b02a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2210      	movs	r2, #16
 800b032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	893a      	ldrh	r2, [r7, #8]
 800b046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	4a5c      	ldr	r2, [pc, #368]	; (800b1c8 <HAL_I2C_Master_Receive+0x228>)
 800b056:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b058:	8979      	ldrh	r1, [r7, #10]
 800b05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f000 fa46 	bl	800b4f0 <I2C_MasterRequestRead>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e1b8      	b.n	800b3e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b072:	2b00      	cmp	r3, #0
 800b074:	d113      	bne.n	800b09e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b076:	2300      	movs	r3, #0
 800b078:	623b      	str	r3, [r7, #32]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	695b      	ldr	r3, [r3, #20]
 800b080:	623b      	str	r3, [r7, #32]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	623b      	str	r3, [r7, #32]
 800b08a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	e18c      	b.n	800b3b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d11b      	bne.n	800b0de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	61fb      	str	r3, [r7, #28]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	61fb      	str	r3, [r7, #28]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	61fb      	str	r3, [r7, #28]
 800b0ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	e16c      	b.n	800b3b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d11b      	bne.n	800b11e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b106:	2300      	movs	r3, #0
 800b108:	61bb      	str	r3, [r7, #24]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	61bb      	str	r3, [r7, #24]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	61bb      	str	r3, [r7, #24]
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	e14c      	b.n	800b3b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b12c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b12e:	2300      	movs	r3, #0
 800b130:	617b      	str	r3, [r7, #20]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	617b      	str	r3, [r7, #20]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	617b      	str	r3, [r7, #20]
 800b142:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b144:	e138      	b.n	800b3b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	f200 80f1 	bhi.w	800b332 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b154:	2b01      	cmp	r3, #1
 800b156:	d123      	bne.n	800b1a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b15a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f000 fbed 	bl	800b93c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d001      	beq.n	800b16c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e139      	b.n	800b3e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	691a      	ldr	r2, [r3, #16]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	b2d2      	uxtb	r2, r2
 800b178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b188:	3b01      	subs	r3, #1
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b194:	b29b      	uxth	r3, r3
 800b196:	3b01      	subs	r3, #1
 800b198:	b29a      	uxth	r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b19e:	e10b      	b.n	800b3b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d14e      	bne.n	800b246 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	4906      	ldr	r1, [pc, #24]	; (800b1cc <HAL_I2C_Master_Receive+0x22c>)
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f000 fa6a 	bl	800b68c <I2C_WaitOnFlagUntilTimeout>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d008      	beq.n	800b1d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e10e      	b.n	800b3e0 <HAL_I2C_Master_Receive+0x440>
 800b1c2:	bf00      	nop
 800b1c4:	00100002 	.word	0x00100002
 800b1c8:	ffff0000 	.word	0xffff0000
 800b1cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	691a      	ldr	r2, [r3, #16]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ea:	b2d2      	uxtb	r2, r2
 800b1ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b208:	b29b      	uxth	r3, r3
 800b20a:	3b01      	subs	r3, #1
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	691a      	ldr	r2, [r3, #16]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21c:	b2d2      	uxtb	r2, r2
 800b21e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b22e:	3b01      	subs	r3, #1
 800b230:	b29a      	uxth	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	3b01      	subs	r3, #1
 800b23e:	b29a      	uxth	r2, r3
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b244:	e0b8      	b.n	800b3b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	2200      	movs	r2, #0
 800b24e:	4966      	ldr	r1, [pc, #408]	; (800b3e8 <HAL_I2C_Master_Receive+0x448>)
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f000 fa1b 	bl	800b68c <I2C_WaitOnFlagUntilTimeout>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e0bf      	b.n	800b3e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b26e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	691a      	ldr	r2, [r3, #16]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27a:	b2d2      	uxtb	r2, r2
 800b27c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b28c:	3b01      	subs	r3, #1
 800b28e:	b29a      	uxth	r2, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b298:	b29b      	uxth	r3, r3
 800b29a:	3b01      	subs	r3, #1
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	494f      	ldr	r1, [pc, #316]	; (800b3e8 <HAL_I2C_Master_Receive+0x448>)
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f000 f9ed 	bl	800b68c <I2C_WaitOnFlagUntilTimeout>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e091      	b.n	800b3e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	691a      	ldr	r2, [r3, #16]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d6:	b2d2      	uxtb	r2, r2
 800b2d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	691a      	ldr	r2, [r3, #16]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b308:	b2d2      	uxtb	r2, r2
 800b30a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b310:	1c5a      	adds	r2, r3, #1
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b31a:	3b01      	subs	r3, #1
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b326:	b29b      	uxth	r3, r3
 800b328:	3b01      	subs	r3, #1
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b330:	e042      	b.n	800b3b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f000 fb00 	bl	800b93c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e04c      	b.n	800b3e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	691a      	ldr	r2, [r3, #16]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	b2d2      	uxtb	r2, r2
 800b352:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b358:	1c5a      	adds	r2, r3, #1
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b362:	3b01      	subs	r3, #1
 800b364:	b29a      	uxth	r2, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b36e:	b29b      	uxth	r3, r3
 800b370:	3b01      	subs	r3, #1
 800b372:	b29a      	uxth	r2, r3
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	695b      	ldr	r3, [r3, #20]
 800b37e:	f003 0304 	and.w	r3, r3, #4
 800b382:	2b04      	cmp	r3, #4
 800b384:	d118      	bne.n	800b3b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	691a      	ldr	r2, [r3, #16]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b390:	b2d2      	uxtb	r2, r2
 800b392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f47f aec2 	bne.w	800b146 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2220      	movs	r2, #32
 800b3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	e000      	b.n	800b3e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b3de:	2302      	movs	r3, #2
  }
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3728      	adds	r7, #40	; 0x28
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	00010004 	.word	0x00010004

0800b3ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b088      	sub	sp, #32
 800b3f0:	af02      	add	r7, sp, #8
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	607a      	str	r2, [r7, #4]
 800b3f6:	603b      	str	r3, [r7, #0]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b400:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	2b08      	cmp	r3, #8
 800b406:	d006      	beq.n	800b416 <I2C_MasterRequestWrite+0x2a>
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d003      	beq.n	800b416 <I2C_MasterRequestWrite+0x2a>
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b414:	d108      	bne.n	800b428 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b424:	601a      	str	r2, [r3, #0]
 800b426:	e00b      	b.n	800b440 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42c:	2b12      	cmp	r3, #18
 800b42e:	d107      	bne.n	800b440 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b43e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f000 f91d 	bl	800b68c <I2C_WaitOnFlagUntilTimeout>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00d      	beq.n	800b474 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b466:	d103      	bne.n	800b470 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b46e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b470:	2303      	movs	r3, #3
 800b472:	e035      	b.n	800b4e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b47c:	d108      	bne.n	800b490 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b47e:	897b      	ldrh	r3, [r7, #10]
 800b480:	b2db      	uxtb	r3, r3
 800b482:	461a      	mov	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b48c:	611a      	str	r2, [r3, #16]
 800b48e:	e01b      	b.n	800b4c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b490:	897b      	ldrh	r3, [r7, #10]
 800b492:	11db      	asrs	r3, r3, #7
 800b494:	b2db      	uxtb	r3, r3
 800b496:	f003 0306 	and.w	r3, r3, #6
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	f063 030f 	orn	r3, r3, #15
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	490e      	ldr	r1, [pc, #56]	; (800b4e8 <I2C_MasterRequestWrite+0xfc>)
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f000 f943 	bl	800b73a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d001      	beq.n	800b4be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e010      	b.n	800b4e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b4be:	897b      	ldrh	r3, [r7, #10]
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	4907      	ldr	r1, [pc, #28]	; (800b4ec <I2C_MasterRequestWrite+0x100>)
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	f000 f933 	bl	800b73a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d001      	beq.n	800b4de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e000      	b.n	800b4e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3718      	adds	r7, #24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	00010008 	.word	0x00010008
 800b4ec:	00010002 	.word	0x00010002

0800b4f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b088      	sub	sp, #32
 800b4f4:	af02      	add	r7, sp, #8
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	607a      	str	r2, [r7, #4]
 800b4fa:	603b      	str	r3, [r7, #0]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b504:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b514:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2b08      	cmp	r3, #8
 800b51a:	d006      	beq.n	800b52a <I2C_MasterRequestRead+0x3a>
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d003      	beq.n	800b52a <I2C_MasterRequestRead+0x3a>
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b528:	d108      	bne.n	800b53c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b538:	601a      	str	r2, [r3, #0]
 800b53a:	e00b      	b.n	800b554 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b540:	2b11      	cmp	r3, #17
 800b542:	d107      	bne.n	800b554 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 f893 	bl	800b68c <I2C_WaitOnFlagUntilTimeout>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00d      	beq.n	800b588 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b57a:	d103      	bne.n	800b584 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b584:	2303      	movs	r3, #3
 800b586:	e079      	b.n	800b67c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b590:	d108      	bne.n	800b5a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b592:	897b      	ldrh	r3, [r7, #10]
 800b594:	b2db      	uxtb	r3, r3
 800b596:	f043 0301 	orr.w	r3, r3, #1
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	611a      	str	r2, [r3, #16]
 800b5a2:	e05f      	b.n	800b664 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b5a4:	897b      	ldrh	r3, [r7, #10]
 800b5a6:	11db      	asrs	r3, r3, #7
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	f003 0306 	and.w	r3, r3, #6
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	f063 030f 	orn	r3, r3, #15
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	4930      	ldr	r1, [pc, #192]	; (800b684 <I2C_MasterRequestRead+0x194>)
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f000 f8b9 	bl	800b73a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e054      	b.n	800b67c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b5d2:	897b      	ldrh	r3, [r7, #10]
 800b5d4:	b2da      	uxtb	r2, r3
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	4929      	ldr	r1, [pc, #164]	; (800b688 <I2C_MasterRequestRead+0x198>)
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 f8a9 	bl	800b73a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e044      	b.n	800b67c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	613b      	str	r3, [r7, #16]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	613b      	str	r3, [r7, #16]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	613b      	str	r3, [r7, #16]
 800b606:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b616:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f000 f831 	bl	800b68c <I2C_WaitOnFlagUntilTimeout>
 800b62a:	4603      	mov	r3, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00d      	beq.n	800b64c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b63a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b63e:	d103      	bne.n	800b648 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b646:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e017      	b.n	800b67c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b64c:	897b      	ldrh	r3, [r7, #10]
 800b64e:	11db      	asrs	r3, r3, #7
 800b650:	b2db      	uxtb	r3, r3
 800b652:	f003 0306 	and.w	r3, r3, #6
 800b656:	b2db      	uxtb	r3, r3
 800b658:	f063 030e 	orn	r3, r3, #14
 800b65c:	b2da      	uxtb	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	4907      	ldr	r1, [pc, #28]	; (800b688 <I2C_MasterRequestRead+0x198>)
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f000 f865 	bl	800b73a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e000      	b.n	800b67c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	00010008 	.word	0x00010008
 800b688:	00010002 	.word	0x00010002

0800b68c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	4613      	mov	r3, r2
 800b69a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b69c:	e025      	b.n	800b6ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a4:	d021      	beq.n	800b6ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6a6:	f7fd ff89 	bl	80095bc <HAL_GetTick>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	1ad3      	subs	r3, r2, r3
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d302      	bcc.n	800b6bc <I2C_WaitOnFlagUntilTimeout+0x30>
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d116      	bne.n	800b6ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d6:	f043 0220 	orr.w	r2, r3, #32
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e023      	b.n	800b732 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	0c1b      	lsrs	r3, r3, #16
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d10d      	bne.n	800b710 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	43da      	mvns	r2, r3
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	4013      	ands	r3, r2
 800b700:	b29b      	uxth	r3, r3
 800b702:	2b00      	cmp	r3, #0
 800b704:	bf0c      	ite	eq
 800b706:	2301      	moveq	r3, #1
 800b708:	2300      	movne	r3, #0
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	461a      	mov	r2, r3
 800b70e:	e00c      	b.n	800b72a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	699b      	ldr	r3, [r3, #24]
 800b716:	43da      	mvns	r2, r3
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	4013      	ands	r3, r2
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	2b00      	cmp	r3, #0
 800b720:	bf0c      	ite	eq
 800b722:	2301      	moveq	r3, #1
 800b724:	2300      	movne	r3, #0
 800b726:	b2db      	uxtb	r3, r3
 800b728:	461a      	mov	r2, r3
 800b72a:	79fb      	ldrb	r3, [r7, #7]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d0b6      	beq.n	800b69e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b084      	sub	sp, #16
 800b73e:	af00      	add	r7, sp, #0
 800b740:	60f8      	str	r0, [r7, #12]
 800b742:	60b9      	str	r1, [r7, #8]
 800b744:	607a      	str	r2, [r7, #4]
 800b746:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b748:	e051      	b.n	800b7ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b758:	d123      	bne.n	800b7a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b768:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b772:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2220      	movs	r2, #32
 800b77e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78e:	f043 0204 	orr.w	r2, r3, #4
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e046      	b.n	800b830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a8:	d021      	beq.n	800b7ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7aa:	f7fd ff07 	bl	80095bc <HAL_GetTick>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d302      	bcc.n	800b7c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d116      	bne.n	800b7ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7da:	f043 0220 	orr.w	r2, r3, #32
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e020      	b.n	800b830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	0c1b      	lsrs	r3, r3, #16
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d10c      	bne.n	800b812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	695b      	ldr	r3, [r3, #20]
 800b7fe:	43da      	mvns	r2, r3
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	4013      	ands	r3, r2
 800b804:	b29b      	uxth	r3, r3
 800b806:	2b00      	cmp	r3, #0
 800b808:	bf14      	ite	ne
 800b80a:	2301      	movne	r3, #1
 800b80c:	2300      	moveq	r3, #0
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	e00b      	b.n	800b82a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	43da      	mvns	r2, r3
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	4013      	ands	r3, r2
 800b81e:	b29b      	uxth	r3, r3
 800b820:	2b00      	cmp	r3, #0
 800b822:	bf14      	ite	ne
 800b824:	2301      	movne	r3, #1
 800b826:	2300      	moveq	r3, #0
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d18d      	bne.n	800b74a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b844:	e02d      	b.n	800b8a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f000 f8ce 	bl	800b9e8 <I2C_IsAcknowledgeFailed>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d001      	beq.n	800b856 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	e02d      	b.n	800b8b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b85c:	d021      	beq.n	800b8a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b85e:	f7fd fead 	bl	80095bc <HAL_GetTick>
 800b862:	4602      	mov	r2, r0
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d302      	bcc.n	800b874 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d116      	bne.n	800b8a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2220      	movs	r2, #32
 800b87e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b88e:	f043 0220 	orr.w	r2, r3, #32
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e007      	b.n	800b8b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	695b      	ldr	r3, [r3, #20]
 800b8a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8ac:	2b80      	cmp	r3, #128	; 0x80
 800b8ae:	d1ca      	bne.n	800b846 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b084      	sub	sp, #16
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	60f8      	str	r0, [r7, #12]
 800b8c2:	60b9      	str	r1, [r7, #8]
 800b8c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b8c6:	e02d      	b.n	800b924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b8c8:	68f8      	ldr	r0, [r7, #12]
 800b8ca:	f000 f88d 	bl	800b9e8 <I2C_IsAcknowledgeFailed>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e02d      	b.n	800b934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8de:	d021      	beq.n	800b924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8e0:	f7fd fe6c 	bl	80095bc <HAL_GetTick>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d302      	bcc.n	800b8f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d116      	bne.n	800b924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2220      	movs	r2, #32
 800b900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b910:	f043 0220 	orr.w	r2, r3, #32
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	e007      	b.n	800b934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	f003 0304 	and.w	r3, r3, #4
 800b92e:	2b04      	cmp	r3, #4
 800b930:	d1ca      	bne.n	800b8c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b948:	e042      	b.n	800b9d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	f003 0310 	and.w	r3, r3, #16
 800b954:	2b10      	cmp	r3, #16
 800b956:	d119      	bne.n	800b98c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f06f 0210 	mvn.w	r2, #16
 800b960:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2220      	movs	r2, #32
 800b96c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b988:	2301      	movs	r3, #1
 800b98a:	e029      	b.n	800b9e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b98c:	f7fd fe16 	bl	80095bc <HAL_GetTick>
 800b990:	4602      	mov	r2, r0
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d302      	bcc.n	800b9a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d116      	bne.n	800b9d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2220      	movs	r2, #32
 800b9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9bc:	f043 0220 	orr.w	r2, r3, #32
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e007      	b.n	800b9e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9da:	2b40      	cmp	r3, #64	; 0x40
 800b9dc:	d1b5      	bne.n	800b94a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9fe:	d11b      	bne.n	800ba38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ba08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2220      	movs	r2, #32
 800ba14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba24:	f043 0204 	orr.w	r2, r3, #4
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e000      	b.n	800ba3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	370c      	adds	r7, #12
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr
	...

0800ba48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ba52:	2300      	movs	r3, #0
 800ba54:	603b      	str	r3, [r7, #0]
 800ba56:	4b20      	ldr	r3, [pc, #128]	; (800bad8 <HAL_PWREx_EnableOverDrive+0x90>)
 800ba58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5a:	4a1f      	ldr	r2, [pc, #124]	; (800bad8 <HAL_PWREx_EnableOverDrive+0x90>)
 800ba5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba60:	6413      	str	r3, [r2, #64]	; 0x40
 800ba62:	4b1d      	ldr	r3, [pc, #116]	; (800bad8 <HAL_PWREx_EnableOverDrive+0x90>)
 800ba64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba6a:	603b      	str	r3, [r7, #0]
 800ba6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ba6e:	4b1b      	ldr	r3, [pc, #108]	; (800badc <HAL_PWREx_EnableOverDrive+0x94>)
 800ba70:	2201      	movs	r2, #1
 800ba72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ba74:	f7fd fda2 	bl	80095bc <HAL_GetTick>
 800ba78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ba7a:	e009      	b.n	800ba90 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ba7c:	f7fd fd9e 	bl	80095bc <HAL_GetTick>
 800ba80:	4602      	mov	r2, r0
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba8a:	d901      	bls.n	800ba90 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e01f      	b.n	800bad0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ba90:	4b13      	ldr	r3, [pc, #76]	; (800bae0 <HAL_PWREx_EnableOverDrive+0x98>)
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba9c:	d1ee      	bne.n	800ba7c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ba9e:	4b11      	ldr	r3, [pc, #68]	; (800bae4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800baa0:	2201      	movs	r2, #1
 800baa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800baa4:	f7fd fd8a 	bl	80095bc <HAL_GetTick>
 800baa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800baaa:	e009      	b.n	800bac0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800baac:	f7fd fd86 	bl	80095bc <HAL_GetTick>
 800bab0:	4602      	mov	r2, r0
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800baba:	d901      	bls.n	800bac0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800babc:	2303      	movs	r3, #3
 800babe:	e007      	b.n	800bad0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bac0:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <HAL_PWREx_EnableOverDrive+0x98>)
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bacc:	d1ee      	bne.n	800baac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	40023800 	.word	0x40023800
 800badc:	420e0040 	.word	0x420e0040
 800bae0:	40007000 	.word	0x40007000
 800bae4:	420e0044 	.word	0x420e0044

0800bae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d101      	bne.n	800bafc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	e0cc      	b.n	800bc96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bafc:	4b68      	ldr	r3, [pc, #416]	; (800bca0 <HAL_RCC_ClockConfig+0x1b8>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 030f 	and.w	r3, r3, #15
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d90c      	bls.n	800bb24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb0a:	4b65      	ldr	r3, [pc, #404]	; (800bca0 <HAL_RCC_ClockConfig+0x1b8>)
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	b2d2      	uxtb	r2, r2
 800bb10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb12:	4b63      	ldr	r3, [pc, #396]	; (800bca0 <HAL_RCC_ClockConfig+0x1b8>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f003 030f 	and.w	r3, r3, #15
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d001      	beq.n	800bb24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e0b8      	b.n	800bc96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f003 0302 	and.w	r3, r3, #2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d020      	beq.n	800bb72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 0304 	and.w	r3, r3, #4
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d005      	beq.n	800bb48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bb3c:	4b59      	ldr	r3, [pc, #356]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	4a58      	ldr	r2, [pc, #352]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bb42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bb46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f003 0308 	and.w	r3, r3, #8
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d005      	beq.n	800bb60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bb54:	4b53      	ldr	r3, [pc, #332]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	4a52      	ldr	r2, [pc, #328]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bb5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bb5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb60:	4b50      	ldr	r3, [pc, #320]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	494d      	ldr	r1, [pc, #308]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d044      	beq.n	800bc08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d107      	bne.n	800bb96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb86:	4b47      	ldr	r3, [pc, #284]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d119      	bne.n	800bbc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb92:	2301      	movs	r3, #1
 800bb94:	e07f      	b.n	800bc96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d003      	beq.n	800bba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	d107      	bne.n	800bbb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bba6:	4b3f      	ldr	r3, [pc, #252]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d109      	bne.n	800bbc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e06f      	b.n	800bc96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bbb6:	4b3b      	ldr	r3, [pc, #236]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f003 0302 	and.w	r3, r3, #2
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d101      	bne.n	800bbc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e067      	b.n	800bc96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bbc6:	4b37      	ldr	r3, [pc, #220]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	f023 0203 	bic.w	r2, r3, #3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	4934      	ldr	r1, [pc, #208]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bbd8:	f7fd fcf0 	bl	80095bc <HAL_GetTick>
 800bbdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbde:	e00a      	b.n	800bbf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bbe0:	f7fd fcec 	bl	80095bc <HAL_GetTick>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d901      	bls.n	800bbf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bbf2:	2303      	movs	r3, #3
 800bbf4:	e04f      	b.n	800bc96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbf6:	4b2b      	ldr	r3, [pc, #172]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	f003 020c 	and.w	r2, r3, #12
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d1eb      	bne.n	800bbe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bc08:	4b25      	ldr	r3, [pc, #148]	; (800bca0 <HAL_RCC_ClockConfig+0x1b8>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 030f 	and.w	r3, r3, #15
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d20c      	bcs.n	800bc30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc16:	4b22      	ldr	r3, [pc, #136]	; (800bca0 <HAL_RCC_ClockConfig+0x1b8>)
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	b2d2      	uxtb	r2, r2
 800bc1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc1e:	4b20      	ldr	r3, [pc, #128]	; (800bca0 <HAL_RCC_ClockConfig+0x1b8>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 030f 	and.w	r3, r3, #15
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d001      	beq.n	800bc30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e032      	b.n	800bc96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 0304 	and.w	r3, r3, #4
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d008      	beq.n	800bc4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc3c:	4b19      	ldr	r3, [pc, #100]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	4916      	ldr	r1, [pc, #88]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 0308 	and.w	r3, r3, #8
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d009      	beq.n	800bc6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bc5a:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	00db      	lsls	r3, r3, #3
 800bc68:	490e      	ldr	r1, [pc, #56]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bc6e:	f000 f821 	bl	800bcb4 <HAL_RCC_GetSysClockFreq>
 800bc72:	4601      	mov	r1, r0
 800bc74:	4b0b      	ldr	r3, [pc, #44]	; (800bca4 <HAL_RCC_ClockConfig+0x1bc>)
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	091b      	lsrs	r3, r3, #4
 800bc7a:	f003 030f 	and.w	r3, r3, #15
 800bc7e:	4a0a      	ldr	r2, [pc, #40]	; (800bca8 <HAL_RCC_ClockConfig+0x1c0>)
 800bc80:	5cd3      	ldrb	r3, [r2, r3]
 800bc82:	fa21 f303 	lsr.w	r3, r1, r3
 800bc86:	4a09      	ldr	r2, [pc, #36]	; (800bcac <HAL_RCC_ClockConfig+0x1c4>)
 800bc88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bc8a:	4b09      	ldr	r3, [pc, #36]	; (800bcb0 <HAL_RCC_ClockConfig+0x1c8>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fd fc50 	bl	8009534 <HAL_InitTick>

  return HAL_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	40023c00 	.word	0x40023c00
 800bca4:	40023800 	.word	0x40023800
 800bca8:	08019ac4 	.word	0x08019ac4
 800bcac:	20000000 	.word	0x20000000
 800bcb0:	20000004 	.word	0x20000004

0800bcb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	607b      	str	r3, [r7, #4]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	60fb      	str	r3, [r7, #12]
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bcca:	4b63      	ldr	r3, [pc, #396]	; (800be58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	f003 030c 	and.w	r3, r3, #12
 800bcd2:	2b04      	cmp	r3, #4
 800bcd4:	d007      	beq.n	800bce6 <HAL_RCC_GetSysClockFreq+0x32>
 800bcd6:	2b08      	cmp	r3, #8
 800bcd8:	d008      	beq.n	800bcec <HAL_RCC_GetSysClockFreq+0x38>
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f040 80b4 	bne.w	800be48 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bce0:	4b5e      	ldr	r3, [pc, #376]	; (800be5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bce2:	60bb      	str	r3, [r7, #8]
       break;
 800bce4:	e0b3      	b.n	800be4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bce6:	4b5d      	ldr	r3, [pc, #372]	; (800be5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bce8:	60bb      	str	r3, [r7, #8]
      break;
 800bcea:	e0b0      	b.n	800be4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bcec:	4b5a      	ldr	r3, [pc, #360]	; (800be58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcf4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bcf6:	4b58      	ldr	r3, [pc, #352]	; (800be58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d04a      	beq.n	800bd98 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd02:	4b55      	ldr	r3, [pc, #340]	; (800be58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	099b      	lsrs	r3, r3, #6
 800bd08:	f04f 0400 	mov.w	r4, #0
 800bd0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bd10:	f04f 0200 	mov.w	r2, #0
 800bd14:	ea03 0501 	and.w	r5, r3, r1
 800bd18:	ea04 0602 	and.w	r6, r4, r2
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	4632      	mov	r2, r6
 800bd20:	f04f 0300 	mov.w	r3, #0
 800bd24:	f04f 0400 	mov.w	r4, #0
 800bd28:	0154      	lsls	r4, r2, #5
 800bd2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bd2e:	014b      	lsls	r3, r1, #5
 800bd30:	4619      	mov	r1, r3
 800bd32:	4622      	mov	r2, r4
 800bd34:	1b49      	subs	r1, r1, r5
 800bd36:	eb62 0206 	sbc.w	r2, r2, r6
 800bd3a:	f04f 0300 	mov.w	r3, #0
 800bd3e:	f04f 0400 	mov.w	r4, #0
 800bd42:	0194      	lsls	r4, r2, #6
 800bd44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bd48:	018b      	lsls	r3, r1, #6
 800bd4a:	1a5b      	subs	r3, r3, r1
 800bd4c:	eb64 0402 	sbc.w	r4, r4, r2
 800bd50:	f04f 0100 	mov.w	r1, #0
 800bd54:	f04f 0200 	mov.w	r2, #0
 800bd58:	00e2      	lsls	r2, r4, #3
 800bd5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bd5e:	00d9      	lsls	r1, r3, #3
 800bd60:	460b      	mov	r3, r1
 800bd62:	4614      	mov	r4, r2
 800bd64:	195b      	adds	r3, r3, r5
 800bd66:	eb44 0406 	adc.w	r4, r4, r6
 800bd6a:	f04f 0100 	mov.w	r1, #0
 800bd6e:	f04f 0200 	mov.w	r2, #0
 800bd72:	02a2      	lsls	r2, r4, #10
 800bd74:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bd78:	0299      	lsls	r1, r3, #10
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4614      	mov	r4, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	4621      	mov	r1, r4
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f04f 0400 	mov.w	r4, #0
 800bd88:	461a      	mov	r2, r3
 800bd8a:	4623      	mov	r3, r4
 800bd8c:	f7f4 ff94 	bl	8000cb8 <__aeabi_uldivmod>
 800bd90:	4603      	mov	r3, r0
 800bd92:	460c      	mov	r4, r1
 800bd94:	60fb      	str	r3, [r7, #12]
 800bd96:	e049      	b.n	800be2c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd98:	4b2f      	ldr	r3, [pc, #188]	; (800be58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	099b      	lsrs	r3, r3, #6
 800bd9e:	f04f 0400 	mov.w	r4, #0
 800bda2:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bda6:	f04f 0200 	mov.w	r2, #0
 800bdaa:	ea03 0501 	and.w	r5, r3, r1
 800bdae:	ea04 0602 	and.w	r6, r4, r2
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	4632      	mov	r2, r6
 800bdb6:	f04f 0300 	mov.w	r3, #0
 800bdba:	f04f 0400 	mov.w	r4, #0
 800bdbe:	0154      	lsls	r4, r2, #5
 800bdc0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bdc4:	014b      	lsls	r3, r1, #5
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	4622      	mov	r2, r4
 800bdca:	1b49      	subs	r1, r1, r5
 800bdcc:	eb62 0206 	sbc.w	r2, r2, r6
 800bdd0:	f04f 0300 	mov.w	r3, #0
 800bdd4:	f04f 0400 	mov.w	r4, #0
 800bdd8:	0194      	lsls	r4, r2, #6
 800bdda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bdde:	018b      	lsls	r3, r1, #6
 800bde0:	1a5b      	subs	r3, r3, r1
 800bde2:	eb64 0402 	sbc.w	r4, r4, r2
 800bde6:	f04f 0100 	mov.w	r1, #0
 800bdea:	f04f 0200 	mov.w	r2, #0
 800bdee:	00e2      	lsls	r2, r4, #3
 800bdf0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bdf4:	00d9      	lsls	r1, r3, #3
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4614      	mov	r4, r2
 800bdfa:	195b      	adds	r3, r3, r5
 800bdfc:	eb44 0406 	adc.w	r4, r4, r6
 800be00:	f04f 0100 	mov.w	r1, #0
 800be04:	f04f 0200 	mov.w	r2, #0
 800be08:	02a2      	lsls	r2, r4, #10
 800be0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800be0e:	0299      	lsls	r1, r3, #10
 800be10:	460b      	mov	r3, r1
 800be12:	4614      	mov	r4, r2
 800be14:	4618      	mov	r0, r3
 800be16:	4621      	mov	r1, r4
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f04f 0400 	mov.w	r4, #0
 800be1e:	461a      	mov	r2, r3
 800be20:	4623      	mov	r3, r4
 800be22:	f7f4 ff49 	bl	8000cb8 <__aeabi_uldivmod>
 800be26:	4603      	mov	r3, r0
 800be28:	460c      	mov	r4, r1
 800be2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800be2c:	4b0a      	ldr	r3, [pc, #40]	; (800be58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	0c1b      	lsrs	r3, r3, #16
 800be32:	f003 0303 	and.w	r3, r3, #3
 800be36:	3301      	adds	r3, #1
 800be38:	005b      	lsls	r3, r3, #1
 800be3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	fbb2 f3f3 	udiv	r3, r2, r3
 800be44:	60bb      	str	r3, [r7, #8]
      break;
 800be46:	e002      	b.n	800be4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800be48:	4b04      	ldr	r3, [pc, #16]	; (800be5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800be4a:	60bb      	str	r3, [r7, #8]
      break;
 800be4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800be4e:	68bb      	ldr	r3, [r7, #8]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be58:	40023800 	.word	0x40023800
 800be5c:	00f42400 	.word	0x00f42400

0800be60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800be60:	b480      	push	{r7}
 800be62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800be64:	4b03      	ldr	r3, [pc, #12]	; (800be74 <HAL_RCC_GetHCLKFreq+0x14>)
 800be66:	681b      	ldr	r3, [r3, #0]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	20000000 	.word	0x20000000

0800be78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800be7c:	f7ff fff0 	bl	800be60 <HAL_RCC_GetHCLKFreq>
 800be80:	4601      	mov	r1, r0
 800be82:	4b05      	ldr	r3, [pc, #20]	; (800be98 <HAL_RCC_GetPCLK1Freq+0x20>)
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	0a9b      	lsrs	r3, r3, #10
 800be88:	f003 0307 	and.w	r3, r3, #7
 800be8c:	4a03      	ldr	r2, [pc, #12]	; (800be9c <HAL_RCC_GetPCLK1Freq+0x24>)
 800be8e:	5cd3      	ldrb	r3, [r2, r3]
 800be90:	fa21 f303 	lsr.w	r3, r1, r3
}
 800be94:	4618      	mov	r0, r3
 800be96:	bd80      	pop	{r7, pc}
 800be98:	40023800 	.word	0x40023800
 800be9c:	08019ad4 	.word	0x08019ad4

0800bea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bea4:	f7ff ffdc 	bl	800be60 <HAL_RCC_GetHCLKFreq>
 800bea8:	4601      	mov	r1, r0
 800beaa:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	0b5b      	lsrs	r3, r3, #13
 800beb0:	f003 0307 	and.w	r3, r3, #7
 800beb4:	4a03      	ldr	r2, [pc, #12]	; (800bec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800beb6:	5cd3      	ldrb	r3, [r2, r3]
 800beb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	40023800 	.word	0x40023800
 800bec4:	08019ad4 	.word	0x08019ad4

0800bec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b088      	sub	sp, #32
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bed0:	2300      	movs	r3, #0
 800bed2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800bed4:	2300      	movs	r3, #0
 800bed6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800bed8:	2300      	movs	r3, #0
 800beda:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800bedc:	2300      	movs	r3, #0
 800bede:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800bee0:	2300      	movs	r3, #0
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00a      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bef0:	4b66      	ldr	r3, [pc, #408]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bef6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800befe:	4963      	ldr	r1, [pc, #396]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00a      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800bf12:	4b5e      	ldr	r3, [pc, #376]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf18:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf20:	495a      	ldr	r1, [pc, #360]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf22:	4313      	orrs	r3, r2
 800bf24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f003 0301 	and.w	r3, r3, #1
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10b      	bne.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d105      	bne.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d075      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bf4c:	4b50      	ldr	r3, [pc, #320]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bf52:	f7fd fb33 	bl	80095bc <HAL_GetTick>
 800bf56:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bf58:	e008      	b.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bf5a:	f7fd fb2f 	bl	80095bc <HAL_GetTick>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	2b02      	cmp	r3, #2
 800bf66:	d901      	bls.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf68:	2303      	movs	r3, #3
 800bf6a:	e1dc      	b.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bf6c:	4b47      	ldr	r3, [pc, #284]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1f0      	bne.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d009      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	019a      	lsls	r2, r3, #6
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	071b      	lsls	r3, r3, #28
 800bf90:	493e      	ldr	r1, [pc, #248]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf92:	4313      	orrs	r3, r2
 800bf94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d01f      	beq.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bfa4:	4b39      	ldr	r3, [pc, #228]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bfa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfaa:	0f1b      	lsrs	r3, r3, #28
 800bfac:	f003 0307 	and.w	r3, r3, #7
 800bfb0:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	019a      	lsls	r2, r3, #6
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	061b      	lsls	r3, r3, #24
 800bfbe:	431a      	orrs	r2, r3
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	071b      	lsls	r3, r3, #28
 800bfc4:	4931      	ldr	r1, [pc, #196]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bfcc:	4b2f      	ldr	r3, [pc, #188]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bfce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfd2:	f023 021f 	bic.w	r2, r3, #31
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a1b      	ldr	r3, [r3, #32]
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	492b      	ldr	r1, [pc, #172]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00d      	beq.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	019a      	lsls	r2, r3, #6
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	061b      	lsls	r3, r3, #24
 800bffc:	431a      	orrs	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	071b      	lsls	r3, r3, #28
 800c004:	4921      	ldr	r1, [pc, #132]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c006:	4313      	orrs	r3, r2
 800c008:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c00c:	4b20      	ldr	r3, [pc, #128]	; (800c090 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c00e:	2201      	movs	r2, #1
 800c010:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c012:	f7fd fad3 	bl	80095bc <HAL_GetTick>
 800c016:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c018:	e008      	b.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c01a:	f7fd facf 	bl	80095bc <HAL_GetTick>
 800c01e:	4602      	mov	r2, r0
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	1ad3      	subs	r3, r2, r3
 800c024:	2b02      	cmp	r3, #2
 800c026:	d901      	bls.n	800c02c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c028:	2303      	movs	r3, #3
 800c02a:	e17c      	b.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c02c:	4b17      	ldr	r3, [pc, #92]	; (800c08c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c034:	2b00      	cmp	r3, #0
 800c036:	d0f0      	beq.n	800c01a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 0304 	and.w	r3, r3, #4
 800c040:	2b00      	cmp	r3, #0
 800c042:	d112      	bne.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10c      	bne.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 80ce 	beq.w	800c1fa <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c066:	f040 80c8 	bne.w	800c1fa <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c06a:	4b0a      	ldr	r3, [pc, #40]	; (800c094 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c070:	f7fd faa4 	bl	80095bc <HAL_GetTick>
 800c074:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c076:	e00f      	b.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c078:	f7fd faa0 	bl	80095bc <HAL_GetTick>
 800c07c:	4602      	mov	r2, r0
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	2b02      	cmp	r3, #2
 800c084:	d908      	bls.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c086:	2303      	movs	r3, #3
 800c088:	e14d      	b.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c08a:	bf00      	nop
 800c08c:	40023800 	.word	0x40023800
 800c090:	42470068 	.word	0x42470068
 800c094:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c098:	4ba5      	ldr	r3, [pc, #660]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0a4:	d0e8      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0304 	and.w	r3, r3, #4
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d02e      	beq.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c0b2:	4b9f      	ldr	r3, [pc, #636]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0b8:	0c1b      	lsrs	r3, r3, #16
 800c0ba:	f003 0303 	and.w	r3, r3, #3
 800c0be:	3301      	adds	r3, #1
 800c0c0:	005b      	lsls	r3, r3, #1
 800c0c2:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c0c4:	4b9a      	ldr	r3, [pc, #616]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ca:	0f1b      	lsrs	r3, r3, #28
 800c0cc:	f003 0307 	and.w	r3, r3, #7
 800c0d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	691b      	ldr	r3, [r3, #16]
 800c0d6:	019a      	lsls	r2, r3, #6
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	085b      	lsrs	r3, r3, #1
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	041b      	lsls	r3, r3, #16
 800c0e0:	431a      	orrs	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	699b      	ldr	r3, [r3, #24]
 800c0e6:	061b      	lsls	r3, r3, #24
 800c0e8:	431a      	orrs	r2, r3
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	071b      	lsls	r3, r3, #28
 800c0ee:	4990      	ldr	r1, [pc, #576]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c0f6:	4b8e      	ldr	r3, [pc, #568]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c104:	3b01      	subs	r3, #1
 800c106:	021b      	lsls	r3, r3, #8
 800c108:	4989      	ldr	r1, [pc, #548]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c10a:	4313      	orrs	r3, r2
 800c10c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 0308 	and.w	r3, r3, #8
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d02c      	beq.n	800c176 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c11c:	4b84      	ldr	r3, [pc, #528]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c122:	0c1b      	lsrs	r3, r3, #16
 800c124:	f003 0303 	and.w	r3, r3, #3
 800c128:	3301      	adds	r3, #1
 800c12a:	005b      	lsls	r3, r3, #1
 800c12c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c12e:	4b80      	ldr	r3, [pc, #512]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c134:	0e1b      	lsrs	r3, r3, #24
 800c136:	f003 030f 	and.w	r3, r3, #15
 800c13a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	019a      	lsls	r2, r3, #6
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	085b      	lsrs	r3, r3, #1
 800c146:	3b01      	subs	r3, #1
 800c148:	041b      	lsls	r3, r3, #16
 800c14a:	431a      	orrs	r2, r3
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	061b      	lsls	r3, r3, #24
 800c150:	431a      	orrs	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	071b      	lsls	r3, r3, #28
 800c158:	4975      	ldr	r1, [pc, #468]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c15a:	4313      	orrs	r3, r2
 800c15c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c160:	4b73      	ldr	r3, [pc, #460]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c166:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c16e:	4970      	ldr	r1, [pc, #448]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c170:	4313      	orrs	r3, r2
 800c172:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d024      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c18a:	d11f      	bne.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c18c:	4b68      	ldr	r3, [pc, #416]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c192:	0e1b      	lsrs	r3, r3, #24
 800c194:	f003 030f 	and.w	r3, r3, #15
 800c198:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c19a:	4b65      	ldr	r3, [pc, #404]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1a0:	0f1b      	lsrs	r3, r3, #28
 800c1a2:	f003 0307 	and.w	r3, r3, #7
 800c1a6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	019a      	lsls	r2, r3, #6
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	695b      	ldr	r3, [r3, #20]
 800c1b2:	085b      	lsrs	r3, r3, #1
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	041b      	lsls	r3, r3, #16
 800c1b8:	431a      	orrs	r2, r3
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	061b      	lsls	r3, r3, #24
 800c1be:	431a      	orrs	r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	071b      	lsls	r3, r3, #28
 800c1c4:	495a      	ldr	r1, [pc, #360]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c1cc:	4b59      	ldr	r3, [pc, #356]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c1d2:	f7fd f9f3 	bl	80095bc <HAL_GetTick>
 800c1d6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c1d8:	e008      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c1da:	f7fd f9ef 	bl	80095bc <HAL_GetTick>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d901      	bls.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e09c      	b.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c1ec:	4b50      	ldr	r3, [pc, #320]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1f8:	d1ef      	bne.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f003 0320 	and.w	r3, r3, #32
 800c202:	2b00      	cmp	r3, #0
 800c204:	f000 8083 	beq.w	800c30e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c208:	2300      	movs	r3, #0
 800c20a:	60bb      	str	r3, [r7, #8]
 800c20c:	4b48      	ldr	r3, [pc, #288]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c210:	4a47      	ldr	r2, [pc, #284]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c216:	6413      	str	r3, [r2, #64]	; 0x40
 800c218:	4b45      	ldr	r3, [pc, #276]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c21c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c220:	60bb      	str	r3, [r7, #8]
 800c222:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c224:	4b44      	ldr	r3, [pc, #272]	; (800c338 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a43      	ldr	r2, [pc, #268]	; (800c338 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c22a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c22e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c230:	f7fd f9c4 	bl	80095bc <HAL_GetTick>
 800c234:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c236:	e008      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c238:	f7fd f9c0 	bl	80095bc <HAL_GetTick>
 800c23c:	4602      	mov	r2, r0
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	2b02      	cmp	r3, #2
 800c244:	d901      	bls.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c246:	2303      	movs	r3, #3
 800c248:	e06d      	b.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c24a:	4b3b      	ldr	r3, [pc, #236]	; (800c338 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c252:	2b00      	cmp	r3, #0
 800c254:	d0f0      	beq.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c256:	4b36      	ldr	r3, [pc, #216]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c25a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c25e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d02f      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c26e:	69ba      	ldr	r2, [r7, #24]
 800c270:	429a      	cmp	r2, r3
 800c272:	d028      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c274:	4b2e      	ldr	r3, [pc, #184]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c27c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c27e:	4b2f      	ldr	r3, [pc, #188]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c280:	2201      	movs	r2, #1
 800c282:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c284:	4b2d      	ldr	r3, [pc, #180]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c286:	2200      	movs	r2, #0
 800c288:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c28a:	4a29      	ldr	r2, [pc, #164]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c28c:	69bb      	ldr	r3, [r7, #24]
 800c28e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c290:	4b27      	ldr	r3, [pc, #156]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c294:	f003 0301 	and.w	r3, r3, #1
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d114      	bne.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c29c:	f7fd f98e 	bl	80095bc <HAL_GetTick>
 800c2a0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c2a2:	e00a      	b.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c2a4:	f7fd f98a 	bl	80095bc <HAL_GetTick>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d901      	bls.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	e035      	b.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c2ba:	4b1d      	ldr	r3, [pc, #116]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2be:	f003 0302 	and.w	r3, r3, #2
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d0ee      	beq.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c2d2:	d10d      	bne.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c2d4:	4b16      	ldr	r3, [pc, #88]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c2e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2e8:	4911      	ldr	r1, [pc, #68]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	608b      	str	r3, [r1, #8]
 800c2ee:	e005      	b.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c2f0:	4b0f      	ldr	r3, [pc, #60]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	4a0e      	ldr	r2, [pc, #56]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c2fa:	6093      	str	r3, [r2, #8]
 800c2fc:	4b0c      	ldr	r3, [pc, #48]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c308:	4909      	ldr	r1, [pc, #36]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c30a:	4313      	orrs	r3, r2
 800c30c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f003 0310 	and.w	r3, r3, #16
 800c316:	2b00      	cmp	r3, #0
 800c318:	d004      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c320:	4b07      	ldr	r3, [pc, #28]	; (800c340 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c322:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3720      	adds	r7, #32
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	40023800 	.word	0x40023800
 800c334:	42470070 	.word	0x42470070
 800c338:	40007000 	.word	0x40007000
 800c33c:	42470e40 	.word	0x42470e40
 800c340:	424711e0 	.word	0x424711e0

0800c344 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b086      	sub	sp, #24
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c34c:	2300      	movs	r3, #0
 800c34e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 0301 	and.w	r3, r3, #1
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d075      	beq.n	800c448 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c35c:	4ba2      	ldr	r3, [pc, #648]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	f003 030c 	and.w	r3, r3, #12
 800c364:	2b04      	cmp	r3, #4
 800c366:	d00c      	beq.n	800c382 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c368:	4b9f      	ldr	r3, [pc, #636]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c370:	2b08      	cmp	r3, #8
 800c372:	d112      	bne.n	800c39a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c374:	4b9c      	ldr	r3, [pc, #624]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c37c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c380:	d10b      	bne.n	800c39a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c382:	4b99      	ldr	r3, [pc, #612]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d05b      	beq.n	800c446 <HAL_RCC_OscConfig+0x102>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d157      	bne.n	800c446 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	e20b      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3a2:	d106      	bne.n	800c3b2 <HAL_RCC_OscConfig+0x6e>
 800c3a4:	4b90      	ldr	r3, [pc, #576]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a8f      	ldr	r2, [pc, #572]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c3aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3ae:	6013      	str	r3, [r2, #0]
 800c3b0:	e01d      	b.n	800c3ee <HAL_RCC_OscConfig+0xaa>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3ba:	d10c      	bne.n	800c3d6 <HAL_RCC_OscConfig+0x92>
 800c3bc:	4b8a      	ldr	r3, [pc, #552]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a89      	ldr	r2, [pc, #548]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c3c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c3c6:	6013      	str	r3, [r2, #0]
 800c3c8:	4b87      	ldr	r3, [pc, #540]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a86      	ldr	r2, [pc, #536]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c3ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	e00b      	b.n	800c3ee <HAL_RCC_OscConfig+0xaa>
 800c3d6:	4b84      	ldr	r3, [pc, #528]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a83      	ldr	r2, [pc, #524]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c3dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3e0:	6013      	str	r3, [r2, #0]
 800c3e2:	4b81      	ldr	r3, [pc, #516]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a80      	ldr	r2, [pc, #512]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c3e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d013      	beq.n	800c41e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3f6:	f7fd f8e1 	bl	80095bc <HAL_GetTick>
 800c3fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3fc:	e008      	b.n	800c410 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c3fe:	f7fd f8dd 	bl	80095bc <HAL_GetTick>
 800c402:	4602      	mov	r2, r0
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	2b64      	cmp	r3, #100	; 0x64
 800c40a:	d901      	bls.n	800c410 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c40c:	2303      	movs	r3, #3
 800c40e:	e1d0      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c410:	4b75      	ldr	r3, [pc, #468]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d0f0      	beq.n	800c3fe <HAL_RCC_OscConfig+0xba>
 800c41c:	e014      	b.n	800c448 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c41e:	f7fd f8cd 	bl	80095bc <HAL_GetTick>
 800c422:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c424:	e008      	b.n	800c438 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c426:	f7fd f8c9 	bl	80095bc <HAL_GetTick>
 800c42a:	4602      	mov	r2, r0
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	2b64      	cmp	r3, #100	; 0x64
 800c432:	d901      	bls.n	800c438 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c434:	2303      	movs	r3, #3
 800c436:	e1bc      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c438:	4b6b      	ldr	r3, [pc, #428]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1f0      	bne.n	800c426 <HAL_RCC_OscConfig+0xe2>
 800c444:	e000      	b.n	800c448 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c446:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f003 0302 	and.w	r3, r3, #2
 800c450:	2b00      	cmp	r3, #0
 800c452:	d063      	beq.n	800c51c <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c454:	4b64      	ldr	r3, [pc, #400]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	f003 030c 	and.w	r3, r3, #12
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00b      	beq.n	800c478 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c460:	4b61      	ldr	r3, [pc, #388]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c468:	2b08      	cmp	r3, #8
 800c46a:	d11c      	bne.n	800c4a6 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c46c:	4b5e      	ldr	r3, [pc, #376]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d116      	bne.n	800c4a6 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c478:	4b5b      	ldr	r3, [pc, #364]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 0302 	and.w	r3, r3, #2
 800c480:	2b00      	cmp	r3, #0
 800c482:	d005      	beq.n	800c490 <HAL_RCC_OscConfig+0x14c>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d001      	beq.n	800c490 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c48c:	2301      	movs	r3, #1
 800c48e:	e190      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c490:	4b55      	ldr	r3, [pc, #340]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	00db      	lsls	r3, r3, #3
 800c49e:	4952      	ldr	r1, [pc, #328]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4a4:	e03a      	b.n	800c51c <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d020      	beq.n	800c4f0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c4ae:	4b4f      	ldr	r3, [pc, #316]	; (800c5ec <HAL_RCC_OscConfig+0x2a8>)
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4b4:	f7fd f882 	bl	80095bc <HAL_GetTick>
 800c4b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4ba:	e008      	b.n	800c4ce <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c4bc:	f7fd f87e 	bl	80095bc <HAL_GetTick>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	2b02      	cmp	r3, #2
 800c4c8:	d901      	bls.n	800c4ce <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	e171      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4ce:	4b46      	ldr	r3, [pc, #280]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 0302 	and.w	r3, r3, #2
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d0f0      	beq.n	800c4bc <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4da:	4b43      	ldr	r3, [pc, #268]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	493f      	ldr	r1, [pc, #252]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	600b      	str	r3, [r1, #0]
 800c4ee:	e015      	b.n	800c51c <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c4f0:	4b3e      	ldr	r3, [pc, #248]	; (800c5ec <HAL_RCC_OscConfig+0x2a8>)
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4f6:	f7fd f861 	bl	80095bc <HAL_GetTick>
 800c4fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c4fc:	e008      	b.n	800c510 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c4fe:	f7fd f85d 	bl	80095bc <HAL_GetTick>
 800c502:	4602      	mov	r2, r0
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d901      	bls.n	800c510 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c50c:	2303      	movs	r3, #3
 800c50e:	e150      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c510:	4b35      	ldr	r3, [pc, #212]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f003 0302 	and.w	r3, r3, #2
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1f0      	bne.n	800c4fe <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f003 0308 	and.w	r3, r3, #8
 800c524:	2b00      	cmp	r3, #0
 800c526:	d030      	beq.n	800c58a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	695b      	ldr	r3, [r3, #20]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d016      	beq.n	800c55e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c530:	4b2f      	ldr	r3, [pc, #188]	; (800c5f0 <HAL_RCC_OscConfig+0x2ac>)
 800c532:	2201      	movs	r2, #1
 800c534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c536:	f7fd f841 	bl	80095bc <HAL_GetTick>
 800c53a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c53c:	e008      	b.n	800c550 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c53e:	f7fd f83d 	bl	80095bc <HAL_GetTick>
 800c542:	4602      	mov	r2, r0
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	2b02      	cmp	r3, #2
 800c54a:	d901      	bls.n	800c550 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c54c:	2303      	movs	r3, #3
 800c54e:	e130      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c550:	4b25      	ldr	r3, [pc, #148]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c554:	f003 0302 	and.w	r3, r3, #2
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d0f0      	beq.n	800c53e <HAL_RCC_OscConfig+0x1fa>
 800c55c:	e015      	b.n	800c58a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c55e:	4b24      	ldr	r3, [pc, #144]	; (800c5f0 <HAL_RCC_OscConfig+0x2ac>)
 800c560:	2200      	movs	r2, #0
 800c562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c564:	f7fd f82a 	bl	80095bc <HAL_GetTick>
 800c568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c56a:	e008      	b.n	800c57e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c56c:	f7fd f826 	bl	80095bc <HAL_GetTick>
 800c570:	4602      	mov	r2, r0
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	2b02      	cmp	r3, #2
 800c578:	d901      	bls.n	800c57e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e119      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c57e:	4b1a      	ldr	r3, [pc, #104]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c582:	f003 0302 	and.w	r3, r3, #2
 800c586:	2b00      	cmp	r3, #0
 800c588:	d1f0      	bne.n	800c56c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 0304 	and.w	r3, r3, #4
 800c592:	2b00      	cmp	r3, #0
 800c594:	f000 809f 	beq.w	800c6d6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c598:	2300      	movs	r3, #0
 800c59a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c59c:	4b12      	ldr	r3, [pc, #72]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10f      	bne.n	800c5c8 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	60fb      	str	r3, [r7, #12]
 800c5ac:	4b0e      	ldr	r3, [pc, #56]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b0:	4a0d      	ldr	r2, [pc, #52]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c5b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5b6:	6413      	str	r3, [r2, #64]	; 0x40
 800c5b8:	4b0b      	ldr	r3, [pc, #44]	; (800c5e8 <HAL_RCC_OscConfig+0x2a4>)
 800c5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5c0:	60fb      	str	r3, [r7, #12]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c5c8:	4b0a      	ldr	r3, [pc, #40]	; (800c5f4 <HAL_RCC_OscConfig+0x2b0>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d120      	bne.n	800c616 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c5d4:	4b07      	ldr	r3, [pc, #28]	; (800c5f4 <HAL_RCC_OscConfig+0x2b0>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a06      	ldr	r2, [pc, #24]	; (800c5f4 <HAL_RCC_OscConfig+0x2b0>)
 800c5da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5e0:	f7fc ffec 	bl	80095bc <HAL_GetTick>
 800c5e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c5e6:	e010      	b.n	800c60a <HAL_RCC_OscConfig+0x2c6>
 800c5e8:	40023800 	.word	0x40023800
 800c5ec:	42470000 	.word	0x42470000
 800c5f0:	42470e80 	.word	0x42470e80
 800c5f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5f8:	f7fc ffe0 	bl	80095bc <HAL_GetTick>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	2b02      	cmp	r3, #2
 800c604:	d901      	bls.n	800c60a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c606:	2303      	movs	r3, #3
 800c608:	e0d3      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c60a:	4b6c      	ldr	r3, [pc, #432]	; (800c7bc <HAL_RCC_OscConfig+0x478>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c612:	2b00      	cmp	r3, #0
 800c614:	d0f0      	beq.n	800c5f8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d106      	bne.n	800c62c <HAL_RCC_OscConfig+0x2e8>
 800c61e:	4b68      	ldr	r3, [pc, #416]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c622:	4a67      	ldr	r2, [pc, #412]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c624:	f043 0301 	orr.w	r3, r3, #1
 800c628:	6713      	str	r3, [r2, #112]	; 0x70
 800c62a:	e01c      	b.n	800c666 <HAL_RCC_OscConfig+0x322>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	2b05      	cmp	r3, #5
 800c632:	d10c      	bne.n	800c64e <HAL_RCC_OscConfig+0x30a>
 800c634:	4b62      	ldr	r3, [pc, #392]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c638:	4a61      	ldr	r2, [pc, #388]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c63a:	f043 0304 	orr.w	r3, r3, #4
 800c63e:	6713      	str	r3, [r2, #112]	; 0x70
 800c640:	4b5f      	ldr	r3, [pc, #380]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c644:	4a5e      	ldr	r2, [pc, #376]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c646:	f043 0301 	orr.w	r3, r3, #1
 800c64a:	6713      	str	r3, [r2, #112]	; 0x70
 800c64c:	e00b      	b.n	800c666 <HAL_RCC_OscConfig+0x322>
 800c64e:	4b5c      	ldr	r3, [pc, #368]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c652:	4a5b      	ldr	r2, [pc, #364]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c654:	f023 0301 	bic.w	r3, r3, #1
 800c658:	6713      	str	r3, [r2, #112]	; 0x70
 800c65a:	4b59      	ldr	r3, [pc, #356]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c65e:	4a58      	ldr	r2, [pc, #352]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c660:	f023 0304 	bic.w	r3, r3, #4
 800c664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d015      	beq.n	800c69a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c66e:	f7fc ffa5 	bl	80095bc <HAL_GetTick>
 800c672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c674:	e00a      	b.n	800c68c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c676:	f7fc ffa1 	bl	80095bc <HAL_GetTick>
 800c67a:	4602      	mov	r2, r0
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	f241 3288 	movw	r2, #5000	; 0x1388
 800c684:	4293      	cmp	r3, r2
 800c686:	d901      	bls.n	800c68c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c688:	2303      	movs	r3, #3
 800c68a:	e092      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c68c:	4b4c      	ldr	r3, [pc, #304]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c68e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c690:	f003 0302 	and.w	r3, r3, #2
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0ee      	beq.n	800c676 <HAL_RCC_OscConfig+0x332>
 800c698:	e014      	b.n	800c6c4 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c69a:	f7fc ff8f 	bl	80095bc <HAL_GetTick>
 800c69e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6a0:	e00a      	b.n	800c6b8 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6a2:	f7fc ff8b 	bl	80095bc <HAL_GetTick>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d901      	bls.n	800c6b8 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	e07c      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6b8:	4b41      	ldr	r3, [pc, #260]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c6ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6bc:	f003 0302 	and.w	r3, r3, #2
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1ee      	bne.n	800c6a2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c6c4:	7dfb      	ldrb	r3, [r7, #23]
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d105      	bne.n	800c6d6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6ca:	4b3d      	ldr	r3, [pc, #244]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ce:	4a3c      	ldr	r2, [pc, #240]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c6d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	699b      	ldr	r3, [r3, #24]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d068      	beq.n	800c7b0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c6de:	4b38      	ldr	r3, [pc, #224]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	f003 030c 	and.w	r3, r3, #12
 800c6e6:	2b08      	cmp	r3, #8
 800c6e8:	d060      	beq.n	800c7ac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	699b      	ldr	r3, [r3, #24]
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d145      	bne.n	800c77e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c6f2:	4b34      	ldr	r3, [pc, #208]	; (800c7c4 <HAL_RCC_OscConfig+0x480>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6f8:	f7fc ff60 	bl	80095bc <HAL_GetTick>
 800c6fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6fe:	e008      	b.n	800c712 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c700:	f7fc ff5c 	bl	80095bc <HAL_GetTick>
 800c704:	4602      	mov	r2, r0
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	1ad3      	subs	r3, r2, r3
 800c70a:	2b02      	cmp	r3, #2
 800c70c:	d901      	bls.n	800c712 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800c70e:	2303      	movs	r3, #3
 800c710:	e04f      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c712:	4b2b      	ldr	r3, [pc, #172]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1f0      	bne.n	800c700 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	69da      	ldr	r2, [r3, #28]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a1b      	ldr	r3, [r3, #32]
 800c726:	431a      	orrs	r2, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72c:	019b      	lsls	r3, r3, #6
 800c72e:	431a      	orrs	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c734:	085b      	lsrs	r3, r3, #1
 800c736:	3b01      	subs	r3, #1
 800c738:	041b      	lsls	r3, r3, #16
 800c73a:	431a      	orrs	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c740:	061b      	lsls	r3, r3, #24
 800c742:	431a      	orrs	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c748:	071b      	lsls	r3, r3, #28
 800c74a:	491d      	ldr	r1, [pc, #116]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c74c:	4313      	orrs	r3, r2
 800c74e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c750:	4b1c      	ldr	r3, [pc, #112]	; (800c7c4 <HAL_RCC_OscConfig+0x480>)
 800c752:	2201      	movs	r2, #1
 800c754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c756:	f7fc ff31 	bl	80095bc <HAL_GetTick>
 800c75a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c75c:	e008      	b.n	800c770 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c75e:	f7fc ff2d 	bl	80095bc <HAL_GetTick>
 800c762:	4602      	mov	r2, r0
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d901      	bls.n	800c770 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c76c:	2303      	movs	r3, #3
 800c76e:	e020      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c770:	4b13      	ldr	r3, [pc, #76]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d0f0      	beq.n	800c75e <HAL_RCC_OscConfig+0x41a>
 800c77c:	e018      	b.n	800c7b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c77e:	4b11      	ldr	r3, [pc, #68]	; (800c7c4 <HAL_RCC_OscConfig+0x480>)
 800c780:	2200      	movs	r2, #0
 800c782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c784:	f7fc ff1a 	bl	80095bc <HAL_GetTick>
 800c788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c78a:	e008      	b.n	800c79e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c78c:	f7fc ff16 	bl	80095bc <HAL_GetTick>
 800c790:	4602      	mov	r2, r0
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	2b02      	cmp	r3, #2
 800c798:	d901      	bls.n	800c79e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800c79a:	2303      	movs	r3, #3
 800c79c:	e009      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c79e:	4b08      	ldr	r3, [pc, #32]	; (800c7c0 <HAL_RCC_OscConfig+0x47c>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1f0      	bne.n	800c78c <HAL_RCC_OscConfig+0x448>
 800c7aa:	e001      	b.n	800c7b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e000      	b.n	800c7b2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3718      	adds	r7, #24
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	40007000 	.word	0x40007000
 800c7c0:	40023800 	.word	0x40023800
 800c7c4:	42470060 	.word	0x42470060

0800c7c8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e022      	b.n	800c820 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d105      	bne.n	800c7f2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f7fa faab 	bl	8006d48 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2203      	movs	r2, #3
 800c7f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f814 	bl	800c828 <HAL_SD_InitCard>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d001      	beq.n	800c80a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c806:	2301      	movs	r3, #1
 800c808:	e00a      	b.n	800c820 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2201      	movs	r2, #1
 800c81a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c828:	b5b0      	push	{r4, r5, r7, lr}
 800c82a:	b08e      	sub	sp, #56	; 0x38
 800c82c:	af04      	add	r7, sp, #16
 800c82e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c830:	2300      	movs	r3, #0
 800c832:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c838:	2300      	movs	r3, #0
 800c83a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c83c:	2300      	movs	r3, #0
 800c83e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c840:	2300      	movs	r3, #0
 800c842:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c844:	2376      	movs	r3, #118	; 0x76
 800c846:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681d      	ldr	r5, [r3, #0]
 800c84c:	466c      	mov	r4, sp
 800c84e:	f107 0314 	add.w	r3, r7, #20
 800c852:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c856:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c85a:	f107 0308 	add.w	r3, r7, #8
 800c85e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c860:	4628      	mov	r0, r5
 800c862:	f003 fa87 	bl	800fd74 <SDIO_Init>
 800c866:	4603      	mov	r3, r0
 800c868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c870:	2b00      	cmp	r3, #0
 800c872:	d001      	beq.n	800c878 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	e031      	b.n	800c8dc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c878:	4b1a      	ldr	r3, [pc, #104]	; (800c8e4 <HAL_SD_InitCard+0xbc>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4618      	mov	r0, r3
 800c884:	f003 fabf 	bl	800fe06 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c888:	4b16      	ldr	r3, [pc, #88]	; (800c8e4 <HAL_SD_InitCard+0xbc>)
 800c88a:	2201      	movs	r2, #1
 800c88c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 ffc6 	bl	800d820 <SD_PowerON>
 800c894:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c896:	6a3b      	ldr	r3, [r7, #32]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00b      	beq.n	800c8b4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8a8:	6a3b      	ldr	r3, [r7, #32]
 800c8aa:	431a      	orrs	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e013      	b.n	800c8dc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fee5 	bl	800d684 <SD_InitCard>
 800c8ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8bc:	6a3b      	ldr	r3, [r7, #32]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d00b      	beq.n	800c8da <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	431a      	orrs	r2, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e000      	b.n	800c8dc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3728      	adds	r7, #40	; 0x28
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c8e4:	422580a0 	.word	0x422580a0

0800c8e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b08c      	sub	sp, #48	; 0x30
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d107      	bne.n	800c910 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c904:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	e0c7      	b.n	800caa0 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b01      	cmp	r3, #1
 800c91a:	f040 80c0 	bne.w	800ca9e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	441a      	add	r2, r3
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c92e:	429a      	cmp	r2, r3
 800c930:	d907      	bls.n	800c942 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c936:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e0ae      	b.n	800caa0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2203      	movs	r2, #3
 800c946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2200      	movs	r2, #0
 800c950:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c960:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c966:	4a50      	ldr	r2, [pc, #320]	; (800caa8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c968:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96e:	4a4f      	ldr	r2, [pc, #316]	; (800caac <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800c970:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c976:	2200      	movs	r2, #0
 800c978:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	3380      	adds	r3, #128	; 0x80
 800c984:	4619      	mov	r1, r3
 800c986:	68ba      	ldr	r2, [r7, #8]
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	025b      	lsls	r3, r3, #9
 800c98c:	089b      	lsrs	r3, r3, #2
 800c98e:	f7fd fc07 	bl	800a1a0 <HAL_DMA_Start_IT>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d017      	beq.n	800c9c8 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c9a6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a40      	ldr	r2, [pc, #256]	; (800cab0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c9ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e06b      	b.n	800caa0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c9c8:	4b3a      	ldr	r3, [pc, #232]	; (800cab4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d002      	beq.n	800c9dc <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800c9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d8:	025b      	lsls	r3, r3, #9
 800c9da:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f003 faa1 	bl	800ff2c <SDMMC_CmdBlockLength>
 800c9ea:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800c9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00f      	beq.n	800ca12 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a2e      	ldr	r2, [pc, #184]	; (800cab0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c9f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca00:	431a      	orrs	r2, r3
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e046      	b.n	800caa0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ca12:	f04f 33ff 	mov.w	r3, #4294967295
 800ca16:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	025b      	lsls	r3, r3, #9
 800ca1c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ca1e:	2390      	movs	r3, #144	; 0x90
 800ca20:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ca22:	2302      	movs	r3, #2
 800ca24:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f107 0210 	add.w	r2, r7, #16
 800ca36:	4611      	mov	r1, r2
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f003 fa4b 	bl	800fed4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d90a      	bls.n	800ca5a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2282      	movs	r2, #130	; 0x82
 800ca48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca50:	4618      	mov	r0, r3
 800ca52:	f003 faaf 	bl	800ffb4 <SDMMC_CmdReadMultiBlock>
 800ca56:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ca58:	e009      	b.n	800ca6e <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2281      	movs	r2, #129	; 0x81
 800ca5e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca66:	4618      	mov	r0, r3
 800ca68:	f003 fa82 	bl	800ff70 <SDMMC_CmdReadSingleBlock>
 800ca6c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ca6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d012      	beq.n	800ca9a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a0d      	ldr	r2, [pc, #52]	; (800cab0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ca7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca82:	431a      	orrs	r2, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2200      	movs	r2, #0
 800ca94:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	e002      	b.n	800caa0 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	e000      	b.n	800caa0 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ca9e:	2302      	movs	r3, #2
  }
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3730      	adds	r7, #48	; 0x30
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	0800d493 	.word	0x0800d493
 800caac:	0800d505 	.word	0x0800d505
 800cab0:	004005ff 	.word	0x004005ff
 800cab4:	4225858c 	.word	0x4225858c

0800cab8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08c      	sub	sp, #48	; 0x30
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
 800cac4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d107      	bne.n	800cae0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cadc:	2301      	movs	r3, #1
 800cade:	e0ca      	b.n	800cc76 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	2b01      	cmp	r3, #1
 800caea:	f040 80c3 	bne.w	800cc74 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2200      	movs	r2, #0
 800caf2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800caf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	441a      	add	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d907      	bls.n	800cb12 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e0b1      	b.n	800cc76 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2203      	movs	r2, #3
 800cb16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f042 021a 	orr.w	r2, r2, #26
 800cb30:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb36:	4a52      	ldr	r2, [pc, #328]	; (800cc80 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cb38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb3e:	4a51      	ldr	r2, [pc, #324]	; (800cc84 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cb40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb46:	2200      	movs	r2, #0
 800cb48:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d002      	beq.n	800cb58 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb54:	025b      	lsls	r3, r3, #9
 800cb56:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cb60:	4618      	mov	r0, r3
 800cb62:	f003 f9e3 	bl	800ff2c <SDMMC_CmdBlockLength>
 800cb66:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00f      	beq.n	800cb8e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a45      	ldr	r2, [pc, #276]	; (800cc88 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cb74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7c:	431a      	orrs	r2, r3
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2201      	movs	r2, #1
 800cb86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e073      	b.n	800cc76 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d90a      	bls.n	800cbaa <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	22a0      	movs	r2, #160	; 0xa0
 800cb98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cba0:	4618      	mov	r0, r3
 800cba2:	f003 fa4b 	bl	801003c <SDMMC_CmdWriteMultiBlock>
 800cba6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cba8:	e009      	b.n	800cbbe <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2290      	movs	r2, #144	; 0x90
 800cbae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f003 fa1e 	bl	800fff8 <SDMMC_CmdWriteSingleBlock>
 800cbbc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d012      	beq.n	800cbea <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a2f      	ldr	r2, [pc, #188]	; (800cc88 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cbca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e045      	b.n	800cc76 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cbea:	4b28      	ldr	r3, [pc, #160]	; (800cc8c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cbec:	2201      	movs	r2, #1
 800cbee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cbf4:	68b9      	ldr	r1, [r7, #8]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3380      	adds	r3, #128	; 0x80
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	025b      	lsls	r3, r3, #9
 800cc02:	089b      	lsrs	r3, r3, #2
 800cc04:	f7fd facc 	bl	800a1a0 <HAL_DMA_Start_IT>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d01a      	beq.n	800cc44 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f022 021a 	bic.w	r2, r2, #26
 800cc1c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a19      	ldr	r2, [pc, #100]	; (800cc88 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cc24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2201      	movs	r2, #1
 800cc36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	e018      	b.n	800cc76 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cc44:	f04f 33ff 	mov.w	r3, #4294967295
 800cc48:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	025b      	lsls	r3, r3, #9
 800cc4e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cc50:	2390      	movs	r3, #144	; 0x90
 800cc52:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cc54:	2300      	movs	r3, #0
 800cc56:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f107 0210 	add.w	r2, r7, #16
 800cc68:	4611      	mov	r1, r2
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f003 f932 	bl	800fed4 <SDIO_ConfigData>

      return HAL_OK;
 800cc70:	2300      	movs	r3, #0
 800cc72:	e000      	b.n	800cc76 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800cc74:	2302      	movs	r3, #2
  }
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3730      	adds	r7, #48	; 0x30
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	0800d469 	.word	0x0800d469
 800cc84:	0800d505 	.word	0x0800d505
 800cc88:	004005ff 	.word	0x004005ff
 800cc8c:	4225858c 	.word	0x4225858c

0800cc90 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d008      	beq.n	800ccbe <HAL_SD_IRQHandler+0x2e>
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f003 0308 	and.w	r3, r3, #8
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d003      	beq.n	800ccbe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 ffc8 	bl	800dc4c <SD_Read_IT>
 800ccbc:	e155      	b.n	800cf6a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 808f 	beq.w	800cdec <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ccd6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	6812      	ldr	r2, [r2, #0]
 800cce2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800cce6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ccea:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f022 0201 	bic.w	r2, r2, #1
 800ccfa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f003 0308 	and.w	r3, r3, #8
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d039      	beq.n	800cd7a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f003 0302 	and.w	r3, r3, #2
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d104      	bne.n	800cd1a <HAL_SD_IRQHandler+0x8a>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f003 0320 	and.w	r3, r3, #32
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d011      	beq.n	800cd3e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f003 f9ae 	bl	8010080 <SDMMC_CmdStopTransfer>
 800cd24:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d008      	beq.n	800cd3e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	431a      	orrs	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 f91f 	bl	800cf7c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f240 523a 	movw	r2, #1338	; 0x53a
 800cd46:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2200      	movs	r2, #0
 800cd54:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f003 0301 	and.w	r3, r3, #1
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d104      	bne.n	800cd6a <HAL_SD_IRQHandler+0xda>
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f003 0302 	and.w	r3, r3, #2
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d003      	beq.n	800cd72 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f003 fe04 	bl	8010978 <HAL_SD_RxCpltCallback>
 800cd70:	e0fb      	b.n	800cf6a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f003 fdf6 	bl	8010964 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cd78:	e0f7      	b.n	800cf6a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f000 80f2 	beq.w	800cf6a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f003 0320 	and.w	r3, r3, #32
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d011      	beq.n	800cdb4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4618      	mov	r0, r3
 800cd96:	f003 f973 	bl	8010080 <SDMMC_CmdStopTransfer>
 800cd9a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d008      	beq.n	800cdb4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	431a      	orrs	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 f8e4 	bl	800cf7c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	f040 80d5 	bne.w	800cf6a <HAL_SD_IRQHandler+0x2da>
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f003 0302 	and.w	r3, r3, #2
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f040 80cf 	bne.w	800cf6a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f022 0208 	bic.w	r2, r2, #8
 800cdda:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f003 fdbd 	bl	8010964 <HAL_SD_TxCpltCallback>
}
 800cdea:	e0be      	b.n	800cf6a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d008      	beq.n	800ce0c <HAL_SD_IRQHandler+0x17c>
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f003 0308 	and.w	r3, r3, #8
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d003      	beq.n	800ce0c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 ff72 	bl	800dcee <SD_Write_IT>
 800ce0a:	e0ae      	b.n	800cf6a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce12:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f000 80a7 	beq.w	800cf6a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce22:	f003 0302 	and.w	r3, r3, #2
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d005      	beq.n	800ce36 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce2e:	f043 0202 	orr.w	r2, r3, #2
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce3c:	f003 0308 	and.w	r3, r3, #8
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d005      	beq.n	800ce50 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce48:	f043 0208 	orr.w	r2, r3, #8
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce56:	f003 0320 	and.w	r3, r3, #32
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d005      	beq.n	800ce6a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce62:	f043 0220 	orr.w	r2, r3, #32
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce70:	f003 0310 	and.w	r3, r3, #16
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d005      	beq.n	800ce84 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce7c:	f043 0210 	orr.w	r2, r3, #16
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce8c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ce9c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4618      	mov	r0, r3
 800cea4:	f003 f8ec 	bl	8010080 <SDMMC_CmdStopTransfer>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceae:	431a      	orrs	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f003 0308 	and.w	r3, r3, #8
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00a      	beq.n	800ced4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 f855 	bl	800cf7c <HAL_SD_ErrorCallback>
}
 800ced2:	e04a      	b.n	800cf6a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d045      	beq.n	800cf6a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f003 0310 	and.w	r3, r3, #16
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d104      	bne.n	800cef2 <HAL_SD_IRQHandler+0x262>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f003 0320 	and.w	r3, r3, #32
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d011      	beq.n	800cf16 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef6:	4a1f      	ldr	r2, [pc, #124]	; (800cf74 <HAL_SD_IRQHandler+0x2e4>)
 800cef8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fd f9a6 	bl	800a250 <HAL_DMA_Abort_IT>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d02f      	beq.n	800cf6a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f000 fb4a 	bl	800d5a8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800cf14:	e029      	b.n	800cf6a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f003 0301 	and.w	r3, r3, #1
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d104      	bne.n	800cf2a <HAL_SD_IRQHandler+0x29a>
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f003 0302 	and.w	r3, r3, #2
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d011      	beq.n	800cf4e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf2e:	4a12      	ldr	r2, [pc, #72]	; (800cf78 <HAL_SD_IRQHandler+0x2e8>)
 800cf30:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fd f98a 	bl	800a250 <HAL_DMA_Abort_IT>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d013      	beq.n	800cf6a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf46:	4618      	mov	r0, r3
 800cf48:	f000 fb65 	bl	800d616 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800cf4c:	e00d      	b.n	800cf6a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f003 fcf4 	bl	8010950 <HAL_SD_AbortCallback>
}
 800cf68:	e7ff      	b.n	800cf6a <HAL_SD_IRQHandler+0x2da>
 800cf6a:	bf00      	nop
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	0800d5a9 	.word	0x0800d5a9
 800cf78:	0800d617 	.word	0x0800d617

0800cf7c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cf84:	bf00      	nop
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf9e:	0f9b      	lsrs	r3, r3, #30
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfaa:	0e9b      	lsrs	r3, r3, #26
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	f003 030f 	and.w	r3, r3, #15
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfbc:	0e1b      	lsrs	r3, r3, #24
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	f003 0303 	and.w	r3, r3, #3
 800cfc4:	b2da      	uxtb	r2, r3
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfce:	0c1b      	lsrs	r3, r3, #16
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfda:	0a1b      	lsrs	r3, r3, #8
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cff0:	0d1b      	lsrs	r3, r3, #20
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cffc:	0c1b      	lsrs	r3, r3, #16
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	f003 030f 	and.w	r3, r3, #15
 800d004:	b2da      	uxtb	r2, r3
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d00e:	0bdb      	lsrs	r3, r3, #15
 800d010:	b2db      	uxtb	r3, r3
 800d012:	f003 0301 	and.w	r3, r3, #1
 800d016:	b2da      	uxtb	r2, r3
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d020:	0b9b      	lsrs	r3, r3, #14
 800d022:	b2db      	uxtb	r3, r3
 800d024:	f003 0301 	and.w	r3, r3, #1
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d032:	0b5b      	lsrs	r3, r3, #13
 800d034:	b2db      	uxtb	r3, r3
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	b2da      	uxtb	r2, r3
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d044:	0b1b      	lsrs	r3, r3, #12
 800d046:	b2db      	uxtb	r3, r3
 800d048:	f003 0301 	and.w	r3, r3, #1
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	2200      	movs	r2, #0
 800d056:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d163      	bne.n	800d128 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d064:	009a      	lsls	r2, r3, #2
 800d066:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d06a:	4013      	ands	r3, r2
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d070:	0f92      	lsrs	r2, r2, #30
 800d072:	431a      	orrs	r2, r3
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d07c:	0edb      	lsrs	r3, r3, #27
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	f003 0307 	and.w	r3, r3, #7
 800d084:	b2da      	uxtb	r2, r3
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d08e:	0e1b      	lsrs	r3, r3, #24
 800d090:	b2db      	uxtb	r3, r3
 800d092:	f003 0307 	and.w	r3, r3, #7
 800d096:	b2da      	uxtb	r2, r3
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0a0:	0d5b      	lsrs	r3, r3, #21
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	f003 0307 	and.w	r3, r3, #7
 800d0a8:	b2da      	uxtb	r2, r3
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0b2:	0c9b      	lsrs	r3, r3, #18
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	f003 0307 	and.w	r3, r3, #7
 800d0ba:	b2da      	uxtb	r2, r3
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0c4:	0bdb      	lsrs	r3, r3, #15
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	f003 0307 	and.w	r3, r3, #7
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	691b      	ldr	r3, [r3, #16]
 800d0d6:	1c5a      	adds	r2, r3, #1
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	7e1b      	ldrb	r3, [r3, #24]
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	f003 0307 	and.w	r3, r3, #7
 800d0e6:	3302      	adds	r3, #2
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d0f2:	fb02 f203 	mul.w	r2, r2, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	7a1b      	ldrb	r3, [r3, #8]
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	f003 030f 	and.w	r3, r3, #15
 800d104:	2201      	movs	r2, #1
 800d106:	409a      	lsls	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d114:	0a52      	lsrs	r2, r2, #9
 800d116:	fb02 f203 	mul.w	r2, r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d124:	661a      	str	r2, [r3, #96]	; 0x60
 800d126:	e031      	b.n	800d18c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d11d      	bne.n	800d16c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d134:	041b      	lsls	r3, r3, #16
 800d136:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d13e:	0c1b      	lsrs	r3, r3, #16
 800d140:	431a      	orrs	r2, r3
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	3301      	adds	r3, #1
 800d14c:	029a      	lsls	r2, r3, #10
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d160:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	661a      	str	r2, [r3, #96]	; 0x60
 800d16a:	e00f      	b.n	800d18c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a58      	ldr	r2, [pc, #352]	; (800d2d4 <HAL_SD_GetCardCSD+0x344>)
 800d172:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d178:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d188:	2301      	movs	r3, #1
 800d18a:	e09d      	b.n	800d2c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d190:	0b9b      	lsrs	r3, r3, #14
 800d192:	b2db      	uxtb	r3, r3
 800d194:	f003 0301 	and.w	r3, r3, #1
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1a2:	09db      	lsrs	r3, r3, #7
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c4:	0fdb      	lsrs	r3, r3, #31
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1d0:	0f5b      	lsrs	r3, r3, #29
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	f003 0303 	and.w	r3, r3, #3
 800d1d8:	b2da      	uxtb	r2, r3
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e2:	0e9b      	lsrs	r3, r3, #26
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	f003 0307 	and.w	r3, r3, #7
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1f4:	0d9b      	lsrs	r3, r3, #22
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	f003 030f 	and.w	r3, r3, #15
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d206:	0d5b      	lsrs	r3, r3, #21
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	f003 0301 	and.w	r3, r3, #1
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d222:	0c1b      	lsrs	r3, r3, #16
 800d224:	b2db      	uxtb	r3, r3
 800d226:	f003 0301 	and.w	r3, r3, #1
 800d22a:	b2da      	uxtb	r2, r3
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d236:	0bdb      	lsrs	r3, r3, #15
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	f003 0301 	and.w	r3, r3, #1
 800d23e:	b2da      	uxtb	r2, r3
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d24a:	0b9b      	lsrs	r3, r3, #14
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	b2da      	uxtb	r2, r3
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d25e:	0b5b      	lsrs	r3, r3, #13
 800d260:	b2db      	uxtb	r3, r3
 800d262:	f003 0301 	and.w	r3, r3, #1
 800d266:	b2da      	uxtb	r2, r3
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d272:	0b1b      	lsrs	r3, r3, #12
 800d274:	b2db      	uxtb	r3, r3
 800d276:	f003 0301 	and.w	r3, r3, #1
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d286:	0a9b      	lsrs	r3, r3, #10
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	f003 0303 	and.w	r3, r3, #3
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d29a:	0a1b      	lsrs	r3, r3, #8
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	f003 0303 	and.w	r3, r3, #3
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2ae:	085b      	lsrs	r3, r3, #1
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d2c6:	2300      	movs	r3, #0
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	004005ff 	.word	0x004005ff

0800d2d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d330:	b5b0      	push	{r4, r5, r7, lr}
 800d332:	b08e      	sub	sp, #56	; 0x38
 800d334:	af04      	add	r7, sp, #16
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2203      	movs	r2, #3
 800d33e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d346:	2b03      	cmp	r3, #3
 800d348:	d02e      	beq.n	800d3a8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d350:	d106      	bne.n	800d360 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d356:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	639a      	str	r2, [r3, #56]	; 0x38
 800d35e:	e029      	b.n	800d3b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d366:	d10a      	bne.n	800d37e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 fb0f 	bl	800d98c <SD_WideBus_Enable>
 800d36e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d376:	431a      	orrs	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	639a      	str	r2, [r3, #56]	; 0x38
 800d37c:	e01a      	b.n	800d3b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10a      	bne.n	800d39a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fb4c 	bl	800da22 <SD_WideBus_Disable>
 800d38a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d392:	431a      	orrs	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	639a      	str	r2, [r3, #56]	; 0x38
 800d398:	e00c      	b.n	800d3b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	639a      	str	r2, [r3, #56]	; 0x38
 800d3a6:	e005      	b.n	800d3b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d009      	beq.n	800d3d0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a18      	ldr	r2, [pc, #96]	; (800d424 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d3c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e024      	b.n	800d41a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	699b      	ldr	r3, [r3, #24]
 800d3f0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681d      	ldr	r5, [r3, #0]
 800d3f6:	466c      	mov	r4, sp
 800d3f8:	f107 0318 	add.w	r3, r7, #24
 800d3fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d404:	f107 030c 	add.w	r3, r7, #12
 800d408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d40a:	4628      	mov	r0, r5
 800d40c:	f002 fcb2 	bl	800fd74 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3728      	adds	r7, #40	; 0x28
 800d41e:	46bd      	mov	sp, r7
 800d420:	bdb0      	pop	{r4, r5, r7, pc}
 800d422:	bf00      	nop
 800d424:	004005ff 	.word	0x004005ff

0800d428 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b086      	sub	sp, #24
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d430:	2300      	movs	r3, #0
 800d432:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d434:	f107 030c 	add.w	r3, r7, #12
 800d438:	4619      	mov	r1, r3
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 fa7e 	bl	800d93c <SD_SendStatus>
 800d440:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d005      	beq.n	800d454 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	431a      	orrs	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	0a5b      	lsrs	r3, r3, #9
 800d458:	f003 030f 	and.w	r3, r3, #15
 800d45c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d45e:	693b      	ldr	r3, [r7, #16]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d474:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d484:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d486:	bf00      	nop
 800d488:	3714      	adds	r7, #20
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr

0800d492 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b084      	sub	sp, #16
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4a4:	2b82      	cmp	r3, #130	; 0x82
 800d4a6:	d111      	bne.n	800d4cc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f002 fde7 	bl	8010080 <SDMMC_CmdStopTransfer>
 800d4b2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d008      	beq.n	800d4cc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	431a      	orrs	r2, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f7ff fd58 	bl	800cf7c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f022 0208 	bic.w	r2, r2, #8
 800d4da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f240 523a 	movw	r2, #1338	; 0x53a
 800d4e4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f003 fa3f 	bl	8010978 <HAL_SD_RxCpltCallback>
#endif
}
 800d4fa:	bf00      	nop
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
	...

0800d504 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d510:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f7fd f848 	bl	800a5a8 <HAL_DMA_GetError>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b02      	cmp	r3, #2
 800d51c:	d03e      	beq.n	800d59c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d524:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d52a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d52c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	2b01      	cmp	r3, #1
 800d532:	d002      	beq.n	800d53a <SD_DMAError+0x36>
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d12d      	bne.n	800d596 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a19      	ldr	r2, [pc, #100]	; (800d5a4 <SD_DMAError+0xa0>)
 800d540:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d550:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d556:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d55e:	6978      	ldr	r0, [r7, #20]
 800d560:	f7ff ff62 	bl	800d428 <HAL_SD_GetCardState>
 800d564:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	2b06      	cmp	r3, #6
 800d56a:	d002      	beq.n	800d572 <SD_DMAError+0x6e>
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	2b05      	cmp	r3, #5
 800d570:	d10a      	bne.n	800d588 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4618      	mov	r0, r3
 800d578:	f002 fd82 	bl	8010080 <SDMMC_CmdStopTransfer>
 800d57c:	4602      	mov	r2, r0
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d582:	431a      	orrs	r2, r3
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	2201      	movs	r2, #1
 800d58c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2200      	movs	r2, #0
 800d594:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d596:	6978      	ldr	r0, [r7, #20]
 800d598:	f7ff fcf0 	bl	800cf7c <HAL_SD_ErrorCallback>
#endif
  }
}
 800d59c:	bf00      	nop
 800d59e:	3718      	adds	r7, #24
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	004005ff 	.word	0x004005ff

0800d5a8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f240 523a 	movw	r2, #1338	; 0x53a
 800d5be:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f7ff ff31 	bl	800d428 <HAL_SD_GetCardState>
 800d5c6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	2b06      	cmp	r3, #6
 800d5da:	d002      	beq.n	800d5e2 <SD_DMATxAbort+0x3a>
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	2b05      	cmp	r3, #5
 800d5e0:	d10a      	bne.n	800d5f8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f002 fd4a 	bl	8010080 <SDMMC_CmdStopTransfer>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f2:	431a      	orrs	r2, r3
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d103      	bne.n	800d608 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f003 f9a5 	bl	8010950 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d606:	e002      	b.n	800d60e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f7ff fcb7 	bl	800cf7c <HAL_SD_ErrorCallback>
}
 800d60e:	bf00      	nop
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b084      	sub	sp, #16
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d622:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f240 523a 	movw	r2, #1338	; 0x53a
 800d62c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7ff fefa 	bl	800d428 <HAL_SD_GetCardState>
 800d634:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2200      	movs	r2, #0
 800d642:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	2b06      	cmp	r3, #6
 800d648:	d002      	beq.n	800d650 <SD_DMARxAbort+0x3a>
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	2b05      	cmp	r3, #5
 800d64e:	d10a      	bne.n	800d666 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4618      	mov	r0, r3
 800d656:	f002 fd13 	bl	8010080 <SDMMC_CmdStopTransfer>
 800d65a:	4602      	mov	r2, r0
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d660:	431a      	orrs	r2, r3
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d103      	bne.n	800d676 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d66e:	68f8      	ldr	r0, [r7, #12]
 800d670:	f003 f96e 	bl	8010950 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d674:	e002      	b.n	800d67c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f7ff fc80 	bl	800cf7c <HAL_SD_ErrorCallback>
}
 800d67c:	bf00      	nop
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d684:	b5b0      	push	{r4, r5, r7, lr}
 800d686:	b094      	sub	sp, #80	; 0x50
 800d688:	af04      	add	r7, sp, #16
 800d68a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d68c:	2301      	movs	r3, #1
 800d68e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4618      	mov	r0, r3
 800d696:	f002 fbc5 	bl	800fe24 <SDIO_GetPowerState>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d102      	bne.n	800d6a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d6a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d6a4:	e0b7      	b.n	800d816 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d02f      	beq.n	800d70e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f002 fdee 	bl	8010294 <SDMMC_CmdSendCID>
 800d6b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <SD_InitCard+0x40>
    {
      return errorstate;
 800d6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c2:	e0a8      	b.n	800d816 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f002 fbef 	bl	800feae <SDIO_GetResponse>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2104      	movs	r1, #4
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f002 fbe6 	bl	800feae <SDIO_GetResponse>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2108      	movs	r1, #8
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f002 fbdd 	bl	800feae <SDIO_GetResponse>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	210c      	movs	r1, #12
 800d700:	4618      	mov	r0, r3
 800d702:	f002 fbd4 	bl	800feae <SDIO_GetResponse>
 800d706:	4602      	mov	r2, r0
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d712:	2b03      	cmp	r3, #3
 800d714:	d00d      	beq.n	800d732 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f107 020e 	add.w	r2, r7, #14
 800d71e:	4611      	mov	r1, r2
 800d720:	4618      	mov	r0, r3
 800d722:	f002 fdf4 	bl	801030e <SDMMC_CmdSetRelAdd>
 800d726:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <SD_InitCard+0xae>
    {
      return errorstate;
 800d72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d730:	e071      	b.n	800d816 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d736:	2b03      	cmp	r3, #3
 800d738:	d036      	beq.n	800d7a8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d73a:	89fb      	ldrh	r3, [r7, #14]
 800d73c:	461a      	mov	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d74a:	041b      	lsls	r3, r3, #16
 800d74c:	4619      	mov	r1, r3
 800d74e:	4610      	mov	r0, r2
 800d750:	f002 fdbe 	bl	80102d0 <SDMMC_CmdSendCSD>
 800d754:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d001      	beq.n	800d760 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d75e:	e05a      	b.n	800d816 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2100      	movs	r1, #0
 800d766:	4618      	mov	r0, r3
 800d768:	f002 fba1 	bl	800feae <SDIO_GetResponse>
 800d76c:	4602      	mov	r2, r0
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2104      	movs	r1, #4
 800d778:	4618      	mov	r0, r3
 800d77a:	f002 fb98 	bl	800feae <SDIO_GetResponse>
 800d77e:	4602      	mov	r2, r0
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2108      	movs	r1, #8
 800d78a:	4618      	mov	r0, r3
 800d78c:	f002 fb8f 	bl	800feae <SDIO_GetResponse>
 800d790:	4602      	mov	r2, r0
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	210c      	movs	r1, #12
 800d79c:	4618      	mov	r0, r3
 800d79e:	f002 fb86 	bl	800feae <SDIO_GetResponse>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2104      	movs	r1, #4
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f002 fb7d 	bl	800feae <SDIO_GetResponse>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	0d1a      	lsrs	r2, r3, #20
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d7bc:	f107 0310 	add.w	r3, r7, #16
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7ff fbe4 	bl	800cf90 <HAL_SD_GetCardCSD>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d002      	beq.n	800d7d4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d7d2:	e020      	b.n	800d816 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6819      	ldr	r1, [r3, #0]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7dc:	041b      	lsls	r3, r3, #16
 800d7de:	f04f 0400 	mov.w	r4, #0
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	4623      	mov	r3, r4
 800d7e6:	4608      	mov	r0, r1
 800d7e8:	f002 fc6c 	bl	80100c4 <SDMMC_CmdSelDesel>
 800d7ec:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d001      	beq.n	800d7f8 <SD_InitCard+0x174>
  {
    return errorstate;
 800d7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f6:	e00e      	b.n	800d816 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681d      	ldr	r5, [r3, #0]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	466c      	mov	r4, sp
 800d800:	f103 0210 	add.w	r2, r3, #16
 800d804:	ca07      	ldmia	r2, {r0, r1, r2}
 800d806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d80a:	3304      	adds	r3, #4
 800d80c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d80e:	4628      	mov	r0, r5
 800d810:	f002 fab0 	bl	800fd74 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3740      	adds	r7, #64	; 0x40
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d820 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b086      	sub	sp, #24
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d828:	2300      	movs	r3, #0
 800d82a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d82c:	2300      	movs	r3, #0
 800d82e:	617b      	str	r3, [r7, #20]
 800d830:	2300      	movs	r3, #0
 800d832:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4618      	mov	r0, r3
 800d83a:	f002 fc66 	bl	801010a <SDMMC_CmdGoIdleState>
 800d83e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d001      	beq.n	800d84a <SD_PowerON+0x2a>
  {
    return errorstate;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	e072      	b.n	800d930 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4618      	mov	r0, r3
 800d850:	f002 fc79 	bl	8010146 <SDMMC_CmdOperCond>
 800d854:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d00d      	beq.n	800d878 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	4618      	mov	r0, r3
 800d868:	f002 fc4f 	bl	801010a <SDMMC_CmdGoIdleState>
 800d86c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d004      	beq.n	800d87e <SD_PowerON+0x5e>
    {
      return errorstate;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	e05b      	b.n	800d930 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2201      	movs	r2, #1
 800d87c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d882:	2b01      	cmp	r3, #1
 800d884:	d137      	bne.n	800d8f6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2100      	movs	r1, #0
 800d88c:	4618      	mov	r0, r3
 800d88e:	f002 fc79 	bl	8010184 <SDMMC_CmdAppCommand>
 800d892:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d02d      	beq.n	800d8f6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d89a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d89e:	e047      	b.n	800d930 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f002 fc6c 	bl	8010184 <SDMMC_CmdAppCommand>
 800d8ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d001      	beq.n	800d8b8 <SD_PowerON+0x98>
    {
      return errorstate;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	e03b      	b.n	800d930 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	491e      	ldr	r1, [pc, #120]	; (800d938 <SD_PowerON+0x118>)
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f002 fc82 	bl	80101c8 <SDMMC_CmdAppOperCommand>
 800d8c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d002      	beq.n	800d8d2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d8d0:	e02e      	b.n	800d930 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f002 fae8 	bl	800feae <SDIO_GetResponse>
 800d8de:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	0fdb      	lsrs	r3, r3, #31
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d101      	bne.n	800d8ec <SD_PowerON+0xcc>
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	e000      	b.n	800d8ee <SD_PowerON+0xce>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	613b      	str	r3, [r7, #16]

    count++;
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d802      	bhi.n	800d906 <SD_PowerON+0xe6>
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d0cc      	beq.n	800d8a0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d902      	bls.n	800d916 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d914:	e00c      	b.n	800d930 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d003      	beq.n	800d928 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2201      	movs	r2, #1
 800d924:	645a      	str	r2, [r3, #68]	; 0x44
 800d926:	e002      	b.n	800d92e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3718      	adds	r7, #24
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	c1100000 	.word	0xc1100000

0800d93c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d102      	bne.n	800d952 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d94c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d950:	e018      	b.n	800d984 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d95a:	041b      	lsls	r3, r3, #16
 800d95c:	4619      	mov	r1, r3
 800d95e:	4610      	mov	r0, r2
 800d960:	f002 fcf6 	bl	8010350 <SDMMC_CmdSendStatus>
 800d964:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d001      	beq.n	800d970 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	e009      	b.n	800d984 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2100      	movs	r1, #0
 800d976:	4618      	mov	r0, r3
 800d978:	f002 fa99 	bl	800feae <SDIO_GetResponse>
 800d97c:	4602      	mov	r2, r0
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d982:	2300      	movs	r3, #0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3710      	adds	r7, #16
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d994:	2300      	movs	r3, #0
 800d996:	60fb      	str	r3, [r7, #12]
 800d998:	2300      	movs	r3, #0
 800d99a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f002 fa83 	bl	800feae <SDIO_GetResponse>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d9b2:	d102      	bne.n	800d9ba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d9b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d9b8:	e02f      	b.n	800da1a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d9ba:	f107 030c 	add.w	r3, r7, #12
 800d9be:	4619      	mov	r1, r3
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 f879 	bl	800dab8 <SD_FindSCR>
 800d9c6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d001      	beq.n	800d9d2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	e023      	b.n	800da1a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d01c      	beq.n	800da16 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9e4:	041b      	lsls	r3, r3, #16
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	4610      	mov	r0, r2
 800d9ea:	f002 fbcb 	bl	8010184 <SDMMC_CmdAppCommand>
 800d9ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d001      	beq.n	800d9fa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	e00f      	b.n	800da1a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2102      	movs	r1, #2
 800da00:	4618      	mov	r0, r3
 800da02:	f002 fc04 	bl	801020e <SDMMC_CmdBusWidth>
 800da06:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d001      	beq.n	800da12 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	e003      	b.n	800da1a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800da12:	2300      	movs	r3, #0
 800da14:	e001      	b.n	800da1a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3718      	adds	r7, #24
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}

0800da22 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800da22:	b580      	push	{r7, lr}
 800da24:	b086      	sub	sp, #24
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800da2a:	2300      	movs	r3, #0
 800da2c:	60fb      	str	r3, [r7, #12]
 800da2e:	2300      	movs	r3, #0
 800da30:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2100      	movs	r1, #0
 800da38:	4618      	mov	r0, r3
 800da3a:	f002 fa38 	bl	800feae <SDIO_GetResponse>
 800da3e:	4603      	mov	r3, r0
 800da40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da48:	d102      	bne.n	800da50 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800da4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da4e:	e02f      	b.n	800dab0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800da50:	f107 030c 	add.w	r3, r7, #12
 800da54:	4619      	mov	r1, r3
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 f82e 	bl	800dab8 <SD_FindSCR>
 800da5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d001      	beq.n	800da68 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	e023      	b.n	800dab0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d01c      	beq.n	800daac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da7a:	041b      	lsls	r3, r3, #16
 800da7c:	4619      	mov	r1, r3
 800da7e:	4610      	mov	r0, r2
 800da80:	f002 fb80 	bl	8010184 <SDMMC_CmdAppCommand>
 800da84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d001      	beq.n	800da90 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	e00f      	b.n	800dab0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2100      	movs	r1, #0
 800da96:	4618      	mov	r0, r3
 800da98:	f002 fbb9 	bl	801020e <SDMMC_CmdBusWidth>
 800da9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d001      	beq.n	800daa8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	e003      	b.n	800dab0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800daa8:	2300      	movs	r3, #0
 800daaa:	e001      	b.n	800dab0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800daac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3718      	adds	r7, #24
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dab8:	b590      	push	{r4, r7, lr}
 800daba:	b08f      	sub	sp, #60	; 0x3c
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dac2:	f7fb fd7b 	bl	80095bc <HAL_GetTick>
 800dac6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dac8:	2300      	movs	r3, #0
 800daca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dacc:	2300      	movs	r3, #0
 800dace:	60bb      	str	r3, [r7, #8]
 800dad0:	2300      	movs	r3, #0
 800dad2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2108      	movs	r1, #8
 800dade:	4618      	mov	r0, r3
 800dae0:	f002 fa24 	bl	800ff2c <SDMMC_CmdBlockLength>
 800dae4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800daec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daee:	e0a9      	b.n	800dc44 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daf8:	041b      	lsls	r3, r3, #16
 800dafa:	4619      	mov	r1, r3
 800dafc:	4610      	mov	r0, r2
 800dafe:	f002 fb41 	bl	8010184 <SDMMC_CmdAppCommand>
 800db02:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800db04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <SD_FindSCR+0x56>
  {
    return errorstate;
 800db0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0c:	e09a      	b.n	800dc44 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db0e:	f04f 33ff 	mov.w	r3, #4294967295
 800db12:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800db14:	2308      	movs	r3, #8
 800db16:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800db18:	2330      	movs	r3, #48	; 0x30
 800db1a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800db1c:	2302      	movs	r3, #2
 800db1e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800db20:	2300      	movs	r3, #0
 800db22:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800db24:	2301      	movs	r3, #1
 800db26:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f107 0210 	add.w	r2, r7, #16
 800db30:	4611      	mov	r1, r2
 800db32:	4618      	mov	r0, r3
 800db34:	f002 f9ce 	bl	800fed4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f002 fb88 	bl	8010252 <SDMMC_CmdSendSCR>
 800db42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db46:	2b00      	cmp	r3, #0
 800db48:	d022      	beq.n	800db90 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800db4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4c:	e07a      	b.n	800dc44 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d00e      	beq.n	800db7a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6819      	ldr	r1, [r3, #0]
 800db60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	f107 0208 	add.w	r2, r7, #8
 800db68:	18d4      	adds	r4, r2, r3
 800db6a:	4608      	mov	r0, r1
 800db6c:	f002 f92d 	bl	800fdca <SDIO_ReadFIFO>
 800db70:	4603      	mov	r3, r0
 800db72:	6023      	str	r3, [r4, #0]
      index++;
 800db74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db76:	3301      	adds	r3, #1
 800db78:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800db7a:	f7fb fd1f 	bl	80095bc <HAL_GetTick>
 800db7e:	4602      	mov	r2, r0
 800db80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db82:	1ad3      	subs	r3, r2, r3
 800db84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db88:	d102      	bne.n	800db90 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800db8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db8e:	e059      	b.n	800dc44 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db96:	f240 432a 	movw	r3, #1066	; 0x42a
 800db9a:	4013      	ands	r3, r2
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d0d6      	beq.n	800db4e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dba6:	f003 0308 	and.w	r3, r3, #8
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d005      	beq.n	800dbba <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2208      	movs	r2, #8
 800dbb4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dbb6:	2308      	movs	r3, #8
 800dbb8:	e044      	b.n	800dc44 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc0:	f003 0302 	and.w	r3, r3, #2
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d005      	beq.n	800dbd4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2202      	movs	r2, #2
 800dbce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	e037      	b.n	800dc44 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbda:	f003 0320 	and.w	r3, r3, #32
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d005      	beq.n	800dbee <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2220      	movs	r2, #32
 800dbe8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dbea:	2320      	movs	r3, #32
 800dbec:	e02a      	b.n	800dc44 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f240 523a 	movw	r2, #1338	; 0x53a
 800dbf6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	061a      	lsls	r2, r3, #24
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	021b      	lsls	r3, r3, #8
 800dc00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc04:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	0a1b      	lsrs	r3, r3, #8
 800dc0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dc0e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	0e1b      	lsrs	r3, r3, #24
 800dc14:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc18:	601a      	str	r2, [r3, #0]
    scr++;
 800dc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1c:	3304      	adds	r3, #4
 800dc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	061a      	lsls	r2, r3, #24
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	021b      	lsls	r3, r3, #8
 800dc28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc2c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	0a1b      	lsrs	r3, r3, #8
 800dc32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dc36:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	0e1b      	lsrs	r3, r3, #24
 800dc3c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc40:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	373c      	adds	r7, #60	; 0x3c
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd90      	pop	{r4, r7, pc}

0800dc4c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc58:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d03f      	beq.n	800dce6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dc66:	2300      	movs	r3, #0
 800dc68:	617b      	str	r3, [r7, #20]
 800dc6a:	e033      	b.n	800dcd4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4618      	mov	r0, r3
 800dc72:	f002 f8aa 	bl	800fdca <SDIO_ReadFIFO>
 800dc76:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	3301      	adds	r3, #1
 800dc84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	3b01      	subs	r3, #1
 800dc8a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	0a1b      	lsrs	r3, r3, #8
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	0c1b      	lsrs	r3, r3, #16
 800dca6:	b2da      	uxtb	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	0e1b      	lsrs	r3, r3, #24
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	3b01      	subs	r3, #1
 800dccc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	617b      	str	r3, [r7, #20]
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	2b07      	cmp	r3, #7
 800dcd8:	d9c8      	bls.n	800dc6c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	68fa      	ldr	r2, [r7, #12]
 800dcde:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	693a      	ldr	r2, [r7, #16]
 800dce4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800dce6:	bf00      	nop
 800dce8:	3718      	adds	r7, #24
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b086      	sub	sp, #24
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a1b      	ldr	r3, [r3, #32]
 800dcfa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd00:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d043      	beq.n	800dd90 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800dd08:	2300      	movs	r3, #0
 800dd0a:	617b      	str	r3, [r7, #20]
 800dd0c:	e037      	b.n	800dd7e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	3301      	adds	r3, #1
 800dd18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	021a      	lsls	r2, r3, #8
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	4313      	orrs	r3, r2
 800dd2a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	3b01      	subs	r3, #1
 800dd36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	041a      	lsls	r2, r3, #16
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	3301      	adds	r3, #1
 800dd48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	061a      	lsls	r2, r3, #24
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	3b01      	subs	r3, #1
 800dd66:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f107 0208 	add.w	r2, r7, #8
 800dd70:	4611      	mov	r1, r2
 800dd72:	4618      	mov	r0, r3
 800dd74:	f002 f836 	bl	800fde4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	617b      	str	r3, [r7, #20]
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2b07      	cmp	r3, #7
 800dd82:	d9c4      	bls.n	800dd0e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	693a      	ldr	r2, [r7, #16]
 800dd8e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800dd90:	bf00      	nop
 800dd92:	3718      	adds	r7, #24
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d101      	bne.n	800ddaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dda6:	2301      	movs	r3, #1
 800dda8:	e056      	b.n	800de58 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d106      	bne.n	800ddca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7f9 f8b1 	bl	8006f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2202      	movs	r2, #2
 800ddce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dde0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	685a      	ldr	r2, [r3, #4]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	431a      	orrs	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	431a      	orrs	r2, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	691b      	ldr	r3, [r3, #16]
 800ddf6:	431a      	orrs	r2, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	695b      	ldr	r3, [r3, #20]
 800ddfc:	431a      	orrs	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	699b      	ldr	r3, [r3, #24]
 800de02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800de06:	431a      	orrs	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	69db      	ldr	r3, [r3, #28]
 800de0c:	431a      	orrs	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6a1b      	ldr	r3, [r3, #32]
 800de12:	ea42 0103 	orr.w	r1, r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	430a      	orrs	r2, r1
 800de20:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	699b      	ldr	r3, [r3, #24]
 800de26:	0c1b      	lsrs	r3, r3, #16
 800de28:	f003 0104 	and.w	r1, r3, #4
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	430a      	orrs	r2, r1
 800de36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	69da      	ldr	r2, [r3, #28]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800de46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2201      	movs	r2, #1
 800de52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b088      	sub	sp, #32
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	603b      	str	r3, [r7, #0]
 800de6c:	4613      	mov	r3, r2
 800de6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800de7a:	2b01      	cmp	r3, #1
 800de7c:	d101      	bne.n	800de82 <HAL_SPI_Transmit+0x22>
 800de7e:	2302      	movs	r3, #2
 800de80:	e11e      	b.n	800e0c0 <HAL_SPI_Transmit+0x260>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2201      	movs	r2, #1
 800de86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de8a:	f7fb fb97 	bl	80095bc <HAL_GetTick>
 800de8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800de90:	88fb      	ldrh	r3, [r7, #6]
 800de92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d002      	beq.n	800dea6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800dea0:	2302      	movs	r3, #2
 800dea2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800dea4:	e103      	b.n	800e0ae <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <HAL_SPI_Transmit+0x52>
 800deac:	88fb      	ldrh	r3, [r7, #6]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d102      	bne.n	800deb8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800deb2:	2301      	movs	r3, #1
 800deb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800deb6:	e0fa      	b.n	800e0ae <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2203      	movs	r2, #3
 800debc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2200      	movs	r2, #0
 800dec4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	68ba      	ldr	r2, [r7, #8]
 800deca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	88fa      	ldrh	r2, [r7, #6]
 800ded0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	88fa      	ldrh	r2, [r7, #6]
 800ded6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2200      	movs	r2, #0
 800dedc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2200      	movs	r2, #0
 800dee8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2200      	movs	r2, #0
 800def4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800defe:	d107      	bne.n	800df10 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df1a:	2b40      	cmp	r3, #64	; 0x40
 800df1c:	d007      	beq.n	800df2e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df36:	d14b      	bne.n	800dfd0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d002      	beq.n	800df46 <HAL_SPI_Transmit+0xe6>
 800df40:	8afb      	ldrh	r3, [r7, #22]
 800df42:	2b01      	cmp	r3, #1
 800df44:	d13e      	bne.n	800dfc4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df4a:	881a      	ldrh	r2, [r3, #0]
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df56:	1c9a      	adds	r2, r3, #2
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df60:	b29b      	uxth	r3, r3
 800df62:	3b01      	subs	r3, #1
 800df64:	b29a      	uxth	r2, r3
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800df6a:	e02b      	b.n	800dfc4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	f003 0302 	and.w	r3, r3, #2
 800df76:	2b02      	cmp	r3, #2
 800df78:	d112      	bne.n	800dfa0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df7e:	881a      	ldrh	r2, [r3, #0]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df8a:	1c9a      	adds	r2, r3, #2
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df94:	b29b      	uxth	r3, r3
 800df96:	3b01      	subs	r3, #1
 800df98:	b29a      	uxth	r2, r3
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	86da      	strh	r2, [r3, #54]	; 0x36
 800df9e:	e011      	b.n	800dfc4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfa0:	f7fb fb0c 	bl	80095bc <HAL_GetTick>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d803      	bhi.n	800dfb8 <HAL_SPI_Transmit+0x158>
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb6:	d102      	bne.n	800dfbe <HAL_SPI_Transmit+0x15e>
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d102      	bne.n	800dfc4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800dfbe:	2303      	movs	r3, #3
 800dfc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dfc2:	e074      	b.n	800e0ae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d1ce      	bne.n	800df6c <HAL_SPI_Transmit+0x10c>
 800dfce:	e04c      	b.n	800e06a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d002      	beq.n	800dfde <HAL_SPI_Transmit+0x17e>
 800dfd8:	8afb      	ldrh	r3, [r7, #22]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d140      	bne.n	800e060 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	330c      	adds	r3, #12
 800dfe8:	7812      	ldrb	r2, [r2, #0]
 800dfea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff0:	1c5a      	adds	r2, r3, #1
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	3b01      	subs	r3, #1
 800dffe:	b29a      	uxth	r2, r3
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e004:	e02c      	b.n	800e060 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	f003 0302 	and.w	r3, r3, #2
 800e010:	2b02      	cmp	r3, #2
 800e012:	d113      	bne.n	800e03c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	330c      	adds	r3, #12
 800e01e:	7812      	ldrb	r2, [r2, #0]
 800e020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e026:	1c5a      	adds	r2, r3, #1
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e030:	b29b      	uxth	r3, r3
 800e032:	3b01      	subs	r3, #1
 800e034:	b29a      	uxth	r2, r3
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	86da      	strh	r2, [r3, #54]	; 0x36
 800e03a:	e011      	b.n	800e060 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e03c:	f7fb fabe 	bl	80095bc <HAL_GetTick>
 800e040:	4602      	mov	r2, r0
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	1ad3      	subs	r3, r2, r3
 800e046:	683a      	ldr	r2, [r7, #0]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d803      	bhi.n	800e054 <HAL_SPI_Transmit+0x1f4>
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e052:	d102      	bne.n	800e05a <HAL_SPI_Transmit+0x1fa>
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d102      	bne.n	800e060 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e05a:	2303      	movs	r3, #3
 800e05c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e05e:	e026      	b.n	800e0ae <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e064:	b29b      	uxth	r3, r3
 800e066:	2b00      	cmp	r3, #0
 800e068:	d1cd      	bne.n	800e006 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e06a:	69ba      	ldr	r2, [r7, #24]
 800e06c:	6839      	ldr	r1, [r7, #0]
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f000 fba4 	bl	800e7bc <SPI_EndRxTxTransaction>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2220      	movs	r2, #32
 800e07e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10a      	bne.n	800e09e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e088:	2300      	movs	r3, #0
 800e08a:	613b      	str	r3, [r7, #16]
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	613b      	str	r3, [r7, #16]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	689b      	ldr	r3, [r3, #8]
 800e09a:	613b      	str	r3, [r7, #16]
 800e09c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d002      	beq.n	800e0ac <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	77fb      	strb	r3, [r7, #31]
 800e0aa:	e000      	b.n	800e0ae <HAL_SPI_Transmit+0x24e>
  }

error:
 800e0ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e0be:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3720      	adds	r7, #32
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b088      	sub	sp, #32
 800e0cc:	af02      	add	r7, sp, #8
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	603b      	str	r3, [r7, #0]
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e0e4:	d112      	bne.n	800e10c <HAL_SPI_Receive+0x44>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	689b      	ldr	r3, [r3, #8]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d10e      	bne.n	800e10c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2204      	movs	r2, #4
 800e0f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e0f6:	88fa      	ldrh	r2, [r7, #6]
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	9300      	str	r3, [sp, #0]
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	68ba      	ldr	r2, [r7, #8]
 800e100:	68b9      	ldr	r1, [r7, #8]
 800e102:	68f8      	ldr	r0, [r7, #12]
 800e104:	f000 f8e9 	bl	800e2da <HAL_SPI_TransmitReceive>
 800e108:	4603      	mov	r3, r0
 800e10a:	e0e2      	b.n	800e2d2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e112:	2b01      	cmp	r3, #1
 800e114:	d101      	bne.n	800e11a <HAL_SPI_Receive+0x52>
 800e116:	2302      	movs	r3, #2
 800e118:	e0db      	b.n	800e2d2 <HAL_SPI_Receive+0x20a>
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2201      	movs	r2, #1
 800e11e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e122:	f7fb fa4b 	bl	80095bc <HAL_GetTick>
 800e126:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e12e:	b2db      	uxtb	r3, r3
 800e130:	2b01      	cmp	r3, #1
 800e132:	d002      	beq.n	800e13a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e134:	2302      	movs	r3, #2
 800e136:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e138:	e0c2      	b.n	800e2c0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d002      	beq.n	800e146 <HAL_SPI_Receive+0x7e>
 800e140:	88fb      	ldrh	r3, [r7, #6]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d102      	bne.n	800e14c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e146:	2301      	movs	r3, #1
 800e148:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e14a:	e0b9      	b.n	800e2c0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2204      	movs	r2, #4
 800e150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	88fa      	ldrh	r2, [r7, #6]
 800e164:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	88fa      	ldrh	r2, [r7, #6]
 800e16a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2200      	movs	r2, #0
 800e176:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2200      	movs	r2, #0
 800e17c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2200      	movs	r2, #0
 800e182:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2200      	movs	r2, #0
 800e188:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e192:	d107      	bne.n	800e1a4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e1a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ae:	2b40      	cmp	r3, #64	; 0x40
 800e1b0:	d007      	beq.n	800e1c2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	68db      	ldr	r3, [r3, #12]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d162      	bne.n	800e290 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e1ca:	e02e      	b.n	800e22a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	689b      	ldr	r3, [r3, #8]
 800e1d2:	f003 0301 	and.w	r3, r3, #1
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d115      	bne.n	800e206 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f103 020c 	add.w	r2, r3, #12
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e6:	7812      	ldrb	r2, [r2, #0]
 800e1e8:	b2d2      	uxtb	r2, r2
 800e1ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f0:	1c5a      	adds	r2, r3, #1
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e204:	e011      	b.n	800e22a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e206:	f7fb f9d9 	bl	80095bc <HAL_GetTick>
 800e20a:	4602      	mov	r2, r0
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	1ad3      	subs	r3, r2, r3
 800e210:	683a      	ldr	r2, [r7, #0]
 800e212:	429a      	cmp	r2, r3
 800e214:	d803      	bhi.n	800e21e <HAL_SPI_Receive+0x156>
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e21c:	d102      	bne.n	800e224 <HAL_SPI_Receive+0x15c>
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d102      	bne.n	800e22a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e224:	2303      	movs	r3, #3
 800e226:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e228:	e04a      	b.n	800e2c0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e22e:	b29b      	uxth	r3, r3
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1cb      	bne.n	800e1cc <HAL_SPI_Receive+0x104>
 800e234:	e031      	b.n	800e29a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	689b      	ldr	r3, [r3, #8]
 800e23c:	f003 0301 	and.w	r3, r3, #1
 800e240:	2b01      	cmp	r3, #1
 800e242:	d113      	bne.n	800e26c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	68da      	ldr	r2, [r3, #12]
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e24e:	b292      	uxth	r2, r2
 800e250:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e256:	1c9a      	adds	r2, r3, #2
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e260:	b29b      	uxth	r3, r3
 800e262:	3b01      	subs	r3, #1
 800e264:	b29a      	uxth	r2, r3
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e26a:	e011      	b.n	800e290 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e26c:	f7fb f9a6 	bl	80095bc <HAL_GetTick>
 800e270:	4602      	mov	r2, r0
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	1ad3      	subs	r3, r2, r3
 800e276:	683a      	ldr	r2, [r7, #0]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d803      	bhi.n	800e284 <HAL_SPI_Receive+0x1bc>
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e282:	d102      	bne.n	800e28a <HAL_SPI_Receive+0x1c2>
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d102      	bne.n	800e290 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e28a:	2303      	movs	r3, #3
 800e28c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e28e:	e017      	b.n	800e2c0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e294:	b29b      	uxth	r3, r3
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1cd      	bne.n	800e236 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e29a:	693a      	ldr	r2, [r7, #16]
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	f000 fa27 	bl	800e6f2 <SPI_EndRxTransaction>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d002      	beq.n	800e2b0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2220      	movs	r2, #32
 800e2ae:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d002      	beq.n	800e2be <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	75fb      	strb	r3, [r7, #23]
 800e2bc:	e000      	b.n	800e2c0 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e2be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3718      	adds	r7, #24
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}

0800e2da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e2da:	b580      	push	{r7, lr}
 800e2dc:	b08c      	sub	sp, #48	; 0x30
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	60f8      	str	r0, [r7, #12]
 800e2e2:	60b9      	str	r1, [r7, #8]
 800e2e4:	607a      	str	r2, [r7, #4]
 800e2e6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d101      	bne.n	800e300 <HAL_SPI_TransmitReceive+0x26>
 800e2fc:	2302      	movs	r3, #2
 800e2fe:	e18a      	b.n	800e616 <HAL_SPI_TransmitReceive+0x33c>
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e308:	f7fb f958 	bl	80095bc <HAL_GetTick>
 800e30c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e314:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e31e:	887b      	ldrh	r3, [r7, #2]
 800e320:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e322:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e326:	2b01      	cmp	r3, #1
 800e328:	d00f      	beq.n	800e34a <HAL_SPI_TransmitReceive+0x70>
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e330:	d107      	bne.n	800e342 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d103      	bne.n	800e342 <HAL_SPI_TransmitReceive+0x68>
 800e33a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e33e:	2b04      	cmp	r3, #4
 800e340:	d003      	beq.n	800e34a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e342:	2302      	movs	r3, #2
 800e344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e348:	e15b      	b.n	800e602 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d005      	beq.n	800e35c <HAL_SPI_TransmitReceive+0x82>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d002      	beq.n	800e35c <HAL_SPI_TransmitReceive+0x82>
 800e356:	887b      	ldrh	r3, [r7, #2]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d103      	bne.n	800e364 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e35c:	2301      	movs	r3, #1
 800e35e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e362:	e14e      	b.n	800e602 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	2b04      	cmp	r3, #4
 800e36e:	d003      	beq.n	800e378 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2205      	movs	r2, #5
 800e374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2200      	movs	r2, #0
 800e37c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	887a      	ldrh	r2, [r7, #2]
 800e388:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	887a      	ldrh	r2, [r7, #2]
 800e38e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	68ba      	ldr	r2, [r7, #8]
 800e394:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	887a      	ldrh	r2, [r7, #2]
 800e39a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	887a      	ldrh	r2, [r7, #2]
 800e3a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3b8:	2b40      	cmp	r3, #64	; 0x40
 800e3ba:	d007      	beq.n	800e3cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3d4:	d178      	bne.n	800e4c8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d002      	beq.n	800e3e4 <HAL_SPI_TransmitReceive+0x10a>
 800e3de:	8b7b      	ldrh	r3, [r7, #26]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d166      	bne.n	800e4b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e8:	881a      	ldrh	r2, [r3, #0]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f4:	1c9a      	adds	r2, r3, #2
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	3b01      	subs	r3, #1
 800e402:	b29a      	uxth	r2, r3
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e408:	e053      	b.n	800e4b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	689b      	ldr	r3, [r3, #8]
 800e410:	f003 0302 	and.w	r3, r3, #2
 800e414:	2b02      	cmp	r3, #2
 800e416:	d11b      	bne.n	800e450 <HAL_SPI_TransmitReceive+0x176>
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d016      	beq.n	800e450 <HAL_SPI_TransmitReceive+0x176>
 800e422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e424:	2b01      	cmp	r3, #1
 800e426:	d113      	bne.n	800e450 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e42c:	881a      	ldrh	r2, [r3, #0]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e438:	1c9a      	adds	r2, r3, #2
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e442:	b29b      	uxth	r3, r3
 800e444:	3b01      	subs	r3, #1
 800e446:	b29a      	uxth	r2, r3
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e44c:	2300      	movs	r3, #0
 800e44e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	689b      	ldr	r3, [r3, #8]
 800e456:	f003 0301 	and.w	r3, r3, #1
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d119      	bne.n	800e492 <HAL_SPI_TransmitReceive+0x1b8>
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e462:	b29b      	uxth	r3, r3
 800e464:	2b00      	cmp	r3, #0
 800e466:	d014      	beq.n	800e492 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	68da      	ldr	r2, [r3, #12]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e472:	b292      	uxth	r2, r2
 800e474:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e47a:	1c9a      	adds	r2, r3, #2
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e484:	b29b      	uxth	r3, r3
 800e486:	3b01      	subs	r3, #1
 800e488:	b29a      	uxth	r2, r3
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e48e:	2301      	movs	r3, #1
 800e490:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e492:	f7fb f893 	bl	80095bc <HAL_GetTick>
 800e496:	4602      	mov	r2, r0
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	1ad3      	subs	r3, r2, r3
 800e49c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d807      	bhi.n	800e4b2 <HAL_SPI_TransmitReceive+0x1d8>
 800e4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a8:	d003      	beq.n	800e4b2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e4aa:	2303      	movs	r3, #3
 800e4ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e4b0:	e0a7      	b.n	800e602 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1a6      	bne.n	800e40a <HAL_SPI_TransmitReceive+0x130>
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1a1      	bne.n	800e40a <HAL_SPI_TransmitReceive+0x130>
 800e4c6:	e07c      	b.n	800e5c2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d002      	beq.n	800e4d6 <HAL_SPI_TransmitReceive+0x1fc>
 800e4d0:	8b7b      	ldrh	r3, [r7, #26]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d16b      	bne.n	800e5ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	330c      	adds	r3, #12
 800e4e0:	7812      	ldrb	r2, [r2, #0]
 800e4e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e8:	1c5a      	adds	r2, r3, #1
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	3b01      	subs	r3, #1
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e4fc:	e057      	b.n	800e5ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	f003 0302 	and.w	r3, r3, #2
 800e508:	2b02      	cmp	r3, #2
 800e50a:	d11c      	bne.n	800e546 <HAL_SPI_TransmitReceive+0x26c>
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e510:	b29b      	uxth	r3, r3
 800e512:	2b00      	cmp	r3, #0
 800e514:	d017      	beq.n	800e546 <HAL_SPI_TransmitReceive+0x26c>
 800e516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d114      	bne.n	800e546 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	330c      	adds	r3, #12
 800e526:	7812      	ldrb	r2, [r2, #0]
 800e528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e52e:	1c5a      	adds	r2, r3, #1
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e538:	b29b      	uxth	r3, r3
 800e53a:	3b01      	subs	r3, #1
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e542:	2300      	movs	r3, #0
 800e544:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	f003 0301 	and.w	r3, r3, #1
 800e550:	2b01      	cmp	r3, #1
 800e552:	d119      	bne.n	800e588 <HAL_SPI_TransmitReceive+0x2ae>
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e558:	b29b      	uxth	r3, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d014      	beq.n	800e588 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	68da      	ldr	r2, [r3, #12]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e568:	b2d2      	uxtb	r2, r2
 800e56a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e570:	1c5a      	adds	r2, r3, #1
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	3b01      	subs	r3, #1
 800e57e:	b29a      	uxth	r2, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e584:	2301      	movs	r3, #1
 800e586:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e588:	f7fb f818 	bl	80095bc <HAL_GetTick>
 800e58c:	4602      	mov	r2, r0
 800e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e594:	429a      	cmp	r2, r3
 800e596:	d803      	bhi.n	800e5a0 <HAL_SPI_TransmitReceive+0x2c6>
 800e598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e59e:	d102      	bne.n	800e5a6 <HAL_SPI_TransmitReceive+0x2cc>
 800e5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d103      	bne.n	800e5ae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e5a6:	2303      	movs	r3, #3
 800e5a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e5ac:	e029      	b.n	800e602 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1a2      	bne.n	800e4fe <HAL_SPI_TransmitReceive+0x224>
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d19d      	bne.n	800e4fe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e5c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f000 f8f8 	bl	800e7bc <SPI_EndRxTxTransaction>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d006      	beq.n	800e5e0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2220      	movs	r2, #32
 800e5dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e5de:	e010      	b.n	800e602 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	689b      	ldr	r3, [r3, #8]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d10b      	bne.n	800e600 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	617b      	str	r3, [r7, #20]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	617b      	str	r3, [r7, #20]
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	e000      	b.n	800e602 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e600:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2201      	movs	r2, #1
 800e606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2200      	movs	r2, #0
 800e60e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e612:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e616:	4618      	mov	r0, r3
 800e618:	3730      	adds	r7, #48	; 0x30
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}

0800e61e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e61e:	b580      	push	{r7, lr}
 800e620:	b084      	sub	sp, #16
 800e622:	af00      	add	r7, sp, #0
 800e624:	60f8      	str	r0, [r7, #12]
 800e626:	60b9      	str	r1, [r7, #8]
 800e628:	603b      	str	r3, [r7, #0]
 800e62a:	4613      	mov	r3, r2
 800e62c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e62e:	e04c      	b.n	800e6ca <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e636:	d048      	beq.n	800e6ca <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e638:	f7fa ffc0 	bl	80095bc <HAL_GetTick>
 800e63c:	4602      	mov	r2, r0
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	683a      	ldr	r2, [r7, #0]
 800e644:	429a      	cmp	r2, r3
 800e646:	d902      	bls.n	800e64e <SPI_WaitFlagStateUntilTimeout+0x30>
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d13d      	bne.n	800e6ca <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	685a      	ldr	r2, [r3, #4]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e65c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e666:	d111      	bne.n	800e68c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e670:	d004      	beq.n	800e67c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	689b      	ldr	r3, [r3, #8]
 800e676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e67a:	d107      	bne.n	800e68c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e68a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e694:	d10f      	bne.n	800e6b6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e6b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e6c6:	2303      	movs	r3, #3
 800e6c8:	e00f      	b.n	800e6ea <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	689a      	ldr	r2, [r3, #8]
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	68ba      	ldr	r2, [r7, #8]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	bf0c      	ite	eq
 800e6da:	2301      	moveq	r3, #1
 800e6dc:	2300      	movne	r3, #0
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	79fb      	ldrb	r3, [r7, #7]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d1a3      	bne.n	800e630 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e6e8:	2300      	movs	r3, #0
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b086      	sub	sp, #24
 800e6f6:	af02      	add	r7, sp, #8
 800e6f8:	60f8      	str	r0, [r7, #12]
 800e6fa:	60b9      	str	r1, [r7, #8]
 800e6fc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e706:	d111      	bne.n	800e72c <SPI_EndRxTransaction+0x3a>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	689b      	ldr	r3, [r3, #8]
 800e70c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e710:	d004      	beq.n	800e71c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e71a:	d107      	bne.n	800e72c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e72a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e734:	d12a      	bne.n	800e78c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e73e:	d012      	beq.n	800e766 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	2200      	movs	r2, #0
 800e748:	2180      	movs	r1, #128	; 0x80
 800e74a:	68f8      	ldr	r0, [r7, #12]
 800e74c:	f7ff ff67 	bl	800e61e <SPI_WaitFlagStateUntilTimeout>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d02d      	beq.n	800e7b2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e75a:	f043 0220 	orr.w	r2, r3, #32
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e762:	2303      	movs	r3, #3
 800e764:	e026      	b.n	800e7b4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	2200      	movs	r2, #0
 800e76e:	2101      	movs	r1, #1
 800e770:	68f8      	ldr	r0, [r7, #12]
 800e772:	f7ff ff54 	bl	800e61e <SPI_WaitFlagStateUntilTimeout>
 800e776:	4603      	mov	r3, r0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d01a      	beq.n	800e7b2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e780:	f043 0220 	orr.w	r2, r3, #32
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e788:	2303      	movs	r3, #3
 800e78a:	e013      	b.n	800e7b4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	2200      	movs	r2, #0
 800e794:	2101      	movs	r1, #1
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f7ff ff41 	bl	800e61e <SPI_WaitFlagStateUntilTimeout>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d007      	beq.n	800e7b2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7a6:	f043 0220 	orr.w	r2, r3, #32
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e7ae:	2303      	movs	r3, #3
 800e7b0:	e000      	b.n	800e7b4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3710      	adds	r7, #16
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b088      	sub	sp, #32
 800e7c0:	af02      	add	r7, sp, #8
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e7c8:	4b1b      	ldr	r3, [pc, #108]	; (800e838 <SPI_EndRxTxTransaction+0x7c>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a1b      	ldr	r2, [pc, #108]	; (800e83c <SPI_EndRxTxTransaction+0x80>)
 800e7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e7d2:	0d5b      	lsrs	r3, r3, #21
 800e7d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e7d8:	fb02 f303 	mul.w	r3, r2, r3
 800e7dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7e6:	d112      	bne.n	800e80e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	2180      	movs	r1, #128	; 0x80
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f7ff ff13 	bl	800e61e <SPI_WaitFlagStateUntilTimeout>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d016      	beq.n	800e82c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e802:	f043 0220 	orr.w	r2, r3, #32
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e80a:	2303      	movs	r3, #3
 800e80c:	e00f      	b.n	800e82e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d00a      	beq.n	800e82a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	3b01      	subs	r3, #1
 800e818:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	689b      	ldr	r3, [r3, #8]
 800e820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e824:	2b80      	cmp	r3, #128	; 0x80
 800e826:	d0f2      	beq.n	800e80e <SPI_EndRxTxTransaction+0x52>
 800e828:	e000      	b.n	800e82c <SPI_EndRxTxTransaction+0x70>
        break;
 800e82a:	bf00      	nop
  }

  return HAL_OK;
 800e82c:	2300      	movs	r3, #0
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3718      	adds	r7, #24
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20000000 	.word	0x20000000
 800e83c:	165e9f81 	.word	0x165e9f81

0800e840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d101      	bne.n	800e852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e84e:	2301      	movs	r3, #1
 800e850:	e01d      	b.n	800e88e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d106      	bne.n	800e86c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7f8 fc1c 	bl	80070a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2202      	movs	r2, #2
 800e870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	3304      	adds	r3, #4
 800e87c:	4619      	mov	r1, r3
 800e87e:	4610      	mov	r0, r2
 800e880:	f000 fb56 	bl	800ef30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2201      	movs	r2, #1
 800e888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3708      	adds	r7, #8
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}

0800e896 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e896:	b480      	push	{r7}
 800e898:	b085      	sub	sp, #20
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	68da      	ldr	r2, [r3, #12]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f042 0201 	orr.w	r2, r2, #1
 800e8ac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	f003 0307 	and.w	r3, r3, #7
 800e8b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2b06      	cmp	r3, #6
 800e8be:	d007      	beq.n	800e8d0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f042 0201 	orr.w	r2, r2, #1
 800e8ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3714      	adds	r7, #20
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr

0800e8de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b082      	sub	sp, #8
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d101      	bne.n	800e8f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	e01d      	b.n	800e92c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d106      	bne.n	800e90a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f7f8 fb59 	bl	8006fbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2202      	movs	r2, #2
 800e90e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	3304      	adds	r3, #4
 800e91a:	4619      	mov	r1, r3
 800e91c:	4610      	mov	r0, r2
 800e91e:	f000 fb07 	bl	800ef30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2201      	movs	r2, #1
 800e926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e92a:	2300      	movs	r3, #0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	2201      	movs	r2, #1
 800e944:	6839      	ldr	r1, [r7, #0]
 800e946:	4618      	mov	r0, r3
 800e948:	f000 fd42 	bl	800f3d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a15      	ldr	r2, [pc, #84]	; (800e9a8 <HAL_TIM_PWM_Start+0x74>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d004      	beq.n	800e960 <HAL_TIM_PWM_Start+0x2c>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a14      	ldr	r2, [pc, #80]	; (800e9ac <HAL_TIM_PWM_Start+0x78>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d101      	bne.n	800e964 <HAL_TIM_PWM_Start+0x30>
 800e960:	2301      	movs	r3, #1
 800e962:	e000      	b.n	800e966 <HAL_TIM_PWM_Start+0x32>
 800e964:	2300      	movs	r3, #0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d007      	beq.n	800e97a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e978:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	f003 0307 	and.w	r3, r3, #7
 800e984:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2b06      	cmp	r3, #6
 800e98a:	d007      	beq.n	800e99c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f042 0201 	orr.w	r2, r2, #1
 800e99a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	40010000 	.word	0x40010000
 800e9ac:	40010400 	.word	0x40010400

0800e9b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d101      	bne.n	800e9c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e083      	b.n	800eacc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d106      	bne.n	800e9de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7f8 fbf3 	bl	80071c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2202      	movs	r2, #2
 800e9e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	689b      	ldr	r3, [r3, #8]
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	6812      	ldr	r2, [r2, #0]
 800e9f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e9f4:	f023 0307 	bic.w	r3, r3, #7
 800e9f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	3304      	adds	r3, #4
 800ea02:	4619      	mov	r1, r3
 800ea04:	4610      	mov	r0, r2
 800ea06:	f000 fa93 	bl	800ef30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	699b      	ldr	r3, [r3, #24]
 800ea18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	6a1b      	ldr	r3, [r3, #32]
 800ea20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	697a      	ldr	r2, [r7, #20]
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea32:	f023 0303 	bic.w	r3, r3, #3
 800ea36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	689a      	ldr	r2, [r3, #8]
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	699b      	ldr	r3, [r3, #24]
 800ea40:	021b      	lsls	r3, r3, #8
 800ea42:	4313      	orrs	r3, r2
 800ea44:	693a      	ldr	r2, [r7, #16]
 800ea46:	4313      	orrs	r3, r2
 800ea48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ea50:	f023 030c 	bic.w	r3, r3, #12
 800ea54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ea5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ea60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	68da      	ldr	r2, [r3, #12]
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	69db      	ldr	r3, [r3, #28]
 800ea6a:	021b      	lsls	r3, r3, #8
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	693a      	ldr	r2, [r7, #16]
 800ea70:	4313      	orrs	r3, r2
 800ea72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	011a      	lsls	r2, r3, #4
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	6a1b      	ldr	r3, [r3, #32]
 800ea7e:	031b      	lsls	r3, r3, #12
 800ea80:	4313      	orrs	r3, r2
 800ea82:	693a      	ldr	r2, [r7, #16]
 800ea84:	4313      	orrs	r3, r2
 800ea86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ea8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ea96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	685a      	ldr	r2, [r3, #4]
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	695b      	ldr	r3, [r3, #20]
 800eaa0:	011b      	lsls	r3, r3, #4
 800eaa2:	4313      	orrs	r3, r2
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	697a      	ldr	r2, [r7, #20]
 800eab0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	693a      	ldr	r2, [r7, #16]
 800eab8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3718      	adds	r7, #24
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d002      	beq.n	800eaea <HAL_TIM_Encoder_Start+0x16>
 800eae4:	2b04      	cmp	r3, #4
 800eae6:	d008      	beq.n	800eafa <HAL_TIM_Encoder_Start+0x26>
 800eae8:	e00f      	b.n	800eb0a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f000 fc6c 	bl	800f3d0 <TIM_CCxChannelCmd>
      break;
 800eaf8:	e016      	b.n	800eb28 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2201      	movs	r2, #1
 800eb00:	2104      	movs	r1, #4
 800eb02:	4618      	mov	r0, r3
 800eb04:	f000 fc64 	bl	800f3d0 <TIM_CCxChannelCmd>
      break;
 800eb08:	e00e      	b.n	800eb28 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	2100      	movs	r1, #0
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 fc5c 	bl	800f3d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	2104      	movs	r1, #4
 800eb20:	4618      	mov	r0, r3
 800eb22:	f000 fc55 	bl	800f3d0 <TIM_CCxChannelCmd>
      break;
 800eb26:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f042 0201 	orr.w	r2, r2, #1
 800eb36:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3708      	adds	r7, #8
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}

0800eb42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb42:	b580      	push	{r7, lr}
 800eb44:	b082      	sub	sp, #8
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	691b      	ldr	r3, [r3, #16]
 800eb50:	f003 0302 	and.w	r3, r3, #2
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d122      	bne.n	800eb9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	f003 0302 	and.w	r3, r3, #2
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d11b      	bne.n	800eb9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f06f 0202 	mvn.w	r2, #2
 800eb6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	699b      	ldr	r3, [r3, #24]
 800eb7c:	f003 0303 	and.w	r3, r3, #3
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d003      	beq.n	800eb8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 f9b5 	bl	800eef4 <HAL_TIM_IC_CaptureCallback>
 800eb8a:	e005      	b.n	800eb98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 f9a7 	bl	800eee0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 f9b8 	bl	800ef08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	691b      	ldr	r3, [r3, #16]
 800eba4:	f003 0304 	and.w	r3, r3, #4
 800eba8:	2b04      	cmp	r3, #4
 800ebaa:	d122      	bne.n	800ebf2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	f003 0304 	and.w	r3, r3, #4
 800ebb6:	2b04      	cmp	r3, #4
 800ebb8:	d11b      	bne.n	800ebf2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f06f 0204 	mvn.w	r2, #4
 800ebc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2202      	movs	r2, #2
 800ebc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d003      	beq.n	800ebe0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 f98b 	bl	800eef4 <HAL_TIM_IC_CaptureCallback>
 800ebde:	e005      	b.n	800ebec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f000 f97d 	bl	800eee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 f98e 	bl	800ef08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	691b      	ldr	r3, [r3, #16]
 800ebf8:	f003 0308 	and.w	r3, r3, #8
 800ebfc:	2b08      	cmp	r3, #8
 800ebfe:	d122      	bne.n	800ec46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	f003 0308 	and.w	r3, r3, #8
 800ec0a:	2b08      	cmp	r3, #8
 800ec0c:	d11b      	bne.n	800ec46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f06f 0208 	mvn.w	r2, #8
 800ec16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2204      	movs	r2, #4
 800ec1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	69db      	ldr	r3, [r3, #28]
 800ec24:	f003 0303 	and.w	r3, r3, #3
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d003      	beq.n	800ec34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 f961 	bl	800eef4 <HAL_TIM_IC_CaptureCallback>
 800ec32:	e005      	b.n	800ec40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 f953 	bl	800eee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 f964 	bl	800ef08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	f003 0310 	and.w	r3, r3, #16
 800ec50:	2b10      	cmp	r3, #16
 800ec52:	d122      	bne.n	800ec9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	f003 0310 	and.w	r3, r3, #16
 800ec5e:	2b10      	cmp	r3, #16
 800ec60:	d11b      	bne.n	800ec9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f06f 0210 	mvn.w	r2, #16
 800ec6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2208      	movs	r2, #8
 800ec70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	69db      	ldr	r3, [r3, #28]
 800ec78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d003      	beq.n	800ec88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 f937 	bl	800eef4 <HAL_TIM_IC_CaptureCallback>
 800ec86:	e005      	b.n	800ec94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f000 f929 	bl	800eee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 f93a 	bl	800ef08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2200      	movs	r2, #0
 800ec98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	f003 0301 	and.w	r3, r3, #1
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d10e      	bne.n	800ecc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	f003 0301 	and.w	r3, r3, #1
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d107      	bne.n	800ecc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f06f 0201 	mvn.w	r2, #1
 800ecbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7f6 ff69 	bl	8005b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	691b      	ldr	r3, [r3, #16]
 800eccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecd0:	2b80      	cmp	r3, #128	; 0x80
 800ecd2:	d10e      	bne.n	800ecf2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecde:	2b80      	cmp	r3, #128	; 0x80
 800ece0:	d107      	bne.n	800ecf2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ecea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 fc6d 	bl	800f5cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecfc:	2b40      	cmp	r3, #64	; 0x40
 800ecfe:	d10e      	bne.n	800ed1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	68db      	ldr	r3, [r3, #12]
 800ed06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed0a:	2b40      	cmp	r3, #64	; 0x40
 800ed0c:	d107      	bne.n	800ed1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ed16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 f8ff 	bl	800ef1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	691b      	ldr	r3, [r3, #16]
 800ed24:	f003 0320 	and.w	r3, r3, #32
 800ed28:	2b20      	cmp	r3, #32
 800ed2a:	d10e      	bne.n	800ed4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	68db      	ldr	r3, [r3, #12]
 800ed32:	f003 0320 	and.w	r3, r3, #32
 800ed36:	2b20      	cmp	r3, #32
 800ed38:	d107      	bne.n	800ed4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f06f 0220 	mvn.w	r2, #32
 800ed42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 fc37 	bl	800f5b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed4a:	bf00      	nop
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
	...

0800ed54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d101      	bne.n	800ed6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ed6a:	2302      	movs	r3, #2
 800ed6c:	e0b4      	b.n	800eed8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2201      	movs	r2, #1
 800ed72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2202      	movs	r2, #2
 800ed7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2b0c      	cmp	r3, #12
 800ed82:	f200 809f 	bhi.w	800eec4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ed86:	a201      	add	r2, pc, #4	; (adr r2, 800ed8c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ed88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed8c:	0800edc1 	.word	0x0800edc1
 800ed90:	0800eec5 	.word	0x0800eec5
 800ed94:	0800eec5 	.word	0x0800eec5
 800ed98:	0800eec5 	.word	0x0800eec5
 800ed9c:	0800ee01 	.word	0x0800ee01
 800eda0:	0800eec5 	.word	0x0800eec5
 800eda4:	0800eec5 	.word	0x0800eec5
 800eda8:	0800eec5 	.word	0x0800eec5
 800edac:	0800ee43 	.word	0x0800ee43
 800edb0:	0800eec5 	.word	0x0800eec5
 800edb4:	0800eec5 	.word	0x0800eec5
 800edb8:	0800eec5 	.word	0x0800eec5
 800edbc:	0800ee83 	.word	0x0800ee83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	68b9      	ldr	r1, [r7, #8]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f000 f952 	bl	800f070 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	699a      	ldr	r2, [r3, #24]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f042 0208 	orr.w	r2, r2, #8
 800edda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	699a      	ldr	r2, [r3, #24]
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f022 0204 	bic.w	r2, r2, #4
 800edea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	6999      	ldr	r1, [r3, #24]
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	691a      	ldr	r2, [r3, #16]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	430a      	orrs	r2, r1
 800edfc:	619a      	str	r2, [r3, #24]
      break;
 800edfe:	e062      	b.n	800eec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	68b9      	ldr	r1, [r7, #8]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 f9a2 	bl	800f150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	699a      	ldr	r2, [r3, #24]
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	699a      	ldr	r2, [r3, #24]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	6999      	ldr	r1, [r3, #24]
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	021a      	lsls	r2, r3, #8
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	430a      	orrs	r2, r1
 800ee3e:	619a      	str	r2, [r3, #24]
      break;
 800ee40:	e041      	b.n	800eec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	68b9      	ldr	r1, [r7, #8]
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f000 f9f7 	bl	800f23c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	69da      	ldr	r2, [r3, #28]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f042 0208 	orr.w	r2, r2, #8
 800ee5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	69da      	ldr	r2, [r3, #28]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f022 0204 	bic.w	r2, r2, #4
 800ee6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	69d9      	ldr	r1, [r3, #28]
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	691a      	ldr	r2, [r3, #16]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	430a      	orrs	r2, r1
 800ee7e:	61da      	str	r2, [r3, #28]
      break;
 800ee80:	e021      	b.n	800eec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	68b9      	ldr	r1, [r7, #8]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f000 fa4b 	bl	800f324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	69da      	ldr	r2, [r3, #28]
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	69da      	ldr	r2, [r3, #28]
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eeac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	69d9      	ldr	r1, [r3, #28]
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	691b      	ldr	r3, [r3, #16]
 800eeb8:	021a      	lsls	r2, r3, #8
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	430a      	orrs	r2, r1
 800eec0:	61da      	str	r2, [r3, #28]
      break;
 800eec2:	e000      	b.n	800eec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800eec4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2201      	movs	r2, #1
 800eeca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2200      	movs	r2, #0
 800eed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eed6:	2300      	movs	r3, #0
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3710      	adds	r7, #16
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eee8:	bf00      	nop
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eefc:	bf00      	nop
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ef10:	bf00      	nop
 800ef12:	370c      	adds	r7, #12
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ef24:	bf00      	nop
 800ef26:	370c      	adds	r7, #12
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b085      	sub	sp, #20
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a40      	ldr	r2, [pc, #256]	; (800f044 <TIM_Base_SetConfig+0x114>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d013      	beq.n	800ef70 <TIM_Base_SetConfig+0x40>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef4e:	d00f      	beq.n	800ef70 <TIM_Base_SetConfig+0x40>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	4a3d      	ldr	r2, [pc, #244]	; (800f048 <TIM_Base_SetConfig+0x118>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d00b      	beq.n	800ef70 <TIM_Base_SetConfig+0x40>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a3c      	ldr	r2, [pc, #240]	; (800f04c <TIM_Base_SetConfig+0x11c>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d007      	beq.n	800ef70 <TIM_Base_SetConfig+0x40>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4a3b      	ldr	r2, [pc, #236]	; (800f050 <TIM_Base_SetConfig+0x120>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d003      	beq.n	800ef70 <TIM_Base_SetConfig+0x40>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a3a      	ldr	r2, [pc, #232]	; (800f054 <TIM_Base_SetConfig+0x124>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d108      	bne.n	800ef82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4a2f      	ldr	r2, [pc, #188]	; (800f044 <TIM_Base_SetConfig+0x114>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d02b      	beq.n	800efe2 <TIM_Base_SetConfig+0xb2>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef90:	d027      	beq.n	800efe2 <TIM_Base_SetConfig+0xb2>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	4a2c      	ldr	r2, [pc, #176]	; (800f048 <TIM_Base_SetConfig+0x118>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d023      	beq.n	800efe2 <TIM_Base_SetConfig+0xb2>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4a2b      	ldr	r2, [pc, #172]	; (800f04c <TIM_Base_SetConfig+0x11c>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d01f      	beq.n	800efe2 <TIM_Base_SetConfig+0xb2>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4a2a      	ldr	r2, [pc, #168]	; (800f050 <TIM_Base_SetConfig+0x120>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d01b      	beq.n	800efe2 <TIM_Base_SetConfig+0xb2>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4a29      	ldr	r2, [pc, #164]	; (800f054 <TIM_Base_SetConfig+0x124>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d017      	beq.n	800efe2 <TIM_Base_SetConfig+0xb2>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4a28      	ldr	r2, [pc, #160]	; (800f058 <TIM_Base_SetConfig+0x128>)
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d013      	beq.n	800efe2 <TIM_Base_SetConfig+0xb2>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4a27      	ldr	r2, [pc, #156]	; (800f05c <TIM_Base_SetConfig+0x12c>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d00f      	beq.n	800efe2 <TIM_Base_SetConfig+0xb2>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	4a26      	ldr	r2, [pc, #152]	; (800f060 <TIM_Base_SetConfig+0x130>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d00b      	beq.n	800efe2 <TIM_Base_SetConfig+0xb2>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	4a25      	ldr	r2, [pc, #148]	; (800f064 <TIM_Base_SetConfig+0x134>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d007      	beq.n	800efe2 <TIM_Base_SetConfig+0xb2>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4a24      	ldr	r2, [pc, #144]	; (800f068 <TIM_Base_SetConfig+0x138>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d003      	beq.n	800efe2 <TIM_Base_SetConfig+0xb2>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4a23      	ldr	r2, [pc, #140]	; (800f06c <TIM_Base_SetConfig+0x13c>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d108      	bne.n	800eff4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800efe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	68fa      	ldr	r2, [r7, #12]
 800eff0:	4313      	orrs	r3, r2
 800eff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	695b      	ldr	r3, [r3, #20]
 800effe:	4313      	orrs	r3, r2
 800f000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	689a      	ldr	r2, [r3, #8]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4a0a      	ldr	r2, [pc, #40]	; (800f044 <TIM_Base_SetConfig+0x114>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d003      	beq.n	800f028 <TIM_Base_SetConfig+0xf8>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a0c      	ldr	r2, [pc, #48]	; (800f054 <TIM_Base_SetConfig+0x124>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d103      	bne.n	800f030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	691a      	ldr	r2, [r3, #16]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2201      	movs	r2, #1
 800f034:	615a      	str	r2, [r3, #20]
}
 800f036:	bf00      	nop
 800f038:	3714      	adds	r7, #20
 800f03a:	46bd      	mov	sp, r7
 800f03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop
 800f044:	40010000 	.word	0x40010000
 800f048:	40000400 	.word	0x40000400
 800f04c:	40000800 	.word	0x40000800
 800f050:	40000c00 	.word	0x40000c00
 800f054:	40010400 	.word	0x40010400
 800f058:	40014000 	.word	0x40014000
 800f05c:	40014400 	.word	0x40014400
 800f060:	40014800 	.word	0x40014800
 800f064:	40001800 	.word	0x40001800
 800f068:	40001c00 	.word	0x40001c00
 800f06c:	40002000 	.word	0x40002000

0800f070 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f070:	b480      	push	{r7}
 800f072:	b087      	sub	sp, #28
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6a1b      	ldr	r3, [r3, #32]
 800f07e:	f023 0201 	bic.w	r2, r3, #1
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6a1b      	ldr	r3, [r3, #32]
 800f08a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	699b      	ldr	r3, [r3, #24]
 800f096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f023 0303 	bic.w	r3, r3, #3
 800f0a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	68fa      	ldr	r2, [r7, #12]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	f023 0302 	bic.w	r3, r3, #2
 800f0b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	689b      	ldr	r3, [r3, #8]
 800f0be:	697a      	ldr	r2, [r7, #20]
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	4a20      	ldr	r2, [pc, #128]	; (800f148 <TIM_OC1_SetConfig+0xd8>)
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	d003      	beq.n	800f0d4 <TIM_OC1_SetConfig+0x64>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4a1f      	ldr	r2, [pc, #124]	; (800f14c <TIM_OC1_SetConfig+0xdc>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d10c      	bne.n	800f0ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	f023 0308 	bic.w	r3, r3, #8
 800f0da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	697a      	ldr	r2, [r7, #20]
 800f0e2:	4313      	orrs	r3, r2
 800f0e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	f023 0304 	bic.w	r3, r3, #4
 800f0ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	4a15      	ldr	r2, [pc, #84]	; (800f148 <TIM_OC1_SetConfig+0xd8>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d003      	beq.n	800f0fe <TIM_OC1_SetConfig+0x8e>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	4a14      	ldr	r2, [pc, #80]	; (800f14c <TIM_OC1_SetConfig+0xdc>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d111      	bne.n	800f122 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f10c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	695b      	ldr	r3, [r3, #20]
 800f112:	693a      	ldr	r2, [r7, #16]
 800f114:	4313      	orrs	r3, r2
 800f116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	699b      	ldr	r3, [r3, #24]
 800f11c:	693a      	ldr	r2, [r7, #16]
 800f11e:	4313      	orrs	r3, r2
 800f120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	693a      	ldr	r2, [r7, #16]
 800f126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	68fa      	ldr	r2, [r7, #12]
 800f12c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	685a      	ldr	r2, [r3, #4]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	697a      	ldr	r2, [r7, #20]
 800f13a:	621a      	str	r2, [r3, #32]
}
 800f13c:	bf00      	nop
 800f13e:	371c      	adds	r7, #28
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr
 800f148:	40010000 	.word	0x40010000
 800f14c:	40010400 	.word	0x40010400

0800f150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f150:	b480      	push	{r7}
 800f152:	b087      	sub	sp, #28
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6a1b      	ldr	r3, [r3, #32]
 800f15e:	f023 0210 	bic.w	r2, r3, #16
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6a1b      	ldr	r3, [r3, #32]
 800f16a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	699b      	ldr	r3, [r3, #24]
 800f176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	021b      	lsls	r3, r3, #8
 800f18e:	68fa      	ldr	r2, [r7, #12]
 800f190:	4313      	orrs	r3, r2
 800f192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	f023 0320 	bic.w	r3, r3, #32
 800f19a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	011b      	lsls	r3, r3, #4
 800f1a2:	697a      	ldr	r2, [r7, #20]
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a22      	ldr	r2, [pc, #136]	; (800f234 <TIM_OC2_SetConfig+0xe4>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d003      	beq.n	800f1b8 <TIM_OC2_SetConfig+0x68>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a21      	ldr	r2, [pc, #132]	; (800f238 <TIM_OC2_SetConfig+0xe8>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d10d      	bne.n	800f1d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	011b      	lsls	r3, r3, #4
 800f1c6:	697a      	ldr	r2, [r7, #20]
 800f1c8:	4313      	orrs	r3, r2
 800f1ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	4a17      	ldr	r2, [pc, #92]	; (800f234 <TIM_OC2_SetConfig+0xe4>)
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	d003      	beq.n	800f1e4 <TIM_OC2_SetConfig+0x94>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	4a16      	ldr	r2, [pc, #88]	; (800f238 <TIM_OC2_SetConfig+0xe8>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d113      	bne.n	800f20c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	695b      	ldr	r3, [r3, #20]
 800f1f8:	009b      	lsls	r3, r3, #2
 800f1fa:	693a      	ldr	r2, [r7, #16]
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	699b      	ldr	r3, [r3, #24]
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	693a      	ldr	r2, [r7, #16]
 800f208:	4313      	orrs	r3, r2
 800f20a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	693a      	ldr	r2, [r7, #16]
 800f210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	685a      	ldr	r2, [r3, #4]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	697a      	ldr	r2, [r7, #20]
 800f224:	621a      	str	r2, [r3, #32]
}
 800f226:	bf00      	nop
 800f228:	371c      	adds	r7, #28
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr
 800f232:	bf00      	nop
 800f234:	40010000 	.word	0x40010000
 800f238:	40010400 	.word	0x40010400

0800f23c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b087      	sub	sp, #28
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6a1b      	ldr	r3, [r3, #32]
 800f24a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6a1b      	ldr	r3, [r3, #32]
 800f256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	69db      	ldr	r3, [r3, #28]
 800f262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f26a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f023 0303 	bic.w	r3, r3, #3
 800f272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	4313      	orrs	r3, r2
 800f27c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	021b      	lsls	r3, r3, #8
 800f28c:	697a      	ldr	r2, [r7, #20]
 800f28e:	4313      	orrs	r3, r2
 800f290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	4a21      	ldr	r2, [pc, #132]	; (800f31c <TIM_OC3_SetConfig+0xe0>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d003      	beq.n	800f2a2 <TIM_OC3_SetConfig+0x66>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	4a20      	ldr	r2, [pc, #128]	; (800f320 <TIM_OC3_SetConfig+0xe4>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d10d      	bne.n	800f2be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	68db      	ldr	r3, [r3, #12]
 800f2ae:	021b      	lsls	r3, r3, #8
 800f2b0:	697a      	ldr	r2, [r7, #20]
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4a16      	ldr	r2, [pc, #88]	; (800f31c <TIM_OC3_SetConfig+0xe0>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d003      	beq.n	800f2ce <TIM_OC3_SetConfig+0x92>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4a15      	ldr	r2, [pc, #84]	; (800f320 <TIM_OC3_SetConfig+0xe4>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d113      	bne.n	800f2f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	695b      	ldr	r3, [r3, #20]
 800f2e2:	011b      	lsls	r3, r3, #4
 800f2e4:	693a      	ldr	r2, [r7, #16]
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	699b      	ldr	r3, [r3, #24]
 800f2ee:	011b      	lsls	r3, r3, #4
 800f2f0:	693a      	ldr	r2, [r7, #16]
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	693a      	ldr	r2, [r7, #16]
 800f2fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	68fa      	ldr	r2, [r7, #12]
 800f300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	685a      	ldr	r2, [r3, #4]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	697a      	ldr	r2, [r7, #20]
 800f30e:	621a      	str	r2, [r3, #32]
}
 800f310:	bf00      	nop
 800f312:	371c      	adds	r7, #28
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr
 800f31c:	40010000 	.word	0x40010000
 800f320:	40010400 	.word	0x40010400

0800f324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f324:	b480      	push	{r7}
 800f326:	b087      	sub	sp, #28
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6a1b      	ldr	r3, [r3, #32]
 800f332:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6a1b      	ldr	r3, [r3, #32]
 800f33e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	69db      	ldr	r3, [r3, #28]
 800f34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f35a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	021b      	lsls	r3, r3, #8
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	4313      	orrs	r3, r2
 800f366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f36e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	031b      	lsls	r3, r3, #12
 800f376:	693a      	ldr	r2, [r7, #16]
 800f378:	4313      	orrs	r3, r2
 800f37a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	4a12      	ldr	r2, [pc, #72]	; (800f3c8 <TIM_OC4_SetConfig+0xa4>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d003      	beq.n	800f38c <TIM_OC4_SetConfig+0x68>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4a11      	ldr	r2, [pc, #68]	; (800f3cc <TIM_OC4_SetConfig+0xa8>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d109      	bne.n	800f3a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	695b      	ldr	r3, [r3, #20]
 800f398:	019b      	lsls	r3, r3, #6
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	4313      	orrs	r3, r2
 800f39e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	697a      	ldr	r2, [r7, #20]
 800f3a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	685a      	ldr	r2, [r3, #4]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	693a      	ldr	r2, [r7, #16]
 800f3b8:	621a      	str	r2, [r3, #32]
}
 800f3ba:	bf00      	nop
 800f3bc:	371c      	adds	r7, #28
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop
 800f3c8:	40010000 	.word	0x40010000
 800f3cc:	40010400 	.word	0x40010400

0800f3d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b087      	sub	sp, #28
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	f003 031f 	and.w	r3, r3, #31
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800f3e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	6a1a      	ldr	r2, [r3, #32]
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	43db      	mvns	r3, r3
 800f3f2:	401a      	ands	r2, r3
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6a1a      	ldr	r2, [r3, #32]
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	f003 031f 	and.w	r3, r3, #31
 800f402:	6879      	ldr	r1, [r7, #4]
 800f404:	fa01 f303 	lsl.w	r3, r1, r3
 800f408:	431a      	orrs	r2, r3
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	621a      	str	r2, [r3, #32]
}
 800f40e:	bf00      	nop
 800f410:	371c      	adds	r7, #28
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr
	...

0800f41c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b085      	sub	sp, #20
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	d101      	bne.n	800f434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f430:	2302      	movs	r3, #2
 800f432:	e05a      	b.n	800f4ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2201      	movs	r2, #1
 800f438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2202      	movs	r2, #2
 800f440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	689b      	ldr	r3, [r3, #8]
 800f452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f45a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	68fa      	ldr	r2, [r7, #12]
 800f462:	4313      	orrs	r3, r2
 800f464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	68fa      	ldr	r2, [r7, #12]
 800f46c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a21      	ldr	r2, [pc, #132]	; (800f4f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d022      	beq.n	800f4be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f480:	d01d      	beq.n	800f4be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4a1d      	ldr	r2, [pc, #116]	; (800f4fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d018      	beq.n	800f4be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	4a1b      	ldr	r2, [pc, #108]	; (800f500 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d013      	beq.n	800f4be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4a1a      	ldr	r2, [pc, #104]	; (800f504 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d00e      	beq.n	800f4be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	4a18      	ldr	r2, [pc, #96]	; (800f508 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d009      	beq.n	800f4be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	4a17      	ldr	r2, [pc, #92]	; (800f50c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d004      	beq.n	800f4be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4a15      	ldr	r2, [pc, #84]	; (800f510 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d10c      	bne.n	800f4d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f4c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	68ba      	ldr	r2, [r7, #8]
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	68ba      	ldr	r2, [r7, #8]
 800f4d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3714      	adds	r7, #20
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop
 800f4f8:	40010000 	.word	0x40010000
 800f4fc:	40000400 	.word	0x40000400
 800f500:	40000800 	.word	0x40000800
 800f504:	40000c00 	.word	0x40000c00
 800f508:	40010400 	.word	0x40010400
 800f50c:	40014000 	.word	0x40014000
 800f510:	40001800 	.word	0x40001800

0800f514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f514:	b480      	push	{r7}
 800f516:	b085      	sub	sp, #20
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f51e:	2300      	movs	r3, #0
 800f520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d101      	bne.n	800f530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f52c:	2302      	movs	r3, #2
 800f52e:	e03d      	b.n	800f5ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	4313      	orrs	r3, r2
 800f544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	689b      	ldr	r3, [r3, #8]
 800f550:	4313      	orrs	r3, r2
 800f552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	685b      	ldr	r3, [r3, #4]
 800f55e:	4313      	orrs	r3, r2
 800f560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4313      	orrs	r3, r2
 800f56e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	691b      	ldr	r3, [r3, #16]
 800f57a:	4313      	orrs	r3, r2
 800f57c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	695b      	ldr	r3, [r3, #20]
 800f588:	4313      	orrs	r3, r2
 800f58a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	69db      	ldr	r3, [r3, #28]
 800f596:	4313      	orrs	r3, r2
 800f598:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	68fa      	ldr	r2, [r7, #12]
 800f5a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5aa:	2300      	movs	r3, #0
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3714      	adds	r7, #20
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr

0800f5b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f5c0:	bf00      	nop
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f5d4:	bf00      	nop
 800f5d6:	370c      	adds	r7, #12
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d101      	bne.n	800f5f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	e03f      	b.n	800f672 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f5f8:	b2db      	uxtb	r3, r3
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d106      	bne.n	800f60c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f7f7 ff06 	bl	8007418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2224      	movs	r2, #36	; 0x24
 800f610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	68da      	ldr	r2, [r3, #12]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 f829 	bl	800f67c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	691a      	ldr	r2, [r3, #16]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	695a      	ldr	r2, [r3, #20]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	68da      	ldr	r2, [r3, #12]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2200      	movs	r2, #0
 800f65e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2220      	movs	r2, #32
 800f664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2220      	movs	r2, #32
 800f66c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	3708      	adds	r7, #8
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
	...

0800f67c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f680:	b085      	sub	sp, #20
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	691b      	ldr	r3, [r3, #16]
 800f68c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	68da      	ldr	r2, [r3, #12]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	430a      	orrs	r2, r1
 800f69a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	689a      	ldr	r2, [r3, #8]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	691b      	ldr	r3, [r3, #16]
 800f6a4:	431a      	orrs	r2, r3
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	695b      	ldr	r3, [r3, #20]
 800f6aa:	431a      	orrs	r2, r3
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	69db      	ldr	r3, [r3, #28]
 800f6b0:	4313      	orrs	r3, r2
 800f6b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f6be:	f023 030c 	bic.w	r3, r3, #12
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	6812      	ldr	r2, [r2, #0]
 800f6c6:	68f9      	ldr	r1, [r7, #12]
 800f6c8:	430b      	orrs	r3, r1
 800f6ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	699a      	ldr	r2, [r3, #24]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	430a      	orrs	r2, r1
 800f6e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	69db      	ldr	r3, [r3, #28]
 800f6e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6ea:	f040 818b 	bne.w	800fa04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4ac1      	ldr	r2, [pc, #772]	; (800f9f8 <UART_SetConfig+0x37c>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d005      	beq.n	800f704 <UART_SetConfig+0x88>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4abf      	ldr	r2, [pc, #764]	; (800f9fc <UART_SetConfig+0x380>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	f040 80bd 	bne.w	800f87e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f704:	f7fc fbcc 	bl	800bea0 <HAL_RCC_GetPCLK2Freq>
 800f708:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	461d      	mov	r5, r3
 800f70e:	f04f 0600 	mov.w	r6, #0
 800f712:	46a8      	mov	r8, r5
 800f714:	46b1      	mov	r9, r6
 800f716:	eb18 0308 	adds.w	r3, r8, r8
 800f71a:	eb49 0409 	adc.w	r4, r9, r9
 800f71e:	4698      	mov	r8, r3
 800f720:	46a1      	mov	r9, r4
 800f722:	eb18 0805 	adds.w	r8, r8, r5
 800f726:	eb49 0906 	adc.w	r9, r9, r6
 800f72a:	f04f 0100 	mov.w	r1, #0
 800f72e:	f04f 0200 	mov.w	r2, #0
 800f732:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f736:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f73a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f73e:	4688      	mov	r8, r1
 800f740:	4691      	mov	r9, r2
 800f742:	eb18 0005 	adds.w	r0, r8, r5
 800f746:	eb49 0106 	adc.w	r1, r9, r6
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	461d      	mov	r5, r3
 800f750:	f04f 0600 	mov.w	r6, #0
 800f754:	196b      	adds	r3, r5, r5
 800f756:	eb46 0406 	adc.w	r4, r6, r6
 800f75a:	461a      	mov	r2, r3
 800f75c:	4623      	mov	r3, r4
 800f75e:	f7f1 faab 	bl	8000cb8 <__aeabi_uldivmod>
 800f762:	4603      	mov	r3, r0
 800f764:	460c      	mov	r4, r1
 800f766:	461a      	mov	r2, r3
 800f768:	4ba5      	ldr	r3, [pc, #660]	; (800fa00 <UART_SetConfig+0x384>)
 800f76a:	fba3 2302 	umull	r2, r3, r3, r2
 800f76e:	095b      	lsrs	r3, r3, #5
 800f770:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	461d      	mov	r5, r3
 800f778:	f04f 0600 	mov.w	r6, #0
 800f77c:	46a9      	mov	r9, r5
 800f77e:	46b2      	mov	sl, r6
 800f780:	eb19 0309 	adds.w	r3, r9, r9
 800f784:	eb4a 040a 	adc.w	r4, sl, sl
 800f788:	4699      	mov	r9, r3
 800f78a:	46a2      	mov	sl, r4
 800f78c:	eb19 0905 	adds.w	r9, r9, r5
 800f790:	eb4a 0a06 	adc.w	sl, sl, r6
 800f794:	f04f 0100 	mov.w	r1, #0
 800f798:	f04f 0200 	mov.w	r2, #0
 800f79c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f7a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f7a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f7a8:	4689      	mov	r9, r1
 800f7aa:	4692      	mov	sl, r2
 800f7ac:	eb19 0005 	adds.w	r0, r9, r5
 800f7b0:	eb4a 0106 	adc.w	r1, sl, r6
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	461d      	mov	r5, r3
 800f7ba:	f04f 0600 	mov.w	r6, #0
 800f7be:	196b      	adds	r3, r5, r5
 800f7c0:	eb46 0406 	adc.w	r4, r6, r6
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	4623      	mov	r3, r4
 800f7c8:	f7f1 fa76 	bl	8000cb8 <__aeabi_uldivmod>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	460c      	mov	r4, r1
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	4b8b      	ldr	r3, [pc, #556]	; (800fa00 <UART_SetConfig+0x384>)
 800f7d4:	fba3 1302 	umull	r1, r3, r3, r2
 800f7d8:	095b      	lsrs	r3, r3, #5
 800f7da:	2164      	movs	r1, #100	; 0x64
 800f7dc:	fb01 f303 	mul.w	r3, r1, r3
 800f7e0:	1ad3      	subs	r3, r2, r3
 800f7e2:	00db      	lsls	r3, r3, #3
 800f7e4:	3332      	adds	r3, #50	; 0x32
 800f7e6:	4a86      	ldr	r2, [pc, #536]	; (800fa00 <UART_SetConfig+0x384>)
 800f7e8:	fba2 2303 	umull	r2, r3, r2, r3
 800f7ec:	095b      	lsrs	r3, r3, #5
 800f7ee:	005b      	lsls	r3, r3, #1
 800f7f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f7f4:	4498      	add	r8, r3
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	461d      	mov	r5, r3
 800f7fa:	f04f 0600 	mov.w	r6, #0
 800f7fe:	46a9      	mov	r9, r5
 800f800:	46b2      	mov	sl, r6
 800f802:	eb19 0309 	adds.w	r3, r9, r9
 800f806:	eb4a 040a 	adc.w	r4, sl, sl
 800f80a:	4699      	mov	r9, r3
 800f80c:	46a2      	mov	sl, r4
 800f80e:	eb19 0905 	adds.w	r9, r9, r5
 800f812:	eb4a 0a06 	adc.w	sl, sl, r6
 800f816:	f04f 0100 	mov.w	r1, #0
 800f81a:	f04f 0200 	mov.w	r2, #0
 800f81e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f822:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f826:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f82a:	4689      	mov	r9, r1
 800f82c:	4692      	mov	sl, r2
 800f82e:	eb19 0005 	adds.w	r0, r9, r5
 800f832:	eb4a 0106 	adc.w	r1, sl, r6
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	461d      	mov	r5, r3
 800f83c:	f04f 0600 	mov.w	r6, #0
 800f840:	196b      	adds	r3, r5, r5
 800f842:	eb46 0406 	adc.w	r4, r6, r6
 800f846:	461a      	mov	r2, r3
 800f848:	4623      	mov	r3, r4
 800f84a:	f7f1 fa35 	bl	8000cb8 <__aeabi_uldivmod>
 800f84e:	4603      	mov	r3, r0
 800f850:	460c      	mov	r4, r1
 800f852:	461a      	mov	r2, r3
 800f854:	4b6a      	ldr	r3, [pc, #424]	; (800fa00 <UART_SetConfig+0x384>)
 800f856:	fba3 1302 	umull	r1, r3, r3, r2
 800f85a:	095b      	lsrs	r3, r3, #5
 800f85c:	2164      	movs	r1, #100	; 0x64
 800f85e:	fb01 f303 	mul.w	r3, r1, r3
 800f862:	1ad3      	subs	r3, r2, r3
 800f864:	00db      	lsls	r3, r3, #3
 800f866:	3332      	adds	r3, #50	; 0x32
 800f868:	4a65      	ldr	r2, [pc, #404]	; (800fa00 <UART_SetConfig+0x384>)
 800f86a:	fba2 2303 	umull	r2, r3, r2, r3
 800f86e:	095b      	lsrs	r3, r3, #5
 800f870:	f003 0207 	and.w	r2, r3, #7
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4442      	add	r2, r8
 800f87a:	609a      	str	r2, [r3, #8]
 800f87c:	e26f      	b.n	800fd5e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f87e:	f7fc fafb 	bl	800be78 <HAL_RCC_GetPCLK1Freq>
 800f882:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	461d      	mov	r5, r3
 800f888:	f04f 0600 	mov.w	r6, #0
 800f88c:	46a8      	mov	r8, r5
 800f88e:	46b1      	mov	r9, r6
 800f890:	eb18 0308 	adds.w	r3, r8, r8
 800f894:	eb49 0409 	adc.w	r4, r9, r9
 800f898:	4698      	mov	r8, r3
 800f89a:	46a1      	mov	r9, r4
 800f89c:	eb18 0805 	adds.w	r8, r8, r5
 800f8a0:	eb49 0906 	adc.w	r9, r9, r6
 800f8a4:	f04f 0100 	mov.w	r1, #0
 800f8a8:	f04f 0200 	mov.w	r2, #0
 800f8ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f8b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f8b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f8b8:	4688      	mov	r8, r1
 800f8ba:	4691      	mov	r9, r2
 800f8bc:	eb18 0005 	adds.w	r0, r8, r5
 800f8c0:	eb49 0106 	adc.w	r1, r9, r6
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	461d      	mov	r5, r3
 800f8ca:	f04f 0600 	mov.w	r6, #0
 800f8ce:	196b      	adds	r3, r5, r5
 800f8d0:	eb46 0406 	adc.w	r4, r6, r6
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	4623      	mov	r3, r4
 800f8d8:	f7f1 f9ee 	bl	8000cb8 <__aeabi_uldivmod>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	460c      	mov	r4, r1
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	4b47      	ldr	r3, [pc, #284]	; (800fa00 <UART_SetConfig+0x384>)
 800f8e4:	fba3 2302 	umull	r2, r3, r3, r2
 800f8e8:	095b      	lsrs	r3, r3, #5
 800f8ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	461d      	mov	r5, r3
 800f8f2:	f04f 0600 	mov.w	r6, #0
 800f8f6:	46a9      	mov	r9, r5
 800f8f8:	46b2      	mov	sl, r6
 800f8fa:	eb19 0309 	adds.w	r3, r9, r9
 800f8fe:	eb4a 040a 	adc.w	r4, sl, sl
 800f902:	4699      	mov	r9, r3
 800f904:	46a2      	mov	sl, r4
 800f906:	eb19 0905 	adds.w	r9, r9, r5
 800f90a:	eb4a 0a06 	adc.w	sl, sl, r6
 800f90e:	f04f 0100 	mov.w	r1, #0
 800f912:	f04f 0200 	mov.w	r2, #0
 800f916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f91a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f91e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f922:	4689      	mov	r9, r1
 800f924:	4692      	mov	sl, r2
 800f926:	eb19 0005 	adds.w	r0, r9, r5
 800f92a:	eb4a 0106 	adc.w	r1, sl, r6
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	461d      	mov	r5, r3
 800f934:	f04f 0600 	mov.w	r6, #0
 800f938:	196b      	adds	r3, r5, r5
 800f93a:	eb46 0406 	adc.w	r4, r6, r6
 800f93e:	461a      	mov	r2, r3
 800f940:	4623      	mov	r3, r4
 800f942:	f7f1 f9b9 	bl	8000cb8 <__aeabi_uldivmod>
 800f946:	4603      	mov	r3, r0
 800f948:	460c      	mov	r4, r1
 800f94a:	461a      	mov	r2, r3
 800f94c:	4b2c      	ldr	r3, [pc, #176]	; (800fa00 <UART_SetConfig+0x384>)
 800f94e:	fba3 1302 	umull	r1, r3, r3, r2
 800f952:	095b      	lsrs	r3, r3, #5
 800f954:	2164      	movs	r1, #100	; 0x64
 800f956:	fb01 f303 	mul.w	r3, r1, r3
 800f95a:	1ad3      	subs	r3, r2, r3
 800f95c:	00db      	lsls	r3, r3, #3
 800f95e:	3332      	adds	r3, #50	; 0x32
 800f960:	4a27      	ldr	r2, [pc, #156]	; (800fa00 <UART_SetConfig+0x384>)
 800f962:	fba2 2303 	umull	r2, r3, r2, r3
 800f966:	095b      	lsrs	r3, r3, #5
 800f968:	005b      	lsls	r3, r3, #1
 800f96a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f96e:	4498      	add	r8, r3
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	461d      	mov	r5, r3
 800f974:	f04f 0600 	mov.w	r6, #0
 800f978:	46a9      	mov	r9, r5
 800f97a:	46b2      	mov	sl, r6
 800f97c:	eb19 0309 	adds.w	r3, r9, r9
 800f980:	eb4a 040a 	adc.w	r4, sl, sl
 800f984:	4699      	mov	r9, r3
 800f986:	46a2      	mov	sl, r4
 800f988:	eb19 0905 	adds.w	r9, r9, r5
 800f98c:	eb4a 0a06 	adc.w	sl, sl, r6
 800f990:	f04f 0100 	mov.w	r1, #0
 800f994:	f04f 0200 	mov.w	r2, #0
 800f998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f99c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f9a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f9a4:	4689      	mov	r9, r1
 800f9a6:	4692      	mov	sl, r2
 800f9a8:	eb19 0005 	adds.w	r0, r9, r5
 800f9ac:	eb4a 0106 	adc.w	r1, sl, r6
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	461d      	mov	r5, r3
 800f9b6:	f04f 0600 	mov.w	r6, #0
 800f9ba:	196b      	adds	r3, r5, r5
 800f9bc:	eb46 0406 	adc.w	r4, r6, r6
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	4623      	mov	r3, r4
 800f9c4:	f7f1 f978 	bl	8000cb8 <__aeabi_uldivmod>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	460c      	mov	r4, r1
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	4b0c      	ldr	r3, [pc, #48]	; (800fa00 <UART_SetConfig+0x384>)
 800f9d0:	fba3 1302 	umull	r1, r3, r3, r2
 800f9d4:	095b      	lsrs	r3, r3, #5
 800f9d6:	2164      	movs	r1, #100	; 0x64
 800f9d8:	fb01 f303 	mul.w	r3, r1, r3
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	00db      	lsls	r3, r3, #3
 800f9e0:	3332      	adds	r3, #50	; 0x32
 800f9e2:	4a07      	ldr	r2, [pc, #28]	; (800fa00 <UART_SetConfig+0x384>)
 800f9e4:	fba2 2303 	umull	r2, r3, r2, r3
 800f9e8:	095b      	lsrs	r3, r3, #5
 800f9ea:	f003 0207 	and.w	r2, r3, #7
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	4442      	add	r2, r8
 800f9f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f9f6:	e1b2      	b.n	800fd5e <UART_SetConfig+0x6e2>
 800f9f8:	40011000 	.word	0x40011000
 800f9fc:	40011400 	.word	0x40011400
 800fa00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4ad7      	ldr	r2, [pc, #860]	; (800fd68 <UART_SetConfig+0x6ec>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d005      	beq.n	800fa1a <UART_SetConfig+0x39e>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	4ad6      	ldr	r2, [pc, #856]	; (800fd6c <UART_SetConfig+0x6f0>)
 800fa14:	4293      	cmp	r3, r2
 800fa16:	f040 80d1 	bne.w	800fbbc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fa1a:	f7fc fa41 	bl	800bea0 <HAL_RCC_GetPCLK2Freq>
 800fa1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	469a      	mov	sl, r3
 800fa24:	f04f 0b00 	mov.w	fp, #0
 800fa28:	46d0      	mov	r8, sl
 800fa2a:	46d9      	mov	r9, fp
 800fa2c:	eb18 0308 	adds.w	r3, r8, r8
 800fa30:	eb49 0409 	adc.w	r4, r9, r9
 800fa34:	4698      	mov	r8, r3
 800fa36:	46a1      	mov	r9, r4
 800fa38:	eb18 080a 	adds.w	r8, r8, sl
 800fa3c:	eb49 090b 	adc.w	r9, r9, fp
 800fa40:	f04f 0100 	mov.w	r1, #0
 800fa44:	f04f 0200 	mov.w	r2, #0
 800fa48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fa4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fa50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fa54:	4688      	mov	r8, r1
 800fa56:	4691      	mov	r9, r2
 800fa58:	eb1a 0508 	adds.w	r5, sl, r8
 800fa5c:	eb4b 0609 	adc.w	r6, fp, r9
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	4619      	mov	r1, r3
 800fa66:	f04f 0200 	mov.w	r2, #0
 800fa6a:	f04f 0300 	mov.w	r3, #0
 800fa6e:	f04f 0400 	mov.w	r4, #0
 800fa72:	0094      	lsls	r4, r2, #2
 800fa74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fa78:	008b      	lsls	r3, r1, #2
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	4623      	mov	r3, r4
 800fa7e:	4628      	mov	r0, r5
 800fa80:	4631      	mov	r1, r6
 800fa82:	f7f1 f919 	bl	8000cb8 <__aeabi_uldivmod>
 800fa86:	4603      	mov	r3, r0
 800fa88:	460c      	mov	r4, r1
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	4bb8      	ldr	r3, [pc, #736]	; (800fd70 <UART_SetConfig+0x6f4>)
 800fa8e:	fba3 2302 	umull	r2, r3, r3, r2
 800fa92:	095b      	lsrs	r3, r3, #5
 800fa94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	469b      	mov	fp, r3
 800fa9c:	f04f 0c00 	mov.w	ip, #0
 800faa0:	46d9      	mov	r9, fp
 800faa2:	46e2      	mov	sl, ip
 800faa4:	eb19 0309 	adds.w	r3, r9, r9
 800faa8:	eb4a 040a 	adc.w	r4, sl, sl
 800faac:	4699      	mov	r9, r3
 800faae:	46a2      	mov	sl, r4
 800fab0:	eb19 090b 	adds.w	r9, r9, fp
 800fab4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fab8:	f04f 0100 	mov.w	r1, #0
 800fabc:	f04f 0200 	mov.w	r2, #0
 800fac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fac4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800facc:	4689      	mov	r9, r1
 800face:	4692      	mov	sl, r2
 800fad0:	eb1b 0509 	adds.w	r5, fp, r9
 800fad4:	eb4c 060a 	adc.w	r6, ip, sl
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	4619      	mov	r1, r3
 800fade:	f04f 0200 	mov.w	r2, #0
 800fae2:	f04f 0300 	mov.w	r3, #0
 800fae6:	f04f 0400 	mov.w	r4, #0
 800faea:	0094      	lsls	r4, r2, #2
 800faec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800faf0:	008b      	lsls	r3, r1, #2
 800faf2:	461a      	mov	r2, r3
 800faf4:	4623      	mov	r3, r4
 800faf6:	4628      	mov	r0, r5
 800faf8:	4631      	mov	r1, r6
 800fafa:	f7f1 f8dd 	bl	8000cb8 <__aeabi_uldivmod>
 800fafe:	4603      	mov	r3, r0
 800fb00:	460c      	mov	r4, r1
 800fb02:	461a      	mov	r2, r3
 800fb04:	4b9a      	ldr	r3, [pc, #616]	; (800fd70 <UART_SetConfig+0x6f4>)
 800fb06:	fba3 1302 	umull	r1, r3, r3, r2
 800fb0a:	095b      	lsrs	r3, r3, #5
 800fb0c:	2164      	movs	r1, #100	; 0x64
 800fb0e:	fb01 f303 	mul.w	r3, r1, r3
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	011b      	lsls	r3, r3, #4
 800fb16:	3332      	adds	r3, #50	; 0x32
 800fb18:	4a95      	ldr	r2, [pc, #596]	; (800fd70 <UART_SetConfig+0x6f4>)
 800fb1a:	fba2 2303 	umull	r2, r3, r2, r3
 800fb1e:	095b      	lsrs	r3, r3, #5
 800fb20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb24:	4498      	add	r8, r3
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	469b      	mov	fp, r3
 800fb2a:	f04f 0c00 	mov.w	ip, #0
 800fb2e:	46d9      	mov	r9, fp
 800fb30:	46e2      	mov	sl, ip
 800fb32:	eb19 0309 	adds.w	r3, r9, r9
 800fb36:	eb4a 040a 	adc.w	r4, sl, sl
 800fb3a:	4699      	mov	r9, r3
 800fb3c:	46a2      	mov	sl, r4
 800fb3e:	eb19 090b 	adds.w	r9, r9, fp
 800fb42:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fb46:	f04f 0100 	mov.w	r1, #0
 800fb4a:	f04f 0200 	mov.w	r2, #0
 800fb4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb5a:	4689      	mov	r9, r1
 800fb5c:	4692      	mov	sl, r2
 800fb5e:	eb1b 0509 	adds.w	r5, fp, r9
 800fb62:	eb4c 060a 	adc.w	r6, ip, sl
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	f04f 0200 	mov.w	r2, #0
 800fb70:	f04f 0300 	mov.w	r3, #0
 800fb74:	f04f 0400 	mov.w	r4, #0
 800fb78:	0094      	lsls	r4, r2, #2
 800fb7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fb7e:	008b      	lsls	r3, r1, #2
 800fb80:	461a      	mov	r2, r3
 800fb82:	4623      	mov	r3, r4
 800fb84:	4628      	mov	r0, r5
 800fb86:	4631      	mov	r1, r6
 800fb88:	f7f1 f896 	bl	8000cb8 <__aeabi_uldivmod>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	460c      	mov	r4, r1
 800fb90:	461a      	mov	r2, r3
 800fb92:	4b77      	ldr	r3, [pc, #476]	; (800fd70 <UART_SetConfig+0x6f4>)
 800fb94:	fba3 1302 	umull	r1, r3, r3, r2
 800fb98:	095b      	lsrs	r3, r3, #5
 800fb9a:	2164      	movs	r1, #100	; 0x64
 800fb9c:	fb01 f303 	mul.w	r3, r1, r3
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	011b      	lsls	r3, r3, #4
 800fba4:	3332      	adds	r3, #50	; 0x32
 800fba6:	4a72      	ldr	r2, [pc, #456]	; (800fd70 <UART_SetConfig+0x6f4>)
 800fba8:	fba2 2303 	umull	r2, r3, r2, r3
 800fbac:	095b      	lsrs	r3, r3, #5
 800fbae:	f003 020f 	and.w	r2, r3, #15
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4442      	add	r2, r8
 800fbb8:	609a      	str	r2, [r3, #8]
 800fbba:	e0d0      	b.n	800fd5e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fbbc:	f7fc f95c 	bl	800be78 <HAL_RCC_GetPCLK1Freq>
 800fbc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	469a      	mov	sl, r3
 800fbc6:	f04f 0b00 	mov.w	fp, #0
 800fbca:	46d0      	mov	r8, sl
 800fbcc:	46d9      	mov	r9, fp
 800fbce:	eb18 0308 	adds.w	r3, r8, r8
 800fbd2:	eb49 0409 	adc.w	r4, r9, r9
 800fbd6:	4698      	mov	r8, r3
 800fbd8:	46a1      	mov	r9, r4
 800fbda:	eb18 080a 	adds.w	r8, r8, sl
 800fbde:	eb49 090b 	adc.w	r9, r9, fp
 800fbe2:	f04f 0100 	mov.w	r1, #0
 800fbe6:	f04f 0200 	mov.w	r2, #0
 800fbea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fbee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fbf2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fbf6:	4688      	mov	r8, r1
 800fbf8:	4691      	mov	r9, r2
 800fbfa:	eb1a 0508 	adds.w	r5, sl, r8
 800fbfe:	eb4b 0609 	adc.w	r6, fp, r9
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	4619      	mov	r1, r3
 800fc08:	f04f 0200 	mov.w	r2, #0
 800fc0c:	f04f 0300 	mov.w	r3, #0
 800fc10:	f04f 0400 	mov.w	r4, #0
 800fc14:	0094      	lsls	r4, r2, #2
 800fc16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc1a:	008b      	lsls	r3, r1, #2
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	4623      	mov	r3, r4
 800fc20:	4628      	mov	r0, r5
 800fc22:	4631      	mov	r1, r6
 800fc24:	f7f1 f848 	bl	8000cb8 <__aeabi_uldivmod>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	460c      	mov	r4, r1
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	4b50      	ldr	r3, [pc, #320]	; (800fd70 <UART_SetConfig+0x6f4>)
 800fc30:	fba3 2302 	umull	r2, r3, r3, r2
 800fc34:	095b      	lsrs	r3, r3, #5
 800fc36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	469b      	mov	fp, r3
 800fc3e:	f04f 0c00 	mov.w	ip, #0
 800fc42:	46d9      	mov	r9, fp
 800fc44:	46e2      	mov	sl, ip
 800fc46:	eb19 0309 	adds.w	r3, r9, r9
 800fc4a:	eb4a 040a 	adc.w	r4, sl, sl
 800fc4e:	4699      	mov	r9, r3
 800fc50:	46a2      	mov	sl, r4
 800fc52:	eb19 090b 	adds.w	r9, r9, fp
 800fc56:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fc5a:	f04f 0100 	mov.w	r1, #0
 800fc5e:	f04f 0200 	mov.w	r2, #0
 800fc62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fc6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fc6e:	4689      	mov	r9, r1
 800fc70:	4692      	mov	sl, r2
 800fc72:	eb1b 0509 	adds.w	r5, fp, r9
 800fc76:	eb4c 060a 	adc.w	r6, ip, sl
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	4619      	mov	r1, r3
 800fc80:	f04f 0200 	mov.w	r2, #0
 800fc84:	f04f 0300 	mov.w	r3, #0
 800fc88:	f04f 0400 	mov.w	r4, #0
 800fc8c:	0094      	lsls	r4, r2, #2
 800fc8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc92:	008b      	lsls	r3, r1, #2
 800fc94:	461a      	mov	r2, r3
 800fc96:	4623      	mov	r3, r4
 800fc98:	4628      	mov	r0, r5
 800fc9a:	4631      	mov	r1, r6
 800fc9c:	f7f1 f80c 	bl	8000cb8 <__aeabi_uldivmod>
 800fca0:	4603      	mov	r3, r0
 800fca2:	460c      	mov	r4, r1
 800fca4:	461a      	mov	r2, r3
 800fca6:	4b32      	ldr	r3, [pc, #200]	; (800fd70 <UART_SetConfig+0x6f4>)
 800fca8:	fba3 1302 	umull	r1, r3, r3, r2
 800fcac:	095b      	lsrs	r3, r3, #5
 800fcae:	2164      	movs	r1, #100	; 0x64
 800fcb0:	fb01 f303 	mul.w	r3, r1, r3
 800fcb4:	1ad3      	subs	r3, r2, r3
 800fcb6:	011b      	lsls	r3, r3, #4
 800fcb8:	3332      	adds	r3, #50	; 0x32
 800fcba:	4a2d      	ldr	r2, [pc, #180]	; (800fd70 <UART_SetConfig+0x6f4>)
 800fcbc:	fba2 2303 	umull	r2, r3, r2, r3
 800fcc0:	095b      	lsrs	r3, r3, #5
 800fcc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcc6:	4498      	add	r8, r3
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	469b      	mov	fp, r3
 800fccc:	f04f 0c00 	mov.w	ip, #0
 800fcd0:	46d9      	mov	r9, fp
 800fcd2:	46e2      	mov	sl, ip
 800fcd4:	eb19 0309 	adds.w	r3, r9, r9
 800fcd8:	eb4a 040a 	adc.w	r4, sl, sl
 800fcdc:	4699      	mov	r9, r3
 800fcde:	46a2      	mov	sl, r4
 800fce0:	eb19 090b 	adds.w	r9, r9, fp
 800fce4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fce8:	f04f 0100 	mov.w	r1, #0
 800fcec:	f04f 0200 	mov.w	r2, #0
 800fcf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fcf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fcf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fcfc:	4689      	mov	r9, r1
 800fcfe:	4692      	mov	sl, r2
 800fd00:	eb1b 0509 	adds.w	r5, fp, r9
 800fd04:	eb4c 060a 	adc.w	r6, ip, sl
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	4619      	mov	r1, r3
 800fd0e:	f04f 0200 	mov.w	r2, #0
 800fd12:	f04f 0300 	mov.w	r3, #0
 800fd16:	f04f 0400 	mov.w	r4, #0
 800fd1a:	0094      	lsls	r4, r2, #2
 800fd1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fd20:	008b      	lsls	r3, r1, #2
 800fd22:	461a      	mov	r2, r3
 800fd24:	4623      	mov	r3, r4
 800fd26:	4628      	mov	r0, r5
 800fd28:	4631      	mov	r1, r6
 800fd2a:	f7f0 ffc5 	bl	8000cb8 <__aeabi_uldivmod>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	460c      	mov	r4, r1
 800fd32:	461a      	mov	r2, r3
 800fd34:	4b0e      	ldr	r3, [pc, #56]	; (800fd70 <UART_SetConfig+0x6f4>)
 800fd36:	fba3 1302 	umull	r1, r3, r3, r2
 800fd3a:	095b      	lsrs	r3, r3, #5
 800fd3c:	2164      	movs	r1, #100	; 0x64
 800fd3e:	fb01 f303 	mul.w	r3, r1, r3
 800fd42:	1ad3      	subs	r3, r2, r3
 800fd44:	011b      	lsls	r3, r3, #4
 800fd46:	3332      	adds	r3, #50	; 0x32
 800fd48:	4a09      	ldr	r2, [pc, #36]	; (800fd70 <UART_SetConfig+0x6f4>)
 800fd4a:	fba2 2303 	umull	r2, r3, r2, r3
 800fd4e:	095b      	lsrs	r3, r3, #5
 800fd50:	f003 020f 	and.w	r2, r3, #15
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	4442      	add	r2, r8
 800fd5a:	609a      	str	r2, [r3, #8]
}
 800fd5c:	e7ff      	b.n	800fd5e <UART_SetConfig+0x6e2>
 800fd5e:	bf00      	nop
 800fd60:	3714      	adds	r7, #20
 800fd62:	46bd      	mov	sp, r7
 800fd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd68:	40011000 	.word	0x40011000
 800fd6c:	40011400 	.word	0x40011400
 800fd70:	51eb851f 	.word	0x51eb851f

0800fd74 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800fd74:	b084      	sub	sp, #16
 800fd76:	b480      	push	{r7}
 800fd78:	b085      	sub	sp, #20
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
 800fd7e:	f107 001c 	add.w	r0, r7, #28
 800fd82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fd86:	2300      	movs	r3, #0
 800fd88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fd8a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fd8c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fd8e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800fd92:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800fd96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800fd9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800fd9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fda0:	68fa      	ldr	r2, [r7, #12]
 800fda2:	4313      	orrs	r3, r2
 800fda4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800fdae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fdb2:	68fa      	ldr	r2, [r7, #12]
 800fdb4:	431a      	orrs	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fdba:	2300      	movs	r3, #0
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3714      	adds	r7, #20
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	b004      	add	sp, #16
 800fdc8:	4770      	bx	lr

0800fdca <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800fdca:	b480      	push	{r7}
 800fdcc:	b083      	sub	sp, #12
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	370c      	adds	r7, #12
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr

0800fde4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800fde4:	b480      	push	{r7}
 800fde6:	b083      	sub	sp, #12
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fdf8:	2300      	movs	r3, #0
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	370c      	adds	r7, #12
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr

0800fe06 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b082      	sub	sp, #8
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2203      	movs	r2, #3
 800fe12:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800fe14:	2002      	movs	r0, #2
 800fe16:	f7f9 fbdd 	bl	80095d4 <HAL_Delay>
  
  return HAL_OK;
 800fe1a:	2300      	movs	r3, #0
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f003 0303 	and.w	r3, r3, #3
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	370c      	adds	r7, #12
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b085      	sub	sp, #20
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fe5e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800fe64:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800fe6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fe6c:	68fa      	ldr	r2, [r7, #12]
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fe7a:	f023 030f 	bic.w	r3, r3, #15
 800fe7e:	68fa      	ldr	r2, [r7, #12]
 800fe80:	431a      	orrs	r2, r3
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800fe86:	2300      	movs	r3, #0
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3714      	adds	r7, #20
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	691b      	ldr	r3, [r3, #16]
 800fea0:	b2db      	uxtb	r3, r3
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	370c      	adds	r7, #12
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr

0800feae <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800feae:	b480      	push	{r7}
 800feb0:	b085      	sub	sp, #20
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
 800feb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	3314      	adds	r3, #20
 800febc:	461a      	mov	r2, r3
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	4413      	add	r3, r2
 800fec2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
}  
 800fec8:	4618      	mov	r0, r3
 800feca:	3714      	adds	r7, #20
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b085      	sub	sp, #20
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fede:	2300      	movs	r3, #0
 800fee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	681a      	ldr	r2, [r3, #0]
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	685a      	ldr	r2, [r3, #4]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fefa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ff00:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ff06:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ff08:	68fa      	ldr	r2, [r7, #12]
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff12:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	431a      	orrs	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ff1e:	2300      	movs	r3, #0

}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3714      	adds	r7, #20
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr

0800ff2c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b088      	sub	sp, #32
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ff3a:	2310      	movs	r3, #16
 800ff3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ff3e:	2340      	movs	r3, #64	; 0x40
 800ff40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ff42:	2300      	movs	r3, #0
 800ff44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ff46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ff4c:	f107 0308 	add.w	r3, r7, #8
 800ff50:	4619      	mov	r1, r3
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f7ff ff74 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ff58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff5c:	2110      	movs	r1, #16
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f000 fa40 	bl	80103e4 <SDMMC_GetCmdResp1>
 800ff64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff66:	69fb      	ldr	r3, [r7, #28]
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3720      	adds	r7, #32
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b088      	sub	sp, #32
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ff7e:	2311      	movs	r3, #17
 800ff80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ff82:	2340      	movs	r3, #64	; 0x40
 800ff84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ff86:	2300      	movs	r3, #0
 800ff88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ff8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ff90:	f107 0308 	add.w	r3, r7, #8
 800ff94:	4619      	mov	r1, r3
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f7ff ff52 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ff9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffa0:	2111      	movs	r1, #17
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f000 fa1e 	bl	80103e4 <SDMMC_GetCmdResp1>
 800ffa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffaa:	69fb      	ldr	r3, [r7, #28]
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3720      	adds	r7, #32
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b088      	sub	sp, #32
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ffc2:	2312      	movs	r3, #18
 800ffc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ffc6:	2340      	movs	r3, #64	; 0x40
 800ffc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ffce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ffd4:	f107 0308 	add.w	r3, r7, #8
 800ffd8:	4619      	mov	r1, r3
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f7ff ff30 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ffe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffe4:	2112      	movs	r1, #18
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 f9fc 	bl	80103e4 <SDMMC_GetCmdResp1>
 800ffec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffee:	69fb      	ldr	r3, [r7, #28]
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3720      	adds	r7, #32
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b088      	sub	sp, #32
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010006:	2318      	movs	r3, #24
 8010008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801000a:	2340      	movs	r3, #64	; 0x40
 801000c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801000e:	2300      	movs	r3, #0
 8010010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010016:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010018:	f107 0308 	add.w	r3, r7, #8
 801001c:	4619      	mov	r1, r3
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7ff ff0e 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010024:	f241 3288 	movw	r2, #5000	; 0x1388
 8010028:	2118      	movs	r1, #24
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 f9da 	bl	80103e4 <SDMMC_GetCmdResp1>
 8010030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010032:	69fb      	ldr	r3, [r7, #28]
}
 8010034:	4618      	mov	r0, r3
 8010036:	3720      	adds	r7, #32
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b088      	sub	sp, #32
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801004a:	2319      	movs	r3, #25
 801004c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801004e:	2340      	movs	r3, #64	; 0x40
 8010050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010052:	2300      	movs	r3, #0
 8010054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801005a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801005c:	f107 0308 	add.w	r3, r7, #8
 8010060:	4619      	mov	r1, r3
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f7ff feec 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010068:	f241 3288 	movw	r2, #5000	; 0x1388
 801006c:	2119      	movs	r1, #25
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f000 f9b8 	bl	80103e4 <SDMMC_GetCmdResp1>
 8010074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010076:	69fb      	ldr	r3, [r7, #28]
}
 8010078:	4618      	mov	r0, r3
 801007a:	3720      	adds	r7, #32
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b088      	sub	sp, #32
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010088:	2300      	movs	r3, #0
 801008a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801008c:	230c      	movs	r3, #12
 801008e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010090:	2340      	movs	r3, #64	; 0x40
 8010092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010094:	2300      	movs	r3, #0
 8010096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801009c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801009e:	f107 0308 	add.w	r3, r7, #8
 80100a2:	4619      	mov	r1, r3
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7ff fecb 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80100aa:	4a05      	ldr	r2, [pc, #20]	; (80100c0 <SDMMC_CmdStopTransfer+0x40>)
 80100ac:	210c      	movs	r1, #12
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f998 	bl	80103e4 <SDMMC_GetCmdResp1>
 80100b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100b6:	69fb      	ldr	r3, [r7, #28]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3720      	adds	r7, #32
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}
 80100c0:	05f5e100 	.word	0x05f5e100

080100c4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b08a      	sub	sp, #40	; 0x28
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80100d4:	2307      	movs	r3, #7
 80100d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80100d8:	2340      	movs	r3, #64	; 0x40
 80100da:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80100dc:	2300      	movs	r3, #0
 80100de:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80100e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100e4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100e6:	f107 0310 	add.w	r3, r7, #16
 80100ea:	4619      	mov	r1, r3
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f7ff fea7 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80100f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80100f6:	2107      	movs	r1, #7
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f000 f973 	bl	80103e4 <SDMMC_GetCmdResp1>
 80100fe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010102:	4618      	mov	r0, r3
 8010104:	3728      	adds	r7, #40	; 0x28
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b088      	sub	sp, #32
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010112:	2300      	movs	r3, #0
 8010114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010116:	2300      	movs	r3, #0
 8010118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801011a:	2300      	movs	r3, #0
 801011c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801011e:	2300      	movs	r3, #0
 8010120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010126:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010128:	f107 0308 	add.w	r3, r7, #8
 801012c:	4619      	mov	r1, r3
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f7ff fe86 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f000 f92d 	bl	8010394 <SDMMC_GetCmdError>
 801013a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801013c:	69fb      	ldr	r3, [r7, #28]
}
 801013e:	4618      	mov	r0, r3
 8010140:	3720      	adds	r7, #32
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}

08010146 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010146:	b580      	push	{r7, lr}
 8010148:	b088      	sub	sp, #32
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801014e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010152:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010154:	2308      	movs	r3, #8
 8010156:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010158:	2340      	movs	r3, #64	; 0x40
 801015a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801015c:	2300      	movs	r3, #0
 801015e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010164:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010166:	f107 0308 	add.w	r3, r7, #8
 801016a:	4619      	mov	r1, r3
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f7ff fe67 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f000 fb16 	bl	80107a4 <SDMMC_GetCmdResp7>
 8010178:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801017a:	69fb      	ldr	r3, [r7, #28]
}
 801017c:	4618      	mov	r0, r3
 801017e:	3720      	adds	r7, #32
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}

08010184 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b088      	sub	sp, #32
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010192:	2337      	movs	r3, #55	; 0x37
 8010194:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010196:	2340      	movs	r3, #64	; 0x40
 8010198:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801019a:	2300      	movs	r3, #0
 801019c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801019e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101a4:	f107 0308 	add.w	r3, r7, #8
 80101a8:	4619      	mov	r1, r3
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7ff fe48 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80101b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80101b4:	2137      	movs	r1, #55	; 0x37
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f914 	bl	80103e4 <SDMMC_GetCmdResp1>
 80101bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101be:	69fb      	ldr	r3, [r7, #28]
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3720      	adds	r7, #32
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b088      	sub	sp, #32
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80101d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80101dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80101de:	2329      	movs	r3, #41	; 0x29
 80101e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101e2:	2340      	movs	r3, #64	; 0x40
 80101e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101e6:	2300      	movs	r3, #0
 80101e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101f0:	f107 0308 	add.w	r3, r7, #8
 80101f4:	4619      	mov	r1, r3
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f7ff fe22 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f000 fa23 	bl	8010648 <SDMMC_GetCmdResp3>
 8010202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010204:	69fb      	ldr	r3, [r7, #28]
}
 8010206:	4618      	mov	r0, r3
 8010208:	3720      	adds	r7, #32
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801020e:	b580      	push	{r7, lr}
 8010210:	b088      	sub	sp, #32
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
 8010216:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801021c:	2306      	movs	r3, #6
 801021e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010220:	2340      	movs	r3, #64	; 0x40
 8010222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010224:	2300      	movs	r3, #0
 8010226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801022c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801022e:	f107 0308 	add.w	r3, r7, #8
 8010232:	4619      	mov	r1, r3
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f7ff fe03 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801023a:	f241 3288 	movw	r2, #5000	; 0x1388
 801023e:	2106      	movs	r1, #6
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f000 f8cf 	bl	80103e4 <SDMMC_GetCmdResp1>
 8010246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010248:	69fb      	ldr	r3, [r7, #28]
}
 801024a:	4618      	mov	r0, r3
 801024c:	3720      	adds	r7, #32
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}

08010252 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010252:	b580      	push	{r7, lr}
 8010254:	b088      	sub	sp, #32
 8010256:	af00      	add	r7, sp, #0
 8010258:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801025a:	2300      	movs	r3, #0
 801025c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801025e:	2333      	movs	r3, #51	; 0x33
 8010260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010262:	2340      	movs	r3, #64	; 0x40
 8010264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010266:	2300      	movs	r3, #0
 8010268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801026a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801026e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010270:	f107 0308 	add.w	r3, r7, #8
 8010274:	4619      	mov	r1, r3
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7ff fde2 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 801027c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010280:	2133      	movs	r1, #51	; 0x33
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f000 f8ae 	bl	80103e4 <SDMMC_GetCmdResp1>
 8010288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801028a:	69fb      	ldr	r3, [r7, #28]
}
 801028c:	4618      	mov	r0, r3
 801028e:	3720      	adds	r7, #32
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b088      	sub	sp, #32
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801029c:	2300      	movs	r3, #0
 801029e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80102a0:	2302      	movs	r3, #2
 80102a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80102a4:	23c0      	movs	r3, #192	; 0xc0
 80102a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102a8:	2300      	movs	r3, #0
 80102aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102b2:	f107 0308 	add.w	r3, r7, #8
 80102b6:	4619      	mov	r1, r3
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f7ff fdc1 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f000 f97c 	bl	80105bc <SDMMC_GetCmdResp2>
 80102c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102c6:	69fb      	ldr	r3, [r7, #28]
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3720      	adds	r7, #32
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b088      	sub	sp, #32
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80102de:	2309      	movs	r3, #9
 80102e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80102e2:	23c0      	movs	r3, #192	; 0xc0
 80102e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102e6:	2300      	movs	r3, #0
 80102e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102f0:	f107 0308 	add.w	r3, r7, #8
 80102f4:	4619      	mov	r1, r3
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f7ff fda2 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f000 f95d 	bl	80105bc <SDMMC_GetCmdResp2>
 8010302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010304:	69fb      	ldr	r3, [r7, #28]
}
 8010306:	4618      	mov	r0, r3
 8010308:	3720      	adds	r7, #32
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801030e:	b580      	push	{r7, lr}
 8010310:	b088      	sub	sp, #32
 8010312:	af00      	add	r7, sp, #0
 8010314:	6078      	str	r0, [r7, #4]
 8010316:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010318:	2300      	movs	r3, #0
 801031a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801031c:	2303      	movs	r3, #3
 801031e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010320:	2340      	movs	r3, #64	; 0x40
 8010322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010324:	2300      	movs	r3, #0
 8010326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801032c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801032e:	f107 0308 	add.w	r3, r7, #8
 8010332:	4619      	mov	r1, r3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f7ff fd83 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801033a:	683a      	ldr	r2, [r7, #0]
 801033c:	2103      	movs	r1, #3
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 f9bc 	bl	80106bc <SDMMC_GetCmdResp6>
 8010344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010346:	69fb      	ldr	r3, [r7, #28]
}
 8010348:	4618      	mov	r0, r3
 801034a:	3720      	adds	r7, #32
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b088      	sub	sp, #32
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801035e:	230d      	movs	r3, #13
 8010360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010362:	2340      	movs	r3, #64	; 0x40
 8010364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010366:	2300      	movs	r3, #0
 8010368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801036a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801036e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010370:	f107 0308 	add.w	r3, r7, #8
 8010374:	4619      	mov	r1, r3
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f7ff fd62 	bl	800fe40 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 801037c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010380:	210d      	movs	r1, #13
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f000 f82e 	bl	80103e4 <SDMMC_GetCmdResp1>
 8010388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801038a:	69fb      	ldr	r3, [r7, #28]
}
 801038c:	4618      	mov	r0, r3
 801038e:	3720      	adds	r7, #32
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010394:	b490      	push	{r4, r7}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801039c:	4b0f      	ldr	r3, [pc, #60]	; (80103dc <SDMMC_GetCmdError+0x48>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4a0f      	ldr	r2, [pc, #60]	; (80103e0 <SDMMC_GetCmdError+0x4c>)
 80103a2:	fba2 2303 	umull	r2, r3, r2, r3
 80103a6:	0a5b      	lsrs	r3, r3, #9
 80103a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80103ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80103b0:	4623      	mov	r3, r4
 80103b2:	1e5c      	subs	r4, r3, #1
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d102      	bne.n	80103be <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80103b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80103bc:	e009      	b.n	80103d2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d0f2      	beq.n	80103b0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	22c5      	movs	r2, #197	; 0xc5
 80103ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80103d0:	2300      	movs	r3, #0
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3708      	adds	r7, #8
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bc90      	pop	{r4, r7}
 80103da:	4770      	bx	lr
 80103dc:	20000000 	.word	0x20000000
 80103e0:	10624dd3 	.word	0x10624dd3

080103e4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80103e4:	b590      	push	{r4, r7, lr}
 80103e6:	b087      	sub	sp, #28
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	60f8      	str	r0, [r7, #12]
 80103ec:	460b      	mov	r3, r1
 80103ee:	607a      	str	r2, [r7, #4]
 80103f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80103f2:	4b6f      	ldr	r3, [pc, #444]	; (80105b0 <SDMMC_GetCmdResp1+0x1cc>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4a6f      	ldr	r2, [pc, #444]	; (80105b4 <SDMMC_GetCmdResp1+0x1d0>)
 80103f8:	fba2 2303 	umull	r2, r3, r2, r3
 80103fc:	0a5b      	lsrs	r3, r3, #9
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010404:	4623      	mov	r3, r4
 8010406:	1e5c      	subs	r4, r3, #1
 8010408:	2b00      	cmp	r3, #0
 801040a:	d102      	bne.n	8010412 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801040c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010410:	e0c9      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010416:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801041e:	2b00      	cmp	r3, #0
 8010420:	d0f0      	beq.n	8010404 <SDMMC_GetCmdResp1+0x20>
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010428:	2b00      	cmp	r3, #0
 801042a:	d1eb      	bne.n	8010404 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010430:	f003 0304 	and.w	r3, r3, #4
 8010434:	2b00      	cmp	r3, #0
 8010436:	d004      	beq.n	8010442 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2204      	movs	r2, #4
 801043c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801043e:	2304      	movs	r3, #4
 8010440:	e0b1      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010446:	f003 0301 	and.w	r3, r3, #1
 801044a:	2b00      	cmp	r3, #0
 801044c:	d004      	beq.n	8010458 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2201      	movs	r2, #1
 8010452:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010454:	2301      	movs	r3, #1
 8010456:	e0a6      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	22c5      	movs	r2, #197	; 0xc5
 801045c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	f7ff fd18 	bl	800fe94 <SDIO_GetCommandResponse>
 8010464:	4603      	mov	r3, r0
 8010466:	461a      	mov	r2, r3
 8010468:	7afb      	ldrb	r3, [r7, #11]
 801046a:	4293      	cmp	r3, r2
 801046c:	d001      	beq.n	8010472 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801046e:	2301      	movs	r3, #1
 8010470:	e099      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010472:	2100      	movs	r1, #0
 8010474:	68f8      	ldr	r0, [r7, #12]
 8010476:	f7ff fd1a 	bl	800feae <SDIO_GetResponse>
 801047a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801047c:	693a      	ldr	r2, [r7, #16]
 801047e:	4b4e      	ldr	r3, [pc, #312]	; (80105b8 <SDMMC_GetCmdResp1+0x1d4>)
 8010480:	4013      	ands	r3, r2
 8010482:	2b00      	cmp	r3, #0
 8010484:	d101      	bne.n	801048a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010486:	2300      	movs	r3, #0
 8010488:	e08d      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	2b00      	cmp	r3, #0
 801048e:	da02      	bge.n	8010496 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010490:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010494:	e087      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801049c:	2b00      	cmp	r3, #0
 801049e:	d001      	beq.n	80104a4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80104a0:	2340      	movs	r3, #64	; 0x40
 80104a2:	e080      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80104a4:	693b      	ldr	r3, [r7, #16]
 80104a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d001      	beq.n	80104b2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80104ae:	2380      	movs	r3, #128	; 0x80
 80104b0:	e079      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d002      	beq.n	80104c2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80104bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104c0:	e071      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d002      	beq.n	80104d2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80104cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104d0:	e069      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d002      	beq.n	80104e2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80104dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104e0:	e061      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d002      	beq.n	80104f2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80104ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104f0:	e059      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d002      	beq.n	8010502 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80104fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010500:	e051      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010508:	2b00      	cmp	r3, #0
 801050a:	d002      	beq.n	8010512 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801050c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010510:	e049      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010518:	2b00      	cmp	r3, #0
 801051a:	d002      	beq.n	8010522 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801051c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010520:	e041      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010528:	2b00      	cmp	r3, #0
 801052a:	d002      	beq.n	8010532 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 801052c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010530:	e039      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010538:	2b00      	cmp	r3, #0
 801053a:	d002      	beq.n	8010542 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801053c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010540:	e031      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010548:	2b00      	cmp	r3, #0
 801054a:	d002      	beq.n	8010552 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801054c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010550:	e029      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010558:	2b00      	cmp	r3, #0
 801055a:	d002      	beq.n	8010562 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801055c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010560:	e021      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010568:	2b00      	cmp	r3, #0
 801056a:	d002      	beq.n	8010572 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801056c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010570:	e019      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010578:	2b00      	cmp	r3, #0
 801057a:	d002      	beq.n	8010582 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801057c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010580:	e011      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010588:	2b00      	cmp	r3, #0
 801058a:	d002      	beq.n	8010592 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801058c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010590:	e009      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	f003 0308 	and.w	r3, r3, #8
 8010598:	2b00      	cmp	r3, #0
 801059a:	d002      	beq.n	80105a2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801059c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80105a0:	e001      	b.n	80105a6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80105a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	371c      	adds	r7, #28
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd90      	pop	{r4, r7, pc}
 80105ae:	bf00      	nop
 80105b0:	20000000 	.word	0x20000000
 80105b4:	10624dd3 	.word	0x10624dd3
 80105b8:	fdffe008 	.word	0xfdffe008

080105bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80105bc:	b490      	push	{r4, r7}
 80105be:	b084      	sub	sp, #16
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80105c4:	4b1e      	ldr	r3, [pc, #120]	; (8010640 <SDMMC_GetCmdResp2+0x84>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4a1e      	ldr	r2, [pc, #120]	; (8010644 <SDMMC_GetCmdResp2+0x88>)
 80105ca:	fba2 2303 	umull	r2, r3, r2, r3
 80105ce:	0a5b      	lsrs	r3, r3, #9
 80105d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80105d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80105d8:	4623      	mov	r3, r4
 80105da:	1e5c      	subs	r4, r3, #1
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d102      	bne.n	80105e6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80105e4:	e026      	b.n	8010634 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105ea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d0f0      	beq.n	80105d8 <SDMMC_GetCmdResp2+0x1c>
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d1eb      	bne.n	80105d8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010604:	f003 0304 	and.w	r3, r3, #4
 8010608:	2b00      	cmp	r3, #0
 801060a:	d004      	beq.n	8010616 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2204      	movs	r2, #4
 8010610:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010612:	2304      	movs	r3, #4
 8010614:	e00e      	b.n	8010634 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801061a:	f003 0301 	and.w	r3, r3, #1
 801061e:	2b00      	cmp	r3, #0
 8010620:	d004      	beq.n	801062c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2201      	movs	r2, #1
 8010626:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010628:	2301      	movs	r3, #1
 801062a:	e003      	b.n	8010634 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	22c5      	movs	r2, #197	; 0xc5
 8010630:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010632:	2300      	movs	r3, #0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bc90      	pop	{r4, r7}
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	20000000 	.word	0x20000000
 8010644:	10624dd3 	.word	0x10624dd3

08010648 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010648:	b490      	push	{r4, r7}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010650:	4b18      	ldr	r3, [pc, #96]	; (80106b4 <SDMMC_GetCmdResp3+0x6c>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	4a18      	ldr	r2, [pc, #96]	; (80106b8 <SDMMC_GetCmdResp3+0x70>)
 8010656:	fba2 2303 	umull	r2, r3, r2, r3
 801065a:	0a5b      	lsrs	r3, r3, #9
 801065c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010660:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010664:	4623      	mov	r3, r4
 8010666:	1e5c      	subs	r4, r3, #1
 8010668:	2b00      	cmp	r3, #0
 801066a:	d102      	bne.n	8010672 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801066c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010670:	e01b      	b.n	80106aa <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010676:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801067e:	2b00      	cmp	r3, #0
 8010680:	d0f0      	beq.n	8010664 <SDMMC_GetCmdResp3+0x1c>
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1eb      	bne.n	8010664 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010690:	f003 0304 	and.w	r3, r3, #4
 8010694:	2b00      	cmp	r3, #0
 8010696:	d004      	beq.n	80106a2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2204      	movs	r2, #4
 801069c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801069e:	2304      	movs	r3, #4
 80106a0:	e003      	b.n	80106aa <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	22c5      	movs	r2, #197	; 0xc5
 80106a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80106a8:	2300      	movs	r3, #0
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bc90      	pop	{r4, r7}
 80106b2:	4770      	bx	lr
 80106b4:	20000000 	.word	0x20000000
 80106b8:	10624dd3 	.word	0x10624dd3

080106bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80106bc:	b590      	push	{r4, r7, lr}
 80106be:	b087      	sub	sp, #28
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	460b      	mov	r3, r1
 80106c6:	607a      	str	r2, [r7, #4]
 80106c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80106ca:	4b34      	ldr	r3, [pc, #208]	; (801079c <SDMMC_GetCmdResp6+0xe0>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	4a34      	ldr	r2, [pc, #208]	; (80107a0 <SDMMC_GetCmdResp6+0xe4>)
 80106d0:	fba2 2303 	umull	r2, r3, r2, r3
 80106d4:	0a5b      	lsrs	r3, r3, #9
 80106d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80106da:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80106de:	4623      	mov	r3, r4
 80106e0:	1e5c      	subs	r4, r3, #1
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d102      	bne.n	80106ec <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80106ea:	e052      	b.n	8010792 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106f0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d0f0      	beq.n	80106de <SDMMC_GetCmdResp6+0x22>
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010702:	2b00      	cmp	r3, #0
 8010704:	d1eb      	bne.n	80106de <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801070a:	f003 0304 	and.w	r3, r3, #4
 801070e:	2b00      	cmp	r3, #0
 8010710:	d004      	beq.n	801071c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2204      	movs	r2, #4
 8010716:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010718:	2304      	movs	r3, #4
 801071a:	e03a      	b.n	8010792 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010720:	f003 0301 	and.w	r3, r3, #1
 8010724:	2b00      	cmp	r3, #0
 8010726:	d004      	beq.n	8010732 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2201      	movs	r2, #1
 801072c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801072e:	2301      	movs	r3, #1
 8010730:	e02f      	b.n	8010792 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010732:	68f8      	ldr	r0, [r7, #12]
 8010734:	f7ff fbae 	bl	800fe94 <SDIO_GetCommandResponse>
 8010738:	4603      	mov	r3, r0
 801073a:	461a      	mov	r2, r3
 801073c:	7afb      	ldrb	r3, [r7, #11]
 801073e:	4293      	cmp	r3, r2
 8010740:	d001      	beq.n	8010746 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010742:	2301      	movs	r3, #1
 8010744:	e025      	b.n	8010792 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	22c5      	movs	r2, #197	; 0xc5
 801074a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801074c:	2100      	movs	r1, #0
 801074e:	68f8      	ldr	r0, [r7, #12]
 8010750:	f7ff fbad 	bl	800feae <SDIO_GetResponse>
 8010754:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801075c:	2b00      	cmp	r3, #0
 801075e:	d106      	bne.n	801076e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	0c1b      	lsrs	r3, r3, #16
 8010764:	b29a      	uxth	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801076a:	2300      	movs	r3, #0
 801076c:	e011      	b.n	8010792 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010774:	2b00      	cmp	r3, #0
 8010776:	d002      	beq.n	801077e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801077c:	e009      	b.n	8010792 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010784:	2b00      	cmp	r3, #0
 8010786:	d002      	beq.n	801078e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801078c:	e001      	b.n	8010792 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801078e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010792:	4618      	mov	r0, r3
 8010794:	371c      	adds	r7, #28
 8010796:	46bd      	mov	sp, r7
 8010798:	bd90      	pop	{r4, r7, pc}
 801079a:	bf00      	nop
 801079c:	20000000 	.word	0x20000000
 80107a0:	10624dd3 	.word	0x10624dd3

080107a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80107a4:	b490      	push	{r4, r7}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80107ac:	4b21      	ldr	r3, [pc, #132]	; (8010834 <SDMMC_GetCmdResp7+0x90>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	4a21      	ldr	r2, [pc, #132]	; (8010838 <SDMMC_GetCmdResp7+0x94>)
 80107b2:	fba2 2303 	umull	r2, r3, r2, r3
 80107b6:	0a5b      	lsrs	r3, r3, #9
 80107b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80107bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80107c0:	4623      	mov	r3, r4
 80107c2:	1e5c      	subs	r4, r3, #1
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d102      	bne.n	80107ce <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107cc:	e02c      	b.n	8010828 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d0f0      	beq.n	80107c0 <SDMMC_GetCmdResp7+0x1c>
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1eb      	bne.n	80107c0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ec:	f003 0304 	and.w	r3, r3, #4
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d004      	beq.n	80107fe <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2204      	movs	r2, #4
 80107f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107fa:	2304      	movs	r3, #4
 80107fc:	e014      	b.n	8010828 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010802:	f003 0301 	and.w	r3, r3, #1
 8010806:	2b00      	cmp	r3, #0
 8010808:	d004      	beq.n	8010814 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2201      	movs	r2, #1
 801080e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010810:	2301      	movs	r3, #1
 8010812:	e009      	b.n	8010828 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2240      	movs	r2, #64	; 0x40
 8010824:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010826:	2300      	movs	r3, #0
  
}
 8010828:	4618      	mov	r0, r3
 801082a:	3710      	adds	r7, #16
 801082c:	46bd      	mov	sp, r7
 801082e:	bc90      	pop	{r4, r7}
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	20000000 	.word	0x20000000
 8010838:	10624dd3 	.word	0x10624dd3

0801083c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010840:	4904      	ldr	r1, [pc, #16]	; (8010854 <MX_FATFS_Init+0x18>)
 8010842:	4805      	ldr	r0, [pc, #20]	; (8010858 <MX_FATFS_Init+0x1c>)
 8010844:	f003 fb9c 	bl	8013f80 <FATFS_LinkDriver>
 8010848:	4603      	mov	r3, r0
 801084a:	461a      	mov	r2, r3
 801084c:	4b03      	ldr	r3, [pc, #12]	; (801085c <MX_FATFS_Init+0x20>)
 801084e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010850:	bf00      	nop
 8010852:	bd80      	pop	{r7, pc}
 8010854:	20043c68 	.word	0x20043c68
 8010858:	08019ae4 	.word	0x08019ae4
 801085c:	20043c64 	.word	0x20043c64

08010860 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010866:	2300      	movs	r3, #0
 8010868:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801086a:	f000 f896 	bl	801099a <BSP_SD_IsDetected>
 801086e:	4603      	mov	r3, r0
 8010870:	2b01      	cmp	r3, #1
 8010872:	d001      	beq.n	8010878 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010874:	2301      	movs	r3, #1
 8010876:	e012      	b.n	801089e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010878:	480b      	ldr	r0, [pc, #44]	; (80108a8 <BSP_SD_Init+0x48>)
 801087a:	f7fb ffa5 	bl	800c7c8 <HAL_SD_Init>
 801087e:	4603      	mov	r3, r0
 8010880:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010882:	79fb      	ldrb	r3, [r7, #7]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d109      	bne.n	801089c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010888:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801088c:	4806      	ldr	r0, [pc, #24]	; (80108a8 <BSP_SD_Init+0x48>)
 801088e:	f7fc fd4f 	bl	800d330 <HAL_SD_ConfigWideBusOperation>
 8010892:	4603      	mov	r3, r0
 8010894:	2b00      	cmp	r3, #0
 8010896:	d001      	beq.n	801089c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010898:	2301      	movs	r3, #1
 801089a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801089c:	79fb      	ldrb	r3, [r7, #7]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3708      	adds	r7, #8
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	20043a60 	.word	0x20043a60

080108ac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b086      	sub	sp, #24
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	60b9      	str	r1, [r7, #8]
 80108b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80108b8:	2300      	movs	r3, #0
 80108ba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	68ba      	ldr	r2, [r7, #8]
 80108c0:	68f9      	ldr	r1, [r7, #12]
 80108c2:	4806      	ldr	r0, [pc, #24]	; (80108dc <BSP_SD_ReadBlocks_DMA+0x30>)
 80108c4:	f7fc f810 	bl	800c8e8 <HAL_SD_ReadBlocks_DMA>
 80108c8:	4603      	mov	r3, r0
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d001      	beq.n	80108d2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80108ce:	2301      	movs	r3, #1
 80108d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80108d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3718      	adds	r7, #24
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	20043a60 	.word	0x20043a60

080108e0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b086      	sub	sp, #24
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80108ec:	2300      	movs	r3, #0
 80108ee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	68f9      	ldr	r1, [r7, #12]
 80108f6:	4806      	ldr	r0, [pc, #24]	; (8010910 <BSP_SD_WriteBlocks_DMA+0x30>)
 80108f8:	f7fc f8de 	bl	800cab8 <HAL_SD_WriteBlocks_DMA>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d001      	beq.n	8010906 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010902:	2301      	movs	r3, #1
 8010904:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010906:	7dfb      	ldrb	r3, [r7, #23]
}
 8010908:	4618      	mov	r0, r3
 801090a:	3718      	adds	r7, #24
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}
 8010910:	20043a60 	.word	0x20043a60

08010914 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010918:	4805      	ldr	r0, [pc, #20]	; (8010930 <BSP_SD_GetCardState+0x1c>)
 801091a:	f7fc fd85 	bl	800d428 <HAL_SD_GetCardState>
 801091e:	4603      	mov	r3, r0
 8010920:	2b04      	cmp	r3, #4
 8010922:	bf14      	ite	ne
 8010924:	2301      	movne	r3, #1
 8010926:	2300      	moveq	r3, #0
 8010928:	b2db      	uxtb	r3, r3
}
 801092a:	4618      	mov	r0, r3
 801092c:	bd80      	pop	{r7, pc}
 801092e:	bf00      	nop
 8010930:	20043a60 	.word	0x20043a60

08010934 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 801093c:	6879      	ldr	r1, [r7, #4]
 801093e:	4803      	ldr	r0, [pc, #12]	; (801094c <BSP_SD_GetCardInfo+0x18>)
 8010940:	f7fc fcca 	bl	800d2d8 <HAL_SD_GetCardInfo>
}
 8010944:	bf00      	nop
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}
 801094c:	20043a60 	.word	0x20043a60

08010950 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010958:	f000 f818 	bl	801098c <BSP_SD_AbortCallback>
}
 801095c:	bf00      	nop
 801095e:	3708      	adds	r7, #8
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801096c:	f000 f9a8 	bl	8010cc0 <BSP_SD_WriteCpltCallback>
}
 8010970:	bf00      	nop
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010980:	f000 f9aa 	bl	8010cd8 <BSP_SD_ReadCpltCallback>
}
 8010984:	bf00      	nop
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 801098c:	b480      	push	{r7}
 801098e:	af00      	add	r7, sp, #0

}
 8010990:	bf00      	nop
 8010992:	46bd      	mov	sp, r7
 8010994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010998:	4770      	bx	lr

0801099a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801099a:	b580      	push	{r7, lr}
 801099c:	b082      	sub	sp, #8
 801099e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80109a0:	2301      	movs	r3, #1
 80109a2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80109a4:	f000 f80c 	bl	80109c0 <BSP_PlatformIsDetected>
 80109a8:	4603      	mov	r3, r0
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d101      	bne.n	80109b2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80109ae:	2300      	movs	r3, #0
 80109b0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80109b2:	79fb      	ldrb	r3, [r7, #7]
 80109b4:	b2db      	uxtb	r3, r3
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
	...

080109c0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80109c6:	2301      	movs	r3, #1
 80109c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80109ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80109ce:	4806      	ldr	r0, [pc, #24]	; (80109e8 <BSP_PlatformIsDetected+0x28>)
 80109d0:	f7fa f87e 	bl	800aad0 <HAL_GPIO_ReadPin>
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d001      	beq.n	80109de <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80109da:	2300      	movs	r3, #0
 80109dc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80109de:	79fb      	ldrb	r3, [r7, #7]
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	40020000 	.word	0x40020000

080109ec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b084      	sub	sp, #16
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80109f4:	f7f8 fde2 	bl	80095bc <HAL_GetTick>
 80109f8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80109fa:	e006      	b.n	8010a0a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80109fc:	f7ff ff8a 	bl	8010914 <BSP_SD_GetCardState>
 8010a00:	4603      	mov	r3, r0
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d101      	bne.n	8010a0a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010a06:	2300      	movs	r3, #0
 8010a08:	e009      	b.n	8010a1e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010a0a:	f7f8 fdd7 	bl	80095bc <HAL_GetTick>
 8010a0e:	4602      	mov	r2, r0
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	1ad3      	subs	r3, r2, r3
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d8f0      	bhi.n	80109fc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3710      	adds	r7, #16
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
	...

08010a28 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010a32:	4b0b      	ldr	r3, [pc, #44]	; (8010a60 <SD_CheckStatus+0x38>)
 8010a34:	2201      	movs	r2, #1
 8010a36:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010a38:	f7ff ff6c 	bl	8010914 <BSP_SD_GetCardState>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d107      	bne.n	8010a52 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010a42:	4b07      	ldr	r3, [pc, #28]	; (8010a60 <SD_CheckStatus+0x38>)
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	f023 0301 	bic.w	r3, r3, #1
 8010a4c:	b2da      	uxtb	r2, r3
 8010a4e:	4b04      	ldr	r3, [pc, #16]	; (8010a60 <SD_CheckStatus+0x38>)
 8010a50:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010a52:	4b03      	ldr	r3, [pc, #12]	; (8010a60 <SD_CheckStatus+0x38>)
 8010a54:	781b      	ldrb	r3, [r3, #0]
 8010a56:	b2db      	uxtb	r3, r3
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3708      	adds	r7, #8
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}
 8010a60:	20000009 	.word	0x20000009

08010a64 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010a6e:	f7ff fef7 	bl	8010860 <BSP_SD_Init>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d107      	bne.n	8010a88 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010a78:	79fb      	ldrb	r3, [r7, #7]
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f7ff ffd4 	bl	8010a28 <SD_CheckStatus>
 8010a80:	4603      	mov	r3, r0
 8010a82:	461a      	mov	r2, r3
 8010a84:	4b04      	ldr	r3, [pc, #16]	; (8010a98 <SD_initialize+0x34>)
 8010a86:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010a88:	4b03      	ldr	r3, [pc, #12]	; (8010a98 <SD_initialize+0x34>)
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	b2db      	uxtb	r3, r3
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3708      	adds	r7, #8
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	20000009 	.word	0x20000009

08010a9c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010aa6:	79fb      	ldrb	r3, [r7, #7]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7ff ffbd 	bl	8010a28 <SD_CheckStatus>
 8010aae:	4603      	mov	r3, r0
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b086      	sub	sp, #24
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60b9      	str	r1, [r7, #8]
 8010ac0:	607a      	str	r2, [r7, #4]
 8010ac2:	603b      	str	r3, [r7, #0]
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010ac8:	2301      	movs	r3, #1
 8010aca:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010acc:	f247 5030 	movw	r0, #30000	; 0x7530
 8010ad0:	f7ff ff8c 	bl	80109ec <SD_CheckStatusWithTimeout>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	da01      	bge.n	8010ade <SD_read+0x26>
  {
    return res;
 8010ada:	7dfb      	ldrb	r3, [r7, #23]
 8010adc:	e03b      	b.n	8010b56 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010ade:	683a      	ldr	r2, [r7, #0]
 8010ae0:	6879      	ldr	r1, [r7, #4]
 8010ae2:	68b8      	ldr	r0, [r7, #8]
 8010ae4:	f7ff fee2 	bl	80108ac <BSP_SD_ReadBlocks_DMA>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d132      	bne.n	8010b54 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010aee:	4b1c      	ldr	r3, [pc, #112]	; (8010b60 <SD_read+0xa8>)
 8010af0:	2200      	movs	r2, #0
 8010af2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010af4:	f7f8 fd62 	bl	80095bc <HAL_GetTick>
 8010af8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010afa:	bf00      	nop
 8010afc:	4b18      	ldr	r3, [pc, #96]	; (8010b60 <SD_read+0xa8>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d108      	bne.n	8010b16 <SD_read+0x5e>
 8010b04:	f7f8 fd5a 	bl	80095bc <HAL_GetTick>
 8010b08:	4602      	mov	r2, r0
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	1ad3      	subs	r3, r2, r3
 8010b0e:	f247 522f 	movw	r2, #29999	; 0x752f
 8010b12:	4293      	cmp	r3, r2
 8010b14:	d9f2      	bls.n	8010afc <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010b16:	4b12      	ldr	r3, [pc, #72]	; (8010b60 <SD_read+0xa8>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d102      	bne.n	8010b24 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010b1e:	2301      	movs	r3, #1
 8010b20:	75fb      	strb	r3, [r7, #23]
 8010b22:	e017      	b.n	8010b54 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010b24:	4b0e      	ldr	r3, [pc, #56]	; (8010b60 <SD_read+0xa8>)
 8010b26:	2200      	movs	r2, #0
 8010b28:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010b2a:	f7f8 fd47 	bl	80095bc <HAL_GetTick>
 8010b2e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010b30:	e007      	b.n	8010b42 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010b32:	f7ff feef 	bl	8010914 <BSP_SD_GetCardState>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d102      	bne.n	8010b42 <SD_read+0x8a>
          {
            res = RES_OK;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010b40:	e008      	b.n	8010b54 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010b42:	f7f8 fd3b 	bl	80095bc <HAL_GetTick>
 8010b46:	4602      	mov	r2, r0
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	1ad3      	subs	r3, r2, r3
 8010b4c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010b50:	4293      	cmp	r3, r2
 8010b52:	d9ee      	bls.n	8010b32 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3718      	adds	r7, #24
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	200412fc 	.word	0x200412fc

08010b64 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b086      	sub	sp, #24
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	60b9      	str	r1, [r7, #8]
 8010b6c:	607a      	str	r2, [r7, #4]
 8010b6e:	603b      	str	r3, [r7, #0]
 8010b70:	4603      	mov	r3, r0
 8010b72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010b74:	2301      	movs	r3, #1
 8010b76:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010b78:	4b24      	ldr	r3, [pc, #144]	; (8010c0c <SD_write+0xa8>)
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010b7e:	f247 5030 	movw	r0, #30000	; 0x7530
 8010b82:	f7ff ff33 	bl	80109ec <SD_CheckStatusWithTimeout>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	da01      	bge.n	8010b90 <SD_write+0x2c>
  {
    return res;
 8010b8c:	7dfb      	ldrb	r3, [r7, #23]
 8010b8e:	e038      	b.n	8010c02 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010b90:	683a      	ldr	r2, [r7, #0]
 8010b92:	6879      	ldr	r1, [r7, #4]
 8010b94:	68b8      	ldr	r0, [r7, #8]
 8010b96:	f7ff fea3 	bl	80108e0 <BSP_SD_WriteBlocks_DMA>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d12f      	bne.n	8010c00 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010ba0:	f7f8 fd0c 	bl	80095bc <HAL_GetTick>
 8010ba4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010ba6:	bf00      	nop
 8010ba8:	4b18      	ldr	r3, [pc, #96]	; (8010c0c <SD_write+0xa8>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d108      	bne.n	8010bc2 <SD_write+0x5e>
 8010bb0:	f7f8 fd04 	bl	80095bc <HAL_GetTick>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	1ad3      	subs	r3, r2, r3
 8010bba:	f247 522f 	movw	r2, #29999	; 0x752f
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d9f2      	bls.n	8010ba8 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010bc2:	4b12      	ldr	r3, [pc, #72]	; (8010c0c <SD_write+0xa8>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d102      	bne.n	8010bd0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010bca:	2301      	movs	r3, #1
 8010bcc:	75fb      	strb	r3, [r7, #23]
 8010bce:	e017      	b.n	8010c00 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010bd0:	4b0e      	ldr	r3, [pc, #56]	; (8010c0c <SD_write+0xa8>)
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010bd6:	f7f8 fcf1 	bl	80095bc <HAL_GetTick>
 8010bda:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010bdc:	e007      	b.n	8010bee <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010bde:	f7ff fe99 	bl	8010914 <BSP_SD_GetCardState>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d102      	bne.n	8010bee <SD_write+0x8a>
          {
            res = RES_OK;
 8010be8:	2300      	movs	r3, #0
 8010bea:	75fb      	strb	r3, [r7, #23]
            break;
 8010bec:	e008      	b.n	8010c00 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010bee:	f7f8 fce5 	bl	80095bc <HAL_GetTick>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	f247 522f 	movw	r2, #29999	; 0x752f
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d9ee      	bls.n	8010bde <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3718      	adds	r7, #24
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	200412f8 	.word	0x200412f8

08010c10 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b08c      	sub	sp, #48	; 0x30
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	4603      	mov	r3, r0
 8010c18:	603a      	str	r2, [r7, #0]
 8010c1a:	71fb      	strb	r3, [r7, #7]
 8010c1c:	460b      	mov	r3, r1
 8010c1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010c20:	2301      	movs	r3, #1
 8010c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010c26:	4b25      	ldr	r3, [pc, #148]	; (8010cbc <SD_ioctl+0xac>)
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	f003 0301 	and.w	r3, r3, #1
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d001      	beq.n	8010c38 <SD_ioctl+0x28>
 8010c34:	2303      	movs	r3, #3
 8010c36:	e03c      	b.n	8010cb2 <SD_ioctl+0xa2>

  switch (cmd)
 8010c38:	79bb      	ldrb	r3, [r7, #6]
 8010c3a:	2b03      	cmp	r3, #3
 8010c3c:	d834      	bhi.n	8010ca8 <SD_ioctl+0x98>
 8010c3e:	a201      	add	r2, pc, #4	; (adr r2, 8010c44 <SD_ioctl+0x34>)
 8010c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c44:	08010c55 	.word	0x08010c55
 8010c48:	08010c5d 	.word	0x08010c5d
 8010c4c:	08010c75 	.word	0x08010c75
 8010c50:	08010c8f 	.word	0x08010c8f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010c54:	2300      	movs	r3, #0
 8010c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c5a:	e028      	b.n	8010cae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c5c:	f107 030c 	add.w	r3, r7, #12
 8010c60:	4618      	mov	r0, r3
 8010c62:	f7ff fe67 	bl	8010934 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c72:	e01c      	b.n	8010cae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c74:	f107 030c 	add.w	r3, r7, #12
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7ff fe5b 	bl	8010934 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c80:	b29a      	uxth	r2, r3
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010c86:	2300      	movs	r3, #0
 8010c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c8c:	e00f      	b.n	8010cae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c8e:	f107 030c 	add.w	r3, r7, #12
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7ff fe4e 	bl	8010934 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9a:	0a5a      	lsrs	r2, r3, #9
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010ca6:	e002      	b.n	8010cae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010ca8:	2304      	movs	r3, #4
 8010caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3730      	adds	r7, #48	; 0x30
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	20000009 	.word	0x20000009

08010cc0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010cc4:	4b03      	ldr	r3, [pc, #12]	; (8010cd4 <BSP_SD_WriteCpltCallback+0x14>)
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	601a      	str	r2, [r3, #0]
}
 8010cca:	bf00      	nop
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr
 8010cd4:	200412f8 	.word	0x200412f8

08010cd8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010cdc:	4b03      	ldr	r3, [pc, #12]	; (8010cec <BSP_SD_ReadCpltCallback+0x14>)
 8010cde:	2201      	movs	r2, #1
 8010ce0:	601a      	str	r2, [r3, #0]
}
 8010ce2:	bf00      	nop
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr
 8010cec:	200412fc 	.word	0x200412fc

08010cf0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010cfa:	79fb      	ldrb	r3, [r7, #7]
 8010cfc:	4a08      	ldr	r2, [pc, #32]	; (8010d20 <disk_status+0x30>)
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	4413      	add	r3, r2
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	79fa      	ldrb	r2, [r7, #7]
 8010d08:	4905      	ldr	r1, [pc, #20]	; (8010d20 <disk_status+0x30>)
 8010d0a:	440a      	add	r2, r1
 8010d0c:	7a12      	ldrb	r2, [r2, #8]
 8010d0e:	4610      	mov	r0, r2
 8010d10:	4798      	blx	r3
 8010d12:	4603      	mov	r3, r0
 8010d14:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3710      	adds	r7, #16
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	20041328 	.word	0x20041328

08010d24 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b084      	sub	sp, #16
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010d32:	79fb      	ldrb	r3, [r7, #7]
 8010d34:	4a0d      	ldr	r2, [pc, #52]	; (8010d6c <disk_initialize+0x48>)
 8010d36:	5cd3      	ldrb	r3, [r2, r3]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d111      	bne.n	8010d60 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010d3c:	79fb      	ldrb	r3, [r7, #7]
 8010d3e:	4a0b      	ldr	r2, [pc, #44]	; (8010d6c <disk_initialize+0x48>)
 8010d40:	2101      	movs	r1, #1
 8010d42:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010d44:	79fb      	ldrb	r3, [r7, #7]
 8010d46:	4a09      	ldr	r2, [pc, #36]	; (8010d6c <disk_initialize+0x48>)
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	4413      	add	r3, r2
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	79fa      	ldrb	r2, [r7, #7]
 8010d52:	4906      	ldr	r1, [pc, #24]	; (8010d6c <disk_initialize+0x48>)
 8010d54:	440a      	add	r2, r1
 8010d56:	7a12      	ldrb	r2, [r2, #8]
 8010d58:	4610      	mov	r0, r2
 8010d5a:	4798      	blx	r3
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3710      	adds	r7, #16
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	20041328 	.word	0x20041328

08010d70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010d70:	b590      	push	{r4, r7, lr}
 8010d72:	b087      	sub	sp, #28
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60b9      	str	r1, [r7, #8]
 8010d78:	607a      	str	r2, [r7, #4]
 8010d7a:	603b      	str	r3, [r7, #0]
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d80:	7bfb      	ldrb	r3, [r7, #15]
 8010d82:	4a0a      	ldr	r2, [pc, #40]	; (8010dac <disk_read+0x3c>)
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	4413      	add	r3, r2
 8010d88:	685b      	ldr	r3, [r3, #4]
 8010d8a:	689c      	ldr	r4, [r3, #8]
 8010d8c:	7bfb      	ldrb	r3, [r7, #15]
 8010d8e:	4a07      	ldr	r2, [pc, #28]	; (8010dac <disk_read+0x3c>)
 8010d90:	4413      	add	r3, r2
 8010d92:	7a18      	ldrb	r0, [r3, #8]
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	68b9      	ldr	r1, [r7, #8]
 8010d9a:	47a0      	blx	r4
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	371c      	adds	r7, #28
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd90      	pop	{r4, r7, pc}
 8010daa:	bf00      	nop
 8010dac:	20041328 	.word	0x20041328

08010db0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010db0:	b590      	push	{r4, r7, lr}
 8010db2:	b087      	sub	sp, #28
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	60b9      	str	r1, [r7, #8]
 8010db8:	607a      	str	r2, [r7, #4]
 8010dba:	603b      	str	r3, [r7, #0]
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010dc0:	7bfb      	ldrb	r3, [r7, #15]
 8010dc2:	4a0a      	ldr	r2, [pc, #40]	; (8010dec <disk_write+0x3c>)
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	4413      	add	r3, r2
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	68dc      	ldr	r4, [r3, #12]
 8010dcc:	7bfb      	ldrb	r3, [r7, #15]
 8010dce:	4a07      	ldr	r2, [pc, #28]	; (8010dec <disk_write+0x3c>)
 8010dd0:	4413      	add	r3, r2
 8010dd2:	7a18      	ldrb	r0, [r3, #8]
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	68b9      	ldr	r1, [r7, #8]
 8010dda:	47a0      	blx	r4
 8010ddc:	4603      	mov	r3, r0
 8010dde:	75fb      	strb	r3, [r7, #23]
  return res;
 8010de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	371c      	adds	r7, #28
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd90      	pop	{r4, r7, pc}
 8010dea:	bf00      	nop
 8010dec:	20041328 	.word	0x20041328

08010df0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	4603      	mov	r3, r0
 8010df8:	603a      	str	r2, [r7, #0]
 8010dfa:	71fb      	strb	r3, [r7, #7]
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010e00:	79fb      	ldrb	r3, [r7, #7]
 8010e02:	4a09      	ldr	r2, [pc, #36]	; (8010e28 <disk_ioctl+0x38>)
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	4413      	add	r3, r2
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	691b      	ldr	r3, [r3, #16]
 8010e0c:	79fa      	ldrb	r2, [r7, #7]
 8010e0e:	4906      	ldr	r1, [pc, #24]	; (8010e28 <disk_ioctl+0x38>)
 8010e10:	440a      	add	r2, r1
 8010e12:	7a10      	ldrb	r0, [r2, #8]
 8010e14:	79b9      	ldrb	r1, [r7, #6]
 8010e16:	683a      	ldr	r2, [r7, #0]
 8010e18:	4798      	blx	r3
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	73fb      	strb	r3, [r7, #15]
  return res;
 8010e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3710      	adds	r7, #16
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	20041328 	.word	0x20041328

08010e2c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b085      	sub	sp, #20
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	3301      	adds	r3, #1
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010e3c:	89fb      	ldrh	r3, [r7, #14]
 8010e3e:	021b      	lsls	r3, r3, #8
 8010e40:	b21a      	sxth	r2, r3
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	b21b      	sxth	r3, r3
 8010e48:	4313      	orrs	r3, r2
 8010e4a:	b21b      	sxth	r3, r3
 8010e4c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010e4e:	89fb      	ldrh	r3, [r7, #14]
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3714      	adds	r7, #20
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b085      	sub	sp, #20
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	3303      	adds	r3, #3
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	021b      	lsls	r3, r3, #8
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	3202      	adds	r2, #2
 8010e74:	7812      	ldrb	r2, [r2, #0]
 8010e76:	4313      	orrs	r3, r2
 8010e78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	021b      	lsls	r3, r3, #8
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	3201      	adds	r2, #1
 8010e82:	7812      	ldrb	r2, [r2, #0]
 8010e84:	4313      	orrs	r3, r2
 8010e86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	021b      	lsls	r3, r3, #8
 8010e8c:	687a      	ldr	r2, [r7, #4]
 8010e8e:	7812      	ldrb	r2, [r2, #0]
 8010e90:	4313      	orrs	r3, r2
 8010e92:	60fb      	str	r3, [r7, #12]
	return rv;
 8010e94:	68fb      	ldr	r3, [r7, #12]
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3714      	adds	r7, #20
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr

08010ea2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010ea2:	b480      	push	{r7}
 8010ea4:	b083      	sub	sp, #12
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	460b      	mov	r3, r1
 8010eac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	1c5a      	adds	r2, r3, #1
 8010eb2:	607a      	str	r2, [r7, #4]
 8010eb4:	887a      	ldrh	r2, [r7, #2]
 8010eb6:	b2d2      	uxtb	r2, r2
 8010eb8:	701a      	strb	r2, [r3, #0]
 8010eba:	887b      	ldrh	r3, [r7, #2]
 8010ebc:	0a1b      	lsrs	r3, r3, #8
 8010ebe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	1c5a      	adds	r2, r3, #1
 8010ec4:	607a      	str	r2, [r7, #4]
 8010ec6:	887a      	ldrh	r2, [r7, #2]
 8010ec8:	b2d2      	uxtb	r2, r2
 8010eca:	701a      	strb	r2, [r3, #0]
}
 8010ecc:	bf00      	nop
 8010ece:	370c      	adds	r7, #12
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed6:	4770      	bx	lr

08010ed8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010ed8:	b480      	push	{r7}
 8010eda:	b083      	sub	sp, #12
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	1c5a      	adds	r2, r3, #1
 8010ee6:	607a      	str	r2, [r7, #4]
 8010ee8:	683a      	ldr	r2, [r7, #0]
 8010eea:	b2d2      	uxtb	r2, r2
 8010eec:	701a      	strb	r2, [r3, #0]
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	0a1b      	lsrs	r3, r3, #8
 8010ef2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	1c5a      	adds	r2, r3, #1
 8010ef8:	607a      	str	r2, [r7, #4]
 8010efa:	683a      	ldr	r2, [r7, #0]
 8010efc:	b2d2      	uxtb	r2, r2
 8010efe:	701a      	strb	r2, [r3, #0]
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	0a1b      	lsrs	r3, r3, #8
 8010f04:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	1c5a      	adds	r2, r3, #1
 8010f0a:	607a      	str	r2, [r7, #4]
 8010f0c:	683a      	ldr	r2, [r7, #0]
 8010f0e:	b2d2      	uxtb	r2, r2
 8010f10:	701a      	strb	r2, [r3, #0]
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	0a1b      	lsrs	r3, r3, #8
 8010f16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	1c5a      	adds	r2, r3, #1
 8010f1c:	607a      	str	r2, [r7, #4]
 8010f1e:	683a      	ldr	r2, [r7, #0]
 8010f20:	b2d2      	uxtb	r2, r2
 8010f22:	701a      	strb	r2, [r3, #0]
}
 8010f24:	bf00      	nop
 8010f26:	370c      	adds	r7, #12
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr

08010f30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010f30:	b480      	push	{r7}
 8010f32:	b087      	sub	sp, #28
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00d      	beq.n	8010f66 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010f4a:	693a      	ldr	r2, [r7, #16]
 8010f4c:	1c53      	adds	r3, r2, #1
 8010f4e:	613b      	str	r3, [r7, #16]
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	1c59      	adds	r1, r3, #1
 8010f54:	6179      	str	r1, [r7, #20]
 8010f56:	7812      	ldrb	r2, [r2, #0]
 8010f58:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	3b01      	subs	r3, #1
 8010f5e:	607b      	str	r3, [r7, #4]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d1f1      	bne.n	8010f4a <mem_cpy+0x1a>
	}
}
 8010f66:	bf00      	nop
 8010f68:	371c      	adds	r7, #28
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr

08010f72 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010f72:	b480      	push	{r7}
 8010f74:	b087      	sub	sp, #28
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	60f8      	str	r0, [r7, #12]
 8010f7a:	60b9      	str	r1, [r7, #8]
 8010f7c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	1c5a      	adds	r2, r3, #1
 8010f86:	617a      	str	r2, [r7, #20]
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	b2d2      	uxtb	r2, r2
 8010f8c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	3b01      	subs	r3, #1
 8010f92:	607b      	str	r3, [r7, #4]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d1f3      	bne.n	8010f82 <mem_set+0x10>
}
 8010f9a:	bf00      	nop
 8010f9c:	371c      	adds	r7, #28
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr

08010fa6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010fa6:	b480      	push	{r7}
 8010fa8:	b089      	sub	sp, #36	; 0x24
 8010faa:	af00      	add	r7, sp, #0
 8010fac:	60f8      	str	r0, [r7, #12]
 8010fae:	60b9      	str	r1, [r7, #8]
 8010fb0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	61fb      	str	r3, [r7, #28]
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	1c5a      	adds	r2, r3, #1
 8010fc2:	61fa      	str	r2, [r7, #28]
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	69bb      	ldr	r3, [r7, #24]
 8010fca:	1c5a      	adds	r2, r3, #1
 8010fcc:	61ba      	str	r2, [r7, #24]
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	1acb      	subs	r3, r1, r3
 8010fd2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	3b01      	subs	r3, #1
 8010fd8:	607b      	str	r3, [r7, #4]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d002      	beq.n	8010fe6 <mem_cmp+0x40>
 8010fe0:	697b      	ldr	r3, [r7, #20]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d0eb      	beq.n	8010fbe <mem_cmp+0x18>

	return r;
 8010fe6:	697b      	ldr	r3, [r7, #20]
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3724      	adds	r7, #36	; 0x24
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr

08010ff4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010ff4:	b480      	push	{r7}
 8010ff6:	b083      	sub	sp, #12
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010ffe:	e002      	b.n	8011006 <chk_chr+0x12>
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	3301      	adds	r3, #1
 8011004:	607b      	str	r3, [r7, #4]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d005      	beq.n	801101a <chk_chr+0x26>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	461a      	mov	r2, r3
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	4293      	cmp	r3, r2
 8011018:	d1f2      	bne.n	8011000 <chk_chr+0xc>
	return *str;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	781b      	ldrb	r3, [r3, #0]
}
 801101e:	4618      	mov	r0, r3
 8011020:	370c      	adds	r7, #12
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr
	...

0801102c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801102c:	b480      	push	{r7}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011036:	2300      	movs	r3, #0
 8011038:	60bb      	str	r3, [r7, #8]
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	60fb      	str	r3, [r7, #12]
 801103e:	e029      	b.n	8011094 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011040:	4a27      	ldr	r2, [pc, #156]	; (80110e0 <chk_lock+0xb4>)
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	011b      	lsls	r3, r3, #4
 8011046:	4413      	add	r3, r2
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d01d      	beq.n	801108a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801104e:	4a24      	ldr	r2, [pc, #144]	; (80110e0 <chk_lock+0xb4>)
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	011b      	lsls	r3, r3, #4
 8011054:	4413      	add	r3, r2
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	429a      	cmp	r2, r3
 801105e:	d116      	bne.n	801108e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011060:	4a1f      	ldr	r2, [pc, #124]	; (80110e0 <chk_lock+0xb4>)
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	011b      	lsls	r3, r3, #4
 8011066:	4413      	add	r3, r2
 8011068:	3304      	adds	r3, #4
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011070:	429a      	cmp	r2, r3
 8011072:	d10c      	bne.n	801108e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011074:	4a1a      	ldr	r2, [pc, #104]	; (80110e0 <chk_lock+0xb4>)
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	011b      	lsls	r3, r3, #4
 801107a:	4413      	add	r3, r2
 801107c:	3308      	adds	r3, #8
 801107e:	681a      	ldr	r2, [r3, #0]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011084:	429a      	cmp	r2, r3
 8011086:	d102      	bne.n	801108e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011088:	e007      	b.n	801109a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801108a:	2301      	movs	r3, #1
 801108c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	3301      	adds	r3, #1
 8011092:	60fb      	str	r3, [r7, #12]
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2b01      	cmp	r3, #1
 8011098:	d9d2      	bls.n	8011040 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	2b02      	cmp	r3, #2
 801109e:	d109      	bne.n	80110b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d102      	bne.n	80110ac <chk_lock+0x80>
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	2b02      	cmp	r3, #2
 80110aa:	d101      	bne.n	80110b0 <chk_lock+0x84>
 80110ac:	2300      	movs	r3, #0
 80110ae:	e010      	b.n	80110d2 <chk_lock+0xa6>
 80110b0:	2312      	movs	r3, #18
 80110b2:	e00e      	b.n	80110d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d108      	bne.n	80110cc <chk_lock+0xa0>
 80110ba:	4a09      	ldr	r2, [pc, #36]	; (80110e0 <chk_lock+0xb4>)
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	011b      	lsls	r3, r3, #4
 80110c0:	4413      	add	r3, r2
 80110c2:	330c      	adds	r3, #12
 80110c4:	881b      	ldrh	r3, [r3, #0]
 80110c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110ca:	d101      	bne.n	80110d0 <chk_lock+0xa4>
 80110cc:	2310      	movs	r3, #16
 80110ce:	e000      	b.n	80110d2 <chk_lock+0xa6>
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3714      	adds	r7, #20
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr
 80110de:	bf00      	nop
 80110e0:	20041308 	.word	0x20041308

080110e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80110ea:	2300      	movs	r3, #0
 80110ec:	607b      	str	r3, [r7, #4]
 80110ee:	e002      	b.n	80110f6 <enq_lock+0x12>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	3301      	adds	r3, #1
 80110f4:	607b      	str	r3, [r7, #4]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	d806      	bhi.n	801110a <enq_lock+0x26>
 80110fc:	4a09      	ldr	r2, [pc, #36]	; (8011124 <enq_lock+0x40>)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	011b      	lsls	r3, r3, #4
 8011102:	4413      	add	r3, r2
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d1f2      	bne.n	80110f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2b02      	cmp	r3, #2
 801110e:	bf14      	ite	ne
 8011110:	2301      	movne	r3, #1
 8011112:	2300      	moveq	r3, #0
 8011114:	b2db      	uxtb	r3, r3
}
 8011116:	4618      	mov	r0, r3
 8011118:	370c      	adds	r7, #12
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr
 8011122:	bf00      	nop
 8011124:	20041308 	.word	0x20041308

08011128 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011128:	b480      	push	{r7}
 801112a:	b085      	sub	sp, #20
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011132:	2300      	movs	r3, #0
 8011134:	60fb      	str	r3, [r7, #12]
 8011136:	e01f      	b.n	8011178 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011138:	4a41      	ldr	r2, [pc, #260]	; (8011240 <inc_lock+0x118>)
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	011b      	lsls	r3, r3, #4
 801113e:	4413      	add	r3, r2
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	429a      	cmp	r2, r3
 8011148:	d113      	bne.n	8011172 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801114a:	4a3d      	ldr	r2, [pc, #244]	; (8011240 <inc_lock+0x118>)
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	011b      	lsls	r3, r3, #4
 8011150:	4413      	add	r3, r2
 8011152:	3304      	adds	r3, #4
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801115a:	429a      	cmp	r2, r3
 801115c:	d109      	bne.n	8011172 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801115e:	4a38      	ldr	r2, [pc, #224]	; (8011240 <inc_lock+0x118>)
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	011b      	lsls	r3, r3, #4
 8011164:	4413      	add	r3, r2
 8011166:	3308      	adds	r3, #8
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801116e:	429a      	cmp	r2, r3
 8011170:	d006      	beq.n	8011180 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	3301      	adds	r3, #1
 8011176:	60fb      	str	r3, [r7, #12]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	2b01      	cmp	r3, #1
 801117c:	d9dc      	bls.n	8011138 <inc_lock+0x10>
 801117e:	e000      	b.n	8011182 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011180:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2b02      	cmp	r3, #2
 8011186:	d132      	bne.n	80111ee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011188:	2300      	movs	r3, #0
 801118a:	60fb      	str	r3, [r7, #12]
 801118c:	e002      	b.n	8011194 <inc_lock+0x6c>
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	3301      	adds	r3, #1
 8011192:	60fb      	str	r3, [r7, #12]
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2b01      	cmp	r3, #1
 8011198:	d806      	bhi.n	80111a8 <inc_lock+0x80>
 801119a:	4a29      	ldr	r2, [pc, #164]	; (8011240 <inc_lock+0x118>)
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	011b      	lsls	r3, r3, #4
 80111a0:	4413      	add	r3, r2
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d1f2      	bne.n	801118e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	2b02      	cmp	r3, #2
 80111ac:	d101      	bne.n	80111b2 <inc_lock+0x8a>
 80111ae:	2300      	movs	r3, #0
 80111b0:	e040      	b.n	8011234 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681a      	ldr	r2, [r3, #0]
 80111b6:	4922      	ldr	r1, [pc, #136]	; (8011240 <inc_lock+0x118>)
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	011b      	lsls	r3, r3, #4
 80111bc:	440b      	add	r3, r1
 80111be:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	689a      	ldr	r2, [r3, #8]
 80111c4:	491e      	ldr	r1, [pc, #120]	; (8011240 <inc_lock+0x118>)
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	011b      	lsls	r3, r3, #4
 80111ca:	440b      	add	r3, r1
 80111cc:	3304      	adds	r3, #4
 80111ce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	695a      	ldr	r2, [r3, #20]
 80111d4:	491a      	ldr	r1, [pc, #104]	; (8011240 <inc_lock+0x118>)
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	011b      	lsls	r3, r3, #4
 80111da:	440b      	add	r3, r1
 80111dc:	3308      	adds	r3, #8
 80111de:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80111e0:	4a17      	ldr	r2, [pc, #92]	; (8011240 <inc_lock+0x118>)
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	011b      	lsls	r3, r3, #4
 80111e6:	4413      	add	r3, r2
 80111e8:	330c      	adds	r3, #12
 80111ea:	2200      	movs	r2, #0
 80111ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d009      	beq.n	8011208 <inc_lock+0xe0>
 80111f4:	4a12      	ldr	r2, [pc, #72]	; (8011240 <inc_lock+0x118>)
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	011b      	lsls	r3, r3, #4
 80111fa:	4413      	add	r3, r2
 80111fc:	330c      	adds	r3, #12
 80111fe:	881b      	ldrh	r3, [r3, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d001      	beq.n	8011208 <inc_lock+0xe0>
 8011204:	2300      	movs	r3, #0
 8011206:	e015      	b.n	8011234 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d108      	bne.n	8011220 <inc_lock+0xf8>
 801120e:	4a0c      	ldr	r2, [pc, #48]	; (8011240 <inc_lock+0x118>)
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	011b      	lsls	r3, r3, #4
 8011214:	4413      	add	r3, r2
 8011216:	330c      	adds	r3, #12
 8011218:	881b      	ldrh	r3, [r3, #0]
 801121a:	3301      	adds	r3, #1
 801121c:	b29a      	uxth	r2, r3
 801121e:	e001      	b.n	8011224 <inc_lock+0xfc>
 8011220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011224:	4906      	ldr	r1, [pc, #24]	; (8011240 <inc_lock+0x118>)
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	011b      	lsls	r3, r3, #4
 801122a:	440b      	add	r3, r1
 801122c:	330c      	adds	r3, #12
 801122e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	3301      	adds	r3, #1
}
 8011234:	4618      	mov	r0, r3
 8011236:	3714      	adds	r7, #20
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr
 8011240:	20041308 	.word	0x20041308

08011244 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011244:	b480      	push	{r7}
 8011246:	b085      	sub	sp, #20
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	3b01      	subs	r3, #1
 8011250:	607b      	str	r3, [r7, #4]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2b01      	cmp	r3, #1
 8011256:	d825      	bhi.n	80112a4 <dec_lock+0x60>
		n = Files[i].ctr;
 8011258:	4a17      	ldr	r2, [pc, #92]	; (80112b8 <dec_lock+0x74>)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	011b      	lsls	r3, r3, #4
 801125e:	4413      	add	r3, r2
 8011260:	330c      	adds	r3, #12
 8011262:	881b      	ldrh	r3, [r3, #0]
 8011264:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011266:	89fb      	ldrh	r3, [r7, #14]
 8011268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801126c:	d101      	bne.n	8011272 <dec_lock+0x2e>
 801126e:	2300      	movs	r3, #0
 8011270:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011272:	89fb      	ldrh	r3, [r7, #14]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d002      	beq.n	801127e <dec_lock+0x3a>
 8011278:	89fb      	ldrh	r3, [r7, #14]
 801127a:	3b01      	subs	r3, #1
 801127c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801127e:	4a0e      	ldr	r2, [pc, #56]	; (80112b8 <dec_lock+0x74>)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	011b      	lsls	r3, r3, #4
 8011284:	4413      	add	r3, r2
 8011286:	330c      	adds	r3, #12
 8011288:	89fa      	ldrh	r2, [r7, #14]
 801128a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801128c:	89fb      	ldrh	r3, [r7, #14]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d105      	bne.n	801129e <dec_lock+0x5a>
 8011292:	4a09      	ldr	r2, [pc, #36]	; (80112b8 <dec_lock+0x74>)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	011b      	lsls	r3, r3, #4
 8011298:	4413      	add	r3, r2
 801129a:	2200      	movs	r2, #0
 801129c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801129e:	2300      	movs	r3, #0
 80112a0:	737b      	strb	r3, [r7, #13]
 80112a2:	e001      	b.n	80112a8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80112a4:	2302      	movs	r3, #2
 80112a6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80112a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3714      	adds	r7, #20
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr
 80112b6:	bf00      	nop
 80112b8:	20041308 	.word	0x20041308

080112bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80112bc:	b480      	push	{r7}
 80112be:	b085      	sub	sp, #20
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80112c4:	2300      	movs	r3, #0
 80112c6:	60fb      	str	r3, [r7, #12]
 80112c8:	e010      	b.n	80112ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80112ca:	4a0d      	ldr	r2, [pc, #52]	; (8011300 <clear_lock+0x44>)
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	011b      	lsls	r3, r3, #4
 80112d0:	4413      	add	r3, r2
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d105      	bne.n	80112e6 <clear_lock+0x2a>
 80112da:	4a09      	ldr	r2, [pc, #36]	; (8011300 <clear_lock+0x44>)
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	011b      	lsls	r3, r3, #4
 80112e0:	4413      	add	r3, r2
 80112e2:	2200      	movs	r2, #0
 80112e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	3301      	adds	r3, #1
 80112ea:	60fb      	str	r3, [r7, #12]
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2b01      	cmp	r3, #1
 80112f0:	d9eb      	bls.n	80112ca <clear_lock+0xe>
	}
}
 80112f2:	bf00      	nop
 80112f4:	3714      	adds	r7, #20
 80112f6:	46bd      	mov	sp, r7
 80112f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fc:	4770      	bx	lr
 80112fe:	bf00      	nop
 8011300:	20041308 	.word	0x20041308

08011304 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b086      	sub	sp, #24
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801130c:	2300      	movs	r3, #0
 801130e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	78db      	ldrb	r3, [r3, #3]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d034      	beq.n	8011382 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801131c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	7858      	ldrb	r0, [r3, #1]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011328:	2301      	movs	r3, #1
 801132a:	697a      	ldr	r2, [r7, #20]
 801132c:	f7ff fd40 	bl	8010db0 <disk_write>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d002      	beq.n	801133c <sync_window+0x38>
			res = FR_DISK_ERR;
 8011336:	2301      	movs	r3, #1
 8011338:	73fb      	strb	r3, [r7, #15]
 801133a:	e022      	b.n	8011382 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2200      	movs	r2, #0
 8011340:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011346:	697a      	ldr	r2, [r7, #20]
 8011348:	1ad2      	subs	r2, r2, r3
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6a1b      	ldr	r3, [r3, #32]
 801134e:	429a      	cmp	r2, r3
 8011350:	d217      	bcs.n	8011382 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	789b      	ldrb	r3, [r3, #2]
 8011356:	613b      	str	r3, [r7, #16]
 8011358:	e010      	b.n	801137c <sync_window+0x78>
					wsect += fs->fsize;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6a1b      	ldr	r3, [r3, #32]
 801135e:	697a      	ldr	r2, [r7, #20]
 8011360:	4413      	add	r3, r2
 8011362:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	7858      	ldrb	r0, [r3, #1]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801136e:	2301      	movs	r3, #1
 8011370:	697a      	ldr	r2, [r7, #20]
 8011372:	f7ff fd1d 	bl	8010db0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	3b01      	subs	r3, #1
 801137a:	613b      	str	r3, [r7, #16]
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	2b01      	cmp	r3, #1
 8011380:	d8eb      	bhi.n	801135a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011382:	7bfb      	ldrb	r3, [r7, #15]
}
 8011384:	4618      	mov	r0, r3
 8011386:	3718      	adds	r7, #24
 8011388:	46bd      	mov	sp, r7
 801138a:	bd80      	pop	{r7, pc}

0801138c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011396:	2300      	movs	r3, #0
 8011398:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801139e:	683a      	ldr	r2, [r7, #0]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d01b      	beq.n	80113dc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f7ff ffad 	bl	8011304 <sync_window>
 80113aa:	4603      	mov	r3, r0
 80113ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80113ae:	7bfb      	ldrb	r3, [r7, #15]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d113      	bne.n	80113dc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	7858      	ldrb	r0, [r3, #1]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80113be:	2301      	movs	r3, #1
 80113c0:	683a      	ldr	r2, [r7, #0]
 80113c2:	f7ff fcd5 	bl	8010d70 <disk_read>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d004      	beq.n	80113d6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80113cc:	f04f 33ff 	mov.w	r3, #4294967295
 80113d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80113d2:	2301      	movs	r3, #1
 80113d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	683a      	ldr	r2, [r7, #0]
 80113da:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80113dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3710      	adds	r7, #16
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
	...

080113e8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f7ff ff87 	bl	8011304 <sync_window>
 80113f6:	4603      	mov	r3, r0
 80113f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80113fa:	7bfb      	ldrb	r3, [r7, #15]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d159      	bne.n	80114b4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	2b03      	cmp	r3, #3
 8011406:	d149      	bne.n	801149c <sync_fs+0xb4>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	791b      	ldrb	r3, [r3, #4]
 801140c:	2b01      	cmp	r3, #1
 801140e:	d145      	bne.n	801149c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	899b      	ldrh	r3, [r3, #12]
 801141a:	461a      	mov	r2, r3
 801141c:	2100      	movs	r1, #0
 801141e:	f7ff fda8 	bl	8010f72 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	3338      	adds	r3, #56	; 0x38
 8011426:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801142a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801142e:	4618      	mov	r0, r3
 8011430:	f7ff fd37 	bl	8010ea2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	3338      	adds	r3, #56	; 0x38
 8011438:	4921      	ldr	r1, [pc, #132]	; (80114c0 <sync_fs+0xd8>)
 801143a:	4618      	mov	r0, r3
 801143c:	f7ff fd4c 	bl	8010ed8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	3338      	adds	r3, #56	; 0x38
 8011444:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011448:	491e      	ldr	r1, [pc, #120]	; (80114c4 <sync_fs+0xdc>)
 801144a:	4618      	mov	r0, r3
 801144c:	f7ff fd44 	bl	8010ed8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	3338      	adds	r3, #56	; 0x38
 8011454:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	695b      	ldr	r3, [r3, #20]
 801145c:	4619      	mov	r1, r3
 801145e:	4610      	mov	r0, r2
 8011460:	f7ff fd3a 	bl	8010ed8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	3338      	adds	r3, #56	; 0x38
 8011468:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	691b      	ldr	r3, [r3, #16]
 8011470:	4619      	mov	r1, r3
 8011472:	4610      	mov	r0, r2
 8011474:	f7ff fd30 	bl	8010ed8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801147c:	1c5a      	adds	r2, r3, #1
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	7858      	ldrb	r0, [r3, #1]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011490:	2301      	movs	r3, #1
 8011492:	f7ff fc8d 	bl	8010db0 <disk_write>
			fs->fsi_flag = 0;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2200      	movs	r2, #0
 801149a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	785b      	ldrb	r3, [r3, #1]
 80114a0:	2200      	movs	r2, #0
 80114a2:	2100      	movs	r1, #0
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7ff fca3 	bl	8010df0 <disk_ioctl>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d001      	beq.n	80114b4 <sync_fs+0xcc>
 80114b0:	2301      	movs	r3, #1
 80114b2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80114b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3710      	adds	r7, #16
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	41615252 	.word	0x41615252
 80114c4:	61417272 	.word	0x61417272

080114c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	3b02      	subs	r3, #2
 80114d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	69db      	ldr	r3, [r3, #28]
 80114dc:	3b02      	subs	r3, #2
 80114de:	683a      	ldr	r2, [r7, #0]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d301      	bcc.n	80114e8 <clust2sect+0x20>
 80114e4:	2300      	movs	r3, #0
 80114e6:	e008      	b.n	80114fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	895b      	ldrh	r3, [r3, #10]
 80114ec:	461a      	mov	r2, r3
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	fb03 f202 	mul.w	r2, r3, r2
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114f8:	4413      	add	r3, r2
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	370c      	adds	r7, #12
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr

08011506 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011506:	b580      	push	{r7, lr}
 8011508:	b086      	sub	sp, #24
 801150a:	af00      	add	r7, sp, #0
 801150c:	6078      	str	r0, [r7, #4]
 801150e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	2b01      	cmp	r3, #1
 801151a:	d904      	bls.n	8011526 <get_fat+0x20>
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	69db      	ldr	r3, [r3, #28]
 8011520:	683a      	ldr	r2, [r7, #0]
 8011522:	429a      	cmp	r2, r3
 8011524:	d302      	bcc.n	801152c <get_fat+0x26>
		val = 1;	/* Internal error */
 8011526:	2301      	movs	r3, #1
 8011528:	617b      	str	r3, [r7, #20]
 801152a:	e0b7      	b.n	801169c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801152c:	f04f 33ff 	mov.w	r3, #4294967295
 8011530:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	2b02      	cmp	r3, #2
 8011538:	d05a      	beq.n	80115f0 <get_fat+0xea>
 801153a:	2b03      	cmp	r3, #3
 801153c:	d07d      	beq.n	801163a <get_fat+0x134>
 801153e:	2b01      	cmp	r3, #1
 8011540:	f040 80a2 	bne.w	8011688 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	60fb      	str	r3, [r7, #12]
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	085b      	lsrs	r3, r3, #1
 801154c:	68fa      	ldr	r2, [r7, #12]
 801154e:	4413      	add	r3, r2
 8011550:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	899b      	ldrh	r3, [r3, #12]
 801155a:	4619      	mov	r1, r3
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011562:	4413      	add	r3, r2
 8011564:	4619      	mov	r1, r3
 8011566:	6938      	ldr	r0, [r7, #16]
 8011568:	f7ff ff10 	bl	801138c <move_window>
 801156c:	4603      	mov	r3, r0
 801156e:	2b00      	cmp	r3, #0
 8011570:	f040 808d 	bne.w	801168e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	1c5a      	adds	r2, r3, #1
 8011578:	60fa      	str	r2, [r7, #12]
 801157a:	693a      	ldr	r2, [r7, #16]
 801157c:	8992      	ldrh	r2, [r2, #12]
 801157e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011582:	fb02 f201 	mul.w	r2, r2, r1
 8011586:	1a9b      	subs	r3, r3, r2
 8011588:	693a      	ldr	r2, [r7, #16]
 801158a:	4413      	add	r3, r2
 801158c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011590:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	899b      	ldrh	r3, [r3, #12]
 801159a:	4619      	mov	r1, r3
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80115a2:	4413      	add	r3, r2
 80115a4:	4619      	mov	r1, r3
 80115a6:	6938      	ldr	r0, [r7, #16]
 80115a8:	f7ff fef0 	bl	801138c <move_window>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d16f      	bne.n	8011692 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80115b2:	693b      	ldr	r3, [r7, #16]
 80115b4:	899b      	ldrh	r3, [r3, #12]
 80115b6:	461a      	mov	r2, r3
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80115be:	fb02 f201 	mul.w	r2, r2, r1
 80115c2:	1a9b      	subs	r3, r3, r2
 80115c4:	693a      	ldr	r2, [r7, #16]
 80115c6:	4413      	add	r3, r2
 80115c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80115cc:	021b      	lsls	r3, r3, #8
 80115ce:	461a      	mov	r2, r3
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	4313      	orrs	r3, r2
 80115d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	f003 0301 	and.w	r3, r3, #1
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d002      	beq.n	80115e6 <get_fat+0xe0>
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	091b      	lsrs	r3, r3, #4
 80115e4:	e002      	b.n	80115ec <get_fat+0xe6>
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80115ec:	617b      	str	r3, [r7, #20]
			break;
 80115ee:	e055      	b.n	801169c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	899b      	ldrh	r3, [r3, #12]
 80115f8:	085b      	lsrs	r3, r3, #1
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	4619      	mov	r1, r3
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	fbb3 f3f1 	udiv	r3, r3, r1
 8011604:	4413      	add	r3, r2
 8011606:	4619      	mov	r1, r3
 8011608:	6938      	ldr	r0, [r7, #16]
 801160a:	f7ff febf 	bl	801138c <move_window>
 801160e:	4603      	mov	r3, r0
 8011610:	2b00      	cmp	r3, #0
 8011612:	d140      	bne.n	8011696 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	005b      	lsls	r3, r3, #1
 801161e:	693a      	ldr	r2, [r7, #16]
 8011620:	8992      	ldrh	r2, [r2, #12]
 8011622:	fbb3 f0f2 	udiv	r0, r3, r2
 8011626:	fb02 f200 	mul.w	r2, r2, r0
 801162a:	1a9b      	subs	r3, r3, r2
 801162c:	440b      	add	r3, r1
 801162e:	4618      	mov	r0, r3
 8011630:	f7ff fbfc 	bl	8010e2c <ld_word>
 8011634:	4603      	mov	r3, r0
 8011636:	617b      	str	r3, [r7, #20]
			break;
 8011638:	e030      	b.n	801169c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	899b      	ldrh	r3, [r3, #12]
 8011642:	089b      	lsrs	r3, r3, #2
 8011644:	b29b      	uxth	r3, r3
 8011646:	4619      	mov	r1, r3
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	fbb3 f3f1 	udiv	r3, r3, r1
 801164e:	4413      	add	r3, r2
 8011650:	4619      	mov	r1, r3
 8011652:	6938      	ldr	r0, [r7, #16]
 8011654:	f7ff fe9a 	bl	801138c <move_window>
 8011658:	4603      	mov	r3, r0
 801165a:	2b00      	cmp	r3, #0
 801165c:	d11d      	bne.n	801169a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	009b      	lsls	r3, r3, #2
 8011668:	693a      	ldr	r2, [r7, #16]
 801166a:	8992      	ldrh	r2, [r2, #12]
 801166c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011670:	fb02 f200 	mul.w	r2, r2, r0
 8011674:	1a9b      	subs	r3, r3, r2
 8011676:	440b      	add	r3, r1
 8011678:	4618      	mov	r0, r3
 801167a:	f7ff fbef 	bl	8010e5c <ld_dword>
 801167e:	4603      	mov	r3, r0
 8011680:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011684:	617b      	str	r3, [r7, #20]
			break;
 8011686:	e009      	b.n	801169c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011688:	2301      	movs	r3, #1
 801168a:	617b      	str	r3, [r7, #20]
 801168c:	e006      	b.n	801169c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801168e:	bf00      	nop
 8011690:	e004      	b.n	801169c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011692:	bf00      	nop
 8011694:	e002      	b.n	801169c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011696:	bf00      	nop
 8011698:	e000      	b.n	801169c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801169a:	bf00      	nop
		}
	}

	return val;
 801169c:	697b      	ldr	r3, [r7, #20]
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3718      	adds	r7, #24
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}

080116a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80116a6:	b590      	push	{r4, r7, lr}
 80116a8:	b089      	sub	sp, #36	; 0x24
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	60f8      	str	r0, [r7, #12]
 80116ae:	60b9      	str	r1, [r7, #8]
 80116b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80116b2:	2302      	movs	r3, #2
 80116b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	f240 8106 	bls.w	80118ca <put_fat+0x224>
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	69db      	ldr	r3, [r3, #28]
 80116c2:	68ba      	ldr	r2, [r7, #8]
 80116c4:	429a      	cmp	r2, r3
 80116c6:	f080 8100 	bcs.w	80118ca <put_fat+0x224>
		switch (fs->fs_type) {
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	781b      	ldrb	r3, [r3, #0]
 80116ce:	2b02      	cmp	r3, #2
 80116d0:	f000 8088 	beq.w	80117e4 <put_fat+0x13e>
 80116d4:	2b03      	cmp	r3, #3
 80116d6:	f000 80b0 	beq.w	801183a <put_fat+0x194>
 80116da:	2b01      	cmp	r3, #1
 80116dc:	f040 80f5 	bne.w	80118ca <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	61bb      	str	r3, [r7, #24]
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	085b      	lsrs	r3, r3, #1
 80116e8:	69ba      	ldr	r2, [r7, #24]
 80116ea:	4413      	add	r3, r2
 80116ec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	899b      	ldrh	r3, [r3, #12]
 80116f6:	4619      	mov	r1, r3
 80116f8:	69bb      	ldr	r3, [r7, #24]
 80116fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80116fe:	4413      	add	r3, r2
 8011700:	4619      	mov	r1, r3
 8011702:	68f8      	ldr	r0, [r7, #12]
 8011704:	f7ff fe42 	bl	801138c <move_window>
 8011708:	4603      	mov	r3, r0
 801170a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801170c:	7ffb      	ldrb	r3, [r7, #31]
 801170e:	2b00      	cmp	r3, #0
 8011710:	f040 80d4 	bne.w	80118bc <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801171a:	69bb      	ldr	r3, [r7, #24]
 801171c:	1c5a      	adds	r2, r3, #1
 801171e:	61ba      	str	r2, [r7, #24]
 8011720:	68fa      	ldr	r2, [r7, #12]
 8011722:	8992      	ldrh	r2, [r2, #12]
 8011724:	fbb3 f0f2 	udiv	r0, r3, r2
 8011728:	fb02 f200 	mul.w	r2, r2, r0
 801172c:	1a9b      	subs	r3, r3, r2
 801172e:	440b      	add	r3, r1
 8011730:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	f003 0301 	and.w	r3, r3, #1
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00d      	beq.n	8011758 <put_fat+0xb2>
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	b25b      	sxtb	r3, r3
 8011742:	f003 030f 	and.w	r3, r3, #15
 8011746:	b25a      	sxtb	r2, r3
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	b2db      	uxtb	r3, r3
 801174c:	011b      	lsls	r3, r3, #4
 801174e:	b25b      	sxtb	r3, r3
 8011750:	4313      	orrs	r3, r2
 8011752:	b25b      	sxtb	r3, r3
 8011754:	b2db      	uxtb	r3, r3
 8011756:	e001      	b.n	801175c <put_fat+0xb6>
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	b2db      	uxtb	r3, r3
 801175c:	697a      	ldr	r2, [r7, #20]
 801175e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2201      	movs	r2, #1
 8011764:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	899b      	ldrh	r3, [r3, #12]
 801176e:	4619      	mov	r1, r3
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	fbb3 f3f1 	udiv	r3, r3, r1
 8011776:	4413      	add	r3, r2
 8011778:	4619      	mov	r1, r3
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	f7ff fe06 	bl	801138c <move_window>
 8011780:	4603      	mov	r3, r0
 8011782:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011784:	7ffb      	ldrb	r3, [r7, #31]
 8011786:	2b00      	cmp	r3, #0
 8011788:	f040 809a 	bne.w	80118c0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	899b      	ldrh	r3, [r3, #12]
 8011796:	461a      	mov	r2, r3
 8011798:	69bb      	ldr	r3, [r7, #24]
 801179a:	fbb3 f0f2 	udiv	r0, r3, r2
 801179e:	fb02 f200 	mul.w	r2, r2, r0
 80117a2:	1a9b      	subs	r3, r3, r2
 80117a4:	440b      	add	r3, r1
 80117a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	f003 0301 	and.w	r3, r3, #1
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d003      	beq.n	80117ba <put_fat+0x114>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	091b      	lsrs	r3, r3, #4
 80117b6:	b2db      	uxtb	r3, r3
 80117b8:	e00e      	b.n	80117d8 <put_fat+0x132>
 80117ba:	697b      	ldr	r3, [r7, #20]
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	b25b      	sxtb	r3, r3
 80117c0:	f023 030f 	bic.w	r3, r3, #15
 80117c4:	b25a      	sxtb	r2, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	0a1b      	lsrs	r3, r3, #8
 80117ca:	b25b      	sxtb	r3, r3
 80117cc:	f003 030f 	and.w	r3, r3, #15
 80117d0:	b25b      	sxtb	r3, r3
 80117d2:	4313      	orrs	r3, r2
 80117d4:	b25b      	sxtb	r3, r3
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	697a      	ldr	r2, [r7, #20]
 80117da:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2201      	movs	r2, #1
 80117e0:	70da      	strb	r2, [r3, #3]
			break;
 80117e2:	e072      	b.n	80118ca <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	899b      	ldrh	r3, [r3, #12]
 80117ec:	085b      	lsrs	r3, r3, #1
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	4619      	mov	r1, r3
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80117f8:	4413      	add	r3, r2
 80117fa:	4619      	mov	r1, r3
 80117fc:	68f8      	ldr	r0, [r7, #12]
 80117fe:	f7ff fdc5 	bl	801138c <move_window>
 8011802:	4603      	mov	r3, r0
 8011804:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011806:	7ffb      	ldrb	r3, [r7, #31]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d15b      	bne.n	80118c4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	005b      	lsls	r3, r3, #1
 8011816:	68fa      	ldr	r2, [r7, #12]
 8011818:	8992      	ldrh	r2, [r2, #12]
 801181a:	fbb3 f0f2 	udiv	r0, r3, r2
 801181e:	fb02 f200 	mul.w	r2, r2, r0
 8011822:	1a9b      	subs	r3, r3, r2
 8011824:	440b      	add	r3, r1
 8011826:	687a      	ldr	r2, [r7, #4]
 8011828:	b292      	uxth	r2, r2
 801182a:	4611      	mov	r1, r2
 801182c:	4618      	mov	r0, r3
 801182e:	f7ff fb38 	bl	8010ea2 <st_word>
			fs->wflag = 1;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2201      	movs	r2, #1
 8011836:	70da      	strb	r2, [r3, #3]
			break;
 8011838:	e047      	b.n	80118ca <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	899b      	ldrh	r3, [r3, #12]
 8011842:	089b      	lsrs	r3, r3, #2
 8011844:	b29b      	uxth	r3, r3
 8011846:	4619      	mov	r1, r3
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	fbb3 f3f1 	udiv	r3, r3, r1
 801184e:	4413      	add	r3, r2
 8011850:	4619      	mov	r1, r3
 8011852:	68f8      	ldr	r0, [r7, #12]
 8011854:	f7ff fd9a 	bl	801138c <move_window>
 8011858:	4603      	mov	r3, r0
 801185a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801185c:	7ffb      	ldrb	r3, [r7, #31]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d132      	bne.n	80118c8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	68fa      	ldr	r2, [r7, #12]
 8011874:	8992      	ldrh	r2, [r2, #12]
 8011876:	fbb3 f0f2 	udiv	r0, r3, r2
 801187a:	fb02 f200 	mul.w	r2, r2, r0
 801187e:	1a9b      	subs	r3, r3, r2
 8011880:	440b      	add	r3, r1
 8011882:	4618      	mov	r0, r3
 8011884:	f7ff faea 	bl	8010e5c <ld_dword>
 8011888:	4603      	mov	r3, r0
 801188a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801188e:	4323      	orrs	r3, r4
 8011890:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	009b      	lsls	r3, r3, #2
 801189c:	68fa      	ldr	r2, [r7, #12]
 801189e:	8992      	ldrh	r2, [r2, #12]
 80118a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80118a4:	fb02 f200 	mul.w	r2, r2, r0
 80118a8:	1a9b      	subs	r3, r3, r2
 80118aa:	440b      	add	r3, r1
 80118ac:	6879      	ldr	r1, [r7, #4]
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7ff fb12 	bl	8010ed8 <st_dword>
			fs->wflag = 1;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2201      	movs	r2, #1
 80118b8:	70da      	strb	r2, [r3, #3]
			break;
 80118ba:	e006      	b.n	80118ca <put_fat+0x224>
			if (res != FR_OK) break;
 80118bc:	bf00      	nop
 80118be:	e004      	b.n	80118ca <put_fat+0x224>
			if (res != FR_OK) break;
 80118c0:	bf00      	nop
 80118c2:	e002      	b.n	80118ca <put_fat+0x224>
			if (res != FR_OK) break;
 80118c4:	bf00      	nop
 80118c6:	e000      	b.n	80118ca <put_fat+0x224>
			if (res != FR_OK) break;
 80118c8:	bf00      	nop
		}
	}
	return res;
 80118ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3724      	adds	r7, #36	; 0x24
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd90      	pop	{r4, r7, pc}

080118d4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b088      	sub	sp, #32
 80118d8:	af00      	add	r7, sp, #0
 80118da:	60f8      	str	r0, [r7, #12]
 80118dc:	60b9      	str	r1, [r7, #8]
 80118de:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80118e0:	2300      	movs	r3, #0
 80118e2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d904      	bls.n	80118fa <remove_chain+0x26>
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	69db      	ldr	r3, [r3, #28]
 80118f4:	68ba      	ldr	r2, [r7, #8]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d301      	bcc.n	80118fe <remove_chain+0x2a>
 80118fa:	2302      	movs	r3, #2
 80118fc:	e04b      	b.n	8011996 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d00c      	beq.n	801191e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011904:	f04f 32ff 	mov.w	r2, #4294967295
 8011908:	6879      	ldr	r1, [r7, #4]
 801190a:	69b8      	ldr	r0, [r7, #24]
 801190c:	f7ff fecb 	bl	80116a6 <put_fat>
 8011910:	4603      	mov	r3, r0
 8011912:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011914:	7ffb      	ldrb	r3, [r7, #31]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d001      	beq.n	801191e <remove_chain+0x4a>
 801191a:	7ffb      	ldrb	r3, [r7, #31]
 801191c:	e03b      	b.n	8011996 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801191e:	68b9      	ldr	r1, [r7, #8]
 8011920:	68f8      	ldr	r0, [r7, #12]
 8011922:	f7ff fdf0 	bl	8011506 <get_fat>
 8011926:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d031      	beq.n	8011992 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	2b01      	cmp	r3, #1
 8011932:	d101      	bne.n	8011938 <remove_chain+0x64>
 8011934:	2302      	movs	r3, #2
 8011936:	e02e      	b.n	8011996 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011938:	697b      	ldr	r3, [r7, #20]
 801193a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801193e:	d101      	bne.n	8011944 <remove_chain+0x70>
 8011940:	2301      	movs	r3, #1
 8011942:	e028      	b.n	8011996 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011944:	2200      	movs	r2, #0
 8011946:	68b9      	ldr	r1, [r7, #8]
 8011948:	69b8      	ldr	r0, [r7, #24]
 801194a:	f7ff feac 	bl	80116a6 <put_fat>
 801194e:	4603      	mov	r3, r0
 8011950:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011952:	7ffb      	ldrb	r3, [r7, #31]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d001      	beq.n	801195c <remove_chain+0x88>
 8011958:	7ffb      	ldrb	r3, [r7, #31]
 801195a:	e01c      	b.n	8011996 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801195c:	69bb      	ldr	r3, [r7, #24]
 801195e:	695a      	ldr	r2, [r3, #20]
 8011960:	69bb      	ldr	r3, [r7, #24]
 8011962:	69db      	ldr	r3, [r3, #28]
 8011964:	3b02      	subs	r3, #2
 8011966:	429a      	cmp	r2, r3
 8011968:	d20b      	bcs.n	8011982 <remove_chain+0xae>
			fs->free_clst++;
 801196a:	69bb      	ldr	r3, [r7, #24]
 801196c:	695b      	ldr	r3, [r3, #20]
 801196e:	1c5a      	adds	r2, r3, #1
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011974:	69bb      	ldr	r3, [r7, #24]
 8011976:	791b      	ldrb	r3, [r3, #4]
 8011978:	f043 0301 	orr.w	r3, r3, #1
 801197c:	b2da      	uxtb	r2, r3
 801197e:	69bb      	ldr	r3, [r7, #24]
 8011980:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011986:	69bb      	ldr	r3, [r7, #24]
 8011988:	69db      	ldr	r3, [r3, #28]
 801198a:	68ba      	ldr	r2, [r7, #8]
 801198c:	429a      	cmp	r2, r3
 801198e:	d3c6      	bcc.n	801191e <remove_chain+0x4a>
 8011990:	e000      	b.n	8011994 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011992:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	3720      	adds	r7, #32
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b088      	sub	sp, #32
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
 80119a6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d10d      	bne.n	80119d0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	691b      	ldr	r3, [r3, #16]
 80119b8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80119ba:	69bb      	ldr	r3, [r7, #24]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d004      	beq.n	80119ca <create_chain+0x2c>
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	69db      	ldr	r3, [r3, #28]
 80119c4:	69ba      	ldr	r2, [r7, #24]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d31b      	bcc.n	8011a02 <create_chain+0x64>
 80119ca:	2301      	movs	r3, #1
 80119cc:	61bb      	str	r3, [r7, #24]
 80119ce:	e018      	b.n	8011a02 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80119d0:	6839      	ldr	r1, [r7, #0]
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f7ff fd97 	bl	8011506 <get_fat>
 80119d8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2b01      	cmp	r3, #1
 80119de:	d801      	bhi.n	80119e4 <create_chain+0x46>
 80119e0:	2301      	movs	r3, #1
 80119e2:	e070      	b.n	8011ac6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119ea:	d101      	bne.n	80119f0 <create_chain+0x52>
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	e06a      	b.n	8011ac6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	69db      	ldr	r3, [r3, #28]
 80119f4:	68fa      	ldr	r2, [r7, #12]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d201      	bcs.n	80119fe <create_chain+0x60>
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	e063      	b.n	8011ac6 <create_chain+0x128>
		scl = clst;
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011a02:	69bb      	ldr	r3, [r7, #24]
 8011a04:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011a06:	69fb      	ldr	r3, [r7, #28]
 8011a08:	3301      	adds	r3, #1
 8011a0a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	69db      	ldr	r3, [r3, #28]
 8011a10:	69fa      	ldr	r2, [r7, #28]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d307      	bcc.n	8011a26 <create_chain+0x88>
				ncl = 2;
 8011a16:	2302      	movs	r3, #2
 8011a18:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011a1a:	69fa      	ldr	r2, [r7, #28]
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d901      	bls.n	8011a26 <create_chain+0x88>
 8011a22:	2300      	movs	r3, #0
 8011a24:	e04f      	b.n	8011ac6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011a26:	69f9      	ldr	r1, [r7, #28]
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7ff fd6c 	bl	8011506 <get_fat>
 8011a2e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d00e      	beq.n	8011a54 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2b01      	cmp	r3, #1
 8011a3a:	d003      	beq.n	8011a44 <create_chain+0xa6>
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a42:	d101      	bne.n	8011a48 <create_chain+0xaa>
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	e03e      	b.n	8011ac6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011a48:	69fa      	ldr	r2, [r7, #28]
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	429a      	cmp	r2, r3
 8011a4e:	d1da      	bne.n	8011a06 <create_chain+0x68>
 8011a50:	2300      	movs	r3, #0
 8011a52:	e038      	b.n	8011ac6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011a54:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011a56:	f04f 32ff 	mov.w	r2, #4294967295
 8011a5a:	69f9      	ldr	r1, [r7, #28]
 8011a5c:	6938      	ldr	r0, [r7, #16]
 8011a5e:	f7ff fe22 	bl	80116a6 <put_fat>
 8011a62:	4603      	mov	r3, r0
 8011a64:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011a66:	7dfb      	ldrb	r3, [r7, #23]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d109      	bne.n	8011a80 <create_chain+0xe2>
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d006      	beq.n	8011a80 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011a72:	69fa      	ldr	r2, [r7, #28]
 8011a74:	6839      	ldr	r1, [r7, #0]
 8011a76:	6938      	ldr	r0, [r7, #16]
 8011a78:	f7ff fe15 	bl	80116a6 <put_fat>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011a80:	7dfb      	ldrb	r3, [r7, #23]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d116      	bne.n	8011ab4 <create_chain+0x116>
		fs->last_clst = ncl;
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	69fa      	ldr	r2, [r7, #28]
 8011a8a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	695a      	ldr	r2, [r3, #20]
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	69db      	ldr	r3, [r3, #28]
 8011a94:	3b02      	subs	r3, #2
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d804      	bhi.n	8011aa4 <create_chain+0x106>
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	695b      	ldr	r3, [r3, #20]
 8011a9e:	1e5a      	subs	r2, r3, #1
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	791b      	ldrb	r3, [r3, #4]
 8011aa8:	f043 0301 	orr.w	r3, r3, #1
 8011aac:	b2da      	uxtb	r2, r3
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	711a      	strb	r2, [r3, #4]
 8011ab2:	e007      	b.n	8011ac4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011ab4:	7dfb      	ldrb	r3, [r7, #23]
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d102      	bne.n	8011ac0 <create_chain+0x122>
 8011aba:	f04f 33ff 	mov.w	r3, #4294967295
 8011abe:	e000      	b.n	8011ac2 <create_chain+0x124>
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011ac4:	69fb      	ldr	r3, [r7, #28]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3720      	adds	r7, #32
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}

08011ace <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011ace:	b480      	push	{r7}
 8011ad0:	b087      	sub	sp, #28
 8011ad2:	af00      	add	r7, sp, #0
 8011ad4:	6078      	str	r0, [r7, #4]
 8011ad6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ae2:	3304      	adds	r3, #4
 8011ae4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	899b      	ldrh	r3, [r3, #12]
 8011aea:	461a      	mov	r2, r3
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	fbb3 f3f2 	udiv	r3, r3, r2
 8011af2:	68fa      	ldr	r2, [r7, #12]
 8011af4:	8952      	ldrh	r2, [r2, #10]
 8011af6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011afa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	1d1a      	adds	r2, r3, #4
 8011b00:	613a      	str	r2, [r7, #16]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d101      	bne.n	8011b10 <clmt_clust+0x42>
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	e010      	b.n	8011b32 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011b10:	697a      	ldr	r2, [r7, #20]
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d307      	bcc.n	8011b28 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011b18:	697a      	ldr	r2, [r7, #20]
 8011b1a:	68bb      	ldr	r3, [r7, #8]
 8011b1c:	1ad3      	subs	r3, r2, r3
 8011b1e:	617b      	str	r3, [r7, #20]
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	3304      	adds	r3, #4
 8011b24:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011b26:	e7e9      	b.n	8011afc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011b28:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	4413      	add	r3, r2
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	371c      	adds	r7, #28
 8011b36:	46bd      	mov	sp, r7
 8011b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3c:	4770      	bx	lr

08011b3e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011b3e:	b580      	push	{r7, lr}
 8011b40:	b086      	sub	sp, #24
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
 8011b46:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011b54:	d204      	bcs.n	8011b60 <dir_sdi+0x22>
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	f003 031f 	and.w	r3, r3, #31
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d001      	beq.n	8011b64 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011b60:	2302      	movs	r3, #2
 8011b62:	e071      	b.n	8011c48 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	683a      	ldr	r2, [r7, #0]
 8011b68:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	689b      	ldr	r3, [r3, #8]
 8011b6e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d106      	bne.n	8011b84 <dir_sdi+0x46>
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	2b02      	cmp	r3, #2
 8011b7c:	d902      	bls.n	8011b84 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b82:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d10c      	bne.n	8011ba4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	095b      	lsrs	r3, r3, #5
 8011b8e:	693a      	ldr	r2, [r7, #16]
 8011b90:	8912      	ldrh	r2, [r2, #8]
 8011b92:	4293      	cmp	r3, r2
 8011b94:	d301      	bcc.n	8011b9a <dir_sdi+0x5c>
 8011b96:	2302      	movs	r3, #2
 8011b98:	e056      	b.n	8011c48 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	61da      	str	r2, [r3, #28]
 8011ba2:	e02d      	b.n	8011c00 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	895b      	ldrh	r3, [r3, #10]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	899b      	ldrh	r3, [r3, #12]
 8011bae:	fb03 f302 	mul.w	r3, r3, r2
 8011bb2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011bb4:	e019      	b.n	8011bea <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6979      	ldr	r1, [r7, #20]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7ff fca3 	bl	8011506 <get_fat>
 8011bc0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011bc2:	697b      	ldr	r3, [r7, #20]
 8011bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bc8:	d101      	bne.n	8011bce <dir_sdi+0x90>
 8011bca:	2301      	movs	r3, #1
 8011bcc:	e03c      	b.n	8011c48 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	2b01      	cmp	r3, #1
 8011bd2:	d904      	bls.n	8011bde <dir_sdi+0xa0>
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	69db      	ldr	r3, [r3, #28]
 8011bd8:	697a      	ldr	r2, [r7, #20]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d301      	bcc.n	8011be2 <dir_sdi+0xa4>
 8011bde:	2302      	movs	r3, #2
 8011be0:	e032      	b.n	8011c48 <dir_sdi+0x10a>
			ofs -= csz;
 8011be2:	683a      	ldr	r2, [r7, #0]
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	1ad3      	subs	r3, r2, r3
 8011be8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011bea:	683a      	ldr	r2, [r7, #0]
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	429a      	cmp	r2, r3
 8011bf0:	d2e1      	bcs.n	8011bb6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011bf2:	6979      	ldr	r1, [r7, #20]
 8011bf4:	6938      	ldr	r0, [r7, #16]
 8011bf6:	f7ff fc67 	bl	80114c8 <clust2sect>
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	697a      	ldr	r2, [r7, #20]
 8011c04:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	69db      	ldr	r3, [r3, #28]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d101      	bne.n	8011c12 <dir_sdi+0xd4>
 8011c0e:	2302      	movs	r3, #2
 8011c10:	e01a      	b.n	8011c48 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	69da      	ldr	r2, [r3, #28]
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	899b      	ldrh	r3, [r3, #12]
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c22:	441a      	add	r2, r3
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	899b      	ldrh	r3, [r3, #12]
 8011c32:	461a      	mov	r2, r3
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c3a:	fb02 f200 	mul.w	r2, r2, r0
 8011c3e:	1a9b      	subs	r3, r3, r2
 8011c40:	18ca      	adds	r2, r1, r3
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011c46:	2300      	movs	r3, #0
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3718      	adds	r7, #24
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b086      	sub	sp, #24
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	695b      	ldr	r3, [r3, #20]
 8011c64:	3320      	adds	r3, #32
 8011c66:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	69db      	ldr	r3, [r3, #28]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d003      	beq.n	8011c78 <dir_next+0x28>
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c76:	d301      	bcc.n	8011c7c <dir_next+0x2c>
 8011c78:	2304      	movs	r3, #4
 8011c7a:	e0bb      	b.n	8011df4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	899b      	ldrh	r3, [r3, #12]
 8011c80:	461a      	mov	r2, r3
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c88:	fb02 f201 	mul.w	r2, r2, r1
 8011c8c:	1a9b      	subs	r3, r3, r2
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	f040 809d 	bne.w	8011dce <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	69db      	ldr	r3, [r3, #28]
 8011c98:	1c5a      	adds	r2, r3, #1
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	699b      	ldr	r3, [r3, #24]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d10b      	bne.n	8011cbe <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	095b      	lsrs	r3, r3, #5
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	8912      	ldrh	r2, [r2, #8]
 8011cae:	4293      	cmp	r3, r2
 8011cb0:	f0c0 808d 	bcc.w	8011dce <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	61da      	str	r2, [r3, #28]
 8011cba:	2304      	movs	r3, #4
 8011cbc:	e09a      	b.n	8011df4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	899b      	ldrh	r3, [r3, #12]
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cca:	68fa      	ldr	r2, [r7, #12]
 8011ccc:	8952      	ldrh	r2, [r2, #10]
 8011cce:	3a01      	subs	r2, #1
 8011cd0:	4013      	ands	r3, r2
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d17b      	bne.n	8011dce <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	699b      	ldr	r3, [r3, #24]
 8011cdc:	4619      	mov	r1, r3
 8011cde:	4610      	mov	r0, r2
 8011ce0:	f7ff fc11 	bl	8011506 <get_fat>
 8011ce4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	2b01      	cmp	r3, #1
 8011cea:	d801      	bhi.n	8011cf0 <dir_next+0xa0>
 8011cec:	2302      	movs	r3, #2
 8011cee:	e081      	b.n	8011df4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cf6:	d101      	bne.n	8011cfc <dir_next+0xac>
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	e07b      	b.n	8011df4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	69db      	ldr	r3, [r3, #28]
 8011d00:	697a      	ldr	r2, [r7, #20]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d359      	bcc.n	8011dba <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d104      	bne.n	8011d16 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	61da      	str	r2, [r3, #28]
 8011d12:	2304      	movs	r3, #4
 8011d14:	e06e      	b.n	8011df4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011d16:	687a      	ldr	r2, [r7, #4]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	699b      	ldr	r3, [r3, #24]
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	4610      	mov	r0, r2
 8011d20:	f7ff fe3d 	bl	801199e <create_chain>
 8011d24:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d101      	bne.n	8011d30 <dir_next+0xe0>
 8011d2c:	2307      	movs	r3, #7
 8011d2e:	e061      	b.n	8011df4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011d30:	697b      	ldr	r3, [r7, #20]
 8011d32:	2b01      	cmp	r3, #1
 8011d34:	d101      	bne.n	8011d3a <dir_next+0xea>
 8011d36:	2302      	movs	r3, #2
 8011d38:	e05c      	b.n	8011df4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d40:	d101      	bne.n	8011d46 <dir_next+0xf6>
 8011d42:	2301      	movs	r3, #1
 8011d44:	e056      	b.n	8011df4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011d46:	68f8      	ldr	r0, [r7, #12]
 8011d48:	f7ff fadc 	bl	8011304 <sync_window>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d001      	beq.n	8011d56 <dir_next+0x106>
 8011d52:	2301      	movs	r3, #1
 8011d54:	e04e      	b.n	8011df4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	899b      	ldrh	r3, [r3, #12]
 8011d60:	461a      	mov	r2, r3
 8011d62:	2100      	movs	r1, #0
 8011d64:	f7ff f905 	bl	8010f72 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011d68:	2300      	movs	r3, #0
 8011d6a:	613b      	str	r3, [r7, #16]
 8011d6c:	6979      	ldr	r1, [r7, #20]
 8011d6e:	68f8      	ldr	r0, [r7, #12]
 8011d70:	f7ff fbaa 	bl	80114c8 <clust2sect>
 8011d74:	4602      	mov	r2, r0
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	635a      	str	r2, [r3, #52]	; 0x34
 8011d7a:	e012      	b.n	8011da2 <dir_next+0x152>
						fs->wflag = 1;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2201      	movs	r2, #1
 8011d80:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011d82:	68f8      	ldr	r0, [r7, #12]
 8011d84:	f7ff fabe 	bl	8011304 <sync_window>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d001      	beq.n	8011d92 <dir_next+0x142>
 8011d8e:	2301      	movs	r3, #1
 8011d90:	e030      	b.n	8011df4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011d92:	693b      	ldr	r3, [r7, #16]
 8011d94:	3301      	adds	r3, #1
 8011d96:	613b      	str	r3, [r7, #16]
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d9c:	1c5a      	adds	r2, r3, #1
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	635a      	str	r2, [r3, #52]	; 0x34
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	895b      	ldrh	r3, [r3, #10]
 8011da6:	461a      	mov	r2, r3
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	4293      	cmp	r3, r2
 8011dac:	d3e6      	bcc.n	8011d7c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	1ad2      	subs	r2, r2, r3
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	697a      	ldr	r2, [r7, #20]
 8011dbe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011dc0:	6979      	ldr	r1, [r7, #20]
 8011dc2:	68f8      	ldr	r0, [r7, #12]
 8011dc4:	f7ff fb80 	bl	80114c8 <clust2sect>
 8011dc8:	4602      	mov	r2, r0
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	68ba      	ldr	r2, [r7, #8]
 8011dd2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	899b      	ldrh	r3, [r3, #12]
 8011dde:	461a      	mov	r2, r3
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	fbb3 f0f2 	udiv	r0, r3, r2
 8011de6:	fb02 f200 	mul.w	r2, r2, r0
 8011dea:	1a9b      	subs	r3, r3, r2
 8011dec:	18ca      	adds	r2, r1, r3
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011df2:	2300      	movs	r3, #0
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3718      	adds	r7, #24
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b086      	sub	sp, #24
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011e0c:	2100      	movs	r1, #0
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f7ff fe95 	bl	8011b3e <dir_sdi>
 8011e14:	4603      	mov	r3, r0
 8011e16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011e18:	7dfb      	ldrb	r3, [r7, #23]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d12b      	bne.n	8011e76 <dir_alloc+0x7a>
		n = 0;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	69db      	ldr	r3, [r3, #28]
 8011e26:	4619      	mov	r1, r3
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f7ff faaf 	bl	801138c <move_window>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011e32:	7dfb      	ldrb	r3, [r7, #23]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d11d      	bne.n	8011e74 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6a1b      	ldr	r3, [r3, #32]
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	2be5      	cmp	r3, #229	; 0xe5
 8011e40:	d004      	beq.n	8011e4c <dir_alloc+0x50>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6a1b      	ldr	r3, [r3, #32]
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d107      	bne.n	8011e5c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	3301      	adds	r3, #1
 8011e50:	613b      	str	r3, [r7, #16]
 8011e52:	693a      	ldr	r2, [r7, #16]
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d102      	bne.n	8011e60 <dir_alloc+0x64>
 8011e5a:	e00c      	b.n	8011e76 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011e60:	2101      	movs	r1, #1
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f7ff fef4 	bl	8011c50 <dir_next>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011e6c:	7dfb      	ldrb	r3, [r7, #23]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d0d7      	beq.n	8011e22 <dir_alloc+0x26>
 8011e72:	e000      	b.n	8011e76 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011e74:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011e76:	7dfb      	ldrb	r3, [r7, #23]
 8011e78:	2b04      	cmp	r3, #4
 8011e7a:	d101      	bne.n	8011e80 <dir_alloc+0x84>
 8011e7c:	2307      	movs	r3, #7
 8011e7e:	75fb      	strb	r3, [r7, #23]
	return res;
 8011e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3718      	adds	r7, #24
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}

08011e8a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011e8a:	b580      	push	{r7, lr}
 8011e8c:	b084      	sub	sp, #16
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
 8011e92:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	331a      	adds	r3, #26
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fe ffc7 	bl	8010e2c <ld_word>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	2b03      	cmp	r3, #3
 8011ea8:	d109      	bne.n	8011ebe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	3314      	adds	r3, #20
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7fe ffbc 	bl	8010e2c <ld_word>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	041b      	lsls	r3, r3, #16
 8011eb8:	68fa      	ldr	r2, [r7, #12]
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3710      	adds	r7, #16
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}

08011ec8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	60f8      	str	r0, [r7, #12]
 8011ed0:	60b9      	str	r1, [r7, #8]
 8011ed2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	331a      	adds	r3, #26
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	b292      	uxth	r2, r2
 8011edc:	4611      	mov	r1, r2
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7fe ffdf 	bl	8010ea2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	2b03      	cmp	r3, #3
 8011eea:	d109      	bne.n	8011f00 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	f103 0214 	add.w	r2, r3, #20
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	0c1b      	lsrs	r3, r3, #16
 8011ef6:	b29b      	uxth	r3, r3
 8011ef8:	4619      	mov	r1, r3
 8011efa:	4610      	mov	r0, r2
 8011efc:	f7fe ffd1 	bl	8010ea2 <st_word>
	}
}
 8011f00:	bf00      	nop
 8011f02:	3710      	adds	r7, #16
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}

08011f08 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b086      	sub	sp, #24
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011f12:	2304      	movs	r3, #4
 8011f14:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011f1c:	e03c      	b.n	8011f98 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	69db      	ldr	r3, [r3, #28]
 8011f22:	4619      	mov	r1, r3
 8011f24:	6938      	ldr	r0, [r7, #16]
 8011f26:	f7ff fa31 	bl	801138c <move_window>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f2e:	7dfb      	ldrb	r3, [r7, #23]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d136      	bne.n	8011fa2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6a1b      	ldr	r3, [r3, #32]
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011f3c:	7bfb      	ldrb	r3, [r7, #15]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d102      	bne.n	8011f48 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011f42:	2304      	movs	r3, #4
 8011f44:	75fb      	strb	r3, [r7, #23]
 8011f46:	e031      	b.n	8011fac <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6a1b      	ldr	r3, [r3, #32]
 8011f4c:	330b      	adds	r3, #11
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f54:	73bb      	strb	r3, [r7, #14]
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	7bba      	ldrb	r2, [r7, #14]
 8011f5a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011f5c:	7bfb      	ldrb	r3, [r7, #15]
 8011f5e:	2be5      	cmp	r3, #229	; 0xe5
 8011f60:	d011      	beq.n	8011f86 <dir_read+0x7e>
 8011f62:	7bfb      	ldrb	r3, [r7, #15]
 8011f64:	2b2e      	cmp	r3, #46	; 0x2e
 8011f66:	d00e      	beq.n	8011f86 <dir_read+0x7e>
 8011f68:	7bbb      	ldrb	r3, [r7, #14]
 8011f6a:	2b0f      	cmp	r3, #15
 8011f6c:	d00b      	beq.n	8011f86 <dir_read+0x7e>
 8011f6e:	7bbb      	ldrb	r3, [r7, #14]
 8011f70:	f023 0320 	bic.w	r3, r3, #32
 8011f74:	2b08      	cmp	r3, #8
 8011f76:	bf0c      	ite	eq
 8011f78:	2301      	moveq	r3, #1
 8011f7a:	2300      	movne	r3, #0
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	461a      	mov	r2, r3
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	4293      	cmp	r3, r2
 8011f84:	d00f      	beq.n	8011fa6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011f86:	2100      	movs	r1, #0
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f7ff fe61 	bl	8011c50 <dir_next>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f92:	7dfb      	ldrb	r3, [r7, #23]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d108      	bne.n	8011faa <dir_read+0xa2>
	while (dp->sect) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	69db      	ldr	r3, [r3, #28]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d1be      	bne.n	8011f1e <dir_read+0x16>
 8011fa0:	e004      	b.n	8011fac <dir_read+0xa4>
		if (res != FR_OK) break;
 8011fa2:	bf00      	nop
 8011fa4:	e002      	b.n	8011fac <dir_read+0xa4>
				break;
 8011fa6:	bf00      	nop
 8011fa8:	e000      	b.n	8011fac <dir_read+0xa4>
		if (res != FR_OK) break;
 8011faa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011fac:	7dfb      	ldrb	r3, [r7, #23]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d002      	beq.n	8011fb8 <dir_read+0xb0>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	61da      	str	r2, [r3, #28]
	return res;
 8011fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3718      	adds	r7, #24
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b086      	sub	sp, #24
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011fd0:	2100      	movs	r1, #0
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f7ff fdb3 	bl	8011b3e <dir_sdi>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011fdc:	7dfb      	ldrb	r3, [r7, #23]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d001      	beq.n	8011fe6 <dir_find+0x24>
 8011fe2:	7dfb      	ldrb	r3, [r7, #23]
 8011fe4:	e03e      	b.n	8012064 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	69db      	ldr	r3, [r3, #28]
 8011fea:	4619      	mov	r1, r3
 8011fec:	6938      	ldr	r0, [r7, #16]
 8011fee:	f7ff f9cd 	bl	801138c <move_window>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011ff6:	7dfb      	ldrb	r3, [r7, #23]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d12f      	bne.n	801205c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6a1b      	ldr	r3, [r3, #32]
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012004:	7bfb      	ldrb	r3, [r7, #15]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d102      	bne.n	8012010 <dir_find+0x4e>
 801200a:	2304      	movs	r3, #4
 801200c:	75fb      	strb	r3, [r7, #23]
 801200e:	e028      	b.n	8012062 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6a1b      	ldr	r3, [r3, #32]
 8012014:	330b      	adds	r3, #11
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801201c:	b2da      	uxtb	r2, r3
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6a1b      	ldr	r3, [r3, #32]
 8012026:	330b      	adds	r3, #11
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	f003 0308 	and.w	r3, r3, #8
 801202e:	2b00      	cmp	r3, #0
 8012030:	d10a      	bne.n	8012048 <dir_find+0x86>
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6a18      	ldr	r0, [r3, #32]
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	3324      	adds	r3, #36	; 0x24
 801203a:	220b      	movs	r2, #11
 801203c:	4619      	mov	r1, r3
 801203e:	f7fe ffb2 	bl	8010fa6 <mem_cmp>
 8012042:	4603      	mov	r3, r0
 8012044:	2b00      	cmp	r3, #0
 8012046:	d00b      	beq.n	8012060 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012048:	2100      	movs	r1, #0
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	f7ff fe00 	bl	8011c50 <dir_next>
 8012050:	4603      	mov	r3, r0
 8012052:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012054:	7dfb      	ldrb	r3, [r7, #23]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d0c5      	beq.n	8011fe6 <dir_find+0x24>
 801205a:	e002      	b.n	8012062 <dir_find+0xa0>
		if (res != FR_OK) break;
 801205c:	bf00      	nop
 801205e:	e000      	b.n	8012062 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012060:	bf00      	nop

	return res;
 8012062:	7dfb      	ldrb	r3, [r7, #23]
}
 8012064:	4618      	mov	r0, r3
 8012066:	3718      	adds	r7, #24
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b084      	sub	sp, #16
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801207a:	2101      	movs	r1, #1
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7ff febd 	bl	8011dfc <dir_alloc>
 8012082:	4603      	mov	r3, r0
 8012084:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012086:	7bfb      	ldrb	r3, [r7, #15]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d11c      	bne.n	80120c6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	69db      	ldr	r3, [r3, #28]
 8012090:	4619      	mov	r1, r3
 8012092:	68b8      	ldr	r0, [r7, #8]
 8012094:	f7ff f97a 	bl	801138c <move_window>
 8012098:	4603      	mov	r3, r0
 801209a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801209c:	7bfb      	ldrb	r3, [r7, #15]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d111      	bne.n	80120c6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6a1b      	ldr	r3, [r3, #32]
 80120a6:	2220      	movs	r2, #32
 80120a8:	2100      	movs	r1, #0
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7fe ff61 	bl	8010f72 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6a18      	ldr	r0, [r3, #32]
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	3324      	adds	r3, #36	; 0x24
 80120b8:	220b      	movs	r2, #11
 80120ba:	4619      	mov	r1, r3
 80120bc:	f7fe ff38 	bl	8010f30 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	2201      	movs	r2, #1
 80120c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80120c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3710      	adds	r7, #16
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}

080120d0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b084      	sub	sp, #16
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	69db      	ldr	r3, [r3, #28]
 80120e2:	4619      	mov	r1, r3
 80120e4:	68f8      	ldr	r0, [r7, #12]
 80120e6:	f7ff f951 	bl	801138c <move_window>
 80120ea:	4603      	mov	r3, r0
 80120ec:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80120ee:	7afb      	ldrb	r3, [r7, #11]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d106      	bne.n	8012102 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6a1b      	ldr	r3, [r3, #32]
 80120f8:	22e5      	movs	r2, #229	; 0xe5
 80120fa:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	2201      	movs	r2, #1
 8012100:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012102:	7afb      	ldrb	r3, [r7, #11]
}
 8012104:	4618      	mov	r0, r3
 8012106:	3710      	adds	r7, #16
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b088      	sub	sp, #32
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	60fb      	str	r3, [r7, #12]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	3324      	adds	r3, #36	; 0x24
 8012120:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012122:	220b      	movs	r2, #11
 8012124:	2120      	movs	r1, #32
 8012126:	68b8      	ldr	r0, [r7, #8]
 8012128:	f7fe ff23 	bl	8010f72 <mem_set>
	si = i = 0; ni = 8;
 801212c:	2300      	movs	r3, #0
 801212e:	613b      	str	r3, [r7, #16]
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	617b      	str	r3, [r7, #20]
 8012134:	2308      	movs	r3, #8
 8012136:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012138:	68fa      	ldr	r2, [r7, #12]
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	4413      	add	r3, r2
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	2b2e      	cmp	r3, #46	; 0x2e
 8012142:	d12f      	bne.n	80121a4 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	1c5a      	adds	r2, r3, #1
 8012148:	617a      	str	r2, [r7, #20]
 801214a:	68fa      	ldr	r2, [r7, #12]
 801214c:	4413      	add	r3, r2
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012152:	7ffb      	ldrb	r3, [r7, #31]
 8012154:	2b2e      	cmp	r3, #46	; 0x2e
 8012156:	d10a      	bne.n	801216e <create_name+0x62>
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	2b02      	cmp	r3, #2
 801215c:	d807      	bhi.n	801216e <create_name+0x62>
			sfn[i++] = c;
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	1c5a      	adds	r2, r3, #1
 8012162:	613a      	str	r2, [r7, #16]
 8012164:	68ba      	ldr	r2, [r7, #8]
 8012166:	4413      	add	r3, r2
 8012168:	7ffa      	ldrb	r2, [r7, #31]
 801216a:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 801216c:	e7ea      	b.n	8012144 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 801216e:	7ffb      	ldrb	r3, [r7, #31]
 8012170:	2b2f      	cmp	r3, #47	; 0x2f
 8012172:	d007      	beq.n	8012184 <create_name+0x78>
 8012174:	7ffb      	ldrb	r3, [r7, #31]
 8012176:	2b5c      	cmp	r3, #92	; 0x5c
 8012178:	d004      	beq.n	8012184 <create_name+0x78>
 801217a:	7ffb      	ldrb	r3, [r7, #31]
 801217c:	2b20      	cmp	r3, #32
 801217e:	d901      	bls.n	8012184 <create_name+0x78>
 8012180:	2306      	movs	r3, #6
 8012182:	e084      	b.n	801228e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012184:	68fa      	ldr	r2, [r7, #12]
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	441a      	add	r2, r3
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 801218e:	7ffb      	ldrb	r3, [r7, #31]
 8012190:	2b20      	cmp	r3, #32
 8012192:	d801      	bhi.n	8012198 <create_name+0x8c>
 8012194:	2224      	movs	r2, #36	; 0x24
 8012196:	e000      	b.n	801219a <create_name+0x8e>
 8012198:	2220      	movs	r2, #32
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	330b      	adds	r3, #11
 801219e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80121a0:	2300      	movs	r3, #0
 80121a2:	e074      	b.n	801228e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	1c5a      	adds	r2, r3, #1
 80121a8:	617a      	str	r2, [r7, #20]
 80121aa:	68fa      	ldr	r2, [r7, #12]
 80121ac:	4413      	add	r3, r2
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80121b2:	7ffb      	ldrb	r3, [r7, #31]
 80121b4:	2b20      	cmp	r3, #32
 80121b6:	d94e      	bls.n	8012256 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80121b8:	7ffb      	ldrb	r3, [r7, #31]
 80121ba:	2b2f      	cmp	r3, #47	; 0x2f
 80121bc:	d006      	beq.n	80121cc <create_name+0xc0>
 80121be:	7ffb      	ldrb	r3, [r7, #31]
 80121c0:	2b5c      	cmp	r3, #92	; 0x5c
 80121c2:	d110      	bne.n	80121e6 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80121c4:	e002      	b.n	80121cc <create_name+0xc0>
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	3301      	adds	r3, #1
 80121ca:	617b      	str	r3, [r7, #20]
 80121cc:	68fa      	ldr	r2, [r7, #12]
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	4413      	add	r3, r2
 80121d2:	781b      	ldrb	r3, [r3, #0]
 80121d4:	2b2f      	cmp	r3, #47	; 0x2f
 80121d6:	d0f6      	beq.n	80121c6 <create_name+0xba>
 80121d8:	68fa      	ldr	r2, [r7, #12]
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	4413      	add	r3, r2
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	2b5c      	cmp	r3, #92	; 0x5c
 80121e2:	d0f0      	beq.n	80121c6 <create_name+0xba>
			break;
 80121e4:	e038      	b.n	8012258 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80121e6:	7ffb      	ldrb	r3, [r7, #31]
 80121e8:	2b2e      	cmp	r3, #46	; 0x2e
 80121ea:	d003      	beq.n	80121f4 <create_name+0xe8>
 80121ec:	693a      	ldr	r2, [r7, #16]
 80121ee:	69bb      	ldr	r3, [r7, #24]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d30c      	bcc.n	801220e <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80121f4:	69bb      	ldr	r3, [r7, #24]
 80121f6:	2b0b      	cmp	r3, #11
 80121f8:	d002      	beq.n	8012200 <create_name+0xf4>
 80121fa:	7ffb      	ldrb	r3, [r7, #31]
 80121fc:	2b2e      	cmp	r3, #46	; 0x2e
 80121fe:	d001      	beq.n	8012204 <create_name+0xf8>
 8012200:	2306      	movs	r3, #6
 8012202:	e044      	b.n	801228e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012204:	2308      	movs	r3, #8
 8012206:	613b      	str	r3, [r7, #16]
 8012208:	230b      	movs	r3, #11
 801220a:	61bb      	str	r3, [r7, #24]
			continue;
 801220c:	e022      	b.n	8012254 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801220e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012212:	2b00      	cmp	r3, #0
 8012214:	da04      	bge.n	8012220 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012216:	7ffb      	ldrb	r3, [r7, #31]
 8012218:	3b80      	subs	r3, #128	; 0x80
 801221a:	4a1f      	ldr	r2, [pc, #124]	; (8012298 <create_name+0x18c>)
 801221c:	5cd3      	ldrb	r3, [r2, r3]
 801221e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012220:	7ffb      	ldrb	r3, [r7, #31]
 8012222:	4619      	mov	r1, r3
 8012224:	481d      	ldr	r0, [pc, #116]	; (801229c <create_name+0x190>)
 8012226:	f7fe fee5 	bl	8010ff4 <chk_chr>
 801222a:	4603      	mov	r3, r0
 801222c:	2b00      	cmp	r3, #0
 801222e:	d001      	beq.n	8012234 <create_name+0x128>
 8012230:	2306      	movs	r3, #6
 8012232:	e02c      	b.n	801228e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012234:	7ffb      	ldrb	r3, [r7, #31]
 8012236:	2b60      	cmp	r3, #96	; 0x60
 8012238:	d905      	bls.n	8012246 <create_name+0x13a>
 801223a:	7ffb      	ldrb	r3, [r7, #31]
 801223c:	2b7a      	cmp	r3, #122	; 0x7a
 801223e:	d802      	bhi.n	8012246 <create_name+0x13a>
 8012240:	7ffb      	ldrb	r3, [r7, #31]
 8012242:	3b20      	subs	r3, #32
 8012244:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	1c5a      	adds	r2, r3, #1
 801224a:	613a      	str	r2, [r7, #16]
 801224c:	68ba      	ldr	r2, [r7, #8]
 801224e:	4413      	add	r3, r2
 8012250:	7ffa      	ldrb	r2, [r7, #31]
 8012252:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012254:	e7a6      	b.n	80121a4 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012256:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012258:	68fa      	ldr	r2, [r7, #12]
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	441a      	add	r2, r3
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d101      	bne.n	801226c <create_name+0x160>
 8012268:	2306      	movs	r3, #6
 801226a:	e010      	b.n	801228e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	2be5      	cmp	r3, #229	; 0xe5
 8012272:	d102      	bne.n	801227a <create_name+0x16e>
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	2205      	movs	r2, #5
 8012278:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801227a:	7ffb      	ldrb	r3, [r7, #31]
 801227c:	2b20      	cmp	r3, #32
 801227e:	d801      	bhi.n	8012284 <create_name+0x178>
 8012280:	2204      	movs	r2, #4
 8012282:	e000      	b.n	8012286 <create_name+0x17a>
 8012284:	2200      	movs	r2, #0
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	330b      	adds	r3, #11
 801228a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801228c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801228e:	4618      	mov	r0, r3
 8012290:	3720      	adds	r7, #32
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
 8012296:	bf00      	nop
 8012298:	08019af8 	.word	0x08019af8
 801229c:	08019aa8 	.word	0x08019aa8

080122a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b086      	sub	sp, #24
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	2b2f      	cmp	r3, #47	; 0x2f
 80122ba:	d00b      	beq.n	80122d4 <follow_path+0x34>
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	2b5c      	cmp	r3, #92	; 0x5c
 80122c2:	d007      	beq.n	80122d4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	699a      	ldr	r2, [r3, #24]
 80122c8:	693b      	ldr	r3, [r7, #16]
 80122ca:	609a      	str	r2, [r3, #8]
 80122cc:	e00d      	b.n	80122ea <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	3301      	adds	r3, #1
 80122d2:	603b      	str	r3, [r7, #0]
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	781b      	ldrb	r3, [r3, #0]
 80122d8:	2b2f      	cmp	r3, #47	; 0x2f
 80122da:	d0f8      	beq.n	80122ce <follow_path+0x2e>
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	2b5c      	cmp	r3, #92	; 0x5c
 80122e2:	d0f4      	beq.n	80122ce <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80122e4:	693b      	ldr	r3, [r7, #16]
 80122e6:	2200      	movs	r2, #0
 80122e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	2b1f      	cmp	r3, #31
 80122f0:	d80a      	bhi.n	8012308 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2280      	movs	r2, #128	; 0x80
 80122f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80122fa:	2100      	movs	r1, #0
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f7ff fc1e 	bl	8011b3e <dir_sdi>
 8012302:	4603      	mov	r3, r0
 8012304:	75fb      	strb	r3, [r7, #23]
 8012306:	e05b      	b.n	80123c0 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012308:	463b      	mov	r3, r7
 801230a:	4619      	mov	r1, r3
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f7ff fefd 	bl	801210c <create_name>
 8012312:	4603      	mov	r3, r0
 8012314:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012316:	7dfb      	ldrb	r3, [r7, #23]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d14c      	bne.n	80123b6 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f7ff fe50 	bl	8011fc2 <dir_find>
 8012322:	4603      	mov	r3, r0
 8012324:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801232c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801232e:	7dfb      	ldrb	r3, [r7, #23]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d01b      	beq.n	801236c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012334:	7dfb      	ldrb	r3, [r7, #23]
 8012336:	2b04      	cmp	r3, #4
 8012338:	d13f      	bne.n	80123ba <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801233a:	7afb      	ldrb	r3, [r7, #11]
 801233c:	f003 0320 	and.w	r3, r3, #32
 8012340:	2b00      	cmp	r3, #0
 8012342:	d00b      	beq.n	801235c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012344:	7afb      	ldrb	r3, [r7, #11]
 8012346:	f003 0304 	and.w	r3, r3, #4
 801234a:	2b00      	cmp	r3, #0
 801234c:	d031      	beq.n	80123b2 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2280      	movs	r2, #128	; 0x80
 8012352:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012356:	2300      	movs	r3, #0
 8012358:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801235a:	e02e      	b.n	80123ba <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801235c:	7afb      	ldrb	r3, [r7, #11]
 801235e:	f003 0304 	and.w	r3, r3, #4
 8012362:	2b00      	cmp	r3, #0
 8012364:	d129      	bne.n	80123ba <follow_path+0x11a>
 8012366:	2305      	movs	r3, #5
 8012368:	75fb      	strb	r3, [r7, #23]
				break;
 801236a:	e026      	b.n	80123ba <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801236c:	7afb      	ldrb	r3, [r7, #11]
 801236e:	f003 0304 	and.w	r3, r3, #4
 8012372:	2b00      	cmp	r3, #0
 8012374:	d123      	bne.n	80123be <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	799b      	ldrb	r3, [r3, #6]
 801237a:	f003 0310 	and.w	r3, r3, #16
 801237e:	2b00      	cmp	r3, #0
 8012380:	d102      	bne.n	8012388 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012382:	2305      	movs	r3, #5
 8012384:	75fb      	strb	r3, [r7, #23]
 8012386:	e01b      	b.n	80123c0 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	695b      	ldr	r3, [r3, #20]
 8012392:	68fa      	ldr	r2, [r7, #12]
 8012394:	8992      	ldrh	r2, [r2, #12]
 8012396:	fbb3 f0f2 	udiv	r0, r3, r2
 801239a:	fb02 f200 	mul.w	r2, r2, r0
 801239e:	1a9b      	subs	r3, r3, r2
 80123a0:	440b      	add	r3, r1
 80123a2:	4619      	mov	r1, r3
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	f7ff fd70 	bl	8011e8a <ld_clust>
 80123aa:	4602      	mov	r2, r0
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	609a      	str	r2, [r3, #8]
 80123b0:	e7aa      	b.n	8012308 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80123b2:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80123b4:	e7a8      	b.n	8012308 <follow_path+0x68>
			if (res != FR_OK) break;
 80123b6:	bf00      	nop
 80123b8:	e002      	b.n	80123c0 <follow_path+0x120>
				break;
 80123ba:	bf00      	nop
 80123bc:	e000      	b.n	80123c0 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80123be:	bf00      	nop
			}
		}
	}

	return res;
 80123c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3718      	adds	r7, #24
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}

080123ca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80123ca:	b480      	push	{r7}
 80123cc:	b087      	sub	sp, #28
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80123d2:	f04f 33ff 	mov.w	r3, #4294967295
 80123d6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d031      	beq.n	8012444 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	617b      	str	r3, [r7, #20]
 80123e6:	e002      	b.n	80123ee <get_ldnumber+0x24>
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	3301      	adds	r3, #1
 80123ec:	617b      	str	r3, [r7, #20]
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	2b20      	cmp	r3, #32
 80123f4:	d903      	bls.n	80123fe <get_ldnumber+0x34>
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	781b      	ldrb	r3, [r3, #0]
 80123fa:	2b3a      	cmp	r3, #58	; 0x3a
 80123fc:	d1f4      	bne.n	80123e8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	781b      	ldrb	r3, [r3, #0]
 8012402:	2b3a      	cmp	r3, #58	; 0x3a
 8012404:	d11c      	bne.n	8012440 <get_ldnumber+0x76>
			tp = *path;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	1c5a      	adds	r2, r3, #1
 8012410:	60fa      	str	r2, [r7, #12]
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	3b30      	subs	r3, #48	; 0x30
 8012416:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	2b09      	cmp	r3, #9
 801241c:	d80e      	bhi.n	801243c <get_ldnumber+0x72>
 801241e:	68fa      	ldr	r2, [r7, #12]
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	429a      	cmp	r2, r3
 8012424:	d10a      	bne.n	801243c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d107      	bne.n	801243c <get_ldnumber+0x72>
					vol = (int)i;
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012430:	697b      	ldr	r3, [r7, #20]
 8012432:	3301      	adds	r3, #1
 8012434:	617b      	str	r3, [r7, #20]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	697a      	ldr	r2, [r7, #20]
 801243a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801243c:	693b      	ldr	r3, [r7, #16]
 801243e:	e002      	b.n	8012446 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012440:	2300      	movs	r3, #0
 8012442:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012444:	693b      	ldr	r3, [r7, #16]
}
 8012446:	4618      	mov	r0, r3
 8012448:	371c      	adds	r7, #28
 801244a:	46bd      	mov	sp, r7
 801244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012450:	4770      	bx	lr
	...

08012454 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2200      	movs	r2, #0
 8012462:	70da      	strb	r2, [r3, #3]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f04f 32ff 	mov.w	r2, #4294967295
 801246a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801246c:	6839      	ldr	r1, [r7, #0]
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f7fe ff8c 	bl	801138c <move_window>
 8012474:	4603      	mov	r3, r0
 8012476:	2b00      	cmp	r3, #0
 8012478:	d001      	beq.n	801247e <check_fs+0x2a>
 801247a:	2304      	movs	r3, #4
 801247c:	e038      	b.n	80124f0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	3338      	adds	r3, #56	; 0x38
 8012482:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012486:	4618      	mov	r0, r3
 8012488:	f7fe fcd0 	bl	8010e2c <ld_word>
 801248c:	4603      	mov	r3, r0
 801248e:	461a      	mov	r2, r3
 8012490:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012494:	429a      	cmp	r2, r3
 8012496:	d001      	beq.n	801249c <check_fs+0x48>
 8012498:	2303      	movs	r3, #3
 801249a:	e029      	b.n	80124f0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80124a2:	2be9      	cmp	r3, #233	; 0xe9
 80124a4:	d009      	beq.n	80124ba <check_fs+0x66>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80124ac:	2beb      	cmp	r3, #235	; 0xeb
 80124ae:	d11e      	bne.n	80124ee <check_fs+0x9a>
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80124b6:	2b90      	cmp	r3, #144	; 0x90
 80124b8:	d119      	bne.n	80124ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	3338      	adds	r3, #56	; 0x38
 80124be:	3336      	adds	r3, #54	; 0x36
 80124c0:	4618      	mov	r0, r3
 80124c2:	f7fe fccb 	bl	8010e5c <ld_dword>
 80124c6:	4603      	mov	r3, r0
 80124c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80124cc:	4a0a      	ldr	r2, [pc, #40]	; (80124f8 <check_fs+0xa4>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d101      	bne.n	80124d6 <check_fs+0x82>
 80124d2:	2300      	movs	r3, #0
 80124d4:	e00c      	b.n	80124f0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	3338      	adds	r3, #56	; 0x38
 80124da:	3352      	adds	r3, #82	; 0x52
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fe fcbd 	bl	8010e5c <ld_dword>
 80124e2:	4602      	mov	r2, r0
 80124e4:	4b05      	ldr	r3, [pc, #20]	; (80124fc <check_fs+0xa8>)
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d101      	bne.n	80124ee <check_fs+0x9a>
 80124ea:	2300      	movs	r3, #0
 80124ec:	e000      	b.n	80124f0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80124ee:	2302      	movs	r3, #2
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	3708      	adds	r7, #8
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	00544146 	.word	0x00544146
 80124fc:	33544146 	.word	0x33544146

08012500 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b096      	sub	sp, #88	; 0x58
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	4613      	mov	r3, r2
 801250c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	2200      	movs	r2, #0
 8012512:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012514:	68f8      	ldr	r0, [r7, #12]
 8012516:	f7ff ff58 	bl	80123ca <get_ldnumber>
 801251a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801251c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801251e:	2b00      	cmp	r3, #0
 8012520:	da01      	bge.n	8012526 <find_volume+0x26>
 8012522:	230b      	movs	r3, #11
 8012524:	e268      	b.n	80129f8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012526:	4ab0      	ldr	r2, [pc, #704]	; (80127e8 <find_volume+0x2e8>)
 8012528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801252e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012532:	2b00      	cmp	r3, #0
 8012534:	d101      	bne.n	801253a <find_volume+0x3a>
 8012536:	230c      	movs	r3, #12
 8012538:	e25e      	b.n	80129f8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801253e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012540:	79fb      	ldrb	r3, [r7, #7]
 8012542:	f023 0301 	bic.w	r3, r3, #1
 8012546:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d01a      	beq.n	8012586 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012552:	785b      	ldrb	r3, [r3, #1]
 8012554:	4618      	mov	r0, r3
 8012556:	f7fe fbcb 	bl	8010cf0 <disk_status>
 801255a:	4603      	mov	r3, r0
 801255c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012564:	f003 0301 	and.w	r3, r3, #1
 8012568:	2b00      	cmp	r3, #0
 801256a:	d10c      	bne.n	8012586 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801256c:	79fb      	ldrb	r3, [r7, #7]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d007      	beq.n	8012582 <find_volume+0x82>
 8012572:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012576:	f003 0304 	and.w	r3, r3, #4
 801257a:	2b00      	cmp	r3, #0
 801257c:	d001      	beq.n	8012582 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801257e:	230a      	movs	r3, #10
 8012580:	e23a      	b.n	80129f8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012582:	2300      	movs	r3, #0
 8012584:	e238      	b.n	80129f8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012588:	2200      	movs	r2, #0
 801258a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801258c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801258e:	b2da      	uxtb	r2, r3
 8012590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012592:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012596:	785b      	ldrb	r3, [r3, #1]
 8012598:	4618      	mov	r0, r3
 801259a:	f7fe fbc3 	bl	8010d24 <disk_initialize>
 801259e:	4603      	mov	r3, r0
 80125a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80125a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125a8:	f003 0301 	and.w	r3, r3, #1
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d001      	beq.n	80125b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80125b0:	2303      	movs	r3, #3
 80125b2:	e221      	b.n	80129f8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80125b4:	79fb      	ldrb	r3, [r7, #7]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d007      	beq.n	80125ca <find_volume+0xca>
 80125ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125be:	f003 0304 	and.w	r3, r3, #4
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d001      	beq.n	80125ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80125c6:	230a      	movs	r3, #10
 80125c8:	e216      	b.n	80129f8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80125ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125cc:	7858      	ldrb	r0, [r3, #1]
 80125ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d0:	330c      	adds	r3, #12
 80125d2:	461a      	mov	r2, r3
 80125d4:	2102      	movs	r1, #2
 80125d6:	f7fe fc0b 	bl	8010df0 <disk_ioctl>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d001      	beq.n	80125e4 <find_volume+0xe4>
 80125e0:	2301      	movs	r3, #1
 80125e2:	e209      	b.n	80129f8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80125e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e6:	899b      	ldrh	r3, [r3, #12]
 80125e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80125ec:	d80d      	bhi.n	801260a <find_volume+0x10a>
 80125ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125f0:	899b      	ldrh	r3, [r3, #12]
 80125f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125f6:	d308      	bcc.n	801260a <find_volume+0x10a>
 80125f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fa:	899b      	ldrh	r3, [r3, #12]
 80125fc:	461a      	mov	r2, r3
 80125fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012600:	899b      	ldrh	r3, [r3, #12]
 8012602:	3b01      	subs	r3, #1
 8012604:	4013      	ands	r3, r2
 8012606:	2b00      	cmp	r3, #0
 8012608:	d001      	beq.n	801260e <find_volume+0x10e>
 801260a:	2301      	movs	r3, #1
 801260c:	e1f4      	b.n	80129f8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801260e:	2300      	movs	r3, #0
 8012610:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012612:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012614:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012616:	f7ff ff1d 	bl	8012454 <check_fs>
 801261a:	4603      	mov	r3, r0
 801261c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012620:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012624:	2b02      	cmp	r3, #2
 8012626:	d14b      	bne.n	80126c0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012628:	2300      	movs	r3, #0
 801262a:	643b      	str	r3, [r7, #64]	; 0x40
 801262c:	e01f      	b.n	801266e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012630:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012636:	011b      	lsls	r3, r3, #4
 8012638:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801263c:	4413      	add	r3, r2
 801263e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012642:	3304      	adds	r3, #4
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d006      	beq.n	8012658 <find_volume+0x158>
 801264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264c:	3308      	adds	r3, #8
 801264e:	4618      	mov	r0, r3
 8012650:	f7fe fc04 	bl	8010e5c <ld_dword>
 8012654:	4602      	mov	r2, r0
 8012656:	e000      	b.n	801265a <find_volume+0x15a>
 8012658:	2200      	movs	r2, #0
 801265a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801265c:	009b      	lsls	r3, r3, #2
 801265e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012662:	440b      	add	r3, r1
 8012664:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801266a:	3301      	adds	r3, #1
 801266c:	643b      	str	r3, [r7, #64]	; 0x40
 801266e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012670:	2b03      	cmp	r3, #3
 8012672:	d9dc      	bls.n	801262e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012674:	2300      	movs	r3, #0
 8012676:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801267a:	2b00      	cmp	r3, #0
 801267c:	d002      	beq.n	8012684 <find_volume+0x184>
 801267e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012680:	3b01      	subs	r3, #1
 8012682:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012686:	009b      	lsls	r3, r3, #2
 8012688:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801268c:	4413      	add	r3, r2
 801268e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012692:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012696:	2b00      	cmp	r3, #0
 8012698:	d005      	beq.n	80126a6 <find_volume+0x1a6>
 801269a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801269c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801269e:	f7ff fed9 	bl	8012454 <check_fs>
 80126a2:	4603      	mov	r3, r0
 80126a4:	e000      	b.n	80126a8 <find_volume+0x1a8>
 80126a6:	2303      	movs	r3, #3
 80126a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80126ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d905      	bls.n	80126c0 <find_volume+0x1c0>
 80126b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126b6:	3301      	adds	r3, #1
 80126b8:	643b      	str	r3, [r7, #64]	; 0x40
 80126ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80126bc:	2b03      	cmp	r3, #3
 80126be:	d9e1      	bls.n	8012684 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80126c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126c4:	2b04      	cmp	r3, #4
 80126c6:	d101      	bne.n	80126cc <find_volume+0x1cc>
 80126c8:	2301      	movs	r3, #1
 80126ca:	e195      	b.n	80129f8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80126cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d901      	bls.n	80126d8 <find_volume+0x1d8>
 80126d4:	230d      	movs	r3, #13
 80126d6:	e18f      	b.n	80129f8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80126d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126da:	3338      	adds	r3, #56	; 0x38
 80126dc:	330b      	adds	r3, #11
 80126de:	4618      	mov	r0, r3
 80126e0:	f7fe fba4 	bl	8010e2c <ld_word>
 80126e4:	4603      	mov	r3, r0
 80126e6:	461a      	mov	r2, r3
 80126e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ea:	899b      	ldrh	r3, [r3, #12]
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d001      	beq.n	80126f4 <find_volume+0x1f4>
 80126f0:	230d      	movs	r3, #13
 80126f2:	e181      	b.n	80129f8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80126f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f6:	3338      	adds	r3, #56	; 0x38
 80126f8:	3316      	adds	r3, #22
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7fe fb96 	bl	8010e2c <ld_word>
 8012700:	4603      	mov	r3, r0
 8012702:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012706:	2b00      	cmp	r3, #0
 8012708:	d106      	bne.n	8012718 <find_volume+0x218>
 801270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270c:	3338      	adds	r3, #56	; 0x38
 801270e:	3324      	adds	r3, #36	; 0x24
 8012710:	4618      	mov	r0, r3
 8012712:	f7fe fba3 	bl	8010e5c <ld_dword>
 8012716:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801271c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012720:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012726:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272a:	789b      	ldrb	r3, [r3, #2]
 801272c:	2b01      	cmp	r3, #1
 801272e:	d005      	beq.n	801273c <find_volume+0x23c>
 8012730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012732:	789b      	ldrb	r3, [r3, #2]
 8012734:	2b02      	cmp	r3, #2
 8012736:	d001      	beq.n	801273c <find_volume+0x23c>
 8012738:	230d      	movs	r3, #13
 801273a:	e15d      	b.n	80129f8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801273e:	789b      	ldrb	r3, [r3, #2]
 8012740:	461a      	mov	r2, r3
 8012742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012744:	fb02 f303 	mul.w	r3, r2, r3
 8012748:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012750:	b29a      	uxth	r2, r3
 8012752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012754:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012758:	895b      	ldrh	r3, [r3, #10]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d008      	beq.n	8012770 <find_volume+0x270>
 801275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012760:	895b      	ldrh	r3, [r3, #10]
 8012762:	461a      	mov	r2, r3
 8012764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012766:	895b      	ldrh	r3, [r3, #10]
 8012768:	3b01      	subs	r3, #1
 801276a:	4013      	ands	r3, r2
 801276c:	2b00      	cmp	r3, #0
 801276e:	d001      	beq.n	8012774 <find_volume+0x274>
 8012770:	230d      	movs	r3, #13
 8012772:	e141      	b.n	80129f8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012776:	3338      	adds	r3, #56	; 0x38
 8012778:	3311      	adds	r3, #17
 801277a:	4618      	mov	r0, r3
 801277c:	f7fe fb56 	bl	8010e2c <ld_word>
 8012780:	4603      	mov	r3, r0
 8012782:	461a      	mov	r2, r3
 8012784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012786:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278a:	891b      	ldrh	r3, [r3, #8]
 801278c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801278e:	8992      	ldrh	r2, [r2, #12]
 8012790:	0952      	lsrs	r2, r2, #5
 8012792:	b292      	uxth	r2, r2
 8012794:	fbb3 f1f2 	udiv	r1, r3, r2
 8012798:	fb02 f201 	mul.w	r2, r2, r1
 801279c:	1a9b      	subs	r3, r3, r2
 801279e:	b29b      	uxth	r3, r3
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d001      	beq.n	80127a8 <find_volume+0x2a8>
 80127a4:	230d      	movs	r3, #13
 80127a6:	e127      	b.n	80129f8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80127a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127aa:	3338      	adds	r3, #56	; 0x38
 80127ac:	3313      	adds	r3, #19
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fe fb3c 	bl	8010e2c <ld_word>
 80127b4:	4603      	mov	r3, r0
 80127b6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80127b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d106      	bne.n	80127cc <find_volume+0x2cc>
 80127be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c0:	3338      	adds	r3, #56	; 0x38
 80127c2:	3320      	adds	r3, #32
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7fe fb49 	bl	8010e5c <ld_dword>
 80127ca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80127cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ce:	3338      	adds	r3, #56	; 0x38
 80127d0:	330e      	adds	r3, #14
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7fe fb2a 	bl	8010e2c <ld_word>
 80127d8:	4603      	mov	r3, r0
 80127da:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80127dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d104      	bne.n	80127ec <find_volume+0x2ec>
 80127e2:	230d      	movs	r3, #13
 80127e4:	e108      	b.n	80129f8 <find_volume+0x4f8>
 80127e6:	bf00      	nop
 80127e8:	20041300 	.word	0x20041300

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80127ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80127ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127f0:	4413      	add	r3, r2
 80127f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127f4:	8911      	ldrh	r1, [r2, #8]
 80127f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127f8:	8992      	ldrh	r2, [r2, #12]
 80127fa:	0952      	lsrs	r2, r2, #5
 80127fc:	b292      	uxth	r2, r2
 80127fe:	fbb1 f2f2 	udiv	r2, r1, r2
 8012802:	b292      	uxth	r2, r2
 8012804:	4413      	add	r3, r2
 8012806:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280c:	429a      	cmp	r2, r3
 801280e:	d201      	bcs.n	8012814 <find_volume+0x314>
 8012810:	230d      	movs	r3, #13
 8012812:	e0f1      	b.n	80129f8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012818:	1ad3      	subs	r3, r2, r3
 801281a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801281c:	8952      	ldrh	r2, [r2, #10]
 801281e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012822:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012826:	2b00      	cmp	r3, #0
 8012828:	d101      	bne.n	801282e <find_volume+0x32e>
 801282a:	230d      	movs	r3, #13
 801282c:	e0e4      	b.n	80129f8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801282e:	2303      	movs	r3, #3
 8012830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012836:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801283a:	4293      	cmp	r3, r2
 801283c:	d802      	bhi.n	8012844 <find_volume+0x344>
 801283e:	2302      	movs	r3, #2
 8012840:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012846:	f640 72f5 	movw	r2, #4085	; 0xff5
 801284a:	4293      	cmp	r3, r2
 801284c:	d802      	bhi.n	8012854 <find_volume+0x354>
 801284e:	2301      	movs	r3, #1
 8012850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012856:	1c9a      	adds	r2, r3, #2
 8012858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801285c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012860:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012862:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012866:	441a      	add	r2, r3
 8012868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801286a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801286c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012870:	441a      	add	r2, r3
 8012872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012874:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801287a:	2b03      	cmp	r3, #3
 801287c:	d11e      	bne.n	80128bc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801287e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012880:	3338      	adds	r3, #56	; 0x38
 8012882:	332a      	adds	r3, #42	; 0x2a
 8012884:	4618      	mov	r0, r3
 8012886:	f7fe fad1 	bl	8010e2c <ld_word>
 801288a:	4603      	mov	r3, r0
 801288c:	2b00      	cmp	r3, #0
 801288e:	d001      	beq.n	8012894 <find_volume+0x394>
 8012890:	230d      	movs	r3, #13
 8012892:	e0b1      	b.n	80129f8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012896:	891b      	ldrh	r3, [r3, #8]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d001      	beq.n	80128a0 <find_volume+0x3a0>
 801289c:	230d      	movs	r3, #13
 801289e:	e0ab      	b.n	80129f8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80128a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a2:	3338      	adds	r3, #56	; 0x38
 80128a4:	332c      	adds	r3, #44	; 0x2c
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fe fad8 	bl	8010e5c <ld_dword>
 80128ac:	4602      	mov	r2, r0
 80128ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80128b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b4:	69db      	ldr	r3, [r3, #28]
 80128b6:	009b      	lsls	r3, r3, #2
 80128b8:	647b      	str	r3, [r7, #68]	; 0x44
 80128ba:	e01f      	b.n	80128fc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80128bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128be:	891b      	ldrh	r3, [r3, #8]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d101      	bne.n	80128c8 <find_volume+0x3c8>
 80128c4:	230d      	movs	r3, #13
 80128c6:	e097      	b.n	80129f8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80128c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80128cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128ce:	441a      	add	r2, r3
 80128d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80128d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128d8:	2b02      	cmp	r3, #2
 80128da:	d103      	bne.n	80128e4 <find_volume+0x3e4>
 80128dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128de:	69db      	ldr	r3, [r3, #28]
 80128e0:	005b      	lsls	r3, r3, #1
 80128e2:	e00a      	b.n	80128fa <find_volume+0x3fa>
 80128e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e6:	69da      	ldr	r2, [r3, #28]
 80128e8:	4613      	mov	r3, r2
 80128ea:	005b      	lsls	r3, r3, #1
 80128ec:	4413      	add	r3, r2
 80128ee:	085a      	lsrs	r2, r3, #1
 80128f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f2:	69db      	ldr	r3, [r3, #28]
 80128f4:	f003 0301 	and.w	r3, r3, #1
 80128f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80128fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80128fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fe:	6a1a      	ldr	r2, [r3, #32]
 8012900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012902:	899b      	ldrh	r3, [r3, #12]
 8012904:	4619      	mov	r1, r3
 8012906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012908:	440b      	add	r3, r1
 801290a:	3b01      	subs	r3, #1
 801290c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801290e:	8989      	ldrh	r1, [r1, #12]
 8012910:	fbb3 f3f1 	udiv	r3, r3, r1
 8012914:	429a      	cmp	r2, r3
 8012916:	d201      	bcs.n	801291c <find_volume+0x41c>
 8012918:	230d      	movs	r3, #13
 801291a:	e06d      	b.n	80129f8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291e:	f04f 32ff 	mov.w	r2, #4294967295
 8012922:	615a      	str	r2, [r3, #20]
 8012924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012926:	695a      	ldr	r2, [r3, #20]
 8012928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801292a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801292e:	2280      	movs	r2, #128	; 0x80
 8012930:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012932:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012936:	2b03      	cmp	r3, #3
 8012938:	d149      	bne.n	80129ce <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801293c:	3338      	adds	r3, #56	; 0x38
 801293e:	3330      	adds	r3, #48	; 0x30
 8012940:	4618      	mov	r0, r3
 8012942:	f7fe fa73 	bl	8010e2c <ld_word>
 8012946:	4603      	mov	r3, r0
 8012948:	2b01      	cmp	r3, #1
 801294a:	d140      	bne.n	80129ce <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 801294c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801294e:	3301      	adds	r3, #1
 8012950:	4619      	mov	r1, r3
 8012952:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012954:	f7fe fd1a 	bl	801138c <move_window>
 8012958:	4603      	mov	r3, r0
 801295a:	2b00      	cmp	r3, #0
 801295c:	d137      	bne.n	80129ce <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012960:	2200      	movs	r2, #0
 8012962:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012966:	3338      	adds	r3, #56	; 0x38
 8012968:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801296c:	4618      	mov	r0, r3
 801296e:	f7fe fa5d 	bl	8010e2c <ld_word>
 8012972:	4603      	mov	r3, r0
 8012974:	461a      	mov	r2, r3
 8012976:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801297a:	429a      	cmp	r2, r3
 801297c:	d127      	bne.n	80129ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012980:	3338      	adds	r3, #56	; 0x38
 8012982:	4618      	mov	r0, r3
 8012984:	f7fe fa6a 	bl	8010e5c <ld_dword>
 8012988:	4602      	mov	r2, r0
 801298a:	4b1d      	ldr	r3, [pc, #116]	; (8012a00 <find_volume+0x500>)
 801298c:	429a      	cmp	r2, r3
 801298e:	d11e      	bne.n	80129ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012992:	3338      	adds	r3, #56	; 0x38
 8012994:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012998:	4618      	mov	r0, r3
 801299a:	f7fe fa5f 	bl	8010e5c <ld_dword>
 801299e:	4602      	mov	r2, r0
 80129a0:	4b18      	ldr	r3, [pc, #96]	; (8012a04 <find_volume+0x504>)
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d113      	bne.n	80129ce <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80129a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a8:	3338      	adds	r3, #56	; 0x38
 80129aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7fe fa54 	bl	8010e5c <ld_dword>
 80129b4:	4602      	mov	r2, r0
 80129b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80129ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129bc:	3338      	adds	r3, #56	; 0x38
 80129be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80129c2:	4618      	mov	r0, r3
 80129c4:	f7fe fa4a 	bl	8010e5c <ld_dword>
 80129c8:	4602      	mov	r2, r0
 80129ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129cc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80129ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80129d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80129d6:	4b0c      	ldr	r3, [pc, #48]	; (8012a08 <find_volume+0x508>)
 80129d8:	881b      	ldrh	r3, [r3, #0]
 80129da:	3301      	adds	r3, #1
 80129dc:	b29a      	uxth	r2, r3
 80129de:	4b0a      	ldr	r3, [pc, #40]	; (8012a08 <find_volume+0x508>)
 80129e0:	801a      	strh	r2, [r3, #0]
 80129e2:	4b09      	ldr	r3, [pc, #36]	; (8012a08 <find_volume+0x508>)
 80129e4:	881a      	ldrh	r2, [r3, #0]
 80129e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e8:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80129ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ec:	2200      	movs	r2, #0
 80129ee:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80129f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80129f2:	f7fe fc63 	bl	80112bc <clear_lock>
#endif
	return FR_OK;
 80129f6:	2300      	movs	r3, #0
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	3758      	adds	r7, #88	; 0x58
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}
 8012a00:	41615252 	.word	0x41615252
 8012a04:	61417272 	.word	0x61417272
 8012a08:	20041304 	.word	0x20041304

08012a0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012a16:	2309      	movs	r3, #9
 8012a18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d01c      	beq.n	8012a5a <validate+0x4e>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d018      	beq.n	8012a5a <validate+0x4e>
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d013      	beq.n	8012a5a <validate+0x4e>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	889a      	ldrh	r2, [r3, #4]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	88db      	ldrh	r3, [r3, #6]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d10c      	bne.n	8012a5a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	785b      	ldrb	r3, [r3, #1]
 8012a46:	4618      	mov	r0, r3
 8012a48:	f7fe f952 	bl	8010cf0 <disk_status>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	f003 0301 	and.w	r3, r3, #1
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d101      	bne.n	8012a5a <validate+0x4e>
			res = FR_OK;
 8012a56:	2300      	movs	r3, #0
 8012a58:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012a5a:	7bfb      	ldrb	r3, [r7, #15]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d102      	bne.n	8012a66 <validate+0x5a>
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	e000      	b.n	8012a68 <validate+0x5c>
 8012a66:	2300      	movs	r3, #0
 8012a68:	683a      	ldr	r2, [r7, #0]
 8012a6a:	6013      	str	r3, [r2, #0]
	return res;
 8012a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3710      	adds	r7, #16
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
	...

08012a78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b088      	sub	sp, #32
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	60f8      	str	r0, [r7, #12]
 8012a80:	60b9      	str	r1, [r7, #8]
 8012a82:	4613      	mov	r3, r2
 8012a84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012a8a:	f107 0310 	add.w	r3, r7, #16
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7ff fc9b 	bl	80123ca <get_ldnumber>
 8012a94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012a96:	69fb      	ldr	r3, [r7, #28]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	da01      	bge.n	8012aa0 <f_mount+0x28>
 8012a9c:	230b      	movs	r3, #11
 8012a9e:	e02b      	b.n	8012af8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012aa0:	4a17      	ldr	r2, [pc, #92]	; (8012b00 <f_mount+0x88>)
 8012aa2:	69fb      	ldr	r3, [r7, #28]
 8012aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012aa8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012aaa:	69bb      	ldr	r3, [r7, #24]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d005      	beq.n	8012abc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012ab0:	69b8      	ldr	r0, [r7, #24]
 8012ab2:	f7fe fc03 	bl	80112bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012ab6:	69bb      	ldr	r3, [r7, #24]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d002      	beq.n	8012ac8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	490d      	ldr	r1, [pc, #52]	; (8012b00 <f_mount+0x88>)
 8012acc:	69fb      	ldr	r3, [r7, #28]
 8012ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d002      	beq.n	8012ade <f_mount+0x66>
 8012ad8:	79fb      	ldrb	r3, [r7, #7]
 8012ada:	2b01      	cmp	r3, #1
 8012adc:	d001      	beq.n	8012ae2 <f_mount+0x6a>
 8012ade:	2300      	movs	r3, #0
 8012ae0:	e00a      	b.n	8012af8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012ae2:	f107 010c 	add.w	r1, r7, #12
 8012ae6:	f107 0308 	add.w	r3, r7, #8
 8012aea:	2200      	movs	r2, #0
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7ff fd07 	bl	8012500 <find_volume>
 8012af2:	4603      	mov	r3, r0
 8012af4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	3720      	adds	r7, #32
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}
 8012b00:	20041300 	.word	0x20041300

08012b04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b098      	sub	sp, #96	; 0x60
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	60f8      	str	r0, [r7, #12]
 8012b0c:	60b9      	str	r1, [r7, #8]
 8012b0e:	4613      	mov	r3, r2
 8012b10:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d101      	bne.n	8012b1c <f_open+0x18>
 8012b18:	2309      	movs	r3, #9
 8012b1a:	e1ba      	b.n	8012e92 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012b1c:	79fb      	ldrb	r3, [r7, #7]
 8012b1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b22:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012b24:	79fa      	ldrb	r2, [r7, #7]
 8012b26:	f107 0110 	add.w	r1, r7, #16
 8012b2a:	f107 0308 	add.w	r3, r7, #8
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7ff fce6 	bl	8012500 <find_volume>
 8012b34:	4603      	mov	r3, r0
 8012b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012b3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	f040 819e 	bne.w	8012e80 <f_open+0x37c>
		dj.obj.fs = fs;
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012b48:	68ba      	ldr	r2, [r7, #8]
 8012b4a:	f107 0314 	add.w	r3, r7, #20
 8012b4e:	4611      	mov	r1, r2
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7ff fba5 	bl	80122a0 <follow_path>
 8012b56:	4603      	mov	r3, r0
 8012b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d11a      	bne.n	8012b9a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012b64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012b68:	b25b      	sxtb	r3, r3
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	da03      	bge.n	8012b76 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012b6e:	2306      	movs	r3, #6
 8012b70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012b74:	e011      	b.n	8012b9a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012b76:	79fb      	ldrb	r3, [r7, #7]
 8012b78:	f023 0301 	bic.w	r3, r3, #1
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	bf14      	ite	ne
 8012b80:	2301      	movne	r3, #1
 8012b82:	2300      	moveq	r3, #0
 8012b84:	b2db      	uxtb	r3, r3
 8012b86:	461a      	mov	r2, r3
 8012b88:	f107 0314 	add.w	r3, r7, #20
 8012b8c:	4611      	mov	r1, r2
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7fe fa4c 	bl	801102c <chk_lock>
 8012b94:	4603      	mov	r3, r0
 8012b96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012b9a:	79fb      	ldrb	r3, [r7, #7]
 8012b9c:	f003 031c 	and.w	r3, r3, #28
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d07e      	beq.n	8012ca2 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012ba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d017      	beq.n	8012bdc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012bac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012bb0:	2b04      	cmp	r3, #4
 8012bb2:	d10e      	bne.n	8012bd2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012bb4:	f7fe fa96 	bl	80110e4 <enq_lock>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d006      	beq.n	8012bcc <f_open+0xc8>
 8012bbe:	f107 0314 	add.w	r3, r7, #20
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7ff fa52 	bl	801206c <dir_register>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	e000      	b.n	8012bce <f_open+0xca>
 8012bcc:	2312      	movs	r3, #18
 8012bce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012bd2:	79fb      	ldrb	r3, [r7, #7]
 8012bd4:	f043 0308 	orr.w	r3, r3, #8
 8012bd8:	71fb      	strb	r3, [r7, #7]
 8012bda:	e010      	b.n	8012bfe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012bdc:	7ebb      	ldrb	r3, [r7, #26]
 8012bde:	f003 0311 	and.w	r3, r3, #17
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d003      	beq.n	8012bee <f_open+0xea>
					res = FR_DENIED;
 8012be6:	2307      	movs	r3, #7
 8012be8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012bec:	e007      	b.n	8012bfe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012bee:	79fb      	ldrb	r3, [r7, #7]
 8012bf0:	f003 0304 	and.w	r3, r3, #4
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d002      	beq.n	8012bfe <f_open+0xfa>
 8012bf8:	2308      	movs	r3, #8
 8012bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d167      	bne.n	8012cd6 <f_open+0x1d2>
 8012c06:	79fb      	ldrb	r3, [r7, #7]
 8012c08:	f003 0308 	and.w	r3, r3, #8
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d062      	beq.n	8012cd6 <f_open+0x1d2>
				dw = GET_FATTIME();
 8012c10:	4ba2      	ldr	r3, [pc, #648]	; (8012e9c <f_open+0x398>)
 8012c12:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c16:	330e      	adds	r3, #14
 8012c18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7fe f95c 	bl	8010ed8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c22:	3316      	adds	r3, #22
 8012c24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c26:	4618      	mov	r0, r3
 8012c28:	f7fe f956 	bl	8010ed8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c2e:	330b      	adds	r3, #11
 8012c30:	2220      	movs	r2, #32
 8012c32:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c38:	4611      	mov	r1, r2
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7ff f925 	bl	8011e8a <ld_clust>
 8012c40:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012c46:	2200      	movs	r2, #0
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7ff f93d 	bl	8011ec8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c50:	331c      	adds	r3, #28
 8012c52:	2100      	movs	r1, #0
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7fe f93f 	bl	8010ed8 <st_dword>
					fs->wflag = 1;
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d037      	beq.n	8012cd6 <f_open+0x1d2>
						dw = fs->winsect;
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c6a:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012c6c:	f107 0314 	add.w	r3, r7, #20
 8012c70:	2200      	movs	r2, #0
 8012c72:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7fe fe2d 	bl	80118d4 <remove_chain>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012c80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d126      	bne.n	8012cd6 <f_open+0x1d2>
							res = move_window(fs, dw);
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	f7fe fb7d 	bl	801138c <move_window>
 8012c92:	4603      	mov	r3, r0
 8012c94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c9c:	3a01      	subs	r2, #1
 8012c9e:	611a      	str	r2, [r3, #16]
 8012ca0:	e019      	b.n	8012cd6 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012ca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d115      	bne.n	8012cd6 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012caa:	7ebb      	ldrb	r3, [r7, #26]
 8012cac:	f003 0310 	and.w	r3, r3, #16
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d003      	beq.n	8012cbc <f_open+0x1b8>
					res = FR_NO_FILE;
 8012cb4:	2304      	movs	r3, #4
 8012cb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012cba:	e00c      	b.n	8012cd6 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012cbc:	79fb      	ldrb	r3, [r7, #7]
 8012cbe:	f003 0302 	and.w	r3, r3, #2
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d007      	beq.n	8012cd6 <f_open+0x1d2>
 8012cc6:	7ebb      	ldrb	r3, [r7, #26]
 8012cc8:	f003 0301 	and.w	r3, r3, #1
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d002      	beq.n	8012cd6 <f_open+0x1d2>
						res = FR_DENIED;
 8012cd0:	2307      	movs	r3, #7
 8012cd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d128      	bne.n	8012d30 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012cde:	79fb      	ldrb	r3, [r7, #7]
 8012ce0:	f003 0308 	and.w	r3, r3, #8
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d003      	beq.n	8012cf0 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8012ce8:	79fb      	ldrb	r3, [r7, #7]
 8012cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cee:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012cfe:	79fb      	ldrb	r3, [r7, #7]
 8012d00:	f023 0301 	bic.w	r3, r3, #1
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	bf14      	ite	ne
 8012d08:	2301      	movne	r3, #1
 8012d0a:	2300      	moveq	r3, #0
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	461a      	mov	r2, r3
 8012d10:	f107 0314 	add.w	r3, r7, #20
 8012d14:	4611      	mov	r1, r2
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fe fa06 	bl	8011128 <inc_lock>
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	691b      	ldr	r3, [r3, #16]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d102      	bne.n	8012d30 <f_open+0x22c>
 8012d2a:	2302      	movs	r3, #2
 8012d2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012d30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	f040 80a3 	bne.w	8012e80 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d3e:	4611      	mov	r1, r2
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7ff f8a2 	bl	8011e8a <ld_clust>
 8012d46:	4602      	mov	r2, r0
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d4e:	331c      	adds	r3, #28
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7fe f883 	bl	8010e5c <ld_dword>
 8012d56:	4602      	mov	r2, r0
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	2200      	movs	r2, #0
 8012d60:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012d62:	693a      	ldr	r2, [r7, #16]
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	88da      	ldrh	r2, [r3, #6]
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	79fa      	ldrb	r2, [r7, #7]
 8012d74:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	2200      	movs	r2, #0
 8012d7a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	2200      	movs	r2, #0
 8012d86:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	3330      	adds	r3, #48	; 0x30
 8012d8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012d90:	2100      	movs	r1, #0
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7fe f8ed 	bl	8010f72 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012d98:	79fb      	ldrb	r3, [r7, #7]
 8012d9a:	f003 0320 	and.w	r3, r3, #32
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d06e      	beq.n	8012e80 <f_open+0x37c>
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	68db      	ldr	r3, [r3, #12]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d06a      	beq.n	8012e80 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	68da      	ldr	r2, [r3, #12]
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012db2:	693b      	ldr	r3, [r7, #16]
 8012db4:	895b      	ldrh	r3, [r3, #10]
 8012db6:	461a      	mov	r2, r3
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	899b      	ldrh	r3, [r3, #12]
 8012dbc:	fb03 f302 	mul.w	r3, r3, r2
 8012dc0:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	689b      	ldr	r3, [r3, #8]
 8012dc6:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	68db      	ldr	r3, [r3, #12]
 8012dcc:	657b      	str	r3, [r7, #84]	; 0x54
 8012dce:	e016      	b.n	8012dfe <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7fe fb96 	bl	8011506 <get_fat>
 8012dda:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012ddc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012dde:	2b01      	cmp	r3, #1
 8012de0:	d802      	bhi.n	8012de8 <f_open+0x2e4>
 8012de2:	2302      	movs	r3, #2
 8012de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012de8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dee:	d102      	bne.n	8012df6 <f_open+0x2f2>
 8012df0:	2301      	movs	r3, #1
 8012df2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012df6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dfa:	1ad3      	subs	r3, r2, r3
 8012dfc:	657b      	str	r3, [r7, #84]	; 0x54
 8012dfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d103      	bne.n	8012e0e <f_open+0x30a>
 8012e06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e0a:	429a      	cmp	r2, r3
 8012e0c:	d8e0      	bhi.n	8012dd0 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012e12:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012e14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d131      	bne.n	8012e80 <f_open+0x37c>
 8012e1c:	693b      	ldr	r3, [r7, #16]
 8012e1e:	899b      	ldrh	r3, [r3, #12]
 8012e20:	461a      	mov	r2, r3
 8012e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e24:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e28:	fb02 f201 	mul.w	r2, r2, r1
 8012e2c:	1a9b      	subs	r3, r3, r2
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d026      	beq.n	8012e80 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7fe fb46 	bl	80114c8 <clust2sect>
 8012e3c:	6478      	str	r0, [r7, #68]	; 0x44
 8012e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d103      	bne.n	8012e4c <f_open+0x348>
						res = FR_INT_ERR;
 8012e44:	2302      	movs	r3, #2
 8012e46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012e4a:	e019      	b.n	8012e80 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	899b      	ldrh	r3, [r3, #12]
 8012e50:	461a      	mov	r2, r3
 8012e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e54:	fbb3 f2f2 	udiv	r2, r3, r2
 8012e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e5a:	441a      	add	r2, r3
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	7858      	ldrb	r0, [r3, #1]
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	6a1a      	ldr	r2, [r3, #32]
 8012e6e:	2301      	movs	r3, #1
 8012e70:	f7fd ff7e 	bl	8010d70 <disk_read>
 8012e74:	4603      	mov	r3, r0
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d002      	beq.n	8012e80 <f_open+0x37c>
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012e80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d002      	beq.n	8012e8e <f_open+0x38a>
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012e8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3760      	adds	r7, #96	; 0x60
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}
 8012e9a:	bf00      	nop
 8012e9c:	274a0000 	.word	0x274a0000

08012ea0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b08e      	sub	sp, #56	; 0x38
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	60f8      	str	r0, [r7, #12]
 8012ea8:	60b9      	str	r1, [r7, #8]
 8012eaa:	607a      	str	r2, [r7, #4]
 8012eac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	f107 0214 	add.w	r2, r7, #20
 8012ebe:	4611      	mov	r1, r2
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7ff fda3 	bl	8012a0c <validate>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012ecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d107      	bne.n	8012ee4 <f_read+0x44>
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	7d5b      	ldrb	r3, [r3, #21]
 8012ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d002      	beq.n	8012eea <f_read+0x4a>
 8012ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ee8:	e135      	b.n	8013156 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	7d1b      	ldrb	r3, [r3, #20]
 8012eee:	f003 0301 	and.w	r3, r3, #1
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d101      	bne.n	8012efa <f_read+0x5a>
 8012ef6:	2307      	movs	r3, #7
 8012ef8:	e12d      	b.n	8013156 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	68da      	ldr	r2, [r3, #12]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	699b      	ldr	r3, [r3, #24]
 8012f02:	1ad3      	subs	r3, r2, r3
 8012f04:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	6a3b      	ldr	r3, [r7, #32]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	f240 811e 	bls.w	801314c <f_read+0x2ac>
 8012f10:	6a3b      	ldr	r3, [r7, #32]
 8012f12:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012f14:	e11a      	b.n	801314c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	699b      	ldr	r3, [r3, #24]
 8012f1a:	697a      	ldr	r2, [r7, #20]
 8012f1c:	8992      	ldrh	r2, [r2, #12]
 8012f1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f22:	fb02 f201 	mul.w	r2, r2, r1
 8012f26:	1a9b      	subs	r3, r3, r2
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	f040 80d5 	bne.w	80130d8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	699b      	ldr	r3, [r3, #24]
 8012f32:	697a      	ldr	r2, [r7, #20]
 8012f34:	8992      	ldrh	r2, [r2, #12]
 8012f36:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f3a:	697a      	ldr	r2, [r7, #20]
 8012f3c:	8952      	ldrh	r2, [r2, #10]
 8012f3e:	3a01      	subs	r2, #1
 8012f40:	4013      	ands	r3, r2
 8012f42:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d12f      	bne.n	8012faa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	699b      	ldr	r3, [r3, #24]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d103      	bne.n	8012f5a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	689b      	ldr	r3, [r3, #8]
 8012f56:	633b      	str	r3, [r7, #48]	; 0x30
 8012f58:	e013      	b.n	8012f82 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d007      	beq.n	8012f72 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	699b      	ldr	r3, [r3, #24]
 8012f66:	4619      	mov	r1, r3
 8012f68:	68f8      	ldr	r0, [r7, #12]
 8012f6a:	f7fe fdb0 	bl	8011ace <clmt_clust>
 8012f6e:	6338      	str	r0, [r7, #48]	; 0x30
 8012f70:	e007      	b.n	8012f82 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012f72:	68fa      	ldr	r2, [r7, #12]
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	69db      	ldr	r3, [r3, #28]
 8012f78:	4619      	mov	r1, r3
 8012f7a:	4610      	mov	r0, r2
 8012f7c:	f7fe fac3 	bl	8011506 <get_fat>
 8012f80:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f84:	2b01      	cmp	r3, #1
 8012f86:	d804      	bhi.n	8012f92 <f_read+0xf2>
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	2202      	movs	r2, #2
 8012f8c:	755a      	strb	r2, [r3, #21]
 8012f8e:	2302      	movs	r3, #2
 8012f90:	e0e1      	b.n	8013156 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f98:	d104      	bne.n	8012fa4 <f_read+0x104>
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2201      	movs	r2, #1
 8012f9e:	755a      	strb	r2, [r3, #21]
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	e0d8      	b.n	8013156 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012fa8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012faa:	697a      	ldr	r2, [r7, #20]
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	69db      	ldr	r3, [r3, #28]
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	4610      	mov	r0, r2
 8012fb4:	f7fe fa88 	bl	80114c8 <clust2sect>
 8012fb8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012fba:	69bb      	ldr	r3, [r7, #24]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d104      	bne.n	8012fca <f_read+0x12a>
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2202      	movs	r2, #2
 8012fc4:	755a      	strb	r2, [r3, #21]
 8012fc6:	2302      	movs	r3, #2
 8012fc8:	e0c5      	b.n	8013156 <f_read+0x2b6>
			sect += csect;
 8012fca:	69ba      	ldr	r2, [r7, #24]
 8012fcc:	69fb      	ldr	r3, [r7, #28]
 8012fce:	4413      	add	r3, r2
 8012fd0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	899b      	ldrh	r3, [r3, #12]
 8012fd6:	461a      	mov	r2, r3
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fde:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d041      	beq.n	801306a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012fe6:	69fa      	ldr	r2, [r7, #28]
 8012fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fea:	4413      	add	r3, r2
 8012fec:	697a      	ldr	r2, [r7, #20]
 8012fee:	8952      	ldrh	r2, [r2, #10]
 8012ff0:	4293      	cmp	r3, r2
 8012ff2:	d905      	bls.n	8013000 <f_read+0x160>
					cc = fs->csize - csect;
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	895b      	ldrh	r3, [r3, #10]
 8012ff8:	461a      	mov	r2, r3
 8012ffa:	69fb      	ldr	r3, [r7, #28]
 8012ffc:	1ad3      	subs	r3, r2, r3
 8012ffe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	7858      	ldrb	r0, [r3, #1]
 8013004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013006:	69ba      	ldr	r2, [r7, #24]
 8013008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801300a:	f7fd feb1 	bl	8010d70 <disk_read>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d004      	beq.n	801301e <f_read+0x17e>
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	2201      	movs	r2, #1
 8013018:	755a      	strb	r2, [r3, #21]
 801301a:	2301      	movs	r3, #1
 801301c:	e09b      	b.n	8013156 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	7d1b      	ldrb	r3, [r3, #20]
 8013022:	b25b      	sxtb	r3, r3
 8013024:	2b00      	cmp	r3, #0
 8013026:	da18      	bge.n	801305a <f_read+0x1ba>
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	6a1a      	ldr	r2, [r3, #32]
 801302c:	69bb      	ldr	r3, [r7, #24]
 801302e:	1ad3      	subs	r3, r2, r3
 8013030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013032:	429a      	cmp	r2, r3
 8013034:	d911      	bls.n	801305a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	6a1a      	ldr	r2, [r3, #32]
 801303a:	69bb      	ldr	r3, [r7, #24]
 801303c:	1ad3      	subs	r3, r2, r3
 801303e:	697a      	ldr	r2, [r7, #20]
 8013040:	8992      	ldrh	r2, [r2, #12]
 8013042:	fb02 f303 	mul.w	r3, r2, r3
 8013046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013048:	18d0      	adds	r0, r2, r3
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013050:	697b      	ldr	r3, [r7, #20]
 8013052:	899b      	ldrh	r3, [r3, #12]
 8013054:	461a      	mov	r2, r3
 8013056:	f7fd ff6b 	bl	8010f30 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	899b      	ldrh	r3, [r3, #12]
 801305e:	461a      	mov	r2, r3
 8013060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013062:	fb02 f303 	mul.w	r3, r2, r3
 8013066:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013068:	e05c      	b.n	8013124 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	6a1b      	ldr	r3, [r3, #32]
 801306e:	69ba      	ldr	r2, [r7, #24]
 8013070:	429a      	cmp	r2, r3
 8013072:	d02e      	beq.n	80130d2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	7d1b      	ldrb	r3, [r3, #20]
 8013078:	b25b      	sxtb	r3, r3
 801307a:	2b00      	cmp	r3, #0
 801307c:	da18      	bge.n	80130b0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	7858      	ldrb	r0, [r3, #1]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	6a1a      	ldr	r2, [r3, #32]
 801308c:	2301      	movs	r3, #1
 801308e:	f7fd fe8f 	bl	8010db0 <disk_write>
 8013092:	4603      	mov	r3, r0
 8013094:	2b00      	cmp	r3, #0
 8013096:	d004      	beq.n	80130a2 <f_read+0x202>
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2201      	movs	r2, #1
 801309c:	755a      	strb	r2, [r3, #21]
 801309e:	2301      	movs	r3, #1
 80130a0:	e059      	b.n	8013156 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	7d1b      	ldrb	r3, [r3, #20]
 80130a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80130aa:	b2da      	uxtb	r2, r3
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80130b0:	697b      	ldr	r3, [r7, #20]
 80130b2:	7858      	ldrb	r0, [r3, #1]
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80130ba:	2301      	movs	r3, #1
 80130bc:	69ba      	ldr	r2, [r7, #24]
 80130be:	f7fd fe57 	bl	8010d70 <disk_read>
 80130c2:	4603      	mov	r3, r0
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d004      	beq.n	80130d2 <f_read+0x232>
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	2201      	movs	r2, #1
 80130cc:	755a      	strb	r2, [r3, #21]
 80130ce:	2301      	movs	r3, #1
 80130d0:	e041      	b.n	8013156 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	69ba      	ldr	r2, [r7, #24]
 80130d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	899b      	ldrh	r3, [r3, #12]
 80130dc:	4618      	mov	r0, r3
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	699b      	ldr	r3, [r3, #24]
 80130e2:	697a      	ldr	r2, [r7, #20]
 80130e4:	8992      	ldrh	r2, [r2, #12]
 80130e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80130ea:	fb02 f201 	mul.w	r2, r2, r1
 80130ee:	1a9b      	subs	r3, r3, r2
 80130f0:	1ac3      	subs	r3, r0, r3
 80130f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80130f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d901      	bls.n	8013100 <f_read+0x260>
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	699b      	ldr	r3, [r3, #24]
 801310a:	697a      	ldr	r2, [r7, #20]
 801310c:	8992      	ldrh	r2, [r2, #12]
 801310e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013112:	fb02 f200 	mul.w	r2, r2, r0
 8013116:	1a9b      	subs	r3, r3, r2
 8013118:	440b      	add	r3, r1
 801311a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801311c:	4619      	mov	r1, r3
 801311e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013120:	f7fd ff06 	bl	8010f30 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013128:	4413      	add	r3, r2
 801312a:	627b      	str	r3, [r7, #36]	; 0x24
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	699a      	ldr	r2, [r3, #24]
 8013130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013132:	441a      	add	r2, r3
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	619a      	str	r2, [r3, #24]
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801313e:	441a      	add	r2, r3
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	601a      	str	r2, [r3, #0]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013148:	1ad3      	subs	r3, r2, r3
 801314a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	f47f aee1 	bne.w	8012f16 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013154:	2300      	movs	r3, #0
}
 8013156:	4618      	mov	r0, r3
 8013158:	3738      	adds	r7, #56	; 0x38
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}

0801315e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801315e:	b580      	push	{r7, lr}
 8013160:	b08c      	sub	sp, #48	; 0x30
 8013162:	af00      	add	r7, sp, #0
 8013164:	60f8      	str	r0, [r7, #12]
 8013166:	60b9      	str	r1, [r7, #8]
 8013168:	607a      	str	r2, [r7, #4]
 801316a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	2200      	movs	r2, #0
 8013174:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	f107 0210 	add.w	r2, r7, #16
 801317c:	4611      	mov	r1, r2
 801317e:	4618      	mov	r0, r3
 8013180:	f7ff fc44 	bl	8012a0c <validate>
 8013184:	4603      	mov	r3, r0
 8013186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801318a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801318e:	2b00      	cmp	r3, #0
 8013190:	d107      	bne.n	80131a2 <f_write+0x44>
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	7d5b      	ldrb	r3, [r3, #21]
 8013196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801319a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d002      	beq.n	80131a8 <f_write+0x4a>
 80131a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131a6:	e16a      	b.n	801347e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	7d1b      	ldrb	r3, [r3, #20]
 80131ac:	f003 0302 	and.w	r3, r3, #2
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d101      	bne.n	80131b8 <f_write+0x5a>
 80131b4:	2307      	movs	r3, #7
 80131b6:	e162      	b.n	801347e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	699a      	ldr	r2, [r3, #24]
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	441a      	add	r2, r3
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	699b      	ldr	r3, [r3, #24]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	f080 814c 	bcs.w	8013462 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	699b      	ldr	r3, [r3, #24]
 80131ce:	43db      	mvns	r3, r3
 80131d0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80131d2:	e146      	b.n	8013462 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	699b      	ldr	r3, [r3, #24]
 80131d8:	693a      	ldr	r2, [r7, #16]
 80131da:	8992      	ldrh	r2, [r2, #12]
 80131dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80131e0:	fb02 f201 	mul.w	r2, r2, r1
 80131e4:	1a9b      	subs	r3, r3, r2
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	f040 80f1 	bne.w	80133ce <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	699b      	ldr	r3, [r3, #24]
 80131f0:	693a      	ldr	r2, [r7, #16]
 80131f2:	8992      	ldrh	r2, [r2, #12]
 80131f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80131f8:	693a      	ldr	r2, [r7, #16]
 80131fa:	8952      	ldrh	r2, [r2, #10]
 80131fc:	3a01      	subs	r2, #1
 80131fe:	4013      	ands	r3, r2
 8013200:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013202:	69bb      	ldr	r3, [r7, #24]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d143      	bne.n	8013290 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	699b      	ldr	r3, [r3, #24]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d10c      	bne.n	801322a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	689b      	ldr	r3, [r3, #8]
 8013214:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013218:	2b00      	cmp	r3, #0
 801321a:	d11a      	bne.n	8013252 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2100      	movs	r1, #0
 8013220:	4618      	mov	r0, r3
 8013222:	f7fe fbbc 	bl	801199e <create_chain>
 8013226:	62b8      	str	r0, [r7, #40]	; 0x28
 8013228:	e013      	b.n	8013252 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801322e:	2b00      	cmp	r3, #0
 8013230:	d007      	beq.n	8013242 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	699b      	ldr	r3, [r3, #24]
 8013236:	4619      	mov	r1, r3
 8013238:	68f8      	ldr	r0, [r7, #12]
 801323a:	f7fe fc48 	bl	8011ace <clmt_clust>
 801323e:	62b8      	str	r0, [r7, #40]	; 0x28
 8013240:	e007      	b.n	8013252 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013242:	68fa      	ldr	r2, [r7, #12]
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	69db      	ldr	r3, [r3, #28]
 8013248:	4619      	mov	r1, r3
 801324a:	4610      	mov	r0, r2
 801324c:	f7fe fba7 	bl	801199e <create_chain>
 8013250:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013254:	2b00      	cmp	r3, #0
 8013256:	f000 8109 	beq.w	801346c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801325c:	2b01      	cmp	r3, #1
 801325e:	d104      	bne.n	801326a <f_write+0x10c>
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	2202      	movs	r2, #2
 8013264:	755a      	strb	r2, [r3, #21]
 8013266:	2302      	movs	r3, #2
 8013268:	e109      	b.n	801347e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013270:	d104      	bne.n	801327c <f_write+0x11e>
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	2201      	movs	r2, #1
 8013276:	755a      	strb	r2, [r3, #21]
 8013278:	2301      	movs	r3, #1
 801327a:	e100      	b.n	801347e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013280:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	689b      	ldr	r3, [r3, #8]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d102      	bne.n	8013290 <f_write+0x132>
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801328e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	7d1b      	ldrb	r3, [r3, #20]
 8013294:	b25b      	sxtb	r3, r3
 8013296:	2b00      	cmp	r3, #0
 8013298:	da18      	bge.n	80132cc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	7858      	ldrb	r0, [r3, #1]
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	6a1a      	ldr	r2, [r3, #32]
 80132a8:	2301      	movs	r3, #1
 80132aa:	f7fd fd81 	bl	8010db0 <disk_write>
 80132ae:	4603      	mov	r3, r0
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d004      	beq.n	80132be <f_write+0x160>
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	2201      	movs	r2, #1
 80132b8:	755a      	strb	r2, [r3, #21]
 80132ba:	2301      	movs	r3, #1
 80132bc:	e0df      	b.n	801347e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	7d1b      	ldrb	r3, [r3, #20]
 80132c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132c6:	b2da      	uxtb	r2, r3
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80132cc:	693a      	ldr	r2, [r7, #16]
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	69db      	ldr	r3, [r3, #28]
 80132d2:	4619      	mov	r1, r3
 80132d4:	4610      	mov	r0, r2
 80132d6:	f7fe f8f7 	bl	80114c8 <clust2sect>
 80132da:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d104      	bne.n	80132ec <f_write+0x18e>
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	2202      	movs	r2, #2
 80132e6:	755a      	strb	r2, [r3, #21]
 80132e8:	2302      	movs	r3, #2
 80132ea:	e0c8      	b.n	801347e <f_write+0x320>
			sect += csect;
 80132ec:	697a      	ldr	r2, [r7, #20]
 80132ee:	69bb      	ldr	r3, [r7, #24]
 80132f0:	4413      	add	r3, r2
 80132f2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	899b      	ldrh	r3, [r3, #12]
 80132f8:	461a      	mov	r2, r3
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013300:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013302:	6a3b      	ldr	r3, [r7, #32]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d043      	beq.n	8013390 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013308:	69ba      	ldr	r2, [r7, #24]
 801330a:	6a3b      	ldr	r3, [r7, #32]
 801330c:	4413      	add	r3, r2
 801330e:	693a      	ldr	r2, [r7, #16]
 8013310:	8952      	ldrh	r2, [r2, #10]
 8013312:	4293      	cmp	r3, r2
 8013314:	d905      	bls.n	8013322 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	895b      	ldrh	r3, [r3, #10]
 801331a:	461a      	mov	r2, r3
 801331c:	69bb      	ldr	r3, [r7, #24]
 801331e:	1ad3      	subs	r3, r2, r3
 8013320:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	7858      	ldrb	r0, [r3, #1]
 8013326:	6a3b      	ldr	r3, [r7, #32]
 8013328:	697a      	ldr	r2, [r7, #20]
 801332a:	69f9      	ldr	r1, [r7, #28]
 801332c:	f7fd fd40 	bl	8010db0 <disk_write>
 8013330:	4603      	mov	r3, r0
 8013332:	2b00      	cmp	r3, #0
 8013334:	d004      	beq.n	8013340 <f_write+0x1e2>
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	2201      	movs	r2, #1
 801333a:	755a      	strb	r2, [r3, #21]
 801333c:	2301      	movs	r3, #1
 801333e:	e09e      	b.n	801347e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	6a1a      	ldr	r2, [r3, #32]
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	1ad3      	subs	r3, r2, r3
 8013348:	6a3a      	ldr	r2, [r7, #32]
 801334a:	429a      	cmp	r2, r3
 801334c:	d918      	bls.n	8013380 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	6a1a      	ldr	r2, [r3, #32]
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	1ad3      	subs	r3, r2, r3
 801335c:	693a      	ldr	r2, [r7, #16]
 801335e:	8992      	ldrh	r2, [r2, #12]
 8013360:	fb02 f303 	mul.w	r3, r2, r3
 8013364:	69fa      	ldr	r2, [r7, #28]
 8013366:	18d1      	adds	r1, r2, r3
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	899b      	ldrh	r3, [r3, #12]
 801336c:	461a      	mov	r2, r3
 801336e:	f7fd fddf 	bl	8010f30 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	7d1b      	ldrb	r3, [r3, #20]
 8013376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801337a:	b2da      	uxtb	r2, r3
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	899b      	ldrh	r3, [r3, #12]
 8013384:	461a      	mov	r2, r3
 8013386:	6a3b      	ldr	r3, [r7, #32]
 8013388:	fb02 f303 	mul.w	r3, r2, r3
 801338c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801338e:	e04b      	b.n	8013428 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	6a1b      	ldr	r3, [r3, #32]
 8013394:	697a      	ldr	r2, [r7, #20]
 8013396:	429a      	cmp	r2, r3
 8013398:	d016      	beq.n	80133c8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	699a      	ldr	r2, [r3, #24]
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d210      	bcs.n	80133c8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	7858      	ldrb	r0, [r3, #1]
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133b0:	2301      	movs	r3, #1
 80133b2:	697a      	ldr	r2, [r7, #20]
 80133b4:	f7fd fcdc 	bl	8010d70 <disk_read>
 80133b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d004      	beq.n	80133c8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	2201      	movs	r2, #1
 80133c2:	755a      	strb	r2, [r3, #21]
 80133c4:	2301      	movs	r3, #1
 80133c6:	e05a      	b.n	801347e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	697a      	ldr	r2, [r7, #20]
 80133cc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	899b      	ldrh	r3, [r3, #12]
 80133d2:	4618      	mov	r0, r3
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	699b      	ldr	r3, [r3, #24]
 80133d8:	693a      	ldr	r2, [r7, #16]
 80133da:	8992      	ldrh	r2, [r2, #12]
 80133dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80133e0:	fb02 f201 	mul.w	r2, r2, r1
 80133e4:	1a9b      	subs	r3, r3, r2
 80133e6:	1ac3      	subs	r3, r0, r3
 80133e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80133ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d901      	bls.n	80133f6 <f_write+0x298>
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	699b      	ldr	r3, [r3, #24]
 8013400:	693a      	ldr	r2, [r7, #16]
 8013402:	8992      	ldrh	r2, [r2, #12]
 8013404:	fbb3 f0f2 	udiv	r0, r3, r2
 8013408:	fb02 f200 	mul.w	r2, r2, r0
 801340c:	1a9b      	subs	r3, r3, r2
 801340e:	440b      	add	r3, r1
 8013410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013412:	69f9      	ldr	r1, [r7, #28]
 8013414:	4618      	mov	r0, r3
 8013416:	f7fd fd8b 	bl	8010f30 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	7d1b      	ldrb	r3, [r3, #20]
 801341e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013422:	b2da      	uxtb	r2, r3
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013428:	69fa      	ldr	r2, [r7, #28]
 801342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342c:	4413      	add	r3, r2
 801342e:	61fb      	str	r3, [r7, #28]
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	699a      	ldr	r2, [r3, #24]
 8013434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013436:	441a      	add	r2, r3
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	619a      	str	r2, [r3, #24]
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	68da      	ldr	r2, [r3, #12]
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	699b      	ldr	r3, [r3, #24]
 8013444:	429a      	cmp	r2, r3
 8013446:	bf38      	it	cc
 8013448:	461a      	movcc	r2, r3
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	60da      	str	r2, [r3, #12]
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013454:	441a      	add	r2, r3
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	601a      	str	r2, [r3, #0]
 801345a:	687a      	ldr	r2, [r7, #4]
 801345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345e:	1ad3      	subs	r3, r2, r3
 8013460:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	2b00      	cmp	r3, #0
 8013466:	f47f aeb5 	bne.w	80131d4 <f_write+0x76>
 801346a:	e000      	b.n	801346e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801346c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	7d1b      	ldrb	r3, [r3, #20]
 8013472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013476:	b2da      	uxtb	r2, r3
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801347c:	2300      	movs	r3, #0
}
 801347e:	4618      	mov	r0, r3
 8013480:	3730      	adds	r7, #48	; 0x30
 8013482:	46bd      	mov	sp, r7
 8013484:	bd80      	pop	{r7, pc}
	...

08013488 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b086      	sub	sp, #24
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f107 0208 	add.w	r2, r7, #8
 8013496:	4611      	mov	r1, r2
 8013498:	4618      	mov	r0, r3
 801349a:	f7ff fab7 	bl	8012a0c <validate>
 801349e:	4603      	mov	r3, r0
 80134a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80134a2:	7dfb      	ldrb	r3, [r7, #23]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d167      	bne.n	8013578 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	7d1b      	ldrb	r3, [r3, #20]
 80134ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d061      	beq.n	8013578 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	7d1b      	ldrb	r3, [r3, #20]
 80134b8:	b25b      	sxtb	r3, r3
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	da15      	bge.n	80134ea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80134be:	68bb      	ldr	r3, [r7, #8]
 80134c0:	7858      	ldrb	r0, [r3, #1]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6a1a      	ldr	r2, [r3, #32]
 80134cc:	2301      	movs	r3, #1
 80134ce:	f7fd fc6f 	bl	8010db0 <disk_write>
 80134d2:	4603      	mov	r3, r0
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d001      	beq.n	80134dc <f_sync+0x54>
 80134d8:	2301      	movs	r3, #1
 80134da:	e04e      	b.n	801357a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	7d1b      	ldrb	r3, [r3, #20]
 80134e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134e4:	b2da      	uxtb	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80134ea:	4b26      	ldr	r3, [pc, #152]	; (8013584 <f_sync+0xfc>)
 80134ec:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80134ee:	68ba      	ldr	r2, [r7, #8]
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f4:	4619      	mov	r1, r3
 80134f6:	4610      	mov	r0, r2
 80134f8:	f7fd ff48 	bl	801138c <move_window>
 80134fc:	4603      	mov	r3, r0
 80134fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013500:	7dfb      	ldrb	r3, [r7, #23]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d138      	bne.n	8013578 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801350a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	330b      	adds	r3, #11
 8013510:	781a      	ldrb	r2, [r3, #0]
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	330b      	adds	r3, #11
 8013516:	f042 0220 	orr.w	r2, r2, #32
 801351a:	b2d2      	uxtb	r2, r2
 801351c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6818      	ldr	r0, [r3, #0]
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	689b      	ldr	r3, [r3, #8]
 8013526:	461a      	mov	r2, r3
 8013528:	68f9      	ldr	r1, [r7, #12]
 801352a:	f7fe fccd 	bl	8011ec8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	f103 021c 	add.w	r2, r3, #28
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	68db      	ldr	r3, [r3, #12]
 8013538:	4619      	mov	r1, r3
 801353a:	4610      	mov	r0, r2
 801353c:	f7fd fccc 	bl	8010ed8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	3316      	adds	r3, #22
 8013544:	6939      	ldr	r1, [r7, #16]
 8013546:	4618      	mov	r0, r3
 8013548:	f7fd fcc6 	bl	8010ed8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	3312      	adds	r3, #18
 8013550:	2100      	movs	r1, #0
 8013552:	4618      	mov	r0, r3
 8013554:	f7fd fca5 	bl	8010ea2 <st_word>
					fs->wflag = 1;
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	2201      	movs	r2, #1
 801355c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	4618      	mov	r0, r3
 8013562:	f7fd ff41 	bl	80113e8 <sync_fs>
 8013566:	4603      	mov	r3, r0
 8013568:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	7d1b      	ldrb	r3, [r3, #20]
 801356e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013572:	b2da      	uxtb	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013578:	7dfb      	ldrb	r3, [r7, #23]
}
 801357a:	4618      	mov	r0, r3
 801357c:	3718      	adds	r7, #24
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	274a0000 	.word	0x274a0000

08013588 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b084      	sub	sp, #16
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f7ff ff79 	bl	8013488 <f_sync>
 8013596:	4603      	mov	r3, r0
 8013598:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801359a:	7bfb      	ldrb	r3, [r7, #15]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d118      	bne.n	80135d2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f107 0208 	add.w	r2, r7, #8
 80135a6:	4611      	mov	r1, r2
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7ff fa2f 	bl	8012a0c <validate>
 80135ae:	4603      	mov	r3, r0
 80135b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80135b2:	7bfb      	ldrb	r3, [r7, #15]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d10c      	bne.n	80135d2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	691b      	ldr	r3, [r3, #16]
 80135bc:	4618      	mov	r0, r3
 80135be:	f7fd fe41 	bl	8011244 <dec_lock>
 80135c2:	4603      	mov	r3, r0
 80135c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80135c6:	7bfb      	ldrb	r3, [r7, #15]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d102      	bne.n	80135d2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2200      	movs	r2, #0
 80135d0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80135d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3710      	adds	r7, #16
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}

080135dc <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80135dc:	b590      	push	{r4, r7, lr}
 80135de:	b091      	sub	sp, #68	; 0x44
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80135e4:	f107 0108 	add.w	r1, r7, #8
 80135e8:	1d3b      	adds	r3, r7, #4
 80135ea:	2200      	movs	r2, #0
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7fe ff87 	bl	8012500 <find_volume>
 80135f2:	4603      	mov	r3, r0
 80135f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80135f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d131      	bne.n	8013664 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013604:	687a      	ldr	r2, [r7, #4]
 8013606:	f107 030c 	add.w	r3, r7, #12
 801360a:	4611      	mov	r1, r2
 801360c:	4618      	mov	r0, r3
 801360e:	f7fe fe47 	bl	80122a0 <follow_path>
 8013612:	4603      	mov	r3, r0
 8013614:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013618:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801361c:	2b00      	cmp	r3, #0
 801361e:	d11a      	bne.n	8013656 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013620:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013624:	b25b      	sxtb	r3, r3
 8013626:	2b00      	cmp	r3, #0
 8013628:	da03      	bge.n	8013632 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	697a      	ldr	r2, [r7, #20]
 801362e:	619a      	str	r2, [r3, #24]
 8013630:	e011      	b.n	8013656 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013632:	7cbb      	ldrb	r3, [r7, #18]
 8013634:	f003 0310 	and.w	r3, r3, #16
 8013638:	2b00      	cmp	r3, #0
 801363a:	d009      	beq.n	8013650 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013640:	68bc      	ldr	r4, [r7, #8]
 8013642:	4611      	mov	r1, r2
 8013644:	4618      	mov	r0, r3
 8013646:	f7fe fc20 	bl	8011e8a <ld_clust>
 801364a:	4603      	mov	r3, r0
 801364c:	61a3      	str	r3, [r4, #24]
 801364e:	e002      	b.n	8013656 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013650:	2305      	movs	r3, #5
 8013652:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013656:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801365a:	2b04      	cmp	r3, #4
 801365c:	d102      	bne.n	8013664 <f_chdir+0x88>
 801365e:	2305      	movs	r3, #5
 8013660:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013664:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013668:	4618      	mov	r0, r3
 801366a:	3744      	adds	r7, #68	; 0x44
 801366c:	46bd      	mov	sp, r7
 801366e:	bd90      	pop	{r4, r7, pc}

08013670 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b090      	sub	sp, #64	; 0x40
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	f107 0208 	add.w	r2, r7, #8
 8013680:	4611      	mov	r1, r2
 8013682:	4618      	mov	r0, r3
 8013684:	f7ff f9c2 	bl	8012a0c <validate>
 8013688:	4603      	mov	r3, r0
 801368a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801368e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013692:	2b00      	cmp	r3, #0
 8013694:	d103      	bne.n	801369e <f_lseek+0x2e>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	7d5b      	ldrb	r3, [r3, #21]
 801369a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801369e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d002      	beq.n	80136ac <f_lseek+0x3c>
 80136a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80136aa:	e201      	b.n	8013ab0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	f000 80d9 	beq.w	8013868 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136bc:	d15a      	bne.n	8013774 <f_lseek+0x104>
			tbl = fp->cltbl;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80136c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c6:	1d1a      	adds	r2, r3, #4
 80136c8:	627a      	str	r2, [r7, #36]	; 0x24
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	617b      	str	r3, [r7, #20]
 80136ce:	2302      	movs	r3, #2
 80136d0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	689b      	ldr	r3, [r3, #8]
 80136d6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80136d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d03a      	beq.n	8013754 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80136de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e0:	613b      	str	r3, [r7, #16]
 80136e2:	2300      	movs	r3, #0
 80136e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e8:	3302      	adds	r3, #2
 80136ea:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80136ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ee:	60fb      	str	r3, [r7, #12]
 80136f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f2:	3301      	adds	r3, #1
 80136f4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7fd ff03 	bl	8011506 <get_fat>
 8013700:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013704:	2b01      	cmp	r3, #1
 8013706:	d804      	bhi.n	8013712 <f_lseek+0xa2>
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2202      	movs	r2, #2
 801370c:	755a      	strb	r2, [r3, #21]
 801370e:	2302      	movs	r3, #2
 8013710:	e1ce      	b.n	8013ab0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013718:	d104      	bne.n	8013724 <f_lseek+0xb4>
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	2201      	movs	r2, #1
 801371e:	755a      	strb	r2, [r3, #21]
 8013720:	2301      	movs	r3, #1
 8013722:	e1c5      	b.n	8013ab0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	3301      	adds	r3, #1
 8013728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801372a:	429a      	cmp	r2, r3
 801372c:	d0de      	beq.n	80136ec <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801372e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	429a      	cmp	r2, r3
 8013734:	d809      	bhi.n	801374a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013738:	1d1a      	adds	r2, r3, #4
 801373a:	627a      	str	r2, [r7, #36]	; 0x24
 801373c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801373e:	601a      	str	r2, [r3, #0]
 8013740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013742:	1d1a      	adds	r2, r3, #4
 8013744:	627a      	str	r2, [r7, #36]	; 0x24
 8013746:	693a      	ldr	r2, [r7, #16]
 8013748:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	69db      	ldr	r3, [r3, #28]
 801374e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013750:	429a      	cmp	r2, r3
 8013752:	d3c4      	bcc.n	80136de <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801375a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801375c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	429a      	cmp	r2, r3
 8013762:	d803      	bhi.n	801376c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013766:	2200      	movs	r2, #0
 8013768:	601a      	str	r2, [r3, #0]
 801376a:	e19f      	b.n	8013aac <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801376c:	2311      	movs	r3, #17
 801376e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013772:	e19b      	b.n	8013aac <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	68db      	ldr	r3, [r3, #12]
 8013778:	683a      	ldr	r2, [r7, #0]
 801377a:	429a      	cmp	r2, r3
 801377c:	d902      	bls.n	8013784 <f_lseek+0x114>
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	68db      	ldr	r3, [r3, #12]
 8013782:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	683a      	ldr	r2, [r7, #0]
 8013788:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	2b00      	cmp	r3, #0
 801378e:	f000 818d 	beq.w	8013aac <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	3b01      	subs	r3, #1
 8013796:	4619      	mov	r1, r3
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f7fe f998 	bl	8011ace <clmt_clust>
 801379e:	4602      	mov	r2, r0
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80137a4:	68ba      	ldr	r2, [r7, #8]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	69db      	ldr	r3, [r3, #28]
 80137aa:	4619      	mov	r1, r3
 80137ac:	4610      	mov	r0, r2
 80137ae:	f7fd fe8b 	bl	80114c8 <clust2sect>
 80137b2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80137b4:	69bb      	ldr	r3, [r7, #24]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d104      	bne.n	80137c4 <f_lseek+0x154>
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2202      	movs	r2, #2
 80137be:	755a      	strb	r2, [r3, #21]
 80137c0:	2302      	movs	r3, #2
 80137c2:	e175      	b.n	8013ab0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	3b01      	subs	r3, #1
 80137c8:	68ba      	ldr	r2, [r7, #8]
 80137ca:	8992      	ldrh	r2, [r2, #12]
 80137cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80137d0:	68ba      	ldr	r2, [r7, #8]
 80137d2:	8952      	ldrh	r2, [r2, #10]
 80137d4:	3a01      	subs	r2, #1
 80137d6:	4013      	ands	r3, r2
 80137d8:	69ba      	ldr	r2, [r7, #24]
 80137da:	4413      	add	r3, r2
 80137dc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	699b      	ldr	r3, [r3, #24]
 80137e2:	68ba      	ldr	r2, [r7, #8]
 80137e4:	8992      	ldrh	r2, [r2, #12]
 80137e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80137ea:	fb02 f201 	mul.w	r2, r2, r1
 80137ee:	1a9b      	subs	r3, r3, r2
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	f000 815b 	beq.w	8013aac <f_lseek+0x43c>
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6a1b      	ldr	r3, [r3, #32]
 80137fa:	69ba      	ldr	r2, [r7, #24]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	f000 8155 	beq.w	8013aac <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	7d1b      	ldrb	r3, [r3, #20]
 8013806:	b25b      	sxtb	r3, r3
 8013808:	2b00      	cmp	r3, #0
 801380a:	da18      	bge.n	801383e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	7858      	ldrb	r0, [r3, #1]
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6a1a      	ldr	r2, [r3, #32]
 801381a:	2301      	movs	r3, #1
 801381c:	f7fd fac8 	bl	8010db0 <disk_write>
 8013820:	4603      	mov	r3, r0
 8013822:	2b00      	cmp	r3, #0
 8013824:	d004      	beq.n	8013830 <f_lseek+0x1c0>
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2201      	movs	r2, #1
 801382a:	755a      	strb	r2, [r3, #21]
 801382c:	2301      	movs	r3, #1
 801382e:	e13f      	b.n	8013ab0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	7d1b      	ldrb	r3, [r3, #20]
 8013834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013838:	b2da      	uxtb	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	7858      	ldrb	r0, [r3, #1]
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013848:	2301      	movs	r3, #1
 801384a:	69ba      	ldr	r2, [r7, #24]
 801384c:	f7fd fa90 	bl	8010d70 <disk_read>
 8013850:	4603      	mov	r3, r0
 8013852:	2b00      	cmp	r3, #0
 8013854:	d004      	beq.n	8013860 <f_lseek+0x1f0>
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2201      	movs	r2, #1
 801385a:	755a      	strb	r2, [r3, #21]
 801385c:	2301      	movs	r3, #1
 801385e:	e127      	b.n	8013ab0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	69ba      	ldr	r2, [r7, #24]
 8013864:	621a      	str	r2, [r3, #32]
 8013866:	e121      	b.n	8013aac <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	68db      	ldr	r3, [r3, #12]
 801386c:	683a      	ldr	r2, [r7, #0]
 801386e:	429a      	cmp	r2, r3
 8013870:	d908      	bls.n	8013884 <f_lseek+0x214>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	7d1b      	ldrb	r3, [r3, #20]
 8013876:	f003 0302 	and.w	r3, r3, #2
 801387a:	2b00      	cmp	r3, #0
 801387c:	d102      	bne.n	8013884 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	68db      	ldr	r3, [r3, #12]
 8013882:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	699b      	ldr	r3, [r3, #24]
 8013888:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801388a:	2300      	movs	r3, #0
 801388c:	637b      	str	r3, [r7, #52]	; 0x34
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013892:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	f000 80b5 	beq.w	8013a06 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	895b      	ldrh	r3, [r3, #10]
 80138a0:	461a      	mov	r2, r3
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	899b      	ldrh	r3, [r3, #12]
 80138a6:	fb03 f302 	mul.w	r3, r3, r2
 80138aa:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80138ac:	6a3b      	ldr	r3, [r7, #32]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d01b      	beq.n	80138ea <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	1e5a      	subs	r2, r3, #1
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80138bc:	6a3b      	ldr	r3, [r7, #32]
 80138be:	1e59      	subs	r1, r3, #1
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d30f      	bcc.n	80138ea <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80138ca:	6a3b      	ldr	r3, [r7, #32]
 80138cc:	1e5a      	subs	r2, r3, #1
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	425b      	negs	r3, r3
 80138d2:	401a      	ands	r2, r3
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	699b      	ldr	r3, [r3, #24]
 80138dc:	683a      	ldr	r2, [r7, #0]
 80138de:	1ad3      	subs	r3, r2, r3
 80138e0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	69db      	ldr	r3, [r3, #28]
 80138e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80138e8:	e022      	b.n	8013930 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	689b      	ldr	r3, [r3, #8]
 80138ee:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80138f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d119      	bne.n	801392a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2100      	movs	r1, #0
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7fe f84f 	bl	801199e <create_chain>
 8013900:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013904:	2b01      	cmp	r3, #1
 8013906:	d104      	bne.n	8013912 <f_lseek+0x2a2>
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2202      	movs	r2, #2
 801390c:	755a      	strb	r2, [r3, #21]
 801390e:	2302      	movs	r3, #2
 8013910:	e0ce      	b.n	8013ab0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013918:	d104      	bne.n	8013924 <f_lseek+0x2b4>
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	2201      	movs	r2, #1
 801391e:	755a      	strb	r2, [r3, #21]
 8013920:	2301      	movs	r3, #1
 8013922:	e0c5      	b.n	8013ab0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013928:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801392e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013932:	2b00      	cmp	r3, #0
 8013934:	d067      	beq.n	8013a06 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013936:	e03a      	b.n	80139ae <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013938:	683a      	ldr	r2, [r7, #0]
 801393a:	69fb      	ldr	r3, [r7, #28]
 801393c:	1ad3      	subs	r3, r2, r3
 801393e:	603b      	str	r3, [r7, #0]
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	699a      	ldr	r2, [r3, #24]
 8013944:	69fb      	ldr	r3, [r7, #28]
 8013946:	441a      	add	r2, r3
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	7d1b      	ldrb	r3, [r3, #20]
 8013950:	f003 0302 	and.w	r3, r3, #2
 8013954:	2b00      	cmp	r3, #0
 8013956:	d00b      	beq.n	8013970 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801395c:	4618      	mov	r0, r3
 801395e:	f7fe f81e 	bl	801199e <create_chain>
 8013962:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013966:	2b00      	cmp	r3, #0
 8013968:	d108      	bne.n	801397c <f_lseek+0x30c>
							ofs = 0; break;
 801396a:	2300      	movs	r3, #0
 801396c:	603b      	str	r3, [r7, #0]
 801396e:	e022      	b.n	80139b6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013974:	4618      	mov	r0, r3
 8013976:	f7fd fdc6 	bl	8011506 <get_fat>
 801397a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013982:	d104      	bne.n	801398e <f_lseek+0x31e>
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2201      	movs	r2, #1
 8013988:	755a      	strb	r2, [r3, #21]
 801398a:	2301      	movs	r3, #1
 801398c:	e090      	b.n	8013ab0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013990:	2b01      	cmp	r3, #1
 8013992:	d904      	bls.n	801399e <f_lseek+0x32e>
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	69db      	ldr	r3, [r3, #28]
 8013998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801399a:	429a      	cmp	r2, r3
 801399c:	d304      	bcc.n	80139a8 <f_lseek+0x338>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2202      	movs	r2, #2
 80139a2:	755a      	strb	r2, [r3, #21]
 80139a4:	2302      	movs	r3, #2
 80139a6:	e083      	b.n	8013ab0 <f_lseek+0x440>
					fp->clust = clst;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139ac:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80139ae:	683a      	ldr	r2, [r7, #0]
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	429a      	cmp	r2, r3
 80139b4:	d8c0      	bhi.n	8013938 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	699a      	ldr	r2, [r3, #24]
 80139ba:	683b      	ldr	r3, [r7, #0]
 80139bc:	441a      	add	r2, r3
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	899b      	ldrh	r3, [r3, #12]
 80139c6:	461a      	mov	r2, r3
 80139c8:	683b      	ldr	r3, [r7, #0]
 80139ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80139ce:	fb02 f201 	mul.w	r2, r2, r1
 80139d2:	1a9b      	subs	r3, r3, r2
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d016      	beq.n	8013a06 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fd fd73 	bl	80114c8 <clust2sect>
 80139e2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80139e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d104      	bne.n	80139f4 <f_lseek+0x384>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2202      	movs	r2, #2
 80139ee:	755a      	strb	r2, [r3, #21]
 80139f0:	2302      	movs	r3, #2
 80139f2:	e05d      	b.n	8013ab0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	899b      	ldrh	r3, [r3, #12]
 80139f8:	461a      	mov	r2, r3
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a02:	4413      	add	r3, r2
 8013a04:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	699a      	ldr	r2, [r3, #24]
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	68db      	ldr	r3, [r3, #12]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d90a      	bls.n	8013a28 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	699a      	ldr	r2, [r3, #24]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	7d1b      	ldrb	r3, [r3, #20]
 8013a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a22:	b2da      	uxtb	r2, r3
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	699b      	ldr	r3, [r3, #24]
 8013a2c:	68ba      	ldr	r2, [r7, #8]
 8013a2e:	8992      	ldrh	r2, [r2, #12]
 8013a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a34:	fb02 f201 	mul.w	r2, r2, r1
 8013a38:	1a9b      	subs	r3, r3, r2
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d036      	beq.n	8013aac <f_lseek+0x43c>
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	6a1b      	ldr	r3, [r3, #32]
 8013a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d031      	beq.n	8013aac <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	7d1b      	ldrb	r3, [r3, #20]
 8013a4c:	b25b      	sxtb	r3, r3
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	da18      	bge.n	8013a84 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	7858      	ldrb	r0, [r3, #1]
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6a1a      	ldr	r2, [r3, #32]
 8013a60:	2301      	movs	r3, #1
 8013a62:	f7fd f9a5 	bl	8010db0 <disk_write>
 8013a66:	4603      	mov	r3, r0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d004      	beq.n	8013a76 <f_lseek+0x406>
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2201      	movs	r2, #1
 8013a70:	755a      	strb	r2, [r3, #21]
 8013a72:	2301      	movs	r3, #1
 8013a74:	e01c      	b.n	8013ab0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	7d1b      	ldrb	r3, [r3, #20]
 8013a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a7e:	b2da      	uxtb	r2, r3
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	7858      	ldrb	r0, [r3, #1]
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a8e:	2301      	movs	r3, #1
 8013a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a92:	f7fd f96d 	bl	8010d70 <disk_read>
 8013a96:	4603      	mov	r3, r0
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d004      	beq.n	8013aa6 <f_lseek+0x436>
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2201      	movs	r2, #1
 8013aa0:	755a      	strb	r2, [r3, #21]
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	e004      	b.n	8013ab0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013aaa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013aac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	3740      	adds	r7, #64	; 0x40
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}

08013ab8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b09e      	sub	sp, #120	; 0x78
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013ac4:	f107 010c 	add.w	r1, r7, #12
 8013ac8:	1d3b      	adds	r3, r7, #4
 8013aca:	2202      	movs	r2, #2
 8013acc:	4618      	mov	r0, r3
 8013ace:	f7fe fd17 	bl	8012500 <find_volume>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013adc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	f040 80a4 	bne.w	8013c2e <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013ae6:	687a      	ldr	r2, [r7, #4]
 8013ae8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013aec:	4611      	mov	r1, r2
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7fe fbd6 	bl	80122a0 <follow_path>
 8013af4:	4603      	mov	r3, r0
 8013af6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013afa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d108      	bne.n	8013b14 <f_unlink+0x5c>
 8013b02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013b06:	f003 0320 	and.w	r3, r3, #32
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d002      	beq.n	8013b14 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013b0e:	2306      	movs	r3, #6
 8013b10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013b14:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d108      	bne.n	8013b2e <f_unlink+0x76>
 8013b1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013b20:	2102      	movs	r1, #2
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7fd fa82 	bl	801102c <chk_lock>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013b2e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d17b      	bne.n	8013c2e <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013b36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013b3a:	b25b      	sxtb	r3, r3
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	da03      	bge.n	8013b48 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013b40:	2306      	movs	r3, #6
 8013b42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013b46:	e008      	b.n	8013b5a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013b48:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013b4c:	f003 0301 	and.w	r3, r3, #1
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d002      	beq.n	8013b5a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013b54:	2307      	movs	r3, #7
 8013b56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013b5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d13d      	bne.n	8013bde <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013b66:	4611      	mov	r1, r2
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7fe f98e 	bl	8011e8a <ld_clust>
 8013b6e:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013b70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013b74:	f003 0310 	and.w	r3, r3, #16
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d030      	beq.n	8013bde <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	699b      	ldr	r3, [r3, #24]
 8013b80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013b82:	429a      	cmp	r2, r3
 8013b84:	d103      	bne.n	8013b8e <f_unlink+0xd6>
						res = FR_DENIED;
 8013b86:	2307      	movs	r3, #7
 8013b88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013b8c:	e027      	b.n	8013bde <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b94:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013b96:	f107 0310 	add.w	r3, r7, #16
 8013b9a:	2100      	movs	r1, #0
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7fd ffce 	bl	8011b3e <dir_sdi>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013ba8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d116      	bne.n	8013bde <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013bb0:	f107 0310 	add.w	r3, r7, #16
 8013bb4:	2100      	movs	r1, #0
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7fe f9a6 	bl	8011f08 <dir_read>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013bc2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d102      	bne.n	8013bd0 <f_unlink+0x118>
 8013bca:	2307      	movs	r3, #7
 8013bcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013bd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013bd4:	2b04      	cmp	r3, #4
 8013bd6:	d102      	bne.n	8013bde <f_unlink+0x126>
 8013bd8:	2300      	movs	r3, #0
 8013bda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013bde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d123      	bne.n	8013c2e <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013be6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7fe fa70 	bl	80120d0 <dir_remove>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013bf6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d10c      	bne.n	8013c18 <f_unlink+0x160>
 8013bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d009      	beq.n	8013c18 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013c04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013c08:	2200      	movs	r2, #0
 8013c0a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7fd fe61 	bl	80118d4 <remove_chain>
 8013c12:	4603      	mov	r3, r0
 8013c14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013c18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d106      	bne.n	8013c2e <f_unlink+0x176>
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7fd fbe0 	bl	80113e8 <sync_fs>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013c2e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	3778      	adds	r7, #120	; 0x78
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
	...

08013c3c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b096      	sub	sp, #88	; 0x58
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013c44:	f107 0108 	add.w	r1, r7, #8
 8013c48:	1d3b      	adds	r3, r7, #4
 8013c4a:	2202      	movs	r2, #2
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7fe fc57 	bl	8012500 <find_volume>
 8013c52:	4603      	mov	r3, r0
 8013c54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f040 80fe 	bne.w	8013e62 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013c66:	687a      	ldr	r2, [r7, #4]
 8013c68:	f107 030c 	add.w	r3, r7, #12
 8013c6c:	4611      	mov	r1, r2
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7fe fb16 	bl	80122a0 <follow_path>
 8013c74:	4603      	mov	r3, r0
 8013c76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013c7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d102      	bne.n	8013c88 <f_mkdir+0x4c>
 8013c82:	2308      	movs	r3, #8
 8013c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013c88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c8c:	2b04      	cmp	r3, #4
 8013c8e:	d108      	bne.n	8013ca2 <f_mkdir+0x66>
 8013c90:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013c94:	f003 0320 	and.w	r3, r3, #32
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d002      	beq.n	8013ca2 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013c9c:	2306      	movs	r3, #6
 8013c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013ca2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ca6:	2b04      	cmp	r3, #4
 8013ca8:	f040 80db 	bne.w	8013e62 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013cac:	f107 030c 	add.w	r3, r7, #12
 8013cb0:	2100      	movs	r1, #0
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7fd fe73 	bl	801199e <create_chain>
 8013cb8:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	895b      	ldrh	r3, [r3, #10]
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	68bb      	ldr	r3, [r7, #8]
 8013cc2:	899b      	ldrh	r3, [r3, #12]
 8013cc4:	fb03 f302 	mul.w	r3, r3, r2
 8013cc8:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013cca:	2300      	movs	r3, #0
 8013ccc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d102      	bne.n	8013cdc <f_mkdir+0xa0>
 8013cd6:	2307      	movs	r3, #7
 8013cd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cde:	2b01      	cmp	r3, #1
 8013ce0:	d102      	bne.n	8013ce8 <f_mkdir+0xac>
 8013ce2:	2302      	movs	r3, #2
 8013ce4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cee:	d102      	bne.n	8013cf6 <f_mkdir+0xba>
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013cf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d106      	bne.n	8013d0c <f_mkdir+0xd0>
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7fd faff 	bl	8011304 <sync_window>
 8013d06:	4603      	mov	r3, r0
 8013d08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013d0c:	4b58      	ldr	r3, [pc, #352]	; (8013e70 <f_mkdir+0x234>)
 8013d0e:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013d10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d16c      	bne.n	8013df2 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7fd fbd3 	bl	80114c8 <clust2sect>
 8013d22:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	3338      	adds	r3, #56	; 0x38
 8013d28:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	899b      	ldrh	r3, [r3, #12]
 8013d2e:	461a      	mov	r2, r3
 8013d30:	2100      	movs	r1, #0
 8013d32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013d34:	f7fd f91d 	bl	8010f72 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013d38:	220b      	movs	r2, #11
 8013d3a:	2120      	movs	r1, #32
 8013d3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013d3e:	f7fd f918 	bl	8010f72 <mem_set>
					dir[DIR_Name] = '.';
 8013d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d44:	222e      	movs	r2, #46	; 0x2e
 8013d46:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d4a:	330b      	adds	r3, #11
 8013d4c:	2210      	movs	r2, #16
 8013d4e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d52:	3316      	adds	r3, #22
 8013d54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7fd f8be 	bl	8010ed8 <st_dword>
					st_clust(fs, dir, dcl);
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7fe f8b0 	bl	8011ec8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d6a:	3320      	adds	r3, #32
 8013d6c:	2220      	movs	r2, #32
 8013d6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d70:	4618      	mov	r0, r3
 8013d72:	f7fd f8dd 	bl	8010f30 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d78:	3321      	adds	r3, #33	; 0x21
 8013d7a:	222e      	movs	r2, #46	; 0x2e
 8013d7c:	701a      	strb	r2, [r3, #0]
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	781b      	ldrb	r3, [r3, #0]
 8013d86:	2b03      	cmp	r3, #3
 8013d88:	d106      	bne.n	8013d98 <f_mkdir+0x15c>
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d90:	429a      	cmp	r2, r3
 8013d92:	d101      	bne.n	8013d98 <f_mkdir+0x15c>
 8013d94:	2300      	movs	r3, #0
 8013d96:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013d98:	68b8      	ldr	r0, [r7, #8]
 8013d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d9c:	3320      	adds	r3, #32
 8013d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013da0:	4619      	mov	r1, r3
 8013da2:	f7fe f891 	bl	8011ec8 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	895b      	ldrh	r3, [r3, #10]
 8013daa:	653b      	str	r3, [r7, #80]	; 0x50
 8013dac:	e01c      	b.n	8013de8 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013db0:	1c5a      	adds	r2, r3, #1
 8013db2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013db4:	68ba      	ldr	r2, [r7, #8]
 8013db6:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	2201      	movs	r2, #1
 8013dbc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7fd fa9f 	bl	8011304 <sync_window>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d10d      	bne.n	8013df0 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	899b      	ldrh	r3, [r3, #12]
 8013dd8:	461a      	mov	r2, r3
 8013dda:	2100      	movs	r1, #0
 8013ddc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013dde:	f7fd f8c8 	bl	8010f72 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013de4:	3b01      	subs	r3, #1
 8013de6:	653b      	str	r3, [r7, #80]	; 0x50
 8013de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d1df      	bne.n	8013dae <f_mkdir+0x172>
 8013dee:	e000      	b.n	8013df2 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013df0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013df2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d107      	bne.n	8013e0a <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013dfa:	f107 030c 	add.w	r3, r7, #12
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7fe f934 	bl	801206c <dir_register>
 8013e04:	4603      	mov	r3, r0
 8013e06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013e0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d120      	bne.n	8013e54 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e14:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e18:	3316      	adds	r3, #22
 8013e1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7fd f85b 	bl	8010ed8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7fe f84d 	bl	8011ec8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e30:	330b      	adds	r3, #11
 8013e32:	2210      	movs	r2, #16
 8013e34:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	2201      	movs	r2, #1
 8013e3a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d10e      	bne.n	8013e62 <f_mkdir+0x226>
					res = sync_fs(fs);
 8013e44:	68bb      	ldr	r3, [r7, #8]
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7fd face 	bl	80113e8 <sync_fs>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013e52:	e006      	b.n	8013e62 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013e54:	f107 030c 	add.w	r3, r7, #12
 8013e58:	2200      	movs	r2, #0
 8013e5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7fd fd39 	bl	80118d4 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013e62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	3758      	adds	r7, #88	; 0x58
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}
 8013e6e:	bf00      	nop
 8013e70:	274a0000 	.word	0x274a0000

08013e74 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b088      	sub	sp, #32
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	60f8      	str	r0, [r7, #12]
 8013e7c:	60b9      	str	r1, [r7, #8]
 8013e7e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013e80:	2300      	movs	r3, #0
 8013e82:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013e88:	e017      	b.n	8013eba <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8013e8a:	f107 0310 	add.w	r3, r7, #16
 8013e8e:	f107 0114 	add.w	r1, r7, #20
 8013e92:	2201      	movs	r2, #1
 8013e94:	6878      	ldr	r0, [r7, #4]
 8013e96:	f7ff f803 	bl	8012ea0 <f_read>
		if (rc != 1) break;
 8013e9a:	693b      	ldr	r3, [r7, #16]
 8013e9c:	2b01      	cmp	r3, #1
 8013e9e:	d112      	bne.n	8013ec6 <f_gets+0x52>
		c = s[0];
 8013ea0:	7d3b      	ldrb	r3, [r7, #20]
 8013ea2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8013ea4:	69bb      	ldr	r3, [r7, #24]
 8013ea6:	1c5a      	adds	r2, r3, #1
 8013ea8:	61ba      	str	r2, [r7, #24]
 8013eaa:	7dfa      	ldrb	r2, [r7, #23]
 8013eac:	701a      	strb	r2, [r3, #0]
		n++;
 8013eae:	69fb      	ldr	r3, [r7, #28]
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8013eb4:	7dfb      	ldrb	r3, [r7, #23]
 8013eb6:	2b0a      	cmp	r3, #10
 8013eb8:	d007      	beq.n	8013eca <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	3b01      	subs	r3, #1
 8013ebe:	69fa      	ldr	r2, [r7, #28]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	dbe2      	blt.n	8013e8a <f_gets+0x16>
 8013ec4:	e002      	b.n	8013ecc <f_gets+0x58>
		if (rc != 1) break;
 8013ec6:	bf00      	nop
 8013ec8:	e000      	b.n	8013ecc <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8013eca:	bf00      	nop
	}
	*p = 0;
 8013ecc:	69bb      	ldr	r3, [r7, #24]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013ed2:	69fb      	ldr	r3, [r7, #28]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d001      	beq.n	8013edc <f_gets+0x68>
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	e000      	b.n	8013ede <f_gets+0x6a>
 8013edc:	2300      	movs	r3, #0
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3720      	adds	r7, #32
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
	...

08013ee8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013ee8:	b480      	push	{r7}
 8013eea:	b087      	sub	sp, #28
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	4613      	mov	r3, r2
 8013ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013efa:	2300      	movs	r3, #0
 8013efc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013efe:	4b1f      	ldr	r3, [pc, #124]	; (8013f7c <FATFS_LinkDriverEx+0x94>)
 8013f00:	7a5b      	ldrb	r3, [r3, #9]
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d131      	bne.n	8013f6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013f08:	4b1c      	ldr	r3, [pc, #112]	; (8013f7c <FATFS_LinkDriverEx+0x94>)
 8013f0a:	7a5b      	ldrb	r3, [r3, #9]
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	461a      	mov	r2, r3
 8013f10:	4b1a      	ldr	r3, [pc, #104]	; (8013f7c <FATFS_LinkDriverEx+0x94>)
 8013f12:	2100      	movs	r1, #0
 8013f14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013f16:	4b19      	ldr	r3, [pc, #100]	; (8013f7c <FATFS_LinkDriverEx+0x94>)
 8013f18:	7a5b      	ldrb	r3, [r3, #9]
 8013f1a:	b2db      	uxtb	r3, r3
 8013f1c:	4a17      	ldr	r2, [pc, #92]	; (8013f7c <FATFS_LinkDriverEx+0x94>)
 8013f1e:	009b      	lsls	r3, r3, #2
 8013f20:	4413      	add	r3, r2
 8013f22:	68fa      	ldr	r2, [r7, #12]
 8013f24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013f26:	4b15      	ldr	r3, [pc, #84]	; (8013f7c <FATFS_LinkDriverEx+0x94>)
 8013f28:	7a5b      	ldrb	r3, [r3, #9]
 8013f2a:	b2db      	uxtb	r3, r3
 8013f2c:	461a      	mov	r2, r3
 8013f2e:	4b13      	ldr	r3, [pc, #76]	; (8013f7c <FATFS_LinkDriverEx+0x94>)
 8013f30:	4413      	add	r3, r2
 8013f32:	79fa      	ldrb	r2, [r7, #7]
 8013f34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013f36:	4b11      	ldr	r3, [pc, #68]	; (8013f7c <FATFS_LinkDriverEx+0x94>)
 8013f38:	7a5b      	ldrb	r3, [r3, #9]
 8013f3a:	b2db      	uxtb	r3, r3
 8013f3c:	1c5a      	adds	r2, r3, #1
 8013f3e:	b2d1      	uxtb	r1, r2
 8013f40:	4a0e      	ldr	r2, [pc, #56]	; (8013f7c <FATFS_LinkDriverEx+0x94>)
 8013f42:	7251      	strb	r1, [r2, #9]
 8013f44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013f46:	7dbb      	ldrb	r3, [r7, #22]
 8013f48:	3330      	adds	r3, #48	; 0x30
 8013f4a:	b2da      	uxtb	r2, r3
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	3301      	adds	r3, #1
 8013f54:	223a      	movs	r2, #58	; 0x3a
 8013f56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	3302      	adds	r3, #2
 8013f5c:	222f      	movs	r2, #47	; 0x2f
 8013f5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	3303      	adds	r3, #3
 8013f64:	2200      	movs	r2, #0
 8013f66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013f68:	2300      	movs	r3, #0
 8013f6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	371c      	adds	r7, #28
 8013f72:	46bd      	mov	sp, r7
 8013f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f78:	4770      	bx	lr
 8013f7a:	bf00      	nop
 8013f7c:	20041328 	.word	0x20041328

08013f80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	6839      	ldr	r1, [r7, #0]
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f7ff ffaa 	bl	8013ee8 <FATFS_LinkDriverEx>
 8013f94:	4603      	mov	r3, r0
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	3708      	adds	r7, #8
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	bd80      	pop	{r7, pc}

08013f9e <__cxa_guard_acquire>:
 8013f9e:	6803      	ldr	r3, [r0, #0]
 8013fa0:	07db      	lsls	r3, r3, #31
 8013fa2:	d406      	bmi.n	8013fb2 <__cxa_guard_acquire+0x14>
 8013fa4:	7843      	ldrb	r3, [r0, #1]
 8013fa6:	b103      	cbz	r3, 8013faa <__cxa_guard_acquire+0xc>
 8013fa8:	deff      	udf	#255	; 0xff
 8013faa:	2301      	movs	r3, #1
 8013fac:	7043      	strb	r3, [r0, #1]
 8013fae:	4618      	mov	r0, r3
 8013fb0:	4770      	bx	lr
 8013fb2:	2000      	movs	r0, #0
 8013fb4:	4770      	bx	lr

08013fb6 <__cxa_guard_release>:
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	6003      	str	r3, [r0, #0]
 8013fba:	4770      	bx	lr
 8013fbc:	0000      	movs	r0, r0
	...

08013fc0 <cos>:
 8013fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013fc2:	ec51 0b10 	vmov	r0, r1, d0
 8013fc6:	4a1e      	ldr	r2, [pc, #120]	; (8014040 <cos+0x80>)
 8013fc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	dc06      	bgt.n	8013fde <cos+0x1e>
 8013fd0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014038 <cos+0x78>
 8013fd4:	f000 fa74 	bl	80144c0 <__kernel_cos>
 8013fd8:	ec51 0b10 	vmov	r0, r1, d0
 8013fdc:	e007      	b.n	8013fee <cos+0x2e>
 8013fde:	4a19      	ldr	r2, [pc, #100]	; (8014044 <cos+0x84>)
 8013fe0:	4293      	cmp	r3, r2
 8013fe2:	dd09      	ble.n	8013ff8 <cos+0x38>
 8013fe4:	ee10 2a10 	vmov	r2, s0
 8013fe8:	460b      	mov	r3, r1
 8013fea:	f7ec f965 	bl	80002b8 <__aeabi_dsub>
 8013fee:	ec41 0b10 	vmov	d0, r0, r1
 8013ff2:	b005      	add	sp, #20
 8013ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ff8:	4668      	mov	r0, sp
 8013ffa:	f000 f86d 	bl	80140d8 <__ieee754_rem_pio2>
 8013ffe:	f000 0003 	and.w	r0, r0, #3
 8014002:	2801      	cmp	r0, #1
 8014004:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014008:	ed9d 0b00 	vldr	d0, [sp]
 801400c:	d007      	beq.n	801401e <cos+0x5e>
 801400e:	2802      	cmp	r0, #2
 8014010:	d00e      	beq.n	8014030 <cos+0x70>
 8014012:	2800      	cmp	r0, #0
 8014014:	d0de      	beq.n	8013fd4 <cos+0x14>
 8014016:	2001      	movs	r0, #1
 8014018:	f000 fe5a 	bl	8014cd0 <__kernel_sin>
 801401c:	e7dc      	b.n	8013fd8 <cos+0x18>
 801401e:	f000 fe57 	bl	8014cd0 <__kernel_sin>
 8014022:	ec53 2b10 	vmov	r2, r3, d0
 8014026:	ee10 0a10 	vmov	r0, s0
 801402a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801402e:	e7de      	b.n	8013fee <cos+0x2e>
 8014030:	f000 fa46 	bl	80144c0 <__kernel_cos>
 8014034:	e7f5      	b.n	8014022 <cos+0x62>
 8014036:	bf00      	nop
	...
 8014040:	3fe921fb 	.word	0x3fe921fb
 8014044:	7fefffff 	.word	0x7fefffff

08014048 <sin>:
 8014048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801404a:	ec51 0b10 	vmov	r0, r1, d0
 801404e:	4a20      	ldr	r2, [pc, #128]	; (80140d0 <sin+0x88>)
 8014050:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014054:	4293      	cmp	r3, r2
 8014056:	dc07      	bgt.n	8014068 <sin+0x20>
 8014058:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80140c8 <sin+0x80>
 801405c:	2000      	movs	r0, #0
 801405e:	f000 fe37 	bl	8014cd0 <__kernel_sin>
 8014062:	ec51 0b10 	vmov	r0, r1, d0
 8014066:	e007      	b.n	8014078 <sin+0x30>
 8014068:	4a1a      	ldr	r2, [pc, #104]	; (80140d4 <sin+0x8c>)
 801406a:	4293      	cmp	r3, r2
 801406c:	dd09      	ble.n	8014082 <sin+0x3a>
 801406e:	ee10 2a10 	vmov	r2, s0
 8014072:	460b      	mov	r3, r1
 8014074:	f7ec f920 	bl	80002b8 <__aeabi_dsub>
 8014078:	ec41 0b10 	vmov	d0, r0, r1
 801407c:	b005      	add	sp, #20
 801407e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014082:	4668      	mov	r0, sp
 8014084:	f000 f828 	bl	80140d8 <__ieee754_rem_pio2>
 8014088:	f000 0003 	and.w	r0, r0, #3
 801408c:	2801      	cmp	r0, #1
 801408e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014092:	ed9d 0b00 	vldr	d0, [sp]
 8014096:	d004      	beq.n	80140a2 <sin+0x5a>
 8014098:	2802      	cmp	r0, #2
 801409a:	d005      	beq.n	80140a8 <sin+0x60>
 801409c:	b970      	cbnz	r0, 80140bc <sin+0x74>
 801409e:	2001      	movs	r0, #1
 80140a0:	e7dd      	b.n	801405e <sin+0x16>
 80140a2:	f000 fa0d 	bl	80144c0 <__kernel_cos>
 80140a6:	e7dc      	b.n	8014062 <sin+0x1a>
 80140a8:	2001      	movs	r0, #1
 80140aa:	f000 fe11 	bl	8014cd0 <__kernel_sin>
 80140ae:	ec53 2b10 	vmov	r2, r3, d0
 80140b2:	ee10 0a10 	vmov	r0, s0
 80140b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80140ba:	e7dd      	b.n	8014078 <sin+0x30>
 80140bc:	f000 fa00 	bl	80144c0 <__kernel_cos>
 80140c0:	e7f5      	b.n	80140ae <sin+0x66>
 80140c2:	bf00      	nop
 80140c4:	f3af 8000 	nop.w
	...
 80140d0:	3fe921fb 	.word	0x3fe921fb
 80140d4:	7fefffff 	.word	0x7fefffff

080140d8 <__ieee754_rem_pio2>:
 80140d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140dc:	ec57 6b10 	vmov	r6, r7, d0
 80140e0:	4bc3      	ldr	r3, [pc, #780]	; (80143f0 <__ieee754_rem_pio2+0x318>)
 80140e2:	b08d      	sub	sp, #52	; 0x34
 80140e4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80140e8:	4598      	cmp	r8, r3
 80140ea:	4604      	mov	r4, r0
 80140ec:	9704      	str	r7, [sp, #16]
 80140ee:	dc07      	bgt.n	8014100 <__ieee754_rem_pio2+0x28>
 80140f0:	2200      	movs	r2, #0
 80140f2:	2300      	movs	r3, #0
 80140f4:	ed84 0b00 	vstr	d0, [r4]
 80140f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80140fc:	2500      	movs	r5, #0
 80140fe:	e027      	b.n	8014150 <__ieee754_rem_pio2+0x78>
 8014100:	4bbc      	ldr	r3, [pc, #752]	; (80143f4 <__ieee754_rem_pio2+0x31c>)
 8014102:	4598      	cmp	r8, r3
 8014104:	dc75      	bgt.n	80141f2 <__ieee754_rem_pio2+0x11a>
 8014106:	9b04      	ldr	r3, [sp, #16]
 8014108:	4dbb      	ldr	r5, [pc, #748]	; (80143f8 <__ieee754_rem_pio2+0x320>)
 801410a:	2b00      	cmp	r3, #0
 801410c:	ee10 0a10 	vmov	r0, s0
 8014110:	a3a9      	add	r3, pc, #676	; (adr r3, 80143b8 <__ieee754_rem_pio2+0x2e0>)
 8014112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014116:	4639      	mov	r1, r7
 8014118:	dd36      	ble.n	8014188 <__ieee754_rem_pio2+0xb0>
 801411a:	f7ec f8cd 	bl	80002b8 <__aeabi_dsub>
 801411e:	45a8      	cmp	r8, r5
 8014120:	4606      	mov	r6, r0
 8014122:	460f      	mov	r7, r1
 8014124:	d018      	beq.n	8014158 <__ieee754_rem_pio2+0x80>
 8014126:	a3a6      	add	r3, pc, #664	; (adr r3, 80143c0 <__ieee754_rem_pio2+0x2e8>)
 8014128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801412c:	f7ec f8c4 	bl	80002b8 <__aeabi_dsub>
 8014130:	4602      	mov	r2, r0
 8014132:	460b      	mov	r3, r1
 8014134:	e9c4 2300 	strd	r2, r3, [r4]
 8014138:	4630      	mov	r0, r6
 801413a:	4639      	mov	r1, r7
 801413c:	f7ec f8bc 	bl	80002b8 <__aeabi_dsub>
 8014140:	a39f      	add	r3, pc, #636	; (adr r3, 80143c0 <__ieee754_rem_pio2+0x2e8>)
 8014142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014146:	f7ec f8b7 	bl	80002b8 <__aeabi_dsub>
 801414a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801414e:	2501      	movs	r5, #1
 8014150:	4628      	mov	r0, r5
 8014152:	b00d      	add	sp, #52	; 0x34
 8014154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014158:	a39b      	add	r3, pc, #620	; (adr r3, 80143c8 <__ieee754_rem_pio2+0x2f0>)
 801415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801415e:	f7ec f8ab 	bl	80002b8 <__aeabi_dsub>
 8014162:	a39b      	add	r3, pc, #620	; (adr r3, 80143d0 <__ieee754_rem_pio2+0x2f8>)
 8014164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014168:	4606      	mov	r6, r0
 801416a:	460f      	mov	r7, r1
 801416c:	f7ec f8a4 	bl	80002b8 <__aeabi_dsub>
 8014170:	4602      	mov	r2, r0
 8014172:	460b      	mov	r3, r1
 8014174:	e9c4 2300 	strd	r2, r3, [r4]
 8014178:	4630      	mov	r0, r6
 801417a:	4639      	mov	r1, r7
 801417c:	f7ec f89c 	bl	80002b8 <__aeabi_dsub>
 8014180:	a393      	add	r3, pc, #588	; (adr r3, 80143d0 <__ieee754_rem_pio2+0x2f8>)
 8014182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014186:	e7de      	b.n	8014146 <__ieee754_rem_pio2+0x6e>
 8014188:	f7ec f898 	bl	80002bc <__adddf3>
 801418c:	45a8      	cmp	r8, r5
 801418e:	4606      	mov	r6, r0
 8014190:	460f      	mov	r7, r1
 8014192:	d016      	beq.n	80141c2 <__ieee754_rem_pio2+0xea>
 8014194:	a38a      	add	r3, pc, #552	; (adr r3, 80143c0 <__ieee754_rem_pio2+0x2e8>)
 8014196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419a:	f7ec f88f 	bl	80002bc <__adddf3>
 801419e:	4602      	mov	r2, r0
 80141a0:	460b      	mov	r3, r1
 80141a2:	e9c4 2300 	strd	r2, r3, [r4]
 80141a6:	4630      	mov	r0, r6
 80141a8:	4639      	mov	r1, r7
 80141aa:	f7ec f885 	bl	80002b8 <__aeabi_dsub>
 80141ae:	a384      	add	r3, pc, #528	; (adr r3, 80143c0 <__ieee754_rem_pio2+0x2e8>)
 80141b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b4:	f7ec f882 	bl	80002bc <__adddf3>
 80141b8:	f04f 35ff 	mov.w	r5, #4294967295
 80141bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80141c0:	e7c6      	b.n	8014150 <__ieee754_rem_pio2+0x78>
 80141c2:	a381      	add	r3, pc, #516	; (adr r3, 80143c8 <__ieee754_rem_pio2+0x2f0>)
 80141c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c8:	f7ec f878 	bl	80002bc <__adddf3>
 80141cc:	a380      	add	r3, pc, #512	; (adr r3, 80143d0 <__ieee754_rem_pio2+0x2f8>)
 80141ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d2:	4606      	mov	r6, r0
 80141d4:	460f      	mov	r7, r1
 80141d6:	f7ec f871 	bl	80002bc <__adddf3>
 80141da:	4602      	mov	r2, r0
 80141dc:	460b      	mov	r3, r1
 80141de:	e9c4 2300 	strd	r2, r3, [r4]
 80141e2:	4630      	mov	r0, r6
 80141e4:	4639      	mov	r1, r7
 80141e6:	f7ec f867 	bl	80002b8 <__aeabi_dsub>
 80141ea:	a379      	add	r3, pc, #484	; (adr r3, 80143d0 <__ieee754_rem_pio2+0x2f8>)
 80141ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f0:	e7e0      	b.n	80141b4 <__ieee754_rem_pio2+0xdc>
 80141f2:	4b82      	ldr	r3, [pc, #520]	; (80143fc <__ieee754_rem_pio2+0x324>)
 80141f4:	4598      	cmp	r8, r3
 80141f6:	f300 80d0 	bgt.w	801439a <__ieee754_rem_pio2+0x2c2>
 80141fa:	f000 fe23 	bl	8014e44 <fabs>
 80141fe:	ec57 6b10 	vmov	r6, r7, d0
 8014202:	ee10 0a10 	vmov	r0, s0
 8014206:	a374      	add	r3, pc, #464	; (adr r3, 80143d8 <__ieee754_rem_pio2+0x300>)
 8014208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801420c:	4639      	mov	r1, r7
 801420e:	f7ec fa0b 	bl	8000628 <__aeabi_dmul>
 8014212:	2200      	movs	r2, #0
 8014214:	4b7a      	ldr	r3, [pc, #488]	; (8014400 <__ieee754_rem_pio2+0x328>)
 8014216:	f7ec f851 	bl	80002bc <__adddf3>
 801421a:	f7ec fcb5 	bl	8000b88 <__aeabi_d2iz>
 801421e:	4605      	mov	r5, r0
 8014220:	f7ec f998 	bl	8000554 <__aeabi_i2d>
 8014224:	a364      	add	r3, pc, #400	; (adr r3, 80143b8 <__ieee754_rem_pio2+0x2e0>)
 8014226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801422e:	f7ec f9fb 	bl	8000628 <__aeabi_dmul>
 8014232:	4602      	mov	r2, r0
 8014234:	460b      	mov	r3, r1
 8014236:	4630      	mov	r0, r6
 8014238:	4639      	mov	r1, r7
 801423a:	f7ec f83d 	bl	80002b8 <__aeabi_dsub>
 801423e:	a360      	add	r3, pc, #384	; (adr r3, 80143c0 <__ieee754_rem_pio2+0x2e8>)
 8014240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014244:	4682      	mov	sl, r0
 8014246:	468b      	mov	fp, r1
 8014248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801424c:	f7ec f9ec 	bl	8000628 <__aeabi_dmul>
 8014250:	2d1f      	cmp	r5, #31
 8014252:	4606      	mov	r6, r0
 8014254:	460f      	mov	r7, r1
 8014256:	dc0c      	bgt.n	8014272 <__ieee754_rem_pio2+0x19a>
 8014258:	1e6a      	subs	r2, r5, #1
 801425a:	4b6a      	ldr	r3, [pc, #424]	; (8014404 <__ieee754_rem_pio2+0x32c>)
 801425c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014260:	4543      	cmp	r3, r8
 8014262:	d006      	beq.n	8014272 <__ieee754_rem_pio2+0x19a>
 8014264:	4632      	mov	r2, r6
 8014266:	463b      	mov	r3, r7
 8014268:	4650      	mov	r0, sl
 801426a:	4659      	mov	r1, fp
 801426c:	f7ec f824 	bl	80002b8 <__aeabi_dsub>
 8014270:	e00e      	b.n	8014290 <__ieee754_rem_pio2+0x1b8>
 8014272:	4632      	mov	r2, r6
 8014274:	463b      	mov	r3, r7
 8014276:	4650      	mov	r0, sl
 8014278:	4659      	mov	r1, fp
 801427a:	f7ec f81d 	bl	80002b8 <__aeabi_dsub>
 801427e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014282:	9305      	str	r3, [sp, #20]
 8014284:	9a05      	ldr	r2, [sp, #20]
 8014286:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801428a:	1ad3      	subs	r3, r2, r3
 801428c:	2b10      	cmp	r3, #16
 801428e:	dc02      	bgt.n	8014296 <__ieee754_rem_pio2+0x1be>
 8014290:	e9c4 0100 	strd	r0, r1, [r4]
 8014294:	e039      	b.n	801430a <__ieee754_rem_pio2+0x232>
 8014296:	a34c      	add	r3, pc, #304	; (adr r3, 80143c8 <__ieee754_rem_pio2+0x2f0>)
 8014298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801429c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142a0:	f7ec f9c2 	bl	8000628 <__aeabi_dmul>
 80142a4:	4606      	mov	r6, r0
 80142a6:	460f      	mov	r7, r1
 80142a8:	4602      	mov	r2, r0
 80142aa:	460b      	mov	r3, r1
 80142ac:	4650      	mov	r0, sl
 80142ae:	4659      	mov	r1, fp
 80142b0:	f7ec f802 	bl	80002b8 <__aeabi_dsub>
 80142b4:	4602      	mov	r2, r0
 80142b6:	460b      	mov	r3, r1
 80142b8:	4680      	mov	r8, r0
 80142ba:	4689      	mov	r9, r1
 80142bc:	4650      	mov	r0, sl
 80142be:	4659      	mov	r1, fp
 80142c0:	f7eb fffa 	bl	80002b8 <__aeabi_dsub>
 80142c4:	4632      	mov	r2, r6
 80142c6:	463b      	mov	r3, r7
 80142c8:	f7eb fff6 	bl	80002b8 <__aeabi_dsub>
 80142cc:	a340      	add	r3, pc, #256	; (adr r3, 80143d0 <__ieee754_rem_pio2+0x2f8>)
 80142ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d2:	4606      	mov	r6, r0
 80142d4:	460f      	mov	r7, r1
 80142d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142da:	f7ec f9a5 	bl	8000628 <__aeabi_dmul>
 80142de:	4632      	mov	r2, r6
 80142e0:	463b      	mov	r3, r7
 80142e2:	f7eb ffe9 	bl	80002b8 <__aeabi_dsub>
 80142e6:	4602      	mov	r2, r0
 80142e8:	460b      	mov	r3, r1
 80142ea:	4606      	mov	r6, r0
 80142ec:	460f      	mov	r7, r1
 80142ee:	4640      	mov	r0, r8
 80142f0:	4649      	mov	r1, r9
 80142f2:	f7eb ffe1 	bl	80002b8 <__aeabi_dsub>
 80142f6:	9a05      	ldr	r2, [sp, #20]
 80142f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80142fc:	1ad3      	subs	r3, r2, r3
 80142fe:	2b31      	cmp	r3, #49	; 0x31
 8014300:	dc20      	bgt.n	8014344 <__ieee754_rem_pio2+0x26c>
 8014302:	e9c4 0100 	strd	r0, r1, [r4]
 8014306:	46c2      	mov	sl, r8
 8014308:	46cb      	mov	fp, r9
 801430a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801430e:	4650      	mov	r0, sl
 8014310:	4642      	mov	r2, r8
 8014312:	464b      	mov	r3, r9
 8014314:	4659      	mov	r1, fp
 8014316:	f7eb ffcf 	bl	80002b8 <__aeabi_dsub>
 801431a:	463b      	mov	r3, r7
 801431c:	4632      	mov	r2, r6
 801431e:	f7eb ffcb 	bl	80002b8 <__aeabi_dsub>
 8014322:	9b04      	ldr	r3, [sp, #16]
 8014324:	2b00      	cmp	r3, #0
 8014326:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801432a:	f6bf af11 	bge.w	8014150 <__ieee754_rem_pio2+0x78>
 801432e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014332:	6063      	str	r3, [r4, #4]
 8014334:	f8c4 8000 	str.w	r8, [r4]
 8014338:	60a0      	str	r0, [r4, #8]
 801433a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801433e:	60e3      	str	r3, [r4, #12]
 8014340:	426d      	negs	r5, r5
 8014342:	e705      	b.n	8014150 <__ieee754_rem_pio2+0x78>
 8014344:	a326      	add	r3, pc, #152	; (adr r3, 80143e0 <__ieee754_rem_pio2+0x308>)
 8014346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801434a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801434e:	f7ec f96b 	bl	8000628 <__aeabi_dmul>
 8014352:	4606      	mov	r6, r0
 8014354:	460f      	mov	r7, r1
 8014356:	4602      	mov	r2, r0
 8014358:	460b      	mov	r3, r1
 801435a:	4640      	mov	r0, r8
 801435c:	4649      	mov	r1, r9
 801435e:	f7eb ffab 	bl	80002b8 <__aeabi_dsub>
 8014362:	4602      	mov	r2, r0
 8014364:	460b      	mov	r3, r1
 8014366:	4682      	mov	sl, r0
 8014368:	468b      	mov	fp, r1
 801436a:	4640      	mov	r0, r8
 801436c:	4649      	mov	r1, r9
 801436e:	f7eb ffa3 	bl	80002b8 <__aeabi_dsub>
 8014372:	4632      	mov	r2, r6
 8014374:	463b      	mov	r3, r7
 8014376:	f7eb ff9f 	bl	80002b8 <__aeabi_dsub>
 801437a:	a31b      	add	r3, pc, #108	; (adr r3, 80143e8 <__ieee754_rem_pio2+0x310>)
 801437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014380:	4606      	mov	r6, r0
 8014382:	460f      	mov	r7, r1
 8014384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014388:	f7ec f94e 	bl	8000628 <__aeabi_dmul>
 801438c:	4632      	mov	r2, r6
 801438e:	463b      	mov	r3, r7
 8014390:	f7eb ff92 	bl	80002b8 <__aeabi_dsub>
 8014394:	4606      	mov	r6, r0
 8014396:	460f      	mov	r7, r1
 8014398:	e764      	b.n	8014264 <__ieee754_rem_pio2+0x18c>
 801439a:	4b1b      	ldr	r3, [pc, #108]	; (8014408 <__ieee754_rem_pio2+0x330>)
 801439c:	4598      	cmp	r8, r3
 801439e:	dd35      	ble.n	801440c <__ieee754_rem_pio2+0x334>
 80143a0:	ee10 2a10 	vmov	r2, s0
 80143a4:	463b      	mov	r3, r7
 80143a6:	4630      	mov	r0, r6
 80143a8:	4639      	mov	r1, r7
 80143aa:	f7eb ff85 	bl	80002b8 <__aeabi_dsub>
 80143ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80143b2:	e9c4 0100 	strd	r0, r1, [r4]
 80143b6:	e6a1      	b.n	80140fc <__ieee754_rem_pio2+0x24>
 80143b8:	54400000 	.word	0x54400000
 80143bc:	3ff921fb 	.word	0x3ff921fb
 80143c0:	1a626331 	.word	0x1a626331
 80143c4:	3dd0b461 	.word	0x3dd0b461
 80143c8:	1a600000 	.word	0x1a600000
 80143cc:	3dd0b461 	.word	0x3dd0b461
 80143d0:	2e037073 	.word	0x2e037073
 80143d4:	3ba3198a 	.word	0x3ba3198a
 80143d8:	6dc9c883 	.word	0x6dc9c883
 80143dc:	3fe45f30 	.word	0x3fe45f30
 80143e0:	2e000000 	.word	0x2e000000
 80143e4:	3ba3198a 	.word	0x3ba3198a
 80143e8:	252049c1 	.word	0x252049c1
 80143ec:	397b839a 	.word	0x397b839a
 80143f0:	3fe921fb 	.word	0x3fe921fb
 80143f4:	4002d97b 	.word	0x4002d97b
 80143f8:	3ff921fb 	.word	0x3ff921fb
 80143fc:	413921fb 	.word	0x413921fb
 8014400:	3fe00000 	.word	0x3fe00000
 8014404:	08019b78 	.word	0x08019b78
 8014408:	7fefffff 	.word	0x7fefffff
 801440c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014410:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014414:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014418:	4630      	mov	r0, r6
 801441a:	460f      	mov	r7, r1
 801441c:	f7ec fbb4 	bl	8000b88 <__aeabi_d2iz>
 8014420:	f7ec f898 	bl	8000554 <__aeabi_i2d>
 8014424:	4602      	mov	r2, r0
 8014426:	460b      	mov	r3, r1
 8014428:	4630      	mov	r0, r6
 801442a:	4639      	mov	r1, r7
 801442c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014430:	f7eb ff42 	bl	80002b8 <__aeabi_dsub>
 8014434:	2200      	movs	r2, #0
 8014436:	4b1f      	ldr	r3, [pc, #124]	; (80144b4 <__ieee754_rem_pio2+0x3dc>)
 8014438:	f7ec f8f6 	bl	8000628 <__aeabi_dmul>
 801443c:	460f      	mov	r7, r1
 801443e:	4606      	mov	r6, r0
 8014440:	f7ec fba2 	bl	8000b88 <__aeabi_d2iz>
 8014444:	f7ec f886 	bl	8000554 <__aeabi_i2d>
 8014448:	4602      	mov	r2, r0
 801444a:	460b      	mov	r3, r1
 801444c:	4630      	mov	r0, r6
 801444e:	4639      	mov	r1, r7
 8014450:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014454:	f7eb ff30 	bl	80002b8 <__aeabi_dsub>
 8014458:	2200      	movs	r2, #0
 801445a:	4b16      	ldr	r3, [pc, #88]	; (80144b4 <__ieee754_rem_pio2+0x3dc>)
 801445c:	f7ec f8e4 	bl	8000628 <__aeabi_dmul>
 8014460:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014464:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014468:	f04f 0803 	mov.w	r8, #3
 801446c:	2600      	movs	r6, #0
 801446e:	2700      	movs	r7, #0
 8014470:	4632      	mov	r2, r6
 8014472:	463b      	mov	r3, r7
 8014474:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014478:	f108 3aff 	add.w	sl, r8, #4294967295
 801447c:	f7ec fb3c 	bl	8000af8 <__aeabi_dcmpeq>
 8014480:	b9b0      	cbnz	r0, 80144b0 <__ieee754_rem_pio2+0x3d8>
 8014482:	4b0d      	ldr	r3, [pc, #52]	; (80144b8 <__ieee754_rem_pio2+0x3e0>)
 8014484:	9301      	str	r3, [sp, #4]
 8014486:	2302      	movs	r3, #2
 8014488:	9300      	str	r3, [sp, #0]
 801448a:	462a      	mov	r2, r5
 801448c:	4643      	mov	r3, r8
 801448e:	4621      	mov	r1, r4
 8014490:	a806      	add	r0, sp, #24
 8014492:	f000 f8dd 	bl	8014650 <__kernel_rem_pio2>
 8014496:	9b04      	ldr	r3, [sp, #16]
 8014498:	2b00      	cmp	r3, #0
 801449a:	4605      	mov	r5, r0
 801449c:	f6bf ae58 	bge.w	8014150 <__ieee754_rem_pio2+0x78>
 80144a0:	6863      	ldr	r3, [r4, #4]
 80144a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80144a6:	6063      	str	r3, [r4, #4]
 80144a8:	68e3      	ldr	r3, [r4, #12]
 80144aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80144ae:	e746      	b.n	801433e <__ieee754_rem_pio2+0x266>
 80144b0:	46d0      	mov	r8, sl
 80144b2:	e7dd      	b.n	8014470 <__ieee754_rem_pio2+0x398>
 80144b4:	41700000 	.word	0x41700000
 80144b8:	08019bf8 	.word	0x08019bf8
 80144bc:	00000000 	.word	0x00000000

080144c0 <__kernel_cos>:
 80144c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144c4:	ec59 8b10 	vmov	r8, r9, d0
 80144c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80144cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80144d0:	ed2d 8b02 	vpush	{d8}
 80144d4:	eeb0 8a41 	vmov.f32	s16, s2
 80144d8:	eef0 8a61 	vmov.f32	s17, s3
 80144dc:	da07      	bge.n	80144ee <__kernel_cos+0x2e>
 80144de:	ee10 0a10 	vmov	r0, s0
 80144e2:	4649      	mov	r1, r9
 80144e4:	f7ec fb50 	bl	8000b88 <__aeabi_d2iz>
 80144e8:	2800      	cmp	r0, #0
 80144ea:	f000 8089 	beq.w	8014600 <__kernel_cos+0x140>
 80144ee:	4642      	mov	r2, r8
 80144f0:	464b      	mov	r3, r9
 80144f2:	4640      	mov	r0, r8
 80144f4:	4649      	mov	r1, r9
 80144f6:	f7ec f897 	bl	8000628 <__aeabi_dmul>
 80144fa:	2200      	movs	r2, #0
 80144fc:	4b4e      	ldr	r3, [pc, #312]	; (8014638 <__kernel_cos+0x178>)
 80144fe:	4604      	mov	r4, r0
 8014500:	460d      	mov	r5, r1
 8014502:	f7ec f891 	bl	8000628 <__aeabi_dmul>
 8014506:	a340      	add	r3, pc, #256	; (adr r3, 8014608 <__kernel_cos+0x148>)
 8014508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801450c:	4682      	mov	sl, r0
 801450e:	468b      	mov	fp, r1
 8014510:	4620      	mov	r0, r4
 8014512:	4629      	mov	r1, r5
 8014514:	f7ec f888 	bl	8000628 <__aeabi_dmul>
 8014518:	a33d      	add	r3, pc, #244	; (adr r3, 8014610 <__kernel_cos+0x150>)
 801451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801451e:	f7eb fecd 	bl	80002bc <__adddf3>
 8014522:	4622      	mov	r2, r4
 8014524:	462b      	mov	r3, r5
 8014526:	f7ec f87f 	bl	8000628 <__aeabi_dmul>
 801452a:	a33b      	add	r3, pc, #236	; (adr r3, 8014618 <__kernel_cos+0x158>)
 801452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014530:	f7eb fec2 	bl	80002b8 <__aeabi_dsub>
 8014534:	4622      	mov	r2, r4
 8014536:	462b      	mov	r3, r5
 8014538:	f7ec f876 	bl	8000628 <__aeabi_dmul>
 801453c:	a338      	add	r3, pc, #224	; (adr r3, 8014620 <__kernel_cos+0x160>)
 801453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014542:	f7eb febb 	bl	80002bc <__adddf3>
 8014546:	4622      	mov	r2, r4
 8014548:	462b      	mov	r3, r5
 801454a:	f7ec f86d 	bl	8000628 <__aeabi_dmul>
 801454e:	a336      	add	r3, pc, #216	; (adr r3, 8014628 <__kernel_cos+0x168>)
 8014550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014554:	f7eb feb0 	bl	80002b8 <__aeabi_dsub>
 8014558:	4622      	mov	r2, r4
 801455a:	462b      	mov	r3, r5
 801455c:	f7ec f864 	bl	8000628 <__aeabi_dmul>
 8014560:	a333      	add	r3, pc, #204	; (adr r3, 8014630 <__kernel_cos+0x170>)
 8014562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014566:	f7eb fea9 	bl	80002bc <__adddf3>
 801456a:	4622      	mov	r2, r4
 801456c:	462b      	mov	r3, r5
 801456e:	f7ec f85b 	bl	8000628 <__aeabi_dmul>
 8014572:	4622      	mov	r2, r4
 8014574:	462b      	mov	r3, r5
 8014576:	f7ec f857 	bl	8000628 <__aeabi_dmul>
 801457a:	ec53 2b18 	vmov	r2, r3, d8
 801457e:	4604      	mov	r4, r0
 8014580:	460d      	mov	r5, r1
 8014582:	4640      	mov	r0, r8
 8014584:	4649      	mov	r1, r9
 8014586:	f7ec f84f 	bl	8000628 <__aeabi_dmul>
 801458a:	460b      	mov	r3, r1
 801458c:	4602      	mov	r2, r0
 801458e:	4629      	mov	r1, r5
 8014590:	4620      	mov	r0, r4
 8014592:	f7eb fe91 	bl	80002b8 <__aeabi_dsub>
 8014596:	4b29      	ldr	r3, [pc, #164]	; (801463c <__kernel_cos+0x17c>)
 8014598:	429e      	cmp	r6, r3
 801459a:	4680      	mov	r8, r0
 801459c:	4689      	mov	r9, r1
 801459e:	dc11      	bgt.n	80145c4 <__kernel_cos+0x104>
 80145a0:	4602      	mov	r2, r0
 80145a2:	460b      	mov	r3, r1
 80145a4:	4650      	mov	r0, sl
 80145a6:	4659      	mov	r1, fp
 80145a8:	f7eb fe86 	bl	80002b8 <__aeabi_dsub>
 80145ac:	460b      	mov	r3, r1
 80145ae:	4924      	ldr	r1, [pc, #144]	; (8014640 <__kernel_cos+0x180>)
 80145b0:	4602      	mov	r2, r0
 80145b2:	2000      	movs	r0, #0
 80145b4:	f7eb fe80 	bl	80002b8 <__aeabi_dsub>
 80145b8:	ecbd 8b02 	vpop	{d8}
 80145bc:	ec41 0b10 	vmov	d0, r0, r1
 80145c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145c4:	4b1f      	ldr	r3, [pc, #124]	; (8014644 <__kernel_cos+0x184>)
 80145c6:	491e      	ldr	r1, [pc, #120]	; (8014640 <__kernel_cos+0x180>)
 80145c8:	429e      	cmp	r6, r3
 80145ca:	bfcc      	ite	gt
 80145cc:	4d1e      	ldrgt	r5, [pc, #120]	; (8014648 <__kernel_cos+0x188>)
 80145ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80145d2:	2400      	movs	r4, #0
 80145d4:	4622      	mov	r2, r4
 80145d6:	462b      	mov	r3, r5
 80145d8:	2000      	movs	r0, #0
 80145da:	f7eb fe6d 	bl	80002b8 <__aeabi_dsub>
 80145de:	4622      	mov	r2, r4
 80145e0:	4606      	mov	r6, r0
 80145e2:	460f      	mov	r7, r1
 80145e4:	462b      	mov	r3, r5
 80145e6:	4650      	mov	r0, sl
 80145e8:	4659      	mov	r1, fp
 80145ea:	f7eb fe65 	bl	80002b8 <__aeabi_dsub>
 80145ee:	4642      	mov	r2, r8
 80145f0:	464b      	mov	r3, r9
 80145f2:	f7eb fe61 	bl	80002b8 <__aeabi_dsub>
 80145f6:	4602      	mov	r2, r0
 80145f8:	460b      	mov	r3, r1
 80145fa:	4630      	mov	r0, r6
 80145fc:	4639      	mov	r1, r7
 80145fe:	e7d9      	b.n	80145b4 <__kernel_cos+0xf4>
 8014600:	2000      	movs	r0, #0
 8014602:	490f      	ldr	r1, [pc, #60]	; (8014640 <__kernel_cos+0x180>)
 8014604:	e7d8      	b.n	80145b8 <__kernel_cos+0xf8>
 8014606:	bf00      	nop
 8014608:	be8838d4 	.word	0xbe8838d4
 801460c:	bda8fae9 	.word	0xbda8fae9
 8014610:	bdb4b1c4 	.word	0xbdb4b1c4
 8014614:	3e21ee9e 	.word	0x3e21ee9e
 8014618:	809c52ad 	.word	0x809c52ad
 801461c:	3e927e4f 	.word	0x3e927e4f
 8014620:	19cb1590 	.word	0x19cb1590
 8014624:	3efa01a0 	.word	0x3efa01a0
 8014628:	16c15177 	.word	0x16c15177
 801462c:	3f56c16c 	.word	0x3f56c16c
 8014630:	5555554c 	.word	0x5555554c
 8014634:	3fa55555 	.word	0x3fa55555
 8014638:	3fe00000 	.word	0x3fe00000
 801463c:	3fd33332 	.word	0x3fd33332
 8014640:	3ff00000 	.word	0x3ff00000
 8014644:	3fe90000 	.word	0x3fe90000
 8014648:	3fd20000 	.word	0x3fd20000
 801464c:	00000000 	.word	0x00000000

08014650 <__kernel_rem_pio2>:
 8014650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014654:	ed2d 8b02 	vpush	{d8}
 8014658:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801465c:	1ed4      	subs	r4, r2, #3
 801465e:	9308      	str	r3, [sp, #32]
 8014660:	9101      	str	r1, [sp, #4]
 8014662:	4bc5      	ldr	r3, [pc, #788]	; (8014978 <__kernel_rem_pio2+0x328>)
 8014664:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014666:	9009      	str	r0, [sp, #36]	; 0x24
 8014668:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801466c:	9304      	str	r3, [sp, #16]
 801466e:	9b08      	ldr	r3, [sp, #32]
 8014670:	3b01      	subs	r3, #1
 8014672:	9307      	str	r3, [sp, #28]
 8014674:	2318      	movs	r3, #24
 8014676:	fb94 f4f3 	sdiv	r4, r4, r3
 801467a:	f06f 0317 	mvn.w	r3, #23
 801467e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014682:	fb04 3303 	mla	r3, r4, r3, r3
 8014686:	eb03 0a02 	add.w	sl, r3, r2
 801468a:	9b04      	ldr	r3, [sp, #16]
 801468c:	9a07      	ldr	r2, [sp, #28]
 801468e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014968 <__kernel_rem_pio2+0x318>
 8014692:	eb03 0802 	add.w	r8, r3, r2
 8014696:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014698:	1aa7      	subs	r7, r4, r2
 801469a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801469e:	ae22      	add	r6, sp, #136	; 0x88
 80146a0:	2500      	movs	r5, #0
 80146a2:	4545      	cmp	r5, r8
 80146a4:	dd13      	ble.n	80146ce <__kernel_rem_pio2+0x7e>
 80146a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014968 <__kernel_rem_pio2+0x318>
 80146aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80146ae:	2600      	movs	r6, #0
 80146b0:	9b04      	ldr	r3, [sp, #16]
 80146b2:	429e      	cmp	r6, r3
 80146b4:	dc32      	bgt.n	801471c <__kernel_rem_pio2+0xcc>
 80146b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146b8:	9302      	str	r3, [sp, #8]
 80146ba:	9b08      	ldr	r3, [sp, #32]
 80146bc:	199d      	adds	r5, r3, r6
 80146be:	ab22      	add	r3, sp, #136	; 0x88
 80146c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80146c4:	9306      	str	r3, [sp, #24]
 80146c6:	ec59 8b18 	vmov	r8, r9, d8
 80146ca:	2700      	movs	r7, #0
 80146cc:	e01f      	b.n	801470e <__kernel_rem_pio2+0xbe>
 80146ce:	42ef      	cmn	r7, r5
 80146d0:	d407      	bmi.n	80146e2 <__kernel_rem_pio2+0x92>
 80146d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80146d6:	f7eb ff3d 	bl	8000554 <__aeabi_i2d>
 80146da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80146de:	3501      	adds	r5, #1
 80146e0:	e7df      	b.n	80146a2 <__kernel_rem_pio2+0x52>
 80146e2:	ec51 0b18 	vmov	r0, r1, d8
 80146e6:	e7f8      	b.n	80146da <__kernel_rem_pio2+0x8a>
 80146e8:	9906      	ldr	r1, [sp, #24]
 80146ea:	9d02      	ldr	r5, [sp, #8]
 80146ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80146f0:	9106      	str	r1, [sp, #24]
 80146f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80146f6:	9502      	str	r5, [sp, #8]
 80146f8:	f7eb ff96 	bl	8000628 <__aeabi_dmul>
 80146fc:	4602      	mov	r2, r0
 80146fe:	460b      	mov	r3, r1
 8014700:	4640      	mov	r0, r8
 8014702:	4649      	mov	r1, r9
 8014704:	f7eb fdda 	bl	80002bc <__adddf3>
 8014708:	3701      	adds	r7, #1
 801470a:	4680      	mov	r8, r0
 801470c:	4689      	mov	r9, r1
 801470e:	9b07      	ldr	r3, [sp, #28]
 8014710:	429f      	cmp	r7, r3
 8014712:	dde9      	ble.n	80146e8 <__kernel_rem_pio2+0x98>
 8014714:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014718:	3601      	adds	r6, #1
 801471a:	e7c9      	b.n	80146b0 <__kernel_rem_pio2+0x60>
 801471c:	9b04      	ldr	r3, [sp, #16]
 801471e:	aa0e      	add	r2, sp, #56	; 0x38
 8014720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014724:	930c      	str	r3, [sp, #48]	; 0x30
 8014726:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014728:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801472c:	9c04      	ldr	r4, [sp, #16]
 801472e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014730:	ab9a      	add	r3, sp, #616	; 0x268
 8014732:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014736:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801473a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801473e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014742:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014746:	ab9a      	add	r3, sp, #616	; 0x268
 8014748:	445b      	add	r3, fp
 801474a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801474e:	2500      	movs	r5, #0
 8014750:	1b63      	subs	r3, r4, r5
 8014752:	2b00      	cmp	r3, #0
 8014754:	dc78      	bgt.n	8014848 <__kernel_rem_pio2+0x1f8>
 8014756:	4650      	mov	r0, sl
 8014758:	ec49 8b10 	vmov	d0, r8, r9
 801475c:	f000 fc00 	bl	8014f60 <scalbn>
 8014760:	ec57 6b10 	vmov	r6, r7, d0
 8014764:	2200      	movs	r2, #0
 8014766:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801476a:	ee10 0a10 	vmov	r0, s0
 801476e:	4639      	mov	r1, r7
 8014770:	f7eb ff5a 	bl	8000628 <__aeabi_dmul>
 8014774:	ec41 0b10 	vmov	d0, r0, r1
 8014778:	f000 fb6e 	bl	8014e58 <floor>
 801477c:	2200      	movs	r2, #0
 801477e:	ec51 0b10 	vmov	r0, r1, d0
 8014782:	4b7e      	ldr	r3, [pc, #504]	; (801497c <__kernel_rem_pio2+0x32c>)
 8014784:	f7eb ff50 	bl	8000628 <__aeabi_dmul>
 8014788:	4602      	mov	r2, r0
 801478a:	460b      	mov	r3, r1
 801478c:	4630      	mov	r0, r6
 801478e:	4639      	mov	r1, r7
 8014790:	f7eb fd92 	bl	80002b8 <__aeabi_dsub>
 8014794:	460f      	mov	r7, r1
 8014796:	4606      	mov	r6, r0
 8014798:	f7ec f9f6 	bl	8000b88 <__aeabi_d2iz>
 801479c:	9006      	str	r0, [sp, #24]
 801479e:	f7eb fed9 	bl	8000554 <__aeabi_i2d>
 80147a2:	4602      	mov	r2, r0
 80147a4:	460b      	mov	r3, r1
 80147a6:	4630      	mov	r0, r6
 80147a8:	4639      	mov	r1, r7
 80147aa:	f7eb fd85 	bl	80002b8 <__aeabi_dsub>
 80147ae:	f1ba 0f00 	cmp.w	sl, #0
 80147b2:	4606      	mov	r6, r0
 80147b4:	460f      	mov	r7, r1
 80147b6:	dd6c      	ble.n	8014892 <__kernel_rem_pio2+0x242>
 80147b8:	1e62      	subs	r2, r4, #1
 80147ba:	ab0e      	add	r3, sp, #56	; 0x38
 80147bc:	f1ca 0118 	rsb	r1, sl, #24
 80147c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80147c4:	9d06      	ldr	r5, [sp, #24]
 80147c6:	fa40 f301 	asr.w	r3, r0, r1
 80147ca:	441d      	add	r5, r3
 80147cc:	408b      	lsls	r3, r1
 80147ce:	1ac0      	subs	r0, r0, r3
 80147d0:	ab0e      	add	r3, sp, #56	; 0x38
 80147d2:	9506      	str	r5, [sp, #24]
 80147d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80147d8:	f1ca 0317 	rsb	r3, sl, #23
 80147dc:	fa40 f303 	asr.w	r3, r0, r3
 80147e0:	9302      	str	r3, [sp, #8]
 80147e2:	9b02      	ldr	r3, [sp, #8]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	dd62      	ble.n	80148ae <__kernel_rem_pio2+0x25e>
 80147e8:	9b06      	ldr	r3, [sp, #24]
 80147ea:	2200      	movs	r2, #0
 80147ec:	3301      	adds	r3, #1
 80147ee:	9306      	str	r3, [sp, #24]
 80147f0:	4615      	mov	r5, r2
 80147f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80147f6:	4294      	cmp	r4, r2
 80147f8:	f300 8095 	bgt.w	8014926 <__kernel_rem_pio2+0x2d6>
 80147fc:	f1ba 0f00 	cmp.w	sl, #0
 8014800:	dd07      	ble.n	8014812 <__kernel_rem_pio2+0x1c2>
 8014802:	f1ba 0f01 	cmp.w	sl, #1
 8014806:	f000 80a2 	beq.w	801494e <__kernel_rem_pio2+0x2fe>
 801480a:	f1ba 0f02 	cmp.w	sl, #2
 801480e:	f000 80c1 	beq.w	8014994 <__kernel_rem_pio2+0x344>
 8014812:	9b02      	ldr	r3, [sp, #8]
 8014814:	2b02      	cmp	r3, #2
 8014816:	d14a      	bne.n	80148ae <__kernel_rem_pio2+0x25e>
 8014818:	4632      	mov	r2, r6
 801481a:	463b      	mov	r3, r7
 801481c:	2000      	movs	r0, #0
 801481e:	4958      	ldr	r1, [pc, #352]	; (8014980 <__kernel_rem_pio2+0x330>)
 8014820:	f7eb fd4a 	bl	80002b8 <__aeabi_dsub>
 8014824:	4606      	mov	r6, r0
 8014826:	460f      	mov	r7, r1
 8014828:	2d00      	cmp	r5, #0
 801482a:	d040      	beq.n	80148ae <__kernel_rem_pio2+0x25e>
 801482c:	4650      	mov	r0, sl
 801482e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014970 <__kernel_rem_pio2+0x320>
 8014832:	f000 fb95 	bl	8014f60 <scalbn>
 8014836:	4630      	mov	r0, r6
 8014838:	4639      	mov	r1, r7
 801483a:	ec53 2b10 	vmov	r2, r3, d0
 801483e:	f7eb fd3b 	bl	80002b8 <__aeabi_dsub>
 8014842:	4606      	mov	r6, r0
 8014844:	460f      	mov	r7, r1
 8014846:	e032      	b.n	80148ae <__kernel_rem_pio2+0x25e>
 8014848:	2200      	movs	r2, #0
 801484a:	4b4e      	ldr	r3, [pc, #312]	; (8014984 <__kernel_rem_pio2+0x334>)
 801484c:	4640      	mov	r0, r8
 801484e:	4649      	mov	r1, r9
 8014850:	f7eb feea 	bl	8000628 <__aeabi_dmul>
 8014854:	f7ec f998 	bl	8000b88 <__aeabi_d2iz>
 8014858:	f7eb fe7c 	bl	8000554 <__aeabi_i2d>
 801485c:	2200      	movs	r2, #0
 801485e:	4b4a      	ldr	r3, [pc, #296]	; (8014988 <__kernel_rem_pio2+0x338>)
 8014860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014864:	f7eb fee0 	bl	8000628 <__aeabi_dmul>
 8014868:	4602      	mov	r2, r0
 801486a:	460b      	mov	r3, r1
 801486c:	4640      	mov	r0, r8
 801486e:	4649      	mov	r1, r9
 8014870:	f7eb fd22 	bl	80002b8 <__aeabi_dsub>
 8014874:	f7ec f988 	bl	8000b88 <__aeabi_d2iz>
 8014878:	ab0e      	add	r3, sp, #56	; 0x38
 801487a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801487e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014886:	f7eb fd19 	bl	80002bc <__adddf3>
 801488a:	3501      	adds	r5, #1
 801488c:	4680      	mov	r8, r0
 801488e:	4689      	mov	r9, r1
 8014890:	e75e      	b.n	8014750 <__kernel_rem_pio2+0x100>
 8014892:	d105      	bne.n	80148a0 <__kernel_rem_pio2+0x250>
 8014894:	1e63      	subs	r3, r4, #1
 8014896:	aa0e      	add	r2, sp, #56	; 0x38
 8014898:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801489c:	15c3      	asrs	r3, r0, #23
 801489e:	e79f      	b.n	80147e0 <__kernel_rem_pio2+0x190>
 80148a0:	2200      	movs	r2, #0
 80148a2:	4b3a      	ldr	r3, [pc, #232]	; (801498c <__kernel_rem_pio2+0x33c>)
 80148a4:	f7ec f946 	bl	8000b34 <__aeabi_dcmpge>
 80148a8:	2800      	cmp	r0, #0
 80148aa:	d139      	bne.n	8014920 <__kernel_rem_pio2+0x2d0>
 80148ac:	9002      	str	r0, [sp, #8]
 80148ae:	2200      	movs	r2, #0
 80148b0:	2300      	movs	r3, #0
 80148b2:	4630      	mov	r0, r6
 80148b4:	4639      	mov	r1, r7
 80148b6:	f7ec f91f 	bl	8000af8 <__aeabi_dcmpeq>
 80148ba:	2800      	cmp	r0, #0
 80148bc:	f000 80c7 	beq.w	8014a4e <__kernel_rem_pio2+0x3fe>
 80148c0:	1e65      	subs	r5, r4, #1
 80148c2:	462b      	mov	r3, r5
 80148c4:	2200      	movs	r2, #0
 80148c6:	9904      	ldr	r1, [sp, #16]
 80148c8:	428b      	cmp	r3, r1
 80148ca:	da6a      	bge.n	80149a2 <__kernel_rem_pio2+0x352>
 80148cc:	2a00      	cmp	r2, #0
 80148ce:	f000 8088 	beq.w	80149e2 <__kernel_rem_pio2+0x392>
 80148d2:	ab0e      	add	r3, sp, #56	; 0x38
 80148d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80148d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	f000 80b4 	beq.w	8014a4a <__kernel_rem_pio2+0x3fa>
 80148e2:	4650      	mov	r0, sl
 80148e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014970 <__kernel_rem_pio2+0x320>
 80148e8:	f000 fb3a 	bl	8014f60 <scalbn>
 80148ec:	00ec      	lsls	r4, r5, #3
 80148ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80148f0:	191e      	adds	r6, r3, r4
 80148f2:	ec59 8b10 	vmov	r8, r9, d0
 80148f6:	f106 0a08 	add.w	sl, r6, #8
 80148fa:	462f      	mov	r7, r5
 80148fc:	2f00      	cmp	r7, #0
 80148fe:	f280 80df 	bge.w	8014ac0 <__kernel_rem_pio2+0x470>
 8014902:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014968 <__kernel_rem_pio2+0x318>
 8014906:	f04f 0a00 	mov.w	sl, #0
 801490a:	eba5 030a 	sub.w	r3, r5, sl
 801490e:	2b00      	cmp	r3, #0
 8014910:	f2c0 810a 	blt.w	8014b28 <__kernel_rem_pio2+0x4d8>
 8014914:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014990 <__kernel_rem_pio2+0x340>
 8014918:	ec59 8b18 	vmov	r8, r9, d8
 801491c:	2700      	movs	r7, #0
 801491e:	e0f5      	b.n	8014b0c <__kernel_rem_pio2+0x4bc>
 8014920:	2302      	movs	r3, #2
 8014922:	9302      	str	r3, [sp, #8]
 8014924:	e760      	b.n	80147e8 <__kernel_rem_pio2+0x198>
 8014926:	ab0e      	add	r3, sp, #56	; 0x38
 8014928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801492c:	b94d      	cbnz	r5, 8014942 <__kernel_rem_pio2+0x2f2>
 801492e:	b12b      	cbz	r3, 801493c <__kernel_rem_pio2+0x2ec>
 8014930:	a80e      	add	r0, sp, #56	; 0x38
 8014932:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014936:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801493a:	2301      	movs	r3, #1
 801493c:	3201      	adds	r2, #1
 801493e:	461d      	mov	r5, r3
 8014940:	e759      	b.n	80147f6 <__kernel_rem_pio2+0x1a6>
 8014942:	a80e      	add	r0, sp, #56	; 0x38
 8014944:	1acb      	subs	r3, r1, r3
 8014946:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801494a:	462b      	mov	r3, r5
 801494c:	e7f6      	b.n	801493c <__kernel_rem_pio2+0x2ec>
 801494e:	1e62      	subs	r2, r4, #1
 8014950:	ab0e      	add	r3, sp, #56	; 0x38
 8014952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014956:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801495a:	a90e      	add	r1, sp, #56	; 0x38
 801495c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014960:	e757      	b.n	8014812 <__kernel_rem_pio2+0x1c2>
 8014962:	bf00      	nop
 8014964:	f3af 8000 	nop.w
	...
 8014974:	3ff00000 	.word	0x3ff00000
 8014978:	08019d40 	.word	0x08019d40
 801497c:	40200000 	.word	0x40200000
 8014980:	3ff00000 	.word	0x3ff00000
 8014984:	3e700000 	.word	0x3e700000
 8014988:	41700000 	.word	0x41700000
 801498c:	3fe00000 	.word	0x3fe00000
 8014990:	08019d00 	.word	0x08019d00
 8014994:	1e62      	subs	r2, r4, #1
 8014996:	ab0e      	add	r3, sp, #56	; 0x38
 8014998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801499c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80149a0:	e7db      	b.n	801495a <__kernel_rem_pio2+0x30a>
 80149a2:	a90e      	add	r1, sp, #56	; 0x38
 80149a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80149a8:	3b01      	subs	r3, #1
 80149aa:	430a      	orrs	r2, r1
 80149ac:	e78b      	b.n	80148c6 <__kernel_rem_pio2+0x276>
 80149ae:	3301      	adds	r3, #1
 80149b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80149b4:	2900      	cmp	r1, #0
 80149b6:	d0fa      	beq.n	80149ae <__kernel_rem_pio2+0x35e>
 80149b8:	9a08      	ldr	r2, [sp, #32]
 80149ba:	4422      	add	r2, r4
 80149bc:	00d2      	lsls	r2, r2, #3
 80149be:	a922      	add	r1, sp, #136	; 0x88
 80149c0:	18e3      	adds	r3, r4, r3
 80149c2:	9206      	str	r2, [sp, #24]
 80149c4:	440a      	add	r2, r1
 80149c6:	9302      	str	r3, [sp, #8]
 80149c8:	f10b 0108 	add.w	r1, fp, #8
 80149cc:	f102 0308 	add.w	r3, r2, #8
 80149d0:	1c66      	adds	r6, r4, #1
 80149d2:	910a      	str	r1, [sp, #40]	; 0x28
 80149d4:	2500      	movs	r5, #0
 80149d6:	930d      	str	r3, [sp, #52]	; 0x34
 80149d8:	9b02      	ldr	r3, [sp, #8]
 80149da:	42b3      	cmp	r3, r6
 80149dc:	da04      	bge.n	80149e8 <__kernel_rem_pio2+0x398>
 80149de:	461c      	mov	r4, r3
 80149e0:	e6a6      	b.n	8014730 <__kernel_rem_pio2+0xe0>
 80149e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80149e4:	2301      	movs	r3, #1
 80149e6:	e7e3      	b.n	80149b0 <__kernel_rem_pio2+0x360>
 80149e8:	9b06      	ldr	r3, [sp, #24]
 80149ea:	18ef      	adds	r7, r5, r3
 80149ec:	ab22      	add	r3, sp, #136	; 0x88
 80149ee:	441f      	add	r7, r3
 80149f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80149f6:	f7eb fdad 	bl	8000554 <__aeabi_i2d>
 80149fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149fc:	461c      	mov	r4, r3
 80149fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a00:	e9c7 0100 	strd	r0, r1, [r7]
 8014a04:	eb03 0b05 	add.w	fp, r3, r5
 8014a08:	2700      	movs	r7, #0
 8014a0a:	f04f 0800 	mov.w	r8, #0
 8014a0e:	f04f 0900 	mov.w	r9, #0
 8014a12:	9b07      	ldr	r3, [sp, #28]
 8014a14:	429f      	cmp	r7, r3
 8014a16:	dd08      	ble.n	8014a2a <__kernel_rem_pio2+0x3da>
 8014a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a1a:	aa72      	add	r2, sp, #456	; 0x1c8
 8014a1c:	18eb      	adds	r3, r5, r3
 8014a1e:	4413      	add	r3, r2
 8014a20:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014a24:	3601      	adds	r6, #1
 8014a26:	3508      	adds	r5, #8
 8014a28:	e7d6      	b.n	80149d8 <__kernel_rem_pio2+0x388>
 8014a2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014a2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014a32:	f7eb fdf9 	bl	8000628 <__aeabi_dmul>
 8014a36:	4602      	mov	r2, r0
 8014a38:	460b      	mov	r3, r1
 8014a3a:	4640      	mov	r0, r8
 8014a3c:	4649      	mov	r1, r9
 8014a3e:	f7eb fc3d 	bl	80002bc <__adddf3>
 8014a42:	3701      	adds	r7, #1
 8014a44:	4680      	mov	r8, r0
 8014a46:	4689      	mov	r9, r1
 8014a48:	e7e3      	b.n	8014a12 <__kernel_rem_pio2+0x3c2>
 8014a4a:	3d01      	subs	r5, #1
 8014a4c:	e741      	b.n	80148d2 <__kernel_rem_pio2+0x282>
 8014a4e:	f1ca 0000 	rsb	r0, sl, #0
 8014a52:	ec47 6b10 	vmov	d0, r6, r7
 8014a56:	f000 fa83 	bl	8014f60 <scalbn>
 8014a5a:	ec57 6b10 	vmov	r6, r7, d0
 8014a5e:	2200      	movs	r2, #0
 8014a60:	4b99      	ldr	r3, [pc, #612]	; (8014cc8 <__kernel_rem_pio2+0x678>)
 8014a62:	ee10 0a10 	vmov	r0, s0
 8014a66:	4639      	mov	r1, r7
 8014a68:	f7ec f864 	bl	8000b34 <__aeabi_dcmpge>
 8014a6c:	b1f8      	cbz	r0, 8014aae <__kernel_rem_pio2+0x45e>
 8014a6e:	2200      	movs	r2, #0
 8014a70:	4b96      	ldr	r3, [pc, #600]	; (8014ccc <__kernel_rem_pio2+0x67c>)
 8014a72:	4630      	mov	r0, r6
 8014a74:	4639      	mov	r1, r7
 8014a76:	f7eb fdd7 	bl	8000628 <__aeabi_dmul>
 8014a7a:	f7ec f885 	bl	8000b88 <__aeabi_d2iz>
 8014a7e:	4680      	mov	r8, r0
 8014a80:	f7eb fd68 	bl	8000554 <__aeabi_i2d>
 8014a84:	2200      	movs	r2, #0
 8014a86:	4b90      	ldr	r3, [pc, #576]	; (8014cc8 <__kernel_rem_pio2+0x678>)
 8014a88:	f7eb fdce 	bl	8000628 <__aeabi_dmul>
 8014a8c:	460b      	mov	r3, r1
 8014a8e:	4602      	mov	r2, r0
 8014a90:	4639      	mov	r1, r7
 8014a92:	4630      	mov	r0, r6
 8014a94:	f7eb fc10 	bl	80002b8 <__aeabi_dsub>
 8014a98:	f7ec f876 	bl	8000b88 <__aeabi_d2iz>
 8014a9c:	1c65      	adds	r5, r4, #1
 8014a9e:	ab0e      	add	r3, sp, #56	; 0x38
 8014aa0:	f10a 0a18 	add.w	sl, sl, #24
 8014aa4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014aa8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014aac:	e719      	b.n	80148e2 <__kernel_rem_pio2+0x292>
 8014aae:	4630      	mov	r0, r6
 8014ab0:	4639      	mov	r1, r7
 8014ab2:	f7ec f869 	bl	8000b88 <__aeabi_d2iz>
 8014ab6:	ab0e      	add	r3, sp, #56	; 0x38
 8014ab8:	4625      	mov	r5, r4
 8014aba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014abe:	e710      	b.n	80148e2 <__kernel_rem_pio2+0x292>
 8014ac0:	ab0e      	add	r3, sp, #56	; 0x38
 8014ac2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014ac6:	f7eb fd45 	bl	8000554 <__aeabi_i2d>
 8014aca:	4642      	mov	r2, r8
 8014acc:	464b      	mov	r3, r9
 8014ace:	f7eb fdab 	bl	8000628 <__aeabi_dmul>
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014ad8:	4b7c      	ldr	r3, [pc, #496]	; (8014ccc <__kernel_rem_pio2+0x67c>)
 8014ada:	4640      	mov	r0, r8
 8014adc:	4649      	mov	r1, r9
 8014ade:	f7eb fda3 	bl	8000628 <__aeabi_dmul>
 8014ae2:	3f01      	subs	r7, #1
 8014ae4:	4680      	mov	r8, r0
 8014ae6:	4689      	mov	r9, r1
 8014ae8:	e708      	b.n	80148fc <__kernel_rem_pio2+0x2ac>
 8014aea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014af6:	f7eb fd97 	bl	8000628 <__aeabi_dmul>
 8014afa:	4602      	mov	r2, r0
 8014afc:	460b      	mov	r3, r1
 8014afe:	4640      	mov	r0, r8
 8014b00:	4649      	mov	r1, r9
 8014b02:	f7eb fbdb 	bl	80002bc <__adddf3>
 8014b06:	3701      	adds	r7, #1
 8014b08:	4680      	mov	r8, r0
 8014b0a:	4689      	mov	r9, r1
 8014b0c:	9b04      	ldr	r3, [sp, #16]
 8014b0e:	429f      	cmp	r7, r3
 8014b10:	dc01      	bgt.n	8014b16 <__kernel_rem_pio2+0x4c6>
 8014b12:	45ba      	cmp	sl, r7
 8014b14:	dae9      	bge.n	8014aea <__kernel_rem_pio2+0x49a>
 8014b16:	ab4a      	add	r3, sp, #296	; 0x128
 8014b18:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014b1c:	e9c3 8900 	strd	r8, r9, [r3]
 8014b20:	f10a 0a01 	add.w	sl, sl, #1
 8014b24:	3e08      	subs	r6, #8
 8014b26:	e6f0      	b.n	801490a <__kernel_rem_pio2+0x2ba>
 8014b28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014b2a:	2b03      	cmp	r3, #3
 8014b2c:	d85b      	bhi.n	8014be6 <__kernel_rem_pio2+0x596>
 8014b2e:	e8df f003 	tbb	[pc, r3]
 8014b32:	264a      	.short	0x264a
 8014b34:	0226      	.short	0x0226
 8014b36:	ab9a      	add	r3, sp, #616	; 0x268
 8014b38:	441c      	add	r4, r3
 8014b3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014b3e:	46a2      	mov	sl, r4
 8014b40:	46ab      	mov	fp, r5
 8014b42:	f1bb 0f00 	cmp.w	fp, #0
 8014b46:	dc6c      	bgt.n	8014c22 <__kernel_rem_pio2+0x5d2>
 8014b48:	46a2      	mov	sl, r4
 8014b4a:	46ab      	mov	fp, r5
 8014b4c:	f1bb 0f01 	cmp.w	fp, #1
 8014b50:	f300 8086 	bgt.w	8014c60 <__kernel_rem_pio2+0x610>
 8014b54:	2000      	movs	r0, #0
 8014b56:	2100      	movs	r1, #0
 8014b58:	2d01      	cmp	r5, #1
 8014b5a:	f300 80a0 	bgt.w	8014c9e <__kernel_rem_pio2+0x64e>
 8014b5e:	9b02      	ldr	r3, [sp, #8]
 8014b60:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014b64:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	f040 809e 	bne.w	8014caa <__kernel_rem_pio2+0x65a>
 8014b6e:	9b01      	ldr	r3, [sp, #4]
 8014b70:	e9c3 7800 	strd	r7, r8, [r3]
 8014b74:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014b78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014b7c:	e033      	b.n	8014be6 <__kernel_rem_pio2+0x596>
 8014b7e:	3408      	adds	r4, #8
 8014b80:	ab4a      	add	r3, sp, #296	; 0x128
 8014b82:	441c      	add	r4, r3
 8014b84:	462e      	mov	r6, r5
 8014b86:	2000      	movs	r0, #0
 8014b88:	2100      	movs	r1, #0
 8014b8a:	2e00      	cmp	r6, #0
 8014b8c:	da3a      	bge.n	8014c04 <__kernel_rem_pio2+0x5b4>
 8014b8e:	9b02      	ldr	r3, [sp, #8]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d03d      	beq.n	8014c10 <__kernel_rem_pio2+0x5c0>
 8014b94:	4602      	mov	r2, r0
 8014b96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b9a:	9c01      	ldr	r4, [sp, #4]
 8014b9c:	e9c4 2300 	strd	r2, r3, [r4]
 8014ba0:	4602      	mov	r2, r0
 8014ba2:	460b      	mov	r3, r1
 8014ba4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014ba8:	f7eb fb86 	bl	80002b8 <__aeabi_dsub>
 8014bac:	ae4c      	add	r6, sp, #304	; 0x130
 8014bae:	2401      	movs	r4, #1
 8014bb0:	42a5      	cmp	r5, r4
 8014bb2:	da30      	bge.n	8014c16 <__kernel_rem_pio2+0x5c6>
 8014bb4:	9b02      	ldr	r3, [sp, #8]
 8014bb6:	b113      	cbz	r3, 8014bbe <__kernel_rem_pio2+0x56e>
 8014bb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	9b01      	ldr	r3, [sp, #4]
 8014bc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014bc4:	e00f      	b.n	8014be6 <__kernel_rem_pio2+0x596>
 8014bc6:	ab9a      	add	r3, sp, #616	; 0x268
 8014bc8:	441c      	add	r4, r3
 8014bca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014bce:	2000      	movs	r0, #0
 8014bd0:	2100      	movs	r1, #0
 8014bd2:	2d00      	cmp	r5, #0
 8014bd4:	da10      	bge.n	8014bf8 <__kernel_rem_pio2+0x5a8>
 8014bd6:	9b02      	ldr	r3, [sp, #8]
 8014bd8:	b113      	cbz	r3, 8014be0 <__kernel_rem_pio2+0x590>
 8014bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014bde:	4619      	mov	r1, r3
 8014be0:	9b01      	ldr	r3, [sp, #4]
 8014be2:	e9c3 0100 	strd	r0, r1, [r3]
 8014be6:	9b06      	ldr	r3, [sp, #24]
 8014be8:	f003 0007 	and.w	r0, r3, #7
 8014bec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014bf0:	ecbd 8b02 	vpop	{d8}
 8014bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bf8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014bfc:	f7eb fb5e 	bl	80002bc <__adddf3>
 8014c00:	3d01      	subs	r5, #1
 8014c02:	e7e6      	b.n	8014bd2 <__kernel_rem_pio2+0x582>
 8014c04:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014c08:	f7eb fb58 	bl	80002bc <__adddf3>
 8014c0c:	3e01      	subs	r6, #1
 8014c0e:	e7bc      	b.n	8014b8a <__kernel_rem_pio2+0x53a>
 8014c10:	4602      	mov	r2, r0
 8014c12:	460b      	mov	r3, r1
 8014c14:	e7c1      	b.n	8014b9a <__kernel_rem_pio2+0x54a>
 8014c16:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014c1a:	f7eb fb4f 	bl	80002bc <__adddf3>
 8014c1e:	3401      	adds	r4, #1
 8014c20:	e7c6      	b.n	8014bb0 <__kernel_rem_pio2+0x560>
 8014c22:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014c26:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014c2a:	4640      	mov	r0, r8
 8014c2c:	ec53 2b17 	vmov	r2, r3, d7
 8014c30:	4649      	mov	r1, r9
 8014c32:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014c36:	f7eb fb41 	bl	80002bc <__adddf3>
 8014c3a:	4602      	mov	r2, r0
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	4606      	mov	r6, r0
 8014c40:	460f      	mov	r7, r1
 8014c42:	4640      	mov	r0, r8
 8014c44:	4649      	mov	r1, r9
 8014c46:	f7eb fb37 	bl	80002b8 <__aeabi_dsub>
 8014c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c4e:	f7eb fb35 	bl	80002bc <__adddf3>
 8014c52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014c56:	e9ca 0100 	strd	r0, r1, [sl]
 8014c5a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8014c5e:	e770      	b.n	8014b42 <__kernel_rem_pio2+0x4f2>
 8014c60:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014c64:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014c68:	4630      	mov	r0, r6
 8014c6a:	ec53 2b17 	vmov	r2, r3, d7
 8014c6e:	4639      	mov	r1, r7
 8014c70:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014c74:	f7eb fb22 	bl	80002bc <__adddf3>
 8014c78:	4602      	mov	r2, r0
 8014c7a:	460b      	mov	r3, r1
 8014c7c:	4680      	mov	r8, r0
 8014c7e:	4689      	mov	r9, r1
 8014c80:	4630      	mov	r0, r6
 8014c82:	4639      	mov	r1, r7
 8014c84:	f7eb fb18 	bl	80002b8 <__aeabi_dsub>
 8014c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c8c:	f7eb fb16 	bl	80002bc <__adddf3>
 8014c90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014c94:	e9ca 0100 	strd	r0, r1, [sl]
 8014c98:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8014c9c:	e756      	b.n	8014b4c <__kernel_rem_pio2+0x4fc>
 8014c9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014ca2:	f7eb fb0b 	bl	80002bc <__adddf3>
 8014ca6:	3d01      	subs	r5, #1
 8014ca8:	e756      	b.n	8014b58 <__kernel_rem_pio2+0x508>
 8014caa:	9b01      	ldr	r3, [sp, #4]
 8014cac:	9a01      	ldr	r2, [sp, #4]
 8014cae:	601f      	str	r7, [r3, #0]
 8014cb0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014cb4:	605c      	str	r4, [r3, #4]
 8014cb6:	609d      	str	r5, [r3, #8]
 8014cb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014cbc:	60d3      	str	r3, [r2, #12]
 8014cbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cc2:	6110      	str	r0, [r2, #16]
 8014cc4:	6153      	str	r3, [r2, #20]
 8014cc6:	e78e      	b.n	8014be6 <__kernel_rem_pio2+0x596>
 8014cc8:	41700000 	.word	0x41700000
 8014ccc:	3e700000 	.word	0x3e700000

08014cd0 <__kernel_sin>:
 8014cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cd4:	ec55 4b10 	vmov	r4, r5, d0
 8014cd8:	b085      	sub	sp, #20
 8014cda:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014cde:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014ce2:	ed8d 1b00 	vstr	d1, [sp]
 8014ce6:	9002      	str	r0, [sp, #8]
 8014ce8:	da06      	bge.n	8014cf8 <__kernel_sin+0x28>
 8014cea:	ee10 0a10 	vmov	r0, s0
 8014cee:	4629      	mov	r1, r5
 8014cf0:	f7eb ff4a 	bl	8000b88 <__aeabi_d2iz>
 8014cf4:	2800      	cmp	r0, #0
 8014cf6:	d051      	beq.n	8014d9c <__kernel_sin+0xcc>
 8014cf8:	4622      	mov	r2, r4
 8014cfa:	462b      	mov	r3, r5
 8014cfc:	4620      	mov	r0, r4
 8014cfe:	4629      	mov	r1, r5
 8014d00:	f7eb fc92 	bl	8000628 <__aeabi_dmul>
 8014d04:	4682      	mov	sl, r0
 8014d06:	468b      	mov	fp, r1
 8014d08:	4602      	mov	r2, r0
 8014d0a:	460b      	mov	r3, r1
 8014d0c:	4620      	mov	r0, r4
 8014d0e:	4629      	mov	r1, r5
 8014d10:	f7eb fc8a 	bl	8000628 <__aeabi_dmul>
 8014d14:	a341      	add	r3, pc, #260	; (adr r3, 8014e1c <__kernel_sin+0x14c>)
 8014d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d1a:	4680      	mov	r8, r0
 8014d1c:	4689      	mov	r9, r1
 8014d1e:	4650      	mov	r0, sl
 8014d20:	4659      	mov	r1, fp
 8014d22:	f7eb fc81 	bl	8000628 <__aeabi_dmul>
 8014d26:	a33f      	add	r3, pc, #252	; (adr r3, 8014e24 <__kernel_sin+0x154>)
 8014d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d2c:	f7eb fac4 	bl	80002b8 <__aeabi_dsub>
 8014d30:	4652      	mov	r2, sl
 8014d32:	465b      	mov	r3, fp
 8014d34:	f7eb fc78 	bl	8000628 <__aeabi_dmul>
 8014d38:	a33c      	add	r3, pc, #240	; (adr r3, 8014e2c <__kernel_sin+0x15c>)
 8014d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d3e:	f7eb fabd 	bl	80002bc <__adddf3>
 8014d42:	4652      	mov	r2, sl
 8014d44:	465b      	mov	r3, fp
 8014d46:	f7eb fc6f 	bl	8000628 <__aeabi_dmul>
 8014d4a:	a33a      	add	r3, pc, #232	; (adr r3, 8014e34 <__kernel_sin+0x164>)
 8014d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d50:	f7eb fab2 	bl	80002b8 <__aeabi_dsub>
 8014d54:	4652      	mov	r2, sl
 8014d56:	465b      	mov	r3, fp
 8014d58:	f7eb fc66 	bl	8000628 <__aeabi_dmul>
 8014d5c:	a337      	add	r3, pc, #220	; (adr r3, 8014e3c <__kernel_sin+0x16c>)
 8014d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d62:	f7eb faab 	bl	80002bc <__adddf3>
 8014d66:	9b02      	ldr	r3, [sp, #8]
 8014d68:	4606      	mov	r6, r0
 8014d6a:	460f      	mov	r7, r1
 8014d6c:	b9db      	cbnz	r3, 8014da6 <__kernel_sin+0xd6>
 8014d6e:	4602      	mov	r2, r0
 8014d70:	460b      	mov	r3, r1
 8014d72:	4650      	mov	r0, sl
 8014d74:	4659      	mov	r1, fp
 8014d76:	f7eb fc57 	bl	8000628 <__aeabi_dmul>
 8014d7a:	a325      	add	r3, pc, #148	; (adr r3, 8014e10 <__kernel_sin+0x140>)
 8014d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d80:	f7eb fa9a 	bl	80002b8 <__aeabi_dsub>
 8014d84:	4642      	mov	r2, r8
 8014d86:	464b      	mov	r3, r9
 8014d88:	f7eb fc4e 	bl	8000628 <__aeabi_dmul>
 8014d8c:	4602      	mov	r2, r0
 8014d8e:	460b      	mov	r3, r1
 8014d90:	4620      	mov	r0, r4
 8014d92:	4629      	mov	r1, r5
 8014d94:	f7eb fa92 	bl	80002bc <__adddf3>
 8014d98:	4604      	mov	r4, r0
 8014d9a:	460d      	mov	r5, r1
 8014d9c:	ec45 4b10 	vmov	d0, r4, r5
 8014da0:	b005      	add	sp, #20
 8014da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da6:	2200      	movs	r2, #0
 8014da8:	4b1b      	ldr	r3, [pc, #108]	; (8014e18 <__kernel_sin+0x148>)
 8014daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014dae:	f7eb fc3b 	bl	8000628 <__aeabi_dmul>
 8014db2:	4632      	mov	r2, r6
 8014db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014db8:	463b      	mov	r3, r7
 8014dba:	4640      	mov	r0, r8
 8014dbc:	4649      	mov	r1, r9
 8014dbe:	f7eb fc33 	bl	8000628 <__aeabi_dmul>
 8014dc2:	4602      	mov	r2, r0
 8014dc4:	460b      	mov	r3, r1
 8014dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014dca:	f7eb fa75 	bl	80002b8 <__aeabi_dsub>
 8014dce:	4652      	mov	r2, sl
 8014dd0:	465b      	mov	r3, fp
 8014dd2:	f7eb fc29 	bl	8000628 <__aeabi_dmul>
 8014dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014dda:	f7eb fa6d 	bl	80002b8 <__aeabi_dsub>
 8014dde:	a30c      	add	r3, pc, #48	; (adr r3, 8014e10 <__kernel_sin+0x140>)
 8014de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de4:	4606      	mov	r6, r0
 8014de6:	460f      	mov	r7, r1
 8014de8:	4640      	mov	r0, r8
 8014dea:	4649      	mov	r1, r9
 8014dec:	f7eb fc1c 	bl	8000628 <__aeabi_dmul>
 8014df0:	4602      	mov	r2, r0
 8014df2:	460b      	mov	r3, r1
 8014df4:	4630      	mov	r0, r6
 8014df6:	4639      	mov	r1, r7
 8014df8:	f7eb fa60 	bl	80002bc <__adddf3>
 8014dfc:	4602      	mov	r2, r0
 8014dfe:	460b      	mov	r3, r1
 8014e00:	4620      	mov	r0, r4
 8014e02:	4629      	mov	r1, r5
 8014e04:	f7eb fa58 	bl	80002b8 <__aeabi_dsub>
 8014e08:	e7c6      	b.n	8014d98 <__kernel_sin+0xc8>
 8014e0a:	bf00      	nop
 8014e0c:	f3af 8000 	nop.w
 8014e10:	55555549 	.word	0x55555549
 8014e14:	3fc55555 	.word	0x3fc55555
 8014e18:	3fe00000 	.word	0x3fe00000
 8014e1c:	5acfd57c 	.word	0x5acfd57c
 8014e20:	3de5d93a 	.word	0x3de5d93a
 8014e24:	8a2b9ceb 	.word	0x8a2b9ceb
 8014e28:	3e5ae5e6 	.word	0x3e5ae5e6
 8014e2c:	57b1fe7d 	.word	0x57b1fe7d
 8014e30:	3ec71de3 	.word	0x3ec71de3
 8014e34:	19c161d5 	.word	0x19c161d5
 8014e38:	3f2a01a0 	.word	0x3f2a01a0
 8014e3c:	1110f8a6 	.word	0x1110f8a6
 8014e40:	3f811111 	.word	0x3f811111

08014e44 <fabs>:
 8014e44:	ec51 0b10 	vmov	r0, r1, d0
 8014e48:	ee10 2a10 	vmov	r2, s0
 8014e4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e50:	ec43 2b10 	vmov	d0, r2, r3
 8014e54:	4770      	bx	lr
	...

08014e58 <floor>:
 8014e58:	ec51 0b10 	vmov	r0, r1, d0
 8014e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014e64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014e68:	2e13      	cmp	r6, #19
 8014e6a:	460c      	mov	r4, r1
 8014e6c:	ee10 5a10 	vmov	r5, s0
 8014e70:	4680      	mov	r8, r0
 8014e72:	dc34      	bgt.n	8014ede <floor+0x86>
 8014e74:	2e00      	cmp	r6, #0
 8014e76:	da16      	bge.n	8014ea6 <floor+0x4e>
 8014e78:	a335      	add	r3, pc, #212	; (adr r3, 8014f50 <floor+0xf8>)
 8014e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e7e:	f7eb fa1d 	bl	80002bc <__adddf3>
 8014e82:	2200      	movs	r2, #0
 8014e84:	2300      	movs	r3, #0
 8014e86:	f7eb fe5f 	bl	8000b48 <__aeabi_dcmpgt>
 8014e8a:	b148      	cbz	r0, 8014ea0 <floor+0x48>
 8014e8c:	2c00      	cmp	r4, #0
 8014e8e:	da59      	bge.n	8014f44 <floor+0xec>
 8014e90:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014e94:	4a30      	ldr	r2, [pc, #192]	; (8014f58 <floor+0x100>)
 8014e96:	432b      	orrs	r3, r5
 8014e98:	2500      	movs	r5, #0
 8014e9a:	42ab      	cmp	r3, r5
 8014e9c:	bf18      	it	ne
 8014e9e:	4614      	movne	r4, r2
 8014ea0:	4621      	mov	r1, r4
 8014ea2:	4628      	mov	r0, r5
 8014ea4:	e025      	b.n	8014ef2 <floor+0x9a>
 8014ea6:	4f2d      	ldr	r7, [pc, #180]	; (8014f5c <floor+0x104>)
 8014ea8:	4137      	asrs	r7, r6
 8014eaa:	ea01 0307 	and.w	r3, r1, r7
 8014eae:	4303      	orrs	r3, r0
 8014eb0:	d01f      	beq.n	8014ef2 <floor+0x9a>
 8014eb2:	a327      	add	r3, pc, #156	; (adr r3, 8014f50 <floor+0xf8>)
 8014eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eb8:	f7eb fa00 	bl	80002bc <__adddf3>
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	f7eb fe42 	bl	8000b48 <__aeabi_dcmpgt>
 8014ec4:	2800      	cmp	r0, #0
 8014ec6:	d0eb      	beq.n	8014ea0 <floor+0x48>
 8014ec8:	2c00      	cmp	r4, #0
 8014eca:	bfbe      	ittt	lt
 8014ecc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014ed0:	fa43 f606 	asrlt.w	r6, r3, r6
 8014ed4:	19a4      	addlt	r4, r4, r6
 8014ed6:	ea24 0407 	bic.w	r4, r4, r7
 8014eda:	2500      	movs	r5, #0
 8014edc:	e7e0      	b.n	8014ea0 <floor+0x48>
 8014ede:	2e33      	cmp	r6, #51	; 0x33
 8014ee0:	dd0b      	ble.n	8014efa <floor+0xa2>
 8014ee2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014ee6:	d104      	bne.n	8014ef2 <floor+0x9a>
 8014ee8:	ee10 2a10 	vmov	r2, s0
 8014eec:	460b      	mov	r3, r1
 8014eee:	f7eb f9e5 	bl	80002bc <__adddf3>
 8014ef2:	ec41 0b10 	vmov	d0, r0, r1
 8014ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014efa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014efe:	f04f 33ff 	mov.w	r3, #4294967295
 8014f02:	fa23 f707 	lsr.w	r7, r3, r7
 8014f06:	4207      	tst	r7, r0
 8014f08:	d0f3      	beq.n	8014ef2 <floor+0x9a>
 8014f0a:	a311      	add	r3, pc, #68	; (adr r3, 8014f50 <floor+0xf8>)
 8014f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f10:	f7eb f9d4 	bl	80002bc <__adddf3>
 8014f14:	2200      	movs	r2, #0
 8014f16:	2300      	movs	r3, #0
 8014f18:	f7eb fe16 	bl	8000b48 <__aeabi_dcmpgt>
 8014f1c:	2800      	cmp	r0, #0
 8014f1e:	d0bf      	beq.n	8014ea0 <floor+0x48>
 8014f20:	2c00      	cmp	r4, #0
 8014f22:	da02      	bge.n	8014f2a <floor+0xd2>
 8014f24:	2e14      	cmp	r6, #20
 8014f26:	d103      	bne.n	8014f30 <floor+0xd8>
 8014f28:	3401      	adds	r4, #1
 8014f2a:	ea25 0507 	bic.w	r5, r5, r7
 8014f2e:	e7b7      	b.n	8014ea0 <floor+0x48>
 8014f30:	2301      	movs	r3, #1
 8014f32:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014f36:	fa03 f606 	lsl.w	r6, r3, r6
 8014f3a:	4435      	add	r5, r6
 8014f3c:	4545      	cmp	r5, r8
 8014f3e:	bf38      	it	cc
 8014f40:	18e4      	addcc	r4, r4, r3
 8014f42:	e7f2      	b.n	8014f2a <floor+0xd2>
 8014f44:	2500      	movs	r5, #0
 8014f46:	462c      	mov	r4, r5
 8014f48:	e7aa      	b.n	8014ea0 <floor+0x48>
 8014f4a:	bf00      	nop
 8014f4c:	f3af 8000 	nop.w
 8014f50:	8800759c 	.word	0x8800759c
 8014f54:	7e37e43c 	.word	0x7e37e43c
 8014f58:	bff00000 	.word	0xbff00000
 8014f5c:	000fffff 	.word	0x000fffff

08014f60 <scalbn>:
 8014f60:	b570      	push	{r4, r5, r6, lr}
 8014f62:	ec55 4b10 	vmov	r4, r5, d0
 8014f66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014f6a:	4606      	mov	r6, r0
 8014f6c:	462b      	mov	r3, r5
 8014f6e:	b9aa      	cbnz	r2, 8014f9c <scalbn+0x3c>
 8014f70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014f74:	4323      	orrs	r3, r4
 8014f76:	d03b      	beq.n	8014ff0 <scalbn+0x90>
 8014f78:	4b31      	ldr	r3, [pc, #196]	; (8015040 <scalbn+0xe0>)
 8014f7a:	4629      	mov	r1, r5
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	ee10 0a10 	vmov	r0, s0
 8014f82:	f7eb fb51 	bl	8000628 <__aeabi_dmul>
 8014f86:	4b2f      	ldr	r3, [pc, #188]	; (8015044 <scalbn+0xe4>)
 8014f88:	429e      	cmp	r6, r3
 8014f8a:	4604      	mov	r4, r0
 8014f8c:	460d      	mov	r5, r1
 8014f8e:	da12      	bge.n	8014fb6 <scalbn+0x56>
 8014f90:	a327      	add	r3, pc, #156	; (adr r3, 8015030 <scalbn+0xd0>)
 8014f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f96:	f7eb fb47 	bl	8000628 <__aeabi_dmul>
 8014f9a:	e009      	b.n	8014fb0 <scalbn+0x50>
 8014f9c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014fa0:	428a      	cmp	r2, r1
 8014fa2:	d10c      	bne.n	8014fbe <scalbn+0x5e>
 8014fa4:	ee10 2a10 	vmov	r2, s0
 8014fa8:	4620      	mov	r0, r4
 8014faa:	4629      	mov	r1, r5
 8014fac:	f7eb f986 	bl	80002bc <__adddf3>
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	460d      	mov	r5, r1
 8014fb4:	e01c      	b.n	8014ff0 <scalbn+0x90>
 8014fb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014fba:	460b      	mov	r3, r1
 8014fbc:	3a36      	subs	r2, #54	; 0x36
 8014fbe:	4432      	add	r2, r6
 8014fc0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014fc4:	428a      	cmp	r2, r1
 8014fc6:	dd0b      	ble.n	8014fe0 <scalbn+0x80>
 8014fc8:	ec45 4b11 	vmov	d1, r4, r5
 8014fcc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015038 <scalbn+0xd8>
 8014fd0:	f000 f83c 	bl	801504c <copysign>
 8014fd4:	a318      	add	r3, pc, #96	; (adr r3, 8015038 <scalbn+0xd8>)
 8014fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fda:	ec51 0b10 	vmov	r0, r1, d0
 8014fde:	e7da      	b.n	8014f96 <scalbn+0x36>
 8014fe0:	2a00      	cmp	r2, #0
 8014fe2:	dd08      	ble.n	8014ff6 <scalbn+0x96>
 8014fe4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014fe8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014fec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014ff0:	ec45 4b10 	vmov	d0, r4, r5
 8014ff4:	bd70      	pop	{r4, r5, r6, pc}
 8014ff6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014ffa:	da0d      	bge.n	8015018 <scalbn+0xb8>
 8014ffc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015000:	429e      	cmp	r6, r3
 8015002:	ec45 4b11 	vmov	d1, r4, r5
 8015006:	dce1      	bgt.n	8014fcc <scalbn+0x6c>
 8015008:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015030 <scalbn+0xd0>
 801500c:	f000 f81e 	bl	801504c <copysign>
 8015010:	a307      	add	r3, pc, #28	; (adr r3, 8015030 <scalbn+0xd0>)
 8015012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015016:	e7e0      	b.n	8014fda <scalbn+0x7a>
 8015018:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801501c:	3236      	adds	r2, #54	; 0x36
 801501e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015022:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015026:	4620      	mov	r0, r4
 8015028:	4629      	mov	r1, r5
 801502a:	2200      	movs	r2, #0
 801502c:	4b06      	ldr	r3, [pc, #24]	; (8015048 <scalbn+0xe8>)
 801502e:	e7b2      	b.n	8014f96 <scalbn+0x36>
 8015030:	c2f8f359 	.word	0xc2f8f359
 8015034:	01a56e1f 	.word	0x01a56e1f
 8015038:	8800759c 	.word	0x8800759c
 801503c:	7e37e43c 	.word	0x7e37e43c
 8015040:	43500000 	.word	0x43500000
 8015044:	ffff3cb0 	.word	0xffff3cb0
 8015048:	3c900000 	.word	0x3c900000

0801504c <copysign>:
 801504c:	ec51 0b10 	vmov	r0, r1, d0
 8015050:	ee11 0a90 	vmov	r0, s3
 8015054:	ee10 2a10 	vmov	r2, s0
 8015058:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801505c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015060:	ea41 0300 	orr.w	r3, r1, r0
 8015064:	ec43 2b10 	vmov	d0, r2, r3
 8015068:	4770      	bx	lr
	...

0801506c <__errno>:
 801506c:	4b01      	ldr	r3, [pc, #4]	; (8015074 <__errno+0x8>)
 801506e:	6818      	ldr	r0, [r3, #0]
 8015070:	4770      	bx	lr
 8015072:	bf00      	nop
 8015074:	2000000c 	.word	0x2000000c

08015078 <__libc_init_array>:
 8015078:	b570      	push	{r4, r5, r6, lr}
 801507a:	4e0d      	ldr	r6, [pc, #52]	; (80150b0 <__libc_init_array+0x38>)
 801507c:	4c0d      	ldr	r4, [pc, #52]	; (80150b4 <__libc_init_array+0x3c>)
 801507e:	1ba4      	subs	r4, r4, r6
 8015080:	10a4      	asrs	r4, r4, #2
 8015082:	2500      	movs	r5, #0
 8015084:	42a5      	cmp	r5, r4
 8015086:	d109      	bne.n	801509c <__libc_init_array+0x24>
 8015088:	4e0b      	ldr	r6, [pc, #44]	; (80150b8 <__libc_init_array+0x40>)
 801508a:	4c0c      	ldr	r4, [pc, #48]	; (80150bc <__libc_init_array+0x44>)
 801508c:	f004 f9e8 	bl	8019460 <_init>
 8015090:	1ba4      	subs	r4, r4, r6
 8015092:	10a4      	asrs	r4, r4, #2
 8015094:	2500      	movs	r5, #0
 8015096:	42a5      	cmp	r5, r4
 8015098:	d105      	bne.n	80150a6 <__libc_init_array+0x2e>
 801509a:	bd70      	pop	{r4, r5, r6, pc}
 801509c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80150a0:	4798      	blx	r3
 80150a2:	3501      	adds	r5, #1
 80150a4:	e7ee      	b.n	8015084 <__libc_init_array+0xc>
 80150a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80150aa:	4798      	blx	r3
 80150ac:	3501      	adds	r5, #1
 80150ae:	e7f2      	b.n	8015096 <__libc_init_array+0x1e>
 80150b0:	0801a08c 	.word	0x0801a08c
 80150b4:	0801a08c 	.word	0x0801a08c
 80150b8:	0801a08c 	.word	0x0801a08c
 80150bc:	0801a094 	.word	0x0801a094

080150c0 <memcpy>:
 80150c0:	b510      	push	{r4, lr}
 80150c2:	1e43      	subs	r3, r0, #1
 80150c4:	440a      	add	r2, r1
 80150c6:	4291      	cmp	r1, r2
 80150c8:	d100      	bne.n	80150cc <memcpy+0xc>
 80150ca:	bd10      	pop	{r4, pc}
 80150cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80150d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80150d4:	e7f7      	b.n	80150c6 <memcpy+0x6>

080150d6 <memset>:
 80150d6:	4402      	add	r2, r0
 80150d8:	4603      	mov	r3, r0
 80150da:	4293      	cmp	r3, r2
 80150dc:	d100      	bne.n	80150e0 <memset+0xa>
 80150de:	4770      	bx	lr
 80150e0:	f803 1b01 	strb.w	r1, [r3], #1
 80150e4:	e7f9      	b.n	80150da <memset+0x4>

080150e6 <__cvt>:
 80150e6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80150ea:	ec55 4b10 	vmov	r4, r5, d0
 80150ee:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80150f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80150f4:	2d00      	cmp	r5, #0
 80150f6:	460e      	mov	r6, r1
 80150f8:	4691      	mov	r9, r2
 80150fa:	4619      	mov	r1, r3
 80150fc:	bfb8      	it	lt
 80150fe:	4622      	movlt	r2, r4
 8015100:	462b      	mov	r3, r5
 8015102:	f027 0720 	bic.w	r7, r7, #32
 8015106:	bfbb      	ittet	lt
 8015108:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801510c:	461d      	movlt	r5, r3
 801510e:	2300      	movge	r3, #0
 8015110:	232d      	movlt	r3, #45	; 0x2d
 8015112:	bfb8      	it	lt
 8015114:	4614      	movlt	r4, r2
 8015116:	2f46      	cmp	r7, #70	; 0x46
 8015118:	700b      	strb	r3, [r1, #0]
 801511a:	d004      	beq.n	8015126 <__cvt+0x40>
 801511c:	2f45      	cmp	r7, #69	; 0x45
 801511e:	d100      	bne.n	8015122 <__cvt+0x3c>
 8015120:	3601      	adds	r6, #1
 8015122:	2102      	movs	r1, #2
 8015124:	e000      	b.n	8015128 <__cvt+0x42>
 8015126:	2103      	movs	r1, #3
 8015128:	ab03      	add	r3, sp, #12
 801512a:	9301      	str	r3, [sp, #4]
 801512c:	ab02      	add	r3, sp, #8
 801512e:	9300      	str	r3, [sp, #0]
 8015130:	4632      	mov	r2, r6
 8015132:	4653      	mov	r3, sl
 8015134:	ec45 4b10 	vmov	d0, r4, r5
 8015138:	f001 fdfe 	bl	8016d38 <_dtoa_r>
 801513c:	2f47      	cmp	r7, #71	; 0x47
 801513e:	4680      	mov	r8, r0
 8015140:	d102      	bne.n	8015148 <__cvt+0x62>
 8015142:	f019 0f01 	tst.w	r9, #1
 8015146:	d026      	beq.n	8015196 <__cvt+0xb0>
 8015148:	2f46      	cmp	r7, #70	; 0x46
 801514a:	eb08 0906 	add.w	r9, r8, r6
 801514e:	d111      	bne.n	8015174 <__cvt+0x8e>
 8015150:	f898 3000 	ldrb.w	r3, [r8]
 8015154:	2b30      	cmp	r3, #48	; 0x30
 8015156:	d10a      	bne.n	801516e <__cvt+0x88>
 8015158:	2200      	movs	r2, #0
 801515a:	2300      	movs	r3, #0
 801515c:	4620      	mov	r0, r4
 801515e:	4629      	mov	r1, r5
 8015160:	f7eb fcca 	bl	8000af8 <__aeabi_dcmpeq>
 8015164:	b918      	cbnz	r0, 801516e <__cvt+0x88>
 8015166:	f1c6 0601 	rsb	r6, r6, #1
 801516a:	f8ca 6000 	str.w	r6, [sl]
 801516e:	f8da 3000 	ldr.w	r3, [sl]
 8015172:	4499      	add	r9, r3
 8015174:	2200      	movs	r2, #0
 8015176:	2300      	movs	r3, #0
 8015178:	4620      	mov	r0, r4
 801517a:	4629      	mov	r1, r5
 801517c:	f7eb fcbc 	bl	8000af8 <__aeabi_dcmpeq>
 8015180:	b938      	cbnz	r0, 8015192 <__cvt+0xac>
 8015182:	2230      	movs	r2, #48	; 0x30
 8015184:	9b03      	ldr	r3, [sp, #12]
 8015186:	454b      	cmp	r3, r9
 8015188:	d205      	bcs.n	8015196 <__cvt+0xb0>
 801518a:	1c59      	adds	r1, r3, #1
 801518c:	9103      	str	r1, [sp, #12]
 801518e:	701a      	strb	r2, [r3, #0]
 8015190:	e7f8      	b.n	8015184 <__cvt+0x9e>
 8015192:	f8cd 900c 	str.w	r9, [sp, #12]
 8015196:	9b03      	ldr	r3, [sp, #12]
 8015198:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801519a:	eba3 0308 	sub.w	r3, r3, r8
 801519e:	4640      	mov	r0, r8
 80151a0:	6013      	str	r3, [r2, #0]
 80151a2:	b004      	add	sp, #16
 80151a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080151a8 <__exponent>:
 80151a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80151aa:	2900      	cmp	r1, #0
 80151ac:	4604      	mov	r4, r0
 80151ae:	bfba      	itte	lt
 80151b0:	4249      	neglt	r1, r1
 80151b2:	232d      	movlt	r3, #45	; 0x2d
 80151b4:	232b      	movge	r3, #43	; 0x2b
 80151b6:	2909      	cmp	r1, #9
 80151b8:	f804 2b02 	strb.w	r2, [r4], #2
 80151bc:	7043      	strb	r3, [r0, #1]
 80151be:	dd20      	ble.n	8015202 <__exponent+0x5a>
 80151c0:	f10d 0307 	add.w	r3, sp, #7
 80151c4:	461f      	mov	r7, r3
 80151c6:	260a      	movs	r6, #10
 80151c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80151cc:	fb06 1115 	mls	r1, r6, r5, r1
 80151d0:	3130      	adds	r1, #48	; 0x30
 80151d2:	2d09      	cmp	r5, #9
 80151d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80151d8:	f103 32ff 	add.w	r2, r3, #4294967295
 80151dc:	4629      	mov	r1, r5
 80151de:	dc09      	bgt.n	80151f4 <__exponent+0x4c>
 80151e0:	3130      	adds	r1, #48	; 0x30
 80151e2:	3b02      	subs	r3, #2
 80151e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80151e8:	42bb      	cmp	r3, r7
 80151ea:	4622      	mov	r2, r4
 80151ec:	d304      	bcc.n	80151f8 <__exponent+0x50>
 80151ee:	1a10      	subs	r0, r2, r0
 80151f0:	b003      	add	sp, #12
 80151f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151f4:	4613      	mov	r3, r2
 80151f6:	e7e7      	b.n	80151c8 <__exponent+0x20>
 80151f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151fc:	f804 2b01 	strb.w	r2, [r4], #1
 8015200:	e7f2      	b.n	80151e8 <__exponent+0x40>
 8015202:	2330      	movs	r3, #48	; 0x30
 8015204:	4419      	add	r1, r3
 8015206:	7083      	strb	r3, [r0, #2]
 8015208:	1d02      	adds	r2, r0, #4
 801520a:	70c1      	strb	r1, [r0, #3]
 801520c:	e7ef      	b.n	80151ee <__exponent+0x46>
	...

08015210 <_printf_float>:
 8015210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015214:	b08d      	sub	sp, #52	; 0x34
 8015216:	460c      	mov	r4, r1
 8015218:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801521c:	4616      	mov	r6, r2
 801521e:	461f      	mov	r7, r3
 8015220:	4605      	mov	r5, r0
 8015222:	f002 fe7b 	bl	8017f1c <_localeconv_r>
 8015226:	6803      	ldr	r3, [r0, #0]
 8015228:	9304      	str	r3, [sp, #16]
 801522a:	4618      	mov	r0, r3
 801522c:	f7ea ffe8 	bl	8000200 <strlen>
 8015230:	2300      	movs	r3, #0
 8015232:	930a      	str	r3, [sp, #40]	; 0x28
 8015234:	f8d8 3000 	ldr.w	r3, [r8]
 8015238:	9005      	str	r0, [sp, #20]
 801523a:	3307      	adds	r3, #7
 801523c:	f023 0307 	bic.w	r3, r3, #7
 8015240:	f103 0208 	add.w	r2, r3, #8
 8015244:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015248:	f8d4 b000 	ldr.w	fp, [r4]
 801524c:	f8c8 2000 	str.w	r2, [r8]
 8015250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015254:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015258:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801525c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015260:	9307      	str	r3, [sp, #28]
 8015262:	f8cd 8018 	str.w	r8, [sp, #24]
 8015266:	f04f 32ff 	mov.w	r2, #4294967295
 801526a:	4ba7      	ldr	r3, [pc, #668]	; (8015508 <_printf_float+0x2f8>)
 801526c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015270:	f7eb fc74 	bl	8000b5c <__aeabi_dcmpun>
 8015274:	bb70      	cbnz	r0, 80152d4 <_printf_float+0xc4>
 8015276:	f04f 32ff 	mov.w	r2, #4294967295
 801527a:	4ba3      	ldr	r3, [pc, #652]	; (8015508 <_printf_float+0x2f8>)
 801527c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015280:	f7eb fc4e 	bl	8000b20 <__aeabi_dcmple>
 8015284:	bb30      	cbnz	r0, 80152d4 <_printf_float+0xc4>
 8015286:	2200      	movs	r2, #0
 8015288:	2300      	movs	r3, #0
 801528a:	4640      	mov	r0, r8
 801528c:	4649      	mov	r1, r9
 801528e:	f7eb fc3d 	bl	8000b0c <__aeabi_dcmplt>
 8015292:	b110      	cbz	r0, 801529a <_printf_float+0x8a>
 8015294:	232d      	movs	r3, #45	; 0x2d
 8015296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801529a:	4a9c      	ldr	r2, [pc, #624]	; (801550c <_printf_float+0x2fc>)
 801529c:	4b9c      	ldr	r3, [pc, #624]	; (8015510 <_printf_float+0x300>)
 801529e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80152a2:	bf8c      	ite	hi
 80152a4:	4690      	movhi	r8, r2
 80152a6:	4698      	movls	r8, r3
 80152a8:	2303      	movs	r3, #3
 80152aa:	f02b 0204 	bic.w	r2, fp, #4
 80152ae:	6123      	str	r3, [r4, #16]
 80152b0:	6022      	str	r2, [r4, #0]
 80152b2:	f04f 0900 	mov.w	r9, #0
 80152b6:	9700      	str	r7, [sp, #0]
 80152b8:	4633      	mov	r3, r6
 80152ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80152bc:	4621      	mov	r1, r4
 80152be:	4628      	mov	r0, r5
 80152c0:	f000 f9e6 	bl	8015690 <_printf_common>
 80152c4:	3001      	adds	r0, #1
 80152c6:	f040 808d 	bne.w	80153e4 <_printf_float+0x1d4>
 80152ca:	f04f 30ff 	mov.w	r0, #4294967295
 80152ce:	b00d      	add	sp, #52	; 0x34
 80152d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152d4:	4642      	mov	r2, r8
 80152d6:	464b      	mov	r3, r9
 80152d8:	4640      	mov	r0, r8
 80152da:	4649      	mov	r1, r9
 80152dc:	f7eb fc3e 	bl	8000b5c <__aeabi_dcmpun>
 80152e0:	b110      	cbz	r0, 80152e8 <_printf_float+0xd8>
 80152e2:	4a8c      	ldr	r2, [pc, #560]	; (8015514 <_printf_float+0x304>)
 80152e4:	4b8c      	ldr	r3, [pc, #560]	; (8015518 <_printf_float+0x308>)
 80152e6:	e7da      	b.n	801529e <_printf_float+0x8e>
 80152e8:	6861      	ldr	r1, [r4, #4]
 80152ea:	1c4b      	adds	r3, r1, #1
 80152ec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80152f0:	a80a      	add	r0, sp, #40	; 0x28
 80152f2:	d13e      	bne.n	8015372 <_printf_float+0x162>
 80152f4:	2306      	movs	r3, #6
 80152f6:	6063      	str	r3, [r4, #4]
 80152f8:	2300      	movs	r3, #0
 80152fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80152fe:	ab09      	add	r3, sp, #36	; 0x24
 8015300:	9300      	str	r3, [sp, #0]
 8015302:	ec49 8b10 	vmov	d0, r8, r9
 8015306:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801530a:	6022      	str	r2, [r4, #0]
 801530c:	f8cd a004 	str.w	sl, [sp, #4]
 8015310:	6861      	ldr	r1, [r4, #4]
 8015312:	4628      	mov	r0, r5
 8015314:	f7ff fee7 	bl	80150e6 <__cvt>
 8015318:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801531c:	2b47      	cmp	r3, #71	; 0x47
 801531e:	4680      	mov	r8, r0
 8015320:	d109      	bne.n	8015336 <_printf_float+0x126>
 8015322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015324:	1cd8      	adds	r0, r3, #3
 8015326:	db02      	blt.n	801532e <_printf_float+0x11e>
 8015328:	6862      	ldr	r2, [r4, #4]
 801532a:	4293      	cmp	r3, r2
 801532c:	dd47      	ble.n	80153be <_printf_float+0x1ae>
 801532e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015332:	fa5f fa8a 	uxtb.w	sl, sl
 8015336:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801533a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801533c:	d824      	bhi.n	8015388 <_printf_float+0x178>
 801533e:	3901      	subs	r1, #1
 8015340:	4652      	mov	r2, sl
 8015342:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015346:	9109      	str	r1, [sp, #36]	; 0x24
 8015348:	f7ff ff2e 	bl	80151a8 <__exponent>
 801534c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801534e:	1813      	adds	r3, r2, r0
 8015350:	2a01      	cmp	r2, #1
 8015352:	4681      	mov	r9, r0
 8015354:	6123      	str	r3, [r4, #16]
 8015356:	dc02      	bgt.n	801535e <_printf_float+0x14e>
 8015358:	6822      	ldr	r2, [r4, #0]
 801535a:	07d1      	lsls	r1, r2, #31
 801535c:	d501      	bpl.n	8015362 <_printf_float+0x152>
 801535e:	3301      	adds	r3, #1
 8015360:	6123      	str	r3, [r4, #16]
 8015362:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015366:	2b00      	cmp	r3, #0
 8015368:	d0a5      	beq.n	80152b6 <_printf_float+0xa6>
 801536a:	232d      	movs	r3, #45	; 0x2d
 801536c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015370:	e7a1      	b.n	80152b6 <_printf_float+0xa6>
 8015372:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015376:	f000 8177 	beq.w	8015668 <_printf_float+0x458>
 801537a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801537e:	d1bb      	bne.n	80152f8 <_printf_float+0xe8>
 8015380:	2900      	cmp	r1, #0
 8015382:	d1b9      	bne.n	80152f8 <_printf_float+0xe8>
 8015384:	2301      	movs	r3, #1
 8015386:	e7b6      	b.n	80152f6 <_printf_float+0xe6>
 8015388:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801538c:	d119      	bne.n	80153c2 <_printf_float+0x1b2>
 801538e:	2900      	cmp	r1, #0
 8015390:	6863      	ldr	r3, [r4, #4]
 8015392:	dd0c      	ble.n	80153ae <_printf_float+0x19e>
 8015394:	6121      	str	r1, [r4, #16]
 8015396:	b913      	cbnz	r3, 801539e <_printf_float+0x18e>
 8015398:	6822      	ldr	r2, [r4, #0]
 801539a:	07d2      	lsls	r2, r2, #31
 801539c:	d502      	bpl.n	80153a4 <_printf_float+0x194>
 801539e:	3301      	adds	r3, #1
 80153a0:	440b      	add	r3, r1
 80153a2:	6123      	str	r3, [r4, #16]
 80153a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80153a8:	f04f 0900 	mov.w	r9, #0
 80153ac:	e7d9      	b.n	8015362 <_printf_float+0x152>
 80153ae:	b913      	cbnz	r3, 80153b6 <_printf_float+0x1a6>
 80153b0:	6822      	ldr	r2, [r4, #0]
 80153b2:	07d0      	lsls	r0, r2, #31
 80153b4:	d501      	bpl.n	80153ba <_printf_float+0x1aa>
 80153b6:	3302      	adds	r3, #2
 80153b8:	e7f3      	b.n	80153a2 <_printf_float+0x192>
 80153ba:	2301      	movs	r3, #1
 80153bc:	e7f1      	b.n	80153a2 <_printf_float+0x192>
 80153be:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80153c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80153c6:	4293      	cmp	r3, r2
 80153c8:	db05      	blt.n	80153d6 <_printf_float+0x1c6>
 80153ca:	6822      	ldr	r2, [r4, #0]
 80153cc:	6123      	str	r3, [r4, #16]
 80153ce:	07d1      	lsls	r1, r2, #31
 80153d0:	d5e8      	bpl.n	80153a4 <_printf_float+0x194>
 80153d2:	3301      	adds	r3, #1
 80153d4:	e7e5      	b.n	80153a2 <_printf_float+0x192>
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	bfd4      	ite	le
 80153da:	f1c3 0302 	rsble	r3, r3, #2
 80153de:	2301      	movgt	r3, #1
 80153e0:	4413      	add	r3, r2
 80153e2:	e7de      	b.n	80153a2 <_printf_float+0x192>
 80153e4:	6823      	ldr	r3, [r4, #0]
 80153e6:	055a      	lsls	r2, r3, #21
 80153e8:	d407      	bmi.n	80153fa <_printf_float+0x1ea>
 80153ea:	6923      	ldr	r3, [r4, #16]
 80153ec:	4642      	mov	r2, r8
 80153ee:	4631      	mov	r1, r6
 80153f0:	4628      	mov	r0, r5
 80153f2:	47b8      	blx	r7
 80153f4:	3001      	adds	r0, #1
 80153f6:	d12b      	bne.n	8015450 <_printf_float+0x240>
 80153f8:	e767      	b.n	80152ca <_printf_float+0xba>
 80153fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80153fe:	f240 80dc 	bls.w	80155ba <_printf_float+0x3aa>
 8015402:	2200      	movs	r2, #0
 8015404:	2300      	movs	r3, #0
 8015406:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801540a:	f7eb fb75 	bl	8000af8 <__aeabi_dcmpeq>
 801540e:	2800      	cmp	r0, #0
 8015410:	d033      	beq.n	801547a <_printf_float+0x26a>
 8015412:	2301      	movs	r3, #1
 8015414:	4a41      	ldr	r2, [pc, #260]	; (801551c <_printf_float+0x30c>)
 8015416:	4631      	mov	r1, r6
 8015418:	4628      	mov	r0, r5
 801541a:	47b8      	blx	r7
 801541c:	3001      	adds	r0, #1
 801541e:	f43f af54 	beq.w	80152ca <_printf_float+0xba>
 8015422:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015426:	429a      	cmp	r2, r3
 8015428:	db02      	blt.n	8015430 <_printf_float+0x220>
 801542a:	6823      	ldr	r3, [r4, #0]
 801542c:	07d8      	lsls	r0, r3, #31
 801542e:	d50f      	bpl.n	8015450 <_printf_float+0x240>
 8015430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015434:	4631      	mov	r1, r6
 8015436:	4628      	mov	r0, r5
 8015438:	47b8      	blx	r7
 801543a:	3001      	adds	r0, #1
 801543c:	f43f af45 	beq.w	80152ca <_printf_float+0xba>
 8015440:	f04f 0800 	mov.w	r8, #0
 8015444:	f104 091a 	add.w	r9, r4, #26
 8015448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801544a:	3b01      	subs	r3, #1
 801544c:	4543      	cmp	r3, r8
 801544e:	dc09      	bgt.n	8015464 <_printf_float+0x254>
 8015450:	6823      	ldr	r3, [r4, #0]
 8015452:	079b      	lsls	r3, r3, #30
 8015454:	f100 8103 	bmi.w	801565e <_printf_float+0x44e>
 8015458:	68e0      	ldr	r0, [r4, #12]
 801545a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801545c:	4298      	cmp	r0, r3
 801545e:	bfb8      	it	lt
 8015460:	4618      	movlt	r0, r3
 8015462:	e734      	b.n	80152ce <_printf_float+0xbe>
 8015464:	2301      	movs	r3, #1
 8015466:	464a      	mov	r2, r9
 8015468:	4631      	mov	r1, r6
 801546a:	4628      	mov	r0, r5
 801546c:	47b8      	blx	r7
 801546e:	3001      	adds	r0, #1
 8015470:	f43f af2b 	beq.w	80152ca <_printf_float+0xba>
 8015474:	f108 0801 	add.w	r8, r8, #1
 8015478:	e7e6      	b.n	8015448 <_printf_float+0x238>
 801547a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801547c:	2b00      	cmp	r3, #0
 801547e:	dc2b      	bgt.n	80154d8 <_printf_float+0x2c8>
 8015480:	2301      	movs	r3, #1
 8015482:	4a26      	ldr	r2, [pc, #152]	; (801551c <_printf_float+0x30c>)
 8015484:	4631      	mov	r1, r6
 8015486:	4628      	mov	r0, r5
 8015488:	47b8      	blx	r7
 801548a:	3001      	adds	r0, #1
 801548c:	f43f af1d 	beq.w	80152ca <_printf_float+0xba>
 8015490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015492:	b923      	cbnz	r3, 801549e <_printf_float+0x28e>
 8015494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015496:	b913      	cbnz	r3, 801549e <_printf_float+0x28e>
 8015498:	6823      	ldr	r3, [r4, #0]
 801549a:	07d9      	lsls	r1, r3, #31
 801549c:	d5d8      	bpl.n	8015450 <_printf_float+0x240>
 801549e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80154a2:	4631      	mov	r1, r6
 80154a4:	4628      	mov	r0, r5
 80154a6:	47b8      	blx	r7
 80154a8:	3001      	adds	r0, #1
 80154aa:	f43f af0e 	beq.w	80152ca <_printf_float+0xba>
 80154ae:	f04f 0900 	mov.w	r9, #0
 80154b2:	f104 0a1a 	add.w	sl, r4, #26
 80154b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154b8:	425b      	negs	r3, r3
 80154ba:	454b      	cmp	r3, r9
 80154bc:	dc01      	bgt.n	80154c2 <_printf_float+0x2b2>
 80154be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154c0:	e794      	b.n	80153ec <_printf_float+0x1dc>
 80154c2:	2301      	movs	r3, #1
 80154c4:	4652      	mov	r2, sl
 80154c6:	4631      	mov	r1, r6
 80154c8:	4628      	mov	r0, r5
 80154ca:	47b8      	blx	r7
 80154cc:	3001      	adds	r0, #1
 80154ce:	f43f aefc 	beq.w	80152ca <_printf_float+0xba>
 80154d2:	f109 0901 	add.w	r9, r9, #1
 80154d6:	e7ee      	b.n	80154b6 <_printf_float+0x2a6>
 80154d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80154dc:	429a      	cmp	r2, r3
 80154de:	bfa8      	it	ge
 80154e0:	461a      	movge	r2, r3
 80154e2:	2a00      	cmp	r2, #0
 80154e4:	4691      	mov	r9, r2
 80154e6:	dd07      	ble.n	80154f8 <_printf_float+0x2e8>
 80154e8:	4613      	mov	r3, r2
 80154ea:	4631      	mov	r1, r6
 80154ec:	4642      	mov	r2, r8
 80154ee:	4628      	mov	r0, r5
 80154f0:	47b8      	blx	r7
 80154f2:	3001      	adds	r0, #1
 80154f4:	f43f aee9 	beq.w	80152ca <_printf_float+0xba>
 80154f8:	f104 031a 	add.w	r3, r4, #26
 80154fc:	f04f 0b00 	mov.w	fp, #0
 8015500:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015504:	9306      	str	r3, [sp, #24]
 8015506:	e015      	b.n	8015534 <_printf_float+0x324>
 8015508:	7fefffff 	.word	0x7fefffff
 801550c:	08019d54 	.word	0x08019d54
 8015510:	08019d50 	.word	0x08019d50
 8015514:	08019d5c 	.word	0x08019d5c
 8015518:	08019d58 	.word	0x08019d58
 801551c:	08019f7b 	.word	0x08019f7b
 8015520:	2301      	movs	r3, #1
 8015522:	9a06      	ldr	r2, [sp, #24]
 8015524:	4631      	mov	r1, r6
 8015526:	4628      	mov	r0, r5
 8015528:	47b8      	blx	r7
 801552a:	3001      	adds	r0, #1
 801552c:	f43f aecd 	beq.w	80152ca <_printf_float+0xba>
 8015530:	f10b 0b01 	add.w	fp, fp, #1
 8015534:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015538:	ebaa 0309 	sub.w	r3, sl, r9
 801553c:	455b      	cmp	r3, fp
 801553e:	dcef      	bgt.n	8015520 <_printf_float+0x310>
 8015540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015544:	429a      	cmp	r2, r3
 8015546:	44d0      	add	r8, sl
 8015548:	db15      	blt.n	8015576 <_printf_float+0x366>
 801554a:	6823      	ldr	r3, [r4, #0]
 801554c:	07da      	lsls	r2, r3, #31
 801554e:	d412      	bmi.n	8015576 <_printf_float+0x366>
 8015550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015552:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015554:	eba3 020a 	sub.w	r2, r3, sl
 8015558:	eba3 0a01 	sub.w	sl, r3, r1
 801555c:	4592      	cmp	sl, r2
 801555e:	bfa8      	it	ge
 8015560:	4692      	movge	sl, r2
 8015562:	f1ba 0f00 	cmp.w	sl, #0
 8015566:	dc0e      	bgt.n	8015586 <_printf_float+0x376>
 8015568:	f04f 0800 	mov.w	r8, #0
 801556c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015570:	f104 091a 	add.w	r9, r4, #26
 8015574:	e019      	b.n	80155aa <_printf_float+0x39a>
 8015576:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801557a:	4631      	mov	r1, r6
 801557c:	4628      	mov	r0, r5
 801557e:	47b8      	blx	r7
 8015580:	3001      	adds	r0, #1
 8015582:	d1e5      	bne.n	8015550 <_printf_float+0x340>
 8015584:	e6a1      	b.n	80152ca <_printf_float+0xba>
 8015586:	4653      	mov	r3, sl
 8015588:	4642      	mov	r2, r8
 801558a:	4631      	mov	r1, r6
 801558c:	4628      	mov	r0, r5
 801558e:	47b8      	blx	r7
 8015590:	3001      	adds	r0, #1
 8015592:	d1e9      	bne.n	8015568 <_printf_float+0x358>
 8015594:	e699      	b.n	80152ca <_printf_float+0xba>
 8015596:	2301      	movs	r3, #1
 8015598:	464a      	mov	r2, r9
 801559a:	4631      	mov	r1, r6
 801559c:	4628      	mov	r0, r5
 801559e:	47b8      	blx	r7
 80155a0:	3001      	adds	r0, #1
 80155a2:	f43f ae92 	beq.w	80152ca <_printf_float+0xba>
 80155a6:	f108 0801 	add.w	r8, r8, #1
 80155aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155ae:	1a9b      	subs	r3, r3, r2
 80155b0:	eba3 030a 	sub.w	r3, r3, sl
 80155b4:	4543      	cmp	r3, r8
 80155b6:	dcee      	bgt.n	8015596 <_printf_float+0x386>
 80155b8:	e74a      	b.n	8015450 <_printf_float+0x240>
 80155ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80155bc:	2a01      	cmp	r2, #1
 80155be:	dc01      	bgt.n	80155c4 <_printf_float+0x3b4>
 80155c0:	07db      	lsls	r3, r3, #31
 80155c2:	d53a      	bpl.n	801563a <_printf_float+0x42a>
 80155c4:	2301      	movs	r3, #1
 80155c6:	4642      	mov	r2, r8
 80155c8:	4631      	mov	r1, r6
 80155ca:	4628      	mov	r0, r5
 80155cc:	47b8      	blx	r7
 80155ce:	3001      	adds	r0, #1
 80155d0:	f43f ae7b 	beq.w	80152ca <_printf_float+0xba>
 80155d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155d8:	4631      	mov	r1, r6
 80155da:	4628      	mov	r0, r5
 80155dc:	47b8      	blx	r7
 80155de:	3001      	adds	r0, #1
 80155e0:	f108 0801 	add.w	r8, r8, #1
 80155e4:	f43f ae71 	beq.w	80152ca <_printf_float+0xba>
 80155e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155ea:	2200      	movs	r2, #0
 80155ec:	f103 3aff 	add.w	sl, r3, #4294967295
 80155f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80155f4:	2300      	movs	r3, #0
 80155f6:	f7eb fa7f 	bl	8000af8 <__aeabi_dcmpeq>
 80155fa:	b9c8      	cbnz	r0, 8015630 <_printf_float+0x420>
 80155fc:	4653      	mov	r3, sl
 80155fe:	4642      	mov	r2, r8
 8015600:	4631      	mov	r1, r6
 8015602:	4628      	mov	r0, r5
 8015604:	47b8      	blx	r7
 8015606:	3001      	adds	r0, #1
 8015608:	d10e      	bne.n	8015628 <_printf_float+0x418>
 801560a:	e65e      	b.n	80152ca <_printf_float+0xba>
 801560c:	2301      	movs	r3, #1
 801560e:	4652      	mov	r2, sl
 8015610:	4631      	mov	r1, r6
 8015612:	4628      	mov	r0, r5
 8015614:	47b8      	blx	r7
 8015616:	3001      	adds	r0, #1
 8015618:	f43f ae57 	beq.w	80152ca <_printf_float+0xba>
 801561c:	f108 0801 	add.w	r8, r8, #1
 8015620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015622:	3b01      	subs	r3, #1
 8015624:	4543      	cmp	r3, r8
 8015626:	dcf1      	bgt.n	801560c <_printf_float+0x3fc>
 8015628:	464b      	mov	r3, r9
 801562a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801562e:	e6de      	b.n	80153ee <_printf_float+0x1de>
 8015630:	f04f 0800 	mov.w	r8, #0
 8015634:	f104 0a1a 	add.w	sl, r4, #26
 8015638:	e7f2      	b.n	8015620 <_printf_float+0x410>
 801563a:	2301      	movs	r3, #1
 801563c:	e7df      	b.n	80155fe <_printf_float+0x3ee>
 801563e:	2301      	movs	r3, #1
 8015640:	464a      	mov	r2, r9
 8015642:	4631      	mov	r1, r6
 8015644:	4628      	mov	r0, r5
 8015646:	47b8      	blx	r7
 8015648:	3001      	adds	r0, #1
 801564a:	f43f ae3e 	beq.w	80152ca <_printf_float+0xba>
 801564e:	f108 0801 	add.w	r8, r8, #1
 8015652:	68e3      	ldr	r3, [r4, #12]
 8015654:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015656:	1a9b      	subs	r3, r3, r2
 8015658:	4543      	cmp	r3, r8
 801565a:	dcf0      	bgt.n	801563e <_printf_float+0x42e>
 801565c:	e6fc      	b.n	8015458 <_printf_float+0x248>
 801565e:	f04f 0800 	mov.w	r8, #0
 8015662:	f104 0919 	add.w	r9, r4, #25
 8015666:	e7f4      	b.n	8015652 <_printf_float+0x442>
 8015668:	2900      	cmp	r1, #0
 801566a:	f43f ae8b 	beq.w	8015384 <_printf_float+0x174>
 801566e:	2300      	movs	r3, #0
 8015670:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015674:	ab09      	add	r3, sp, #36	; 0x24
 8015676:	9300      	str	r3, [sp, #0]
 8015678:	ec49 8b10 	vmov	d0, r8, r9
 801567c:	6022      	str	r2, [r4, #0]
 801567e:	f8cd a004 	str.w	sl, [sp, #4]
 8015682:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015686:	4628      	mov	r0, r5
 8015688:	f7ff fd2d 	bl	80150e6 <__cvt>
 801568c:	4680      	mov	r8, r0
 801568e:	e648      	b.n	8015322 <_printf_float+0x112>

08015690 <_printf_common>:
 8015690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015694:	4691      	mov	r9, r2
 8015696:	461f      	mov	r7, r3
 8015698:	688a      	ldr	r2, [r1, #8]
 801569a:	690b      	ldr	r3, [r1, #16]
 801569c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80156a0:	4293      	cmp	r3, r2
 80156a2:	bfb8      	it	lt
 80156a4:	4613      	movlt	r3, r2
 80156a6:	f8c9 3000 	str.w	r3, [r9]
 80156aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80156ae:	4606      	mov	r6, r0
 80156b0:	460c      	mov	r4, r1
 80156b2:	b112      	cbz	r2, 80156ba <_printf_common+0x2a>
 80156b4:	3301      	adds	r3, #1
 80156b6:	f8c9 3000 	str.w	r3, [r9]
 80156ba:	6823      	ldr	r3, [r4, #0]
 80156bc:	0699      	lsls	r1, r3, #26
 80156be:	bf42      	ittt	mi
 80156c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80156c4:	3302      	addmi	r3, #2
 80156c6:	f8c9 3000 	strmi.w	r3, [r9]
 80156ca:	6825      	ldr	r5, [r4, #0]
 80156cc:	f015 0506 	ands.w	r5, r5, #6
 80156d0:	d107      	bne.n	80156e2 <_printf_common+0x52>
 80156d2:	f104 0a19 	add.w	sl, r4, #25
 80156d6:	68e3      	ldr	r3, [r4, #12]
 80156d8:	f8d9 2000 	ldr.w	r2, [r9]
 80156dc:	1a9b      	subs	r3, r3, r2
 80156de:	42ab      	cmp	r3, r5
 80156e0:	dc28      	bgt.n	8015734 <_printf_common+0xa4>
 80156e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80156e6:	6822      	ldr	r2, [r4, #0]
 80156e8:	3300      	adds	r3, #0
 80156ea:	bf18      	it	ne
 80156ec:	2301      	movne	r3, #1
 80156ee:	0692      	lsls	r2, r2, #26
 80156f0:	d42d      	bmi.n	801574e <_printf_common+0xbe>
 80156f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80156f6:	4639      	mov	r1, r7
 80156f8:	4630      	mov	r0, r6
 80156fa:	47c0      	blx	r8
 80156fc:	3001      	adds	r0, #1
 80156fe:	d020      	beq.n	8015742 <_printf_common+0xb2>
 8015700:	6823      	ldr	r3, [r4, #0]
 8015702:	68e5      	ldr	r5, [r4, #12]
 8015704:	f8d9 2000 	ldr.w	r2, [r9]
 8015708:	f003 0306 	and.w	r3, r3, #6
 801570c:	2b04      	cmp	r3, #4
 801570e:	bf08      	it	eq
 8015710:	1aad      	subeq	r5, r5, r2
 8015712:	68a3      	ldr	r3, [r4, #8]
 8015714:	6922      	ldr	r2, [r4, #16]
 8015716:	bf0c      	ite	eq
 8015718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801571c:	2500      	movne	r5, #0
 801571e:	4293      	cmp	r3, r2
 8015720:	bfc4      	itt	gt
 8015722:	1a9b      	subgt	r3, r3, r2
 8015724:	18ed      	addgt	r5, r5, r3
 8015726:	f04f 0900 	mov.w	r9, #0
 801572a:	341a      	adds	r4, #26
 801572c:	454d      	cmp	r5, r9
 801572e:	d11a      	bne.n	8015766 <_printf_common+0xd6>
 8015730:	2000      	movs	r0, #0
 8015732:	e008      	b.n	8015746 <_printf_common+0xb6>
 8015734:	2301      	movs	r3, #1
 8015736:	4652      	mov	r2, sl
 8015738:	4639      	mov	r1, r7
 801573a:	4630      	mov	r0, r6
 801573c:	47c0      	blx	r8
 801573e:	3001      	adds	r0, #1
 8015740:	d103      	bne.n	801574a <_printf_common+0xba>
 8015742:	f04f 30ff 	mov.w	r0, #4294967295
 8015746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801574a:	3501      	adds	r5, #1
 801574c:	e7c3      	b.n	80156d6 <_printf_common+0x46>
 801574e:	18e1      	adds	r1, r4, r3
 8015750:	1c5a      	adds	r2, r3, #1
 8015752:	2030      	movs	r0, #48	; 0x30
 8015754:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015758:	4422      	add	r2, r4
 801575a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801575e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015762:	3302      	adds	r3, #2
 8015764:	e7c5      	b.n	80156f2 <_printf_common+0x62>
 8015766:	2301      	movs	r3, #1
 8015768:	4622      	mov	r2, r4
 801576a:	4639      	mov	r1, r7
 801576c:	4630      	mov	r0, r6
 801576e:	47c0      	blx	r8
 8015770:	3001      	adds	r0, #1
 8015772:	d0e6      	beq.n	8015742 <_printf_common+0xb2>
 8015774:	f109 0901 	add.w	r9, r9, #1
 8015778:	e7d8      	b.n	801572c <_printf_common+0x9c>
	...

0801577c <_printf_i>:
 801577c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015780:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015784:	460c      	mov	r4, r1
 8015786:	7e09      	ldrb	r1, [r1, #24]
 8015788:	b085      	sub	sp, #20
 801578a:	296e      	cmp	r1, #110	; 0x6e
 801578c:	4617      	mov	r7, r2
 801578e:	4606      	mov	r6, r0
 8015790:	4698      	mov	r8, r3
 8015792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015794:	f000 80b3 	beq.w	80158fe <_printf_i+0x182>
 8015798:	d822      	bhi.n	80157e0 <_printf_i+0x64>
 801579a:	2963      	cmp	r1, #99	; 0x63
 801579c:	d036      	beq.n	801580c <_printf_i+0x90>
 801579e:	d80a      	bhi.n	80157b6 <_printf_i+0x3a>
 80157a0:	2900      	cmp	r1, #0
 80157a2:	f000 80b9 	beq.w	8015918 <_printf_i+0x19c>
 80157a6:	2958      	cmp	r1, #88	; 0x58
 80157a8:	f000 8083 	beq.w	80158b2 <_printf_i+0x136>
 80157ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80157b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80157b4:	e032      	b.n	801581c <_printf_i+0xa0>
 80157b6:	2964      	cmp	r1, #100	; 0x64
 80157b8:	d001      	beq.n	80157be <_printf_i+0x42>
 80157ba:	2969      	cmp	r1, #105	; 0x69
 80157bc:	d1f6      	bne.n	80157ac <_printf_i+0x30>
 80157be:	6820      	ldr	r0, [r4, #0]
 80157c0:	6813      	ldr	r3, [r2, #0]
 80157c2:	0605      	lsls	r5, r0, #24
 80157c4:	f103 0104 	add.w	r1, r3, #4
 80157c8:	d52a      	bpl.n	8015820 <_printf_i+0xa4>
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	6011      	str	r1, [r2, #0]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	da03      	bge.n	80157da <_printf_i+0x5e>
 80157d2:	222d      	movs	r2, #45	; 0x2d
 80157d4:	425b      	negs	r3, r3
 80157d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80157da:	486f      	ldr	r0, [pc, #444]	; (8015998 <_printf_i+0x21c>)
 80157dc:	220a      	movs	r2, #10
 80157de:	e039      	b.n	8015854 <_printf_i+0xd8>
 80157e0:	2973      	cmp	r1, #115	; 0x73
 80157e2:	f000 809d 	beq.w	8015920 <_printf_i+0x1a4>
 80157e6:	d808      	bhi.n	80157fa <_printf_i+0x7e>
 80157e8:	296f      	cmp	r1, #111	; 0x6f
 80157ea:	d020      	beq.n	801582e <_printf_i+0xb2>
 80157ec:	2970      	cmp	r1, #112	; 0x70
 80157ee:	d1dd      	bne.n	80157ac <_printf_i+0x30>
 80157f0:	6823      	ldr	r3, [r4, #0]
 80157f2:	f043 0320 	orr.w	r3, r3, #32
 80157f6:	6023      	str	r3, [r4, #0]
 80157f8:	e003      	b.n	8015802 <_printf_i+0x86>
 80157fa:	2975      	cmp	r1, #117	; 0x75
 80157fc:	d017      	beq.n	801582e <_printf_i+0xb2>
 80157fe:	2978      	cmp	r1, #120	; 0x78
 8015800:	d1d4      	bne.n	80157ac <_printf_i+0x30>
 8015802:	2378      	movs	r3, #120	; 0x78
 8015804:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015808:	4864      	ldr	r0, [pc, #400]	; (801599c <_printf_i+0x220>)
 801580a:	e055      	b.n	80158b8 <_printf_i+0x13c>
 801580c:	6813      	ldr	r3, [r2, #0]
 801580e:	1d19      	adds	r1, r3, #4
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	6011      	str	r1, [r2, #0]
 8015814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801581c:	2301      	movs	r3, #1
 801581e:	e08c      	b.n	801593a <_printf_i+0x1be>
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	6011      	str	r1, [r2, #0]
 8015824:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015828:	bf18      	it	ne
 801582a:	b21b      	sxthne	r3, r3
 801582c:	e7cf      	b.n	80157ce <_printf_i+0x52>
 801582e:	6813      	ldr	r3, [r2, #0]
 8015830:	6825      	ldr	r5, [r4, #0]
 8015832:	1d18      	adds	r0, r3, #4
 8015834:	6010      	str	r0, [r2, #0]
 8015836:	0628      	lsls	r0, r5, #24
 8015838:	d501      	bpl.n	801583e <_printf_i+0xc2>
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	e002      	b.n	8015844 <_printf_i+0xc8>
 801583e:	0668      	lsls	r0, r5, #25
 8015840:	d5fb      	bpl.n	801583a <_printf_i+0xbe>
 8015842:	881b      	ldrh	r3, [r3, #0]
 8015844:	4854      	ldr	r0, [pc, #336]	; (8015998 <_printf_i+0x21c>)
 8015846:	296f      	cmp	r1, #111	; 0x6f
 8015848:	bf14      	ite	ne
 801584a:	220a      	movne	r2, #10
 801584c:	2208      	moveq	r2, #8
 801584e:	2100      	movs	r1, #0
 8015850:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015854:	6865      	ldr	r5, [r4, #4]
 8015856:	60a5      	str	r5, [r4, #8]
 8015858:	2d00      	cmp	r5, #0
 801585a:	f2c0 8095 	blt.w	8015988 <_printf_i+0x20c>
 801585e:	6821      	ldr	r1, [r4, #0]
 8015860:	f021 0104 	bic.w	r1, r1, #4
 8015864:	6021      	str	r1, [r4, #0]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d13d      	bne.n	80158e6 <_printf_i+0x16a>
 801586a:	2d00      	cmp	r5, #0
 801586c:	f040 808e 	bne.w	801598c <_printf_i+0x210>
 8015870:	4665      	mov	r5, ip
 8015872:	2a08      	cmp	r2, #8
 8015874:	d10b      	bne.n	801588e <_printf_i+0x112>
 8015876:	6823      	ldr	r3, [r4, #0]
 8015878:	07db      	lsls	r3, r3, #31
 801587a:	d508      	bpl.n	801588e <_printf_i+0x112>
 801587c:	6923      	ldr	r3, [r4, #16]
 801587e:	6862      	ldr	r2, [r4, #4]
 8015880:	429a      	cmp	r2, r3
 8015882:	bfde      	ittt	le
 8015884:	2330      	movle	r3, #48	; 0x30
 8015886:	f805 3c01 	strble.w	r3, [r5, #-1]
 801588a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801588e:	ebac 0305 	sub.w	r3, ip, r5
 8015892:	6123      	str	r3, [r4, #16]
 8015894:	f8cd 8000 	str.w	r8, [sp]
 8015898:	463b      	mov	r3, r7
 801589a:	aa03      	add	r2, sp, #12
 801589c:	4621      	mov	r1, r4
 801589e:	4630      	mov	r0, r6
 80158a0:	f7ff fef6 	bl	8015690 <_printf_common>
 80158a4:	3001      	adds	r0, #1
 80158a6:	d14d      	bne.n	8015944 <_printf_i+0x1c8>
 80158a8:	f04f 30ff 	mov.w	r0, #4294967295
 80158ac:	b005      	add	sp, #20
 80158ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158b2:	4839      	ldr	r0, [pc, #228]	; (8015998 <_printf_i+0x21c>)
 80158b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80158b8:	6813      	ldr	r3, [r2, #0]
 80158ba:	6821      	ldr	r1, [r4, #0]
 80158bc:	1d1d      	adds	r5, r3, #4
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	6015      	str	r5, [r2, #0]
 80158c2:	060a      	lsls	r2, r1, #24
 80158c4:	d50b      	bpl.n	80158de <_printf_i+0x162>
 80158c6:	07ca      	lsls	r2, r1, #31
 80158c8:	bf44      	itt	mi
 80158ca:	f041 0120 	orrmi.w	r1, r1, #32
 80158ce:	6021      	strmi	r1, [r4, #0]
 80158d0:	b91b      	cbnz	r3, 80158da <_printf_i+0x15e>
 80158d2:	6822      	ldr	r2, [r4, #0]
 80158d4:	f022 0220 	bic.w	r2, r2, #32
 80158d8:	6022      	str	r2, [r4, #0]
 80158da:	2210      	movs	r2, #16
 80158dc:	e7b7      	b.n	801584e <_printf_i+0xd2>
 80158de:	064d      	lsls	r5, r1, #25
 80158e0:	bf48      	it	mi
 80158e2:	b29b      	uxthmi	r3, r3
 80158e4:	e7ef      	b.n	80158c6 <_printf_i+0x14a>
 80158e6:	4665      	mov	r5, ip
 80158e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80158ec:	fb02 3311 	mls	r3, r2, r1, r3
 80158f0:	5cc3      	ldrb	r3, [r0, r3]
 80158f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80158f6:	460b      	mov	r3, r1
 80158f8:	2900      	cmp	r1, #0
 80158fa:	d1f5      	bne.n	80158e8 <_printf_i+0x16c>
 80158fc:	e7b9      	b.n	8015872 <_printf_i+0xf6>
 80158fe:	6813      	ldr	r3, [r2, #0]
 8015900:	6825      	ldr	r5, [r4, #0]
 8015902:	6961      	ldr	r1, [r4, #20]
 8015904:	1d18      	adds	r0, r3, #4
 8015906:	6010      	str	r0, [r2, #0]
 8015908:	0628      	lsls	r0, r5, #24
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	d501      	bpl.n	8015912 <_printf_i+0x196>
 801590e:	6019      	str	r1, [r3, #0]
 8015910:	e002      	b.n	8015918 <_printf_i+0x19c>
 8015912:	066a      	lsls	r2, r5, #25
 8015914:	d5fb      	bpl.n	801590e <_printf_i+0x192>
 8015916:	8019      	strh	r1, [r3, #0]
 8015918:	2300      	movs	r3, #0
 801591a:	6123      	str	r3, [r4, #16]
 801591c:	4665      	mov	r5, ip
 801591e:	e7b9      	b.n	8015894 <_printf_i+0x118>
 8015920:	6813      	ldr	r3, [r2, #0]
 8015922:	1d19      	adds	r1, r3, #4
 8015924:	6011      	str	r1, [r2, #0]
 8015926:	681d      	ldr	r5, [r3, #0]
 8015928:	6862      	ldr	r2, [r4, #4]
 801592a:	2100      	movs	r1, #0
 801592c:	4628      	mov	r0, r5
 801592e:	f7ea fc6f 	bl	8000210 <memchr>
 8015932:	b108      	cbz	r0, 8015938 <_printf_i+0x1bc>
 8015934:	1b40      	subs	r0, r0, r5
 8015936:	6060      	str	r0, [r4, #4]
 8015938:	6863      	ldr	r3, [r4, #4]
 801593a:	6123      	str	r3, [r4, #16]
 801593c:	2300      	movs	r3, #0
 801593e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015942:	e7a7      	b.n	8015894 <_printf_i+0x118>
 8015944:	6923      	ldr	r3, [r4, #16]
 8015946:	462a      	mov	r2, r5
 8015948:	4639      	mov	r1, r7
 801594a:	4630      	mov	r0, r6
 801594c:	47c0      	blx	r8
 801594e:	3001      	adds	r0, #1
 8015950:	d0aa      	beq.n	80158a8 <_printf_i+0x12c>
 8015952:	6823      	ldr	r3, [r4, #0]
 8015954:	079b      	lsls	r3, r3, #30
 8015956:	d413      	bmi.n	8015980 <_printf_i+0x204>
 8015958:	68e0      	ldr	r0, [r4, #12]
 801595a:	9b03      	ldr	r3, [sp, #12]
 801595c:	4298      	cmp	r0, r3
 801595e:	bfb8      	it	lt
 8015960:	4618      	movlt	r0, r3
 8015962:	e7a3      	b.n	80158ac <_printf_i+0x130>
 8015964:	2301      	movs	r3, #1
 8015966:	464a      	mov	r2, r9
 8015968:	4639      	mov	r1, r7
 801596a:	4630      	mov	r0, r6
 801596c:	47c0      	blx	r8
 801596e:	3001      	adds	r0, #1
 8015970:	d09a      	beq.n	80158a8 <_printf_i+0x12c>
 8015972:	3501      	adds	r5, #1
 8015974:	68e3      	ldr	r3, [r4, #12]
 8015976:	9a03      	ldr	r2, [sp, #12]
 8015978:	1a9b      	subs	r3, r3, r2
 801597a:	42ab      	cmp	r3, r5
 801597c:	dcf2      	bgt.n	8015964 <_printf_i+0x1e8>
 801597e:	e7eb      	b.n	8015958 <_printf_i+0x1dc>
 8015980:	2500      	movs	r5, #0
 8015982:	f104 0919 	add.w	r9, r4, #25
 8015986:	e7f5      	b.n	8015974 <_printf_i+0x1f8>
 8015988:	2b00      	cmp	r3, #0
 801598a:	d1ac      	bne.n	80158e6 <_printf_i+0x16a>
 801598c:	7803      	ldrb	r3, [r0, #0]
 801598e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015992:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015996:	e76c      	b.n	8015872 <_printf_i+0xf6>
 8015998:	08019d60 	.word	0x08019d60
 801599c:	08019d71 	.word	0x08019d71

080159a0 <_scanf_float>:
 80159a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a4:	469a      	mov	sl, r3
 80159a6:	688b      	ldr	r3, [r1, #8]
 80159a8:	4616      	mov	r6, r2
 80159aa:	1e5a      	subs	r2, r3, #1
 80159ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80159b0:	b087      	sub	sp, #28
 80159b2:	bf83      	ittte	hi
 80159b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80159b8:	189b      	addhi	r3, r3, r2
 80159ba:	9301      	strhi	r3, [sp, #4]
 80159bc:	2300      	movls	r3, #0
 80159be:	bf86      	itte	hi
 80159c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80159c4:	608b      	strhi	r3, [r1, #8]
 80159c6:	9301      	strls	r3, [sp, #4]
 80159c8:	680b      	ldr	r3, [r1, #0]
 80159ca:	4688      	mov	r8, r1
 80159cc:	f04f 0b00 	mov.w	fp, #0
 80159d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80159d4:	f848 3b1c 	str.w	r3, [r8], #28
 80159d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80159dc:	4607      	mov	r7, r0
 80159de:	460c      	mov	r4, r1
 80159e0:	4645      	mov	r5, r8
 80159e2:	465a      	mov	r2, fp
 80159e4:	46d9      	mov	r9, fp
 80159e6:	f8cd b008 	str.w	fp, [sp, #8]
 80159ea:	68a1      	ldr	r1, [r4, #8]
 80159ec:	b181      	cbz	r1, 8015a10 <_scanf_float+0x70>
 80159ee:	6833      	ldr	r3, [r6, #0]
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	2b49      	cmp	r3, #73	; 0x49
 80159f4:	d071      	beq.n	8015ada <_scanf_float+0x13a>
 80159f6:	d84d      	bhi.n	8015a94 <_scanf_float+0xf4>
 80159f8:	2b39      	cmp	r3, #57	; 0x39
 80159fa:	d840      	bhi.n	8015a7e <_scanf_float+0xde>
 80159fc:	2b31      	cmp	r3, #49	; 0x31
 80159fe:	f080 8088 	bcs.w	8015b12 <_scanf_float+0x172>
 8015a02:	2b2d      	cmp	r3, #45	; 0x2d
 8015a04:	f000 8090 	beq.w	8015b28 <_scanf_float+0x188>
 8015a08:	d815      	bhi.n	8015a36 <_scanf_float+0x96>
 8015a0a:	2b2b      	cmp	r3, #43	; 0x2b
 8015a0c:	f000 808c 	beq.w	8015b28 <_scanf_float+0x188>
 8015a10:	f1b9 0f00 	cmp.w	r9, #0
 8015a14:	d003      	beq.n	8015a1e <_scanf_float+0x7e>
 8015a16:	6823      	ldr	r3, [r4, #0]
 8015a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015a1c:	6023      	str	r3, [r4, #0]
 8015a1e:	3a01      	subs	r2, #1
 8015a20:	2a01      	cmp	r2, #1
 8015a22:	f200 80ea 	bhi.w	8015bfa <_scanf_float+0x25a>
 8015a26:	4545      	cmp	r5, r8
 8015a28:	f200 80dc 	bhi.w	8015be4 <_scanf_float+0x244>
 8015a2c:	2601      	movs	r6, #1
 8015a2e:	4630      	mov	r0, r6
 8015a30:	b007      	add	sp, #28
 8015a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a36:	2b2e      	cmp	r3, #46	; 0x2e
 8015a38:	f000 809f 	beq.w	8015b7a <_scanf_float+0x1da>
 8015a3c:	2b30      	cmp	r3, #48	; 0x30
 8015a3e:	d1e7      	bne.n	8015a10 <_scanf_float+0x70>
 8015a40:	6820      	ldr	r0, [r4, #0]
 8015a42:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015a46:	d064      	beq.n	8015b12 <_scanf_float+0x172>
 8015a48:	9b01      	ldr	r3, [sp, #4]
 8015a4a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015a4e:	6020      	str	r0, [r4, #0]
 8015a50:	f109 0901 	add.w	r9, r9, #1
 8015a54:	b11b      	cbz	r3, 8015a5e <_scanf_float+0xbe>
 8015a56:	3b01      	subs	r3, #1
 8015a58:	3101      	adds	r1, #1
 8015a5a:	9301      	str	r3, [sp, #4]
 8015a5c:	60a1      	str	r1, [r4, #8]
 8015a5e:	68a3      	ldr	r3, [r4, #8]
 8015a60:	3b01      	subs	r3, #1
 8015a62:	60a3      	str	r3, [r4, #8]
 8015a64:	6923      	ldr	r3, [r4, #16]
 8015a66:	3301      	adds	r3, #1
 8015a68:	6123      	str	r3, [r4, #16]
 8015a6a:	6873      	ldr	r3, [r6, #4]
 8015a6c:	3b01      	subs	r3, #1
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	6073      	str	r3, [r6, #4]
 8015a72:	f340 80ac 	ble.w	8015bce <_scanf_float+0x22e>
 8015a76:	6833      	ldr	r3, [r6, #0]
 8015a78:	3301      	adds	r3, #1
 8015a7a:	6033      	str	r3, [r6, #0]
 8015a7c:	e7b5      	b.n	80159ea <_scanf_float+0x4a>
 8015a7e:	2b45      	cmp	r3, #69	; 0x45
 8015a80:	f000 8085 	beq.w	8015b8e <_scanf_float+0x1ee>
 8015a84:	2b46      	cmp	r3, #70	; 0x46
 8015a86:	d06a      	beq.n	8015b5e <_scanf_float+0x1be>
 8015a88:	2b41      	cmp	r3, #65	; 0x41
 8015a8a:	d1c1      	bne.n	8015a10 <_scanf_float+0x70>
 8015a8c:	2a01      	cmp	r2, #1
 8015a8e:	d1bf      	bne.n	8015a10 <_scanf_float+0x70>
 8015a90:	2202      	movs	r2, #2
 8015a92:	e046      	b.n	8015b22 <_scanf_float+0x182>
 8015a94:	2b65      	cmp	r3, #101	; 0x65
 8015a96:	d07a      	beq.n	8015b8e <_scanf_float+0x1ee>
 8015a98:	d818      	bhi.n	8015acc <_scanf_float+0x12c>
 8015a9a:	2b54      	cmp	r3, #84	; 0x54
 8015a9c:	d066      	beq.n	8015b6c <_scanf_float+0x1cc>
 8015a9e:	d811      	bhi.n	8015ac4 <_scanf_float+0x124>
 8015aa0:	2b4e      	cmp	r3, #78	; 0x4e
 8015aa2:	d1b5      	bne.n	8015a10 <_scanf_float+0x70>
 8015aa4:	2a00      	cmp	r2, #0
 8015aa6:	d146      	bne.n	8015b36 <_scanf_float+0x196>
 8015aa8:	f1b9 0f00 	cmp.w	r9, #0
 8015aac:	d145      	bne.n	8015b3a <_scanf_float+0x19a>
 8015aae:	6821      	ldr	r1, [r4, #0]
 8015ab0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015ab4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015ab8:	d13f      	bne.n	8015b3a <_scanf_float+0x19a>
 8015aba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015abe:	6021      	str	r1, [r4, #0]
 8015ac0:	2201      	movs	r2, #1
 8015ac2:	e02e      	b.n	8015b22 <_scanf_float+0x182>
 8015ac4:	2b59      	cmp	r3, #89	; 0x59
 8015ac6:	d01e      	beq.n	8015b06 <_scanf_float+0x166>
 8015ac8:	2b61      	cmp	r3, #97	; 0x61
 8015aca:	e7de      	b.n	8015a8a <_scanf_float+0xea>
 8015acc:	2b6e      	cmp	r3, #110	; 0x6e
 8015ace:	d0e9      	beq.n	8015aa4 <_scanf_float+0x104>
 8015ad0:	d815      	bhi.n	8015afe <_scanf_float+0x15e>
 8015ad2:	2b66      	cmp	r3, #102	; 0x66
 8015ad4:	d043      	beq.n	8015b5e <_scanf_float+0x1be>
 8015ad6:	2b69      	cmp	r3, #105	; 0x69
 8015ad8:	d19a      	bne.n	8015a10 <_scanf_float+0x70>
 8015ada:	f1bb 0f00 	cmp.w	fp, #0
 8015ade:	d138      	bne.n	8015b52 <_scanf_float+0x1b2>
 8015ae0:	f1b9 0f00 	cmp.w	r9, #0
 8015ae4:	d197      	bne.n	8015a16 <_scanf_float+0x76>
 8015ae6:	6821      	ldr	r1, [r4, #0]
 8015ae8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015aec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015af0:	d195      	bne.n	8015a1e <_scanf_float+0x7e>
 8015af2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015af6:	6021      	str	r1, [r4, #0]
 8015af8:	f04f 0b01 	mov.w	fp, #1
 8015afc:	e011      	b.n	8015b22 <_scanf_float+0x182>
 8015afe:	2b74      	cmp	r3, #116	; 0x74
 8015b00:	d034      	beq.n	8015b6c <_scanf_float+0x1cc>
 8015b02:	2b79      	cmp	r3, #121	; 0x79
 8015b04:	d184      	bne.n	8015a10 <_scanf_float+0x70>
 8015b06:	f1bb 0f07 	cmp.w	fp, #7
 8015b0a:	d181      	bne.n	8015a10 <_scanf_float+0x70>
 8015b0c:	f04f 0b08 	mov.w	fp, #8
 8015b10:	e007      	b.n	8015b22 <_scanf_float+0x182>
 8015b12:	eb12 0f0b 	cmn.w	r2, fp
 8015b16:	f47f af7b 	bne.w	8015a10 <_scanf_float+0x70>
 8015b1a:	6821      	ldr	r1, [r4, #0]
 8015b1c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015b20:	6021      	str	r1, [r4, #0]
 8015b22:	702b      	strb	r3, [r5, #0]
 8015b24:	3501      	adds	r5, #1
 8015b26:	e79a      	b.n	8015a5e <_scanf_float+0xbe>
 8015b28:	6821      	ldr	r1, [r4, #0]
 8015b2a:	0608      	lsls	r0, r1, #24
 8015b2c:	f57f af70 	bpl.w	8015a10 <_scanf_float+0x70>
 8015b30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015b34:	e7f4      	b.n	8015b20 <_scanf_float+0x180>
 8015b36:	2a02      	cmp	r2, #2
 8015b38:	d047      	beq.n	8015bca <_scanf_float+0x22a>
 8015b3a:	f1bb 0f01 	cmp.w	fp, #1
 8015b3e:	d003      	beq.n	8015b48 <_scanf_float+0x1a8>
 8015b40:	f1bb 0f04 	cmp.w	fp, #4
 8015b44:	f47f af64 	bne.w	8015a10 <_scanf_float+0x70>
 8015b48:	f10b 0b01 	add.w	fp, fp, #1
 8015b4c:	fa5f fb8b 	uxtb.w	fp, fp
 8015b50:	e7e7      	b.n	8015b22 <_scanf_float+0x182>
 8015b52:	f1bb 0f03 	cmp.w	fp, #3
 8015b56:	d0f7      	beq.n	8015b48 <_scanf_float+0x1a8>
 8015b58:	f1bb 0f05 	cmp.w	fp, #5
 8015b5c:	e7f2      	b.n	8015b44 <_scanf_float+0x1a4>
 8015b5e:	f1bb 0f02 	cmp.w	fp, #2
 8015b62:	f47f af55 	bne.w	8015a10 <_scanf_float+0x70>
 8015b66:	f04f 0b03 	mov.w	fp, #3
 8015b6a:	e7da      	b.n	8015b22 <_scanf_float+0x182>
 8015b6c:	f1bb 0f06 	cmp.w	fp, #6
 8015b70:	f47f af4e 	bne.w	8015a10 <_scanf_float+0x70>
 8015b74:	f04f 0b07 	mov.w	fp, #7
 8015b78:	e7d3      	b.n	8015b22 <_scanf_float+0x182>
 8015b7a:	6821      	ldr	r1, [r4, #0]
 8015b7c:	0588      	lsls	r0, r1, #22
 8015b7e:	f57f af47 	bpl.w	8015a10 <_scanf_float+0x70>
 8015b82:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015b86:	6021      	str	r1, [r4, #0]
 8015b88:	f8cd 9008 	str.w	r9, [sp, #8]
 8015b8c:	e7c9      	b.n	8015b22 <_scanf_float+0x182>
 8015b8e:	6821      	ldr	r1, [r4, #0]
 8015b90:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015b94:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015b98:	d006      	beq.n	8015ba8 <_scanf_float+0x208>
 8015b9a:	0548      	lsls	r0, r1, #21
 8015b9c:	f57f af38 	bpl.w	8015a10 <_scanf_float+0x70>
 8015ba0:	f1b9 0f00 	cmp.w	r9, #0
 8015ba4:	f43f af3b 	beq.w	8015a1e <_scanf_float+0x7e>
 8015ba8:	0588      	lsls	r0, r1, #22
 8015baa:	bf58      	it	pl
 8015bac:	9802      	ldrpl	r0, [sp, #8]
 8015bae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015bb2:	bf58      	it	pl
 8015bb4:	eba9 0000 	subpl.w	r0, r9, r0
 8015bb8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015bbc:	bf58      	it	pl
 8015bbe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015bc2:	6021      	str	r1, [r4, #0]
 8015bc4:	f04f 0900 	mov.w	r9, #0
 8015bc8:	e7ab      	b.n	8015b22 <_scanf_float+0x182>
 8015bca:	2203      	movs	r2, #3
 8015bcc:	e7a9      	b.n	8015b22 <_scanf_float+0x182>
 8015bce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015bd2:	9205      	str	r2, [sp, #20]
 8015bd4:	4631      	mov	r1, r6
 8015bd6:	4638      	mov	r0, r7
 8015bd8:	4798      	blx	r3
 8015bda:	9a05      	ldr	r2, [sp, #20]
 8015bdc:	2800      	cmp	r0, #0
 8015bde:	f43f af04 	beq.w	80159ea <_scanf_float+0x4a>
 8015be2:	e715      	b.n	8015a10 <_scanf_float+0x70>
 8015be4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015be8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015bec:	4632      	mov	r2, r6
 8015bee:	4638      	mov	r0, r7
 8015bf0:	4798      	blx	r3
 8015bf2:	6923      	ldr	r3, [r4, #16]
 8015bf4:	3b01      	subs	r3, #1
 8015bf6:	6123      	str	r3, [r4, #16]
 8015bf8:	e715      	b.n	8015a26 <_scanf_float+0x86>
 8015bfa:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015bfe:	2b06      	cmp	r3, #6
 8015c00:	d80a      	bhi.n	8015c18 <_scanf_float+0x278>
 8015c02:	f1bb 0f02 	cmp.w	fp, #2
 8015c06:	d968      	bls.n	8015cda <_scanf_float+0x33a>
 8015c08:	f1ab 0b03 	sub.w	fp, fp, #3
 8015c0c:	fa5f fb8b 	uxtb.w	fp, fp
 8015c10:	eba5 0b0b 	sub.w	fp, r5, fp
 8015c14:	455d      	cmp	r5, fp
 8015c16:	d14b      	bne.n	8015cb0 <_scanf_float+0x310>
 8015c18:	6823      	ldr	r3, [r4, #0]
 8015c1a:	05da      	lsls	r2, r3, #23
 8015c1c:	d51f      	bpl.n	8015c5e <_scanf_float+0x2be>
 8015c1e:	055b      	lsls	r3, r3, #21
 8015c20:	d468      	bmi.n	8015cf4 <_scanf_float+0x354>
 8015c22:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015c26:	6923      	ldr	r3, [r4, #16]
 8015c28:	2965      	cmp	r1, #101	; 0x65
 8015c2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8015c2e:	f105 3bff 	add.w	fp, r5, #4294967295
 8015c32:	6123      	str	r3, [r4, #16]
 8015c34:	d00d      	beq.n	8015c52 <_scanf_float+0x2b2>
 8015c36:	2945      	cmp	r1, #69	; 0x45
 8015c38:	d00b      	beq.n	8015c52 <_scanf_float+0x2b2>
 8015c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c3e:	4632      	mov	r2, r6
 8015c40:	4638      	mov	r0, r7
 8015c42:	4798      	blx	r3
 8015c44:	6923      	ldr	r3, [r4, #16]
 8015c46:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015c4a:	3b01      	subs	r3, #1
 8015c4c:	f1a5 0b02 	sub.w	fp, r5, #2
 8015c50:	6123      	str	r3, [r4, #16]
 8015c52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c56:	4632      	mov	r2, r6
 8015c58:	4638      	mov	r0, r7
 8015c5a:	4798      	blx	r3
 8015c5c:	465d      	mov	r5, fp
 8015c5e:	6826      	ldr	r6, [r4, #0]
 8015c60:	f016 0610 	ands.w	r6, r6, #16
 8015c64:	d17a      	bne.n	8015d5c <_scanf_float+0x3bc>
 8015c66:	702e      	strb	r6, [r5, #0]
 8015c68:	6823      	ldr	r3, [r4, #0]
 8015c6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015c72:	d142      	bne.n	8015cfa <_scanf_float+0x35a>
 8015c74:	9b02      	ldr	r3, [sp, #8]
 8015c76:	eba9 0303 	sub.w	r3, r9, r3
 8015c7a:	425a      	negs	r2, r3
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d149      	bne.n	8015d14 <_scanf_float+0x374>
 8015c80:	2200      	movs	r2, #0
 8015c82:	4641      	mov	r1, r8
 8015c84:	4638      	mov	r0, r7
 8015c86:	f000 ff0b 	bl	8016aa0 <_strtod_r>
 8015c8a:	6825      	ldr	r5, [r4, #0]
 8015c8c:	f8da 3000 	ldr.w	r3, [sl]
 8015c90:	f015 0f02 	tst.w	r5, #2
 8015c94:	f103 0204 	add.w	r2, r3, #4
 8015c98:	ec59 8b10 	vmov	r8, r9, d0
 8015c9c:	f8ca 2000 	str.w	r2, [sl]
 8015ca0:	d043      	beq.n	8015d2a <_scanf_float+0x38a>
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	e9c3 8900 	strd	r8, r9, [r3]
 8015ca8:	68e3      	ldr	r3, [r4, #12]
 8015caa:	3301      	adds	r3, #1
 8015cac:	60e3      	str	r3, [r4, #12]
 8015cae:	e6be      	b.n	8015a2e <_scanf_float+0x8e>
 8015cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015cb4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015cb8:	4632      	mov	r2, r6
 8015cba:	4638      	mov	r0, r7
 8015cbc:	4798      	blx	r3
 8015cbe:	6923      	ldr	r3, [r4, #16]
 8015cc0:	3b01      	subs	r3, #1
 8015cc2:	6123      	str	r3, [r4, #16]
 8015cc4:	e7a6      	b.n	8015c14 <_scanf_float+0x274>
 8015cc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015cca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015cce:	4632      	mov	r2, r6
 8015cd0:	4638      	mov	r0, r7
 8015cd2:	4798      	blx	r3
 8015cd4:	6923      	ldr	r3, [r4, #16]
 8015cd6:	3b01      	subs	r3, #1
 8015cd8:	6123      	str	r3, [r4, #16]
 8015cda:	4545      	cmp	r5, r8
 8015cdc:	d8f3      	bhi.n	8015cc6 <_scanf_float+0x326>
 8015cde:	e6a5      	b.n	8015a2c <_scanf_float+0x8c>
 8015ce0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ce4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ce8:	4632      	mov	r2, r6
 8015cea:	4638      	mov	r0, r7
 8015cec:	4798      	blx	r3
 8015cee:	6923      	ldr	r3, [r4, #16]
 8015cf0:	3b01      	subs	r3, #1
 8015cf2:	6123      	str	r3, [r4, #16]
 8015cf4:	4545      	cmp	r5, r8
 8015cf6:	d8f3      	bhi.n	8015ce0 <_scanf_float+0x340>
 8015cf8:	e698      	b.n	8015a2c <_scanf_float+0x8c>
 8015cfa:	9b03      	ldr	r3, [sp, #12]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d0bf      	beq.n	8015c80 <_scanf_float+0x2e0>
 8015d00:	9904      	ldr	r1, [sp, #16]
 8015d02:	230a      	movs	r3, #10
 8015d04:	4632      	mov	r2, r6
 8015d06:	3101      	adds	r1, #1
 8015d08:	4638      	mov	r0, r7
 8015d0a:	f000 ff55 	bl	8016bb8 <_strtol_r>
 8015d0e:	9b03      	ldr	r3, [sp, #12]
 8015d10:	9d04      	ldr	r5, [sp, #16]
 8015d12:	1ac2      	subs	r2, r0, r3
 8015d14:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015d18:	429d      	cmp	r5, r3
 8015d1a:	bf28      	it	cs
 8015d1c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015d20:	490f      	ldr	r1, [pc, #60]	; (8015d60 <_scanf_float+0x3c0>)
 8015d22:	4628      	mov	r0, r5
 8015d24:	f000 f858 	bl	8015dd8 <siprintf>
 8015d28:	e7aa      	b.n	8015c80 <_scanf_float+0x2e0>
 8015d2a:	f015 0504 	ands.w	r5, r5, #4
 8015d2e:	d1b8      	bne.n	8015ca2 <_scanf_float+0x302>
 8015d30:	681f      	ldr	r7, [r3, #0]
 8015d32:	ee10 2a10 	vmov	r2, s0
 8015d36:	464b      	mov	r3, r9
 8015d38:	ee10 0a10 	vmov	r0, s0
 8015d3c:	4649      	mov	r1, r9
 8015d3e:	f7ea ff0d 	bl	8000b5c <__aeabi_dcmpun>
 8015d42:	b128      	cbz	r0, 8015d50 <_scanf_float+0x3b0>
 8015d44:	4628      	mov	r0, r5
 8015d46:	f000 f80d 	bl	8015d64 <nanf>
 8015d4a:	ed87 0a00 	vstr	s0, [r7]
 8015d4e:	e7ab      	b.n	8015ca8 <_scanf_float+0x308>
 8015d50:	4640      	mov	r0, r8
 8015d52:	4649      	mov	r1, r9
 8015d54:	f7ea ff60 	bl	8000c18 <__aeabi_d2f>
 8015d58:	6038      	str	r0, [r7, #0]
 8015d5a:	e7a5      	b.n	8015ca8 <_scanf_float+0x308>
 8015d5c:	2600      	movs	r6, #0
 8015d5e:	e666      	b.n	8015a2e <_scanf_float+0x8e>
 8015d60:	08019d82 	.word	0x08019d82

08015d64 <nanf>:
 8015d64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015d6c <nanf+0x8>
 8015d68:	4770      	bx	lr
 8015d6a:	bf00      	nop
 8015d6c:	7fc00000 	.word	0x7fc00000

08015d70 <sniprintf>:
 8015d70:	b40c      	push	{r2, r3}
 8015d72:	b530      	push	{r4, r5, lr}
 8015d74:	4b17      	ldr	r3, [pc, #92]	; (8015dd4 <sniprintf+0x64>)
 8015d76:	1e0c      	subs	r4, r1, #0
 8015d78:	b09d      	sub	sp, #116	; 0x74
 8015d7a:	681d      	ldr	r5, [r3, #0]
 8015d7c:	da08      	bge.n	8015d90 <sniprintf+0x20>
 8015d7e:	238b      	movs	r3, #139	; 0x8b
 8015d80:	602b      	str	r3, [r5, #0]
 8015d82:	f04f 30ff 	mov.w	r0, #4294967295
 8015d86:	b01d      	add	sp, #116	; 0x74
 8015d88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d8c:	b002      	add	sp, #8
 8015d8e:	4770      	bx	lr
 8015d90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015d94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015d98:	bf14      	ite	ne
 8015d9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015d9e:	4623      	moveq	r3, r4
 8015da0:	9304      	str	r3, [sp, #16]
 8015da2:	9307      	str	r3, [sp, #28]
 8015da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015da8:	9002      	str	r0, [sp, #8]
 8015daa:	9006      	str	r0, [sp, #24]
 8015dac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015db0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015db2:	ab21      	add	r3, sp, #132	; 0x84
 8015db4:	a902      	add	r1, sp, #8
 8015db6:	4628      	mov	r0, r5
 8015db8:	9301      	str	r3, [sp, #4]
 8015dba:	f002 fde7 	bl	801898c <_svfiprintf_r>
 8015dbe:	1c43      	adds	r3, r0, #1
 8015dc0:	bfbc      	itt	lt
 8015dc2:	238b      	movlt	r3, #139	; 0x8b
 8015dc4:	602b      	strlt	r3, [r5, #0]
 8015dc6:	2c00      	cmp	r4, #0
 8015dc8:	d0dd      	beq.n	8015d86 <sniprintf+0x16>
 8015dca:	9b02      	ldr	r3, [sp, #8]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	701a      	strb	r2, [r3, #0]
 8015dd0:	e7d9      	b.n	8015d86 <sniprintf+0x16>
 8015dd2:	bf00      	nop
 8015dd4:	2000000c 	.word	0x2000000c

08015dd8 <siprintf>:
 8015dd8:	b40e      	push	{r1, r2, r3}
 8015dda:	b500      	push	{lr}
 8015ddc:	b09c      	sub	sp, #112	; 0x70
 8015dde:	ab1d      	add	r3, sp, #116	; 0x74
 8015de0:	9002      	str	r0, [sp, #8]
 8015de2:	9006      	str	r0, [sp, #24]
 8015de4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015de8:	4809      	ldr	r0, [pc, #36]	; (8015e10 <siprintf+0x38>)
 8015dea:	9107      	str	r1, [sp, #28]
 8015dec:	9104      	str	r1, [sp, #16]
 8015dee:	4909      	ldr	r1, [pc, #36]	; (8015e14 <siprintf+0x3c>)
 8015df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015df4:	9105      	str	r1, [sp, #20]
 8015df6:	6800      	ldr	r0, [r0, #0]
 8015df8:	9301      	str	r3, [sp, #4]
 8015dfa:	a902      	add	r1, sp, #8
 8015dfc:	f002 fdc6 	bl	801898c <_svfiprintf_r>
 8015e00:	9b02      	ldr	r3, [sp, #8]
 8015e02:	2200      	movs	r2, #0
 8015e04:	701a      	strb	r2, [r3, #0]
 8015e06:	b01c      	add	sp, #112	; 0x70
 8015e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e0c:	b003      	add	sp, #12
 8015e0e:	4770      	bx	lr
 8015e10:	2000000c 	.word	0x2000000c
 8015e14:	ffff0208 	.word	0xffff0208

08015e18 <siscanf>:
 8015e18:	b40e      	push	{r1, r2, r3}
 8015e1a:	b530      	push	{r4, r5, lr}
 8015e1c:	b09c      	sub	sp, #112	; 0x70
 8015e1e:	ac1f      	add	r4, sp, #124	; 0x7c
 8015e20:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015e24:	f854 5b04 	ldr.w	r5, [r4], #4
 8015e28:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015e2c:	9002      	str	r0, [sp, #8]
 8015e2e:	9006      	str	r0, [sp, #24]
 8015e30:	f7ea f9e6 	bl	8000200 <strlen>
 8015e34:	4b0b      	ldr	r3, [pc, #44]	; (8015e64 <siscanf+0x4c>)
 8015e36:	9003      	str	r0, [sp, #12]
 8015e38:	9007      	str	r0, [sp, #28]
 8015e3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e3c:	480a      	ldr	r0, [pc, #40]	; (8015e68 <siscanf+0x50>)
 8015e3e:	9401      	str	r4, [sp, #4]
 8015e40:	2300      	movs	r3, #0
 8015e42:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e44:	9314      	str	r3, [sp, #80]	; 0x50
 8015e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015e4e:	462a      	mov	r2, r5
 8015e50:	4623      	mov	r3, r4
 8015e52:	a902      	add	r1, sp, #8
 8015e54:	6800      	ldr	r0, [r0, #0]
 8015e56:	f002 feeb 	bl	8018c30 <__ssvfiscanf_r>
 8015e5a:	b01c      	add	sp, #112	; 0x70
 8015e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e60:	b003      	add	sp, #12
 8015e62:	4770      	bx	lr
 8015e64:	08015e6d 	.word	0x08015e6d
 8015e68:	2000000c 	.word	0x2000000c

08015e6c <__seofread>:
 8015e6c:	2000      	movs	r0, #0
 8015e6e:	4770      	bx	lr

08015e70 <strcpy>:
 8015e70:	4603      	mov	r3, r0
 8015e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e76:	f803 2b01 	strb.w	r2, [r3], #1
 8015e7a:	2a00      	cmp	r2, #0
 8015e7c:	d1f9      	bne.n	8015e72 <strcpy+0x2>
 8015e7e:	4770      	bx	lr

08015e80 <sulp>:
 8015e80:	b570      	push	{r4, r5, r6, lr}
 8015e82:	4604      	mov	r4, r0
 8015e84:	460d      	mov	r5, r1
 8015e86:	ec45 4b10 	vmov	d0, r4, r5
 8015e8a:	4616      	mov	r6, r2
 8015e8c:	f002 fb3a 	bl	8018504 <__ulp>
 8015e90:	ec51 0b10 	vmov	r0, r1, d0
 8015e94:	b17e      	cbz	r6, 8015eb6 <sulp+0x36>
 8015e96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015e9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	dd09      	ble.n	8015eb6 <sulp+0x36>
 8015ea2:	051b      	lsls	r3, r3, #20
 8015ea4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015ea8:	2400      	movs	r4, #0
 8015eaa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015eae:	4622      	mov	r2, r4
 8015eb0:	462b      	mov	r3, r5
 8015eb2:	f7ea fbb9 	bl	8000628 <__aeabi_dmul>
 8015eb6:	bd70      	pop	{r4, r5, r6, pc}

08015eb8 <_strtod_l>:
 8015eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ebc:	461f      	mov	r7, r3
 8015ebe:	b0a1      	sub	sp, #132	; 0x84
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	4681      	mov	r9, r0
 8015ec4:	4638      	mov	r0, r7
 8015ec6:	460e      	mov	r6, r1
 8015ec8:	9217      	str	r2, [sp, #92]	; 0x5c
 8015eca:	931c      	str	r3, [sp, #112]	; 0x70
 8015ecc:	f002 f824 	bl	8017f18 <__localeconv_l>
 8015ed0:	4680      	mov	r8, r0
 8015ed2:	6800      	ldr	r0, [r0, #0]
 8015ed4:	f7ea f994 	bl	8000200 <strlen>
 8015ed8:	f04f 0a00 	mov.w	sl, #0
 8015edc:	4604      	mov	r4, r0
 8015ede:	f04f 0b00 	mov.w	fp, #0
 8015ee2:	961b      	str	r6, [sp, #108]	; 0x6c
 8015ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ee6:	781a      	ldrb	r2, [r3, #0]
 8015ee8:	2a0d      	cmp	r2, #13
 8015eea:	d832      	bhi.n	8015f52 <_strtod_l+0x9a>
 8015eec:	2a09      	cmp	r2, #9
 8015eee:	d236      	bcs.n	8015f5e <_strtod_l+0xa6>
 8015ef0:	2a00      	cmp	r2, #0
 8015ef2:	d03e      	beq.n	8015f72 <_strtod_l+0xba>
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8015ef8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015efa:	782b      	ldrb	r3, [r5, #0]
 8015efc:	2b30      	cmp	r3, #48	; 0x30
 8015efe:	f040 80ac 	bne.w	801605a <_strtod_l+0x1a2>
 8015f02:	786b      	ldrb	r3, [r5, #1]
 8015f04:	2b58      	cmp	r3, #88	; 0x58
 8015f06:	d001      	beq.n	8015f0c <_strtod_l+0x54>
 8015f08:	2b78      	cmp	r3, #120	; 0x78
 8015f0a:	d167      	bne.n	8015fdc <_strtod_l+0x124>
 8015f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f0e:	9301      	str	r3, [sp, #4]
 8015f10:	ab1c      	add	r3, sp, #112	; 0x70
 8015f12:	9300      	str	r3, [sp, #0]
 8015f14:	9702      	str	r7, [sp, #8]
 8015f16:	ab1d      	add	r3, sp, #116	; 0x74
 8015f18:	4a88      	ldr	r2, [pc, #544]	; (801613c <_strtod_l+0x284>)
 8015f1a:	a91b      	add	r1, sp, #108	; 0x6c
 8015f1c:	4648      	mov	r0, r9
 8015f1e:	f001 fd12 	bl	8017946 <__gethex>
 8015f22:	f010 0407 	ands.w	r4, r0, #7
 8015f26:	4606      	mov	r6, r0
 8015f28:	d005      	beq.n	8015f36 <_strtod_l+0x7e>
 8015f2a:	2c06      	cmp	r4, #6
 8015f2c:	d12b      	bne.n	8015f86 <_strtod_l+0xce>
 8015f2e:	3501      	adds	r5, #1
 8015f30:	2300      	movs	r3, #0
 8015f32:	951b      	str	r5, [sp, #108]	; 0x6c
 8015f34:	930d      	str	r3, [sp, #52]	; 0x34
 8015f36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	f040 859a 	bne.w	8016a72 <_strtod_l+0xbba>
 8015f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f40:	b1e3      	cbz	r3, 8015f7c <_strtod_l+0xc4>
 8015f42:	4652      	mov	r2, sl
 8015f44:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015f48:	ec43 2b10 	vmov	d0, r2, r3
 8015f4c:	b021      	add	sp, #132	; 0x84
 8015f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f52:	2a2b      	cmp	r2, #43	; 0x2b
 8015f54:	d015      	beq.n	8015f82 <_strtod_l+0xca>
 8015f56:	2a2d      	cmp	r2, #45	; 0x2d
 8015f58:	d004      	beq.n	8015f64 <_strtod_l+0xac>
 8015f5a:	2a20      	cmp	r2, #32
 8015f5c:	d1ca      	bne.n	8015ef4 <_strtod_l+0x3c>
 8015f5e:	3301      	adds	r3, #1
 8015f60:	931b      	str	r3, [sp, #108]	; 0x6c
 8015f62:	e7bf      	b.n	8015ee4 <_strtod_l+0x2c>
 8015f64:	2201      	movs	r2, #1
 8015f66:	920d      	str	r2, [sp, #52]	; 0x34
 8015f68:	1c5a      	adds	r2, r3, #1
 8015f6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8015f6c:	785b      	ldrb	r3, [r3, #1]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d1c2      	bne.n	8015ef8 <_strtod_l+0x40>
 8015f72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015f74:	961b      	str	r6, [sp, #108]	; 0x6c
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	f040 8579 	bne.w	8016a6e <_strtod_l+0xbb6>
 8015f7c:	4652      	mov	r2, sl
 8015f7e:	465b      	mov	r3, fp
 8015f80:	e7e2      	b.n	8015f48 <_strtod_l+0x90>
 8015f82:	2200      	movs	r2, #0
 8015f84:	e7ef      	b.n	8015f66 <_strtod_l+0xae>
 8015f86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015f88:	b13a      	cbz	r2, 8015f9a <_strtod_l+0xe2>
 8015f8a:	2135      	movs	r1, #53	; 0x35
 8015f8c:	a81e      	add	r0, sp, #120	; 0x78
 8015f8e:	f002 fbb1 	bl	80186f4 <__copybits>
 8015f92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f94:	4648      	mov	r0, r9
 8015f96:	f002 f81d 	bl	8017fd4 <_Bfree>
 8015f9a:	3c01      	subs	r4, #1
 8015f9c:	2c04      	cmp	r4, #4
 8015f9e:	d806      	bhi.n	8015fae <_strtod_l+0xf6>
 8015fa0:	e8df f004 	tbb	[pc, r4]
 8015fa4:	1714030a 	.word	0x1714030a
 8015fa8:	0a          	.byte	0x0a
 8015fa9:	00          	.byte	0x00
 8015faa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015fae:	0730      	lsls	r0, r6, #28
 8015fb0:	d5c1      	bpl.n	8015f36 <_strtod_l+0x7e>
 8015fb2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015fb6:	e7be      	b.n	8015f36 <_strtod_l+0x7e>
 8015fb8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015fbc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015fbe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015fc2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015fc6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015fca:	e7f0      	b.n	8015fae <_strtod_l+0xf6>
 8015fcc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016140 <_strtod_l+0x288>
 8015fd0:	e7ed      	b.n	8015fae <_strtod_l+0xf6>
 8015fd2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015fd6:	f04f 3aff 	mov.w	sl, #4294967295
 8015fda:	e7e8      	b.n	8015fae <_strtod_l+0xf6>
 8015fdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fde:	1c5a      	adds	r2, r3, #1
 8015fe0:	921b      	str	r2, [sp, #108]	; 0x6c
 8015fe2:	785b      	ldrb	r3, [r3, #1]
 8015fe4:	2b30      	cmp	r3, #48	; 0x30
 8015fe6:	d0f9      	beq.n	8015fdc <_strtod_l+0x124>
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d0a4      	beq.n	8015f36 <_strtod_l+0x7e>
 8015fec:	2301      	movs	r3, #1
 8015fee:	2500      	movs	r5, #0
 8015ff0:	9306      	str	r3, [sp, #24]
 8015ff2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ff4:	9308      	str	r3, [sp, #32]
 8015ff6:	9507      	str	r5, [sp, #28]
 8015ff8:	9505      	str	r5, [sp, #20]
 8015ffa:	220a      	movs	r2, #10
 8015ffc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015ffe:	7807      	ldrb	r7, [r0, #0]
 8016000:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016004:	b2d9      	uxtb	r1, r3
 8016006:	2909      	cmp	r1, #9
 8016008:	d929      	bls.n	801605e <_strtod_l+0x1a6>
 801600a:	4622      	mov	r2, r4
 801600c:	f8d8 1000 	ldr.w	r1, [r8]
 8016010:	f003 f8f8 	bl	8019204 <strncmp>
 8016014:	2800      	cmp	r0, #0
 8016016:	d031      	beq.n	801607c <_strtod_l+0x1c4>
 8016018:	2000      	movs	r0, #0
 801601a:	9c05      	ldr	r4, [sp, #20]
 801601c:	9004      	str	r0, [sp, #16]
 801601e:	463b      	mov	r3, r7
 8016020:	4602      	mov	r2, r0
 8016022:	2b65      	cmp	r3, #101	; 0x65
 8016024:	d001      	beq.n	801602a <_strtod_l+0x172>
 8016026:	2b45      	cmp	r3, #69	; 0x45
 8016028:	d114      	bne.n	8016054 <_strtod_l+0x19c>
 801602a:	b924      	cbnz	r4, 8016036 <_strtod_l+0x17e>
 801602c:	b910      	cbnz	r0, 8016034 <_strtod_l+0x17c>
 801602e:	9b06      	ldr	r3, [sp, #24]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d09e      	beq.n	8015f72 <_strtod_l+0xba>
 8016034:	2400      	movs	r4, #0
 8016036:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016038:	1c73      	adds	r3, r6, #1
 801603a:	931b      	str	r3, [sp, #108]	; 0x6c
 801603c:	7873      	ldrb	r3, [r6, #1]
 801603e:	2b2b      	cmp	r3, #43	; 0x2b
 8016040:	d078      	beq.n	8016134 <_strtod_l+0x27c>
 8016042:	2b2d      	cmp	r3, #45	; 0x2d
 8016044:	d070      	beq.n	8016128 <_strtod_l+0x270>
 8016046:	f04f 0c00 	mov.w	ip, #0
 801604a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801604e:	2f09      	cmp	r7, #9
 8016050:	d97c      	bls.n	801614c <_strtod_l+0x294>
 8016052:	961b      	str	r6, [sp, #108]	; 0x6c
 8016054:	f04f 0e00 	mov.w	lr, #0
 8016058:	e09a      	b.n	8016190 <_strtod_l+0x2d8>
 801605a:	2300      	movs	r3, #0
 801605c:	e7c7      	b.n	8015fee <_strtod_l+0x136>
 801605e:	9905      	ldr	r1, [sp, #20]
 8016060:	2908      	cmp	r1, #8
 8016062:	bfdd      	ittte	le
 8016064:	9907      	ldrle	r1, [sp, #28]
 8016066:	fb02 3301 	mlale	r3, r2, r1, r3
 801606a:	9307      	strle	r3, [sp, #28]
 801606c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016070:	9b05      	ldr	r3, [sp, #20]
 8016072:	3001      	adds	r0, #1
 8016074:	3301      	adds	r3, #1
 8016076:	9305      	str	r3, [sp, #20]
 8016078:	901b      	str	r0, [sp, #108]	; 0x6c
 801607a:	e7bf      	b.n	8015ffc <_strtod_l+0x144>
 801607c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801607e:	191a      	adds	r2, r3, r4
 8016080:	921b      	str	r2, [sp, #108]	; 0x6c
 8016082:	9a05      	ldr	r2, [sp, #20]
 8016084:	5d1b      	ldrb	r3, [r3, r4]
 8016086:	2a00      	cmp	r2, #0
 8016088:	d037      	beq.n	80160fa <_strtod_l+0x242>
 801608a:	9c05      	ldr	r4, [sp, #20]
 801608c:	4602      	mov	r2, r0
 801608e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016092:	2909      	cmp	r1, #9
 8016094:	d913      	bls.n	80160be <_strtod_l+0x206>
 8016096:	2101      	movs	r1, #1
 8016098:	9104      	str	r1, [sp, #16]
 801609a:	e7c2      	b.n	8016022 <_strtod_l+0x16a>
 801609c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801609e:	1c5a      	adds	r2, r3, #1
 80160a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80160a2:	785b      	ldrb	r3, [r3, #1]
 80160a4:	3001      	adds	r0, #1
 80160a6:	2b30      	cmp	r3, #48	; 0x30
 80160a8:	d0f8      	beq.n	801609c <_strtod_l+0x1e4>
 80160aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80160ae:	2a08      	cmp	r2, #8
 80160b0:	f200 84e4 	bhi.w	8016a7c <_strtod_l+0xbc4>
 80160b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80160b6:	9208      	str	r2, [sp, #32]
 80160b8:	4602      	mov	r2, r0
 80160ba:	2000      	movs	r0, #0
 80160bc:	4604      	mov	r4, r0
 80160be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80160c2:	f100 0101 	add.w	r1, r0, #1
 80160c6:	d012      	beq.n	80160ee <_strtod_l+0x236>
 80160c8:	440a      	add	r2, r1
 80160ca:	eb00 0c04 	add.w	ip, r0, r4
 80160ce:	4621      	mov	r1, r4
 80160d0:	270a      	movs	r7, #10
 80160d2:	458c      	cmp	ip, r1
 80160d4:	d113      	bne.n	80160fe <_strtod_l+0x246>
 80160d6:	1821      	adds	r1, r4, r0
 80160d8:	2908      	cmp	r1, #8
 80160da:	f104 0401 	add.w	r4, r4, #1
 80160de:	4404      	add	r4, r0
 80160e0:	dc19      	bgt.n	8016116 <_strtod_l+0x25e>
 80160e2:	9b07      	ldr	r3, [sp, #28]
 80160e4:	210a      	movs	r1, #10
 80160e6:	fb01 e303 	mla	r3, r1, r3, lr
 80160ea:	9307      	str	r3, [sp, #28]
 80160ec:	2100      	movs	r1, #0
 80160ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160f0:	1c58      	adds	r0, r3, #1
 80160f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80160f4:	785b      	ldrb	r3, [r3, #1]
 80160f6:	4608      	mov	r0, r1
 80160f8:	e7c9      	b.n	801608e <_strtod_l+0x1d6>
 80160fa:	9805      	ldr	r0, [sp, #20]
 80160fc:	e7d3      	b.n	80160a6 <_strtod_l+0x1ee>
 80160fe:	2908      	cmp	r1, #8
 8016100:	f101 0101 	add.w	r1, r1, #1
 8016104:	dc03      	bgt.n	801610e <_strtod_l+0x256>
 8016106:	9b07      	ldr	r3, [sp, #28]
 8016108:	437b      	muls	r3, r7
 801610a:	9307      	str	r3, [sp, #28]
 801610c:	e7e1      	b.n	80160d2 <_strtod_l+0x21a>
 801610e:	2910      	cmp	r1, #16
 8016110:	bfd8      	it	le
 8016112:	437d      	mulle	r5, r7
 8016114:	e7dd      	b.n	80160d2 <_strtod_l+0x21a>
 8016116:	2c10      	cmp	r4, #16
 8016118:	bfdc      	itt	le
 801611a:	210a      	movle	r1, #10
 801611c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016120:	e7e4      	b.n	80160ec <_strtod_l+0x234>
 8016122:	2301      	movs	r3, #1
 8016124:	9304      	str	r3, [sp, #16]
 8016126:	e781      	b.n	801602c <_strtod_l+0x174>
 8016128:	f04f 0c01 	mov.w	ip, #1
 801612c:	1cb3      	adds	r3, r6, #2
 801612e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016130:	78b3      	ldrb	r3, [r6, #2]
 8016132:	e78a      	b.n	801604a <_strtod_l+0x192>
 8016134:	f04f 0c00 	mov.w	ip, #0
 8016138:	e7f8      	b.n	801612c <_strtod_l+0x274>
 801613a:	bf00      	nop
 801613c:	08019d88 	.word	0x08019d88
 8016140:	7ff00000 	.word	0x7ff00000
 8016144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016146:	1c5f      	adds	r7, r3, #1
 8016148:	971b      	str	r7, [sp, #108]	; 0x6c
 801614a:	785b      	ldrb	r3, [r3, #1]
 801614c:	2b30      	cmp	r3, #48	; 0x30
 801614e:	d0f9      	beq.n	8016144 <_strtod_l+0x28c>
 8016150:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016154:	2f08      	cmp	r7, #8
 8016156:	f63f af7d 	bhi.w	8016054 <_strtod_l+0x19c>
 801615a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801615e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016160:	930a      	str	r3, [sp, #40]	; 0x28
 8016162:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016164:	1c5f      	adds	r7, r3, #1
 8016166:	971b      	str	r7, [sp, #108]	; 0x6c
 8016168:	785b      	ldrb	r3, [r3, #1]
 801616a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801616e:	f1b8 0f09 	cmp.w	r8, #9
 8016172:	d937      	bls.n	80161e4 <_strtod_l+0x32c>
 8016174:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016176:	1a7f      	subs	r7, r7, r1
 8016178:	2f08      	cmp	r7, #8
 801617a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801617e:	dc37      	bgt.n	80161f0 <_strtod_l+0x338>
 8016180:	45be      	cmp	lr, r7
 8016182:	bfa8      	it	ge
 8016184:	46be      	movge	lr, r7
 8016186:	f1bc 0f00 	cmp.w	ip, #0
 801618a:	d001      	beq.n	8016190 <_strtod_l+0x2d8>
 801618c:	f1ce 0e00 	rsb	lr, lr, #0
 8016190:	2c00      	cmp	r4, #0
 8016192:	d151      	bne.n	8016238 <_strtod_l+0x380>
 8016194:	2800      	cmp	r0, #0
 8016196:	f47f aece 	bne.w	8015f36 <_strtod_l+0x7e>
 801619a:	9a06      	ldr	r2, [sp, #24]
 801619c:	2a00      	cmp	r2, #0
 801619e:	f47f aeca 	bne.w	8015f36 <_strtod_l+0x7e>
 80161a2:	9a04      	ldr	r2, [sp, #16]
 80161a4:	2a00      	cmp	r2, #0
 80161a6:	f47f aee4 	bne.w	8015f72 <_strtod_l+0xba>
 80161aa:	2b4e      	cmp	r3, #78	; 0x4e
 80161ac:	d027      	beq.n	80161fe <_strtod_l+0x346>
 80161ae:	dc21      	bgt.n	80161f4 <_strtod_l+0x33c>
 80161b0:	2b49      	cmp	r3, #73	; 0x49
 80161b2:	f47f aede 	bne.w	8015f72 <_strtod_l+0xba>
 80161b6:	49a0      	ldr	r1, [pc, #640]	; (8016438 <_strtod_l+0x580>)
 80161b8:	a81b      	add	r0, sp, #108	; 0x6c
 80161ba:	f001 fdf7 	bl	8017dac <__match>
 80161be:	2800      	cmp	r0, #0
 80161c0:	f43f aed7 	beq.w	8015f72 <_strtod_l+0xba>
 80161c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161c6:	499d      	ldr	r1, [pc, #628]	; (801643c <_strtod_l+0x584>)
 80161c8:	3b01      	subs	r3, #1
 80161ca:	a81b      	add	r0, sp, #108	; 0x6c
 80161cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80161ce:	f001 fded 	bl	8017dac <__match>
 80161d2:	b910      	cbnz	r0, 80161da <_strtod_l+0x322>
 80161d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80161d6:	3301      	adds	r3, #1
 80161d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80161da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016450 <_strtod_l+0x598>
 80161de:	f04f 0a00 	mov.w	sl, #0
 80161e2:	e6a8      	b.n	8015f36 <_strtod_l+0x7e>
 80161e4:	210a      	movs	r1, #10
 80161e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80161ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80161ee:	e7b8      	b.n	8016162 <_strtod_l+0x2aa>
 80161f0:	46be      	mov	lr, r7
 80161f2:	e7c8      	b.n	8016186 <_strtod_l+0x2ce>
 80161f4:	2b69      	cmp	r3, #105	; 0x69
 80161f6:	d0de      	beq.n	80161b6 <_strtod_l+0x2fe>
 80161f8:	2b6e      	cmp	r3, #110	; 0x6e
 80161fa:	f47f aeba 	bne.w	8015f72 <_strtod_l+0xba>
 80161fe:	4990      	ldr	r1, [pc, #576]	; (8016440 <_strtod_l+0x588>)
 8016200:	a81b      	add	r0, sp, #108	; 0x6c
 8016202:	f001 fdd3 	bl	8017dac <__match>
 8016206:	2800      	cmp	r0, #0
 8016208:	f43f aeb3 	beq.w	8015f72 <_strtod_l+0xba>
 801620c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801620e:	781b      	ldrb	r3, [r3, #0]
 8016210:	2b28      	cmp	r3, #40	; 0x28
 8016212:	d10e      	bne.n	8016232 <_strtod_l+0x37a>
 8016214:	aa1e      	add	r2, sp, #120	; 0x78
 8016216:	498b      	ldr	r1, [pc, #556]	; (8016444 <_strtod_l+0x58c>)
 8016218:	a81b      	add	r0, sp, #108	; 0x6c
 801621a:	f001 fddb 	bl	8017dd4 <__hexnan>
 801621e:	2805      	cmp	r0, #5
 8016220:	d107      	bne.n	8016232 <_strtod_l+0x37a>
 8016222:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016224:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016228:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801622c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016230:	e681      	b.n	8015f36 <_strtod_l+0x7e>
 8016232:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016458 <_strtod_l+0x5a0>
 8016236:	e7d2      	b.n	80161de <_strtod_l+0x326>
 8016238:	ebae 0302 	sub.w	r3, lr, r2
 801623c:	9306      	str	r3, [sp, #24]
 801623e:	9b05      	ldr	r3, [sp, #20]
 8016240:	9807      	ldr	r0, [sp, #28]
 8016242:	2b00      	cmp	r3, #0
 8016244:	bf08      	it	eq
 8016246:	4623      	moveq	r3, r4
 8016248:	2c10      	cmp	r4, #16
 801624a:	9305      	str	r3, [sp, #20]
 801624c:	46a0      	mov	r8, r4
 801624e:	bfa8      	it	ge
 8016250:	f04f 0810 	movge.w	r8, #16
 8016254:	f7ea f96e 	bl	8000534 <__aeabi_ui2d>
 8016258:	2c09      	cmp	r4, #9
 801625a:	4682      	mov	sl, r0
 801625c:	468b      	mov	fp, r1
 801625e:	dc13      	bgt.n	8016288 <_strtod_l+0x3d0>
 8016260:	9b06      	ldr	r3, [sp, #24]
 8016262:	2b00      	cmp	r3, #0
 8016264:	f43f ae67 	beq.w	8015f36 <_strtod_l+0x7e>
 8016268:	9b06      	ldr	r3, [sp, #24]
 801626a:	dd7a      	ble.n	8016362 <_strtod_l+0x4aa>
 801626c:	2b16      	cmp	r3, #22
 801626e:	dc61      	bgt.n	8016334 <_strtod_l+0x47c>
 8016270:	4a75      	ldr	r2, [pc, #468]	; (8016448 <_strtod_l+0x590>)
 8016272:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016276:	e9de 0100 	ldrd	r0, r1, [lr]
 801627a:	4652      	mov	r2, sl
 801627c:	465b      	mov	r3, fp
 801627e:	f7ea f9d3 	bl	8000628 <__aeabi_dmul>
 8016282:	4682      	mov	sl, r0
 8016284:	468b      	mov	fp, r1
 8016286:	e656      	b.n	8015f36 <_strtod_l+0x7e>
 8016288:	4b6f      	ldr	r3, [pc, #444]	; (8016448 <_strtod_l+0x590>)
 801628a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801628e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016292:	f7ea f9c9 	bl	8000628 <__aeabi_dmul>
 8016296:	4606      	mov	r6, r0
 8016298:	4628      	mov	r0, r5
 801629a:	460f      	mov	r7, r1
 801629c:	f7ea f94a 	bl	8000534 <__aeabi_ui2d>
 80162a0:	4602      	mov	r2, r0
 80162a2:	460b      	mov	r3, r1
 80162a4:	4630      	mov	r0, r6
 80162a6:	4639      	mov	r1, r7
 80162a8:	f7ea f808 	bl	80002bc <__adddf3>
 80162ac:	2c0f      	cmp	r4, #15
 80162ae:	4682      	mov	sl, r0
 80162b0:	468b      	mov	fp, r1
 80162b2:	ddd5      	ble.n	8016260 <_strtod_l+0x3a8>
 80162b4:	9b06      	ldr	r3, [sp, #24]
 80162b6:	eba4 0808 	sub.w	r8, r4, r8
 80162ba:	4498      	add	r8, r3
 80162bc:	f1b8 0f00 	cmp.w	r8, #0
 80162c0:	f340 8096 	ble.w	80163f0 <_strtod_l+0x538>
 80162c4:	f018 030f 	ands.w	r3, r8, #15
 80162c8:	d00a      	beq.n	80162e0 <_strtod_l+0x428>
 80162ca:	495f      	ldr	r1, [pc, #380]	; (8016448 <_strtod_l+0x590>)
 80162cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80162d0:	4652      	mov	r2, sl
 80162d2:	465b      	mov	r3, fp
 80162d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162d8:	f7ea f9a6 	bl	8000628 <__aeabi_dmul>
 80162dc:	4682      	mov	sl, r0
 80162de:	468b      	mov	fp, r1
 80162e0:	f038 080f 	bics.w	r8, r8, #15
 80162e4:	d073      	beq.n	80163ce <_strtod_l+0x516>
 80162e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80162ea:	dd47      	ble.n	801637c <_strtod_l+0x4c4>
 80162ec:	2400      	movs	r4, #0
 80162ee:	46a0      	mov	r8, r4
 80162f0:	9407      	str	r4, [sp, #28]
 80162f2:	9405      	str	r4, [sp, #20]
 80162f4:	2322      	movs	r3, #34	; 0x22
 80162f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016450 <_strtod_l+0x598>
 80162fa:	f8c9 3000 	str.w	r3, [r9]
 80162fe:	f04f 0a00 	mov.w	sl, #0
 8016302:	9b07      	ldr	r3, [sp, #28]
 8016304:	2b00      	cmp	r3, #0
 8016306:	f43f ae16 	beq.w	8015f36 <_strtod_l+0x7e>
 801630a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801630c:	4648      	mov	r0, r9
 801630e:	f001 fe61 	bl	8017fd4 <_Bfree>
 8016312:	9905      	ldr	r1, [sp, #20]
 8016314:	4648      	mov	r0, r9
 8016316:	f001 fe5d 	bl	8017fd4 <_Bfree>
 801631a:	4641      	mov	r1, r8
 801631c:	4648      	mov	r0, r9
 801631e:	f001 fe59 	bl	8017fd4 <_Bfree>
 8016322:	9907      	ldr	r1, [sp, #28]
 8016324:	4648      	mov	r0, r9
 8016326:	f001 fe55 	bl	8017fd4 <_Bfree>
 801632a:	4621      	mov	r1, r4
 801632c:	4648      	mov	r0, r9
 801632e:	f001 fe51 	bl	8017fd4 <_Bfree>
 8016332:	e600      	b.n	8015f36 <_strtod_l+0x7e>
 8016334:	9a06      	ldr	r2, [sp, #24]
 8016336:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801633a:	4293      	cmp	r3, r2
 801633c:	dbba      	blt.n	80162b4 <_strtod_l+0x3fc>
 801633e:	4d42      	ldr	r5, [pc, #264]	; (8016448 <_strtod_l+0x590>)
 8016340:	f1c4 040f 	rsb	r4, r4, #15
 8016344:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016348:	4652      	mov	r2, sl
 801634a:	465b      	mov	r3, fp
 801634c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016350:	f7ea f96a 	bl	8000628 <__aeabi_dmul>
 8016354:	9b06      	ldr	r3, [sp, #24]
 8016356:	1b1c      	subs	r4, r3, r4
 8016358:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801635c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016360:	e78d      	b.n	801627e <_strtod_l+0x3c6>
 8016362:	f113 0f16 	cmn.w	r3, #22
 8016366:	dba5      	blt.n	80162b4 <_strtod_l+0x3fc>
 8016368:	4a37      	ldr	r2, [pc, #220]	; (8016448 <_strtod_l+0x590>)
 801636a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801636e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016372:	4650      	mov	r0, sl
 8016374:	4659      	mov	r1, fp
 8016376:	f7ea fa81 	bl	800087c <__aeabi_ddiv>
 801637a:	e782      	b.n	8016282 <_strtod_l+0x3ca>
 801637c:	2300      	movs	r3, #0
 801637e:	4e33      	ldr	r6, [pc, #204]	; (801644c <_strtod_l+0x594>)
 8016380:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016384:	4650      	mov	r0, sl
 8016386:	4659      	mov	r1, fp
 8016388:	461d      	mov	r5, r3
 801638a:	f1b8 0f01 	cmp.w	r8, #1
 801638e:	dc21      	bgt.n	80163d4 <_strtod_l+0x51c>
 8016390:	b10b      	cbz	r3, 8016396 <_strtod_l+0x4de>
 8016392:	4682      	mov	sl, r0
 8016394:	468b      	mov	fp, r1
 8016396:	4b2d      	ldr	r3, [pc, #180]	; (801644c <_strtod_l+0x594>)
 8016398:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801639c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80163a0:	4652      	mov	r2, sl
 80163a2:	465b      	mov	r3, fp
 80163a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80163a8:	f7ea f93e 	bl	8000628 <__aeabi_dmul>
 80163ac:	4b28      	ldr	r3, [pc, #160]	; (8016450 <_strtod_l+0x598>)
 80163ae:	460a      	mov	r2, r1
 80163b0:	400b      	ands	r3, r1
 80163b2:	4928      	ldr	r1, [pc, #160]	; (8016454 <_strtod_l+0x59c>)
 80163b4:	428b      	cmp	r3, r1
 80163b6:	4682      	mov	sl, r0
 80163b8:	d898      	bhi.n	80162ec <_strtod_l+0x434>
 80163ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80163be:	428b      	cmp	r3, r1
 80163c0:	bf86      	itte	hi
 80163c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801645c <_strtod_l+0x5a4>
 80163c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80163ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80163ce:	2300      	movs	r3, #0
 80163d0:	9304      	str	r3, [sp, #16]
 80163d2:	e077      	b.n	80164c4 <_strtod_l+0x60c>
 80163d4:	f018 0f01 	tst.w	r8, #1
 80163d8:	d006      	beq.n	80163e8 <_strtod_l+0x530>
 80163da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80163de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e2:	f7ea f921 	bl	8000628 <__aeabi_dmul>
 80163e6:	2301      	movs	r3, #1
 80163e8:	3501      	adds	r5, #1
 80163ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80163ee:	e7cc      	b.n	801638a <_strtod_l+0x4d2>
 80163f0:	d0ed      	beq.n	80163ce <_strtod_l+0x516>
 80163f2:	f1c8 0800 	rsb	r8, r8, #0
 80163f6:	f018 020f 	ands.w	r2, r8, #15
 80163fa:	d00a      	beq.n	8016412 <_strtod_l+0x55a>
 80163fc:	4b12      	ldr	r3, [pc, #72]	; (8016448 <_strtod_l+0x590>)
 80163fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016402:	4650      	mov	r0, sl
 8016404:	4659      	mov	r1, fp
 8016406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801640a:	f7ea fa37 	bl	800087c <__aeabi_ddiv>
 801640e:	4682      	mov	sl, r0
 8016410:	468b      	mov	fp, r1
 8016412:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016416:	d0da      	beq.n	80163ce <_strtod_l+0x516>
 8016418:	f1b8 0f1f 	cmp.w	r8, #31
 801641c:	dd20      	ble.n	8016460 <_strtod_l+0x5a8>
 801641e:	2400      	movs	r4, #0
 8016420:	46a0      	mov	r8, r4
 8016422:	9407      	str	r4, [sp, #28]
 8016424:	9405      	str	r4, [sp, #20]
 8016426:	2322      	movs	r3, #34	; 0x22
 8016428:	f04f 0a00 	mov.w	sl, #0
 801642c:	f04f 0b00 	mov.w	fp, #0
 8016430:	f8c9 3000 	str.w	r3, [r9]
 8016434:	e765      	b.n	8016302 <_strtod_l+0x44a>
 8016436:	bf00      	nop
 8016438:	08019d55 	.word	0x08019d55
 801643c:	08019ddb 	.word	0x08019ddb
 8016440:	08019d5d 	.word	0x08019d5d
 8016444:	08019d9c 	.word	0x08019d9c
 8016448:	08019e80 	.word	0x08019e80
 801644c:	08019e58 	.word	0x08019e58
 8016450:	7ff00000 	.word	0x7ff00000
 8016454:	7ca00000 	.word	0x7ca00000
 8016458:	fff80000 	.word	0xfff80000
 801645c:	7fefffff 	.word	0x7fefffff
 8016460:	f018 0310 	ands.w	r3, r8, #16
 8016464:	bf18      	it	ne
 8016466:	236a      	movne	r3, #106	; 0x6a
 8016468:	4da0      	ldr	r5, [pc, #640]	; (80166ec <_strtod_l+0x834>)
 801646a:	9304      	str	r3, [sp, #16]
 801646c:	4650      	mov	r0, sl
 801646e:	4659      	mov	r1, fp
 8016470:	2300      	movs	r3, #0
 8016472:	f1b8 0f00 	cmp.w	r8, #0
 8016476:	f300 810a 	bgt.w	801668e <_strtod_l+0x7d6>
 801647a:	b10b      	cbz	r3, 8016480 <_strtod_l+0x5c8>
 801647c:	4682      	mov	sl, r0
 801647e:	468b      	mov	fp, r1
 8016480:	9b04      	ldr	r3, [sp, #16]
 8016482:	b1bb      	cbz	r3, 80164b4 <_strtod_l+0x5fc>
 8016484:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016488:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801648c:	2b00      	cmp	r3, #0
 801648e:	4659      	mov	r1, fp
 8016490:	dd10      	ble.n	80164b4 <_strtod_l+0x5fc>
 8016492:	2b1f      	cmp	r3, #31
 8016494:	f340 8107 	ble.w	80166a6 <_strtod_l+0x7ee>
 8016498:	2b34      	cmp	r3, #52	; 0x34
 801649a:	bfde      	ittt	le
 801649c:	3b20      	suble	r3, #32
 801649e:	f04f 32ff 	movle.w	r2, #4294967295
 80164a2:	fa02 f303 	lslle.w	r3, r2, r3
 80164a6:	f04f 0a00 	mov.w	sl, #0
 80164aa:	bfcc      	ite	gt
 80164ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80164b0:	ea03 0b01 	andle.w	fp, r3, r1
 80164b4:	2200      	movs	r2, #0
 80164b6:	2300      	movs	r3, #0
 80164b8:	4650      	mov	r0, sl
 80164ba:	4659      	mov	r1, fp
 80164bc:	f7ea fb1c 	bl	8000af8 <__aeabi_dcmpeq>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d1ac      	bne.n	801641e <_strtod_l+0x566>
 80164c4:	9b07      	ldr	r3, [sp, #28]
 80164c6:	9300      	str	r3, [sp, #0]
 80164c8:	9a05      	ldr	r2, [sp, #20]
 80164ca:	9908      	ldr	r1, [sp, #32]
 80164cc:	4623      	mov	r3, r4
 80164ce:	4648      	mov	r0, r9
 80164d0:	f001 fdd2 	bl	8018078 <__s2b>
 80164d4:	9007      	str	r0, [sp, #28]
 80164d6:	2800      	cmp	r0, #0
 80164d8:	f43f af08 	beq.w	80162ec <_strtod_l+0x434>
 80164dc:	9a06      	ldr	r2, [sp, #24]
 80164de:	9b06      	ldr	r3, [sp, #24]
 80164e0:	2a00      	cmp	r2, #0
 80164e2:	f1c3 0300 	rsb	r3, r3, #0
 80164e6:	bfa8      	it	ge
 80164e8:	2300      	movge	r3, #0
 80164ea:	930e      	str	r3, [sp, #56]	; 0x38
 80164ec:	2400      	movs	r4, #0
 80164ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80164f2:	9316      	str	r3, [sp, #88]	; 0x58
 80164f4:	46a0      	mov	r8, r4
 80164f6:	9b07      	ldr	r3, [sp, #28]
 80164f8:	4648      	mov	r0, r9
 80164fa:	6859      	ldr	r1, [r3, #4]
 80164fc:	f001 fd36 	bl	8017f6c <_Balloc>
 8016500:	9005      	str	r0, [sp, #20]
 8016502:	2800      	cmp	r0, #0
 8016504:	f43f aef6 	beq.w	80162f4 <_strtod_l+0x43c>
 8016508:	9b07      	ldr	r3, [sp, #28]
 801650a:	691a      	ldr	r2, [r3, #16]
 801650c:	3202      	adds	r2, #2
 801650e:	f103 010c 	add.w	r1, r3, #12
 8016512:	0092      	lsls	r2, r2, #2
 8016514:	300c      	adds	r0, #12
 8016516:	f7fe fdd3 	bl	80150c0 <memcpy>
 801651a:	aa1e      	add	r2, sp, #120	; 0x78
 801651c:	a91d      	add	r1, sp, #116	; 0x74
 801651e:	ec4b ab10 	vmov	d0, sl, fp
 8016522:	4648      	mov	r0, r9
 8016524:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016528:	f002 f862 	bl	80185f0 <__d2b>
 801652c:	901c      	str	r0, [sp, #112]	; 0x70
 801652e:	2800      	cmp	r0, #0
 8016530:	f43f aee0 	beq.w	80162f4 <_strtod_l+0x43c>
 8016534:	2101      	movs	r1, #1
 8016536:	4648      	mov	r0, r9
 8016538:	f001 fe2a 	bl	8018190 <__i2b>
 801653c:	4680      	mov	r8, r0
 801653e:	2800      	cmp	r0, #0
 8016540:	f43f aed8 	beq.w	80162f4 <_strtod_l+0x43c>
 8016544:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016546:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016548:	2e00      	cmp	r6, #0
 801654a:	bfab      	itete	ge
 801654c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801654e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016550:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016552:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016554:	bfac      	ite	ge
 8016556:	18f7      	addge	r7, r6, r3
 8016558:	1b9d      	sublt	r5, r3, r6
 801655a:	9b04      	ldr	r3, [sp, #16]
 801655c:	1af6      	subs	r6, r6, r3
 801655e:	4416      	add	r6, r2
 8016560:	4b63      	ldr	r3, [pc, #396]	; (80166f0 <_strtod_l+0x838>)
 8016562:	3e01      	subs	r6, #1
 8016564:	429e      	cmp	r6, r3
 8016566:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801656a:	f280 80af 	bge.w	80166cc <_strtod_l+0x814>
 801656e:	1b9b      	subs	r3, r3, r6
 8016570:	2b1f      	cmp	r3, #31
 8016572:	eba2 0203 	sub.w	r2, r2, r3
 8016576:	f04f 0101 	mov.w	r1, #1
 801657a:	f300 809b 	bgt.w	80166b4 <_strtod_l+0x7fc>
 801657e:	fa01 f303 	lsl.w	r3, r1, r3
 8016582:	930f      	str	r3, [sp, #60]	; 0x3c
 8016584:	2300      	movs	r3, #0
 8016586:	930a      	str	r3, [sp, #40]	; 0x28
 8016588:	18be      	adds	r6, r7, r2
 801658a:	9b04      	ldr	r3, [sp, #16]
 801658c:	42b7      	cmp	r7, r6
 801658e:	4415      	add	r5, r2
 8016590:	441d      	add	r5, r3
 8016592:	463b      	mov	r3, r7
 8016594:	bfa8      	it	ge
 8016596:	4633      	movge	r3, r6
 8016598:	42ab      	cmp	r3, r5
 801659a:	bfa8      	it	ge
 801659c:	462b      	movge	r3, r5
 801659e:	2b00      	cmp	r3, #0
 80165a0:	bfc2      	ittt	gt
 80165a2:	1af6      	subgt	r6, r6, r3
 80165a4:	1aed      	subgt	r5, r5, r3
 80165a6:	1aff      	subgt	r7, r7, r3
 80165a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80165aa:	b1bb      	cbz	r3, 80165dc <_strtod_l+0x724>
 80165ac:	4641      	mov	r1, r8
 80165ae:	461a      	mov	r2, r3
 80165b0:	4648      	mov	r0, r9
 80165b2:	f001 fe8d 	bl	80182d0 <__pow5mult>
 80165b6:	4680      	mov	r8, r0
 80165b8:	2800      	cmp	r0, #0
 80165ba:	f43f ae9b 	beq.w	80162f4 <_strtod_l+0x43c>
 80165be:	4601      	mov	r1, r0
 80165c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80165c2:	4648      	mov	r0, r9
 80165c4:	f001 fded 	bl	80181a2 <__multiply>
 80165c8:	900c      	str	r0, [sp, #48]	; 0x30
 80165ca:	2800      	cmp	r0, #0
 80165cc:	f43f ae92 	beq.w	80162f4 <_strtod_l+0x43c>
 80165d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80165d2:	4648      	mov	r0, r9
 80165d4:	f001 fcfe 	bl	8017fd4 <_Bfree>
 80165d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165da:	931c      	str	r3, [sp, #112]	; 0x70
 80165dc:	2e00      	cmp	r6, #0
 80165de:	dc7a      	bgt.n	80166d6 <_strtod_l+0x81e>
 80165e0:	9b06      	ldr	r3, [sp, #24]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	dd08      	ble.n	80165f8 <_strtod_l+0x740>
 80165e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80165e8:	9905      	ldr	r1, [sp, #20]
 80165ea:	4648      	mov	r0, r9
 80165ec:	f001 fe70 	bl	80182d0 <__pow5mult>
 80165f0:	9005      	str	r0, [sp, #20]
 80165f2:	2800      	cmp	r0, #0
 80165f4:	f43f ae7e 	beq.w	80162f4 <_strtod_l+0x43c>
 80165f8:	2d00      	cmp	r5, #0
 80165fa:	dd08      	ble.n	801660e <_strtod_l+0x756>
 80165fc:	462a      	mov	r2, r5
 80165fe:	9905      	ldr	r1, [sp, #20]
 8016600:	4648      	mov	r0, r9
 8016602:	f001 feb3 	bl	801836c <__lshift>
 8016606:	9005      	str	r0, [sp, #20]
 8016608:	2800      	cmp	r0, #0
 801660a:	f43f ae73 	beq.w	80162f4 <_strtod_l+0x43c>
 801660e:	2f00      	cmp	r7, #0
 8016610:	dd08      	ble.n	8016624 <_strtod_l+0x76c>
 8016612:	4641      	mov	r1, r8
 8016614:	463a      	mov	r2, r7
 8016616:	4648      	mov	r0, r9
 8016618:	f001 fea8 	bl	801836c <__lshift>
 801661c:	4680      	mov	r8, r0
 801661e:	2800      	cmp	r0, #0
 8016620:	f43f ae68 	beq.w	80162f4 <_strtod_l+0x43c>
 8016624:	9a05      	ldr	r2, [sp, #20]
 8016626:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016628:	4648      	mov	r0, r9
 801662a:	f001 ff0d 	bl	8018448 <__mdiff>
 801662e:	4604      	mov	r4, r0
 8016630:	2800      	cmp	r0, #0
 8016632:	f43f ae5f 	beq.w	80162f4 <_strtod_l+0x43c>
 8016636:	68c3      	ldr	r3, [r0, #12]
 8016638:	930c      	str	r3, [sp, #48]	; 0x30
 801663a:	2300      	movs	r3, #0
 801663c:	60c3      	str	r3, [r0, #12]
 801663e:	4641      	mov	r1, r8
 8016640:	f001 fee8 	bl	8018414 <__mcmp>
 8016644:	2800      	cmp	r0, #0
 8016646:	da55      	bge.n	80166f4 <_strtod_l+0x83c>
 8016648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801664a:	b9e3      	cbnz	r3, 8016686 <_strtod_l+0x7ce>
 801664c:	f1ba 0f00 	cmp.w	sl, #0
 8016650:	d119      	bne.n	8016686 <_strtod_l+0x7ce>
 8016652:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016656:	b9b3      	cbnz	r3, 8016686 <_strtod_l+0x7ce>
 8016658:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801665c:	0d1b      	lsrs	r3, r3, #20
 801665e:	051b      	lsls	r3, r3, #20
 8016660:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016664:	d90f      	bls.n	8016686 <_strtod_l+0x7ce>
 8016666:	6963      	ldr	r3, [r4, #20]
 8016668:	b913      	cbnz	r3, 8016670 <_strtod_l+0x7b8>
 801666a:	6923      	ldr	r3, [r4, #16]
 801666c:	2b01      	cmp	r3, #1
 801666e:	dd0a      	ble.n	8016686 <_strtod_l+0x7ce>
 8016670:	4621      	mov	r1, r4
 8016672:	2201      	movs	r2, #1
 8016674:	4648      	mov	r0, r9
 8016676:	f001 fe79 	bl	801836c <__lshift>
 801667a:	4641      	mov	r1, r8
 801667c:	4604      	mov	r4, r0
 801667e:	f001 fec9 	bl	8018414 <__mcmp>
 8016682:	2800      	cmp	r0, #0
 8016684:	dc67      	bgt.n	8016756 <_strtod_l+0x89e>
 8016686:	9b04      	ldr	r3, [sp, #16]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d171      	bne.n	8016770 <_strtod_l+0x8b8>
 801668c:	e63d      	b.n	801630a <_strtod_l+0x452>
 801668e:	f018 0f01 	tst.w	r8, #1
 8016692:	d004      	beq.n	801669e <_strtod_l+0x7e6>
 8016694:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016698:	f7e9 ffc6 	bl	8000628 <__aeabi_dmul>
 801669c:	2301      	movs	r3, #1
 801669e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80166a2:	3508      	adds	r5, #8
 80166a4:	e6e5      	b.n	8016472 <_strtod_l+0x5ba>
 80166a6:	f04f 32ff 	mov.w	r2, #4294967295
 80166aa:	fa02 f303 	lsl.w	r3, r2, r3
 80166ae:	ea03 0a0a 	and.w	sl, r3, sl
 80166b2:	e6ff      	b.n	80164b4 <_strtod_l+0x5fc>
 80166b4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80166b8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80166bc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80166c0:	36e2      	adds	r6, #226	; 0xe2
 80166c2:	fa01 f306 	lsl.w	r3, r1, r6
 80166c6:	930a      	str	r3, [sp, #40]	; 0x28
 80166c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80166ca:	e75d      	b.n	8016588 <_strtod_l+0x6d0>
 80166cc:	2300      	movs	r3, #0
 80166ce:	930a      	str	r3, [sp, #40]	; 0x28
 80166d0:	2301      	movs	r3, #1
 80166d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80166d4:	e758      	b.n	8016588 <_strtod_l+0x6d0>
 80166d6:	4632      	mov	r2, r6
 80166d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80166da:	4648      	mov	r0, r9
 80166dc:	f001 fe46 	bl	801836c <__lshift>
 80166e0:	901c      	str	r0, [sp, #112]	; 0x70
 80166e2:	2800      	cmp	r0, #0
 80166e4:	f47f af7c 	bne.w	80165e0 <_strtod_l+0x728>
 80166e8:	e604      	b.n	80162f4 <_strtod_l+0x43c>
 80166ea:	bf00      	nop
 80166ec:	08019db0 	.word	0x08019db0
 80166f0:	fffffc02 	.word	0xfffffc02
 80166f4:	465d      	mov	r5, fp
 80166f6:	f040 8086 	bne.w	8016806 <_strtod_l+0x94e>
 80166fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80166fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016700:	b32a      	cbz	r2, 801674e <_strtod_l+0x896>
 8016702:	4aaf      	ldr	r2, [pc, #700]	; (80169c0 <_strtod_l+0xb08>)
 8016704:	4293      	cmp	r3, r2
 8016706:	d153      	bne.n	80167b0 <_strtod_l+0x8f8>
 8016708:	9b04      	ldr	r3, [sp, #16]
 801670a:	4650      	mov	r0, sl
 801670c:	b1d3      	cbz	r3, 8016744 <_strtod_l+0x88c>
 801670e:	4aad      	ldr	r2, [pc, #692]	; (80169c4 <_strtod_l+0xb0c>)
 8016710:	402a      	ands	r2, r5
 8016712:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016716:	f04f 31ff 	mov.w	r1, #4294967295
 801671a:	d816      	bhi.n	801674a <_strtod_l+0x892>
 801671c:	0d12      	lsrs	r2, r2, #20
 801671e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016722:	fa01 f303 	lsl.w	r3, r1, r3
 8016726:	4298      	cmp	r0, r3
 8016728:	d142      	bne.n	80167b0 <_strtod_l+0x8f8>
 801672a:	4ba7      	ldr	r3, [pc, #668]	; (80169c8 <_strtod_l+0xb10>)
 801672c:	429d      	cmp	r5, r3
 801672e:	d102      	bne.n	8016736 <_strtod_l+0x87e>
 8016730:	3001      	adds	r0, #1
 8016732:	f43f addf 	beq.w	80162f4 <_strtod_l+0x43c>
 8016736:	4ba3      	ldr	r3, [pc, #652]	; (80169c4 <_strtod_l+0xb0c>)
 8016738:	402b      	ands	r3, r5
 801673a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801673e:	f04f 0a00 	mov.w	sl, #0
 8016742:	e7a0      	b.n	8016686 <_strtod_l+0x7ce>
 8016744:	f04f 33ff 	mov.w	r3, #4294967295
 8016748:	e7ed      	b.n	8016726 <_strtod_l+0x86e>
 801674a:	460b      	mov	r3, r1
 801674c:	e7eb      	b.n	8016726 <_strtod_l+0x86e>
 801674e:	bb7b      	cbnz	r3, 80167b0 <_strtod_l+0x8f8>
 8016750:	f1ba 0f00 	cmp.w	sl, #0
 8016754:	d12c      	bne.n	80167b0 <_strtod_l+0x8f8>
 8016756:	9904      	ldr	r1, [sp, #16]
 8016758:	4a9a      	ldr	r2, [pc, #616]	; (80169c4 <_strtod_l+0xb0c>)
 801675a:	465b      	mov	r3, fp
 801675c:	b1f1      	cbz	r1, 801679c <_strtod_l+0x8e4>
 801675e:	ea02 010b 	and.w	r1, r2, fp
 8016762:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016766:	dc19      	bgt.n	801679c <_strtod_l+0x8e4>
 8016768:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801676c:	f77f ae5b 	ble.w	8016426 <_strtod_l+0x56e>
 8016770:	4a96      	ldr	r2, [pc, #600]	; (80169cc <_strtod_l+0xb14>)
 8016772:	2300      	movs	r3, #0
 8016774:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016778:	4650      	mov	r0, sl
 801677a:	4659      	mov	r1, fp
 801677c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016780:	f7e9 ff52 	bl	8000628 <__aeabi_dmul>
 8016784:	4682      	mov	sl, r0
 8016786:	468b      	mov	fp, r1
 8016788:	2900      	cmp	r1, #0
 801678a:	f47f adbe 	bne.w	801630a <_strtod_l+0x452>
 801678e:	2800      	cmp	r0, #0
 8016790:	f47f adbb 	bne.w	801630a <_strtod_l+0x452>
 8016794:	2322      	movs	r3, #34	; 0x22
 8016796:	f8c9 3000 	str.w	r3, [r9]
 801679a:	e5b6      	b.n	801630a <_strtod_l+0x452>
 801679c:	4013      	ands	r3, r2
 801679e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80167a2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80167a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80167aa:	f04f 3aff 	mov.w	sl, #4294967295
 80167ae:	e76a      	b.n	8016686 <_strtod_l+0x7ce>
 80167b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80167b2:	b193      	cbz	r3, 80167da <_strtod_l+0x922>
 80167b4:	422b      	tst	r3, r5
 80167b6:	f43f af66 	beq.w	8016686 <_strtod_l+0x7ce>
 80167ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167bc:	9a04      	ldr	r2, [sp, #16]
 80167be:	4650      	mov	r0, sl
 80167c0:	4659      	mov	r1, fp
 80167c2:	b173      	cbz	r3, 80167e2 <_strtod_l+0x92a>
 80167c4:	f7ff fb5c 	bl	8015e80 <sulp>
 80167c8:	4602      	mov	r2, r0
 80167ca:	460b      	mov	r3, r1
 80167cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80167d0:	f7e9 fd74 	bl	80002bc <__adddf3>
 80167d4:	4682      	mov	sl, r0
 80167d6:	468b      	mov	fp, r1
 80167d8:	e755      	b.n	8016686 <_strtod_l+0x7ce>
 80167da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80167dc:	ea13 0f0a 	tst.w	r3, sl
 80167e0:	e7e9      	b.n	80167b6 <_strtod_l+0x8fe>
 80167e2:	f7ff fb4d 	bl	8015e80 <sulp>
 80167e6:	4602      	mov	r2, r0
 80167e8:	460b      	mov	r3, r1
 80167ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80167ee:	f7e9 fd63 	bl	80002b8 <__aeabi_dsub>
 80167f2:	2200      	movs	r2, #0
 80167f4:	2300      	movs	r3, #0
 80167f6:	4682      	mov	sl, r0
 80167f8:	468b      	mov	fp, r1
 80167fa:	f7ea f97d 	bl	8000af8 <__aeabi_dcmpeq>
 80167fe:	2800      	cmp	r0, #0
 8016800:	f47f ae11 	bne.w	8016426 <_strtod_l+0x56e>
 8016804:	e73f      	b.n	8016686 <_strtod_l+0x7ce>
 8016806:	4641      	mov	r1, r8
 8016808:	4620      	mov	r0, r4
 801680a:	f001 ff40 	bl	801868e <__ratio>
 801680e:	ec57 6b10 	vmov	r6, r7, d0
 8016812:	2200      	movs	r2, #0
 8016814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016818:	ee10 0a10 	vmov	r0, s0
 801681c:	4639      	mov	r1, r7
 801681e:	f7ea f97f 	bl	8000b20 <__aeabi_dcmple>
 8016822:	2800      	cmp	r0, #0
 8016824:	d077      	beq.n	8016916 <_strtod_l+0xa5e>
 8016826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016828:	2b00      	cmp	r3, #0
 801682a:	d04a      	beq.n	80168c2 <_strtod_l+0xa0a>
 801682c:	4b68      	ldr	r3, [pc, #416]	; (80169d0 <_strtod_l+0xb18>)
 801682e:	2200      	movs	r2, #0
 8016830:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016834:	4f66      	ldr	r7, [pc, #408]	; (80169d0 <_strtod_l+0xb18>)
 8016836:	2600      	movs	r6, #0
 8016838:	4b62      	ldr	r3, [pc, #392]	; (80169c4 <_strtod_l+0xb0c>)
 801683a:	402b      	ands	r3, r5
 801683c:	930f      	str	r3, [sp, #60]	; 0x3c
 801683e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016840:	4b64      	ldr	r3, [pc, #400]	; (80169d4 <_strtod_l+0xb1c>)
 8016842:	429a      	cmp	r2, r3
 8016844:	f040 80ce 	bne.w	80169e4 <_strtod_l+0xb2c>
 8016848:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801684c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016850:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016854:	ec4b ab10 	vmov	d0, sl, fp
 8016858:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801685c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016860:	f001 fe50 	bl	8018504 <__ulp>
 8016864:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016868:	ec53 2b10 	vmov	r2, r3, d0
 801686c:	f7e9 fedc 	bl	8000628 <__aeabi_dmul>
 8016870:	4652      	mov	r2, sl
 8016872:	465b      	mov	r3, fp
 8016874:	f7e9 fd22 	bl	80002bc <__adddf3>
 8016878:	460b      	mov	r3, r1
 801687a:	4952      	ldr	r1, [pc, #328]	; (80169c4 <_strtod_l+0xb0c>)
 801687c:	4a56      	ldr	r2, [pc, #344]	; (80169d8 <_strtod_l+0xb20>)
 801687e:	4019      	ands	r1, r3
 8016880:	4291      	cmp	r1, r2
 8016882:	4682      	mov	sl, r0
 8016884:	d95b      	bls.n	801693e <_strtod_l+0xa86>
 8016886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016888:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801688c:	4293      	cmp	r3, r2
 801688e:	d103      	bne.n	8016898 <_strtod_l+0x9e0>
 8016890:	9b08      	ldr	r3, [sp, #32]
 8016892:	3301      	adds	r3, #1
 8016894:	f43f ad2e 	beq.w	80162f4 <_strtod_l+0x43c>
 8016898:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80169c8 <_strtod_l+0xb10>
 801689c:	f04f 3aff 	mov.w	sl, #4294967295
 80168a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80168a2:	4648      	mov	r0, r9
 80168a4:	f001 fb96 	bl	8017fd4 <_Bfree>
 80168a8:	9905      	ldr	r1, [sp, #20]
 80168aa:	4648      	mov	r0, r9
 80168ac:	f001 fb92 	bl	8017fd4 <_Bfree>
 80168b0:	4641      	mov	r1, r8
 80168b2:	4648      	mov	r0, r9
 80168b4:	f001 fb8e 	bl	8017fd4 <_Bfree>
 80168b8:	4621      	mov	r1, r4
 80168ba:	4648      	mov	r0, r9
 80168bc:	f001 fb8a 	bl	8017fd4 <_Bfree>
 80168c0:	e619      	b.n	80164f6 <_strtod_l+0x63e>
 80168c2:	f1ba 0f00 	cmp.w	sl, #0
 80168c6:	d11a      	bne.n	80168fe <_strtod_l+0xa46>
 80168c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168cc:	b9eb      	cbnz	r3, 801690a <_strtod_l+0xa52>
 80168ce:	2200      	movs	r2, #0
 80168d0:	4b3f      	ldr	r3, [pc, #252]	; (80169d0 <_strtod_l+0xb18>)
 80168d2:	4630      	mov	r0, r6
 80168d4:	4639      	mov	r1, r7
 80168d6:	f7ea f919 	bl	8000b0c <__aeabi_dcmplt>
 80168da:	b9c8      	cbnz	r0, 8016910 <_strtod_l+0xa58>
 80168dc:	4630      	mov	r0, r6
 80168de:	4639      	mov	r1, r7
 80168e0:	2200      	movs	r2, #0
 80168e2:	4b3e      	ldr	r3, [pc, #248]	; (80169dc <_strtod_l+0xb24>)
 80168e4:	f7e9 fea0 	bl	8000628 <__aeabi_dmul>
 80168e8:	4606      	mov	r6, r0
 80168ea:	460f      	mov	r7, r1
 80168ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80168f0:	9618      	str	r6, [sp, #96]	; 0x60
 80168f2:	9319      	str	r3, [sp, #100]	; 0x64
 80168f4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80168f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80168fc:	e79c      	b.n	8016838 <_strtod_l+0x980>
 80168fe:	f1ba 0f01 	cmp.w	sl, #1
 8016902:	d102      	bne.n	801690a <_strtod_l+0xa52>
 8016904:	2d00      	cmp	r5, #0
 8016906:	f43f ad8e 	beq.w	8016426 <_strtod_l+0x56e>
 801690a:	2200      	movs	r2, #0
 801690c:	4b34      	ldr	r3, [pc, #208]	; (80169e0 <_strtod_l+0xb28>)
 801690e:	e78f      	b.n	8016830 <_strtod_l+0x978>
 8016910:	2600      	movs	r6, #0
 8016912:	4f32      	ldr	r7, [pc, #200]	; (80169dc <_strtod_l+0xb24>)
 8016914:	e7ea      	b.n	80168ec <_strtod_l+0xa34>
 8016916:	4b31      	ldr	r3, [pc, #196]	; (80169dc <_strtod_l+0xb24>)
 8016918:	4630      	mov	r0, r6
 801691a:	4639      	mov	r1, r7
 801691c:	2200      	movs	r2, #0
 801691e:	f7e9 fe83 	bl	8000628 <__aeabi_dmul>
 8016922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016924:	4606      	mov	r6, r0
 8016926:	460f      	mov	r7, r1
 8016928:	b933      	cbnz	r3, 8016938 <_strtod_l+0xa80>
 801692a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801692e:	9010      	str	r0, [sp, #64]	; 0x40
 8016930:	9311      	str	r3, [sp, #68]	; 0x44
 8016932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016936:	e7df      	b.n	80168f8 <_strtod_l+0xa40>
 8016938:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801693c:	e7f9      	b.n	8016932 <_strtod_l+0xa7a>
 801693e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016942:	9b04      	ldr	r3, [sp, #16]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d1ab      	bne.n	80168a0 <_strtod_l+0x9e8>
 8016948:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801694c:	0d1b      	lsrs	r3, r3, #20
 801694e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016950:	051b      	lsls	r3, r3, #20
 8016952:	429a      	cmp	r2, r3
 8016954:	465d      	mov	r5, fp
 8016956:	d1a3      	bne.n	80168a0 <_strtod_l+0x9e8>
 8016958:	4639      	mov	r1, r7
 801695a:	4630      	mov	r0, r6
 801695c:	f7ea f914 	bl	8000b88 <__aeabi_d2iz>
 8016960:	f7e9 fdf8 	bl	8000554 <__aeabi_i2d>
 8016964:	460b      	mov	r3, r1
 8016966:	4602      	mov	r2, r0
 8016968:	4639      	mov	r1, r7
 801696a:	4630      	mov	r0, r6
 801696c:	f7e9 fca4 	bl	80002b8 <__aeabi_dsub>
 8016970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016972:	4606      	mov	r6, r0
 8016974:	460f      	mov	r7, r1
 8016976:	b933      	cbnz	r3, 8016986 <_strtod_l+0xace>
 8016978:	f1ba 0f00 	cmp.w	sl, #0
 801697c:	d103      	bne.n	8016986 <_strtod_l+0xace>
 801697e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016982:	2d00      	cmp	r5, #0
 8016984:	d06d      	beq.n	8016a62 <_strtod_l+0xbaa>
 8016986:	a30a      	add	r3, pc, #40	; (adr r3, 80169b0 <_strtod_l+0xaf8>)
 8016988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801698c:	4630      	mov	r0, r6
 801698e:	4639      	mov	r1, r7
 8016990:	f7ea f8bc 	bl	8000b0c <__aeabi_dcmplt>
 8016994:	2800      	cmp	r0, #0
 8016996:	f47f acb8 	bne.w	801630a <_strtod_l+0x452>
 801699a:	a307      	add	r3, pc, #28	; (adr r3, 80169b8 <_strtod_l+0xb00>)
 801699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a0:	4630      	mov	r0, r6
 80169a2:	4639      	mov	r1, r7
 80169a4:	f7ea f8d0 	bl	8000b48 <__aeabi_dcmpgt>
 80169a8:	2800      	cmp	r0, #0
 80169aa:	f43f af79 	beq.w	80168a0 <_strtod_l+0x9e8>
 80169ae:	e4ac      	b.n	801630a <_strtod_l+0x452>
 80169b0:	94a03595 	.word	0x94a03595
 80169b4:	3fdfffff 	.word	0x3fdfffff
 80169b8:	35afe535 	.word	0x35afe535
 80169bc:	3fe00000 	.word	0x3fe00000
 80169c0:	000fffff 	.word	0x000fffff
 80169c4:	7ff00000 	.word	0x7ff00000
 80169c8:	7fefffff 	.word	0x7fefffff
 80169cc:	39500000 	.word	0x39500000
 80169d0:	3ff00000 	.word	0x3ff00000
 80169d4:	7fe00000 	.word	0x7fe00000
 80169d8:	7c9fffff 	.word	0x7c9fffff
 80169dc:	3fe00000 	.word	0x3fe00000
 80169e0:	bff00000 	.word	0xbff00000
 80169e4:	9b04      	ldr	r3, [sp, #16]
 80169e6:	b333      	cbz	r3, 8016a36 <_strtod_l+0xb7e>
 80169e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80169ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80169ee:	d822      	bhi.n	8016a36 <_strtod_l+0xb7e>
 80169f0:	a327      	add	r3, pc, #156	; (adr r3, 8016a90 <_strtod_l+0xbd8>)
 80169f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169f6:	4630      	mov	r0, r6
 80169f8:	4639      	mov	r1, r7
 80169fa:	f7ea f891 	bl	8000b20 <__aeabi_dcmple>
 80169fe:	b1a0      	cbz	r0, 8016a2a <_strtod_l+0xb72>
 8016a00:	4639      	mov	r1, r7
 8016a02:	4630      	mov	r0, r6
 8016a04:	f7ea f8e8 	bl	8000bd8 <__aeabi_d2uiz>
 8016a08:	2800      	cmp	r0, #0
 8016a0a:	bf08      	it	eq
 8016a0c:	2001      	moveq	r0, #1
 8016a0e:	f7e9 fd91 	bl	8000534 <__aeabi_ui2d>
 8016a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a14:	4606      	mov	r6, r0
 8016a16:	460f      	mov	r7, r1
 8016a18:	bb03      	cbnz	r3, 8016a5c <_strtod_l+0xba4>
 8016a1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016a1e:	9012      	str	r0, [sp, #72]	; 0x48
 8016a20:	9313      	str	r3, [sp, #76]	; 0x4c
 8016a22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016a26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a2e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016a32:	1a9b      	subs	r3, r3, r2
 8016a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a36:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016a3a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016a3e:	f001 fd61 	bl	8018504 <__ulp>
 8016a42:	4650      	mov	r0, sl
 8016a44:	ec53 2b10 	vmov	r2, r3, d0
 8016a48:	4659      	mov	r1, fp
 8016a4a:	f7e9 fded 	bl	8000628 <__aeabi_dmul>
 8016a4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016a52:	f7e9 fc33 	bl	80002bc <__adddf3>
 8016a56:	4682      	mov	sl, r0
 8016a58:	468b      	mov	fp, r1
 8016a5a:	e772      	b.n	8016942 <_strtod_l+0xa8a>
 8016a5c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016a60:	e7df      	b.n	8016a22 <_strtod_l+0xb6a>
 8016a62:	a30d      	add	r3, pc, #52	; (adr r3, 8016a98 <_strtod_l+0xbe0>)
 8016a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a68:	f7ea f850 	bl	8000b0c <__aeabi_dcmplt>
 8016a6c:	e79c      	b.n	80169a8 <_strtod_l+0xaf0>
 8016a6e:	2300      	movs	r3, #0
 8016a70:	930d      	str	r3, [sp, #52]	; 0x34
 8016a72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016a74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a76:	6013      	str	r3, [r2, #0]
 8016a78:	f7ff ba61 	b.w	8015f3e <_strtod_l+0x86>
 8016a7c:	2b65      	cmp	r3, #101	; 0x65
 8016a7e:	f04f 0200 	mov.w	r2, #0
 8016a82:	f43f ab4e 	beq.w	8016122 <_strtod_l+0x26a>
 8016a86:	2101      	movs	r1, #1
 8016a88:	4614      	mov	r4, r2
 8016a8a:	9104      	str	r1, [sp, #16]
 8016a8c:	f7ff bacb 	b.w	8016026 <_strtod_l+0x16e>
 8016a90:	ffc00000 	.word	0xffc00000
 8016a94:	41dfffff 	.word	0x41dfffff
 8016a98:	94a03595 	.word	0x94a03595
 8016a9c:	3fcfffff 	.word	0x3fcfffff

08016aa0 <_strtod_r>:
 8016aa0:	4b05      	ldr	r3, [pc, #20]	; (8016ab8 <_strtod_r+0x18>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	b410      	push	{r4}
 8016aa6:	6a1b      	ldr	r3, [r3, #32]
 8016aa8:	4c04      	ldr	r4, [pc, #16]	; (8016abc <_strtod_r+0x1c>)
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	bf08      	it	eq
 8016aae:	4623      	moveq	r3, r4
 8016ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ab4:	f7ff ba00 	b.w	8015eb8 <_strtod_l>
 8016ab8:	2000000c 	.word	0x2000000c
 8016abc:	20000070 	.word	0x20000070

08016ac0 <_strtol_l.isra.0>:
 8016ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ac4:	4680      	mov	r8, r0
 8016ac6:	4689      	mov	r9, r1
 8016ac8:	4692      	mov	sl, r2
 8016aca:	461e      	mov	r6, r3
 8016acc:	460f      	mov	r7, r1
 8016ace:	463d      	mov	r5, r7
 8016ad0:	9808      	ldr	r0, [sp, #32]
 8016ad2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ad6:	f001 fa0d 	bl	8017ef4 <__locale_ctype_ptr_l>
 8016ada:	4420      	add	r0, r4
 8016adc:	7843      	ldrb	r3, [r0, #1]
 8016ade:	f013 0308 	ands.w	r3, r3, #8
 8016ae2:	d132      	bne.n	8016b4a <_strtol_l.isra.0+0x8a>
 8016ae4:	2c2d      	cmp	r4, #45	; 0x2d
 8016ae6:	d132      	bne.n	8016b4e <_strtol_l.isra.0+0x8e>
 8016ae8:	787c      	ldrb	r4, [r7, #1]
 8016aea:	1cbd      	adds	r5, r7, #2
 8016aec:	2201      	movs	r2, #1
 8016aee:	2e00      	cmp	r6, #0
 8016af0:	d05d      	beq.n	8016bae <_strtol_l.isra.0+0xee>
 8016af2:	2e10      	cmp	r6, #16
 8016af4:	d109      	bne.n	8016b0a <_strtol_l.isra.0+0x4a>
 8016af6:	2c30      	cmp	r4, #48	; 0x30
 8016af8:	d107      	bne.n	8016b0a <_strtol_l.isra.0+0x4a>
 8016afa:	782b      	ldrb	r3, [r5, #0]
 8016afc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016b00:	2b58      	cmp	r3, #88	; 0x58
 8016b02:	d14f      	bne.n	8016ba4 <_strtol_l.isra.0+0xe4>
 8016b04:	786c      	ldrb	r4, [r5, #1]
 8016b06:	2610      	movs	r6, #16
 8016b08:	3502      	adds	r5, #2
 8016b0a:	2a00      	cmp	r2, #0
 8016b0c:	bf14      	ite	ne
 8016b0e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016b12:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016b16:	2700      	movs	r7, #0
 8016b18:	fbb1 fcf6 	udiv	ip, r1, r6
 8016b1c:	4638      	mov	r0, r7
 8016b1e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016b22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016b26:	2b09      	cmp	r3, #9
 8016b28:	d817      	bhi.n	8016b5a <_strtol_l.isra.0+0x9a>
 8016b2a:	461c      	mov	r4, r3
 8016b2c:	42a6      	cmp	r6, r4
 8016b2e:	dd23      	ble.n	8016b78 <_strtol_l.isra.0+0xb8>
 8016b30:	1c7b      	adds	r3, r7, #1
 8016b32:	d007      	beq.n	8016b44 <_strtol_l.isra.0+0x84>
 8016b34:	4584      	cmp	ip, r0
 8016b36:	d31c      	bcc.n	8016b72 <_strtol_l.isra.0+0xb2>
 8016b38:	d101      	bne.n	8016b3e <_strtol_l.isra.0+0x7e>
 8016b3a:	45a6      	cmp	lr, r4
 8016b3c:	db19      	blt.n	8016b72 <_strtol_l.isra.0+0xb2>
 8016b3e:	fb00 4006 	mla	r0, r0, r6, r4
 8016b42:	2701      	movs	r7, #1
 8016b44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b48:	e7eb      	b.n	8016b22 <_strtol_l.isra.0+0x62>
 8016b4a:	462f      	mov	r7, r5
 8016b4c:	e7bf      	b.n	8016ace <_strtol_l.isra.0+0xe>
 8016b4e:	2c2b      	cmp	r4, #43	; 0x2b
 8016b50:	bf04      	itt	eq
 8016b52:	1cbd      	addeq	r5, r7, #2
 8016b54:	787c      	ldrbeq	r4, [r7, #1]
 8016b56:	461a      	mov	r2, r3
 8016b58:	e7c9      	b.n	8016aee <_strtol_l.isra.0+0x2e>
 8016b5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016b5e:	2b19      	cmp	r3, #25
 8016b60:	d801      	bhi.n	8016b66 <_strtol_l.isra.0+0xa6>
 8016b62:	3c37      	subs	r4, #55	; 0x37
 8016b64:	e7e2      	b.n	8016b2c <_strtol_l.isra.0+0x6c>
 8016b66:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016b6a:	2b19      	cmp	r3, #25
 8016b6c:	d804      	bhi.n	8016b78 <_strtol_l.isra.0+0xb8>
 8016b6e:	3c57      	subs	r4, #87	; 0x57
 8016b70:	e7dc      	b.n	8016b2c <_strtol_l.isra.0+0x6c>
 8016b72:	f04f 37ff 	mov.w	r7, #4294967295
 8016b76:	e7e5      	b.n	8016b44 <_strtol_l.isra.0+0x84>
 8016b78:	1c7b      	adds	r3, r7, #1
 8016b7a:	d108      	bne.n	8016b8e <_strtol_l.isra.0+0xce>
 8016b7c:	2322      	movs	r3, #34	; 0x22
 8016b7e:	f8c8 3000 	str.w	r3, [r8]
 8016b82:	4608      	mov	r0, r1
 8016b84:	f1ba 0f00 	cmp.w	sl, #0
 8016b88:	d107      	bne.n	8016b9a <_strtol_l.isra.0+0xda>
 8016b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b8e:	b102      	cbz	r2, 8016b92 <_strtol_l.isra.0+0xd2>
 8016b90:	4240      	negs	r0, r0
 8016b92:	f1ba 0f00 	cmp.w	sl, #0
 8016b96:	d0f8      	beq.n	8016b8a <_strtol_l.isra.0+0xca>
 8016b98:	b10f      	cbz	r7, 8016b9e <_strtol_l.isra.0+0xde>
 8016b9a:	f105 39ff 	add.w	r9, r5, #4294967295
 8016b9e:	f8ca 9000 	str.w	r9, [sl]
 8016ba2:	e7f2      	b.n	8016b8a <_strtol_l.isra.0+0xca>
 8016ba4:	2430      	movs	r4, #48	; 0x30
 8016ba6:	2e00      	cmp	r6, #0
 8016ba8:	d1af      	bne.n	8016b0a <_strtol_l.isra.0+0x4a>
 8016baa:	2608      	movs	r6, #8
 8016bac:	e7ad      	b.n	8016b0a <_strtol_l.isra.0+0x4a>
 8016bae:	2c30      	cmp	r4, #48	; 0x30
 8016bb0:	d0a3      	beq.n	8016afa <_strtol_l.isra.0+0x3a>
 8016bb2:	260a      	movs	r6, #10
 8016bb4:	e7a9      	b.n	8016b0a <_strtol_l.isra.0+0x4a>
	...

08016bb8 <_strtol_r>:
 8016bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016bba:	4c06      	ldr	r4, [pc, #24]	; (8016bd4 <_strtol_r+0x1c>)
 8016bbc:	4d06      	ldr	r5, [pc, #24]	; (8016bd8 <_strtol_r+0x20>)
 8016bbe:	6824      	ldr	r4, [r4, #0]
 8016bc0:	6a24      	ldr	r4, [r4, #32]
 8016bc2:	2c00      	cmp	r4, #0
 8016bc4:	bf08      	it	eq
 8016bc6:	462c      	moveq	r4, r5
 8016bc8:	9400      	str	r4, [sp, #0]
 8016bca:	f7ff ff79 	bl	8016ac0 <_strtol_l.isra.0>
 8016bce:	b003      	add	sp, #12
 8016bd0:	bd30      	pop	{r4, r5, pc}
 8016bd2:	bf00      	nop
 8016bd4:	2000000c 	.word	0x2000000c
 8016bd8:	20000070 	.word	0x20000070

08016bdc <_vsiprintf_r>:
 8016bdc:	b500      	push	{lr}
 8016bde:	b09b      	sub	sp, #108	; 0x6c
 8016be0:	9100      	str	r1, [sp, #0]
 8016be2:	9104      	str	r1, [sp, #16]
 8016be4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016be8:	9105      	str	r1, [sp, #20]
 8016bea:	9102      	str	r1, [sp, #8]
 8016bec:	4905      	ldr	r1, [pc, #20]	; (8016c04 <_vsiprintf_r+0x28>)
 8016bee:	9103      	str	r1, [sp, #12]
 8016bf0:	4669      	mov	r1, sp
 8016bf2:	f001 fecb 	bl	801898c <_svfiprintf_r>
 8016bf6:	9b00      	ldr	r3, [sp, #0]
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	701a      	strb	r2, [r3, #0]
 8016bfc:	b01b      	add	sp, #108	; 0x6c
 8016bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8016c02:	bf00      	nop
 8016c04:	ffff0208 	.word	0xffff0208

08016c08 <vsiprintf>:
 8016c08:	4613      	mov	r3, r2
 8016c0a:	460a      	mov	r2, r1
 8016c0c:	4601      	mov	r1, r0
 8016c0e:	4802      	ldr	r0, [pc, #8]	; (8016c18 <vsiprintf+0x10>)
 8016c10:	6800      	ldr	r0, [r0, #0]
 8016c12:	f7ff bfe3 	b.w	8016bdc <_vsiprintf_r>
 8016c16:	bf00      	nop
 8016c18:	2000000c 	.word	0x2000000c

08016c1c <quorem>:
 8016c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c20:	6903      	ldr	r3, [r0, #16]
 8016c22:	690c      	ldr	r4, [r1, #16]
 8016c24:	42a3      	cmp	r3, r4
 8016c26:	4680      	mov	r8, r0
 8016c28:	f2c0 8082 	blt.w	8016d30 <quorem+0x114>
 8016c2c:	3c01      	subs	r4, #1
 8016c2e:	f101 0714 	add.w	r7, r1, #20
 8016c32:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016c36:	f100 0614 	add.w	r6, r0, #20
 8016c3a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016c3e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016c42:	eb06 030c 	add.w	r3, r6, ip
 8016c46:	3501      	adds	r5, #1
 8016c48:	eb07 090c 	add.w	r9, r7, ip
 8016c4c:	9301      	str	r3, [sp, #4]
 8016c4e:	fbb0 f5f5 	udiv	r5, r0, r5
 8016c52:	b395      	cbz	r5, 8016cba <quorem+0x9e>
 8016c54:	f04f 0a00 	mov.w	sl, #0
 8016c58:	4638      	mov	r0, r7
 8016c5a:	46b6      	mov	lr, r6
 8016c5c:	46d3      	mov	fp, sl
 8016c5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8016c62:	b293      	uxth	r3, r2
 8016c64:	fb05 a303 	mla	r3, r5, r3, sl
 8016c68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016c6c:	b29b      	uxth	r3, r3
 8016c6e:	ebab 0303 	sub.w	r3, fp, r3
 8016c72:	0c12      	lsrs	r2, r2, #16
 8016c74:	f8de b000 	ldr.w	fp, [lr]
 8016c78:	fb05 a202 	mla	r2, r5, r2, sl
 8016c7c:	fa13 f38b 	uxtah	r3, r3, fp
 8016c80:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016c84:	fa1f fb82 	uxth.w	fp, r2
 8016c88:	f8de 2000 	ldr.w	r2, [lr]
 8016c8c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016c90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016c94:	b29b      	uxth	r3, r3
 8016c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016c9a:	4581      	cmp	r9, r0
 8016c9c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016ca0:	f84e 3b04 	str.w	r3, [lr], #4
 8016ca4:	d2db      	bcs.n	8016c5e <quorem+0x42>
 8016ca6:	f856 300c 	ldr.w	r3, [r6, ip]
 8016caa:	b933      	cbnz	r3, 8016cba <quorem+0x9e>
 8016cac:	9b01      	ldr	r3, [sp, #4]
 8016cae:	3b04      	subs	r3, #4
 8016cb0:	429e      	cmp	r6, r3
 8016cb2:	461a      	mov	r2, r3
 8016cb4:	d330      	bcc.n	8016d18 <quorem+0xfc>
 8016cb6:	f8c8 4010 	str.w	r4, [r8, #16]
 8016cba:	4640      	mov	r0, r8
 8016cbc:	f001 fbaa 	bl	8018414 <__mcmp>
 8016cc0:	2800      	cmp	r0, #0
 8016cc2:	db25      	blt.n	8016d10 <quorem+0xf4>
 8016cc4:	3501      	adds	r5, #1
 8016cc6:	4630      	mov	r0, r6
 8016cc8:	f04f 0c00 	mov.w	ip, #0
 8016ccc:	f857 2b04 	ldr.w	r2, [r7], #4
 8016cd0:	f8d0 e000 	ldr.w	lr, [r0]
 8016cd4:	b293      	uxth	r3, r2
 8016cd6:	ebac 0303 	sub.w	r3, ip, r3
 8016cda:	0c12      	lsrs	r2, r2, #16
 8016cdc:	fa13 f38e 	uxtah	r3, r3, lr
 8016ce0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016ce4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016ce8:	b29b      	uxth	r3, r3
 8016cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016cee:	45b9      	cmp	r9, r7
 8016cf0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016cf4:	f840 3b04 	str.w	r3, [r0], #4
 8016cf8:	d2e8      	bcs.n	8016ccc <quorem+0xb0>
 8016cfa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016cfe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016d02:	b92a      	cbnz	r2, 8016d10 <quorem+0xf4>
 8016d04:	3b04      	subs	r3, #4
 8016d06:	429e      	cmp	r6, r3
 8016d08:	461a      	mov	r2, r3
 8016d0a:	d30b      	bcc.n	8016d24 <quorem+0x108>
 8016d0c:	f8c8 4010 	str.w	r4, [r8, #16]
 8016d10:	4628      	mov	r0, r5
 8016d12:	b003      	add	sp, #12
 8016d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d18:	6812      	ldr	r2, [r2, #0]
 8016d1a:	3b04      	subs	r3, #4
 8016d1c:	2a00      	cmp	r2, #0
 8016d1e:	d1ca      	bne.n	8016cb6 <quorem+0x9a>
 8016d20:	3c01      	subs	r4, #1
 8016d22:	e7c5      	b.n	8016cb0 <quorem+0x94>
 8016d24:	6812      	ldr	r2, [r2, #0]
 8016d26:	3b04      	subs	r3, #4
 8016d28:	2a00      	cmp	r2, #0
 8016d2a:	d1ef      	bne.n	8016d0c <quorem+0xf0>
 8016d2c:	3c01      	subs	r4, #1
 8016d2e:	e7ea      	b.n	8016d06 <quorem+0xea>
 8016d30:	2000      	movs	r0, #0
 8016d32:	e7ee      	b.n	8016d12 <quorem+0xf6>
 8016d34:	0000      	movs	r0, r0
	...

08016d38 <_dtoa_r>:
 8016d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d3c:	ec57 6b10 	vmov	r6, r7, d0
 8016d40:	b097      	sub	sp, #92	; 0x5c
 8016d42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016d44:	9106      	str	r1, [sp, #24]
 8016d46:	4604      	mov	r4, r0
 8016d48:	920b      	str	r2, [sp, #44]	; 0x2c
 8016d4a:	9312      	str	r3, [sp, #72]	; 0x48
 8016d4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016d50:	e9cd 6700 	strd	r6, r7, [sp]
 8016d54:	b93d      	cbnz	r5, 8016d66 <_dtoa_r+0x2e>
 8016d56:	2010      	movs	r0, #16
 8016d58:	f001 f8ee 	bl	8017f38 <malloc>
 8016d5c:	6260      	str	r0, [r4, #36]	; 0x24
 8016d5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016d62:	6005      	str	r5, [r0, #0]
 8016d64:	60c5      	str	r5, [r0, #12]
 8016d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d68:	6819      	ldr	r1, [r3, #0]
 8016d6a:	b151      	cbz	r1, 8016d82 <_dtoa_r+0x4a>
 8016d6c:	685a      	ldr	r2, [r3, #4]
 8016d6e:	604a      	str	r2, [r1, #4]
 8016d70:	2301      	movs	r3, #1
 8016d72:	4093      	lsls	r3, r2
 8016d74:	608b      	str	r3, [r1, #8]
 8016d76:	4620      	mov	r0, r4
 8016d78:	f001 f92c 	bl	8017fd4 <_Bfree>
 8016d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d7e:	2200      	movs	r2, #0
 8016d80:	601a      	str	r2, [r3, #0]
 8016d82:	1e3b      	subs	r3, r7, #0
 8016d84:	bfbb      	ittet	lt
 8016d86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016d8a:	9301      	strlt	r3, [sp, #4]
 8016d8c:	2300      	movge	r3, #0
 8016d8e:	2201      	movlt	r2, #1
 8016d90:	bfac      	ite	ge
 8016d92:	f8c8 3000 	strge.w	r3, [r8]
 8016d96:	f8c8 2000 	strlt.w	r2, [r8]
 8016d9a:	4baf      	ldr	r3, [pc, #700]	; (8017058 <_dtoa_r+0x320>)
 8016d9c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016da0:	ea33 0308 	bics.w	r3, r3, r8
 8016da4:	d114      	bne.n	8016dd0 <_dtoa_r+0x98>
 8016da6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016da8:	f242 730f 	movw	r3, #9999	; 0x270f
 8016dac:	6013      	str	r3, [r2, #0]
 8016dae:	9b00      	ldr	r3, [sp, #0]
 8016db0:	b923      	cbnz	r3, 8016dbc <_dtoa_r+0x84>
 8016db2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016db6:	2800      	cmp	r0, #0
 8016db8:	f000 8542 	beq.w	8017840 <_dtoa_r+0xb08>
 8016dbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016dbe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801706c <_dtoa_r+0x334>
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	f000 8544 	beq.w	8017850 <_dtoa_r+0xb18>
 8016dc8:	f10b 0303 	add.w	r3, fp, #3
 8016dcc:	f000 bd3e 	b.w	801784c <_dtoa_r+0xb14>
 8016dd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	4630      	mov	r0, r6
 8016dda:	4639      	mov	r1, r7
 8016ddc:	f7e9 fe8c 	bl	8000af8 <__aeabi_dcmpeq>
 8016de0:	4681      	mov	r9, r0
 8016de2:	b168      	cbz	r0, 8016e00 <_dtoa_r+0xc8>
 8016de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016de6:	2301      	movs	r3, #1
 8016de8:	6013      	str	r3, [r2, #0]
 8016dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	f000 8524 	beq.w	801783a <_dtoa_r+0xb02>
 8016df2:	4b9a      	ldr	r3, [pc, #616]	; (801705c <_dtoa_r+0x324>)
 8016df4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016df6:	f103 3bff 	add.w	fp, r3, #4294967295
 8016dfa:	6013      	str	r3, [r2, #0]
 8016dfc:	f000 bd28 	b.w	8017850 <_dtoa_r+0xb18>
 8016e00:	aa14      	add	r2, sp, #80	; 0x50
 8016e02:	a915      	add	r1, sp, #84	; 0x54
 8016e04:	ec47 6b10 	vmov	d0, r6, r7
 8016e08:	4620      	mov	r0, r4
 8016e0a:	f001 fbf1 	bl	80185f0 <__d2b>
 8016e0e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016e12:	9004      	str	r0, [sp, #16]
 8016e14:	2d00      	cmp	r5, #0
 8016e16:	d07c      	beq.n	8016f12 <_dtoa_r+0x1da>
 8016e18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016e1c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016e20:	46b2      	mov	sl, r6
 8016e22:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016e26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016e2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016e2e:	2200      	movs	r2, #0
 8016e30:	4b8b      	ldr	r3, [pc, #556]	; (8017060 <_dtoa_r+0x328>)
 8016e32:	4650      	mov	r0, sl
 8016e34:	4659      	mov	r1, fp
 8016e36:	f7e9 fa3f 	bl	80002b8 <__aeabi_dsub>
 8016e3a:	a381      	add	r3, pc, #516	; (adr r3, 8017040 <_dtoa_r+0x308>)
 8016e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e40:	f7e9 fbf2 	bl	8000628 <__aeabi_dmul>
 8016e44:	a380      	add	r3, pc, #512	; (adr r3, 8017048 <_dtoa_r+0x310>)
 8016e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e4a:	f7e9 fa37 	bl	80002bc <__adddf3>
 8016e4e:	4606      	mov	r6, r0
 8016e50:	4628      	mov	r0, r5
 8016e52:	460f      	mov	r7, r1
 8016e54:	f7e9 fb7e 	bl	8000554 <__aeabi_i2d>
 8016e58:	a37d      	add	r3, pc, #500	; (adr r3, 8017050 <_dtoa_r+0x318>)
 8016e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e5e:	f7e9 fbe3 	bl	8000628 <__aeabi_dmul>
 8016e62:	4602      	mov	r2, r0
 8016e64:	460b      	mov	r3, r1
 8016e66:	4630      	mov	r0, r6
 8016e68:	4639      	mov	r1, r7
 8016e6a:	f7e9 fa27 	bl	80002bc <__adddf3>
 8016e6e:	4606      	mov	r6, r0
 8016e70:	460f      	mov	r7, r1
 8016e72:	f7e9 fe89 	bl	8000b88 <__aeabi_d2iz>
 8016e76:	2200      	movs	r2, #0
 8016e78:	4682      	mov	sl, r0
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	4630      	mov	r0, r6
 8016e7e:	4639      	mov	r1, r7
 8016e80:	f7e9 fe44 	bl	8000b0c <__aeabi_dcmplt>
 8016e84:	b148      	cbz	r0, 8016e9a <_dtoa_r+0x162>
 8016e86:	4650      	mov	r0, sl
 8016e88:	f7e9 fb64 	bl	8000554 <__aeabi_i2d>
 8016e8c:	4632      	mov	r2, r6
 8016e8e:	463b      	mov	r3, r7
 8016e90:	f7e9 fe32 	bl	8000af8 <__aeabi_dcmpeq>
 8016e94:	b908      	cbnz	r0, 8016e9a <_dtoa_r+0x162>
 8016e96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e9a:	f1ba 0f16 	cmp.w	sl, #22
 8016e9e:	d859      	bhi.n	8016f54 <_dtoa_r+0x21c>
 8016ea0:	4970      	ldr	r1, [pc, #448]	; (8017064 <_dtoa_r+0x32c>)
 8016ea2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016ea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016eaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016eae:	f7e9 fe4b 	bl	8000b48 <__aeabi_dcmpgt>
 8016eb2:	2800      	cmp	r0, #0
 8016eb4:	d050      	beq.n	8016f58 <_dtoa_r+0x220>
 8016eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016eba:	2300      	movs	r3, #0
 8016ebc:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016ec0:	1b5d      	subs	r5, r3, r5
 8016ec2:	f1b5 0801 	subs.w	r8, r5, #1
 8016ec6:	bf49      	itett	mi
 8016ec8:	f1c5 0301 	rsbmi	r3, r5, #1
 8016ecc:	2300      	movpl	r3, #0
 8016ece:	9305      	strmi	r3, [sp, #20]
 8016ed0:	f04f 0800 	movmi.w	r8, #0
 8016ed4:	bf58      	it	pl
 8016ed6:	9305      	strpl	r3, [sp, #20]
 8016ed8:	f1ba 0f00 	cmp.w	sl, #0
 8016edc:	db3e      	blt.n	8016f5c <_dtoa_r+0x224>
 8016ede:	2300      	movs	r3, #0
 8016ee0:	44d0      	add	r8, sl
 8016ee2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016ee6:	9307      	str	r3, [sp, #28]
 8016ee8:	9b06      	ldr	r3, [sp, #24]
 8016eea:	2b09      	cmp	r3, #9
 8016eec:	f200 8090 	bhi.w	8017010 <_dtoa_r+0x2d8>
 8016ef0:	2b05      	cmp	r3, #5
 8016ef2:	bfc4      	itt	gt
 8016ef4:	3b04      	subgt	r3, #4
 8016ef6:	9306      	strgt	r3, [sp, #24]
 8016ef8:	9b06      	ldr	r3, [sp, #24]
 8016efa:	f1a3 0302 	sub.w	r3, r3, #2
 8016efe:	bfcc      	ite	gt
 8016f00:	2500      	movgt	r5, #0
 8016f02:	2501      	movle	r5, #1
 8016f04:	2b03      	cmp	r3, #3
 8016f06:	f200 808f 	bhi.w	8017028 <_dtoa_r+0x2f0>
 8016f0a:	e8df f003 	tbb	[pc, r3]
 8016f0e:	7f7d      	.short	0x7f7d
 8016f10:	7131      	.short	0x7131
 8016f12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016f16:	441d      	add	r5, r3
 8016f18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016f1c:	2820      	cmp	r0, #32
 8016f1e:	dd13      	ble.n	8016f48 <_dtoa_r+0x210>
 8016f20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016f24:	9b00      	ldr	r3, [sp, #0]
 8016f26:	fa08 f800 	lsl.w	r8, r8, r0
 8016f2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016f2e:	fa23 f000 	lsr.w	r0, r3, r0
 8016f32:	ea48 0000 	orr.w	r0, r8, r0
 8016f36:	f7e9 fafd 	bl	8000534 <__aeabi_ui2d>
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	4682      	mov	sl, r0
 8016f3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016f42:	3d01      	subs	r5, #1
 8016f44:	9313      	str	r3, [sp, #76]	; 0x4c
 8016f46:	e772      	b.n	8016e2e <_dtoa_r+0xf6>
 8016f48:	9b00      	ldr	r3, [sp, #0]
 8016f4a:	f1c0 0020 	rsb	r0, r0, #32
 8016f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8016f52:	e7f0      	b.n	8016f36 <_dtoa_r+0x1fe>
 8016f54:	2301      	movs	r3, #1
 8016f56:	e7b1      	b.n	8016ebc <_dtoa_r+0x184>
 8016f58:	900f      	str	r0, [sp, #60]	; 0x3c
 8016f5a:	e7b0      	b.n	8016ebe <_dtoa_r+0x186>
 8016f5c:	9b05      	ldr	r3, [sp, #20]
 8016f5e:	eba3 030a 	sub.w	r3, r3, sl
 8016f62:	9305      	str	r3, [sp, #20]
 8016f64:	f1ca 0300 	rsb	r3, sl, #0
 8016f68:	9307      	str	r3, [sp, #28]
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	930e      	str	r3, [sp, #56]	; 0x38
 8016f6e:	e7bb      	b.n	8016ee8 <_dtoa_r+0x1b0>
 8016f70:	2301      	movs	r3, #1
 8016f72:	930a      	str	r3, [sp, #40]	; 0x28
 8016f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	dd59      	ble.n	801702e <_dtoa_r+0x2f6>
 8016f7a:	9302      	str	r3, [sp, #8]
 8016f7c:	4699      	mov	r9, r3
 8016f7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016f80:	2200      	movs	r2, #0
 8016f82:	6072      	str	r2, [r6, #4]
 8016f84:	2204      	movs	r2, #4
 8016f86:	f102 0014 	add.w	r0, r2, #20
 8016f8a:	4298      	cmp	r0, r3
 8016f8c:	6871      	ldr	r1, [r6, #4]
 8016f8e:	d953      	bls.n	8017038 <_dtoa_r+0x300>
 8016f90:	4620      	mov	r0, r4
 8016f92:	f000 ffeb 	bl	8017f6c <_Balloc>
 8016f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f98:	6030      	str	r0, [r6, #0]
 8016f9a:	f1b9 0f0e 	cmp.w	r9, #14
 8016f9e:	f8d3 b000 	ldr.w	fp, [r3]
 8016fa2:	f200 80e6 	bhi.w	8017172 <_dtoa_r+0x43a>
 8016fa6:	2d00      	cmp	r5, #0
 8016fa8:	f000 80e3 	beq.w	8017172 <_dtoa_r+0x43a>
 8016fac:	ed9d 7b00 	vldr	d7, [sp]
 8016fb0:	f1ba 0f00 	cmp.w	sl, #0
 8016fb4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016fb8:	dd74      	ble.n	80170a4 <_dtoa_r+0x36c>
 8016fba:	4a2a      	ldr	r2, [pc, #168]	; (8017064 <_dtoa_r+0x32c>)
 8016fbc:	f00a 030f 	and.w	r3, sl, #15
 8016fc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016fc4:	ed93 7b00 	vldr	d7, [r3]
 8016fc8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016fcc:	06f0      	lsls	r0, r6, #27
 8016fce:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016fd2:	d565      	bpl.n	80170a0 <_dtoa_r+0x368>
 8016fd4:	4b24      	ldr	r3, [pc, #144]	; (8017068 <_dtoa_r+0x330>)
 8016fd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016fda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016fde:	f7e9 fc4d 	bl	800087c <__aeabi_ddiv>
 8016fe2:	e9cd 0100 	strd	r0, r1, [sp]
 8016fe6:	f006 060f 	and.w	r6, r6, #15
 8016fea:	2503      	movs	r5, #3
 8016fec:	4f1e      	ldr	r7, [pc, #120]	; (8017068 <_dtoa_r+0x330>)
 8016fee:	e04c      	b.n	801708a <_dtoa_r+0x352>
 8016ff0:	2301      	movs	r3, #1
 8016ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8016ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ff6:	4453      	add	r3, sl
 8016ff8:	f103 0901 	add.w	r9, r3, #1
 8016ffc:	9302      	str	r3, [sp, #8]
 8016ffe:	464b      	mov	r3, r9
 8017000:	2b01      	cmp	r3, #1
 8017002:	bfb8      	it	lt
 8017004:	2301      	movlt	r3, #1
 8017006:	e7ba      	b.n	8016f7e <_dtoa_r+0x246>
 8017008:	2300      	movs	r3, #0
 801700a:	e7b2      	b.n	8016f72 <_dtoa_r+0x23a>
 801700c:	2300      	movs	r3, #0
 801700e:	e7f0      	b.n	8016ff2 <_dtoa_r+0x2ba>
 8017010:	2501      	movs	r5, #1
 8017012:	2300      	movs	r3, #0
 8017014:	9306      	str	r3, [sp, #24]
 8017016:	950a      	str	r5, [sp, #40]	; 0x28
 8017018:	f04f 33ff 	mov.w	r3, #4294967295
 801701c:	9302      	str	r3, [sp, #8]
 801701e:	4699      	mov	r9, r3
 8017020:	2200      	movs	r2, #0
 8017022:	2312      	movs	r3, #18
 8017024:	920b      	str	r2, [sp, #44]	; 0x2c
 8017026:	e7aa      	b.n	8016f7e <_dtoa_r+0x246>
 8017028:	2301      	movs	r3, #1
 801702a:	930a      	str	r3, [sp, #40]	; 0x28
 801702c:	e7f4      	b.n	8017018 <_dtoa_r+0x2e0>
 801702e:	2301      	movs	r3, #1
 8017030:	9302      	str	r3, [sp, #8]
 8017032:	4699      	mov	r9, r3
 8017034:	461a      	mov	r2, r3
 8017036:	e7f5      	b.n	8017024 <_dtoa_r+0x2ec>
 8017038:	3101      	adds	r1, #1
 801703a:	6071      	str	r1, [r6, #4]
 801703c:	0052      	lsls	r2, r2, #1
 801703e:	e7a2      	b.n	8016f86 <_dtoa_r+0x24e>
 8017040:	636f4361 	.word	0x636f4361
 8017044:	3fd287a7 	.word	0x3fd287a7
 8017048:	8b60c8b3 	.word	0x8b60c8b3
 801704c:	3fc68a28 	.word	0x3fc68a28
 8017050:	509f79fb 	.word	0x509f79fb
 8017054:	3fd34413 	.word	0x3fd34413
 8017058:	7ff00000 	.word	0x7ff00000
 801705c:	08019f7c 	.word	0x08019f7c
 8017060:	3ff80000 	.word	0x3ff80000
 8017064:	08019e80 	.word	0x08019e80
 8017068:	08019e58 	.word	0x08019e58
 801706c:	08019de1 	.word	0x08019de1
 8017070:	07f1      	lsls	r1, r6, #31
 8017072:	d508      	bpl.n	8017086 <_dtoa_r+0x34e>
 8017074:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017078:	e9d7 2300 	ldrd	r2, r3, [r7]
 801707c:	f7e9 fad4 	bl	8000628 <__aeabi_dmul>
 8017080:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017084:	3501      	adds	r5, #1
 8017086:	1076      	asrs	r6, r6, #1
 8017088:	3708      	adds	r7, #8
 801708a:	2e00      	cmp	r6, #0
 801708c:	d1f0      	bne.n	8017070 <_dtoa_r+0x338>
 801708e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017092:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017096:	f7e9 fbf1 	bl	800087c <__aeabi_ddiv>
 801709a:	e9cd 0100 	strd	r0, r1, [sp]
 801709e:	e01a      	b.n	80170d6 <_dtoa_r+0x39e>
 80170a0:	2502      	movs	r5, #2
 80170a2:	e7a3      	b.n	8016fec <_dtoa_r+0x2b4>
 80170a4:	f000 80a0 	beq.w	80171e8 <_dtoa_r+0x4b0>
 80170a8:	f1ca 0600 	rsb	r6, sl, #0
 80170ac:	4b9f      	ldr	r3, [pc, #636]	; (801732c <_dtoa_r+0x5f4>)
 80170ae:	4fa0      	ldr	r7, [pc, #640]	; (8017330 <_dtoa_r+0x5f8>)
 80170b0:	f006 020f 	and.w	r2, r6, #15
 80170b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80170b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80170c0:	f7e9 fab2 	bl	8000628 <__aeabi_dmul>
 80170c4:	e9cd 0100 	strd	r0, r1, [sp]
 80170c8:	1136      	asrs	r6, r6, #4
 80170ca:	2300      	movs	r3, #0
 80170cc:	2502      	movs	r5, #2
 80170ce:	2e00      	cmp	r6, #0
 80170d0:	d17f      	bne.n	80171d2 <_dtoa_r+0x49a>
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d1e1      	bne.n	801709a <_dtoa_r+0x362>
 80170d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170d8:	2b00      	cmp	r3, #0
 80170da:	f000 8087 	beq.w	80171ec <_dtoa_r+0x4b4>
 80170de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80170e2:	2200      	movs	r2, #0
 80170e4:	4b93      	ldr	r3, [pc, #588]	; (8017334 <_dtoa_r+0x5fc>)
 80170e6:	4630      	mov	r0, r6
 80170e8:	4639      	mov	r1, r7
 80170ea:	f7e9 fd0f 	bl	8000b0c <__aeabi_dcmplt>
 80170ee:	2800      	cmp	r0, #0
 80170f0:	d07c      	beq.n	80171ec <_dtoa_r+0x4b4>
 80170f2:	f1b9 0f00 	cmp.w	r9, #0
 80170f6:	d079      	beq.n	80171ec <_dtoa_r+0x4b4>
 80170f8:	9b02      	ldr	r3, [sp, #8]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	dd35      	ble.n	801716a <_dtoa_r+0x432>
 80170fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017102:	9308      	str	r3, [sp, #32]
 8017104:	4639      	mov	r1, r7
 8017106:	2200      	movs	r2, #0
 8017108:	4b8b      	ldr	r3, [pc, #556]	; (8017338 <_dtoa_r+0x600>)
 801710a:	4630      	mov	r0, r6
 801710c:	f7e9 fa8c 	bl	8000628 <__aeabi_dmul>
 8017110:	e9cd 0100 	strd	r0, r1, [sp]
 8017114:	9f02      	ldr	r7, [sp, #8]
 8017116:	3501      	adds	r5, #1
 8017118:	4628      	mov	r0, r5
 801711a:	f7e9 fa1b 	bl	8000554 <__aeabi_i2d>
 801711e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017122:	f7e9 fa81 	bl	8000628 <__aeabi_dmul>
 8017126:	2200      	movs	r2, #0
 8017128:	4b84      	ldr	r3, [pc, #528]	; (801733c <_dtoa_r+0x604>)
 801712a:	f7e9 f8c7 	bl	80002bc <__adddf3>
 801712e:	4605      	mov	r5, r0
 8017130:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017134:	2f00      	cmp	r7, #0
 8017136:	d15d      	bne.n	80171f4 <_dtoa_r+0x4bc>
 8017138:	2200      	movs	r2, #0
 801713a:	4b81      	ldr	r3, [pc, #516]	; (8017340 <_dtoa_r+0x608>)
 801713c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017140:	f7e9 f8ba 	bl	80002b8 <__aeabi_dsub>
 8017144:	462a      	mov	r2, r5
 8017146:	4633      	mov	r3, r6
 8017148:	e9cd 0100 	strd	r0, r1, [sp]
 801714c:	f7e9 fcfc 	bl	8000b48 <__aeabi_dcmpgt>
 8017150:	2800      	cmp	r0, #0
 8017152:	f040 8288 	bne.w	8017666 <_dtoa_r+0x92e>
 8017156:	462a      	mov	r2, r5
 8017158:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801715c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017160:	f7e9 fcd4 	bl	8000b0c <__aeabi_dcmplt>
 8017164:	2800      	cmp	r0, #0
 8017166:	f040 827c 	bne.w	8017662 <_dtoa_r+0x92a>
 801716a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801716e:	e9cd 2300 	strd	r2, r3, [sp]
 8017172:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017174:	2b00      	cmp	r3, #0
 8017176:	f2c0 8150 	blt.w	801741a <_dtoa_r+0x6e2>
 801717a:	f1ba 0f0e 	cmp.w	sl, #14
 801717e:	f300 814c 	bgt.w	801741a <_dtoa_r+0x6e2>
 8017182:	4b6a      	ldr	r3, [pc, #424]	; (801732c <_dtoa_r+0x5f4>)
 8017184:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017188:	ed93 7b00 	vldr	d7, [r3]
 801718c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801718e:	2b00      	cmp	r3, #0
 8017190:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017194:	f280 80d8 	bge.w	8017348 <_dtoa_r+0x610>
 8017198:	f1b9 0f00 	cmp.w	r9, #0
 801719c:	f300 80d4 	bgt.w	8017348 <_dtoa_r+0x610>
 80171a0:	f040 825e 	bne.w	8017660 <_dtoa_r+0x928>
 80171a4:	2200      	movs	r2, #0
 80171a6:	4b66      	ldr	r3, [pc, #408]	; (8017340 <_dtoa_r+0x608>)
 80171a8:	ec51 0b17 	vmov	r0, r1, d7
 80171ac:	f7e9 fa3c 	bl	8000628 <__aeabi_dmul>
 80171b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80171b4:	f7e9 fcbe 	bl	8000b34 <__aeabi_dcmpge>
 80171b8:	464f      	mov	r7, r9
 80171ba:	464e      	mov	r6, r9
 80171bc:	2800      	cmp	r0, #0
 80171be:	f040 8234 	bne.w	801762a <_dtoa_r+0x8f2>
 80171c2:	2331      	movs	r3, #49	; 0x31
 80171c4:	f10b 0501 	add.w	r5, fp, #1
 80171c8:	f88b 3000 	strb.w	r3, [fp]
 80171cc:	f10a 0a01 	add.w	sl, sl, #1
 80171d0:	e22f      	b.n	8017632 <_dtoa_r+0x8fa>
 80171d2:	07f2      	lsls	r2, r6, #31
 80171d4:	d505      	bpl.n	80171e2 <_dtoa_r+0x4aa>
 80171d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80171da:	f7e9 fa25 	bl	8000628 <__aeabi_dmul>
 80171de:	3501      	adds	r5, #1
 80171e0:	2301      	movs	r3, #1
 80171e2:	1076      	asrs	r6, r6, #1
 80171e4:	3708      	adds	r7, #8
 80171e6:	e772      	b.n	80170ce <_dtoa_r+0x396>
 80171e8:	2502      	movs	r5, #2
 80171ea:	e774      	b.n	80170d6 <_dtoa_r+0x39e>
 80171ec:	f8cd a020 	str.w	sl, [sp, #32]
 80171f0:	464f      	mov	r7, r9
 80171f2:	e791      	b.n	8017118 <_dtoa_r+0x3e0>
 80171f4:	4b4d      	ldr	r3, [pc, #308]	; (801732c <_dtoa_r+0x5f4>)
 80171f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80171fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80171fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017200:	2b00      	cmp	r3, #0
 8017202:	d047      	beq.n	8017294 <_dtoa_r+0x55c>
 8017204:	4602      	mov	r2, r0
 8017206:	460b      	mov	r3, r1
 8017208:	2000      	movs	r0, #0
 801720a:	494e      	ldr	r1, [pc, #312]	; (8017344 <_dtoa_r+0x60c>)
 801720c:	f7e9 fb36 	bl	800087c <__aeabi_ddiv>
 8017210:	462a      	mov	r2, r5
 8017212:	4633      	mov	r3, r6
 8017214:	f7e9 f850 	bl	80002b8 <__aeabi_dsub>
 8017218:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801721c:	465d      	mov	r5, fp
 801721e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017222:	f7e9 fcb1 	bl	8000b88 <__aeabi_d2iz>
 8017226:	4606      	mov	r6, r0
 8017228:	f7e9 f994 	bl	8000554 <__aeabi_i2d>
 801722c:	4602      	mov	r2, r0
 801722e:	460b      	mov	r3, r1
 8017230:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017234:	f7e9 f840 	bl	80002b8 <__aeabi_dsub>
 8017238:	3630      	adds	r6, #48	; 0x30
 801723a:	f805 6b01 	strb.w	r6, [r5], #1
 801723e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017242:	e9cd 0100 	strd	r0, r1, [sp]
 8017246:	f7e9 fc61 	bl	8000b0c <__aeabi_dcmplt>
 801724a:	2800      	cmp	r0, #0
 801724c:	d163      	bne.n	8017316 <_dtoa_r+0x5de>
 801724e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017252:	2000      	movs	r0, #0
 8017254:	4937      	ldr	r1, [pc, #220]	; (8017334 <_dtoa_r+0x5fc>)
 8017256:	f7e9 f82f 	bl	80002b8 <__aeabi_dsub>
 801725a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801725e:	f7e9 fc55 	bl	8000b0c <__aeabi_dcmplt>
 8017262:	2800      	cmp	r0, #0
 8017264:	f040 80b7 	bne.w	80173d6 <_dtoa_r+0x69e>
 8017268:	eba5 030b 	sub.w	r3, r5, fp
 801726c:	429f      	cmp	r7, r3
 801726e:	f77f af7c 	ble.w	801716a <_dtoa_r+0x432>
 8017272:	2200      	movs	r2, #0
 8017274:	4b30      	ldr	r3, [pc, #192]	; (8017338 <_dtoa_r+0x600>)
 8017276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801727a:	f7e9 f9d5 	bl	8000628 <__aeabi_dmul>
 801727e:	2200      	movs	r2, #0
 8017280:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017284:	4b2c      	ldr	r3, [pc, #176]	; (8017338 <_dtoa_r+0x600>)
 8017286:	e9dd 0100 	ldrd	r0, r1, [sp]
 801728a:	f7e9 f9cd 	bl	8000628 <__aeabi_dmul>
 801728e:	e9cd 0100 	strd	r0, r1, [sp]
 8017292:	e7c4      	b.n	801721e <_dtoa_r+0x4e6>
 8017294:	462a      	mov	r2, r5
 8017296:	4633      	mov	r3, r6
 8017298:	f7e9 f9c6 	bl	8000628 <__aeabi_dmul>
 801729c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80172a0:	eb0b 0507 	add.w	r5, fp, r7
 80172a4:	465e      	mov	r6, fp
 80172a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172aa:	f7e9 fc6d 	bl	8000b88 <__aeabi_d2iz>
 80172ae:	4607      	mov	r7, r0
 80172b0:	f7e9 f950 	bl	8000554 <__aeabi_i2d>
 80172b4:	3730      	adds	r7, #48	; 0x30
 80172b6:	4602      	mov	r2, r0
 80172b8:	460b      	mov	r3, r1
 80172ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172be:	f7e8 fffb 	bl	80002b8 <__aeabi_dsub>
 80172c2:	f806 7b01 	strb.w	r7, [r6], #1
 80172c6:	42ae      	cmp	r6, r5
 80172c8:	e9cd 0100 	strd	r0, r1, [sp]
 80172cc:	f04f 0200 	mov.w	r2, #0
 80172d0:	d126      	bne.n	8017320 <_dtoa_r+0x5e8>
 80172d2:	4b1c      	ldr	r3, [pc, #112]	; (8017344 <_dtoa_r+0x60c>)
 80172d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80172d8:	f7e8 fff0 	bl	80002bc <__adddf3>
 80172dc:	4602      	mov	r2, r0
 80172de:	460b      	mov	r3, r1
 80172e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172e4:	f7e9 fc30 	bl	8000b48 <__aeabi_dcmpgt>
 80172e8:	2800      	cmp	r0, #0
 80172ea:	d174      	bne.n	80173d6 <_dtoa_r+0x69e>
 80172ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80172f0:	2000      	movs	r0, #0
 80172f2:	4914      	ldr	r1, [pc, #80]	; (8017344 <_dtoa_r+0x60c>)
 80172f4:	f7e8 ffe0 	bl	80002b8 <__aeabi_dsub>
 80172f8:	4602      	mov	r2, r0
 80172fa:	460b      	mov	r3, r1
 80172fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017300:	f7e9 fc04 	bl	8000b0c <__aeabi_dcmplt>
 8017304:	2800      	cmp	r0, #0
 8017306:	f43f af30 	beq.w	801716a <_dtoa_r+0x432>
 801730a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801730e:	2b30      	cmp	r3, #48	; 0x30
 8017310:	f105 32ff 	add.w	r2, r5, #4294967295
 8017314:	d002      	beq.n	801731c <_dtoa_r+0x5e4>
 8017316:	f8dd a020 	ldr.w	sl, [sp, #32]
 801731a:	e04a      	b.n	80173b2 <_dtoa_r+0x67a>
 801731c:	4615      	mov	r5, r2
 801731e:	e7f4      	b.n	801730a <_dtoa_r+0x5d2>
 8017320:	4b05      	ldr	r3, [pc, #20]	; (8017338 <_dtoa_r+0x600>)
 8017322:	f7e9 f981 	bl	8000628 <__aeabi_dmul>
 8017326:	e9cd 0100 	strd	r0, r1, [sp]
 801732a:	e7bc      	b.n	80172a6 <_dtoa_r+0x56e>
 801732c:	08019e80 	.word	0x08019e80
 8017330:	08019e58 	.word	0x08019e58
 8017334:	3ff00000 	.word	0x3ff00000
 8017338:	40240000 	.word	0x40240000
 801733c:	401c0000 	.word	0x401c0000
 8017340:	40140000 	.word	0x40140000
 8017344:	3fe00000 	.word	0x3fe00000
 8017348:	e9dd 6700 	ldrd	r6, r7, [sp]
 801734c:	465d      	mov	r5, fp
 801734e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017352:	4630      	mov	r0, r6
 8017354:	4639      	mov	r1, r7
 8017356:	f7e9 fa91 	bl	800087c <__aeabi_ddiv>
 801735a:	f7e9 fc15 	bl	8000b88 <__aeabi_d2iz>
 801735e:	4680      	mov	r8, r0
 8017360:	f7e9 f8f8 	bl	8000554 <__aeabi_i2d>
 8017364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017368:	f7e9 f95e 	bl	8000628 <__aeabi_dmul>
 801736c:	4602      	mov	r2, r0
 801736e:	460b      	mov	r3, r1
 8017370:	4630      	mov	r0, r6
 8017372:	4639      	mov	r1, r7
 8017374:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017378:	f7e8 ff9e 	bl	80002b8 <__aeabi_dsub>
 801737c:	f805 6b01 	strb.w	r6, [r5], #1
 8017380:	eba5 060b 	sub.w	r6, r5, fp
 8017384:	45b1      	cmp	r9, r6
 8017386:	4602      	mov	r2, r0
 8017388:	460b      	mov	r3, r1
 801738a:	d139      	bne.n	8017400 <_dtoa_r+0x6c8>
 801738c:	f7e8 ff96 	bl	80002bc <__adddf3>
 8017390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017394:	4606      	mov	r6, r0
 8017396:	460f      	mov	r7, r1
 8017398:	f7e9 fbd6 	bl	8000b48 <__aeabi_dcmpgt>
 801739c:	b9c8      	cbnz	r0, 80173d2 <_dtoa_r+0x69a>
 801739e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80173a2:	4630      	mov	r0, r6
 80173a4:	4639      	mov	r1, r7
 80173a6:	f7e9 fba7 	bl	8000af8 <__aeabi_dcmpeq>
 80173aa:	b110      	cbz	r0, 80173b2 <_dtoa_r+0x67a>
 80173ac:	f018 0f01 	tst.w	r8, #1
 80173b0:	d10f      	bne.n	80173d2 <_dtoa_r+0x69a>
 80173b2:	9904      	ldr	r1, [sp, #16]
 80173b4:	4620      	mov	r0, r4
 80173b6:	f000 fe0d 	bl	8017fd4 <_Bfree>
 80173ba:	2300      	movs	r3, #0
 80173bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80173be:	702b      	strb	r3, [r5, #0]
 80173c0:	f10a 0301 	add.w	r3, sl, #1
 80173c4:	6013      	str	r3, [r2, #0]
 80173c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	f000 8241 	beq.w	8017850 <_dtoa_r+0xb18>
 80173ce:	601d      	str	r5, [r3, #0]
 80173d0:	e23e      	b.n	8017850 <_dtoa_r+0xb18>
 80173d2:	f8cd a020 	str.w	sl, [sp, #32]
 80173d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80173da:	2a39      	cmp	r2, #57	; 0x39
 80173dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80173e0:	d108      	bne.n	80173f4 <_dtoa_r+0x6bc>
 80173e2:	459b      	cmp	fp, r3
 80173e4:	d10a      	bne.n	80173fc <_dtoa_r+0x6c4>
 80173e6:	9b08      	ldr	r3, [sp, #32]
 80173e8:	3301      	adds	r3, #1
 80173ea:	9308      	str	r3, [sp, #32]
 80173ec:	2330      	movs	r3, #48	; 0x30
 80173ee:	f88b 3000 	strb.w	r3, [fp]
 80173f2:	465b      	mov	r3, fp
 80173f4:	781a      	ldrb	r2, [r3, #0]
 80173f6:	3201      	adds	r2, #1
 80173f8:	701a      	strb	r2, [r3, #0]
 80173fa:	e78c      	b.n	8017316 <_dtoa_r+0x5de>
 80173fc:	461d      	mov	r5, r3
 80173fe:	e7ea      	b.n	80173d6 <_dtoa_r+0x69e>
 8017400:	2200      	movs	r2, #0
 8017402:	4b9b      	ldr	r3, [pc, #620]	; (8017670 <_dtoa_r+0x938>)
 8017404:	f7e9 f910 	bl	8000628 <__aeabi_dmul>
 8017408:	2200      	movs	r2, #0
 801740a:	2300      	movs	r3, #0
 801740c:	4606      	mov	r6, r0
 801740e:	460f      	mov	r7, r1
 8017410:	f7e9 fb72 	bl	8000af8 <__aeabi_dcmpeq>
 8017414:	2800      	cmp	r0, #0
 8017416:	d09a      	beq.n	801734e <_dtoa_r+0x616>
 8017418:	e7cb      	b.n	80173b2 <_dtoa_r+0x67a>
 801741a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801741c:	2a00      	cmp	r2, #0
 801741e:	f000 808b 	beq.w	8017538 <_dtoa_r+0x800>
 8017422:	9a06      	ldr	r2, [sp, #24]
 8017424:	2a01      	cmp	r2, #1
 8017426:	dc6e      	bgt.n	8017506 <_dtoa_r+0x7ce>
 8017428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801742a:	2a00      	cmp	r2, #0
 801742c:	d067      	beq.n	80174fe <_dtoa_r+0x7c6>
 801742e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017432:	9f07      	ldr	r7, [sp, #28]
 8017434:	9d05      	ldr	r5, [sp, #20]
 8017436:	9a05      	ldr	r2, [sp, #20]
 8017438:	2101      	movs	r1, #1
 801743a:	441a      	add	r2, r3
 801743c:	4620      	mov	r0, r4
 801743e:	9205      	str	r2, [sp, #20]
 8017440:	4498      	add	r8, r3
 8017442:	f000 fea5 	bl	8018190 <__i2b>
 8017446:	4606      	mov	r6, r0
 8017448:	2d00      	cmp	r5, #0
 801744a:	dd0c      	ble.n	8017466 <_dtoa_r+0x72e>
 801744c:	f1b8 0f00 	cmp.w	r8, #0
 8017450:	dd09      	ble.n	8017466 <_dtoa_r+0x72e>
 8017452:	4545      	cmp	r5, r8
 8017454:	9a05      	ldr	r2, [sp, #20]
 8017456:	462b      	mov	r3, r5
 8017458:	bfa8      	it	ge
 801745a:	4643      	movge	r3, r8
 801745c:	1ad2      	subs	r2, r2, r3
 801745e:	9205      	str	r2, [sp, #20]
 8017460:	1aed      	subs	r5, r5, r3
 8017462:	eba8 0803 	sub.w	r8, r8, r3
 8017466:	9b07      	ldr	r3, [sp, #28]
 8017468:	b1eb      	cbz	r3, 80174a6 <_dtoa_r+0x76e>
 801746a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801746c:	2b00      	cmp	r3, #0
 801746e:	d067      	beq.n	8017540 <_dtoa_r+0x808>
 8017470:	b18f      	cbz	r7, 8017496 <_dtoa_r+0x75e>
 8017472:	4631      	mov	r1, r6
 8017474:	463a      	mov	r2, r7
 8017476:	4620      	mov	r0, r4
 8017478:	f000 ff2a 	bl	80182d0 <__pow5mult>
 801747c:	9a04      	ldr	r2, [sp, #16]
 801747e:	4601      	mov	r1, r0
 8017480:	4606      	mov	r6, r0
 8017482:	4620      	mov	r0, r4
 8017484:	f000 fe8d 	bl	80181a2 <__multiply>
 8017488:	9904      	ldr	r1, [sp, #16]
 801748a:	9008      	str	r0, [sp, #32]
 801748c:	4620      	mov	r0, r4
 801748e:	f000 fda1 	bl	8017fd4 <_Bfree>
 8017492:	9b08      	ldr	r3, [sp, #32]
 8017494:	9304      	str	r3, [sp, #16]
 8017496:	9b07      	ldr	r3, [sp, #28]
 8017498:	1bda      	subs	r2, r3, r7
 801749a:	d004      	beq.n	80174a6 <_dtoa_r+0x76e>
 801749c:	9904      	ldr	r1, [sp, #16]
 801749e:	4620      	mov	r0, r4
 80174a0:	f000 ff16 	bl	80182d0 <__pow5mult>
 80174a4:	9004      	str	r0, [sp, #16]
 80174a6:	2101      	movs	r1, #1
 80174a8:	4620      	mov	r0, r4
 80174aa:	f000 fe71 	bl	8018190 <__i2b>
 80174ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174b0:	4607      	mov	r7, r0
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	f000 81d0 	beq.w	8017858 <_dtoa_r+0xb20>
 80174b8:	461a      	mov	r2, r3
 80174ba:	4601      	mov	r1, r0
 80174bc:	4620      	mov	r0, r4
 80174be:	f000 ff07 	bl	80182d0 <__pow5mult>
 80174c2:	9b06      	ldr	r3, [sp, #24]
 80174c4:	2b01      	cmp	r3, #1
 80174c6:	4607      	mov	r7, r0
 80174c8:	dc40      	bgt.n	801754c <_dtoa_r+0x814>
 80174ca:	9b00      	ldr	r3, [sp, #0]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d139      	bne.n	8017544 <_dtoa_r+0x80c>
 80174d0:	9b01      	ldr	r3, [sp, #4]
 80174d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d136      	bne.n	8017548 <_dtoa_r+0x810>
 80174da:	9b01      	ldr	r3, [sp, #4]
 80174dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80174e0:	0d1b      	lsrs	r3, r3, #20
 80174e2:	051b      	lsls	r3, r3, #20
 80174e4:	b12b      	cbz	r3, 80174f2 <_dtoa_r+0x7ba>
 80174e6:	9b05      	ldr	r3, [sp, #20]
 80174e8:	3301      	adds	r3, #1
 80174ea:	9305      	str	r3, [sp, #20]
 80174ec:	f108 0801 	add.w	r8, r8, #1
 80174f0:	2301      	movs	r3, #1
 80174f2:	9307      	str	r3, [sp, #28]
 80174f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d12a      	bne.n	8017550 <_dtoa_r+0x818>
 80174fa:	2001      	movs	r0, #1
 80174fc:	e030      	b.n	8017560 <_dtoa_r+0x828>
 80174fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017500:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017504:	e795      	b.n	8017432 <_dtoa_r+0x6fa>
 8017506:	9b07      	ldr	r3, [sp, #28]
 8017508:	f109 37ff 	add.w	r7, r9, #4294967295
 801750c:	42bb      	cmp	r3, r7
 801750e:	bfbf      	itttt	lt
 8017510:	9b07      	ldrlt	r3, [sp, #28]
 8017512:	9707      	strlt	r7, [sp, #28]
 8017514:	1afa      	sublt	r2, r7, r3
 8017516:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017518:	bfbb      	ittet	lt
 801751a:	189b      	addlt	r3, r3, r2
 801751c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801751e:	1bdf      	subge	r7, r3, r7
 8017520:	2700      	movlt	r7, #0
 8017522:	f1b9 0f00 	cmp.w	r9, #0
 8017526:	bfb5      	itete	lt
 8017528:	9b05      	ldrlt	r3, [sp, #20]
 801752a:	9d05      	ldrge	r5, [sp, #20]
 801752c:	eba3 0509 	sublt.w	r5, r3, r9
 8017530:	464b      	movge	r3, r9
 8017532:	bfb8      	it	lt
 8017534:	2300      	movlt	r3, #0
 8017536:	e77e      	b.n	8017436 <_dtoa_r+0x6fe>
 8017538:	9f07      	ldr	r7, [sp, #28]
 801753a:	9d05      	ldr	r5, [sp, #20]
 801753c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801753e:	e783      	b.n	8017448 <_dtoa_r+0x710>
 8017540:	9a07      	ldr	r2, [sp, #28]
 8017542:	e7ab      	b.n	801749c <_dtoa_r+0x764>
 8017544:	2300      	movs	r3, #0
 8017546:	e7d4      	b.n	80174f2 <_dtoa_r+0x7ba>
 8017548:	9b00      	ldr	r3, [sp, #0]
 801754a:	e7d2      	b.n	80174f2 <_dtoa_r+0x7ba>
 801754c:	2300      	movs	r3, #0
 801754e:	9307      	str	r3, [sp, #28]
 8017550:	693b      	ldr	r3, [r7, #16]
 8017552:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017556:	6918      	ldr	r0, [r3, #16]
 8017558:	f000 fdcc 	bl	80180f4 <__hi0bits>
 801755c:	f1c0 0020 	rsb	r0, r0, #32
 8017560:	4440      	add	r0, r8
 8017562:	f010 001f 	ands.w	r0, r0, #31
 8017566:	d047      	beq.n	80175f8 <_dtoa_r+0x8c0>
 8017568:	f1c0 0320 	rsb	r3, r0, #32
 801756c:	2b04      	cmp	r3, #4
 801756e:	dd3b      	ble.n	80175e8 <_dtoa_r+0x8b0>
 8017570:	9b05      	ldr	r3, [sp, #20]
 8017572:	f1c0 001c 	rsb	r0, r0, #28
 8017576:	4403      	add	r3, r0
 8017578:	9305      	str	r3, [sp, #20]
 801757a:	4405      	add	r5, r0
 801757c:	4480      	add	r8, r0
 801757e:	9b05      	ldr	r3, [sp, #20]
 8017580:	2b00      	cmp	r3, #0
 8017582:	dd05      	ble.n	8017590 <_dtoa_r+0x858>
 8017584:	461a      	mov	r2, r3
 8017586:	9904      	ldr	r1, [sp, #16]
 8017588:	4620      	mov	r0, r4
 801758a:	f000 feef 	bl	801836c <__lshift>
 801758e:	9004      	str	r0, [sp, #16]
 8017590:	f1b8 0f00 	cmp.w	r8, #0
 8017594:	dd05      	ble.n	80175a2 <_dtoa_r+0x86a>
 8017596:	4639      	mov	r1, r7
 8017598:	4642      	mov	r2, r8
 801759a:	4620      	mov	r0, r4
 801759c:	f000 fee6 	bl	801836c <__lshift>
 80175a0:	4607      	mov	r7, r0
 80175a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175a4:	b353      	cbz	r3, 80175fc <_dtoa_r+0x8c4>
 80175a6:	4639      	mov	r1, r7
 80175a8:	9804      	ldr	r0, [sp, #16]
 80175aa:	f000 ff33 	bl	8018414 <__mcmp>
 80175ae:	2800      	cmp	r0, #0
 80175b0:	da24      	bge.n	80175fc <_dtoa_r+0x8c4>
 80175b2:	2300      	movs	r3, #0
 80175b4:	220a      	movs	r2, #10
 80175b6:	9904      	ldr	r1, [sp, #16]
 80175b8:	4620      	mov	r0, r4
 80175ba:	f000 fd22 	bl	8018002 <__multadd>
 80175be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175c0:	9004      	str	r0, [sp, #16]
 80175c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	f000 814d 	beq.w	8017866 <_dtoa_r+0xb2e>
 80175cc:	2300      	movs	r3, #0
 80175ce:	4631      	mov	r1, r6
 80175d0:	220a      	movs	r2, #10
 80175d2:	4620      	mov	r0, r4
 80175d4:	f000 fd15 	bl	8018002 <__multadd>
 80175d8:	9b02      	ldr	r3, [sp, #8]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	4606      	mov	r6, r0
 80175de:	dc4f      	bgt.n	8017680 <_dtoa_r+0x948>
 80175e0:	9b06      	ldr	r3, [sp, #24]
 80175e2:	2b02      	cmp	r3, #2
 80175e4:	dd4c      	ble.n	8017680 <_dtoa_r+0x948>
 80175e6:	e011      	b.n	801760c <_dtoa_r+0x8d4>
 80175e8:	d0c9      	beq.n	801757e <_dtoa_r+0x846>
 80175ea:	9a05      	ldr	r2, [sp, #20]
 80175ec:	331c      	adds	r3, #28
 80175ee:	441a      	add	r2, r3
 80175f0:	9205      	str	r2, [sp, #20]
 80175f2:	441d      	add	r5, r3
 80175f4:	4498      	add	r8, r3
 80175f6:	e7c2      	b.n	801757e <_dtoa_r+0x846>
 80175f8:	4603      	mov	r3, r0
 80175fa:	e7f6      	b.n	80175ea <_dtoa_r+0x8b2>
 80175fc:	f1b9 0f00 	cmp.w	r9, #0
 8017600:	dc38      	bgt.n	8017674 <_dtoa_r+0x93c>
 8017602:	9b06      	ldr	r3, [sp, #24]
 8017604:	2b02      	cmp	r3, #2
 8017606:	dd35      	ble.n	8017674 <_dtoa_r+0x93c>
 8017608:	f8cd 9008 	str.w	r9, [sp, #8]
 801760c:	9b02      	ldr	r3, [sp, #8]
 801760e:	b963      	cbnz	r3, 801762a <_dtoa_r+0x8f2>
 8017610:	4639      	mov	r1, r7
 8017612:	2205      	movs	r2, #5
 8017614:	4620      	mov	r0, r4
 8017616:	f000 fcf4 	bl	8018002 <__multadd>
 801761a:	4601      	mov	r1, r0
 801761c:	4607      	mov	r7, r0
 801761e:	9804      	ldr	r0, [sp, #16]
 8017620:	f000 fef8 	bl	8018414 <__mcmp>
 8017624:	2800      	cmp	r0, #0
 8017626:	f73f adcc 	bgt.w	80171c2 <_dtoa_r+0x48a>
 801762a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801762c:	465d      	mov	r5, fp
 801762e:	ea6f 0a03 	mvn.w	sl, r3
 8017632:	f04f 0900 	mov.w	r9, #0
 8017636:	4639      	mov	r1, r7
 8017638:	4620      	mov	r0, r4
 801763a:	f000 fccb 	bl	8017fd4 <_Bfree>
 801763e:	2e00      	cmp	r6, #0
 8017640:	f43f aeb7 	beq.w	80173b2 <_dtoa_r+0x67a>
 8017644:	f1b9 0f00 	cmp.w	r9, #0
 8017648:	d005      	beq.n	8017656 <_dtoa_r+0x91e>
 801764a:	45b1      	cmp	r9, r6
 801764c:	d003      	beq.n	8017656 <_dtoa_r+0x91e>
 801764e:	4649      	mov	r1, r9
 8017650:	4620      	mov	r0, r4
 8017652:	f000 fcbf 	bl	8017fd4 <_Bfree>
 8017656:	4631      	mov	r1, r6
 8017658:	4620      	mov	r0, r4
 801765a:	f000 fcbb 	bl	8017fd4 <_Bfree>
 801765e:	e6a8      	b.n	80173b2 <_dtoa_r+0x67a>
 8017660:	2700      	movs	r7, #0
 8017662:	463e      	mov	r6, r7
 8017664:	e7e1      	b.n	801762a <_dtoa_r+0x8f2>
 8017666:	f8dd a020 	ldr.w	sl, [sp, #32]
 801766a:	463e      	mov	r6, r7
 801766c:	e5a9      	b.n	80171c2 <_dtoa_r+0x48a>
 801766e:	bf00      	nop
 8017670:	40240000 	.word	0x40240000
 8017674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017676:	f8cd 9008 	str.w	r9, [sp, #8]
 801767a:	2b00      	cmp	r3, #0
 801767c:	f000 80fa 	beq.w	8017874 <_dtoa_r+0xb3c>
 8017680:	2d00      	cmp	r5, #0
 8017682:	dd05      	ble.n	8017690 <_dtoa_r+0x958>
 8017684:	4631      	mov	r1, r6
 8017686:	462a      	mov	r2, r5
 8017688:	4620      	mov	r0, r4
 801768a:	f000 fe6f 	bl	801836c <__lshift>
 801768e:	4606      	mov	r6, r0
 8017690:	9b07      	ldr	r3, [sp, #28]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d04c      	beq.n	8017730 <_dtoa_r+0x9f8>
 8017696:	6871      	ldr	r1, [r6, #4]
 8017698:	4620      	mov	r0, r4
 801769a:	f000 fc67 	bl	8017f6c <_Balloc>
 801769e:	6932      	ldr	r2, [r6, #16]
 80176a0:	3202      	adds	r2, #2
 80176a2:	4605      	mov	r5, r0
 80176a4:	0092      	lsls	r2, r2, #2
 80176a6:	f106 010c 	add.w	r1, r6, #12
 80176aa:	300c      	adds	r0, #12
 80176ac:	f7fd fd08 	bl	80150c0 <memcpy>
 80176b0:	2201      	movs	r2, #1
 80176b2:	4629      	mov	r1, r5
 80176b4:	4620      	mov	r0, r4
 80176b6:	f000 fe59 	bl	801836c <__lshift>
 80176ba:	9b00      	ldr	r3, [sp, #0]
 80176bc:	f8cd b014 	str.w	fp, [sp, #20]
 80176c0:	f003 0301 	and.w	r3, r3, #1
 80176c4:	46b1      	mov	r9, r6
 80176c6:	9307      	str	r3, [sp, #28]
 80176c8:	4606      	mov	r6, r0
 80176ca:	4639      	mov	r1, r7
 80176cc:	9804      	ldr	r0, [sp, #16]
 80176ce:	f7ff faa5 	bl	8016c1c <quorem>
 80176d2:	4649      	mov	r1, r9
 80176d4:	4605      	mov	r5, r0
 80176d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80176da:	9804      	ldr	r0, [sp, #16]
 80176dc:	f000 fe9a 	bl	8018414 <__mcmp>
 80176e0:	4632      	mov	r2, r6
 80176e2:	9000      	str	r0, [sp, #0]
 80176e4:	4639      	mov	r1, r7
 80176e6:	4620      	mov	r0, r4
 80176e8:	f000 feae 	bl	8018448 <__mdiff>
 80176ec:	68c3      	ldr	r3, [r0, #12]
 80176ee:	4602      	mov	r2, r0
 80176f0:	bb03      	cbnz	r3, 8017734 <_dtoa_r+0x9fc>
 80176f2:	4601      	mov	r1, r0
 80176f4:	9008      	str	r0, [sp, #32]
 80176f6:	9804      	ldr	r0, [sp, #16]
 80176f8:	f000 fe8c 	bl	8018414 <__mcmp>
 80176fc:	9a08      	ldr	r2, [sp, #32]
 80176fe:	4603      	mov	r3, r0
 8017700:	4611      	mov	r1, r2
 8017702:	4620      	mov	r0, r4
 8017704:	9308      	str	r3, [sp, #32]
 8017706:	f000 fc65 	bl	8017fd4 <_Bfree>
 801770a:	9b08      	ldr	r3, [sp, #32]
 801770c:	b9a3      	cbnz	r3, 8017738 <_dtoa_r+0xa00>
 801770e:	9a06      	ldr	r2, [sp, #24]
 8017710:	b992      	cbnz	r2, 8017738 <_dtoa_r+0xa00>
 8017712:	9a07      	ldr	r2, [sp, #28]
 8017714:	b982      	cbnz	r2, 8017738 <_dtoa_r+0xa00>
 8017716:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801771a:	d029      	beq.n	8017770 <_dtoa_r+0xa38>
 801771c:	9b00      	ldr	r3, [sp, #0]
 801771e:	2b00      	cmp	r3, #0
 8017720:	dd01      	ble.n	8017726 <_dtoa_r+0x9ee>
 8017722:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017726:	9b05      	ldr	r3, [sp, #20]
 8017728:	1c5d      	adds	r5, r3, #1
 801772a:	f883 8000 	strb.w	r8, [r3]
 801772e:	e782      	b.n	8017636 <_dtoa_r+0x8fe>
 8017730:	4630      	mov	r0, r6
 8017732:	e7c2      	b.n	80176ba <_dtoa_r+0x982>
 8017734:	2301      	movs	r3, #1
 8017736:	e7e3      	b.n	8017700 <_dtoa_r+0x9c8>
 8017738:	9a00      	ldr	r2, [sp, #0]
 801773a:	2a00      	cmp	r2, #0
 801773c:	db04      	blt.n	8017748 <_dtoa_r+0xa10>
 801773e:	d125      	bne.n	801778c <_dtoa_r+0xa54>
 8017740:	9a06      	ldr	r2, [sp, #24]
 8017742:	bb1a      	cbnz	r2, 801778c <_dtoa_r+0xa54>
 8017744:	9a07      	ldr	r2, [sp, #28]
 8017746:	bb0a      	cbnz	r2, 801778c <_dtoa_r+0xa54>
 8017748:	2b00      	cmp	r3, #0
 801774a:	ddec      	ble.n	8017726 <_dtoa_r+0x9ee>
 801774c:	2201      	movs	r2, #1
 801774e:	9904      	ldr	r1, [sp, #16]
 8017750:	4620      	mov	r0, r4
 8017752:	f000 fe0b 	bl	801836c <__lshift>
 8017756:	4639      	mov	r1, r7
 8017758:	9004      	str	r0, [sp, #16]
 801775a:	f000 fe5b 	bl	8018414 <__mcmp>
 801775e:	2800      	cmp	r0, #0
 8017760:	dc03      	bgt.n	801776a <_dtoa_r+0xa32>
 8017762:	d1e0      	bne.n	8017726 <_dtoa_r+0x9ee>
 8017764:	f018 0f01 	tst.w	r8, #1
 8017768:	d0dd      	beq.n	8017726 <_dtoa_r+0x9ee>
 801776a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801776e:	d1d8      	bne.n	8017722 <_dtoa_r+0x9ea>
 8017770:	9b05      	ldr	r3, [sp, #20]
 8017772:	9a05      	ldr	r2, [sp, #20]
 8017774:	1c5d      	adds	r5, r3, #1
 8017776:	2339      	movs	r3, #57	; 0x39
 8017778:	7013      	strb	r3, [r2, #0]
 801777a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801777e:	2b39      	cmp	r3, #57	; 0x39
 8017780:	f105 32ff 	add.w	r2, r5, #4294967295
 8017784:	d04f      	beq.n	8017826 <_dtoa_r+0xaee>
 8017786:	3301      	adds	r3, #1
 8017788:	7013      	strb	r3, [r2, #0]
 801778a:	e754      	b.n	8017636 <_dtoa_r+0x8fe>
 801778c:	9a05      	ldr	r2, [sp, #20]
 801778e:	2b00      	cmp	r3, #0
 8017790:	f102 0501 	add.w	r5, r2, #1
 8017794:	dd06      	ble.n	80177a4 <_dtoa_r+0xa6c>
 8017796:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801779a:	d0e9      	beq.n	8017770 <_dtoa_r+0xa38>
 801779c:	f108 0801 	add.w	r8, r8, #1
 80177a0:	9b05      	ldr	r3, [sp, #20]
 80177a2:	e7c2      	b.n	801772a <_dtoa_r+0x9f2>
 80177a4:	9a02      	ldr	r2, [sp, #8]
 80177a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80177aa:	eba5 030b 	sub.w	r3, r5, fp
 80177ae:	4293      	cmp	r3, r2
 80177b0:	d021      	beq.n	80177f6 <_dtoa_r+0xabe>
 80177b2:	2300      	movs	r3, #0
 80177b4:	220a      	movs	r2, #10
 80177b6:	9904      	ldr	r1, [sp, #16]
 80177b8:	4620      	mov	r0, r4
 80177ba:	f000 fc22 	bl	8018002 <__multadd>
 80177be:	45b1      	cmp	r9, r6
 80177c0:	9004      	str	r0, [sp, #16]
 80177c2:	f04f 0300 	mov.w	r3, #0
 80177c6:	f04f 020a 	mov.w	r2, #10
 80177ca:	4649      	mov	r1, r9
 80177cc:	4620      	mov	r0, r4
 80177ce:	d105      	bne.n	80177dc <_dtoa_r+0xaa4>
 80177d0:	f000 fc17 	bl	8018002 <__multadd>
 80177d4:	4681      	mov	r9, r0
 80177d6:	4606      	mov	r6, r0
 80177d8:	9505      	str	r5, [sp, #20]
 80177da:	e776      	b.n	80176ca <_dtoa_r+0x992>
 80177dc:	f000 fc11 	bl	8018002 <__multadd>
 80177e0:	4631      	mov	r1, r6
 80177e2:	4681      	mov	r9, r0
 80177e4:	2300      	movs	r3, #0
 80177e6:	220a      	movs	r2, #10
 80177e8:	4620      	mov	r0, r4
 80177ea:	f000 fc0a 	bl	8018002 <__multadd>
 80177ee:	4606      	mov	r6, r0
 80177f0:	e7f2      	b.n	80177d8 <_dtoa_r+0xaa0>
 80177f2:	f04f 0900 	mov.w	r9, #0
 80177f6:	2201      	movs	r2, #1
 80177f8:	9904      	ldr	r1, [sp, #16]
 80177fa:	4620      	mov	r0, r4
 80177fc:	f000 fdb6 	bl	801836c <__lshift>
 8017800:	4639      	mov	r1, r7
 8017802:	9004      	str	r0, [sp, #16]
 8017804:	f000 fe06 	bl	8018414 <__mcmp>
 8017808:	2800      	cmp	r0, #0
 801780a:	dcb6      	bgt.n	801777a <_dtoa_r+0xa42>
 801780c:	d102      	bne.n	8017814 <_dtoa_r+0xadc>
 801780e:	f018 0f01 	tst.w	r8, #1
 8017812:	d1b2      	bne.n	801777a <_dtoa_r+0xa42>
 8017814:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017818:	2b30      	cmp	r3, #48	; 0x30
 801781a:	f105 32ff 	add.w	r2, r5, #4294967295
 801781e:	f47f af0a 	bne.w	8017636 <_dtoa_r+0x8fe>
 8017822:	4615      	mov	r5, r2
 8017824:	e7f6      	b.n	8017814 <_dtoa_r+0xadc>
 8017826:	4593      	cmp	fp, r2
 8017828:	d105      	bne.n	8017836 <_dtoa_r+0xafe>
 801782a:	2331      	movs	r3, #49	; 0x31
 801782c:	f10a 0a01 	add.w	sl, sl, #1
 8017830:	f88b 3000 	strb.w	r3, [fp]
 8017834:	e6ff      	b.n	8017636 <_dtoa_r+0x8fe>
 8017836:	4615      	mov	r5, r2
 8017838:	e79f      	b.n	801777a <_dtoa_r+0xa42>
 801783a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80178a0 <_dtoa_r+0xb68>
 801783e:	e007      	b.n	8017850 <_dtoa_r+0xb18>
 8017840:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017842:	f8df b060 	ldr.w	fp, [pc, #96]	; 80178a4 <_dtoa_r+0xb6c>
 8017846:	b11b      	cbz	r3, 8017850 <_dtoa_r+0xb18>
 8017848:	f10b 0308 	add.w	r3, fp, #8
 801784c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801784e:	6013      	str	r3, [r2, #0]
 8017850:	4658      	mov	r0, fp
 8017852:	b017      	add	sp, #92	; 0x5c
 8017854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017858:	9b06      	ldr	r3, [sp, #24]
 801785a:	2b01      	cmp	r3, #1
 801785c:	f77f ae35 	ble.w	80174ca <_dtoa_r+0x792>
 8017860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017862:	9307      	str	r3, [sp, #28]
 8017864:	e649      	b.n	80174fa <_dtoa_r+0x7c2>
 8017866:	9b02      	ldr	r3, [sp, #8]
 8017868:	2b00      	cmp	r3, #0
 801786a:	dc03      	bgt.n	8017874 <_dtoa_r+0xb3c>
 801786c:	9b06      	ldr	r3, [sp, #24]
 801786e:	2b02      	cmp	r3, #2
 8017870:	f73f aecc 	bgt.w	801760c <_dtoa_r+0x8d4>
 8017874:	465d      	mov	r5, fp
 8017876:	4639      	mov	r1, r7
 8017878:	9804      	ldr	r0, [sp, #16]
 801787a:	f7ff f9cf 	bl	8016c1c <quorem>
 801787e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017882:	f805 8b01 	strb.w	r8, [r5], #1
 8017886:	9a02      	ldr	r2, [sp, #8]
 8017888:	eba5 030b 	sub.w	r3, r5, fp
 801788c:	429a      	cmp	r2, r3
 801788e:	ddb0      	ble.n	80177f2 <_dtoa_r+0xaba>
 8017890:	2300      	movs	r3, #0
 8017892:	220a      	movs	r2, #10
 8017894:	9904      	ldr	r1, [sp, #16]
 8017896:	4620      	mov	r0, r4
 8017898:	f000 fbb3 	bl	8018002 <__multadd>
 801789c:	9004      	str	r0, [sp, #16]
 801789e:	e7ea      	b.n	8017876 <_dtoa_r+0xb3e>
 80178a0:	08019f7b 	.word	0x08019f7b
 80178a4:	08019dd8 	.word	0x08019dd8

080178a8 <rshift>:
 80178a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178aa:	6906      	ldr	r6, [r0, #16]
 80178ac:	114b      	asrs	r3, r1, #5
 80178ae:	429e      	cmp	r6, r3
 80178b0:	f100 0414 	add.w	r4, r0, #20
 80178b4:	dd30      	ble.n	8017918 <rshift+0x70>
 80178b6:	f011 011f 	ands.w	r1, r1, #31
 80178ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80178be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80178c2:	d108      	bne.n	80178d6 <rshift+0x2e>
 80178c4:	4621      	mov	r1, r4
 80178c6:	42b2      	cmp	r2, r6
 80178c8:	460b      	mov	r3, r1
 80178ca:	d211      	bcs.n	80178f0 <rshift+0x48>
 80178cc:	f852 3b04 	ldr.w	r3, [r2], #4
 80178d0:	f841 3b04 	str.w	r3, [r1], #4
 80178d4:	e7f7      	b.n	80178c6 <rshift+0x1e>
 80178d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80178da:	f1c1 0c20 	rsb	ip, r1, #32
 80178de:	40cd      	lsrs	r5, r1
 80178e0:	3204      	adds	r2, #4
 80178e2:	4623      	mov	r3, r4
 80178e4:	42b2      	cmp	r2, r6
 80178e6:	4617      	mov	r7, r2
 80178e8:	d30c      	bcc.n	8017904 <rshift+0x5c>
 80178ea:	601d      	str	r5, [r3, #0]
 80178ec:	b105      	cbz	r5, 80178f0 <rshift+0x48>
 80178ee:	3304      	adds	r3, #4
 80178f0:	1b1a      	subs	r2, r3, r4
 80178f2:	42a3      	cmp	r3, r4
 80178f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80178f8:	bf08      	it	eq
 80178fa:	2300      	moveq	r3, #0
 80178fc:	6102      	str	r2, [r0, #16]
 80178fe:	bf08      	it	eq
 8017900:	6143      	streq	r3, [r0, #20]
 8017902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017904:	683f      	ldr	r7, [r7, #0]
 8017906:	fa07 f70c 	lsl.w	r7, r7, ip
 801790a:	433d      	orrs	r5, r7
 801790c:	f843 5b04 	str.w	r5, [r3], #4
 8017910:	f852 5b04 	ldr.w	r5, [r2], #4
 8017914:	40cd      	lsrs	r5, r1
 8017916:	e7e5      	b.n	80178e4 <rshift+0x3c>
 8017918:	4623      	mov	r3, r4
 801791a:	e7e9      	b.n	80178f0 <rshift+0x48>

0801791c <__hexdig_fun>:
 801791c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017920:	2b09      	cmp	r3, #9
 8017922:	d802      	bhi.n	801792a <__hexdig_fun+0xe>
 8017924:	3820      	subs	r0, #32
 8017926:	b2c0      	uxtb	r0, r0
 8017928:	4770      	bx	lr
 801792a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801792e:	2b05      	cmp	r3, #5
 8017930:	d801      	bhi.n	8017936 <__hexdig_fun+0x1a>
 8017932:	3847      	subs	r0, #71	; 0x47
 8017934:	e7f7      	b.n	8017926 <__hexdig_fun+0xa>
 8017936:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801793a:	2b05      	cmp	r3, #5
 801793c:	d801      	bhi.n	8017942 <__hexdig_fun+0x26>
 801793e:	3827      	subs	r0, #39	; 0x27
 8017940:	e7f1      	b.n	8017926 <__hexdig_fun+0xa>
 8017942:	2000      	movs	r0, #0
 8017944:	4770      	bx	lr

08017946 <__gethex>:
 8017946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801794a:	b08b      	sub	sp, #44	; 0x2c
 801794c:	468a      	mov	sl, r1
 801794e:	9002      	str	r0, [sp, #8]
 8017950:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017952:	9306      	str	r3, [sp, #24]
 8017954:	4690      	mov	r8, r2
 8017956:	f000 fadf 	bl	8017f18 <__localeconv_l>
 801795a:	6803      	ldr	r3, [r0, #0]
 801795c:	9303      	str	r3, [sp, #12]
 801795e:	4618      	mov	r0, r3
 8017960:	f7e8 fc4e 	bl	8000200 <strlen>
 8017964:	9b03      	ldr	r3, [sp, #12]
 8017966:	9001      	str	r0, [sp, #4]
 8017968:	4403      	add	r3, r0
 801796a:	f04f 0b00 	mov.w	fp, #0
 801796e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017972:	9307      	str	r3, [sp, #28]
 8017974:	f8da 3000 	ldr.w	r3, [sl]
 8017978:	3302      	adds	r3, #2
 801797a:	461f      	mov	r7, r3
 801797c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017980:	2830      	cmp	r0, #48	; 0x30
 8017982:	d06c      	beq.n	8017a5e <__gethex+0x118>
 8017984:	f7ff ffca 	bl	801791c <__hexdig_fun>
 8017988:	4604      	mov	r4, r0
 801798a:	2800      	cmp	r0, #0
 801798c:	d16a      	bne.n	8017a64 <__gethex+0x11e>
 801798e:	9a01      	ldr	r2, [sp, #4]
 8017990:	9903      	ldr	r1, [sp, #12]
 8017992:	4638      	mov	r0, r7
 8017994:	f001 fc36 	bl	8019204 <strncmp>
 8017998:	2800      	cmp	r0, #0
 801799a:	d166      	bne.n	8017a6a <__gethex+0x124>
 801799c:	9b01      	ldr	r3, [sp, #4]
 801799e:	5cf8      	ldrb	r0, [r7, r3]
 80179a0:	18fe      	adds	r6, r7, r3
 80179a2:	f7ff ffbb 	bl	801791c <__hexdig_fun>
 80179a6:	2800      	cmp	r0, #0
 80179a8:	d062      	beq.n	8017a70 <__gethex+0x12a>
 80179aa:	4633      	mov	r3, r6
 80179ac:	7818      	ldrb	r0, [r3, #0]
 80179ae:	2830      	cmp	r0, #48	; 0x30
 80179b0:	461f      	mov	r7, r3
 80179b2:	f103 0301 	add.w	r3, r3, #1
 80179b6:	d0f9      	beq.n	80179ac <__gethex+0x66>
 80179b8:	f7ff ffb0 	bl	801791c <__hexdig_fun>
 80179bc:	fab0 f580 	clz	r5, r0
 80179c0:	096d      	lsrs	r5, r5, #5
 80179c2:	4634      	mov	r4, r6
 80179c4:	f04f 0b01 	mov.w	fp, #1
 80179c8:	463a      	mov	r2, r7
 80179ca:	4616      	mov	r6, r2
 80179cc:	3201      	adds	r2, #1
 80179ce:	7830      	ldrb	r0, [r6, #0]
 80179d0:	f7ff ffa4 	bl	801791c <__hexdig_fun>
 80179d4:	2800      	cmp	r0, #0
 80179d6:	d1f8      	bne.n	80179ca <__gethex+0x84>
 80179d8:	9a01      	ldr	r2, [sp, #4]
 80179da:	9903      	ldr	r1, [sp, #12]
 80179dc:	4630      	mov	r0, r6
 80179de:	f001 fc11 	bl	8019204 <strncmp>
 80179e2:	b950      	cbnz	r0, 80179fa <__gethex+0xb4>
 80179e4:	b954      	cbnz	r4, 80179fc <__gethex+0xb6>
 80179e6:	9b01      	ldr	r3, [sp, #4]
 80179e8:	18f4      	adds	r4, r6, r3
 80179ea:	4622      	mov	r2, r4
 80179ec:	4616      	mov	r6, r2
 80179ee:	3201      	adds	r2, #1
 80179f0:	7830      	ldrb	r0, [r6, #0]
 80179f2:	f7ff ff93 	bl	801791c <__hexdig_fun>
 80179f6:	2800      	cmp	r0, #0
 80179f8:	d1f8      	bne.n	80179ec <__gethex+0xa6>
 80179fa:	b10c      	cbz	r4, 8017a00 <__gethex+0xba>
 80179fc:	1ba4      	subs	r4, r4, r6
 80179fe:	00a4      	lsls	r4, r4, #2
 8017a00:	7833      	ldrb	r3, [r6, #0]
 8017a02:	2b50      	cmp	r3, #80	; 0x50
 8017a04:	d001      	beq.n	8017a0a <__gethex+0xc4>
 8017a06:	2b70      	cmp	r3, #112	; 0x70
 8017a08:	d140      	bne.n	8017a8c <__gethex+0x146>
 8017a0a:	7873      	ldrb	r3, [r6, #1]
 8017a0c:	2b2b      	cmp	r3, #43	; 0x2b
 8017a0e:	d031      	beq.n	8017a74 <__gethex+0x12e>
 8017a10:	2b2d      	cmp	r3, #45	; 0x2d
 8017a12:	d033      	beq.n	8017a7c <__gethex+0x136>
 8017a14:	1c71      	adds	r1, r6, #1
 8017a16:	f04f 0900 	mov.w	r9, #0
 8017a1a:	7808      	ldrb	r0, [r1, #0]
 8017a1c:	f7ff ff7e 	bl	801791c <__hexdig_fun>
 8017a20:	1e43      	subs	r3, r0, #1
 8017a22:	b2db      	uxtb	r3, r3
 8017a24:	2b18      	cmp	r3, #24
 8017a26:	d831      	bhi.n	8017a8c <__gethex+0x146>
 8017a28:	f1a0 0210 	sub.w	r2, r0, #16
 8017a2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017a30:	f7ff ff74 	bl	801791c <__hexdig_fun>
 8017a34:	1e43      	subs	r3, r0, #1
 8017a36:	b2db      	uxtb	r3, r3
 8017a38:	2b18      	cmp	r3, #24
 8017a3a:	d922      	bls.n	8017a82 <__gethex+0x13c>
 8017a3c:	f1b9 0f00 	cmp.w	r9, #0
 8017a40:	d000      	beq.n	8017a44 <__gethex+0xfe>
 8017a42:	4252      	negs	r2, r2
 8017a44:	4414      	add	r4, r2
 8017a46:	f8ca 1000 	str.w	r1, [sl]
 8017a4a:	b30d      	cbz	r5, 8017a90 <__gethex+0x14a>
 8017a4c:	f1bb 0f00 	cmp.w	fp, #0
 8017a50:	bf0c      	ite	eq
 8017a52:	2706      	moveq	r7, #6
 8017a54:	2700      	movne	r7, #0
 8017a56:	4638      	mov	r0, r7
 8017a58:	b00b      	add	sp, #44	; 0x2c
 8017a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a5e:	f10b 0b01 	add.w	fp, fp, #1
 8017a62:	e78a      	b.n	801797a <__gethex+0x34>
 8017a64:	2500      	movs	r5, #0
 8017a66:	462c      	mov	r4, r5
 8017a68:	e7ae      	b.n	80179c8 <__gethex+0x82>
 8017a6a:	463e      	mov	r6, r7
 8017a6c:	2501      	movs	r5, #1
 8017a6e:	e7c7      	b.n	8017a00 <__gethex+0xba>
 8017a70:	4604      	mov	r4, r0
 8017a72:	e7fb      	b.n	8017a6c <__gethex+0x126>
 8017a74:	f04f 0900 	mov.w	r9, #0
 8017a78:	1cb1      	adds	r1, r6, #2
 8017a7a:	e7ce      	b.n	8017a1a <__gethex+0xd4>
 8017a7c:	f04f 0901 	mov.w	r9, #1
 8017a80:	e7fa      	b.n	8017a78 <__gethex+0x132>
 8017a82:	230a      	movs	r3, #10
 8017a84:	fb03 0202 	mla	r2, r3, r2, r0
 8017a88:	3a10      	subs	r2, #16
 8017a8a:	e7cf      	b.n	8017a2c <__gethex+0xe6>
 8017a8c:	4631      	mov	r1, r6
 8017a8e:	e7da      	b.n	8017a46 <__gethex+0x100>
 8017a90:	1bf3      	subs	r3, r6, r7
 8017a92:	3b01      	subs	r3, #1
 8017a94:	4629      	mov	r1, r5
 8017a96:	2b07      	cmp	r3, #7
 8017a98:	dc49      	bgt.n	8017b2e <__gethex+0x1e8>
 8017a9a:	9802      	ldr	r0, [sp, #8]
 8017a9c:	f000 fa66 	bl	8017f6c <_Balloc>
 8017aa0:	9b01      	ldr	r3, [sp, #4]
 8017aa2:	f100 0914 	add.w	r9, r0, #20
 8017aa6:	f04f 0b00 	mov.w	fp, #0
 8017aaa:	f1c3 0301 	rsb	r3, r3, #1
 8017aae:	4605      	mov	r5, r0
 8017ab0:	f8cd 9010 	str.w	r9, [sp, #16]
 8017ab4:	46da      	mov	sl, fp
 8017ab6:	9308      	str	r3, [sp, #32]
 8017ab8:	42b7      	cmp	r7, r6
 8017aba:	d33b      	bcc.n	8017b34 <__gethex+0x1ee>
 8017abc:	9804      	ldr	r0, [sp, #16]
 8017abe:	f840 ab04 	str.w	sl, [r0], #4
 8017ac2:	eba0 0009 	sub.w	r0, r0, r9
 8017ac6:	1080      	asrs	r0, r0, #2
 8017ac8:	6128      	str	r0, [r5, #16]
 8017aca:	0147      	lsls	r7, r0, #5
 8017acc:	4650      	mov	r0, sl
 8017ace:	f000 fb11 	bl	80180f4 <__hi0bits>
 8017ad2:	f8d8 6000 	ldr.w	r6, [r8]
 8017ad6:	1a3f      	subs	r7, r7, r0
 8017ad8:	42b7      	cmp	r7, r6
 8017ada:	dd64      	ble.n	8017ba6 <__gethex+0x260>
 8017adc:	1bbf      	subs	r7, r7, r6
 8017ade:	4639      	mov	r1, r7
 8017ae0:	4628      	mov	r0, r5
 8017ae2:	f000 fe21 	bl	8018728 <__any_on>
 8017ae6:	4682      	mov	sl, r0
 8017ae8:	b178      	cbz	r0, 8017b0a <__gethex+0x1c4>
 8017aea:	1e7b      	subs	r3, r7, #1
 8017aec:	1159      	asrs	r1, r3, #5
 8017aee:	f003 021f 	and.w	r2, r3, #31
 8017af2:	f04f 0a01 	mov.w	sl, #1
 8017af6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017afa:	fa0a f202 	lsl.w	r2, sl, r2
 8017afe:	420a      	tst	r2, r1
 8017b00:	d003      	beq.n	8017b0a <__gethex+0x1c4>
 8017b02:	4553      	cmp	r3, sl
 8017b04:	dc46      	bgt.n	8017b94 <__gethex+0x24e>
 8017b06:	f04f 0a02 	mov.w	sl, #2
 8017b0a:	4639      	mov	r1, r7
 8017b0c:	4628      	mov	r0, r5
 8017b0e:	f7ff fecb 	bl	80178a8 <rshift>
 8017b12:	443c      	add	r4, r7
 8017b14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017b18:	42a3      	cmp	r3, r4
 8017b1a:	da52      	bge.n	8017bc2 <__gethex+0x27c>
 8017b1c:	4629      	mov	r1, r5
 8017b1e:	9802      	ldr	r0, [sp, #8]
 8017b20:	f000 fa58 	bl	8017fd4 <_Bfree>
 8017b24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017b26:	2300      	movs	r3, #0
 8017b28:	6013      	str	r3, [r2, #0]
 8017b2a:	27a3      	movs	r7, #163	; 0xa3
 8017b2c:	e793      	b.n	8017a56 <__gethex+0x110>
 8017b2e:	3101      	adds	r1, #1
 8017b30:	105b      	asrs	r3, r3, #1
 8017b32:	e7b0      	b.n	8017a96 <__gethex+0x150>
 8017b34:	1e73      	subs	r3, r6, #1
 8017b36:	9305      	str	r3, [sp, #20]
 8017b38:	9a07      	ldr	r2, [sp, #28]
 8017b3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017b3e:	4293      	cmp	r3, r2
 8017b40:	d018      	beq.n	8017b74 <__gethex+0x22e>
 8017b42:	f1bb 0f20 	cmp.w	fp, #32
 8017b46:	d107      	bne.n	8017b58 <__gethex+0x212>
 8017b48:	9b04      	ldr	r3, [sp, #16]
 8017b4a:	f8c3 a000 	str.w	sl, [r3]
 8017b4e:	3304      	adds	r3, #4
 8017b50:	f04f 0a00 	mov.w	sl, #0
 8017b54:	9304      	str	r3, [sp, #16]
 8017b56:	46d3      	mov	fp, sl
 8017b58:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017b5c:	f7ff fede 	bl	801791c <__hexdig_fun>
 8017b60:	f000 000f 	and.w	r0, r0, #15
 8017b64:	fa00 f00b 	lsl.w	r0, r0, fp
 8017b68:	ea4a 0a00 	orr.w	sl, sl, r0
 8017b6c:	f10b 0b04 	add.w	fp, fp, #4
 8017b70:	9b05      	ldr	r3, [sp, #20]
 8017b72:	e00d      	b.n	8017b90 <__gethex+0x24a>
 8017b74:	9b05      	ldr	r3, [sp, #20]
 8017b76:	9a08      	ldr	r2, [sp, #32]
 8017b78:	4413      	add	r3, r2
 8017b7a:	42bb      	cmp	r3, r7
 8017b7c:	d3e1      	bcc.n	8017b42 <__gethex+0x1fc>
 8017b7e:	4618      	mov	r0, r3
 8017b80:	9a01      	ldr	r2, [sp, #4]
 8017b82:	9903      	ldr	r1, [sp, #12]
 8017b84:	9309      	str	r3, [sp, #36]	; 0x24
 8017b86:	f001 fb3d 	bl	8019204 <strncmp>
 8017b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b8c:	2800      	cmp	r0, #0
 8017b8e:	d1d8      	bne.n	8017b42 <__gethex+0x1fc>
 8017b90:	461e      	mov	r6, r3
 8017b92:	e791      	b.n	8017ab8 <__gethex+0x172>
 8017b94:	1eb9      	subs	r1, r7, #2
 8017b96:	4628      	mov	r0, r5
 8017b98:	f000 fdc6 	bl	8018728 <__any_on>
 8017b9c:	2800      	cmp	r0, #0
 8017b9e:	d0b2      	beq.n	8017b06 <__gethex+0x1c0>
 8017ba0:	f04f 0a03 	mov.w	sl, #3
 8017ba4:	e7b1      	b.n	8017b0a <__gethex+0x1c4>
 8017ba6:	da09      	bge.n	8017bbc <__gethex+0x276>
 8017ba8:	1bf7      	subs	r7, r6, r7
 8017baa:	4629      	mov	r1, r5
 8017bac:	463a      	mov	r2, r7
 8017bae:	9802      	ldr	r0, [sp, #8]
 8017bb0:	f000 fbdc 	bl	801836c <__lshift>
 8017bb4:	1be4      	subs	r4, r4, r7
 8017bb6:	4605      	mov	r5, r0
 8017bb8:	f100 0914 	add.w	r9, r0, #20
 8017bbc:	f04f 0a00 	mov.w	sl, #0
 8017bc0:	e7a8      	b.n	8017b14 <__gethex+0x1ce>
 8017bc2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017bc6:	42a0      	cmp	r0, r4
 8017bc8:	dd6a      	ble.n	8017ca0 <__gethex+0x35a>
 8017bca:	1b04      	subs	r4, r0, r4
 8017bcc:	42a6      	cmp	r6, r4
 8017bce:	dc2e      	bgt.n	8017c2e <__gethex+0x2e8>
 8017bd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017bd4:	2b02      	cmp	r3, #2
 8017bd6:	d022      	beq.n	8017c1e <__gethex+0x2d8>
 8017bd8:	2b03      	cmp	r3, #3
 8017bda:	d024      	beq.n	8017c26 <__gethex+0x2e0>
 8017bdc:	2b01      	cmp	r3, #1
 8017bde:	d115      	bne.n	8017c0c <__gethex+0x2c6>
 8017be0:	42a6      	cmp	r6, r4
 8017be2:	d113      	bne.n	8017c0c <__gethex+0x2c6>
 8017be4:	2e01      	cmp	r6, #1
 8017be6:	dc0b      	bgt.n	8017c00 <__gethex+0x2ba>
 8017be8:	9a06      	ldr	r2, [sp, #24]
 8017bea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017bee:	6013      	str	r3, [r2, #0]
 8017bf0:	2301      	movs	r3, #1
 8017bf2:	612b      	str	r3, [r5, #16]
 8017bf4:	f8c9 3000 	str.w	r3, [r9]
 8017bf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017bfa:	2762      	movs	r7, #98	; 0x62
 8017bfc:	601d      	str	r5, [r3, #0]
 8017bfe:	e72a      	b.n	8017a56 <__gethex+0x110>
 8017c00:	1e71      	subs	r1, r6, #1
 8017c02:	4628      	mov	r0, r5
 8017c04:	f000 fd90 	bl	8018728 <__any_on>
 8017c08:	2800      	cmp	r0, #0
 8017c0a:	d1ed      	bne.n	8017be8 <__gethex+0x2a2>
 8017c0c:	4629      	mov	r1, r5
 8017c0e:	9802      	ldr	r0, [sp, #8]
 8017c10:	f000 f9e0 	bl	8017fd4 <_Bfree>
 8017c14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017c16:	2300      	movs	r3, #0
 8017c18:	6013      	str	r3, [r2, #0]
 8017c1a:	2750      	movs	r7, #80	; 0x50
 8017c1c:	e71b      	b.n	8017a56 <__gethex+0x110>
 8017c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d0e1      	beq.n	8017be8 <__gethex+0x2a2>
 8017c24:	e7f2      	b.n	8017c0c <__gethex+0x2c6>
 8017c26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d1dd      	bne.n	8017be8 <__gethex+0x2a2>
 8017c2c:	e7ee      	b.n	8017c0c <__gethex+0x2c6>
 8017c2e:	1e67      	subs	r7, r4, #1
 8017c30:	f1ba 0f00 	cmp.w	sl, #0
 8017c34:	d131      	bne.n	8017c9a <__gethex+0x354>
 8017c36:	b127      	cbz	r7, 8017c42 <__gethex+0x2fc>
 8017c38:	4639      	mov	r1, r7
 8017c3a:	4628      	mov	r0, r5
 8017c3c:	f000 fd74 	bl	8018728 <__any_on>
 8017c40:	4682      	mov	sl, r0
 8017c42:	117a      	asrs	r2, r7, #5
 8017c44:	2301      	movs	r3, #1
 8017c46:	f007 071f 	and.w	r7, r7, #31
 8017c4a:	fa03 f707 	lsl.w	r7, r3, r7
 8017c4e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017c52:	4621      	mov	r1, r4
 8017c54:	421f      	tst	r7, r3
 8017c56:	4628      	mov	r0, r5
 8017c58:	bf18      	it	ne
 8017c5a:	f04a 0a02 	orrne.w	sl, sl, #2
 8017c5e:	1b36      	subs	r6, r6, r4
 8017c60:	f7ff fe22 	bl	80178a8 <rshift>
 8017c64:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017c68:	2702      	movs	r7, #2
 8017c6a:	f1ba 0f00 	cmp.w	sl, #0
 8017c6e:	d048      	beq.n	8017d02 <__gethex+0x3bc>
 8017c70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017c74:	2b02      	cmp	r3, #2
 8017c76:	d015      	beq.n	8017ca4 <__gethex+0x35e>
 8017c78:	2b03      	cmp	r3, #3
 8017c7a:	d017      	beq.n	8017cac <__gethex+0x366>
 8017c7c:	2b01      	cmp	r3, #1
 8017c7e:	d109      	bne.n	8017c94 <__gethex+0x34e>
 8017c80:	f01a 0f02 	tst.w	sl, #2
 8017c84:	d006      	beq.n	8017c94 <__gethex+0x34e>
 8017c86:	f8d9 3000 	ldr.w	r3, [r9]
 8017c8a:	ea4a 0a03 	orr.w	sl, sl, r3
 8017c8e:	f01a 0f01 	tst.w	sl, #1
 8017c92:	d10e      	bne.n	8017cb2 <__gethex+0x36c>
 8017c94:	f047 0710 	orr.w	r7, r7, #16
 8017c98:	e033      	b.n	8017d02 <__gethex+0x3bc>
 8017c9a:	f04f 0a01 	mov.w	sl, #1
 8017c9e:	e7d0      	b.n	8017c42 <__gethex+0x2fc>
 8017ca0:	2701      	movs	r7, #1
 8017ca2:	e7e2      	b.n	8017c6a <__gethex+0x324>
 8017ca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017ca6:	f1c3 0301 	rsb	r3, r3, #1
 8017caa:	9315      	str	r3, [sp, #84]	; 0x54
 8017cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d0f0      	beq.n	8017c94 <__gethex+0x34e>
 8017cb2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017cb6:	f105 0314 	add.w	r3, r5, #20
 8017cba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017cbe:	eb03 010a 	add.w	r1, r3, sl
 8017cc2:	f04f 0c00 	mov.w	ip, #0
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ccc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017cd0:	d01c      	beq.n	8017d0c <__gethex+0x3c6>
 8017cd2:	3201      	adds	r2, #1
 8017cd4:	6002      	str	r2, [r0, #0]
 8017cd6:	2f02      	cmp	r7, #2
 8017cd8:	f105 0314 	add.w	r3, r5, #20
 8017cdc:	d138      	bne.n	8017d50 <__gethex+0x40a>
 8017cde:	f8d8 2000 	ldr.w	r2, [r8]
 8017ce2:	3a01      	subs	r2, #1
 8017ce4:	42b2      	cmp	r2, r6
 8017ce6:	d10a      	bne.n	8017cfe <__gethex+0x3b8>
 8017ce8:	1171      	asrs	r1, r6, #5
 8017cea:	2201      	movs	r2, #1
 8017cec:	f006 061f 	and.w	r6, r6, #31
 8017cf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017cf4:	fa02 f606 	lsl.w	r6, r2, r6
 8017cf8:	421e      	tst	r6, r3
 8017cfa:	bf18      	it	ne
 8017cfc:	4617      	movne	r7, r2
 8017cfe:	f047 0720 	orr.w	r7, r7, #32
 8017d02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017d04:	601d      	str	r5, [r3, #0]
 8017d06:	9b06      	ldr	r3, [sp, #24]
 8017d08:	601c      	str	r4, [r3, #0]
 8017d0a:	e6a4      	b.n	8017a56 <__gethex+0x110>
 8017d0c:	4299      	cmp	r1, r3
 8017d0e:	f843 cc04 	str.w	ip, [r3, #-4]
 8017d12:	d8d8      	bhi.n	8017cc6 <__gethex+0x380>
 8017d14:	68ab      	ldr	r3, [r5, #8]
 8017d16:	4599      	cmp	r9, r3
 8017d18:	db12      	blt.n	8017d40 <__gethex+0x3fa>
 8017d1a:	6869      	ldr	r1, [r5, #4]
 8017d1c:	9802      	ldr	r0, [sp, #8]
 8017d1e:	3101      	adds	r1, #1
 8017d20:	f000 f924 	bl	8017f6c <_Balloc>
 8017d24:	692a      	ldr	r2, [r5, #16]
 8017d26:	3202      	adds	r2, #2
 8017d28:	f105 010c 	add.w	r1, r5, #12
 8017d2c:	4683      	mov	fp, r0
 8017d2e:	0092      	lsls	r2, r2, #2
 8017d30:	300c      	adds	r0, #12
 8017d32:	f7fd f9c5 	bl	80150c0 <memcpy>
 8017d36:	4629      	mov	r1, r5
 8017d38:	9802      	ldr	r0, [sp, #8]
 8017d3a:	f000 f94b 	bl	8017fd4 <_Bfree>
 8017d3e:	465d      	mov	r5, fp
 8017d40:	692b      	ldr	r3, [r5, #16]
 8017d42:	1c5a      	adds	r2, r3, #1
 8017d44:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017d48:	612a      	str	r2, [r5, #16]
 8017d4a:	2201      	movs	r2, #1
 8017d4c:	615a      	str	r2, [r3, #20]
 8017d4e:	e7c2      	b.n	8017cd6 <__gethex+0x390>
 8017d50:	692a      	ldr	r2, [r5, #16]
 8017d52:	454a      	cmp	r2, r9
 8017d54:	dd0b      	ble.n	8017d6e <__gethex+0x428>
 8017d56:	2101      	movs	r1, #1
 8017d58:	4628      	mov	r0, r5
 8017d5a:	f7ff fda5 	bl	80178a8 <rshift>
 8017d5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017d62:	3401      	adds	r4, #1
 8017d64:	42a3      	cmp	r3, r4
 8017d66:	f6ff aed9 	blt.w	8017b1c <__gethex+0x1d6>
 8017d6a:	2701      	movs	r7, #1
 8017d6c:	e7c7      	b.n	8017cfe <__gethex+0x3b8>
 8017d6e:	f016 061f 	ands.w	r6, r6, #31
 8017d72:	d0fa      	beq.n	8017d6a <__gethex+0x424>
 8017d74:	449a      	add	sl, r3
 8017d76:	f1c6 0620 	rsb	r6, r6, #32
 8017d7a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017d7e:	f000 f9b9 	bl	80180f4 <__hi0bits>
 8017d82:	42b0      	cmp	r0, r6
 8017d84:	dbe7      	blt.n	8017d56 <__gethex+0x410>
 8017d86:	e7f0      	b.n	8017d6a <__gethex+0x424>

08017d88 <L_shift>:
 8017d88:	f1c2 0208 	rsb	r2, r2, #8
 8017d8c:	0092      	lsls	r2, r2, #2
 8017d8e:	b570      	push	{r4, r5, r6, lr}
 8017d90:	f1c2 0620 	rsb	r6, r2, #32
 8017d94:	6843      	ldr	r3, [r0, #4]
 8017d96:	6804      	ldr	r4, [r0, #0]
 8017d98:	fa03 f506 	lsl.w	r5, r3, r6
 8017d9c:	432c      	orrs	r4, r5
 8017d9e:	40d3      	lsrs	r3, r2
 8017da0:	6004      	str	r4, [r0, #0]
 8017da2:	f840 3f04 	str.w	r3, [r0, #4]!
 8017da6:	4288      	cmp	r0, r1
 8017da8:	d3f4      	bcc.n	8017d94 <L_shift+0xc>
 8017daa:	bd70      	pop	{r4, r5, r6, pc}

08017dac <__match>:
 8017dac:	b530      	push	{r4, r5, lr}
 8017dae:	6803      	ldr	r3, [r0, #0]
 8017db0:	3301      	adds	r3, #1
 8017db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017db6:	b914      	cbnz	r4, 8017dbe <__match+0x12>
 8017db8:	6003      	str	r3, [r0, #0]
 8017dba:	2001      	movs	r0, #1
 8017dbc:	bd30      	pop	{r4, r5, pc}
 8017dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017dc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017dc6:	2d19      	cmp	r5, #25
 8017dc8:	bf98      	it	ls
 8017dca:	3220      	addls	r2, #32
 8017dcc:	42a2      	cmp	r2, r4
 8017dce:	d0f0      	beq.n	8017db2 <__match+0x6>
 8017dd0:	2000      	movs	r0, #0
 8017dd2:	e7f3      	b.n	8017dbc <__match+0x10>

08017dd4 <__hexnan>:
 8017dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dd8:	680b      	ldr	r3, [r1, #0]
 8017dda:	6801      	ldr	r1, [r0, #0]
 8017ddc:	115f      	asrs	r7, r3, #5
 8017dde:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017de2:	f013 031f 	ands.w	r3, r3, #31
 8017de6:	b087      	sub	sp, #28
 8017de8:	bf18      	it	ne
 8017dea:	3704      	addne	r7, #4
 8017dec:	2500      	movs	r5, #0
 8017dee:	1f3e      	subs	r6, r7, #4
 8017df0:	4682      	mov	sl, r0
 8017df2:	4690      	mov	r8, r2
 8017df4:	9301      	str	r3, [sp, #4]
 8017df6:	f847 5c04 	str.w	r5, [r7, #-4]
 8017dfa:	46b1      	mov	r9, r6
 8017dfc:	4634      	mov	r4, r6
 8017dfe:	9502      	str	r5, [sp, #8]
 8017e00:	46ab      	mov	fp, r5
 8017e02:	784a      	ldrb	r2, [r1, #1]
 8017e04:	1c4b      	adds	r3, r1, #1
 8017e06:	9303      	str	r3, [sp, #12]
 8017e08:	b342      	cbz	r2, 8017e5c <__hexnan+0x88>
 8017e0a:	4610      	mov	r0, r2
 8017e0c:	9105      	str	r1, [sp, #20]
 8017e0e:	9204      	str	r2, [sp, #16]
 8017e10:	f7ff fd84 	bl	801791c <__hexdig_fun>
 8017e14:	2800      	cmp	r0, #0
 8017e16:	d143      	bne.n	8017ea0 <__hexnan+0xcc>
 8017e18:	9a04      	ldr	r2, [sp, #16]
 8017e1a:	9905      	ldr	r1, [sp, #20]
 8017e1c:	2a20      	cmp	r2, #32
 8017e1e:	d818      	bhi.n	8017e52 <__hexnan+0x7e>
 8017e20:	9b02      	ldr	r3, [sp, #8]
 8017e22:	459b      	cmp	fp, r3
 8017e24:	dd13      	ble.n	8017e4e <__hexnan+0x7a>
 8017e26:	454c      	cmp	r4, r9
 8017e28:	d206      	bcs.n	8017e38 <__hexnan+0x64>
 8017e2a:	2d07      	cmp	r5, #7
 8017e2c:	dc04      	bgt.n	8017e38 <__hexnan+0x64>
 8017e2e:	462a      	mov	r2, r5
 8017e30:	4649      	mov	r1, r9
 8017e32:	4620      	mov	r0, r4
 8017e34:	f7ff ffa8 	bl	8017d88 <L_shift>
 8017e38:	4544      	cmp	r4, r8
 8017e3a:	d944      	bls.n	8017ec6 <__hexnan+0xf2>
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	f1a4 0904 	sub.w	r9, r4, #4
 8017e42:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e46:	f8cd b008 	str.w	fp, [sp, #8]
 8017e4a:	464c      	mov	r4, r9
 8017e4c:	461d      	mov	r5, r3
 8017e4e:	9903      	ldr	r1, [sp, #12]
 8017e50:	e7d7      	b.n	8017e02 <__hexnan+0x2e>
 8017e52:	2a29      	cmp	r2, #41	; 0x29
 8017e54:	d14a      	bne.n	8017eec <__hexnan+0x118>
 8017e56:	3102      	adds	r1, #2
 8017e58:	f8ca 1000 	str.w	r1, [sl]
 8017e5c:	f1bb 0f00 	cmp.w	fp, #0
 8017e60:	d044      	beq.n	8017eec <__hexnan+0x118>
 8017e62:	454c      	cmp	r4, r9
 8017e64:	d206      	bcs.n	8017e74 <__hexnan+0xa0>
 8017e66:	2d07      	cmp	r5, #7
 8017e68:	dc04      	bgt.n	8017e74 <__hexnan+0xa0>
 8017e6a:	462a      	mov	r2, r5
 8017e6c:	4649      	mov	r1, r9
 8017e6e:	4620      	mov	r0, r4
 8017e70:	f7ff ff8a 	bl	8017d88 <L_shift>
 8017e74:	4544      	cmp	r4, r8
 8017e76:	d928      	bls.n	8017eca <__hexnan+0xf6>
 8017e78:	4643      	mov	r3, r8
 8017e7a:	f854 2b04 	ldr.w	r2, [r4], #4
 8017e7e:	f843 2b04 	str.w	r2, [r3], #4
 8017e82:	42a6      	cmp	r6, r4
 8017e84:	d2f9      	bcs.n	8017e7a <__hexnan+0xa6>
 8017e86:	2200      	movs	r2, #0
 8017e88:	f843 2b04 	str.w	r2, [r3], #4
 8017e8c:	429e      	cmp	r6, r3
 8017e8e:	d2fb      	bcs.n	8017e88 <__hexnan+0xb4>
 8017e90:	6833      	ldr	r3, [r6, #0]
 8017e92:	b91b      	cbnz	r3, 8017e9c <__hexnan+0xc8>
 8017e94:	4546      	cmp	r6, r8
 8017e96:	d127      	bne.n	8017ee8 <__hexnan+0x114>
 8017e98:	2301      	movs	r3, #1
 8017e9a:	6033      	str	r3, [r6, #0]
 8017e9c:	2005      	movs	r0, #5
 8017e9e:	e026      	b.n	8017eee <__hexnan+0x11a>
 8017ea0:	3501      	adds	r5, #1
 8017ea2:	2d08      	cmp	r5, #8
 8017ea4:	f10b 0b01 	add.w	fp, fp, #1
 8017ea8:	dd06      	ble.n	8017eb8 <__hexnan+0xe4>
 8017eaa:	4544      	cmp	r4, r8
 8017eac:	d9cf      	bls.n	8017e4e <__hexnan+0x7a>
 8017eae:	2300      	movs	r3, #0
 8017eb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8017eb4:	2501      	movs	r5, #1
 8017eb6:	3c04      	subs	r4, #4
 8017eb8:	6822      	ldr	r2, [r4, #0]
 8017eba:	f000 000f 	and.w	r0, r0, #15
 8017ebe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017ec2:	6020      	str	r0, [r4, #0]
 8017ec4:	e7c3      	b.n	8017e4e <__hexnan+0x7a>
 8017ec6:	2508      	movs	r5, #8
 8017ec8:	e7c1      	b.n	8017e4e <__hexnan+0x7a>
 8017eca:	9b01      	ldr	r3, [sp, #4]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d0df      	beq.n	8017e90 <__hexnan+0xbc>
 8017ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8017ed4:	f1c3 0320 	rsb	r3, r3, #32
 8017ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8017edc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017ee0:	401a      	ands	r2, r3
 8017ee2:	f847 2c04 	str.w	r2, [r7, #-4]
 8017ee6:	e7d3      	b.n	8017e90 <__hexnan+0xbc>
 8017ee8:	3e04      	subs	r6, #4
 8017eea:	e7d1      	b.n	8017e90 <__hexnan+0xbc>
 8017eec:	2004      	movs	r0, #4
 8017eee:	b007      	add	sp, #28
 8017ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ef4 <__locale_ctype_ptr_l>:
 8017ef4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017ef8:	4770      	bx	lr
	...

08017efc <__locale_ctype_ptr>:
 8017efc:	4b04      	ldr	r3, [pc, #16]	; (8017f10 <__locale_ctype_ptr+0x14>)
 8017efe:	4a05      	ldr	r2, [pc, #20]	; (8017f14 <__locale_ctype_ptr+0x18>)
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	6a1b      	ldr	r3, [r3, #32]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	bf08      	it	eq
 8017f08:	4613      	moveq	r3, r2
 8017f0a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017f0e:	4770      	bx	lr
 8017f10:	2000000c 	.word	0x2000000c
 8017f14:	20000070 	.word	0x20000070

08017f18 <__localeconv_l>:
 8017f18:	30f0      	adds	r0, #240	; 0xf0
 8017f1a:	4770      	bx	lr

08017f1c <_localeconv_r>:
 8017f1c:	4b04      	ldr	r3, [pc, #16]	; (8017f30 <_localeconv_r+0x14>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	6a18      	ldr	r0, [r3, #32]
 8017f22:	4b04      	ldr	r3, [pc, #16]	; (8017f34 <_localeconv_r+0x18>)
 8017f24:	2800      	cmp	r0, #0
 8017f26:	bf08      	it	eq
 8017f28:	4618      	moveq	r0, r3
 8017f2a:	30f0      	adds	r0, #240	; 0xf0
 8017f2c:	4770      	bx	lr
 8017f2e:	bf00      	nop
 8017f30:	2000000c 	.word	0x2000000c
 8017f34:	20000070 	.word	0x20000070

08017f38 <malloc>:
 8017f38:	4b02      	ldr	r3, [pc, #8]	; (8017f44 <malloc+0xc>)
 8017f3a:	4601      	mov	r1, r0
 8017f3c:	6818      	ldr	r0, [r3, #0]
 8017f3e:	f000 bc71 	b.w	8018824 <_malloc_r>
 8017f42:	bf00      	nop
 8017f44:	2000000c 	.word	0x2000000c

08017f48 <__ascii_mbtowc>:
 8017f48:	b082      	sub	sp, #8
 8017f4a:	b901      	cbnz	r1, 8017f4e <__ascii_mbtowc+0x6>
 8017f4c:	a901      	add	r1, sp, #4
 8017f4e:	b142      	cbz	r2, 8017f62 <__ascii_mbtowc+0x1a>
 8017f50:	b14b      	cbz	r3, 8017f66 <__ascii_mbtowc+0x1e>
 8017f52:	7813      	ldrb	r3, [r2, #0]
 8017f54:	600b      	str	r3, [r1, #0]
 8017f56:	7812      	ldrb	r2, [r2, #0]
 8017f58:	1c10      	adds	r0, r2, #0
 8017f5a:	bf18      	it	ne
 8017f5c:	2001      	movne	r0, #1
 8017f5e:	b002      	add	sp, #8
 8017f60:	4770      	bx	lr
 8017f62:	4610      	mov	r0, r2
 8017f64:	e7fb      	b.n	8017f5e <__ascii_mbtowc+0x16>
 8017f66:	f06f 0001 	mvn.w	r0, #1
 8017f6a:	e7f8      	b.n	8017f5e <__ascii_mbtowc+0x16>

08017f6c <_Balloc>:
 8017f6c:	b570      	push	{r4, r5, r6, lr}
 8017f6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017f70:	4604      	mov	r4, r0
 8017f72:	460e      	mov	r6, r1
 8017f74:	b93d      	cbnz	r5, 8017f86 <_Balloc+0x1a>
 8017f76:	2010      	movs	r0, #16
 8017f78:	f7ff ffde 	bl	8017f38 <malloc>
 8017f7c:	6260      	str	r0, [r4, #36]	; 0x24
 8017f7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017f82:	6005      	str	r5, [r0, #0]
 8017f84:	60c5      	str	r5, [r0, #12]
 8017f86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017f88:	68eb      	ldr	r3, [r5, #12]
 8017f8a:	b183      	cbz	r3, 8017fae <_Balloc+0x42>
 8017f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f8e:	68db      	ldr	r3, [r3, #12]
 8017f90:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017f94:	b9b8      	cbnz	r0, 8017fc6 <_Balloc+0x5a>
 8017f96:	2101      	movs	r1, #1
 8017f98:	fa01 f506 	lsl.w	r5, r1, r6
 8017f9c:	1d6a      	adds	r2, r5, #5
 8017f9e:	0092      	lsls	r2, r2, #2
 8017fa0:	4620      	mov	r0, r4
 8017fa2:	f000 fbe2 	bl	801876a <_calloc_r>
 8017fa6:	b160      	cbz	r0, 8017fc2 <_Balloc+0x56>
 8017fa8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017fac:	e00e      	b.n	8017fcc <_Balloc+0x60>
 8017fae:	2221      	movs	r2, #33	; 0x21
 8017fb0:	2104      	movs	r1, #4
 8017fb2:	4620      	mov	r0, r4
 8017fb4:	f000 fbd9 	bl	801876a <_calloc_r>
 8017fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017fba:	60e8      	str	r0, [r5, #12]
 8017fbc:	68db      	ldr	r3, [r3, #12]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d1e4      	bne.n	8017f8c <_Balloc+0x20>
 8017fc2:	2000      	movs	r0, #0
 8017fc4:	bd70      	pop	{r4, r5, r6, pc}
 8017fc6:	6802      	ldr	r2, [r0, #0]
 8017fc8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017fcc:	2300      	movs	r3, #0
 8017fce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017fd2:	e7f7      	b.n	8017fc4 <_Balloc+0x58>

08017fd4 <_Bfree>:
 8017fd4:	b570      	push	{r4, r5, r6, lr}
 8017fd6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017fd8:	4606      	mov	r6, r0
 8017fda:	460d      	mov	r5, r1
 8017fdc:	b93c      	cbnz	r4, 8017fee <_Bfree+0x1a>
 8017fde:	2010      	movs	r0, #16
 8017fe0:	f7ff ffaa 	bl	8017f38 <malloc>
 8017fe4:	6270      	str	r0, [r6, #36]	; 0x24
 8017fe6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017fea:	6004      	str	r4, [r0, #0]
 8017fec:	60c4      	str	r4, [r0, #12]
 8017fee:	b13d      	cbz	r5, 8018000 <_Bfree+0x2c>
 8017ff0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017ff2:	686a      	ldr	r2, [r5, #4]
 8017ff4:	68db      	ldr	r3, [r3, #12]
 8017ff6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017ffa:	6029      	str	r1, [r5, #0]
 8017ffc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018000:	bd70      	pop	{r4, r5, r6, pc}

08018002 <__multadd>:
 8018002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018006:	690d      	ldr	r5, [r1, #16]
 8018008:	461f      	mov	r7, r3
 801800a:	4606      	mov	r6, r0
 801800c:	460c      	mov	r4, r1
 801800e:	f101 0c14 	add.w	ip, r1, #20
 8018012:	2300      	movs	r3, #0
 8018014:	f8dc 0000 	ldr.w	r0, [ip]
 8018018:	b281      	uxth	r1, r0
 801801a:	fb02 7101 	mla	r1, r2, r1, r7
 801801e:	0c0f      	lsrs	r7, r1, #16
 8018020:	0c00      	lsrs	r0, r0, #16
 8018022:	fb02 7000 	mla	r0, r2, r0, r7
 8018026:	b289      	uxth	r1, r1
 8018028:	3301      	adds	r3, #1
 801802a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801802e:	429d      	cmp	r5, r3
 8018030:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018034:	f84c 1b04 	str.w	r1, [ip], #4
 8018038:	dcec      	bgt.n	8018014 <__multadd+0x12>
 801803a:	b1d7      	cbz	r7, 8018072 <__multadd+0x70>
 801803c:	68a3      	ldr	r3, [r4, #8]
 801803e:	42ab      	cmp	r3, r5
 8018040:	dc12      	bgt.n	8018068 <__multadd+0x66>
 8018042:	6861      	ldr	r1, [r4, #4]
 8018044:	4630      	mov	r0, r6
 8018046:	3101      	adds	r1, #1
 8018048:	f7ff ff90 	bl	8017f6c <_Balloc>
 801804c:	6922      	ldr	r2, [r4, #16]
 801804e:	3202      	adds	r2, #2
 8018050:	f104 010c 	add.w	r1, r4, #12
 8018054:	4680      	mov	r8, r0
 8018056:	0092      	lsls	r2, r2, #2
 8018058:	300c      	adds	r0, #12
 801805a:	f7fd f831 	bl	80150c0 <memcpy>
 801805e:	4621      	mov	r1, r4
 8018060:	4630      	mov	r0, r6
 8018062:	f7ff ffb7 	bl	8017fd4 <_Bfree>
 8018066:	4644      	mov	r4, r8
 8018068:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801806c:	3501      	adds	r5, #1
 801806e:	615f      	str	r7, [r3, #20]
 8018070:	6125      	str	r5, [r4, #16]
 8018072:	4620      	mov	r0, r4
 8018074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018078 <__s2b>:
 8018078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801807c:	460c      	mov	r4, r1
 801807e:	4615      	mov	r5, r2
 8018080:	461f      	mov	r7, r3
 8018082:	2209      	movs	r2, #9
 8018084:	3308      	adds	r3, #8
 8018086:	4606      	mov	r6, r0
 8018088:	fb93 f3f2 	sdiv	r3, r3, r2
 801808c:	2100      	movs	r1, #0
 801808e:	2201      	movs	r2, #1
 8018090:	429a      	cmp	r2, r3
 8018092:	db20      	blt.n	80180d6 <__s2b+0x5e>
 8018094:	4630      	mov	r0, r6
 8018096:	f7ff ff69 	bl	8017f6c <_Balloc>
 801809a:	9b08      	ldr	r3, [sp, #32]
 801809c:	6143      	str	r3, [r0, #20]
 801809e:	2d09      	cmp	r5, #9
 80180a0:	f04f 0301 	mov.w	r3, #1
 80180a4:	6103      	str	r3, [r0, #16]
 80180a6:	dd19      	ble.n	80180dc <__s2b+0x64>
 80180a8:	f104 0809 	add.w	r8, r4, #9
 80180ac:	46c1      	mov	r9, r8
 80180ae:	442c      	add	r4, r5
 80180b0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80180b4:	4601      	mov	r1, r0
 80180b6:	3b30      	subs	r3, #48	; 0x30
 80180b8:	220a      	movs	r2, #10
 80180ba:	4630      	mov	r0, r6
 80180bc:	f7ff ffa1 	bl	8018002 <__multadd>
 80180c0:	45a1      	cmp	r9, r4
 80180c2:	d1f5      	bne.n	80180b0 <__s2b+0x38>
 80180c4:	eb08 0405 	add.w	r4, r8, r5
 80180c8:	3c08      	subs	r4, #8
 80180ca:	1b2d      	subs	r5, r5, r4
 80180cc:	1963      	adds	r3, r4, r5
 80180ce:	42bb      	cmp	r3, r7
 80180d0:	db07      	blt.n	80180e2 <__s2b+0x6a>
 80180d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180d6:	0052      	lsls	r2, r2, #1
 80180d8:	3101      	adds	r1, #1
 80180da:	e7d9      	b.n	8018090 <__s2b+0x18>
 80180dc:	340a      	adds	r4, #10
 80180de:	2509      	movs	r5, #9
 80180e0:	e7f3      	b.n	80180ca <__s2b+0x52>
 80180e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80180e6:	4601      	mov	r1, r0
 80180e8:	3b30      	subs	r3, #48	; 0x30
 80180ea:	220a      	movs	r2, #10
 80180ec:	4630      	mov	r0, r6
 80180ee:	f7ff ff88 	bl	8018002 <__multadd>
 80180f2:	e7eb      	b.n	80180cc <__s2b+0x54>

080180f4 <__hi0bits>:
 80180f4:	0c02      	lsrs	r2, r0, #16
 80180f6:	0412      	lsls	r2, r2, #16
 80180f8:	4603      	mov	r3, r0
 80180fa:	b9b2      	cbnz	r2, 801812a <__hi0bits+0x36>
 80180fc:	0403      	lsls	r3, r0, #16
 80180fe:	2010      	movs	r0, #16
 8018100:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018104:	bf04      	itt	eq
 8018106:	021b      	lsleq	r3, r3, #8
 8018108:	3008      	addeq	r0, #8
 801810a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801810e:	bf04      	itt	eq
 8018110:	011b      	lsleq	r3, r3, #4
 8018112:	3004      	addeq	r0, #4
 8018114:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018118:	bf04      	itt	eq
 801811a:	009b      	lsleq	r3, r3, #2
 801811c:	3002      	addeq	r0, #2
 801811e:	2b00      	cmp	r3, #0
 8018120:	db06      	blt.n	8018130 <__hi0bits+0x3c>
 8018122:	005b      	lsls	r3, r3, #1
 8018124:	d503      	bpl.n	801812e <__hi0bits+0x3a>
 8018126:	3001      	adds	r0, #1
 8018128:	4770      	bx	lr
 801812a:	2000      	movs	r0, #0
 801812c:	e7e8      	b.n	8018100 <__hi0bits+0xc>
 801812e:	2020      	movs	r0, #32
 8018130:	4770      	bx	lr

08018132 <__lo0bits>:
 8018132:	6803      	ldr	r3, [r0, #0]
 8018134:	f013 0207 	ands.w	r2, r3, #7
 8018138:	4601      	mov	r1, r0
 801813a:	d00b      	beq.n	8018154 <__lo0bits+0x22>
 801813c:	07da      	lsls	r2, r3, #31
 801813e:	d423      	bmi.n	8018188 <__lo0bits+0x56>
 8018140:	0798      	lsls	r0, r3, #30
 8018142:	bf49      	itett	mi
 8018144:	085b      	lsrmi	r3, r3, #1
 8018146:	089b      	lsrpl	r3, r3, #2
 8018148:	2001      	movmi	r0, #1
 801814a:	600b      	strmi	r3, [r1, #0]
 801814c:	bf5c      	itt	pl
 801814e:	600b      	strpl	r3, [r1, #0]
 8018150:	2002      	movpl	r0, #2
 8018152:	4770      	bx	lr
 8018154:	b298      	uxth	r0, r3
 8018156:	b9a8      	cbnz	r0, 8018184 <__lo0bits+0x52>
 8018158:	0c1b      	lsrs	r3, r3, #16
 801815a:	2010      	movs	r0, #16
 801815c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018160:	bf04      	itt	eq
 8018162:	0a1b      	lsreq	r3, r3, #8
 8018164:	3008      	addeq	r0, #8
 8018166:	071a      	lsls	r2, r3, #28
 8018168:	bf04      	itt	eq
 801816a:	091b      	lsreq	r3, r3, #4
 801816c:	3004      	addeq	r0, #4
 801816e:	079a      	lsls	r2, r3, #30
 8018170:	bf04      	itt	eq
 8018172:	089b      	lsreq	r3, r3, #2
 8018174:	3002      	addeq	r0, #2
 8018176:	07da      	lsls	r2, r3, #31
 8018178:	d402      	bmi.n	8018180 <__lo0bits+0x4e>
 801817a:	085b      	lsrs	r3, r3, #1
 801817c:	d006      	beq.n	801818c <__lo0bits+0x5a>
 801817e:	3001      	adds	r0, #1
 8018180:	600b      	str	r3, [r1, #0]
 8018182:	4770      	bx	lr
 8018184:	4610      	mov	r0, r2
 8018186:	e7e9      	b.n	801815c <__lo0bits+0x2a>
 8018188:	2000      	movs	r0, #0
 801818a:	4770      	bx	lr
 801818c:	2020      	movs	r0, #32
 801818e:	4770      	bx	lr

08018190 <__i2b>:
 8018190:	b510      	push	{r4, lr}
 8018192:	460c      	mov	r4, r1
 8018194:	2101      	movs	r1, #1
 8018196:	f7ff fee9 	bl	8017f6c <_Balloc>
 801819a:	2201      	movs	r2, #1
 801819c:	6144      	str	r4, [r0, #20]
 801819e:	6102      	str	r2, [r0, #16]
 80181a0:	bd10      	pop	{r4, pc}

080181a2 <__multiply>:
 80181a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181a6:	4614      	mov	r4, r2
 80181a8:	690a      	ldr	r2, [r1, #16]
 80181aa:	6923      	ldr	r3, [r4, #16]
 80181ac:	429a      	cmp	r2, r3
 80181ae:	bfb8      	it	lt
 80181b0:	460b      	movlt	r3, r1
 80181b2:	4688      	mov	r8, r1
 80181b4:	bfbc      	itt	lt
 80181b6:	46a0      	movlt	r8, r4
 80181b8:	461c      	movlt	r4, r3
 80181ba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80181be:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80181c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80181c6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80181ca:	eb07 0609 	add.w	r6, r7, r9
 80181ce:	42b3      	cmp	r3, r6
 80181d0:	bfb8      	it	lt
 80181d2:	3101      	addlt	r1, #1
 80181d4:	f7ff feca 	bl	8017f6c <_Balloc>
 80181d8:	f100 0514 	add.w	r5, r0, #20
 80181dc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80181e0:	462b      	mov	r3, r5
 80181e2:	2200      	movs	r2, #0
 80181e4:	4573      	cmp	r3, lr
 80181e6:	d316      	bcc.n	8018216 <__multiply+0x74>
 80181e8:	f104 0214 	add.w	r2, r4, #20
 80181ec:	f108 0114 	add.w	r1, r8, #20
 80181f0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80181f4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80181f8:	9300      	str	r3, [sp, #0]
 80181fa:	9b00      	ldr	r3, [sp, #0]
 80181fc:	9201      	str	r2, [sp, #4]
 80181fe:	4293      	cmp	r3, r2
 8018200:	d80c      	bhi.n	801821c <__multiply+0x7a>
 8018202:	2e00      	cmp	r6, #0
 8018204:	dd03      	ble.n	801820e <__multiply+0x6c>
 8018206:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801820a:	2b00      	cmp	r3, #0
 801820c:	d05d      	beq.n	80182ca <__multiply+0x128>
 801820e:	6106      	str	r6, [r0, #16]
 8018210:	b003      	add	sp, #12
 8018212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018216:	f843 2b04 	str.w	r2, [r3], #4
 801821a:	e7e3      	b.n	80181e4 <__multiply+0x42>
 801821c:	f8b2 b000 	ldrh.w	fp, [r2]
 8018220:	f1bb 0f00 	cmp.w	fp, #0
 8018224:	d023      	beq.n	801826e <__multiply+0xcc>
 8018226:	4689      	mov	r9, r1
 8018228:	46ac      	mov	ip, r5
 801822a:	f04f 0800 	mov.w	r8, #0
 801822e:	f859 4b04 	ldr.w	r4, [r9], #4
 8018232:	f8dc a000 	ldr.w	sl, [ip]
 8018236:	b2a3      	uxth	r3, r4
 8018238:	fa1f fa8a 	uxth.w	sl, sl
 801823c:	fb0b a303 	mla	r3, fp, r3, sl
 8018240:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018244:	f8dc 4000 	ldr.w	r4, [ip]
 8018248:	4443      	add	r3, r8
 801824a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801824e:	fb0b 840a 	mla	r4, fp, sl, r8
 8018252:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018256:	46e2      	mov	sl, ip
 8018258:	b29b      	uxth	r3, r3
 801825a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801825e:	454f      	cmp	r7, r9
 8018260:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018264:	f84a 3b04 	str.w	r3, [sl], #4
 8018268:	d82b      	bhi.n	80182c2 <__multiply+0x120>
 801826a:	f8cc 8004 	str.w	r8, [ip, #4]
 801826e:	9b01      	ldr	r3, [sp, #4]
 8018270:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018274:	3204      	adds	r2, #4
 8018276:	f1ba 0f00 	cmp.w	sl, #0
 801827a:	d020      	beq.n	80182be <__multiply+0x11c>
 801827c:	682b      	ldr	r3, [r5, #0]
 801827e:	4689      	mov	r9, r1
 8018280:	46a8      	mov	r8, r5
 8018282:	f04f 0b00 	mov.w	fp, #0
 8018286:	f8b9 c000 	ldrh.w	ip, [r9]
 801828a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801828e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018292:	445c      	add	r4, fp
 8018294:	46c4      	mov	ip, r8
 8018296:	b29b      	uxth	r3, r3
 8018298:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801829c:	f84c 3b04 	str.w	r3, [ip], #4
 80182a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80182a4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80182a8:	0c1b      	lsrs	r3, r3, #16
 80182aa:	fb0a b303 	mla	r3, sl, r3, fp
 80182ae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80182b2:	454f      	cmp	r7, r9
 80182b4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80182b8:	d805      	bhi.n	80182c6 <__multiply+0x124>
 80182ba:	f8c8 3004 	str.w	r3, [r8, #4]
 80182be:	3504      	adds	r5, #4
 80182c0:	e79b      	b.n	80181fa <__multiply+0x58>
 80182c2:	46d4      	mov	ip, sl
 80182c4:	e7b3      	b.n	801822e <__multiply+0x8c>
 80182c6:	46e0      	mov	r8, ip
 80182c8:	e7dd      	b.n	8018286 <__multiply+0xe4>
 80182ca:	3e01      	subs	r6, #1
 80182cc:	e799      	b.n	8018202 <__multiply+0x60>
	...

080182d0 <__pow5mult>:
 80182d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182d4:	4615      	mov	r5, r2
 80182d6:	f012 0203 	ands.w	r2, r2, #3
 80182da:	4606      	mov	r6, r0
 80182dc:	460f      	mov	r7, r1
 80182de:	d007      	beq.n	80182f0 <__pow5mult+0x20>
 80182e0:	3a01      	subs	r2, #1
 80182e2:	4c21      	ldr	r4, [pc, #132]	; (8018368 <__pow5mult+0x98>)
 80182e4:	2300      	movs	r3, #0
 80182e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80182ea:	f7ff fe8a 	bl	8018002 <__multadd>
 80182ee:	4607      	mov	r7, r0
 80182f0:	10ad      	asrs	r5, r5, #2
 80182f2:	d035      	beq.n	8018360 <__pow5mult+0x90>
 80182f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80182f6:	b93c      	cbnz	r4, 8018308 <__pow5mult+0x38>
 80182f8:	2010      	movs	r0, #16
 80182fa:	f7ff fe1d 	bl	8017f38 <malloc>
 80182fe:	6270      	str	r0, [r6, #36]	; 0x24
 8018300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018304:	6004      	str	r4, [r0, #0]
 8018306:	60c4      	str	r4, [r0, #12]
 8018308:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801830c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018310:	b94c      	cbnz	r4, 8018326 <__pow5mult+0x56>
 8018312:	f240 2171 	movw	r1, #625	; 0x271
 8018316:	4630      	mov	r0, r6
 8018318:	f7ff ff3a 	bl	8018190 <__i2b>
 801831c:	2300      	movs	r3, #0
 801831e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018322:	4604      	mov	r4, r0
 8018324:	6003      	str	r3, [r0, #0]
 8018326:	f04f 0800 	mov.w	r8, #0
 801832a:	07eb      	lsls	r3, r5, #31
 801832c:	d50a      	bpl.n	8018344 <__pow5mult+0x74>
 801832e:	4639      	mov	r1, r7
 8018330:	4622      	mov	r2, r4
 8018332:	4630      	mov	r0, r6
 8018334:	f7ff ff35 	bl	80181a2 <__multiply>
 8018338:	4639      	mov	r1, r7
 801833a:	4681      	mov	r9, r0
 801833c:	4630      	mov	r0, r6
 801833e:	f7ff fe49 	bl	8017fd4 <_Bfree>
 8018342:	464f      	mov	r7, r9
 8018344:	106d      	asrs	r5, r5, #1
 8018346:	d00b      	beq.n	8018360 <__pow5mult+0x90>
 8018348:	6820      	ldr	r0, [r4, #0]
 801834a:	b938      	cbnz	r0, 801835c <__pow5mult+0x8c>
 801834c:	4622      	mov	r2, r4
 801834e:	4621      	mov	r1, r4
 8018350:	4630      	mov	r0, r6
 8018352:	f7ff ff26 	bl	80181a2 <__multiply>
 8018356:	6020      	str	r0, [r4, #0]
 8018358:	f8c0 8000 	str.w	r8, [r0]
 801835c:	4604      	mov	r4, r0
 801835e:	e7e4      	b.n	801832a <__pow5mult+0x5a>
 8018360:	4638      	mov	r0, r7
 8018362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018366:	bf00      	nop
 8018368:	08019f48 	.word	0x08019f48

0801836c <__lshift>:
 801836c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018370:	460c      	mov	r4, r1
 8018372:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018376:	6923      	ldr	r3, [r4, #16]
 8018378:	6849      	ldr	r1, [r1, #4]
 801837a:	eb0a 0903 	add.w	r9, sl, r3
 801837e:	68a3      	ldr	r3, [r4, #8]
 8018380:	4607      	mov	r7, r0
 8018382:	4616      	mov	r6, r2
 8018384:	f109 0501 	add.w	r5, r9, #1
 8018388:	42ab      	cmp	r3, r5
 801838a:	db32      	blt.n	80183f2 <__lshift+0x86>
 801838c:	4638      	mov	r0, r7
 801838e:	f7ff fded 	bl	8017f6c <_Balloc>
 8018392:	2300      	movs	r3, #0
 8018394:	4680      	mov	r8, r0
 8018396:	f100 0114 	add.w	r1, r0, #20
 801839a:	461a      	mov	r2, r3
 801839c:	4553      	cmp	r3, sl
 801839e:	db2b      	blt.n	80183f8 <__lshift+0x8c>
 80183a0:	6920      	ldr	r0, [r4, #16]
 80183a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80183a6:	f104 0314 	add.w	r3, r4, #20
 80183aa:	f016 021f 	ands.w	r2, r6, #31
 80183ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80183b2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80183b6:	d025      	beq.n	8018404 <__lshift+0x98>
 80183b8:	f1c2 0e20 	rsb	lr, r2, #32
 80183bc:	2000      	movs	r0, #0
 80183be:	681e      	ldr	r6, [r3, #0]
 80183c0:	468a      	mov	sl, r1
 80183c2:	4096      	lsls	r6, r2
 80183c4:	4330      	orrs	r0, r6
 80183c6:	f84a 0b04 	str.w	r0, [sl], #4
 80183ca:	f853 0b04 	ldr.w	r0, [r3], #4
 80183ce:	459c      	cmp	ip, r3
 80183d0:	fa20 f00e 	lsr.w	r0, r0, lr
 80183d4:	d814      	bhi.n	8018400 <__lshift+0x94>
 80183d6:	6048      	str	r0, [r1, #4]
 80183d8:	b108      	cbz	r0, 80183de <__lshift+0x72>
 80183da:	f109 0502 	add.w	r5, r9, #2
 80183de:	3d01      	subs	r5, #1
 80183e0:	4638      	mov	r0, r7
 80183e2:	f8c8 5010 	str.w	r5, [r8, #16]
 80183e6:	4621      	mov	r1, r4
 80183e8:	f7ff fdf4 	bl	8017fd4 <_Bfree>
 80183ec:	4640      	mov	r0, r8
 80183ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183f2:	3101      	adds	r1, #1
 80183f4:	005b      	lsls	r3, r3, #1
 80183f6:	e7c7      	b.n	8018388 <__lshift+0x1c>
 80183f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80183fc:	3301      	adds	r3, #1
 80183fe:	e7cd      	b.n	801839c <__lshift+0x30>
 8018400:	4651      	mov	r1, sl
 8018402:	e7dc      	b.n	80183be <__lshift+0x52>
 8018404:	3904      	subs	r1, #4
 8018406:	f853 2b04 	ldr.w	r2, [r3], #4
 801840a:	f841 2f04 	str.w	r2, [r1, #4]!
 801840e:	459c      	cmp	ip, r3
 8018410:	d8f9      	bhi.n	8018406 <__lshift+0x9a>
 8018412:	e7e4      	b.n	80183de <__lshift+0x72>

08018414 <__mcmp>:
 8018414:	6903      	ldr	r3, [r0, #16]
 8018416:	690a      	ldr	r2, [r1, #16]
 8018418:	1a9b      	subs	r3, r3, r2
 801841a:	b530      	push	{r4, r5, lr}
 801841c:	d10c      	bne.n	8018438 <__mcmp+0x24>
 801841e:	0092      	lsls	r2, r2, #2
 8018420:	3014      	adds	r0, #20
 8018422:	3114      	adds	r1, #20
 8018424:	1884      	adds	r4, r0, r2
 8018426:	4411      	add	r1, r2
 8018428:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801842c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018430:	4295      	cmp	r5, r2
 8018432:	d003      	beq.n	801843c <__mcmp+0x28>
 8018434:	d305      	bcc.n	8018442 <__mcmp+0x2e>
 8018436:	2301      	movs	r3, #1
 8018438:	4618      	mov	r0, r3
 801843a:	bd30      	pop	{r4, r5, pc}
 801843c:	42a0      	cmp	r0, r4
 801843e:	d3f3      	bcc.n	8018428 <__mcmp+0x14>
 8018440:	e7fa      	b.n	8018438 <__mcmp+0x24>
 8018442:	f04f 33ff 	mov.w	r3, #4294967295
 8018446:	e7f7      	b.n	8018438 <__mcmp+0x24>

08018448 <__mdiff>:
 8018448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801844c:	460d      	mov	r5, r1
 801844e:	4607      	mov	r7, r0
 8018450:	4611      	mov	r1, r2
 8018452:	4628      	mov	r0, r5
 8018454:	4614      	mov	r4, r2
 8018456:	f7ff ffdd 	bl	8018414 <__mcmp>
 801845a:	1e06      	subs	r6, r0, #0
 801845c:	d108      	bne.n	8018470 <__mdiff+0x28>
 801845e:	4631      	mov	r1, r6
 8018460:	4638      	mov	r0, r7
 8018462:	f7ff fd83 	bl	8017f6c <_Balloc>
 8018466:	2301      	movs	r3, #1
 8018468:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801846c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018470:	bfa4      	itt	ge
 8018472:	4623      	movge	r3, r4
 8018474:	462c      	movge	r4, r5
 8018476:	4638      	mov	r0, r7
 8018478:	6861      	ldr	r1, [r4, #4]
 801847a:	bfa6      	itte	ge
 801847c:	461d      	movge	r5, r3
 801847e:	2600      	movge	r6, #0
 8018480:	2601      	movlt	r6, #1
 8018482:	f7ff fd73 	bl	8017f6c <_Balloc>
 8018486:	692b      	ldr	r3, [r5, #16]
 8018488:	60c6      	str	r6, [r0, #12]
 801848a:	6926      	ldr	r6, [r4, #16]
 801848c:	f105 0914 	add.w	r9, r5, #20
 8018490:	f104 0214 	add.w	r2, r4, #20
 8018494:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018498:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801849c:	f100 0514 	add.w	r5, r0, #20
 80184a0:	f04f 0e00 	mov.w	lr, #0
 80184a4:	f852 ab04 	ldr.w	sl, [r2], #4
 80184a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80184ac:	fa1e f18a 	uxtah	r1, lr, sl
 80184b0:	b2a3      	uxth	r3, r4
 80184b2:	1ac9      	subs	r1, r1, r3
 80184b4:	0c23      	lsrs	r3, r4, #16
 80184b6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80184ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80184be:	b289      	uxth	r1, r1
 80184c0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80184c4:	45c8      	cmp	r8, r9
 80184c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80184ca:	4694      	mov	ip, r2
 80184cc:	f845 3b04 	str.w	r3, [r5], #4
 80184d0:	d8e8      	bhi.n	80184a4 <__mdiff+0x5c>
 80184d2:	45bc      	cmp	ip, r7
 80184d4:	d304      	bcc.n	80184e0 <__mdiff+0x98>
 80184d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80184da:	b183      	cbz	r3, 80184fe <__mdiff+0xb6>
 80184dc:	6106      	str	r6, [r0, #16]
 80184de:	e7c5      	b.n	801846c <__mdiff+0x24>
 80184e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80184e4:	fa1e f381 	uxtah	r3, lr, r1
 80184e8:	141a      	asrs	r2, r3, #16
 80184ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80184ee:	b29b      	uxth	r3, r3
 80184f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80184f4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80184f8:	f845 3b04 	str.w	r3, [r5], #4
 80184fc:	e7e9      	b.n	80184d2 <__mdiff+0x8a>
 80184fe:	3e01      	subs	r6, #1
 8018500:	e7e9      	b.n	80184d6 <__mdiff+0x8e>
	...

08018504 <__ulp>:
 8018504:	4b12      	ldr	r3, [pc, #72]	; (8018550 <__ulp+0x4c>)
 8018506:	ee10 2a90 	vmov	r2, s1
 801850a:	401a      	ands	r2, r3
 801850c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018510:	2b00      	cmp	r3, #0
 8018512:	dd04      	ble.n	801851e <__ulp+0x1a>
 8018514:	2000      	movs	r0, #0
 8018516:	4619      	mov	r1, r3
 8018518:	ec41 0b10 	vmov	d0, r0, r1
 801851c:	4770      	bx	lr
 801851e:	425b      	negs	r3, r3
 8018520:	151b      	asrs	r3, r3, #20
 8018522:	2b13      	cmp	r3, #19
 8018524:	f04f 0000 	mov.w	r0, #0
 8018528:	f04f 0100 	mov.w	r1, #0
 801852c:	dc04      	bgt.n	8018538 <__ulp+0x34>
 801852e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018532:	fa42 f103 	asr.w	r1, r2, r3
 8018536:	e7ef      	b.n	8018518 <__ulp+0x14>
 8018538:	3b14      	subs	r3, #20
 801853a:	2b1e      	cmp	r3, #30
 801853c:	f04f 0201 	mov.w	r2, #1
 8018540:	bfda      	itte	le
 8018542:	f1c3 031f 	rsble	r3, r3, #31
 8018546:	fa02 f303 	lslle.w	r3, r2, r3
 801854a:	4613      	movgt	r3, r2
 801854c:	4618      	mov	r0, r3
 801854e:	e7e3      	b.n	8018518 <__ulp+0x14>
 8018550:	7ff00000 	.word	0x7ff00000

08018554 <__b2d>:
 8018554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018556:	6905      	ldr	r5, [r0, #16]
 8018558:	f100 0714 	add.w	r7, r0, #20
 801855c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018560:	1f2e      	subs	r6, r5, #4
 8018562:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018566:	4620      	mov	r0, r4
 8018568:	f7ff fdc4 	bl	80180f4 <__hi0bits>
 801856c:	f1c0 0320 	rsb	r3, r0, #32
 8018570:	280a      	cmp	r0, #10
 8018572:	600b      	str	r3, [r1, #0]
 8018574:	f8df c074 	ldr.w	ip, [pc, #116]	; 80185ec <__b2d+0x98>
 8018578:	dc14      	bgt.n	80185a4 <__b2d+0x50>
 801857a:	f1c0 0e0b 	rsb	lr, r0, #11
 801857e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018582:	42b7      	cmp	r7, r6
 8018584:	ea41 030c 	orr.w	r3, r1, ip
 8018588:	bf34      	ite	cc
 801858a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801858e:	2100      	movcs	r1, #0
 8018590:	3015      	adds	r0, #21
 8018592:	fa04 f000 	lsl.w	r0, r4, r0
 8018596:	fa21 f10e 	lsr.w	r1, r1, lr
 801859a:	ea40 0201 	orr.w	r2, r0, r1
 801859e:	ec43 2b10 	vmov	d0, r2, r3
 80185a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185a4:	42b7      	cmp	r7, r6
 80185a6:	bf3a      	itte	cc
 80185a8:	f1a5 0608 	subcc.w	r6, r5, #8
 80185ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80185b0:	2100      	movcs	r1, #0
 80185b2:	380b      	subs	r0, #11
 80185b4:	d015      	beq.n	80185e2 <__b2d+0x8e>
 80185b6:	4084      	lsls	r4, r0
 80185b8:	f1c0 0520 	rsb	r5, r0, #32
 80185bc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80185c0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80185c4:	42be      	cmp	r6, r7
 80185c6:	fa21 fc05 	lsr.w	ip, r1, r5
 80185ca:	ea44 030c 	orr.w	r3, r4, ip
 80185ce:	bf8c      	ite	hi
 80185d0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80185d4:	2400      	movls	r4, #0
 80185d6:	fa01 f000 	lsl.w	r0, r1, r0
 80185da:	40ec      	lsrs	r4, r5
 80185dc:	ea40 0204 	orr.w	r2, r0, r4
 80185e0:	e7dd      	b.n	801859e <__b2d+0x4a>
 80185e2:	ea44 030c 	orr.w	r3, r4, ip
 80185e6:	460a      	mov	r2, r1
 80185e8:	e7d9      	b.n	801859e <__b2d+0x4a>
 80185ea:	bf00      	nop
 80185ec:	3ff00000 	.word	0x3ff00000

080185f0 <__d2b>:
 80185f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80185f4:	460e      	mov	r6, r1
 80185f6:	2101      	movs	r1, #1
 80185f8:	ec59 8b10 	vmov	r8, r9, d0
 80185fc:	4615      	mov	r5, r2
 80185fe:	f7ff fcb5 	bl	8017f6c <_Balloc>
 8018602:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018606:	4607      	mov	r7, r0
 8018608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801860c:	bb34      	cbnz	r4, 801865c <__d2b+0x6c>
 801860e:	9301      	str	r3, [sp, #4]
 8018610:	f1b8 0300 	subs.w	r3, r8, #0
 8018614:	d027      	beq.n	8018666 <__d2b+0x76>
 8018616:	a802      	add	r0, sp, #8
 8018618:	f840 3d08 	str.w	r3, [r0, #-8]!
 801861c:	f7ff fd89 	bl	8018132 <__lo0bits>
 8018620:	9900      	ldr	r1, [sp, #0]
 8018622:	b1f0      	cbz	r0, 8018662 <__d2b+0x72>
 8018624:	9a01      	ldr	r2, [sp, #4]
 8018626:	f1c0 0320 	rsb	r3, r0, #32
 801862a:	fa02 f303 	lsl.w	r3, r2, r3
 801862e:	430b      	orrs	r3, r1
 8018630:	40c2      	lsrs	r2, r0
 8018632:	617b      	str	r3, [r7, #20]
 8018634:	9201      	str	r2, [sp, #4]
 8018636:	9b01      	ldr	r3, [sp, #4]
 8018638:	61bb      	str	r3, [r7, #24]
 801863a:	2b00      	cmp	r3, #0
 801863c:	bf14      	ite	ne
 801863e:	2102      	movne	r1, #2
 8018640:	2101      	moveq	r1, #1
 8018642:	6139      	str	r1, [r7, #16]
 8018644:	b1c4      	cbz	r4, 8018678 <__d2b+0x88>
 8018646:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801864a:	4404      	add	r4, r0
 801864c:	6034      	str	r4, [r6, #0]
 801864e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018652:	6028      	str	r0, [r5, #0]
 8018654:	4638      	mov	r0, r7
 8018656:	b003      	add	sp, #12
 8018658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801865c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018660:	e7d5      	b.n	801860e <__d2b+0x1e>
 8018662:	6179      	str	r1, [r7, #20]
 8018664:	e7e7      	b.n	8018636 <__d2b+0x46>
 8018666:	a801      	add	r0, sp, #4
 8018668:	f7ff fd63 	bl	8018132 <__lo0bits>
 801866c:	9b01      	ldr	r3, [sp, #4]
 801866e:	617b      	str	r3, [r7, #20]
 8018670:	2101      	movs	r1, #1
 8018672:	6139      	str	r1, [r7, #16]
 8018674:	3020      	adds	r0, #32
 8018676:	e7e5      	b.n	8018644 <__d2b+0x54>
 8018678:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801867c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018680:	6030      	str	r0, [r6, #0]
 8018682:	6918      	ldr	r0, [r3, #16]
 8018684:	f7ff fd36 	bl	80180f4 <__hi0bits>
 8018688:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801868c:	e7e1      	b.n	8018652 <__d2b+0x62>

0801868e <__ratio>:
 801868e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018692:	4688      	mov	r8, r1
 8018694:	4669      	mov	r1, sp
 8018696:	4681      	mov	r9, r0
 8018698:	f7ff ff5c 	bl	8018554 <__b2d>
 801869c:	a901      	add	r1, sp, #4
 801869e:	4640      	mov	r0, r8
 80186a0:	ec57 6b10 	vmov	r6, r7, d0
 80186a4:	f7ff ff56 	bl	8018554 <__b2d>
 80186a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80186ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80186b0:	eba3 0c02 	sub.w	ip, r3, r2
 80186b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80186b8:	1a9b      	subs	r3, r3, r2
 80186ba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80186be:	ec5b ab10 	vmov	sl, fp, d0
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	bfce      	itee	gt
 80186c6:	463a      	movgt	r2, r7
 80186c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80186cc:	465a      	movle	r2, fp
 80186ce:	4659      	mov	r1, fp
 80186d0:	463d      	mov	r5, r7
 80186d2:	bfd4      	ite	le
 80186d4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80186d8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80186dc:	4630      	mov	r0, r6
 80186de:	ee10 2a10 	vmov	r2, s0
 80186e2:	460b      	mov	r3, r1
 80186e4:	4629      	mov	r1, r5
 80186e6:	f7e8 f8c9 	bl	800087c <__aeabi_ddiv>
 80186ea:	ec41 0b10 	vmov	d0, r0, r1
 80186ee:	b003      	add	sp, #12
 80186f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186f4 <__copybits>:
 80186f4:	3901      	subs	r1, #1
 80186f6:	b510      	push	{r4, lr}
 80186f8:	1149      	asrs	r1, r1, #5
 80186fa:	6914      	ldr	r4, [r2, #16]
 80186fc:	3101      	adds	r1, #1
 80186fe:	f102 0314 	add.w	r3, r2, #20
 8018702:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018706:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801870a:	42a3      	cmp	r3, r4
 801870c:	4602      	mov	r2, r0
 801870e:	d303      	bcc.n	8018718 <__copybits+0x24>
 8018710:	2300      	movs	r3, #0
 8018712:	428a      	cmp	r2, r1
 8018714:	d305      	bcc.n	8018722 <__copybits+0x2e>
 8018716:	bd10      	pop	{r4, pc}
 8018718:	f853 2b04 	ldr.w	r2, [r3], #4
 801871c:	f840 2b04 	str.w	r2, [r0], #4
 8018720:	e7f3      	b.n	801870a <__copybits+0x16>
 8018722:	f842 3b04 	str.w	r3, [r2], #4
 8018726:	e7f4      	b.n	8018712 <__copybits+0x1e>

08018728 <__any_on>:
 8018728:	f100 0214 	add.w	r2, r0, #20
 801872c:	6900      	ldr	r0, [r0, #16]
 801872e:	114b      	asrs	r3, r1, #5
 8018730:	4298      	cmp	r0, r3
 8018732:	b510      	push	{r4, lr}
 8018734:	db11      	blt.n	801875a <__any_on+0x32>
 8018736:	dd0a      	ble.n	801874e <__any_on+0x26>
 8018738:	f011 011f 	ands.w	r1, r1, #31
 801873c:	d007      	beq.n	801874e <__any_on+0x26>
 801873e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018742:	fa24 f001 	lsr.w	r0, r4, r1
 8018746:	fa00 f101 	lsl.w	r1, r0, r1
 801874a:	428c      	cmp	r4, r1
 801874c:	d10b      	bne.n	8018766 <__any_on+0x3e>
 801874e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018752:	4293      	cmp	r3, r2
 8018754:	d803      	bhi.n	801875e <__any_on+0x36>
 8018756:	2000      	movs	r0, #0
 8018758:	bd10      	pop	{r4, pc}
 801875a:	4603      	mov	r3, r0
 801875c:	e7f7      	b.n	801874e <__any_on+0x26>
 801875e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018762:	2900      	cmp	r1, #0
 8018764:	d0f5      	beq.n	8018752 <__any_on+0x2a>
 8018766:	2001      	movs	r0, #1
 8018768:	e7f6      	b.n	8018758 <__any_on+0x30>

0801876a <_calloc_r>:
 801876a:	b538      	push	{r3, r4, r5, lr}
 801876c:	fb02 f401 	mul.w	r4, r2, r1
 8018770:	4621      	mov	r1, r4
 8018772:	f000 f857 	bl	8018824 <_malloc_r>
 8018776:	4605      	mov	r5, r0
 8018778:	b118      	cbz	r0, 8018782 <_calloc_r+0x18>
 801877a:	4622      	mov	r2, r4
 801877c:	2100      	movs	r1, #0
 801877e:	f7fc fcaa 	bl	80150d6 <memset>
 8018782:	4628      	mov	r0, r5
 8018784:	bd38      	pop	{r3, r4, r5, pc}
	...

08018788 <_free_r>:
 8018788:	b538      	push	{r3, r4, r5, lr}
 801878a:	4605      	mov	r5, r0
 801878c:	2900      	cmp	r1, #0
 801878e:	d045      	beq.n	801881c <_free_r+0x94>
 8018790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018794:	1f0c      	subs	r4, r1, #4
 8018796:	2b00      	cmp	r3, #0
 8018798:	bfb8      	it	lt
 801879a:	18e4      	addlt	r4, r4, r3
 801879c:	f000 fe30 	bl	8019400 <__malloc_lock>
 80187a0:	4a1f      	ldr	r2, [pc, #124]	; (8018820 <_free_r+0x98>)
 80187a2:	6813      	ldr	r3, [r2, #0]
 80187a4:	4610      	mov	r0, r2
 80187a6:	b933      	cbnz	r3, 80187b6 <_free_r+0x2e>
 80187a8:	6063      	str	r3, [r4, #4]
 80187aa:	6014      	str	r4, [r2, #0]
 80187ac:	4628      	mov	r0, r5
 80187ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80187b2:	f000 be26 	b.w	8019402 <__malloc_unlock>
 80187b6:	42a3      	cmp	r3, r4
 80187b8:	d90c      	bls.n	80187d4 <_free_r+0x4c>
 80187ba:	6821      	ldr	r1, [r4, #0]
 80187bc:	1862      	adds	r2, r4, r1
 80187be:	4293      	cmp	r3, r2
 80187c0:	bf04      	itt	eq
 80187c2:	681a      	ldreq	r2, [r3, #0]
 80187c4:	685b      	ldreq	r3, [r3, #4]
 80187c6:	6063      	str	r3, [r4, #4]
 80187c8:	bf04      	itt	eq
 80187ca:	1852      	addeq	r2, r2, r1
 80187cc:	6022      	streq	r2, [r4, #0]
 80187ce:	6004      	str	r4, [r0, #0]
 80187d0:	e7ec      	b.n	80187ac <_free_r+0x24>
 80187d2:	4613      	mov	r3, r2
 80187d4:	685a      	ldr	r2, [r3, #4]
 80187d6:	b10a      	cbz	r2, 80187dc <_free_r+0x54>
 80187d8:	42a2      	cmp	r2, r4
 80187da:	d9fa      	bls.n	80187d2 <_free_r+0x4a>
 80187dc:	6819      	ldr	r1, [r3, #0]
 80187de:	1858      	adds	r0, r3, r1
 80187e0:	42a0      	cmp	r0, r4
 80187e2:	d10b      	bne.n	80187fc <_free_r+0x74>
 80187e4:	6820      	ldr	r0, [r4, #0]
 80187e6:	4401      	add	r1, r0
 80187e8:	1858      	adds	r0, r3, r1
 80187ea:	4282      	cmp	r2, r0
 80187ec:	6019      	str	r1, [r3, #0]
 80187ee:	d1dd      	bne.n	80187ac <_free_r+0x24>
 80187f0:	6810      	ldr	r0, [r2, #0]
 80187f2:	6852      	ldr	r2, [r2, #4]
 80187f4:	605a      	str	r2, [r3, #4]
 80187f6:	4401      	add	r1, r0
 80187f8:	6019      	str	r1, [r3, #0]
 80187fa:	e7d7      	b.n	80187ac <_free_r+0x24>
 80187fc:	d902      	bls.n	8018804 <_free_r+0x7c>
 80187fe:	230c      	movs	r3, #12
 8018800:	602b      	str	r3, [r5, #0]
 8018802:	e7d3      	b.n	80187ac <_free_r+0x24>
 8018804:	6820      	ldr	r0, [r4, #0]
 8018806:	1821      	adds	r1, r4, r0
 8018808:	428a      	cmp	r2, r1
 801880a:	bf04      	itt	eq
 801880c:	6811      	ldreq	r1, [r2, #0]
 801880e:	6852      	ldreq	r2, [r2, #4]
 8018810:	6062      	str	r2, [r4, #4]
 8018812:	bf04      	itt	eq
 8018814:	1809      	addeq	r1, r1, r0
 8018816:	6021      	streq	r1, [r4, #0]
 8018818:	605c      	str	r4, [r3, #4]
 801881a:	e7c7      	b.n	80187ac <_free_r+0x24>
 801881c:	bd38      	pop	{r3, r4, r5, pc}
 801881e:	bf00      	nop
 8018820:	20041334 	.word	0x20041334

08018824 <_malloc_r>:
 8018824:	b570      	push	{r4, r5, r6, lr}
 8018826:	1ccd      	adds	r5, r1, #3
 8018828:	f025 0503 	bic.w	r5, r5, #3
 801882c:	3508      	adds	r5, #8
 801882e:	2d0c      	cmp	r5, #12
 8018830:	bf38      	it	cc
 8018832:	250c      	movcc	r5, #12
 8018834:	2d00      	cmp	r5, #0
 8018836:	4606      	mov	r6, r0
 8018838:	db01      	blt.n	801883e <_malloc_r+0x1a>
 801883a:	42a9      	cmp	r1, r5
 801883c:	d903      	bls.n	8018846 <_malloc_r+0x22>
 801883e:	230c      	movs	r3, #12
 8018840:	6033      	str	r3, [r6, #0]
 8018842:	2000      	movs	r0, #0
 8018844:	bd70      	pop	{r4, r5, r6, pc}
 8018846:	f000 fddb 	bl	8019400 <__malloc_lock>
 801884a:	4a21      	ldr	r2, [pc, #132]	; (80188d0 <_malloc_r+0xac>)
 801884c:	6814      	ldr	r4, [r2, #0]
 801884e:	4621      	mov	r1, r4
 8018850:	b991      	cbnz	r1, 8018878 <_malloc_r+0x54>
 8018852:	4c20      	ldr	r4, [pc, #128]	; (80188d4 <_malloc_r+0xb0>)
 8018854:	6823      	ldr	r3, [r4, #0]
 8018856:	b91b      	cbnz	r3, 8018860 <_malloc_r+0x3c>
 8018858:	4630      	mov	r0, r6
 801885a:	f000 fc91 	bl	8019180 <_sbrk_r>
 801885e:	6020      	str	r0, [r4, #0]
 8018860:	4629      	mov	r1, r5
 8018862:	4630      	mov	r0, r6
 8018864:	f000 fc8c 	bl	8019180 <_sbrk_r>
 8018868:	1c43      	adds	r3, r0, #1
 801886a:	d124      	bne.n	80188b6 <_malloc_r+0x92>
 801886c:	230c      	movs	r3, #12
 801886e:	6033      	str	r3, [r6, #0]
 8018870:	4630      	mov	r0, r6
 8018872:	f000 fdc6 	bl	8019402 <__malloc_unlock>
 8018876:	e7e4      	b.n	8018842 <_malloc_r+0x1e>
 8018878:	680b      	ldr	r3, [r1, #0]
 801887a:	1b5b      	subs	r3, r3, r5
 801887c:	d418      	bmi.n	80188b0 <_malloc_r+0x8c>
 801887e:	2b0b      	cmp	r3, #11
 8018880:	d90f      	bls.n	80188a2 <_malloc_r+0x7e>
 8018882:	600b      	str	r3, [r1, #0]
 8018884:	50cd      	str	r5, [r1, r3]
 8018886:	18cc      	adds	r4, r1, r3
 8018888:	4630      	mov	r0, r6
 801888a:	f000 fdba 	bl	8019402 <__malloc_unlock>
 801888e:	f104 000b 	add.w	r0, r4, #11
 8018892:	1d23      	adds	r3, r4, #4
 8018894:	f020 0007 	bic.w	r0, r0, #7
 8018898:	1ac3      	subs	r3, r0, r3
 801889a:	d0d3      	beq.n	8018844 <_malloc_r+0x20>
 801889c:	425a      	negs	r2, r3
 801889e:	50e2      	str	r2, [r4, r3]
 80188a0:	e7d0      	b.n	8018844 <_malloc_r+0x20>
 80188a2:	428c      	cmp	r4, r1
 80188a4:	684b      	ldr	r3, [r1, #4]
 80188a6:	bf16      	itet	ne
 80188a8:	6063      	strne	r3, [r4, #4]
 80188aa:	6013      	streq	r3, [r2, #0]
 80188ac:	460c      	movne	r4, r1
 80188ae:	e7eb      	b.n	8018888 <_malloc_r+0x64>
 80188b0:	460c      	mov	r4, r1
 80188b2:	6849      	ldr	r1, [r1, #4]
 80188b4:	e7cc      	b.n	8018850 <_malloc_r+0x2c>
 80188b6:	1cc4      	adds	r4, r0, #3
 80188b8:	f024 0403 	bic.w	r4, r4, #3
 80188bc:	42a0      	cmp	r0, r4
 80188be:	d005      	beq.n	80188cc <_malloc_r+0xa8>
 80188c0:	1a21      	subs	r1, r4, r0
 80188c2:	4630      	mov	r0, r6
 80188c4:	f000 fc5c 	bl	8019180 <_sbrk_r>
 80188c8:	3001      	adds	r0, #1
 80188ca:	d0cf      	beq.n	801886c <_malloc_r+0x48>
 80188cc:	6025      	str	r5, [r4, #0]
 80188ce:	e7db      	b.n	8018888 <_malloc_r+0x64>
 80188d0:	20041334 	.word	0x20041334
 80188d4:	20041338 	.word	0x20041338

080188d8 <__ssputs_r>:
 80188d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188dc:	688e      	ldr	r6, [r1, #8]
 80188de:	429e      	cmp	r6, r3
 80188e0:	4682      	mov	sl, r0
 80188e2:	460c      	mov	r4, r1
 80188e4:	4690      	mov	r8, r2
 80188e6:	4699      	mov	r9, r3
 80188e8:	d837      	bhi.n	801895a <__ssputs_r+0x82>
 80188ea:	898a      	ldrh	r2, [r1, #12]
 80188ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80188f0:	d031      	beq.n	8018956 <__ssputs_r+0x7e>
 80188f2:	6825      	ldr	r5, [r4, #0]
 80188f4:	6909      	ldr	r1, [r1, #16]
 80188f6:	1a6f      	subs	r7, r5, r1
 80188f8:	6965      	ldr	r5, [r4, #20]
 80188fa:	2302      	movs	r3, #2
 80188fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018900:	fb95 f5f3 	sdiv	r5, r5, r3
 8018904:	f109 0301 	add.w	r3, r9, #1
 8018908:	443b      	add	r3, r7
 801890a:	429d      	cmp	r5, r3
 801890c:	bf38      	it	cc
 801890e:	461d      	movcc	r5, r3
 8018910:	0553      	lsls	r3, r2, #21
 8018912:	d530      	bpl.n	8018976 <__ssputs_r+0x9e>
 8018914:	4629      	mov	r1, r5
 8018916:	f7ff ff85 	bl	8018824 <_malloc_r>
 801891a:	4606      	mov	r6, r0
 801891c:	b950      	cbnz	r0, 8018934 <__ssputs_r+0x5c>
 801891e:	230c      	movs	r3, #12
 8018920:	f8ca 3000 	str.w	r3, [sl]
 8018924:	89a3      	ldrh	r3, [r4, #12]
 8018926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801892a:	81a3      	strh	r3, [r4, #12]
 801892c:	f04f 30ff 	mov.w	r0, #4294967295
 8018930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018934:	463a      	mov	r2, r7
 8018936:	6921      	ldr	r1, [r4, #16]
 8018938:	f7fc fbc2 	bl	80150c0 <memcpy>
 801893c:	89a3      	ldrh	r3, [r4, #12]
 801893e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018946:	81a3      	strh	r3, [r4, #12]
 8018948:	6126      	str	r6, [r4, #16]
 801894a:	6165      	str	r5, [r4, #20]
 801894c:	443e      	add	r6, r7
 801894e:	1bed      	subs	r5, r5, r7
 8018950:	6026      	str	r6, [r4, #0]
 8018952:	60a5      	str	r5, [r4, #8]
 8018954:	464e      	mov	r6, r9
 8018956:	454e      	cmp	r6, r9
 8018958:	d900      	bls.n	801895c <__ssputs_r+0x84>
 801895a:	464e      	mov	r6, r9
 801895c:	4632      	mov	r2, r6
 801895e:	4641      	mov	r1, r8
 8018960:	6820      	ldr	r0, [r4, #0]
 8018962:	f000 fd34 	bl	80193ce <memmove>
 8018966:	68a3      	ldr	r3, [r4, #8]
 8018968:	1b9b      	subs	r3, r3, r6
 801896a:	60a3      	str	r3, [r4, #8]
 801896c:	6823      	ldr	r3, [r4, #0]
 801896e:	441e      	add	r6, r3
 8018970:	6026      	str	r6, [r4, #0]
 8018972:	2000      	movs	r0, #0
 8018974:	e7dc      	b.n	8018930 <__ssputs_r+0x58>
 8018976:	462a      	mov	r2, r5
 8018978:	f000 fd44 	bl	8019404 <_realloc_r>
 801897c:	4606      	mov	r6, r0
 801897e:	2800      	cmp	r0, #0
 8018980:	d1e2      	bne.n	8018948 <__ssputs_r+0x70>
 8018982:	6921      	ldr	r1, [r4, #16]
 8018984:	4650      	mov	r0, sl
 8018986:	f7ff feff 	bl	8018788 <_free_r>
 801898a:	e7c8      	b.n	801891e <__ssputs_r+0x46>

0801898c <_svfiprintf_r>:
 801898c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018990:	461d      	mov	r5, r3
 8018992:	898b      	ldrh	r3, [r1, #12]
 8018994:	061f      	lsls	r7, r3, #24
 8018996:	b09d      	sub	sp, #116	; 0x74
 8018998:	4680      	mov	r8, r0
 801899a:	460c      	mov	r4, r1
 801899c:	4616      	mov	r6, r2
 801899e:	d50f      	bpl.n	80189c0 <_svfiprintf_r+0x34>
 80189a0:	690b      	ldr	r3, [r1, #16]
 80189a2:	b96b      	cbnz	r3, 80189c0 <_svfiprintf_r+0x34>
 80189a4:	2140      	movs	r1, #64	; 0x40
 80189a6:	f7ff ff3d 	bl	8018824 <_malloc_r>
 80189aa:	6020      	str	r0, [r4, #0]
 80189ac:	6120      	str	r0, [r4, #16]
 80189ae:	b928      	cbnz	r0, 80189bc <_svfiprintf_r+0x30>
 80189b0:	230c      	movs	r3, #12
 80189b2:	f8c8 3000 	str.w	r3, [r8]
 80189b6:	f04f 30ff 	mov.w	r0, #4294967295
 80189ba:	e0c8      	b.n	8018b4e <_svfiprintf_r+0x1c2>
 80189bc:	2340      	movs	r3, #64	; 0x40
 80189be:	6163      	str	r3, [r4, #20]
 80189c0:	2300      	movs	r3, #0
 80189c2:	9309      	str	r3, [sp, #36]	; 0x24
 80189c4:	2320      	movs	r3, #32
 80189c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80189ca:	2330      	movs	r3, #48	; 0x30
 80189cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80189d0:	9503      	str	r5, [sp, #12]
 80189d2:	f04f 0b01 	mov.w	fp, #1
 80189d6:	4637      	mov	r7, r6
 80189d8:	463d      	mov	r5, r7
 80189da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80189de:	b10b      	cbz	r3, 80189e4 <_svfiprintf_r+0x58>
 80189e0:	2b25      	cmp	r3, #37	; 0x25
 80189e2:	d13e      	bne.n	8018a62 <_svfiprintf_r+0xd6>
 80189e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80189e8:	d00b      	beq.n	8018a02 <_svfiprintf_r+0x76>
 80189ea:	4653      	mov	r3, sl
 80189ec:	4632      	mov	r2, r6
 80189ee:	4621      	mov	r1, r4
 80189f0:	4640      	mov	r0, r8
 80189f2:	f7ff ff71 	bl	80188d8 <__ssputs_r>
 80189f6:	3001      	adds	r0, #1
 80189f8:	f000 80a4 	beq.w	8018b44 <_svfiprintf_r+0x1b8>
 80189fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189fe:	4453      	add	r3, sl
 8018a00:	9309      	str	r3, [sp, #36]	; 0x24
 8018a02:	783b      	ldrb	r3, [r7, #0]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	f000 809d 	beq.w	8018b44 <_svfiprintf_r+0x1b8>
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8018a10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018a14:	9304      	str	r3, [sp, #16]
 8018a16:	9307      	str	r3, [sp, #28]
 8018a18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018a1c:	931a      	str	r3, [sp, #104]	; 0x68
 8018a1e:	462f      	mov	r7, r5
 8018a20:	2205      	movs	r2, #5
 8018a22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018a26:	4850      	ldr	r0, [pc, #320]	; (8018b68 <_svfiprintf_r+0x1dc>)
 8018a28:	f7e7 fbf2 	bl	8000210 <memchr>
 8018a2c:	9b04      	ldr	r3, [sp, #16]
 8018a2e:	b9d0      	cbnz	r0, 8018a66 <_svfiprintf_r+0xda>
 8018a30:	06d9      	lsls	r1, r3, #27
 8018a32:	bf44      	itt	mi
 8018a34:	2220      	movmi	r2, #32
 8018a36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018a3a:	071a      	lsls	r2, r3, #28
 8018a3c:	bf44      	itt	mi
 8018a3e:	222b      	movmi	r2, #43	; 0x2b
 8018a40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018a44:	782a      	ldrb	r2, [r5, #0]
 8018a46:	2a2a      	cmp	r2, #42	; 0x2a
 8018a48:	d015      	beq.n	8018a76 <_svfiprintf_r+0xea>
 8018a4a:	9a07      	ldr	r2, [sp, #28]
 8018a4c:	462f      	mov	r7, r5
 8018a4e:	2000      	movs	r0, #0
 8018a50:	250a      	movs	r5, #10
 8018a52:	4639      	mov	r1, r7
 8018a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a58:	3b30      	subs	r3, #48	; 0x30
 8018a5a:	2b09      	cmp	r3, #9
 8018a5c:	d94d      	bls.n	8018afa <_svfiprintf_r+0x16e>
 8018a5e:	b1b8      	cbz	r0, 8018a90 <_svfiprintf_r+0x104>
 8018a60:	e00f      	b.n	8018a82 <_svfiprintf_r+0xf6>
 8018a62:	462f      	mov	r7, r5
 8018a64:	e7b8      	b.n	80189d8 <_svfiprintf_r+0x4c>
 8018a66:	4a40      	ldr	r2, [pc, #256]	; (8018b68 <_svfiprintf_r+0x1dc>)
 8018a68:	1a80      	subs	r0, r0, r2
 8018a6a:	fa0b f000 	lsl.w	r0, fp, r0
 8018a6e:	4318      	orrs	r0, r3
 8018a70:	9004      	str	r0, [sp, #16]
 8018a72:	463d      	mov	r5, r7
 8018a74:	e7d3      	b.n	8018a1e <_svfiprintf_r+0x92>
 8018a76:	9a03      	ldr	r2, [sp, #12]
 8018a78:	1d11      	adds	r1, r2, #4
 8018a7a:	6812      	ldr	r2, [r2, #0]
 8018a7c:	9103      	str	r1, [sp, #12]
 8018a7e:	2a00      	cmp	r2, #0
 8018a80:	db01      	blt.n	8018a86 <_svfiprintf_r+0xfa>
 8018a82:	9207      	str	r2, [sp, #28]
 8018a84:	e004      	b.n	8018a90 <_svfiprintf_r+0x104>
 8018a86:	4252      	negs	r2, r2
 8018a88:	f043 0302 	orr.w	r3, r3, #2
 8018a8c:	9207      	str	r2, [sp, #28]
 8018a8e:	9304      	str	r3, [sp, #16]
 8018a90:	783b      	ldrb	r3, [r7, #0]
 8018a92:	2b2e      	cmp	r3, #46	; 0x2e
 8018a94:	d10c      	bne.n	8018ab0 <_svfiprintf_r+0x124>
 8018a96:	787b      	ldrb	r3, [r7, #1]
 8018a98:	2b2a      	cmp	r3, #42	; 0x2a
 8018a9a:	d133      	bne.n	8018b04 <_svfiprintf_r+0x178>
 8018a9c:	9b03      	ldr	r3, [sp, #12]
 8018a9e:	1d1a      	adds	r2, r3, #4
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	9203      	str	r2, [sp, #12]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	bfb8      	it	lt
 8018aa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8018aac:	3702      	adds	r7, #2
 8018aae:	9305      	str	r3, [sp, #20]
 8018ab0:	4d2e      	ldr	r5, [pc, #184]	; (8018b6c <_svfiprintf_r+0x1e0>)
 8018ab2:	7839      	ldrb	r1, [r7, #0]
 8018ab4:	2203      	movs	r2, #3
 8018ab6:	4628      	mov	r0, r5
 8018ab8:	f7e7 fbaa 	bl	8000210 <memchr>
 8018abc:	b138      	cbz	r0, 8018ace <_svfiprintf_r+0x142>
 8018abe:	2340      	movs	r3, #64	; 0x40
 8018ac0:	1b40      	subs	r0, r0, r5
 8018ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8018ac6:	9b04      	ldr	r3, [sp, #16]
 8018ac8:	4303      	orrs	r3, r0
 8018aca:	3701      	adds	r7, #1
 8018acc:	9304      	str	r3, [sp, #16]
 8018ace:	7839      	ldrb	r1, [r7, #0]
 8018ad0:	4827      	ldr	r0, [pc, #156]	; (8018b70 <_svfiprintf_r+0x1e4>)
 8018ad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018ad6:	2206      	movs	r2, #6
 8018ad8:	1c7e      	adds	r6, r7, #1
 8018ada:	f7e7 fb99 	bl	8000210 <memchr>
 8018ade:	2800      	cmp	r0, #0
 8018ae0:	d038      	beq.n	8018b54 <_svfiprintf_r+0x1c8>
 8018ae2:	4b24      	ldr	r3, [pc, #144]	; (8018b74 <_svfiprintf_r+0x1e8>)
 8018ae4:	bb13      	cbnz	r3, 8018b2c <_svfiprintf_r+0x1a0>
 8018ae6:	9b03      	ldr	r3, [sp, #12]
 8018ae8:	3307      	adds	r3, #7
 8018aea:	f023 0307 	bic.w	r3, r3, #7
 8018aee:	3308      	adds	r3, #8
 8018af0:	9303      	str	r3, [sp, #12]
 8018af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018af4:	444b      	add	r3, r9
 8018af6:	9309      	str	r3, [sp, #36]	; 0x24
 8018af8:	e76d      	b.n	80189d6 <_svfiprintf_r+0x4a>
 8018afa:	fb05 3202 	mla	r2, r5, r2, r3
 8018afe:	2001      	movs	r0, #1
 8018b00:	460f      	mov	r7, r1
 8018b02:	e7a6      	b.n	8018a52 <_svfiprintf_r+0xc6>
 8018b04:	2300      	movs	r3, #0
 8018b06:	3701      	adds	r7, #1
 8018b08:	9305      	str	r3, [sp, #20]
 8018b0a:	4619      	mov	r1, r3
 8018b0c:	250a      	movs	r5, #10
 8018b0e:	4638      	mov	r0, r7
 8018b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018b14:	3a30      	subs	r2, #48	; 0x30
 8018b16:	2a09      	cmp	r2, #9
 8018b18:	d903      	bls.n	8018b22 <_svfiprintf_r+0x196>
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d0c8      	beq.n	8018ab0 <_svfiprintf_r+0x124>
 8018b1e:	9105      	str	r1, [sp, #20]
 8018b20:	e7c6      	b.n	8018ab0 <_svfiprintf_r+0x124>
 8018b22:	fb05 2101 	mla	r1, r5, r1, r2
 8018b26:	2301      	movs	r3, #1
 8018b28:	4607      	mov	r7, r0
 8018b2a:	e7f0      	b.n	8018b0e <_svfiprintf_r+0x182>
 8018b2c:	ab03      	add	r3, sp, #12
 8018b2e:	9300      	str	r3, [sp, #0]
 8018b30:	4622      	mov	r2, r4
 8018b32:	4b11      	ldr	r3, [pc, #68]	; (8018b78 <_svfiprintf_r+0x1ec>)
 8018b34:	a904      	add	r1, sp, #16
 8018b36:	4640      	mov	r0, r8
 8018b38:	f7fc fb6a 	bl	8015210 <_printf_float>
 8018b3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018b40:	4681      	mov	r9, r0
 8018b42:	d1d6      	bne.n	8018af2 <_svfiprintf_r+0x166>
 8018b44:	89a3      	ldrh	r3, [r4, #12]
 8018b46:	065b      	lsls	r3, r3, #25
 8018b48:	f53f af35 	bmi.w	80189b6 <_svfiprintf_r+0x2a>
 8018b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b4e:	b01d      	add	sp, #116	; 0x74
 8018b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b54:	ab03      	add	r3, sp, #12
 8018b56:	9300      	str	r3, [sp, #0]
 8018b58:	4622      	mov	r2, r4
 8018b5a:	4b07      	ldr	r3, [pc, #28]	; (8018b78 <_svfiprintf_r+0x1ec>)
 8018b5c:	a904      	add	r1, sp, #16
 8018b5e:	4640      	mov	r0, r8
 8018b60:	f7fc fe0c 	bl	801577c <_printf_i>
 8018b64:	e7ea      	b.n	8018b3c <_svfiprintf_r+0x1b0>
 8018b66:	bf00      	nop
 8018b68:	08019f54 	.word	0x08019f54
 8018b6c:	08019f5a 	.word	0x08019f5a
 8018b70:	08019f5e 	.word	0x08019f5e
 8018b74:	08015211 	.word	0x08015211
 8018b78:	080188d9 	.word	0x080188d9

08018b7c <_sungetc_r>:
 8018b7c:	b538      	push	{r3, r4, r5, lr}
 8018b7e:	1c4b      	adds	r3, r1, #1
 8018b80:	4614      	mov	r4, r2
 8018b82:	d103      	bne.n	8018b8c <_sungetc_r+0x10>
 8018b84:	f04f 35ff 	mov.w	r5, #4294967295
 8018b88:	4628      	mov	r0, r5
 8018b8a:	bd38      	pop	{r3, r4, r5, pc}
 8018b8c:	8993      	ldrh	r3, [r2, #12]
 8018b8e:	f023 0320 	bic.w	r3, r3, #32
 8018b92:	8193      	strh	r3, [r2, #12]
 8018b94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b96:	6852      	ldr	r2, [r2, #4]
 8018b98:	b2cd      	uxtb	r5, r1
 8018b9a:	b18b      	cbz	r3, 8018bc0 <_sungetc_r+0x44>
 8018b9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018b9e:	4293      	cmp	r3, r2
 8018ba0:	dd08      	ble.n	8018bb4 <_sungetc_r+0x38>
 8018ba2:	6823      	ldr	r3, [r4, #0]
 8018ba4:	1e5a      	subs	r2, r3, #1
 8018ba6:	6022      	str	r2, [r4, #0]
 8018ba8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018bac:	6863      	ldr	r3, [r4, #4]
 8018bae:	3301      	adds	r3, #1
 8018bb0:	6063      	str	r3, [r4, #4]
 8018bb2:	e7e9      	b.n	8018b88 <_sungetc_r+0xc>
 8018bb4:	4621      	mov	r1, r4
 8018bb6:	f000 fbc3 	bl	8019340 <__submore>
 8018bba:	2800      	cmp	r0, #0
 8018bbc:	d0f1      	beq.n	8018ba2 <_sungetc_r+0x26>
 8018bbe:	e7e1      	b.n	8018b84 <_sungetc_r+0x8>
 8018bc0:	6921      	ldr	r1, [r4, #16]
 8018bc2:	6823      	ldr	r3, [r4, #0]
 8018bc4:	b151      	cbz	r1, 8018bdc <_sungetc_r+0x60>
 8018bc6:	4299      	cmp	r1, r3
 8018bc8:	d208      	bcs.n	8018bdc <_sungetc_r+0x60>
 8018bca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018bce:	42a9      	cmp	r1, r5
 8018bd0:	d104      	bne.n	8018bdc <_sungetc_r+0x60>
 8018bd2:	3b01      	subs	r3, #1
 8018bd4:	3201      	adds	r2, #1
 8018bd6:	6023      	str	r3, [r4, #0]
 8018bd8:	6062      	str	r2, [r4, #4]
 8018bda:	e7d5      	b.n	8018b88 <_sungetc_r+0xc>
 8018bdc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018be4:	6363      	str	r3, [r4, #52]	; 0x34
 8018be6:	2303      	movs	r3, #3
 8018be8:	63a3      	str	r3, [r4, #56]	; 0x38
 8018bea:	4623      	mov	r3, r4
 8018bec:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018bf0:	6023      	str	r3, [r4, #0]
 8018bf2:	2301      	movs	r3, #1
 8018bf4:	e7dc      	b.n	8018bb0 <_sungetc_r+0x34>

08018bf6 <__ssrefill_r>:
 8018bf6:	b510      	push	{r4, lr}
 8018bf8:	460c      	mov	r4, r1
 8018bfa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018bfc:	b169      	cbz	r1, 8018c1a <__ssrefill_r+0x24>
 8018bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c02:	4299      	cmp	r1, r3
 8018c04:	d001      	beq.n	8018c0a <__ssrefill_r+0x14>
 8018c06:	f7ff fdbf 	bl	8018788 <_free_r>
 8018c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018c0c:	6063      	str	r3, [r4, #4]
 8018c0e:	2000      	movs	r0, #0
 8018c10:	6360      	str	r0, [r4, #52]	; 0x34
 8018c12:	b113      	cbz	r3, 8018c1a <__ssrefill_r+0x24>
 8018c14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018c16:	6023      	str	r3, [r4, #0]
 8018c18:	bd10      	pop	{r4, pc}
 8018c1a:	6923      	ldr	r3, [r4, #16]
 8018c1c:	6023      	str	r3, [r4, #0]
 8018c1e:	2300      	movs	r3, #0
 8018c20:	6063      	str	r3, [r4, #4]
 8018c22:	89a3      	ldrh	r3, [r4, #12]
 8018c24:	f043 0320 	orr.w	r3, r3, #32
 8018c28:	81a3      	strh	r3, [r4, #12]
 8018c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c2e:	e7f3      	b.n	8018c18 <__ssrefill_r+0x22>

08018c30 <__ssvfiscanf_r>:
 8018c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c34:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018c38:	460c      	mov	r4, r1
 8018c3a:	2100      	movs	r1, #0
 8018c3c:	9144      	str	r1, [sp, #272]	; 0x110
 8018c3e:	9145      	str	r1, [sp, #276]	; 0x114
 8018c40:	499f      	ldr	r1, [pc, #636]	; (8018ec0 <__ssvfiscanf_r+0x290>)
 8018c42:	91a0      	str	r1, [sp, #640]	; 0x280
 8018c44:	f10d 0804 	add.w	r8, sp, #4
 8018c48:	499e      	ldr	r1, [pc, #632]	; (8018ec4 <__ssvfiscanf_r+0x294>)
 8018c4a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018ec8 <__ssvfiscanf_r+0x298>
 8018c4e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018c52:	4606      	mov	r6, r0
 8018c54:	4692      	mov	sl, r2
 8018c56:	91a1      	str	r1, [sp, #644]	; 0x284
 8018c58:	9300      	str	r3, [sp, #0]
 8018c5a:	270a      	movs	r7, #10
 8018c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	f000 812a 	beq.w	8018eba <__ssvfiscanf_r+0x28a>
 8018c66:	4655      	mov	r5, sl
 8018c68:	f7ff f948 	bl	8017efc <__locale_ctype_ptr>
 8018c6c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018c70:	4458      	add	r0, fp
 8018c72:	7843      	ldrb	r3, [r0, #1]
 8018c74:	f013 0308 	ands.w	r3, r3, #8
 8018c78:	d01c      	beq.n	8018cb4 <__ssvfiscanf_r+0x84>
 8018c7a:	6863      	ldr	r3, [r4, #4]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	dd12      	ble.n	8018ca6 <__ssvfiscanf_r+0x76>
 8018c80:	f7ff f93c 	bl	8017efc <__locale_ctype_ptr>
 8018c84:	6823      	ldr	r3, [r4, #0]
 8018c86:	781a      	ldrb	r2, [r3, #0]
 8018c88:	4410      	add	r0, r2
 8018c8a:	7842      	ldrb	r2, [r0, #1]
 8018c8c:	0712      	lsls	r2, r2, #28
 8018c8e:	d401      	bmi.n	8018c94 <__ssvfiscanf_r+0x64>
 8018c90:	46aa      	mov	sl, r5
 8018c92:	e7e3      	b.n	8018c5c <__ssvfiscanf_r+0x2c>
 8018c94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018c96:	3201      	adds	r2, #1
 8018c98:	9245      	str	r2, [sp, #276]	; 0x114
 8018c9a:	6862      	ldr	r2, [r4, #4]
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	3a01      	subs	r2, #1
 8018ca0:	6062      	str	r2, [r4, #4]
 8018ca2:	6023      	str	r3, [r4, #0]
 8018ca4:	e7e9      	b.n	8018c7a <__ssvfiscanf_r+0x4a>
 8018ca6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018ca8:	4621      	mov	r1, r4
 8018caa:	4630      	mov	r0, r6
 8018cac:	4798      	blx	r3
 8018cae:	2800      	cmp	r0, #0
 8018cb0:	d0e6      	beq.n	8018c80 <__ssvfiscanf_r+0x50>
 8018cb2:	e7ed      	b.n	8018c90 <__ssvfiscanf_r+0x60>
 8018cb4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018cb8:	f040 8082 	bne.w	8018dc0 <__ssvfiscanf_r+0x190>
 8018cbc:	9343      	str	r3, [sp, #268]	; 0x10c
 8018cbe:	9341      	str	r3, [sp, #260]	; 0x104
 8018cc0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8018cc6:	d103      	bne.n	8018cd0 <__ssvfiscanf_r+0xa0>
 8018cc8:	2310      	movs	r3, #16
 8018cca:	9341      	str	r3, [sp, #260]	; 0x104
 8018ccc:	f10a 0502 	add.w	r5, sl, #2
 8018cd0:	46aa      	mov	sl, r5
 8018cd2:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018cd6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018cda:	2a09      	cmp	r2, #9
 8018cdc:	d922      	bls.n	8018d24 <__ssvfiscanf_r+0xf4>
 8018cde:	2203      	movs	r2, #3
 8018ce0:	4879      	ldr	r0, [pc, #484]	; (8018ec8 <__ssvfiscanf_r+0x298>)
 8018ce2:	f7e7 fa95 	bl	8000210 <memchr>
 8018ce6:	b138      	cbz	r0, 8018cf8 <__ssvfiscanf_r+0xc8>
 8018ce8:	eba0 0309 	sub.w	r3, r0, r9
 8018cec:	2001      	movs	r0, #1
 8018cee:	4098      	lsls	r0, r3
 8018cf0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018cf2:	4318      	orrs	r0, r3
 8018cf4:	9041      	str	r0, [sp, #260]	; 0x104
 8018cf6:	46aa      	mov	sl, r5
 8018cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8018cfc:	2b67      	cmp	r3, #103	; 0x67
 8018cfe:	f10a 0501 	add.w	r5, sl, #1
 8018d02:	d82b      	bhi.n	8018d5c <__ssvfiscanf_r+0x12c>
 8018d04:	2b65      	cmp	r3, #101	; 0x65
 8018d06:	f080 809f 	bcs.w	8018e48 <__ssvfiscanf_r+0x218>
 8018d0a:	2b47      	cmp	r3, #71	; 0x47
 8018d0c:	d810      	bhi.n	8018d30 <__ssvfiscanf_r+0x100>
 8018d0e:	2b45      	cmp	r3, #69	; 0x45
 8018d10:	f080 809a 	bcs.w	8018e48 <__ssvfiscanf_r+0x218>
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d06c      	beq.n	8018df2 <__ssvfiscanf_r+0x1c2>
 8018d18:	2b25      	cmp	r3, #37	; 0x25
 8018d1a:	d051      	beq.n	8018dc0 <__ssvfiscanf_r+0x190>
 8018d1c:	2303      	movs	r3, #3
 8018d1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018d20:	9742      	str	r7, [sp, #264]	; 0x108
 8018d22:	e027      	b.n	8018d74 <__ssvfiscanf_r+0x144>
 8018d24:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018d26:	fb07 1303 	mla	r3, r7, r3, r1
 8018d2a:	3b30      	subs	r3, #48	; 0x30
 8018d2c:	9343      	str	r3, [sp, #268]	; 0x10c
 8018d2e:	e7cf      	b.n	8018cd0 <__ssvfiscanf_r+0xa0>
 8018d30:	2b5b      	cmp	r3, #91	; 0x5b
 8018d32:	d06a      	beq.n	8018e0a <__ssvfiscanf_r+0x1da>
 8018d34:	d80c      	bhi.n	8018d50 <__ssvfiscanf_r+0x120>
 8018d36:	2b58      	cmp	r3, #88	; 0x58
 8018d38:	d1f0      	bne.n	8018d1c <__ssvfiscanf_r+0xec>
 8018d3a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018d40:	9241      	str	r2, [sp, #260]	; 0x104
 8018d42:	2210      	movs	r2, #16
 8018d44:	9242      	str	r2, [sp, #264]	; 0x108
 8018d46:	2b6e      	cmp	r3, #110	; 0x6e
 8018d48:	bf8c      	ite	hi
 8018d4a:	2304      	movhi	r3, #4
 8018d4c:	2303      	movls	r3, #3
 8018d4e:	e010      	b.n	8018d72 <__ssvfiscanf_r+0x142>
 8018d50:	2b63      	cmp	r3, #99	; 0x63
 8018d52:	d065      	beq.n	8018e20 <__ssvfiscanf_r+0x1f0>
 8018d54:	2b64      	cmp	r3, #100	; 0x64
 8018d56:	d1e1      	bne.n	8018d1c <__ssvfiscanf_r+0xec>
 8018d58:	9742      	str	r7, [sp, #264]	; 0x108
 8018d5a:	e7f4      	b.n	8018d46 <__ssvfiscanf_r+0x116>
 8018d5c:	2b70      	cmp	r3, #112	; 0x70
 8018d5e:	d04b      	beq.n	8018df8 <__ssvfiscanf_r+0x1c8>
 8018d60:	d826      	bhi.n	8018db0 <__ssvfiscanf_r+0x180>
 8018d62:	2b6e      	cmp	r3, #110	; 0x6e
 8018d64:	d062      	beq.n	8018e2c <__ssvfiscanf_r+0x1fc>
 8018d66:	d84c      	bhi.n	8018e02 <__ssvfiscanf_r+0x1d2>
 8018d68:	2b69      	cmp	r3, #105	; 0x69
 8018d6a:	d1d7      	bne.n	8018d1c <__ssvfiscanf_r+0xec>
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	9342      	str	r3, [sp, #264]	; 0x108
 8018d70:	2303      	movs	r3, #3
 8018d72:	9347      	str	r3, [sp, #284]	; 0x11c
 8018d74:	6863      	ldr	r3, [r4, #4]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	dd68      	ble.n	8018e4c <__ssvfiscanf_r+0x21c>
 8018d7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018d7c:	0659      	lsls	r1, r3, #25
 8018d7e:	d407      	bmi.n	8018d90 <__ssvfiscanf_r+0x160>
 8018d80:	f7ff f8bc 	bl	8017efc <__locale_ctype_ptr>
 8018d84:	6823      	ldr	r3, [r4, #0]
 8018d86:	781a      	ldrb	r2, [r3, #0]
 8018d88:	4410      	add	r0, r2
 8018d8a:	7842      	ldrb	r2, [r0, #1]
 8018d8c:	0712      	lsls	r2, r2, #28
 8018d8e:	d464      	bmi.n	8018e5a <__ssvfiscanf_r+0x22a>
 8018d90:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018d92:	2b02      	cmp	r3, #2
 8018d94:	dc73      	bgt.n	8018e7e <__ssvfiscanf_r+0x24e>
 8018d96:	466b      	mov	r3, sp
 8018d98:	4622      	mov	r2, r4
 8018d9a:	a941      	add	r1, sp, #260	; 0x104
 8018d9c:	4630      	mov	r0, r6
 8018d9e:	f000 f897 	bl	8018ed0 <_scanf_chars>
 8018da2:	2801      	cmp	r0, #1
 8018da4:	f000 8089 	beq.w	8018eba <__ssvfiscanf_r+0x28a>
 8018da8:	2802      	cmp	r0, #2
 8018daa:	f47f af71 	bne.w	8018c90 <__ssvfiscanf_r+0x60>
 8018dae:	e01d      	b.n	8018dec <__ssvfiscanf_r+0x1bc>
 8018db0:	2b75      	cmp	r3, #117	; 0x75
 8018db2:	d0d1      	beq.n	8018d58 <__ssvfiscanf_r+0x128>
 8018db4:	2b78      	cmp	r3, #120	; 0x78
 8018db6:	d0c0      	beq.n	8018d3a <__ssvfiscanf_r+0x10a>
 8018db8:	2b73      	cmp	r3, #115	; 0x73
 8018dba:	d1af      	bne.n	8018d1c <__ssvfiscanf_r+0xec>
 8018dbc:	2302      	movs	r3, #2
 8018dbe:	e7d8      	b.n	8018d72 <__ssvfiscanf_r+0x142>
 8018dc0:	6863      	ldr	r3, [r4, #4]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	dd0c      	ble.n	8018de0 <__ssvfiscanf_r+0x1b0>
 8018dc6:	6823      	ldr	r3, [r4, #0]
 8018dc8:	781a      	ldrb	r2, [r3, #0]
 8018dca:	455a      	cmp	r2, fp
 8018dcc:	d175      	bne.n	8018eba <__ssvfiscanf_r+0x28a>
 8018dce:	3301      	adds	r3, #1
 8018dd0:	6862      	ldr	r2, [r4, #4]
 8018dd2:	6023      	str	r3, [r4, #0]
 8018dd4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018dd6:	3a01      	subs	r2, #1
 8018dd8:	3301      	adds	r3, #1
 8018dda:	6062      	str	r2, [r4, #4]
 8018ddc:	9345      	str	r3, [sp, #276]	; 0x114
 8018dde:	e757      	b.n	8018c90 <__ssvfiscanf_r+0x60>
 8018de0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018de2:	4621      	mov	r1, r4
 8018de4:	4630      	mov	r0, r6
 8018de6:	4798      	blx	r3
 8018de8:	2800      	cmp	r0, #0
 8018dea:	d0ec      	beq.n	8018dc6 <__ssvfiscanf_r+0x196>
 8018dec:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018dee:	2800      	cmp	r0, #0
 8018df0:	d159      	bne.n	8018ea6 <__ssvfiscanf_r+0x276>
 8018df2:	f04f 30ff 	mov.w	r0, #4294967295
 8018df6:	e05c      	b.n	8018eb2 <__ssvfiscanf_r+0x282>
 8018df8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018dfa:	f042 0220 	orr.w	r2, r2, #32
 8018dfe:	9241      	str	r2, [sp, #260]	; 0x104
 8018e00:	e79b      	b.n	8018d3a <__ssvfiscanf_r+0x10a>
 8018e02:	2308      	movs	r3, #8
 8018e04:	9342      	str	r3, [sp, #264]	; 0x108
 8018e06:	2304      	movs	r3, #4
 8018e08:	e7b3      	b.n	8018d72 <__ssvfiscanf_r+0x142>
 8018e0a:	4629      	mov	r1, r5
 8018e0c:	4640      	mov	r0, r8
 8018e0e:	f000 f9c7 	bl	80191a0 <__sccl>
 8018e12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e18:	9341      	str	r3, [sp, #260]	; 0x104
 8018e1a:	4605      	mov	r5, r0
 8018e1c:	2301      	movs	r3, #1
 8018e1e:	e7a8      	b.n	8018d72 <__ssvfiscanf_r+0x142>
 8018e20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e26:	9341      	str	r3, [sp, #260]	; 0x104
 8018e28:	2300      	movs	r3, #0
 8018e2a:	e7a2      	b.n	8018d72 <__ssvfiscanf_r+0x142>
 8018e2c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018e2e:	06c3      	lsls	r3, r0, #27
 8018e30:	f53f af2e 	bmi.w	8018c90 <__ssvfiscanf_r+0x60>
 8018e34:	9b00      	ldr	r3, [sp, #0]
 8018e36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018e38:	1d19      	adds	r1, r3, #4
 8018e3a:	9100      	str	r1, [sp, #0]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	07c0      	lsls	r0, r0, #31
 8018e40:	bf4c      	ite	mi
 8018e42:	801a      	strhmi	r2, [r3, #0]
 8018e44:	601a      	strpl	r2, [r3, #0]
 8018e46:	e723      	b.n	8018c90 <__ssvfiscanf_r+0x60>
 8018e48:	2305      	movs	r3, #5
 8018e4a:	e792      	b.n	8018d72 <__ssvfiscanf_r+0x142>
 8018e4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018e4e:	4621      	mov	r1, r4
 8018e50:	4630      	mov	r0, r6
 8018e52:	4798      	blx	r3
 8018e54:	2800      	cmp	r0, #0
 8018e56:	d090      	beq.n	8018d7a <__ssvfiscanf_r+0x14a>
 8018e58:	e7c8      	b.n	8018dec <__ssvfiscanf_r+0x1bc>
 8018e5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018e5c:	3201      	adds	r2, #1
 8018e5e:	9245      	str	r2, [sp, #276]	; 0x114
 8018e60:	6862      	ldr	r2, [r4, #4]
 8018e62:	3a01      	subs	r2, #1
 8018e64:	2a00      	cmp	r2, #0
 8018e66:	6062      	str	r2, [r4, #4]
 8018e68:	dd02      	ble.n	8018e70 <__ssvfiscanf_r+0x240>
 8018e6a:	3301      	adds	r3, #1
 8018e6c:	6023      	str	r3, [r4, #0]
 8018e6e:	e787      	b.n	8018d80 <__ssvfiscanf_r+0x150>
 8018e70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018e72:	4621      	mov	r1, r4
 8018e74:	4630      	mov	r0, r6
 8018e76:	4798      	blx	r3
 8018e78:	2800      	cmp	r0, #0
 8018e7a:	d081      	beq.n	8018d80 <__ssvfiscanf_r+0x150>
 8018e7c:	e7b6      	b.n	8018dec <__ssvfiscanf_r+0x1bc>
 8018e7e:	2b04      	cmp	r3, #4
 8018e80:	dc06      	bgt.n	8018e90 <__ssvfiscanf_r+0x260>
 8018e82:	466b      	mov	r3, sp
 8018e84:	4622      	mov	r2, r4
 8018e86:	a941      	add	r1, sp, #260	; 0x104
 8018e88:	4630      	mov	r0, r6
 8018e8a:	f000 f885 	bl	8018f98 <_scanf_i>
 8018e8e:	e788      	b.n	8018da2 <__ssvfiscanf_r+0x172>
 8018e90:	4b0e      	ldr	r3, [pc, #56]	; (8018ecc <__ssvfiscanf_r+0x29c>)
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	f43f aefc 	beq.w	8018c90 <__ssvfiscanf_r+0x60>
 8018e98:	466b      	mov	r3, sp
 8018e9a:	4622      	mov	r2, r4
 8018e9c:	a941      	add	r1, sp, #260	; 0x104
 8018e9e:	4630      	mov	r0, r6
 8018ea0:	f7fc fd7e 	bl	80159a0 <_scanf_float>
 8018ea4:	e77d      	b.n	8018da2 <__ssvfiscanf_r+0x172>
 8018ea6:	89a3      	ldrh	r3, [r4, #12]
 8018ea8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018eac:	bf18      	it	ne
 8018eae:	f04f 30ff 	movne.w	r0, #4294967295
 8018eb2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eba:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018ebc:	e7f9      	b.n	8018eb2 <__ssvfiscanf_r+0x282>
 8018ebe:	bf00      	nop
 8018ec0:	08018b7d 	.word	0x08018b7d
 8018ec4:	08018bf7 	.word	0x08018bf7
 8018ec8:	08019f5a 	.word	0x08019f5a
 8018ecc:	080159a1 	.word	0x080159a1

08018ed0 <_scanf_chars>:
 8018ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ed4:	4615      	mov	r5, r2
 8018ed6:	688a      	ldr	r2, [r1, #8]
 8018ed8:	4680      	mov	r8, r0
 8018eda:	460c      	mov	r4, r1
 8018edc:	b932      	cbnz	r2, 8018eec <_scanf_chars+0x1c>
 8018ede:	698a      	ldr	r2, [r1, #24]
 8018ee0:	2a00      	cmp	r2, #0
 8018ee2:	bf14      	ite	ne
 8018ee4:	f04f 32ff 	movne.w	r2, #4294967295
 8018ee8:	2201      	moveq	r2, #1
 8018eea:	608a      	str	r2, [r1, #8]
 8018eec:	6822      	ldr	r2, [r4, #0]
 8018eee:	06d1      	lsls	r1, r2, #27
 8018ef0:	bf5f      	itttt	pl
 8018ef2:	681a      	ldrpl	r2, [r3, #0]
 8018ef4:	1d11      	addpl	r1, r2, #4
 8018ef6:	6019      	strpl	r1, [r3, #0]
 8018ef8:	6817      	ldrpl	r7, [r2, #0]
 8018efa:	2600      	movs	r6, #0
 8018efc:	69a3      	ldr	r3, [r4, #24]
 8018efe:	b1db      	cbz	r3, 8018f38 <_scanf_chars+0x68>
 8018f00:	2b01      	cmp	r3, #1
 8018f02:	d107      	bne.n	8018f14 <_scanf_chars+0x44>
 8018f04:	682b      	ldr	r3, [r5, #0]
 8018f06:	6962      	ldr	r2, [r4, #20]
 8018f08:	781b      	ldrb	r3, [r3, #0]
 8018f0a:	5cd3      	ldrb	r3, [r2, r3]
 8018f0c:	b9a3      	cbnz	r3, 8018f38 <_scanf_chars+0x68>
 8018f0e:	2e00      	cmp	r6, #0
 8018f10:	d132      	bne.n	8018f78 <_scanf_chars+0xa8>
 8018f12:	e006      	b.n	8018f22 <_scanf_chars+0x52>
 8018f14:	2b02      	cmp	r3, #2
 8018f16:	d007      	beq.n	8018f28 <_scanf_chars+0x58>
 8018f18:	2e00      	cmp	r6, #0
 8018f1a:	d12d      	bne.n	8018f78 <_scanf_chars+0xa8>
 8018f1c:	69a3      	ldr	r3, [r4, #24]
 8018f1e:	2b01      	cmp	r3, #1
 8018f20:	d12a      	bne.n	8018f78 <_scanf_chars+0xa8>
 8018f22:	2001      	movs	r0, #1
 8018f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f28:	f7fe ffe8 	bl	8017efc <__locale_ctype_ptr>
 8018f2c:	682b      	ldr	r3, [r5, #0]
 8018f2e:	781b      	ldrb	r3, [r3, #0]
 8018f30:	4418      	add	r0, r3
 8018f32:	7843      	ldrb	r3, [r0, #1]
 8018f34:	071b      	lsls	r3, r3, #28
 8018f36:	d4ef      	bmi.n	8018f18 <_scanf_chars+0x48>
 8018f38:	6823      	ldr	r3, [r4, #0]
 8018f3a:	06da      	lsls	r2, r3, #27
 8018f3c:	bf5e      	ittt	pl
 8018f3e:	682b      	ldrpl	r3, [r5, #0]
 8018f40:	781b      	ldrbpl	r3, [r3, #0]
 8018f42:	703b      	strbpl	r3, [r7, #0]
 8018f44:	682a      	ldr	r2, [r5, #0]
 8018f46:	686b      	ldr	r3, [r5, #4]
 8018f48:	f102 0201 	add.w	r2, r2, #1
 8018f4c:	602a      	str	r2, [r5, #0]
 8018f4e:	68a2      	ldr	r2, [r4, #8]
 8018f50:	f103 33ff 	add.w	r3, r3, #4294967295
 8018f54:	f102 32ff 	add.w	r2, r2, #4294967295
 8018f58:	606b      	str	r3, [r5, #4]
 8018f5a:	f106 0601 	add.w	r6, r6, #1
 8018f5e:	bf58      	it	pl
 8018f60:	3701      	addpl	r7, #1
 8018f62:	60a2      	str	r2, [r4, #8]
 8018f64:	b142      	cbz	r2, 8018f78 <_scanf_chars+0xa8>
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	dcc8      	bgt.n	8018efc <_scanf_chars+0x2c>
 8018f6a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018f6e:	4629      	mov	r1, r5
 8018f70:	4640      	mov	r0, r8
 8018f72:	4798      	blx	r3
 8018f74:	2800      	cmp	r0, #0
 8018f76:	d0c1      	beq.n	8018efc <_scanf_chars+0x2c>
 8018f78:	6823      	ldr	r3, [r4, #0]
 8018f7a:	f013 0310 	ands.w	r3, r3, #16
 8018f7e:	d105      	bne.n	8018f8c <_scanf_chars+0xbc>
 8018f80:	68e2      	ldr	r2, [r4, #12]
 8018f82:	3201      	adds	r2, #1
 8018f84:	60e2      	str	r2, [r4, #12]
 8018f86:	69a2      	ldr	r2, [r4, #24]
 8018f88:	b102      	cbz	r2, 8018f8c <_scanf_chars+0xbc>
 8018f8a:	703b      	strb	r3, [r7, #0]
 8018f8c:	6923      	ldr	r3, [r4, #16]
 8018f8e:	441e      	add	r6, r3
 8018f90:	6126      	str	r6, [r4, #16]
 8018f92:	2000      	movs	r0, #0
 8018f94:	e7c6      	b.n	8018f24 <_scanf_chars+0x54>
	...

08018f98 <_scanf_i>:
 8018f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f9c:	469a      	mov	sl, r3
 8018f9e:	4b74      	ldr	r3, [pc, #464]	; (8019170 <_scanf_i+0x1d8>)
 8018fa0:	460c      	mov	r4, r1
 8018fa2:	4683      	mov	fp, r0
 8018fa4:	4616      	mov	r6, r2
 8018fa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018faa:	b087      	sub	sp, #28
 8018fac:	ab03      	add	r3, sp, #12
 8018fae:	68a7      	ldr	r7, [r4, #8]
 8018fb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018fb4:	4b6f      	ldr	r3, [pc, #444]	; (8019174 <_scanf_i+0x1dc>)
 8018fb6:	69a1      	ldr	r1, [r4, #24]
 8018fb8:	4a6f      	ldr	r2, [pc, #444]	; (8019178 <_scanf_i+0x1e0>)
 8018fba:	2903      	cmp	r1, #3
 8018fbc:	bf08      	it	eq
 8018fbe:	461a      	moveq	r2, r3
 8018fc0:	1e7b      	subs	r3, r7, #1
 8018fc2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018fc6:	bf84      	itt	hi
 8018fc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018fcc:	60a3      	strhi	r3, [r4, #8]
 8018fce:	6823      	ldr	r3, [r4, #0]
 8018fd0:	9200      	str	r2, [sp, #0]
 8018fd2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018fd6:	bf88      	it	hi
 8018fd8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018fdc:	f104 091c 	add.w	r9, r4, #28
 8018fe0:	6023      	str	r3, [r4, #0]
 8018fe2:	bf8c      	ite	hi
 8018fe4:	197f      	addhi	r7, r7, r5
 8018fe6:	2700      	movls	r7, #0
 8018fe8:	464b      	mov	r3, r9
 8018fea:	f04f 0800 	mov.w	r8, #0
 8018fee:	9301      	str	r3, [sp, #4]
 8018ff0:	6831      	ldr	r1, [r6, #0]
 8018ff2:	ab03      	add	r3, sp, #12
 8018ff4:	2202      	movs	r2, #2
 8018ff6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018ffa:	7809      	ldrb	r1, [r1, #0]
 8018ffc:	f7e7 f908 	bl	8000210 <memchr>
 8019000:	9b01      	ldr	r3, [sp, #4]
 8019002:	b330      	cbz	r0, 8019052 <_scanf_i+0xba>
 8019004:	f1b8 0f01 	cmp.w	r8, #1
 8019008:	d15a      	bne.n	80190c0 <_scanf_i+0x128>
 801900a:	6862      	ldr	r2, [r4, #4]
 801900c:	b92a      	cbnz	r2, 801901a <_scanf_i+0x82>
 801900e:	6822      	ldr	r2, [r4, #0]
 8019010:	2108      	movs	r1, #8
 8019012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019016:	6061      	str	r1, [r4, #4]
 8019018:	6022      	str	r2, [r4, #0]
 801901a:	6822      	ldr	r2, [r4, #0]
 801901c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019020:	6022      	str	r2, [r4, #0]
 8019022:	68a2      	ldr	r2, [r4, #8]
 8019024:	1e51      	subs	r1, r2, #1
 8019026:	60a1      	str	r1, [r4, #8]
 8019028:	b19a      	cbz	r2, 8019052 <_scanf_i+0xba>
 801902a:	6832      	ldr	r2, [r6, #0]
 801902c:	1c51      	adds	r1, r2, #1
 801902e:	6031      	str	r1, [r6, #0]
 8019030:	7812      	ldrb	r2, [r2, #0]
 8019032:	701a      	strb	r2, [r3, #0]
 8019034:	1c5d      	adds	r5, r3, #1
 8019036:	6873      	ldr	r3, [r6, #4]
 8019038:	3b01      	subs	r3, #1
 801903a:	2b00      	cmp	r3, #0
 801903c:	6073      	str	r3, [r6, #4]
 801903e:	dc07      	bgt.n	8019050 <_scanf_i+0xb8>
 8019040:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019044:	4631      	mov	r1, r6
 8019046:	4658      	mov	r0, fp
 8019048:	4798      	blx	r3
 801904a:	2800      	cmp	r0, #0
 801904c:	f040 8086 	bne.w	801915c <_scanf_i+0x1c4>
 8019050:	462b      	mov	r3, r5
 8019052:	f108 0801 	add.w	r8, r8, #1
 8019056:	f1b8 0f03 	cmp.w	r8, #3
 801905a:	d1c8      	bne.n	8018fee <_scanf_i+0x56>
 801905c:	6862      	ldr	r2, [r4, #4]
 801905e:	b90a      	cbnz	r2, 8019064 <_scanf_i+0xcc>
 8019060:	220a      	movs	r2, #10
 8019062:	6062      	str	r2, [r4, #4]
 8019064:	6862      	ldr	r2, [r4, #4]
 8019066:	4945      	ldr	r1, [pc, #276]	; (801917c <_scanf_i+0x1e4>)
 8019068:	6960      	ldr	r0, [r4, #20]
 801906a:	9301      	str	r3, [sp, #4]
 801906c:	1a89      	subs	r1, r1, r2
 801906e:	f000 f897 	bl	80191a0 <__sccl>
 8019072:	9b01      	ldr	r3, [sp, #4]
 8019074:	f04f 0800 	mov.w	r8, #0
 8019078:	461d      	mov	r5, r3
 801907a:	68a3      	ldr	r3, [r4, #8]
 801907c:	6822      	ldr	r2, [r4, #0]
 801907e:	2b00      	cmp	r3, #0
 8019080:	d03a      	beq.n	80190f8 <_scanf_i+0x160>
 8019082:	6831      	ldr	r1, [r6, #0]
 8019084:	6960      	ldr	r0, [r4, #20]
 8019086:	f891 c000 	ldrb.w	ip, [r1]
 801908a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801908e:	2800      	cmp	r0, #0
 8019090:	d032      	beq.n	80190f8 <_scanf_i+0x160>
 8019092:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019096:	d121      	bne.n	80190dc <_scanf_i+0x144>
 8019098:	0510      	lsls	r0, r2, #20
 801909a:	d51f      	bpl.n	80190dc <_scanf_i+0x144>
 801909c:	f108 0801 	add.w	r8, r8, #1
 80190a0:	b117      	cbz	r7, 80190a8 <_scanf_i+0x110>
 80190a2:	3301      	adds	r3, #1
 80190a4:	3f01      	subs	r7, #1
 80190a6:	60a3      	str	r3, [r4, #8]
 80190a8:	6873      	ldr	r3, [r6, #4]
 80190aa:	3b01      	subs	r3, #1
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	6073      	str	r3, [r6, #4]
 80190b0:	dd1b      	ble.n	80190ea <_scanf_i+0x152>
 80190b2:	6833      	ldr	r3, [r6, #0]
 80190b4:	3301      	adds	r3, #1
 80190b6:	6033      	str	r3, [r6, #0]
 80190b8:	68a3      	ldr	r3, [r4, #8]
 80190ba:	3b01      	subs	r3, #1
 80190bc:	60a3      	str	r3, [r4, #8]
 80190be:	e7dc      	b.n	801907a <_scanf_i+0xe2>
 80190c0:	f1b8 0f02 	cmp.w	r8, #2
 80190c4:	d1ad      	bne.n	8019022 <_scanf_i+0x8a>
 80190c6:	6822      	ldr	r2, [r4, #0]
 80190c8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80190cc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80190d0:	d1bf      	bne.n	8019052 <_scanf_i+0xba>
 80190d2:	2110      	movs	r1, #16
 80190d4:	6061      	str	r1, [r4, #4]
 80190d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80190da:	e7a1      	b.n	8019020 <_scanf_i+0x88>
 80190dc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80190e0:	6022      	str	r2, [r4, #0]
 80190e2:	780b      	ldrb	r3, [r1, #0]
 80190e4:	702b      	strb	r3, [r5, #0]
 80190e6:	3501      	adds	r5, #1
 80190e8:	e7de      	b.n	80190a8 <_scanf_i+0x110>
 80190ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80190ee:	4631      	mov	r1, r6
 80190f0:	4658      	mov	r0, fp
 80190f2:	4798      	blx	r3
 80190f4:	2800      	cmp	r0, #0
 80190f6:	d0df      	beq.n	80190b8 <_scanf_i+0x120>
 80190f8:	6823      	ldr	r3, [r4, #0]
 80190fa:	05d9      	lsls	r1, r3, #23
 80190fc:	d50c      	bpl.n	8019118 <_scanf_i+0x180>
 80190fe:	454d      	cmp	r5, r9
 8019100:	d908      	bls.n	8019114 <_scanf_i+0x17c>
 8019102:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019106:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801910a:	4632      	mov	r2, r6
 801910c:	4658      	mov	r0, fp
 801910e:	4798      	blx	r3
 8019110:	1e6f      	subs	r7, r5, #1
 8019112:	463d      	mov	r5, r7
 8019114:	454d      	cmp	r5, r9
 8019116:	d029      	beq.n	801916c <_scanf_i+0x1d4>
 8019118:	6822      	ldr	r2, [r4, #0]
 801911a:	f012 0210 	ands.w	r2, r2, #16
 801911e:	d113      	bne.n	8019148 <_scanf_i+0x1b0>
 8019120:	702a      	strb	r2, [r5, #0]
 8019122:	6863      	ldr	r3, [r4, #4]
 8019124:	9e00      	ldr	r6, [sp, #0]
 8019126:	4649      	mov	r1, r9
 8019128:	4658      	mov	r0, fp
 801912a:	47b0      	blx	r6
 801912c:	f8da 3000 	ldr.w	r3, [sl]
 8019130:	6821      	ldr	r1, [r4, #0]
 8019132:	1d1a      	adds	r2, r3, #4
 8019134:	f8ca 2000 	str.w	r2, [sl]
 8019138:	f011 0f20 	tst.w	r1, #32
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	d010      	beq.n	8019162 <_scanf_i+0x1ca>
 8019140:	6018      	str	r0, [r3, #0]
 8019142:	68e3      	ldr	r3, [r4, #12]
 8019144:	3301      	adds	r3, #1
 8019146:	60e3      	str	r3, [r4, #12]
 8019148:	eba5 0509 	sub.w	r5, r5, r9
 801914c:	44a8      	add	r8, r5
 801914e:	6925      	ldr	r5, [r4, #16]
 8019150:	4445      	add	r5, r8
 8019152:	6125      	str	r5, [r4, #16]
 8019154:	2000      	movs	r0, #0
 8019156:	b007      	add	sp, #28
 8019158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801915c:	f04f 0800 	mov.w	r8, #0
 8019160:	e7ca      	b.n	80190f8 <_scanf_i+0x160>
 8019162:	07ca      	lsls	r2, r1, #31
 8019164:	bf4c      	ite	mi
 8019166:	8018      	strhmi	r0, [r3, #0]
 8019168:	6018      	strpl	r0, [r3, #0]
 801916a:	e7ea      	b.n	8019142 <_scanf_i+0x1aa>
 801916c:	2001      	movs	r0, #1
 801916e:	e7f2      	b.n	8019156 <_scanf_i+0x1be>
 8019170:	08019ab8 	.word	0x08019ab8
 8019174:	08016bb9 	.word	0x08016bb9
 8019178:	0801931d 	.word	0x0801931d
 801917c:	08019f75 	.word	0x08019f75

08019180 <_sbrk_r>:
 8019180:	b538      	push	{r3, r4, r5, lr}
 8019182:	4c06      	ldr	r4, [pc, #24]	; (801919c <_sbrk_r+0x1c>)
 8019184:	2300      	movs	r3, #0
 8019186:	4605      	mov	r5, r0
 8019188:	4608      	mov	r0, r1
 801918a:	6023      	str	r3, [r4, #0]
 801918c:	f7ee fa00 	bl	8007590 <_sbrk>
 8019190:	1c43      	adds	r3, r0, #1
 8019192:	d102      	bne.n	801919a <_sbrk_r+0x1a>
 8019194:	6823      	ldr	r3, [r4, #0]
 8019196:	b103      	cbz	r3, 801919a <_sbrk_r+0x1a>
 8019198:	602b      	str	r3, [r5, #0]
 801919a:	bd38      	pop	{r3, r4, r5, pc}
 801919c:	20045cd4 	.word	0x20045cd4

080191a0 <__sccl>:
 80191a0:	b570      	push	{r4, r5, r6, lr}
 80191a2:	780b      	ldrb	r3, [r1, #0]
 80191a4:	2b5e      	cmp	r3, #94	; 0x5e
 80191a6:	bf13      	iteet	ne
 80191a8:	1c4a      	addne	r2, r1, #1
 80191aa:	1c8a      	addeq	r2, r1, #2
 80191ac:	784b      	ldrbeq	r3, [r1, #1]
 80191ae:	2100      	movne	r1, #0
 80191b0:	bf08      	it	eq
 80191b2:	2101      	moveq	r1, #1
 80191b4:	1e44      	subs	r4, r0, #1
 80191b6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80191ba:	f804 1f01 	strb.w	r1, [r4, #1]!
 80191be:	42ac      	cmp	r4, r5
 80191c0:	d1fb      	bne.n	80191ba <__sccl+0x1a>
 80191c2:	b913      	cbnz	r3, 80191ca <__sccl+0x2a>
 80191c4:	3a01      	subs	r2, #1
 80191c6:	4610      	mov	r0, r2
 80191c8:	bd70      	pop	{r4, r5, r6, pc}
 80191ca:	f081 0401 	eor.w	r4, r1, #1
 80191ce:	54c4      	strb	r4, [r0, r3]
 80191d0:	1c51      	adds	r1, r2, #1
 80191d2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80191d6:	2d2d      	cmp	r5, #45	; 0x2d
 80191d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80191dc:	460a      	mov	r2, r1
 80191de:	d006      	beq.n	80191ee <__sccl+0x4e>
 80191e0:	2d5d      	cmp	r5, #93	; 0x5d
 80191e2:	d0f0      	beq.n	80191c6 <__sccl+0x26>
 80191e4:	b90d      	cbnz	r5, 80191ea <__sccl+0x4a>
 80191e6:	4632      	mov	r2, r6
 80191e8:	e7ed      	b.n	80191c6 <__sccl+0x26>
 80191ea:	462b      	mov	r3, r5
 80191ec:	e7ef      	b.n	80191ce <__sccl+0x2e>
 80191ee:	780e      	ldrb	r6, [r1, #0]
 80191f0:	2e5d      	cmp	r6, #93	; 0x5d
 80191f2:	d0fa      	beq.n	80191ea <__sccl+0x4a>
 80191f4:	42b3      	cmp	r3, r6
 80191f6:	dcf8      	bgt.n	80191ea <__sccl+0x4a>
 80191f8:	3301      	adds	r3, #1
 80191fa:	429e      	cmp	r6, r3
 80191fc:	54c4      	strb	r4, [r0, r3]
 80191fe:	dcfb      	bgt.n	80191f8 <__sccl+0x58>
 8019200:	3102      	adds	r1, #2
 8019202:	e7e6      	b.n	80191d2 <__sccl+0x32>

08019204 <strncmp>:
 8019204:	b510      	push	{r4, lr}
 8019206:	b16a      	cbz	r2, 8019224 <strncmp+0x20>
 8019208:	3901      	subs	r1, #1
 801920a:	1884      	adds	r4, r0, r2
 801920c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019210:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019214:	4293      	cmp	r3, r2
 8019216:	d103      	bne.n	8019220 <strncmp+0x1c>
 8019218:	42a0      	cmp	r0, r4
 801921a:	d001      	beq.n	8019220 <strncmp+0x1c>
 801921c:	2b00      	cmp	r3, #0
 801921e:	d1f5      	bne.n	801920c <strncmp+0x8>
 8019220:	1a98      	subs	r0, r3, r2
 8019222:	bd10      	pop	{r4, pc}
 8019224:	4610      	mov	r0, r2
 8019226:	e7fc      	b.n	8019222 <strncmp+0x1e>

08019228 <_strtoul_l.isra.0>:
 8019228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801922c:	4680      	mov	r8, r0
 801922e:	4689      	mov	r9, r1
 8019230:	4692      	mov	sl, r2
 8019232:	461e      	mov	r6, r3
 8019234:	460f      	mov	r7, r1
 8019236:	463d      	mov	r5, r7
 8019238:	9808      	ldr	r0, [sp, #32]
 801923a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801923e:	f7fe fe59 	bl	8017ef4 <__locale_ctype_ptr_l>
 8019242:	4420      	add	r0, r4
 8019244:	7843      	ldrb	r3, [r0, #1]
 8019246:	f013 0308 	ands.w	r3, r3, #8
 801924a:	d130      	bne.n	80192ae <_strtoul_l.isra.0+0x86>
 801924c:	2c2d      	cmp	r4, #45	; 0x2d
 801924e:	d130      	bne.n	80192b2 <_strtoul_l.isra.0+0x8a>
 8019250:	787c      	ldrb	r4, [r7, #1]
 8019252:	1cbd      	adds	r5, r7, #2
 8019254:	2101      	movs	r1, #1
 8019256:	2e00      	cmp	r6, #0
 8019258:	d05c      	beq.n	8019314 <_strtoul_l.isra.0+0xec>
 801925a:	2e10      	cmp	r6, #16
 801925c:	d109      	bne.n	8019272 <_strtoul_l.isra.0+0x4a>
 801925e:	2c30      	cmp	r4, #48	; 0x30
 8019260:	d107      	bne.n	8019272 <_strtoul_l.isra.0+0x4a>
 8019262:	782b      	ldrb	r3, [r5, #0]
 8019264:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019268:	2b58      	cmp	r3, #88	; 0x58
 801926a:	d14e      	bne.n	801930a <_strtoul_l.isra.0+0xe2>
 801926c:	786c      	ldrb	r4, [r5, #1]
 801926e:	2610      	movs	r6, #16
 8019270:	3502      	adds	r5, #2
 8019272:	f04f 32ff 	mov.w	r2, #4294967295
 8019276:	2300      	movs	r3, #0
 8019278:	fbb2 f2f6 	udiv	r2, r2, r6
 801927c:	fb06 fc02 	mul.w	ip, r6, r2
 8019280:	ea6f 0c0c 	mvn.w	ip, ip
 8019284:	4618      	mov	r0, r3
 8019286:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801928a:	2f09      	cmp	r7, #9
 801928c:	d817      	bhi.n	80192be <_strtoul_l.isra.0+0x96>
 801928e:	463c      	mov	r4, r7
 8019290:	42a6      	cmp	r6, r4
 8019292:	dd23      	ble.n	80192dc <_strtoul_l.isra.0+0xb4>
 8019294:	2b00      	cmp	r3, #0
 8019296:	db1e      	blt.n	80192d6 <_strtoul_l.isra.0+0xae>
 8019298:	4282      	cmp	r2, r0
 801929a:	d31c      	bcc.n	80192d6 <_strtoul_l.isra.0+0xae>
 801929c:	d101      	bne.n	80192a2 <_strtoul_l.isra.0+0x7a>
 801929e:	45a4      	cmp	ip, r4
 80192a0:	db19      	blt.n	80192d6 <_strtoul_l.isra.0+0xae>
 80192a2:	fb00 4006 	mla	r0, r0, r6, r4
 80192a6:	2301      	movs	r3, #1
 80192a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80192ac:	e7eb      	b.n	8019286 <_strtoul_l.isra.0+0x5e>
 80192ae:	462f      	mov	r7, r5
 80192b0:	e7c1      	b.n	8019236 <_strtoul_l.isra.0+0xe>
 80192b2:	2c2b      	cmp	r4, #43	; 0x2b
 80192b4:	bf04      	itt	eq
 80192b6:	1cbd      	addeq	r5, r7, #2
 80192b8:	787c      	ldrbeq	r4, [r7, #1]
 80192ba:	4619      	mov	r1, r3
 80192bc:	e7cb      	b.n	8019256 <_strtoul_l.isra.0+0x2e>
 80192be:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80192c2:	2f19      	cmp	r7, #25
 80192c4:	d801      	bhi.n	80192ca <_strtoul_l.isra.0+0xa2>
 80192c6:	3c37      	subs	r4, #55	; 0x37
 80192c8:	e7e2      	b.n	8019290 <_strtoul_l.isra.0+0x68>
 80192ca:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80192ce:	2f19      	cmp	r7, #25
 80192d0:	d804      	bhi.n	80192dc <_strtoul_l.isra.0+0xb4>
 80192d2:	3c57      	subs	r4, #87	; 0x57
 80192d4:	e7dc      	b.n	8019290 <_strtoul_l.isra.0+0x68>
 80192d6:	f04f 33ff 	mov.w	r3, #4294967295
 80192da:	e7e5      	b.n	80192a8 <_strtoul_l.isra.0+0x80>
 80192dc:	2b00      	cmp	r3, #0
 80192de:	da09      	bge.n	80192f4 <_strtoul_l.isra.0+0xcc>
 80192e0:	2322      	movs	r3, #34	; 0x22
 80192e2:	f8c8 3000 	str.w	r3, [r8]
 80192e6:	f04f 30ff 	mov.w	r0, #4294967295
 80192ea:	f1ba 0f00 	cmp.w	sl, #0
 80192ee:	d107      	bne.n	8019300 <_strtoul_l.isra.0+0xd8>
 80192f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192f4:	b101      	cbz	r1, 80192f8 <_strtoul_l.isra.0+0xd0>
 80192f6:	4240      	negs	r0, r0
 80192f8:	f1ba 0f00 	cmp.w	sl, #0
 80192fc:	d0f8      	beq.n	80192f0 <_strtoul_l.isra.0+0xc8>
 80192fe:	b10b      	cbz	r3, 8019304 <_strtoul_l.isra.0+0xdc>
 8019300:	f105 39ff 	add.w	r9, r5, #4294967295
 8019304:	f8ca 9000 	str.w	r9, [sl]
 8019308:	e7f2      	b.n	80192f0 <_strtoul_l.isra.0+0xc8>
 801930a:	2430      	movs	r4, #48	; 0x30
 801930c:	2e00      	cmp	r6, #0
 801930e:	d1b0      	bne.n	8019272 <_strtoul_l.isra.0+0x4a>
 8019310:	2608      	movs	r6, #8
 8019312:	e7ae      	b.n	8019272 <_strtoul_l.isra.0+0x4a>
 8019314:	2c30      	cmp	r4, #48	; 0x30
 8019316:	d0a4      	beq.n	8019262 <_strtoul_l.isra.0+0x3a>
 8019318:	260a      	movs	r6, #10
 801931a:	e7aa      	b.n	8019272 <_strtoul_l.isra.0+0x4a>

0801931c <_strtoul_r>:
 801931c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801931e:	4c06      	ldr	r4, [pc, #24]	; (8019338 <_strtoul_r+0x1c>)
 8019320:	4d06      	ldr	r5, [pc, #24]	; (801933c <_strtoul_r+0x20>)
 8019322:	6824      	ldr	r4, [r4, #0]
 8019324:	6a24      	ldr	r4, [r4, #32]
 8019326:	2c00      	cmp	r4, #0
 8019328:	bf08      	it	eq
 801932a:	462c      	moveq	r4, r5
 801932c:	9400      	str	r4, [sp, #0]
 801932e:	f7ff ff7b 	bl	8019228 <_strtoul_l.isra.0>
 8019332:	b003      	add	sp, #12
 8019334:	bd30      	pop	{r4, r5, pc}
 8019336:	bf00      	nop
 8019338:	2000000c 	.word	0x2000000c
 801933c:	20000070 	.word	0x20000070

08019340 <__submore>:
 8019340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019344:	460c      	mov	r4, r1
 8019346:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801934c:	4299      	cmp	r1, r3
 801934e:	d11d      	bne.n	801938c <__submore+0x4c>
 8019350:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019354:	f7ff fa66 	bl	8018824 <_malloc_r>
 8019358:	b918      	cbnz	r0, 8019362 <__submore+0x22>
 801935a:	f04f 30ff 	mov.w	r0, #4294967295
 801935e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019366:	63a3      	str	r3, [r4, #56]	; 0x38
 8019368:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801936c:	6360      	str	r0, [r4, #52]	; 0x34
 801936e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019372:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019376:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801937a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801937e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019382:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019386:	6020      	str	r0, [r4, #0]
 8019388:	2000      	movs	r0, #0
 801938a:	e7e8      	b.n	801935e <__submore+0x1e>
 801938c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801938e:	0077      	lsls	r7, r6, #1
 8019390:	463a      	mov	r2, r7
 8019392:	f000 f837 	bl	8019404 <_realloc_r>
 8019396:	4605      	mov	r5, r0
 8019398:	2800      	cmp	r0, #0
 801939a:	d0de      	beq.n	801935a <__submore+0x1a>
 801939c:	eb00 0806 	add.w	r8, r0, r6
 80193a0:	4601      	mov	r1, r0
 80193a2:	4632      	mov	r2, r6
 80193a4:	4640      	mov	r0, r8
 80193a6:	f7fb fe8b 	bl	80150c0 <memcpy>
 80193aa:	f8c4 8000 	str.w	r8, [r4]
 80193ae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80193b2:	e7e9      	b.n	8019388 <__submore+0x48>

080193b4 <__ascii_wctomb>:
 80193b4:	b149      	cbz	r1, 80193ca <__ascii_wctomb+0x16>
 80193b6:	2aff      	cmp	r2, #255	; 0xff
 80193b8:	bf85      	ittet	hi
 80193ba:	238a      	movhi	r3, #138	; 0x8a
 80193bc:	6003      	strhi	r3, [r0, #0]
 80193be:	700a      	strbls	r2, [r1, #0]
 80193c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80193c4:	bf98      	it	ls
 80193c6:	2001      	movls	r0, #1
 80193c8:	4770      	bx	lr
 80193ca:	4608      	mov	r0, r1
 80193cc:	4770      	bx	lr

080193ce <memmove>:
 80193ce:	4288      	cmp	r0, r1
 80193d0:	b510      	push	{r4, lr}
 80193d2:	eb01 0302 	add.w	r3, r1, r2
 80193d6:	d807      	bhi.n	80193e8 <memmove+0x1a>
 80193d8:	1e42      	subs	r2, r0, #1
 80193da:	4299      	cmp	r1, r3
 80193dc:	d00a      	beq.n	80193f4 <memmove+0x26>
 80193de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80193e6:	e7f8      	b.n	80193da <memmove+0xc>
 80193e8:	4283      	cmp	r3, r0
 80193ea:	d9f5      	bls.n	80193d8 <memmove+0xa>
 80193ec:	1881      	adds	r1, r0, r2
 80193ee:	1ad2      	subs	r2, r2, r3
 80193f0:	42d3      	cmn	r3, r2
 80193f2:	d100      	bne.n	80193f6 <memmove+0x28>
 80193f4:	bd10      	pop	{r4, pc}
 80193f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80193fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80193fe:	e7f7      	b.n	80193f0 <memmove+0x22>

08019400 <__malloc_lock>:
 8019400:	4770      	bx	lr

08019402 <__malloc_unlock>:
 8019402:	4770      	bx	lr

08019404 <_realloc_r>:
 8019404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019406:	4607      	mov	r7, r0
 8019408:	4614      	mov	r4, r2
 801940a:	460e      	mov	r6, r1
 801940c:	b921      	cbnz	r1, 8019418 <_realloc_r+0x14>
 801940e:	4611      	mov	r1, r2
 8019410:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019414:	f7ff ba06 	b.w	8018824 <_malloc_r>
 8019418:	b922      	cbnz	r2, 8019424 <_realloc_r+0x20>
 801941a:	f7ff f9b5 	bl	8018788 <_free_r>
 801941e:	4625      	mov	r5, r4
 8019420:	4628      	mov	r0, r5
 8019422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019424:	f000 f814 	bl	8019450 <_malloc_usable_size_r>
 8019428:	42a0      	cmp	r0, r4
 801942a:	d20f      	bcs.n	801944c <_realloc_r+0x48>
 801942c:	4621      	mov	r1, r4
 801942e:	4638      	mov	r0, r7
 8019430:	f7ff f9f8 	bl	8018824 <_malloc_r>
 8019434:	4605      	mov	r5, r0
 8019436:	2800      	cmp	r0, #0
 8019438:	d0f2      	beq.n	8019420 <_realloc_r+0x1c>
 801943a:	4631      	mov	r1, r6
 801943c:	4622      	mov	r2, r4
 801943e:	f7fb fe3f 	bl	80150c0 <memcpy>
 8019442:	4631      	mov	r1, r6
 8019444:	4638      	mov	r0, r7
 8019446:	f7ff f99f 	bl	8018788 <_free_r>
 801944a:	e7e9      	b.n	8019420 <_realloc_r+0x1c>
 801944c:	4635      	mov	r5, r6
 801944e:	e7e7      	b.n	8019420 <_realloc_r+0x1c>

08019450 <_malloc_usable_size_r>:
 8019450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019454:	1f18      	subs	r0, r3, #4
 8019456:	2b00      	cmp	r3, #0
 8019458:	bfbc      	itt	lt
 801945a:	580b      	ldrlt	r3, [r1, r0]
 801945c:	18c0      	addlt	r0, r0, r3
 801945e:	4770      	bx	lr

08019460 <_init>:
 8019460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019462:	bf00      	nop
 8019464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019466:	bc08      	pop	{r3}
 8019468:	469e      	mov	lr, r3
 801946a:	4770      	bx	lr

0801946c <_fini>:
 801946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801946e:	bf00      	nop
 8019470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019472:	bc08      	pop	{r3}
 8019474:	469e      	mov	lr, r3
 8019476:	4770      	bx	lr
