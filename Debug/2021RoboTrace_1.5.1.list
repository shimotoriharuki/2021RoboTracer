
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019238  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  080193f8  080193f8  000293f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a004  0801a004  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a004  0801a004  0002a004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a00c  0801a00c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a00c  0801a00c  0002a00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a014  0801a014  0002a014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a018  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00044b98  200001e0  0801a1f4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20044d78  0801a1f4  00034d78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003aaaf  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007bc9  00000000  00000000  0006acbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002300  00000000  00000000  00072888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002030  00000000  00000000  00074b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354a8  00000000  00000000  00076bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026492  00000000  00000000  000ac060  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110e7a  00000000  00000000  000d24f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e336c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a630  00000000  00000000  001e33e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080193e0 	.word	0x080193e0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	080193e0 	.word	0x080193e0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 fea6 	bl	800ad28 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2004286c 	.word	0x2004286c

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 fe8e 	bl	800ad28 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2004286c 	.word	0x2004286c

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 fd2f 	bl	800aa84 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fa96 	bl	8009558 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fa90 	bl	8009558 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fa8a 	bl	8009558 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fa84 	bl	8009558 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fa7e 	bl	8009558 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fa78 	bl	8009558 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fa72 	bl	8009558 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fa6c 	bl	8009558 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fa66 	bl	8009558 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fa60 	bl	8009558 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fa54 	bl	8009558 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fa4e 	bl	8009558 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fd2d 	bl	8016b88 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fb5e 	bl	800e8b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d fb5a 	bl	800e8b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d fb56 	bl	800e8b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d fb52 	bl	800e8b8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20042958 	.word	0x20042958
 8001248:	200428c0 	.word	0x200428c0
 800124c:	200429e0 	.word	0x200429e0

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20042958 	.word	0x20042958
 800137c:	200429e0 	.word	0x200429e0
 8001380:	200428c0 	.word	0x200428c0

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20042958 	.word	0x20042958
 80013c4:	200428c0 	.word	0x200428c0
 80013c8:	200429e0 	.word	0x200429e0

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fb12 	bl	800ea58 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fb0e 	bl	800ea58 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20042ac0 	.word	0x20042ac0
 8001458:	200427a4 	.word	0x200427a4
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f978 	bl	8001a98 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f98c 	bl	8001ac4 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f011 fea2 	bl	801350c <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200416b0 	.word	0x200416b0

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 fa6d 	bl	8015cf0 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f011 fee6 	bl	80135f4 <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f011 fee1 	bl	80135f4 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f011 fc4f 	bl	80130e2 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f958 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	080193f8 	.word	0x080193f8
 8001870:	20041620 	.word	0x20041620
 8001874:	200416b0 	.word	0x200416b0
 8001878:	200416a0 	.word	0x200416a0

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f900 	bl	8001a98 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f011 fe5d 	bl	8013560 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 f8c8 	bl	8013a3c <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f011 fe57 	bl	8013560 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f907 	bl	8001ac4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fa08 	bl	8015cf0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f011 fe84 	bl	80135f4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f011 fbf2 	bl	80130e2 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f8fb 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f011 fdf6 	bl	801350c <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	20041520 	.word	0x20041520
 8001930:	200403e0 	.word	0x200403e0
 8001934:	08019414 	.word	0x08019414
 8001938:	080193f8 	.word	0x080193f8
 800193c:	20041620 	.word	0x20041620
 8001940:	200416b0 	.word	0x200416b0
 8001944:	200416a0 	.word	0x200416a0

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f898 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f8ac 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fa0b 	bl	8015d98 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fa26 	bl	8013df8 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f8a1 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f011 fda8 	bl	801350c <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019404 	.word	0x08019404
 80019cc:	20041620 	.word	0x20041620
 80019d0:	200416b0 	.word	0x200416b0

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f852 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f866 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 f9c5 	bl	8015d98 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 f9e0 	bl	8013df8 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f85b 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f011 fd62 	bl	801350c <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019410 	.word	0x08019410
 8001a58:	20041620 	.word	0x20041620
 8001a5c:	200416b0 	.word	0x200416b0

08001a60 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4908      	ldr	r1, [pc, #32]	; (8001a90 <sd_mount+0x30>)
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <sd_mount+0x34>)
 8001a70:	f010 ffc4 	bl	80129fc <f_mount>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <sd_mount+0x20>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e001      	b.n	8001a84 <sd_mount+0x24>
	else ret = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08019420 	.word	0x08019420
 8001a94:	200404e0 	.word	0x200404e0

08001a98 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <create_path+0x24>)
 8001aa6:	f014 f9a3 	bl	8015df0 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <create_path+0x28>)
 8001aae:	f014 f99f 	bl	8015df0 <strcpy>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20041520 	.word	0x20041520
 8001ac0:	200403e0 	.word	0x200403e0

08001ac4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001aca:	f012 f879 	bl	8013bc0 <f_mkdir>

	f_chdir(dirpath);
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001ad0:	f011 fd46 	bl	8013560 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ad4:	2213      	movs	r2, #19
 8001ad6:	4905      	ldr	r1, [pc, #20]	; (8001aec <fopen_folder_and_file+0x28>)
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <fopen_folder_and_file+0x2c>)
 8001ada:	f010 ffd5 	bl	8012a88 <f_open>

	f_chdir("..");
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <fopen_folder_and_file+0x30>)
 8001ae0:	f011 fd3e 	bl	8013560 <f_chdir>


}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20041520 	.word	0x20041520
 8001aec:	200403e0 	.word	0x200403e0
 8001af0:	200416b0 	.word	0x200416b0
 8001af4:	08019414 	.word	0x08019414

08001af8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	e007      	b.n	8001b14 <bufclear+0x1c>
		buffer[i] = '\0';
 8001b04:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <bufclear+0x30>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b7f      	cmp	r3, #127	; 0x7f
 8001b18:	ddf4      	ble.n	8001b04 <bufclear+0xc>
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20041620 	.word	0x20041620

08001b2c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <read_byte+0x54>)
 8001b48:	f008 ff9c 	bl	800aa84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b4c:	f107 010f 	add.w	r1, r7, #15
 8001b50:	2364      	movs	r3, #100	; 0x64
 8001b52:	2201      	movs	r2, #1
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <read_byte+0x58>)
 8001b56:	f00c f945 	bl	800dde4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001b5a:	f107 010e 	add.w	r1, r7, #14
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	2201      	movs	r2, #1
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <read_byte+0x58>)
 8001b64:	f00c fa72 	bl	800e04c <HAL_SPI_Receive>
	CS_SET;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <read_byte+0x54>)
 8001b70:	f008 ff88 	bl	800aa84 <HAL_GPIO_WritePin>

	return val;
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020400 	.word	0x40020400
 8001b84:	2004274c 	.word	0x2004274c

08001b88 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460a      	mov	r2, r1
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <write_byte+0x54>)
 8001baa:	f008 ff6b 	bl	800aa84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001bae:	f107 010f 	add.w	r1, r7, #15
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	480a      	ldr	r0, [pc, #40]	; (8001be0 <write_byte+0x58>)
 8001bb8:	f00c f914 	bl	800dde4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001bbc:	1db9      	adds	r1, r7, #6
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4807      	ldr	r0, [pc, #28]	; (8001be0 <write_byte+0x58>)
 8001bc4:	f00c f90e 	bl	800dde4 <HAL_SPI_Transmit>
	CS_SET;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <write_byte+0x54>)
 8001bd0:	f008 ff58 	bl	800aa84 <HAL_GPIO_WritePin>
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	2004274c 	.word	0x2004274c

08001be4 <IMU_init>:

uint16_t IMU_init() {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff ff9c 	bl	8001b2c <read_byte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001bf8:	797b      	ldrb	r3, [r7, #5]
 8001bfa:	2be0      	cmp	r3, #224	; 0xe0
 8001bfc:	d119      	bne.n	8001c32 <IMU_init+0x4e>
		ret = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001c02:	2101      	movs	r1, #1
 8001c04:	2006      	movs	r0, #6
 8001c06:	f7ff ffbf 	bl	8001b88 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001c0a:	2110      	movs	r1, #16
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f7ff ffbb 	bl	8001b88 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001c12:	2120      	movs	r1, #32
 8001c14:	207f      	movs	r0, #127	; 0x7f
 8001c16:	f7ff ffb7 	bl	8001b88 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001c1a:	2106      	movs	r1, #6
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff ffb3 	bl	8001b88 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001c22:	2106      	movs	r1, #6
 8001c24:	2014      	movs	r0, #20
 8001c26:	f7ff ffaf 	bl	8001b88 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	207f      	movs	r0, #127	; 0x7f
 8001c2e:	f7ff ffab 	bl	8001b88 <write_byte>
	}
	return ret;
 8001c32:	88fb      	ldrh	r3, [r7, #6]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <read_gyro_data>:

void read_gyro_data() {
 8001c3c:	b598      	push	{r3, r4, r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001c40:	2033      	movs	r0, #51	; 0x33
 8001c42:	f7ff ff73 	bl	8001b2c <read_byte>
 8001c46:	4603      	mov	r3, r0
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21c      	sxth	r4, r3
 8001c4c:	2034      	movs	r0, #52	; 0x34
 8001c4e:	f7ff ff6d 	bl	8001b2c <read_byte>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4323      	orrs	r3, r4
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <read_gyro_data+0x64>)
 8001c5c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001c5e:	2035      	movs	r0, #53	; 0x35
 8001c60:	f7ff ff64 	bl	8001b2c <read_byte>
 8001c64:	4603      	mov	r3, r0
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21c      	sxth	r4, r3
 8001c6a:	2036      	movs	r0, #54	; 0x36
 8001c6c:	f7ff ff5e 	bl	8001b2c <read_byte>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	4323      	orrs	r3, r4
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <read_gyro_data+0x68>)
 8001c7a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c7c:	2037      	movs	r0, #55	; 0x37
 8001c7e:	f7ff ff55 	bl	8001b2c <read_byte>
 8001c82:	4603      	mov	r3, r0
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21c      	sxth	r4, r3
 8001c88:	2038      	movs	r0, #56	; 0x38
 8001c8a:	f7ff ff4f 	bl	8001b2c <read_byte>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4323      	orrs	r3, r4
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <read_gyro_data+0x6c>)
 8001c98:	801a      	strh	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	bd98      	pop	{r3, r4, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200426e8 	.word	0x200426e8
 8001ca4:	200426e6 	.word	0x200426e6
 8001ca8:	200426e0 	.word	0x200426e0

08001cac <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	805a      	strh	r2, [r3, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	809a      	strh	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	80da      	strh	r2, [r3, #6]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	811a      	strh	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	815a      	strh	r2, [r3, #10]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
{

}
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001cf8:	f7ff ff74 	bl	8001be4 <IMU_init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001d00:	f7ff f9ce 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff f9da 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <_ZN3IMU4initEv+0x44>)
 8001d0e:	f7ff fa01 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001d12:	2101      	movs	r1, #1
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff f9d3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001d1a:	89fb      	ldrh	r3, [r7, #14]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <_ZN3IMU4initEv+0x48>)
 8001d20:	f7ff f9f8 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d28:	f007 fc16 	bl	8009558 <HAL_Delay>

}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	08019424 	.word	0x08019424
 8001d38:	08019430 	.word	0x08019430
 8001d3c:	00000000 	.word	0x00000000

08001d40 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001d48:	f7ff ff78 	bl	8001c3c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbef 	bl	8000554 <__aeabi_i2d>
 8001d76:	a316      	add	r3, pc, #88	; (adr r3, 8001dd0 <_ZN3IMU12updateValuesEv+0x90>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fc54 	bl	8000628 <__aeabi_dmul>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4625      	mov	r5, r4
 8001d86:	461c      	mov	r4, r3
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <_ZN3IMU12updateValuesEv+0xac>)
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbe0 	bl	8000554 <__aeabi_i2d>
 8001d94:	a310      	add	r3, pc, #64	; (adr r3, 8001dd8 <_ZN3IMU12updateValuesEv+0x98>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fc45 	bl	8000628 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fa89 	bl	80002bc <__adddf3>
 8001daa:	4603      	mov	r3, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	4618      	mov	r0, r3
 8001db0:	4621      	mov	r1, r4
 8001db2:	f7fe fee9 	bl	8000b88 <__aeabi_d2iz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <_ZN3IMU12updateValuesEv+0xac>)
 8001dc6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd0:	eb851eb8 	.word	0xeb851eb8
 8001dd4:	3f9eb851 	.word	0x3f9eb851
 8001dd8:	70a3d70a 	.word	0x70a3d70a
 8001ddc:	3fef0a3d 	.word	0x3fef0a3d
 8001de0:	200426e8 	.word	0x200426e8
 8001de4:	200426e6 	.word	0x200426e6
 8001de8:	200426e0 	.word	0x200426e0
 8001dec:	20000210 	.word	0x20000210

08001df0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e10:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7fe fbaf 	bl	8000578 <__aeabi_f2d>
 8001e1a:	a316      	add	r3, pc, #88	; (adr r3, 8001e74 <_ZN3IMU8getOmegaEv+0x84>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fd2c 	bl	800087c <__aeabi_ddiv>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e2e:	a313      	add	r3, pc, #76	; (adr r3, 8001e7c <_ZN3IMU8getOmegaEv+0x8c>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fbf6 	bl	8000628 <__aeabi_dmul>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	4618      	mov	r0, r3
 8001e42:	4621      	mov	r1, r4
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <_ZN3IMU8getOmegaEv+0x80>)
 8001e4a:	f7fe fd17 	bl	800087c <__aeabi_ddiv>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	4618      	mov	r0, r3
 8001e54:	4621      	mov	r1, r4
 8001e56:	f7fe fedf 	bl	8000c18 <__aeabi_d2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	ee07 3a90 	vmov	s15, r3
}
 8001e60:	eeb0 0a67 	vmov.f32	s0, s15
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	f3af 8000 	nop.w
 8001e70:	40668000 	.word	0x40668000
 8001e74:	66666666 	.word	0x66666666
 8001e78:	40306666 	.word	0x40306666
 8001e7c:	54411744 	.word	0x54411744
 8001e80:	400921fb 	.word	0x400921fb

08001e84 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e86:	b08b      	sub	sp, #44	; 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e8c:	466b      	mov	r3, sp
 8001e8e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e94:	f007 fb60 	bl	8009558 <HAL_Delay>
	lcd_clear();
 8001e98:	f7ff f902 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff f90e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001ea4:	4840      	ldr	r0, [pc, #256]	; (8001fa8 <_ZN3IMU11calibrationEv+0x124>)
 8001ea6:	f7ff f935 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff f907 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001eb2:	483e      	ldr	r0, [pc, #248]	; (8001fac <_ZN3IMU11calibrationEv+0x128>)
 8001eb4:	f7ff f92e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001eb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ebc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001ebe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ec2:	1e5d      	subs	r5, r3, #1
 8001ec4:	61bd      	str	r5, [r7, #24]
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	f04f 0400 	mov.w	r4, #0
 8001ed8:	0154      	lsls	r4, r2, #5
 8001eda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ede:	014b      	lsls	r3, r1, #5
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f04f 0400 	mov.w	r4, #0
 8001ef2:	0154      	lsls	r4, r2, #5
 8001ef4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ef8:	014b      	lsls	r3, r1, #5
 8001efa:	462b      	mov	r3, r5
 8001efc:	3301      	adds	r3, #1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3303      	adds	r3, #3
 8001f02:	3307      	adds	r3, #7
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	ebad 0d03 	sub.w	sp, sp, r3
 8001f0c:	466b      	mov	r3, sp
 8001f0e:	3303      	adds	r3, #3
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001f16:	2300      	movs	r3, #0
 8001f18:	83fb      	strh	r3, [r7, #30]
 8001f1a:	8bfa      	ldrh	r2, [r7, #30]
 8001f1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	da13      	bge.n	8001f4c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f2a:	8bfb      	ldrh	r3, [r7, #30]
 8001f2c:	ee07 2a90 	vmov	s15, r2
 8001f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001f3e:	2002      	movs	r0, #2
 8001f40:	f007 fb0a 	bl	8009558 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f44:	8bfb      	ldrh	r3, [r7, #30]
 8001f46:	3301      	adds	r3, #1
 8001f48:	83fb      	strh	r3, [r7, #30]
 8001f4a:	e7e6      	b.n	8001f1a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	462b      	mov	r3, r5
 8001f54:	3301      	adds	r3, #1
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d00e      	beq.n	8001f82 <_ZN3IMU11calibrationEv+0xfe>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f76:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	e7ec      	b.n	8001f5c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f9c:	46b5      	mov	sp, r6
}
 8001f9e:	bf00      	nop
 8001fa0:	372c      	adds	r7, #44	; 0x2c
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	08019434 	.word	0x08019434
 8001fac:	08019440 	.word	0x08019440

08001fb0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460a      	mov	r2, r1
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	b299      	uxth	r1, r3
 8001fc4:	1dfa      	adds	r2, r7, #7
 8001fc6:	2364      	movs	r3, #100	; 0x64
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <INA260_read+0x50>)
 8001fce:	f008 feab 	bl	800ad28 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	f107 020c 	add.w	r2, r7, #12
 8001fda:	2364      	movs	r3, #100	; 0x64
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	4807      	ldr	r0, [pc, #28]	; (8002000 <INA260_read+0x50>)
 8001fe2:	f008 ff9f 	bl	800af24 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001fe6:	7b3b      	ldrb	r3, [r7, #12]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	7b7b      	ldrb	r3, [r7, #13]
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20042900 	.word	0x20042900

08002004 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b087      	sub	sp, #28
 8002008:	af02      	add	r7, sp, #8
 800200a:	4604      	mov	r4, r0
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4623      	mov	r3, r4
 8002014:	71fb      	strb	r3, [r7, #7]
 8002016:	4603      	mov	r3, r0
 8002018:	71bb      	strb	r3, [r7, #6]
 800201a:	460b      	mov	r3, r1
 800201c:	717b      	strb	r3, [r7, #5]
 800201e:	4613      	mov	r3, r2
 8002020:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	733b      	strb	r3, [r7, #12]
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	737b      	strb	r3, [r7, #13]
 800202a:	797b      	ldrb	r3, [r7, #5]
 800202c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800202e:	793b      	ldrb	r3, [r7, #4]
 8002030:	b299      	uxth	r1, r3
 8002032:	f107 020c 	add.w	r2, r7, #12
 8002036:	2364      	movs	r3, #100	; 0x64
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2303      	movs	r3, #3
 800203c:	4803      	ldr	r0, [pc, #12]	; (800204c <INA260_write+0x48>)
 800203e:	f008 fe73 	bl	800ad28 <HAL_I2C_Master_Transmit>
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}
 800204a:	bf00      	nop
 800204c:	20042900 	.word	0x20042900

08002050 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
 800205a:	460b      	mov	r3, r1
 800205c:	71bb      	strb	r3, [r7, #6]
 800205e:	4613      	mov	r3, r2
 8002060:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002062:	797b      	ldrb	r3, [r7, #5]
 8002064:	79ba      	ldrb	r2, [r7, #6]
 8002066:	79f9      	ldrb	r1, [r7, #7]
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff ffcb 	bl	8002004 <INA260_write>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	461a      	mov	r2, r3
 8002084:	21df      	movs	r1, #223	; 0xdf
 8002086:	2000      	movs	r0, #0
 8002088:	f7ff ffe2 	bl	8002050 <setConfig>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
{

}
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 80020b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020bc:	482a      	ldr	r0, [pc, #168]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 80020be:	f008 fcc9 	bl	800aa54 <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <_ZN8JoyStick8getValueEv+0x2e>
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80020da:	2101      	movs	r1, #1
 80020dc:	4823      	ldr	r0, [pc, #140]	; (800216c <_ZN8JoyStick8getValueEv+0xc0>)
 80020de:	f008 fcb9 	bl	800aa54 <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <_ZN8JoyStick8getValueEv+0x4e>
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80020fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fe:	481a      	ldr	r0, [pc, #104]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 8002100:	f008 fca8 	bl	800aa54 <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <_ZN8JoyStick8getValueEv+0x70>
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800211c:	2104      	movs	r1, #4
 800211e:	4814      	ldr	r0, [pc, #80]	; (8002170 <_ZN8JoyStick8getValueEv+0xc4>)
 8002120:	f008 fc98 	bl	800aa54 <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <_ZN8JoyStick8getValueEv+0x90>
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	480a      	ldr	r0, [pc, #40]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 8002140:	f008 fc88 	bl	800aa54 <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <_ZN8JoyStick8getValueEv+0xb0>
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800215c:	89fb      	ldrh	r3, [r7, #14]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40020400 	.word	0x40020400

08002174 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b52      	cmp	r3, #82	; 0x52
 8002184:	d112      	bne.n	80021ac <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800218c:	4856      	ldr	r0, [pc, #344]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800218e:	f008 fc79 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002198:	4853      	ldr	r0, [pc, #332]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800219a:	f008 fc73 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800219e:	2201      	movs	r2, #1
 80021a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a4:	4850      	ldr	r0, [pc, #320]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021a6:	f008 fc6d 	bl	800aa84 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80021aa:	e098      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	2b47      	cmp	r3, #71	; 0x47
 80021b0:	d112      	bne.n	80021d8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b8:	484b      	ldr	r0, [pc, #300]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021ba:	f008 fc63 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c4:	4848      	ldr	r0, [pc, #288]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f008 fc5d 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021d0:	4845      	ldr	r0, [pc, #276]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021d2:	f008 fc57 	bl	800aa84 <HAL_GPIO_WritePin>
}
 80021d6:	e082      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	2b42      	cmp	r3, #66	; 0x42
 80021dc:	d112      	bne.n	8002204 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e4:	4840      	ldr	r0, [pc, #256]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021e6:	f008 fc4d 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f0:	483d      	ldr	r0, [pc, #244]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f008 fc47 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021fc:	483a      	ldr	r0, [pc, #232]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021fe:	f008 fc41 	bl	800aa84 <HAL_GPIO_WritePin>
}
 8002202:	e06c      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	2b43      	cmp	r3, #67	; 0x43
 8002208:	d112      	bne.n	8002230 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002210:	4835      	ldr	r0, [pc, #212]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002212:	f008 fc37 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800221c:	4832      	ldr	r0, [pc, #200]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800221e:	f008 fc31 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002228:	482f      	ldr	r0, [pc, #188]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800222a:	f008 fc2b 	bl	800aa84 <HAL_GPIO_WritePin>
}
 800222e:	e056      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	2b4d      	cmp	r3, #77	; 0x4d
 8002234:	d112      	bne.n	800225c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223c:	482a      	ldr	r0, [pc, #168]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800223e:	f008 fc21 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002242:	2201      	movs	r2, #1
 8002244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002248:	4827      	ldr	r0, [pc, #156]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800224a:	f008 fc1b 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002254:	4824      	ldr	r0, [pc, #144]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002256:	f008 fc15 	bl	800aa84 <HAL_GPIO_WritePin>
}
 800225a:	e040      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b59      	cmp	r3, #89	; 0x59
 8002260:	d112      	bne.n	8002288 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002268:	481f      	ldr	r0, [pc, #124]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800226a:	f008 fc0b 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002274:	481c      	ldr	r0, [pc, #112]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002276:	f008 fc05 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800227a:	2201      	movs	r2, #1
 800227c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002280:	4819      	ldr	r0, [pc, #100]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002282:	f008 fbff 	bl	800aa84 <HAL_GPIO_WritePin>
}
 8002286:	e02a      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	2b57      	cmp	r3, #87	; 0x57
 800228c:	d112      	bne.n	80022b4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002294:	4814      	ldr	r0, [pc, #80]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002296:	f008 fbf5 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4811      	ldr	r0, [pc, #68]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022a2:	f008 fbef 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022ac:	480e      	ldr	r0, [pc, #56]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022ae:	f008 fbe9 	bl	800aa84 <HAL_GPIO_WritePin>
}
 80022b2:	e014      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	2b7e      	cmp	r3, #126	; 0x7e
 80022b8:	d111      	bne.n	80022de <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c0:	4809      	ldr	r0, [pc, #36]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022c2:	f008 fbdf 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022cc:	4806      	ldr	r0, [pc, #24]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022ce:	f008 fbd9 	bl	800aa84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022da:	f008 fbd3 	bl	800aa84 <HAL_GPIO_WritePin>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40020000 	.word	0x40020000

080022ec <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
 80022f8:	4613      	mov	r3, r2
 80022fa:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80022fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230a:	4813      	ldr	r0, [pc, #76]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 800230c:	f008 fbba 	bl	800aa84 <HAL_GPIO_WritePin>
 8002310:	e009      	b.n	8002326 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800231a:	2200      	movs	r2, #0
 800231c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 8002322:	f008 fbaf 	bl	800aa84 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002326:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d106      	bne.n	800233c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800232e:	2201      	movs	r2, #1
 8002330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002334:	4808      	ldr	r0, [pc, #32]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 8002336:	f008 fba5 	bl	800aa84 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800233a:	e009      	b.n	8002350 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800233c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800234a:	4803      	ldr	r0, [pc, #12]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 800234c:	f008 fb9a 	bl	800aa84 <HAL_GPIO_WritePin>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40020000 	.word	0x40020000

0800235c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800235c:	b580      	push	{r7, lr}
 800235e:	b092      	sub	sp, #72	; 0x48
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fe92 	bl	8002094 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	331c      	adds	r3, #28
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
 800237e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	429a      	cmp	r2, r3
 8002384:	d008      	beq.n	8002398 <_ZN10LineSensorC1Ev+0x3c>
 8002386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	2200      	movs	r2, #0
 800238e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	3302      	adds	r3, #2
 8002394:	647b      	str	r3, [r7, #68]	; 0x44
 8002396:	e7f2      	b.n	800237e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	3338      	adds	r3, #56	; 0x38
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d009      	beq.n	80023c6 <_ZN10LineSensorC1Ev+0x6a>
 80023b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b4:	623b      	str	r3, [r7, #32]
		s = 0;
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80023be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c0:	3304      	adds	r3, #4
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
 80023c4:	e7f1      	b.n	80023aa <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3338      	adds	r3, #56	; 0x38
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d009      	beq.n	80023f4 <_ZN10LineSensorC1Ev+0x98>
 80023e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e2:	617b      	str	r3, [r7, #20]
		m = 0;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80023ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ee:	3304      	adds	r3, #4
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f2:	e7f1      	b.n	80023d8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	3338      	adds	r3, #56	; 0x38
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	429a      	cmp	r2, r3
 800240c:	d009      	beq.n	8002422 <_ZN10LineSensorC1Ev+0xc6>
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002418:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	3304      	adds	r3, #4
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002420:	e7f1      	b.n	8002406 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4618      	mov	r0, r3
 8002426:	3748      	adds	r7, #72	; 0x48
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	220e      	movs	r2, #14
 8002438:	4619      	mov	r1, r3
 800243a:	4803      	ldr	r0, [pc, #12]	; (8002448 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800243c:	f007 f8f2 	bl	8009624 <HAL_ADC_Start_DMA>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20042824 	.word	0x20042824

0800244c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b0d      	cmp	r3, #13
 800245c:	dc2f      	bgt.n	80024be <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3392      	adds	r3, #146	; 0x92
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	ed93 7a00 	vldr	s14, [r3]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	33a0      	adds	r3, #160	; 0xa0
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	1a5b      	subs	r3, r3, r1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	68f9      	ldr	r1, [r7, #12]
 80024a8:	440b      	add	r3, r1
 80024aa:	3306      	adds	r3, #6
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3304      	adds	r3, #4
 80024b2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3301      	adds	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e7cc      	b.n	8002458 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024c8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d902      	bls.n	80024d8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]


}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	20000250 	.word	0x20000250

080024e8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80024e8:	b5b0      	push	{r4, r5, r7, lr}
 80024ea:	b08e      	sub	sp, #56	; 0x38
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024fa:	2b0d      	cmp	r3, #13
 80024fc:	f200 80b8 	bhi.w	8002670 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002500:	2300      	movs	r3, #0
 8002502:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002506:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800250a:	2b09      	cmp	r3, #9
 800250c:	d81c      	bhi.n	8002548 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800250e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002512:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002516:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4423      	add	r3, r4
 8002526:	3306      	adds	r3, #6
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4403      	add	r3, r0
 800252c:	3304      	adds	r3, #4
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	008b      	lsls	r3, r1, #2
 8002532:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002536:	440b      	add	r3, r1
 8002538:	3b30      	subs	r3, #48	; 0x30
 800253a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800253c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002540:	3301      	adds	r3, #1
 8002542:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002546:	e7de      	b.n	8002506 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800254e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002552:	2b09      	cmp	r3, #9
 8002554:	d84d      	bhi.n	80025f2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002556:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800255a:	3301      	adds	r3, #1
 800255c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002560:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002564:	2b09      	cmp	r3, #9
 8002566:	d83e      	bhi.n	80025e6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002568:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002572:	4413      	add	r3, r2
 8002574:	3b30      	subs	r3, #48	; 0x30
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002584:	4413      	add	r3, r2
 8002586:	3b30      	subs	r3, #48	; 0x30
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	d521      	bpl.n	80025da <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002596:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025a0:	4413      	add	r3, r2
 80025a2:	3b30      	subs	r3, #48	; 0x30
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80025a8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80025ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025b6:	440a      	add	r2, r1
 80025b8:	3a30      	subs	r2, #48	; 0x30
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025c2:	440b      	add	r3, r1
 80025c4:	3b30      	subs	r3, #48	; 0x30
 80025c6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80025c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025d2:	4413      	add	r3, r2
 80025d4:	3b30      	subs	r3, #48	; 0x30
 80025d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80025da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025de:	3301      	adds	r3, #1
 80025e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025e4:	e7bc      	b.n	8002560 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80025e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ea:	3301      	adds	r3, #1
 80025ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025f0:	e7ad      	b.n	800254e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ffbf 	bl	8000578 <__aeabi_f2d>
 80025fa:	a357      	add	r3, pc, #348	; (adr r3, 8002758 <_ZN10LineSensor18updateSensorValuesEv+0x270>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fe f812 	bl	8000628 <__aeabi_dmul>
 8002604:	4603      	mov	r3, r0
 8002606:	460c      	mov	r4, r1
 8002608:	4625      	mov	r5, r4
 800260a:	461c      	mov	r4, r3
 800260c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002610:	4a41      	ldr	r2, [pc, #260]	; (8002718 <_ZN10LineSensor18updateSensorValuesEv+0x230>)
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ffad 	bl	8000578 <__aeabi_f2d>
 800261e:	a33c      	add	r3, pc, #240	; (adr r3, 8002710 <_ZN10LineSensor18updateSensorValuesEv+0x228>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	f7fe f800 	bl	8000628 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fe44 	bl	80002bc <__adddf3>
 8002634:	4603      	mov	r3, r0
 8002636:	460c      	mov	r4, r1
 8002638:	461a      	mov	r2, r3
 800263a:	4623      	mov	r3, r4
 800263c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f7fe fae8 	bl	8000c18 <__aeabi_d2f>
 8002648:	4601      	mov	r1, r0
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	492e      	ldr	r1, [pc, #184]	; (8002718 <_ZN10LineSensor18updateSensorValuesEv+0x230>)
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002668:	3301      	adds	r3, #1
 800266a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800266e:	e742      	b.n	80024f6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002676:	4a29      	ldr	r2, [pc, #164]	; (800271c <_ZN10LineSensor18updateSensorValuesEv+0x234>)
 8002678:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002680:	4a27      	ldr	r2, [pc, #156]	; (8002720 <_ZN10LineSensor18updateSensorValuesEv+0x238>)
 8002682:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800268a:	4a26      	ldr	r2, [pc, #152]	; (8002724 <_ZN10LineSensor18updateSensorValuesEv+0x23c>)
 800268c:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002694:	4a24      	ldr	r2, [pc, #144]	; (8002728 <_ZN10LineSensor18updateSensorValuesEv+0x240>)
 8002696:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800269e:	4a23      	ldr	r2, [pc, #140]	; (800272c <_ZN10LineSensor18updateSensorValuesEv+0x244>)
 80026a0:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80026a8:	4a21      	ldr	r2, [pc, #132]	; (8002730 <_ZN10LineSensor18updateSensorValuesEv+0x248>)
 80026aa:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80026b2:	4a20      	ldr	r2, [pc, #128]	; (8002734 <_ZN10LineSensor18updateSensorValuesEv+0x24c>)
 80026b4:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026bc:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <_ZN10LineSensor18updateSensorValuesEv+0x250>)
 80026be:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80026c6:	4a1d      	ldr	r2, [pc, #116]	; (800273c <_ZN10LineSensor18updateSensorValuesEv+0x254>)
 80026c8:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <_ZN10LineSensor18updateSensorValuesEv+0x258>)
 80026d2:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 80026da:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <_ZN10LineSensor18updateSensorValuesEv+0x25c>)
 80026dc:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80026e4:	4a18      	ldr	r2, [pc, #96]	; (8002748 <_ZN10LineSensor18updateSensorValuesEv+0x260>)
 80026e6:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80026ee:	4a17      	ldr	r2, [pc, #92]	; (800274c <_ZN10LineSensor18updateSensorValuesEv+0x264>)
 80026f0:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80026f8:	4a15      	ldr	r2, [pc, #84]	; (8002750 <_ZN10LineSensor18updateSensorValuesEv+0x268>)
 80026fa:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8002702:	4a14      	ldr	r2, [pc, #80]	; (8002754 <_ZN10LineSensor18updateSensorValuesEv+0x26c>)
 8002704:	6013      	str	r3, [r2, #0]
}
 8002706:	bf00      	nop
 8002708:	3738      	adds	r7, #56	; 0x38
 800270a:	46bd      	mov	sp, r7
 800270c:	bdb0      	pop	{r4, r5, r7, pc}
 800270e:	bf00      	nop
 8002710:	66666666 	.word	0x66666666
 8002714:	3fee6666 	.word	0x3fee6666
 8002718:	20000254 	.word	0x20000254
 800271c:	20000214 	.word	0x20000214
 8002720:	20000218 	.word	0x20000218
 8002724:	2000021c 	.word	0x2000021c
 8002728:	20000220 	.word	0x20000220
 800272c:	20000224 	.word	0x20000224
 8002730:	20000228 	.word	0x20000228
 8002734:	2000022c 	.word	0x2000022c
 8002738:	20000230 	.word	0x20000230
 800273c:	20000234 	.word	0x20000234
 8002740:	20000238 	.word	0x20000238
 8002744:	2000023c 	.word	0x2000023c
 8002748:	20000240 	.word	0x20000240
 800274c:	20000244 	.word	0x20000244
 8002750:	20000248 	.word	0x20000248
 8002754:	2000024c 	.word	0x2000024c
 8002758:	9999999a 	.word	0x9999999a
 800275c:	3fa99999 	.word	0x3fa99999

08002760 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0a0      	sub	sp, #128	; 0x80
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002768:	2064      	movs	r0, #100	; 0x64
 800276a:	f006 fef5 	bl	8009558 <HAL_Delay>

	lcd_clear();
 800276e:	f7fe fc97 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002772:	2100      	movs	r1, #0
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe fca3 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800277a:	4886      	ldr	r0, [pc, #536]	; (8002994 <_ZN10LineSensor11calibrationEv+0x234>)
 800277c:	f7fe fcca 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002780:	2101      	movs	r1, #1
 8002782:	2000      	movs	r0, #0
 8002784:	f7fe fc9c 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002788:	4883      	ldr	r0, [pc, #524]	; (8002998 <_ZN10LineSensor11calibrationEv+0x238>)
 800278a:	f7fe fcc3 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800278e:	2300      	movs	r3, #0
 8002790:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002794:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002798:	2b0d      	cmp	r3, #13
 800279a:	d823      	bhi.n	80027e4 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 800279c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80027a0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	32b0      	adds	r2, #176	; 0xb0
 80027a8:	0092      	lsls	r2, r2, #2
 80027aa:	440a      	add	r2, r1
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027b4:	440b      	add	r3, r1
 80027b6:	3b40      	subs	r3, #64	; 0x40
 80027b8:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80027ba:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80027be:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	32b0      	adds	r2, #176	; 0xb0
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	440a      	add	r2, r1
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027d2:	440b      	add	r3, r1
 80027d4:	3b78      	subs	r3, #120	; 0x78
 80027d6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027d8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027dc:	3301      	adds	r3, #1
 80027de:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80027e2:	e7d7      	b.n	8002794 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fc5e 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d079      	beq.n	80028f4 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002800:	2300      	movs	r3, #0
 8002802:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002806:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800280a:	2b0d      	cmp	r3, #13
 800280c:	d850      	bhi.n	80028b0 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800280e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002818:	4413      	add	r3, r2
 800281a:	3b40      	subs	r3, #64	; 0x40
 800281c:	ed93 7a00 	vldr	s14, [r3]
 8002820:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	33b0      	adds	r3, #176	; 0xb0
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002838:	d50f      	bpl.n	800285a <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800283a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800283e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	32b0      	adds	r2, #176	; 0xb0
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	440a      	add	r2, r1
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002852:	440b      	add	r3, r1
 8002854:	3b40      	subs	r3, #64	; 0x40
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e024      	b.n	80028a4 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800285a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002864:	4413      	add	r3, r2
 8002866:	3b78      	subs	r3, #120	; 0x78
 8002868:	ed93 7a00 	vldr	s14, [r3]
 800286c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	33b0      	adds	r3, #176	; 0xb0
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002884:	dd0e      	ble.n	80028a4 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 8002886:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800288a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	32b0      	adds	r2, #176	; 0xb0
 8002892:	0092      	lsls	r2, r2, #2
 8002894:	440a      	add	r2, r1
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800289e:	440b      	add	r3, r1
 80028a0:	3b78      	subs	r3, #120	; 0x78
 80028a2:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028a4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028a8:	3301      	adds	r3, #1
 80028aa:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80028ae:	e7aa      	b.n	8002806 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 fcf8 	bl	80052ac <_ZN12RotarySwitch8getValueEv>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d009      	beq.n	80028e0 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80028d2:	2201      	movs	r2, #1
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fd07 	bl	80022ec <_ZN3LED2LREaa>
 80028de:	e781      	b.n	80027e4 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80028e6:	2200      	movs	r2, #0
 80028e8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fcfd 	bl	80022ec <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80028f2:	e777      	b.n	80027e4 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028f4:	2300      	movs	r3, #0
 80028f6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80028fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028fe:	2b0d      	cmp	r3, #13
 8002900:	d826      	bhi.n	8002950 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002902:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800290c:	4413      	add	r3, r2
 800290e:	3b40      	subs	r3, #64	; 0x40
 8002910:	ed93 7a00 	vldr	s14, [r3]
 8002914:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800291e:	4413      	add	r3, r2
 8002920:	3b78      	subs	r3, #120	; 0x78
 8002922:	edd3 7a00 	vldr	s15, [r3]
 8002926:	ee37 7a67 	vsub.f32	s14, s14, s15
 800292a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800292e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800299c <_ZN10LineSensor11calibrationEv+0x23c>
 8002932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	3392      	adds	r3, #146	; 0x92
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002944:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002948:	3301      	adds	r3, #1
 800294a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800294e:	e7d4      	b.n	80028fa <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002950:	2300      	movs	r3, #0
 8002952:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002956:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800295a:	2b0d      	cmp	r3, #13
 800295c:	d815      	bhi.n	800298a <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 800295e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002962:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800296c:	440a      	add	r2, r1
 800296e:	3a78      	subs	r2, #120	; 0x78
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	33a0      	adds	r3, #160	; 0xa0
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3304      	adds	r3, #4
 800297c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800297e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002982:	3301      	adds	r3, #1
 8002984:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002988:	e7e5      	b.n	8002956 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800298a:	bf00      	nop
 800298c:	3780      	adds	r7, #128	; 0x80
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	0801944c 	.word	0x0801944c
 8002998:	08019458 	.word	0x08019458
 800299c:	447a0000 	.word	0x447a0000

080029a0 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 80029ac:	2303      	movs	r3, #3
 80029ae:	81bb      	strh	r3, [r7, #12]
 80029b0:	89bb      	ldrh	r3, [r7, #12]
 80029b2:	2b0a      	cmp	r3, #10
 80029b4:	d814      	bhi.n	80029e0 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 80029b6:	89bb      	ldrh	r3, [r7, #12]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	33b0      	adds	r3, #176	; 0xb0
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002a34 <_ZN10LineSensor13emergencyStopEv+0x94>
 80029c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	db02      	blt.n	80029d8 <_ZN10LineSensor13emergencyStopEv+0x38>
 80029d2:	89fb      	ldrh	r3, [r7, #14]
 80029d4:	3301      	adds	r3, #1
 80029d6:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 80029d8:	89bb      	ldrh	r3, [r7, #12]
 80029da:	3301      	adds	r3, #1
 80029dc:	81bb      	strh	r3, [r7, #12]
 80029de:	e7e7      	b.n	80029b0 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 80029e0:	89fb      	ldrh	r3, [r7, #14]
 80029e2:	2b07      	cmp	r3, #7
 80029e4:	d906      	bls.n	80029f4 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029f0:	801a      	strh	r2, [r3, #0]
 80029f2:	e002      	b.n	80029fa <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	2b31      	cmp	r3, #49	; 0x31
 8002a00:	d903      	bls.n	8002a0a <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	e002      	b.n	8002a10 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d903      	bls.n	8002a24 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a22:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]

}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	44098000 	.word	0x44098000
 8002a38:	2000028c 	.word	0x2000028c
 8002a3c:	2000028e 	.word	0x2000028e

08002a40 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a4e:	eef0 7ae7 	vabs.f32	s15, s15
 8002a52:	eeb0 0a67 	vmov.f32	s0, s15
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	629a      	str	r2, [r3, #40]	; 0x28
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002aea:	3344      	adds	r3, #68	; 0x44
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002af6:	3346      	adds	r3, #70	; 0x46
 8002af8:	2200      	movs	r2, #0
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b02:	3348      	adds	r3, #72	; 0x48
 8002b04:	2200      	movs	r2, #0
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b0e:	337c      	adds	r3, #124	; 0x7c
 8002b10:	2200      	movs	r2, #0
 8002b12:	801a      	strh	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b1a:	337e      	adds	r3, #126	; 0x7e
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b26:	3380      	adds	r3, #128	; 0x80
 8002b28:	2200      	movs	r2, #0
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b32:	3382      	adds	r3, #130	; 0x82
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b3e:	3383      	adds	r3, #131	; 0x83
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b4a:	3384      	adds	r3, #132	; 0x84
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b56:	3388      	adds	r3, #136	; 0x88
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b64:	338c      	adds	r3, #140	; 0x8c
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b72:	3390      	adds	r3, #144	; 0x90
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b80:	3394      	adds	r3, #148	; 0x94
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b8e:	3398      	adds	r3, #152	; 0x98
 8002b90:	2200      	movs	r2, #0
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b9a:	339a      	adds	r3, #154	; 0x9a
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a3a      	ldr	r2, [r7, #32]
 8002bb6:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbc:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bc2:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc8:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bce:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	82fb      	strh	r3, [r7, #22]
 8002bda:	8afb      	ldrh	r3, [r7, #22]
 8002bdc:	f241 726f 	movw	r2, #5999	; 0x176f
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d80d      	bhi.n	8002c00 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a0>
		velocity_table_[i] = 0;
 8002be4:	8afb      	ldrh	r3, [r7, #22]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002bf8:	8afb      	ldrh	r3, [r7, #22]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	82fb      	strh	r3, [r7, #22]
 8002bfe:	e7ec      	b.n	8002bda <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17a>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c00:	2300      	movs	r3, #0
 8002c02:	82bb      	strh	r3, [r7, #20]
 8002c04:	8abb      	ldrh	r3, [r7, #20]
 8002c06:	2b63      	cmp	r3, #99	; 0x63
 8002c08:	d80e      	bhi.n	8002c28 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002c0a:	8abb      	ldrh	r3, [r7, #20]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c12:	3312      	adds	r3, #18
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	3304      	adds	r3, #4
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c20:	8abb      	ldrh	r3, [r7, #20]
 8002c22:	3301      	adds	r3, #1
 8002c24:	82bb      	strh	r3, [r7, #20]
 8002c26:	e7ed      	b.n	8002c04 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c28:	2300      	movs	r3, #0
 8002c2a:	827b      	strh	r3, [r7, #18]
 8002c2c:	8a7b      	ldrh	r3, [r7, #18]
 8002c2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c32:	d20e      	bcs.n	8002c52 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f2>
		sideline_distance_[i] = 0;
 8002c34:	8a7b      	ldrh	r3, [r7, #18]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002c3c:	3336      	adds	r3, #54	; 0x36
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	3304      	adds	r3, #4
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c4a:	8a7b      	ldrh	r3, [r7, #18]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	827b      	strh	r3, [r7, #18]
 8002c50:	e7ec      	b.n	8002c2c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c52:	2300      	movs	r3, #0
 8002c54:	823b      	strh	r3, [r7, #16]
 8002c56:	8a3b      	ldrh	r3, [r7, #16]
 8002c58:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c5c:	d20e      	bcs.n	8002c7c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x21c>
		all_sideline_distance_[i] = 0;
 8002c5e:	8a3b      	ldrh	r3, [r7, #16]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8002c66:	332a      	adds	r3, #42	; 0x2a
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c74:	8a3b      	ldrh	r3, [r7, #16]
 8002c76:	3301      	adds	r3, #1
 8002c78:	823b      	strh	r3, [r7, #16]
 8002c7a:	e7ec      	b.n	8002c56 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f6>
	}
}
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	0000      	movs	r0, r0
 8002c8c:	0000      	movs	r0, r0
	...

08002c90 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002c90:	b5b0      	push	{r4, r5, r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002ca8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002cc8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cdc:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <_ZN9LineTrace9calcErrorEv+0xc8>)
 8002ce4:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fc45 	bl	8000578 <__aeabi_f2d>
 8002cee:	a316      	add	r3, pc, #88	; (adr r3, 8002d48 <_ZN9LineTrace9calcErrorEv+0xb8>)
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	f7fd fc98 	bl	8000628 <__aeabi_dmul>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	460c      	mov	r4, r1
 8002cfc:	4625      	mov	r5, r4
 8002cfe:	461c      	mov	r4, r3
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <_ZN9LineTrace9calcErrorEv+0xcc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fc37 	bl	8000578 <__aeabi_f2d>
 8002d0a:	a311      	add	r3, pc, #68	; (adr r3, 8002d50 <_ZN9LineTrace9calcErrorEv+0xc0>)
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	f7fd fc8a 	bl	8000628 <__aeabi_dmul>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4620      	mov	r0, r4
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	f7fd face 	bl	80002bc <__adddf3>
 8002d20:	4603      	mov	r3, r0
 8002d22:	460c      	mov	r4, r1
 8002d24:	4618      	mov	r0, r3
 8002d26:	4621      	mov	r1, r4
 8002d28:	f7fd ff76 	bl	8000c18 <__aeabi_d2f>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	60fb      	str	r3, [r7, #12]
	//mon_diff_lpf = diff;

	pre_diff = diff;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <_ZN9LineTrace9calcErrorEv+0xcc>)
 8002d34:	6013      	str	r3, [r2, #0]

	return diff;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	ee07 3a90 	vmov	s15, r3

}
 8002d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bdb0      	pop	{r4, r5, r7, pc}
 8002d46:	bf00      	nop
 8002d48:	47ae147b 	.word	0x47ae147b
 8002d4c:	3fb47ae1 	.word	0x3fb47ae1
 8002d50:	d70a3d71 	.word	0xd70a3d71
 8002d54:	3fed70a3 	.word	0x3fed70a3
 8002d58:	20000290 	.word	0x20000290
 8002d5c:	200002b0 	.word	0x200002b0

08002d60 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff91 	bl	8002c90 <_ZN9LineTrace9calcErrorEv>
 8002d6e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002d7c:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	p = kp_ * diff;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002da4:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	edd7 6a05 	vldr	s13, [r7, #20]
 8002dae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db6:	ee17 0a90 	vmov	r0, s15
 8002dba:	f7fd fbdd 	bl	8000578 <__aeabi_f2d>
 8002dbe:	a32a      	add	r3, pc, #168	; (adr r3, 8002e68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	f7fd fd5a 	bl	800087c <__aeabi_ddiv>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	460c      	mov	r4, r1
 8002dcc:	4618      	mov	r0, r3
 8002dce:	4621      	mov	r1, r4
 8002dd0:	f7fd ff22 	bl	8000c18 <__aeabi_d2f>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fbcb 	bl	8000578 <__aeabi_f2d>
 8002de2:	4604      	mov	r4, r0
 8002de4:	460d      	mov	r5, r1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002dec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df4:	ee17 0a90 	vmov	r0, s15
 8002df8:	f7fd fbbe 	bl	8000578 <__aeabi_f2d>
 8002dfc:	a31a      	add	r3, pc, #104	; (adr r3, 8002e68 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f7fd fc11 	bl	8000628 <__aeabi_dmul>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	f7fd fa55 	bl	80002bc <__adddf3>
 8002e12:	4603      	mov	r3, r0
 8002e14:	460c      	mov	r4, r1
 8002e16:	4618      	mov	r0, r3
 8002e18:	4621      	mov	r1, r4
 8002e1a:	f7fd fefd 	bl	8000c18 <__aeabi_d2f>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002e22:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002e24:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002e32:	edd3 7a00 	vldr	s15, [r3]
 8002e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8002e48:	edd7 0a02 	vldr	s1, [r7, #8]
 8002e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e50:	4610      	mov	r0, r2
 8002e52:	f002 fdc9 	bl	80059e8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002e56:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	6013      	str	r3, [r2, #0]

}
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bdb0      	pop	{r4, r5, r7, pc}
 8002e64:	f3af 8000 	nop.w
 8002e68:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e6c:	3f50624d 	.word	0x3f50624d
 8002e70:	200002b8 	.word	0x200002b8
 8002e74:	200002b4 	.word	0x200002b4

08002e78 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fc4b 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f002 f8ce 	bl	8005030 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f001 fdf9 	bl	8004a90 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 fe5d 	bl	8004b7a <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ee2:	337c      	adds	r3, #124	; 0x7c
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	461c      	mov	r4, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7fe fbfb 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002eee:	eef0 7a40 	vmov.f32	s15, s0
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002ef8:	3312      	adds	r3, #18
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	3304      	adds	r3, #4
 8002f00:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f0a:	337c      	adds	r3, #124	; 0x7c
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f18:	337c      	adds	r3, #124	; 0x7c
 8002f1a:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f22:	337c      	adds	r3, #124	; 0x7c
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	2b63      	cmp	r3, #99	; 0x63
 8002f28:	d905      	bls.n	8002f36 <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f30:	337c      	adds	r3, #124	; 0x7c
 8002f32:	2263      	movs	r2, #99	; 0x63
 8002f34:	801a      	strh	r2, [r3, #0]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd90      	pop	{r4, r7, pc}

08002f3e <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002f3e:	b590      	push	{r4, r7, lr}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f50:	337e      	adds	r3, #126	; 0x7e
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	461c      	mov	r4, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f7fe fbc4 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f5c:	eef0 7a40 	vmov.f32	s15, s0
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002f66:	3336      	adds	r3, #54	; 0x36
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f78:	337e      	adds	r3, #126	; 0x7e
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f86:	337e      	adds	r3, #126	; 0x7e
 8002f88:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f90:	337e      	adds	r3, #126	; 0x7e
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f98:	d306      	bcc.n	8002fa8 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fa0:	337e      	adds	r3, #126	; 0x7e
 8002fa2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002fa6:	801a      	strh	r2, [r3, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}

08002fb0 <_ZN9LineTrace9storeLogsEv>:

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}

void LineTrace::storeLogs()
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	ed2d 8b02 	vpush	{d8}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d046      	beq.n	8003054 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fcc:	3348      	adds	r3, #72	; 0x48
 8002fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11c      	bne.n	8003010 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69dc      	ldr	r4, [r3, #28]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe fb71 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8002fe4:	eeb0 8a40 	vmov.f32	s16, s0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f002 f80e 	bl	800500e <_ZN8Odometry8getThetaEv>
 8002ff2:	ec53 2b10 	vmov	r2, r3, d0
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f7fd fe0d 	bl	8000c18 <__aeabi_d2f>
 8002ffe:	4603      	mov	r3, r0
 8003000:	ee00 3a90 	vmov	s1, r3
 8003004:	eeb0 0a48 	vmov.f32	s0, s16
 8003008:	4620      	mov	r0, r4
 800300a:	f001 fc07 	bl	800481c <_ZN6Logger21storeDistanceAndThetaEff>
 800300e:	e01b      	b.n	8003048 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69dc      	ldr	r4, [r3, #28]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4618      	mov	r0, r3
 800301a:	f002 fd6d 	bl	8005af8 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 800301e:	eeb0 8a40 	vmov.f32	s16, s0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	4618      	mov	r0, r3
 8003028:	f001 fff1 	bl	800500e <_ZN8Odometry8getThetaEv>
 800302c:	ec53 2b10 	vmov	r2, r3, d0
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f7fd fdf0 	bl	8000c18 <__aeabi_d2f>
 8003038:	4603      	mov	r3, r0
 800303a:	ee00 3a90 	vmov	s1, r3
 800303e:	eeb0 0a48 	vmov.f32	s0, s16
 8003042:	4620      	mov	r0, r4
 8003044:	f001 fc32 	bl	80048ac <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	3301      	adds	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003052:	801a      	strh	r2, [r3, #0]
	}
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	ecbd 8b02 	vpop	{d8}
 800305e:	bd90      	pop	{r4, r7, pc}
 8003060:	20000294 	.word	0x20000294

08003064 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6959      	ldr	r1, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003076:	337c      	adds	r3, #124	; 0x7c
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003080:	3312      	adds	r3, #18
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	3304      	adds	r3, #4
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	eeb0 0a67 	vmov.f32	s0, s15
 8003090:	4608      	mov	r0, r1
 8003092:	f7fe fb36 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800309c:	337c      	adds	r3, #124	; 0x7c
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030aa:	337c      	adds	r3, #124	; 0x7c
 80030ac:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030b4:	337c      	adds	r3, #124	; 0x7c
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	2b63      	cmp	r3, #99	; 0x63
 80030ba:	d905      	bls.n	80030c8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030c2:	337c      	adds	r3, #124	; 0x7c
 80030c4:	2263      	movs	r2, #99	; 0x63
 80030c6:	801a      	strh	r2, [r3, #0]

}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80030d8:	2300      	movs	r3, #0
 80030da:	82fb      	strh	r3, [r7, #22]
 80030dc:	8afb      	ldrh	r3, [r7, #22]
 80030de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030e2:	d239      	bcs.n	8003158 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 80030e4:	8afb      	ldrh	r3, [r7, #22]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80030ec:	3336      	adds	r3, #54	; 0x36
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	3304      	adds	r3, #4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe faf1 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003102:	eeb0 7a40 	vmov.f32	s14, s0
 8003106:	edd7 7a04 	vldr	s15, [r7, #16]
 800310a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800310e:	eeb0 0a67 	vmov.f32	s0, s15
 8003112:	f7ff fc95 	bl	8002a40 <_ZSt3absf>
 8003116:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 800311a:	edd7 7a03 	vldr	s15, [r7, #12]
 800311e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003180 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 8003122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	d811      	bhi.n	8003150 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6959      	ldr	r1, [r3, #20]
 8003130:	8afb      	ldrh	r3, [r7, #22]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003138:	3336      	adds	r3, #54	; 0x36
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	3304      	adds	r3, #4
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	eeb0 0a67 	vmov.f32	s0, s15
 8003148:	4608      	mov	r0, r1
 800314a:	f7fe fada 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 800314e:	e003      	b.n	8003158 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003150:	8afb      	ldrh	r3, [r7, #22]
 8003152:	3301      	adds	r3, #1
 8003154:	82fb      	strh	r3, [r7, #22]
 8003156:	e7c1      	b.n	80030dc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800315e:	337e      	adds	r3, #126	; 0x7e
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003166:	d306      	bcc.n	8003176 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800316e:	337e      	adds	r3, #126	; 0x7e
 8003170:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003174:	801a      	strh	r2, [r3, #0]

}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	42a00000 	.word	0x42a00000

08003184 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003196:	3348      	adds	r3, #72	; 0x48
 8003198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d143      	bne.n	8003228 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 80031a0:	edd7 7a00 	vldr	s15, [r7]
 80031a4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80032c0 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 80031a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b0:	d504      	bpl.n	80031bc <_ZN9LineTrace15radius2VelocityEf+0x38>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	e076      	b.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 80031bc:	edd7 7a00 	vldr	s15, [r7]
 80031c0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80032c4 <_ZN9LineTrace15radius2VelocityEf+0x140>
 80031c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031cc:	d502      	bpl.n	80031d4 <_ZN9LineTrace15radius2VelocityEf+0x50>
 80031ce:	4b3e      	ldr	r3, [pc, #248]	; (80032c8 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e06a      	b.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 80031d4:	edd7 7a00 	vldr	s15, [r7]
 80031d8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80032cc <_ZN9LineTrace15radius2VelocityEf+0x148>
 80031dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	d503      	bpl.n	80031ee <_ZN9LineTrace15radius2VelocityEf+0x6a>
 80031e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e05d      	b.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 80031ee:	edd7 7a00 	vldr	s15, [r7]
 80031f2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80032d0 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 80031f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fe:	d502      	bpl.n	8003206 <_ZN9LineTrace15radius2VelocityEf+0x82>
 8003200:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e051      	b.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003206:	edd7 7a00 	vldr	s15, [r7]
 800320a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80032d8 <_ZN9LineTrace15radius2VelocityEf+0x154>
 800320e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003216:	d502      	bpl.n	800321e <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8003218:	4b30      	ldr	r3, [pc, #192]	; (80032dc <_ZN9LineTrace15radius2VelocityEf+0x158>)
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e045      	b.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e040      	b.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800322e:	3348      	adds	r3, #72	; 0x48
 8003230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d136      	bne.n	80032a6 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8003238:	edd7 7a00 	vldr	s15, [r7]
 800323c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80032c0 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8003240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003248:	d504      	bpl.n	8003254 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e02a      	b.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8003254:	edd7 7a00 	vldr	s15, [r7]
 8003258:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80032d0 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 800325c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003264:	d502      	bpl.n	800326c <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8003266:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e01e      	b.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 800326c:	edd7 7a00 	vldr	s15, [r7]
 8003270:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80032d8 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8003274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	d502      	bpl.n	8003284 <_ZN9LineTrace15radius2VelocityEf+0x100>
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e012      	b.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8003284:	edd7 7a00 	vldr	s15, [r7]
 8003288:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80032e4 <_ZN9LineTrace15radius2VelocityEf+0x160>
 800328c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003294:	d502      	bpl.n	800329c <_ZN9LineTrace15radius2VelocityEf+0x118>
 8003296:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e006      	b.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	e001      	b.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80032a8:	60fb      	str	r3, [r7, #12]

	return velocity;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	ee07 3a90 	vmov	s15, r3
}
 80032b0:	eeb0 0a67 	vmov.f32	s0, s15
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	43960000 	.word	0x43960000
 80032c4:	44480000 	.word	0x44480000
 80032c8:	3fd9999a 	.word	0x3fd9999a
 80032cc:	447a0000 	.word	0x447a0000
 80032d0:	44bb8000 	.word	0x44bb8000
 80032d4:	40133333 	.word	0x40133333
 80032d8:	44fa0000 	.word	0x44fa0000
 80032dc:	40200000 	.word	0x40200000
 80032e0:	40066666 	.word	0x40066666
 80032e4:	451c4000 	.word	0x451c4000
 80032e8:	40400000 	.word	0x40400000
 80032ec:	3fa66666 	.word	0x3fa66666

080032f0 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80032f0:	b5b0      	push	{r4, r5, r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80032fc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80032fe:	f241 736f 	movw	r3, #5999	; 0x176f
 8003302:	83fb      	strh	r3, [r7, #30]
 8003304:	8bfb      	ldrh	r3, [r7, #30]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 808d 	beq.w	8003426 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800330c:	8bfb      	ldrh	r3, [r7, #30]
 800330e:	3b01      	subs	r3, #1
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	3304      	adds	r3, #4
 800331c:	ed93 7a00 	vldr	s14, [r3]
 8003320:	8bfb      	ldrh	r3, [r7, #30]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	3304      	adds	r3, #4
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003336:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800333a:	edd7 7a06 	vldr	s15, [r7, #24]
 800333e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003346:	dd6a      	ble.n	800341e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003348:	8bfb      	ldrh	r3, [r7, #30]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f910 	bl	8000578 <__aeabi_f2d>
 8003358:	a335      	add	r3, pc, #212	; (adr r3, 8003430 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	f7fd f963 	bl	8000628 <__aeabi_dmul>
 8003362:	4603      	mov	r3, r0
 8003364:	460c      	mov	r4, r1
 8003366:	4625      	mov	r5, r4
 8003368:	461c      	mov	r4, r3
 800336a:	69b8      	ldr	r0, [r7, #24]
 800336c:	f7fd f904 	bl	8000578 <__aeabi_f2d>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4620      	mov	r0, r4
 8003376:	4629      	mov	r1, r5
 8003378:	f7fd fa80 	bl	800087c <__aeabi_ddiv>
 800337c:	4603      	mov	r3, r0
 800337e:	460c      	mov	r4, r1
 8003380:	4618      	mov	r0, r3
 8003382:	4621      	mov	r1, r4
 8003384:	f7fd fc48 	bl	8000c18 <__aeabi_d2f>
 8003388:	4603      	mov	r3, r0
 800338a:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800338c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003390:	ed97 7a05 	vldr	s14, [r7, #20]
 8003394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003398:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800339c:	ed97 7a04 	vldr	s14, [r7, #16]
 80033a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ac:	dd37      	ble.n	800341e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80033ae:	8bfb      	ldrh	r3, [r7, #30]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd f8da 	bl	8000578 <__aeabi_f2d>
 80033c4:	4604      	mov	r4, r0
 80033c6:	460d      	mov	r5, r1
 80033c8:	8bfb      	ldrh	r3, [r7, #30]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4413      	add	r3, r2
 80033d0:	ed93 7a00 	vldr	s14, [r3]
 80033d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033dc:	ee17 0a90 	vmov	r0, s15
 80033e0:	f7fd f8ca 	bl	8000578 <__aeabi_f2d>
 80033e4:	a312      	add	r3, pc, #72	; (adr r3, 8003430 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f7fd f91d 	bl	8000628 <__aeabi_dmul>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4620      	mov	r0, r4
 80033f4:	4629      	mov	r1, r5
 80033f6:	f7fc ff61 	bl	80002bc <__adddf3>
 80033fa:	4603      	mov	r3, r0
 80033fc:	460c      	mov	r4, r1
 80033fe:	4619      	mov	r1, r3
 8003400:	4622      	mov	r2, r4
 8003402:	8bfb      	ldrh	r3, [r7, #30]
 8003404:	1e5c      	subs	r4, r3, #1
 8003406:	4608      	mov	r0, r1
 8003408:	4611      	mov	r1, r2
 800340a:	f7fd fc05 	bl	8000c18 <__aeabi_d2f>
 800340e:	4601      	mov	r1, r0
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800341e:	8bfb      	ldrh	r3, [r7, #30]
 8003420:	3b01      	subs	r3, #1
 8003422:	83fb      	strh	r3, [r7, #30]
 8003424:	e76e      	b.n	8003304 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003426:	bf00      	nop
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bdb0      	pop	{r4, r5, r7, pc}
 800342e:	bf00      	nop
 8003430:	d2f1a9fc 	.word	0xd2f1a9fc
 8003434:	3f50624d 	.word	0x3f50624d

08003438 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003438:	b5b0      	push	{r4, r5, r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	ed87 0a02 	vstr	s0, [r7, #8]
 8003444:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003446:	2300      	movs	r3, #0
 8003448:	83fb      	strh	r3, [r7, #30]
 800344a:	8bfb      	ldrh	r3, [r7, #30]
 800344c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003450:	4293      	cmp	r3, r2
 8003452:	f200 808d 	bhi.w	8003570 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003456:	8bfb      	ldrh	r3, [r7, #30]
 8003458:	3301      	adds	r3, #1
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	3304      	adds	r3, #4
 8003466:	ed93 7a00 	vldr	s14, [r3]
 800346a:	8bfb      	ldrh	r3, [r7, #30]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	3304      	adds	r3, #4
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003480:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003484:	edd7 7a06 	vldr	s15, [r7, #24]
 8003488:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003490:	dd6a      	ble.n	8003568 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 8003492:	8bfb      	ldrh	r3, [r7, #30]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd f86b 	bl	8000578 <__aeabi_f2d>
 80034a2:	a335      	add	r3, pc, #212	; (adr r3, 8003578 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f7fd f8be 	bl	8000628 <__aeabi_dmul>
 80034ac:	4603      	mov	r3, r0
 80034ae:	460c      	mov	r4, r1
 80034b0:	4625      	mov	r5, r4
 80034b2:	461c      	mov	r4, r3
 80034b4:	69b8      	ldr	r0, [r7, #24]
 80034b6:	f7fd f85f 	bl	8000578 <__aeabi_f2d>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4620      	mov	r0, r4
 80034c0:	4629      	mov	r1, r5
 80034c2:	f7fd f9db 	bl	800087c <__aeabi_ddiv>
 80034c6:	4603      	mov	r3, r0
 80034c8:	460c      	mov	r4, r1
 80034ca:	4618      	mov	r0, r3
 80034cc:	4621      	mov	r1, r4
 80034ce:	f7fd fba3 	bl	8000c18 <__aeabi_d2f>
 80034d2:	4603      	mov	r3, r0
 80034d4:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034d6:	edd7 6a06 	vldr	s13, [r7, #24]
 80034da:	ed97 7a05 	vldr	s14, [r7, #20]
 80034de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e2:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80034ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f6:	dd37      	ble.n	8003568 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034f8:	8bfb      	ldrh	r3, [r7, #30]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	3304      	adds	r3, #4
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd f835 	bl	8000578 <__aeabi_f2d>
 800350e:	4604      	mov	r4, r0
 8003510:	460d      	mov	r5, r1
 8003512:	8bfb      	ldrh	r3, [r7, #30]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	ed93 7a00 	vldr	s14, [r3]
 800351e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003526:	ee17 0a90 	vmov	r0, s15
 800352a:	f7fd f825 	bl	8000578 <__aeabi_f2d>
 800352e:	a312      	add	r3, pc, #72	; (adr r3, 8003578 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f7fd f878 	bl	8000628 <__aeabi_dmul>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4620      	mov	r0, r4
 800353e:	4629      	mov	r1, r5
 8003540:	f7fc febc 	bl	80002bc <__adddf3>
 8003544:	4603      	mov	r3, r0
 8003546:	460c      	mov	r4, r1
 8003548:	4619      	mov	r1, r3
 800354a:	4622      	mov	r2, r4
 800354c:	8bfb      	ldrh	r3, [r7, #30]
 800354e:	1c5c      	adds	r4, r3, #1
 8003550:	4608      	mov	r0, r1
 8003552:	4611      	mov	r1, r2
 8003554:	f7fd fb60 	bl	8000c18 <__aeabi_d2f>
 8003558:	4601      	mov	r1, r0
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	3304      	adds	r3, #4
 8003566:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003568:	8bfb      	ldrh	r3, [r7, #30]
 800356a:	3301      	adds	r3, #1
 800356c:	83fb      	strh	r3, [r7, #30]
 800356e:	e76c      	b.n	800344a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003570:	bf00      	nop
 8003572:	3720      	adds	r7, #32
 8003574:	46bd      	mov	sp, r7
 8003576:	bdb0      	pop	{r4, r5, r7, pc}
 8003578:	d2f1a9fc 	.word	0xd2f1a9fc
 800357c:	3f50624d 	.word	0x3f50624d

08003580 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe f8d5 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003598:	3344      	adds	r3, #68	; 0x44
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035b4:	3344      	adds	r3, #68	; 0x44
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035c0:	3346      	adds	r3, #70	; 0x46
 80035c2:	2200      	movs	r2, #0
 80035c4:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035ee:	3344      	adds	r3, #68	; 0x44
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8081 	beq.w	80036fa <_ZN9LineTrace20updateTargetVelocityEv+0x11a>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe f871 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003602:	eeb0 7a40 	vmov.f32	s14, s0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800360c:	edd3 7a00 	vldr	s15, [r3]
 8003610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003618:	bfac      	ite	ge
 800361a:	2301      	movge	r3, #1
 800361c:	2300      	movlt	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d023      	beq.n	800366c <_ZN9LineTrace20updateTargetVelocityEv+0x8c>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800362a:	ed93 7a00 	vldr	s14, [r3]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003634:	3346      	adds	r3, #70	; 0x46
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	3330      	adds	r3, #48	; 0x30
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	edd3 7a00 	vldr	s15, [r3]
 8003644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800364e:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003658:	3346      	adds	r3, #70	; 0x46
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003666:	3346      	adds	r3, #70	; 0x46
 8003668:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 800366a:	e7c5      	b.n	80035f8 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003672:	3346      	adds	r3, #70	; 0x46
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	f241 726f 	movw	r2, #5999	; 0x176f
 800367a:	4293      	cmp	r3, r2
 800367c:	d906      	bls.n	800368c <_ZN9LineTrace20updateTargetVelocityEv+0xac>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003684:	3346      	adds	r3, #70	; 0x46
 8003686:	f241 726f 	movw	r2, #5999	; 0x176f
 800368a:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <_ZN9LineTrace20updateTargetVelocityEv+0x124>)
 8003696:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe f821 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80036a2:	eef0 7a40 	vmov.f32	s15, s0
 80036a6:	4b18      	ldr	r3, [pc, #96]	; (8003708 <_ZN9LineTrace20updateTargetVelocityEv+0x128>)
 80036a8:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036b2:	3346      	adds	r3, #70	; 0x46
 80036b4:	881a      	ldrh	r2, [r3, #0]
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 80036b8:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036c0:	3346      	adds	r3, #70	; 0x46
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	3304      	adds	r3, #4
 80036d0:	edd3 7a00 	vldr	s15, [r3]
 80036d4:	eeb0 0a67 	vmov.f32	s0, s15
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fa88 	bl	8003bee <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036e4:	3346      	adds	r3, #70	; 0x46
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	3304      	adds	r3, #4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a06      	ldr	r2, [pc, #24]	; (8003710 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 80036f8:	6013      	str	r3, [r2, #0]

	}
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200002a0 	.word	0x200002a0
 8003708:	200002a4 	.word	0x200002a4
 800370c:	200002a8 	.word	0x200002a8
 8003710:	200002ac 	.word	0x200002ac

08003714 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	4618      	mov	r0, r3
 800372a:	f7fd ffcc 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 800372e:	eeb0 7a40 	vmov.f32	s14, s0
 8003732:	edd7 7a00 	vldr	s15, [r7]
 8003736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800373a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373e:	bf94      	ite	ls
 8003740:	2301      	movls	r3, #1
 8003742:	2300      	movhi	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8003770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800377c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003780:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003788:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 800379c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80037a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ac:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80037b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037b4:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80037b8:	4a40      	ldr	r2, [pc, #256]	; (80038bc <_ZN9LineTrace11isCrossLineEv+0x164>)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80037be:	4a40      	ldr	r2, [pc, #256]	; (80038c0 <_ZN9LineTrace11isCrossLineEv+0x168>)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80037c4:	4b3f      	ldr	r3, [pc, #252]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	f083 0301 	eor.w	r3, r3, #1
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d044      	beq.n	800385c <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 80037d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80037d6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80038c8 <_ZN9LineTrace11isCrossLineEv+0x170>
 80037da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e2:	d50f      	bpl.n	8003804 <_ZN9LineTrace11isCrossLineEv+0xac>
 80037e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80037e8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80038c8 <_ZN9LineTrace11isCrossLineEv+0x170>
 80037ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	d506      	bpl.n	8003804 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 80037f6:	4b35      	ldr	r3, [pc, #212]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x174>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	3301      	adds	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	4b33      	ldr	r3, [pc, #204]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	e002      	b.n	800380a <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003806:	2200      	movs	r2, #0
 8003808:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 800380a:	4b30      	ldr	r3, [pc, #192]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x174>)
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d94d      	bls.n	80038ae <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8003812:	4b2f      	ldr	r3, [pc, #188]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8003818:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800381e:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003820:	2200      	movs	r2, #0
 8003822:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800382a:	3384      	adds	r3, #132	; 0x84
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003836:	3348      	adds	r3, #72	; 0x48
 8003838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fb45 	bl	8002ed0 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003846:	e032      	b.n	80038ae <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fc0b 	bl	8003064 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003854:	3398      	adds	r3, #152	; 0x98
 8003856:	2200      	movs	r2, #0
 8003858:	801a      	strh	r2, [r3, #0]
 800385a:	e028      	b.n	80038ae <_ZN9LineTrace11isCrossLineEv+0x156>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 800385c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003860:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80038d4 <_ZN9LineTrace11isCrossLineEv+0x17c>
 8003864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386c:	dd0f      	ble.n	800388e <_ZN9LineTrace11isCrossLineEv+0x136>
 800386e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003872:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80038d4 <_ZN9LineTrace11isCrossLineEv+0x17c>
 8003876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	dd06      	ble.n	800388e <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x174>)
 800388a:	801a      	strh	r2, [r3, #0]
 800388c:	e002      	b.n	8003894 <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003890:	2200      	movs	r2, #0
 8003892:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	2b09      	cmp	r3, #9
 800389a:	d908      	bls.n	80038ae <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x178>)
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x174>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000298 	.word	0x20000298
 80038c0:	2000029c 	.word	0x2000029c
 80038c4:	200002bf 	.word	0x200002bf
 80038c8:	44160000 	.word	0x44160000
 80038cc:	200002bc 	.word	0x200002bc
 80038d0:	200002be 	.word	0x200002be
 80038d4:	43fa0000 	.word	0x43fa0000

080038d8 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80038e0:	2300      	movs	r3, #0
 80038e2:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd feec 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80038ee:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 fb89 	bl	800500e <_ZN8Odometry8getThetaEv>
 80038fc:	ec54 3b10 	vmov	r3, r4, d0
 8003900:	4618      	mov	r0, r3
 8003902:	4621      	mov	r1, r4
 8003904:	f7fd f988 	bl	8000c18 <__aeabi_d2f>
 8003908:	4603      	mov	r3, r0
 800390a:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 800390c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003910:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	d101      	bne.n	800391e <_ZN9LineTrace8isStableEv+0x46>
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <_ZN9LineTrace8isStableEv+0xd0>)
 800391c:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800391e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003922:	edd7 7a04 	vldr	s15, [r7, #16]
 8003926:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800392a:	eeb0 0a66 	vmov.f32	s0, s13
 800392e:	f7ff f887 	bl	8002a40 <_ZSt3absf>
 8003932:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003936:	edd7 7a03 	vldr	s15, [r7, #12]
 800393a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039ac <_ZN9LineTrace8isStableEv+0xd4>
 800393e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003946:	db01      	blt.n	800394c <_ZN9LineTrace8isStableEv+0x74>
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <_ZN9LineTrace8isStableEv+0xd8>)
 800394a:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003952:	3384      	adds	r3, #132	; 0x84
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 800395c:	2200      	movs	r2, #0
 800395e:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003966:	3384      	adds	r3, #132	; 0x84
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 800396c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003970:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039b8 <_ZN9LineTrace8isStableEv+0xe0>
 8003974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397c:	db06      	blt.n	800398c <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 800397e:	4b0d      	ldr	r3, [pc, #52]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e002      	b.n	8003992 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 800398e:	2200      	movs	r2, #0
 8003990:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	2b16      	cmp	r3, #22
 8003998:	d901      	bls.n	800399e <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 800399a:	2301      	movs	r3, #1
 800399c:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd90      	pop	{r4, r7, pc}
 80039a8:	3727c5ac 	.word	0x3727c5ac
 80039ac:	459c4000 	.word	0x459c4000
 80039b0:	459c4000 	.word	0x459c4000
 80039b4:	200002c0 	.word	0x200002c0
 80039b8:	44fa0000 	.word	0x44fa0000

080039bc <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08e      	sub	sp, #56	; 0x38
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80039c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039c8:	2201      	movs	r2, #1
 80039ca:	4951      	ldr	r1, [pc, #324]	; (8003b10 <_ZN9LineTrace4initEv+0x154>)
 80039cc:	4851      	ldr	r0, [pc, #324]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 80039ce:	f7fd ffbb 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80039d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039d6:	2201      	movs	r2, #1
 80039d8:	494f      	ldr	r1, [pc, #316]	; (8003b18 <_ZN9LineTrace4initEv+0x15c>)
 80039da:	484e      	ldr	r0, [pc, #312]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 80039dc:	f7fd ffb4 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80039e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e4:	2201      	movs	r2, #1
 80039e6:	494d      	ldr	r1, [pc, #308]	; (8003b1c <_ZN9LineTrace4initEv+0x160>)
 80039e8:	484a      	ldr	r0, [pc, #296]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 80039ea:	f7fd ffad 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80039ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80039f2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80039f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80039fa:	eeb0 1a66 	vmov.f32	s2, s13
 80039fe:	eef0 0a47 	vmov.f32	s1, s14
 8003a02:	eeb0 0a67 	vmov.f32	s0, s15
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f89c 	bl	8003b44 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a10:	2201      	movs	r2, #1
 8003a12:	4943      	ldr	r1, [pc, #268]	; (8003b20 <_ZN9LineTrace4initEv+0x164>)
 8003a14:	483f      	ldr	r0, [pc, #252]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 8003a16:	f7fd ff97 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1e:	2201      	movs	r2, #1
 8003a20:	4940      	ldr	r1, [pc, #256]	; (8003b24 <_ZN9LineTrace4initEv+0x168>)
 8003a22:	483c      	ldr	r0, [pc, #240]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 8003a24:	f7fd ff90 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a28:	f107 0320 	add.w	r3, r7, #32
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	493e      	ldr	r1, [pc, #248]	; (8003b28 <_ZN9LineTrace4initEv+0x16c>)
 8003a30:	4838      	ldr	r0, [pc, #224]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 8003a32:	f7fd ff89 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a36:	f107 031c 	add.w	r3, r7, #28
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	493b      	ldr	r1, [pc, #236]	; (8003b2c <_ZN9LineTrace4initEv+0x170>)
 8003a3e:	4835      	ldr	r0, [pc, #212]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 8003a40:	f7fd ff82 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a44:	f107 0318 	add.w	r3, r7, #24
 8003a48:	2201      	movs	r2, #1
 8003a4a:	4939      	ldr	r1, [pc, #228]	; (8003b30 <_ZN9LineTrace4initEv+0x174>)
 8003a4c:	4831      	ldr	r0, [pc, #196]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 8003a4e:	f7fd ff7b 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a56:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f8c7 	bl	8003bee <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003a60:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a64:	eeb0 0a67 	vmov.f32	s0, s15
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f8d0 	bl	8003c0e <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003a6e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a72:	eeb0 0a67 	vmov.f32	s0, s15
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f8d9 	bl	8003c2e <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a80:	eeb0 0a67 	vmov.f32	s0, s15
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f8e2 	bl	8003c4e <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003a8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f8eb 	bl	8003c6e <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4925      	ldr	r1, [pc, #148]	; (8003b34 <_ZN9LineTrace4initEv+0x178>)
 8003aa0:	481c      	ldr	r0, [pc, #112]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 8003aa2:	f7fd ff51 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003aa6:	f107 0310 	add.w	r3, r7, #16
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4922      	ldr	r1, [pc, #136]	; (8003b38 <_ZN9LineTrace4initEv+0x17c>)
 8003aae:	4819      	ldr	r0, [pc, #100]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 8003ab0:	f7fd ff4a 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003ab4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ab8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003abc:	eef0 0a47 	vmov.f32	s1, s14
 8003ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f932 	bl	8003d2e <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	2201      	movs	r2, #1
 8003adc:	4917      	ldr	r1, [pc, #92]	; (8003b3c <_ZN9LineTrace4initEv+0x180>)
 8003ade:	480d      	ldr	r0, [pc, #52]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 8003ae0:	f7fd ff32 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003ae4:	f107 0308 	add.w	r3, r7, #8
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4915      	ldr	r1, [pc, #84]	; (8003b40 <_ZN9LineTrace4initEv+0x184>)
 8003aec:	4809      	ldr	r0, [pc, #36]	; (8003b14 <_ZN9LineTrace4initEv+0x158>)
 8003aee:	f7fd ff2b 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003af2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003af6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003afa:	eef0 0a47 	vmov.f32	s1, s14
 8003afe:	eeb0 0a67 	vmov.f32	s0, s15
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f92d 	bl	8003d62 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003b08:	bf00      	nop
 8003b0a:	3738      	adds	r7, #56	; 0x38
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	080194d0 	.word	0x080194d0
 8003b14:	080194d8 	.word	0x080194d8
 8003b18:	080194e0 	.word	0x080194e0
 8003b1c:	080194e8 	.word	0x080194e8
 8003b20:	080194f0 	.word	0x080194f0
 8003b24:	080194fc 	.word	0x080194fc
 8003b28:	08019508 	.word	0x08019508
 8003b2c:	08019514 	.word	0x08019514
 8003b30:	08019520 	.word	0x08019520
 8003b34:	0801952c 	.word	0x0801952c
 8003b38:	08019534 	.word	0x08019534
 8003b3c:	0801953c 	.word	0x0801953c
 8003b40:	08019548 	.word	0x08019548

08003b44 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b50:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b54:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
	return kp_;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	ee07 3a90 	vmov	s15, r3
}
 8003b86:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	return ki_;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	ee07 3a90 	vmov	s15, r3
}
 8003ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
	return kd_;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	ee07 3a90 	vmov	s15, r3
}
 8003bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c9c:	ee07 3a90 	vmov	s15, r3
}
 8003ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cbc:	ee07 3a90 	vmov	s15, r3
}
 8003cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cdc:	ee07 3a90 	vmov	s15, r3
}
 8003ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cfc:	ee07 3a90 	vmov	s15, r3
}
 8003d00:	eeb0 0a67 	vmov.f32	s0, s15
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d1c:	ee07 3a90 	vmov	s15, r3
}
 8003d20:	eeb0 0a67 	vmov.f32	s0, s15
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d3a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d44:	3388      	adds	r3, #136	; 0x88
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d50:	338c      	adds	r3, #140	; 0x8c
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d6e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d78:	3390      	adds	r3, #144	; 0x90
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d84:	3394      	adds	r3, #148	; 0x94
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]
}
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003da4:	3388      	adds	r3, #136	; 0x88
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	ee07 3a90 	vmov	s15, r3
}
 8003dac:	eeb0 0a67 	vmov.f32	s0, s15
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dc8:	3394      	adds	r3, #148	; 0x94
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	ee07 3a90 	vmov	s15, r3
}
 8003dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dec:	3390      	adds	r3, #144	; 0x90
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	ee07 3a90 	vmov	s15, r3
}
 8003df4:	eeb0 0a67 	vmov.f32	s0, s15
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e10:	338c      	adds	r3, #140	; 0x8c
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	ee07 3a90 	vmov	s15, r3
}
 8003e18:	eeb0 0a67 	vmov.f32	s0, s15
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8116 	beq.w	8004068 <_ZN9LineTrace4flipEv+0x240>
		// ---- line following processing -----//
		pidTrace();
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fe ff8f 	bl	8002d60 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();


		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fbcc 	bl	80035e0 <_ZN9LineTrace20updateTargetVelocityEv>


		// ----- Processing at regular distances -----//
		if(isTargetDistance(10) == true){
 8003e48:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fc61 	bl	8003714 <_ZN9LineTrace16isTargetDistanceEf>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d040      	beq.n	8003eda <_ZN9LineTrace4flipEv+0xb2>
			// ---- Store Logs ------//
			storeLogs();
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff f8a9 	bl	8002fb0 <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69dc      	ldr	r4, [r3, #28]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd ffc2 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 8003e6c:	eef0 7a40 	vmov.f32	s15, s0
 8003e70:	eeb0 0a67 	vmov.f32	s0, s15
 8003e74:	4620      	mov	r0, r4
 8003e76:	f000 fc55 	bl	8004724 <_ZN6Logger8storeLogEf>
			logger_->storeLog2(target_omega_);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8003e84:	eeb0 0a67 	vmov.f32	s0, s15
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f000 fc88 	bl	800479e <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fd22 	bl	80038d8 <_ZN9LineTrace8isStableEv>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00c      	beq.n	8003eb4 <_ZN9LineTrace4flipEv+0x8c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 fb72 	bl	8005588 <_ZN10SideSensor10getStatusLEv>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f083 0301 	eor.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <_ZN9LineTrace4flipEv+0x8c>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <_ZN9LineTrace4flipEv+0x8e>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <_ZN9LineTrace4flipEv+0x9e>
				stable_flag_ = true;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ec0:	3383      	adds	r3, #131	; 0x83
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd fc28 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 f8ab 	bl	8005030 <_ZN8Odometry13clearPotitionEv>
		}

		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ee0:	3383      	adds	r3, #131	; 0x83
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d009      	beq.n	8003efc <_ZN9LineTrace4flipEv+0xd4>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 fb4b 	bl	8005588 <_ZN10SideSensor10getStatusLEv>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <_ZN9LineTrace4flipEv+0xd4>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <_ZN9LineTrace4flipEv+0xd6>
 8003efc:	2300      	movs	r3, #0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d020      	beq.n	8003f44 <_ZN9LineTrace4flipEv+0x11c>
			if(mode_selector_ == FIRST_RUNNING){
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f08:	3348      	adds	r3, #72	; 0x48
 8003f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <_ZN9LineTrace4flipEv+0xf2>
				storeSideLineDistance();
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff f813 	bl	8002f3e <_ZN9LineTrace21storeSideLineDistanceEv>
 8003f18:	e008      	b.n	8003f2c <_ZN9LineTrace4flipEv+0x104>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff f8d8 	bl	80030d0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f26:	3398      	adds	r3, #152	; 0x98
 8003f28:	2200      	movs	r2, #0
 8003f2a:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f32:	3383      	adds	r3, #131	; 0x83
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f3e:	3384      	adds	r3, #132	; 0x84
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
		}

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fc07 	bl	8003758 <_ZN9LineTrace11isCrossLineEv>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <_ZN9LineTrace4flipEv+0x13c>
			side_sensor_->enableIgnore();
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 fb3f 	bl	80055d8 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd fc09 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 fb4f 	bl	800560c <_ZN10SideSensor13getIgnoreFlagEv>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00f      	beq.n	8003f94 <_ZN9LineTrace4flipEv+0x16c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fbed 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003f7e:	eeb0 7a40 	vmov.f32	s14, s0
 8003f82:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8004070 <_ZN9LineTrace4flipEv+0x248>
 8003f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8e:	db01      	blt.n	8003f94 <_ZN9LineTrace4flipEv+0x16c>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <_ZN9LineTrace4flipEv+0x16e>
 8003f94:	2300      	movs	r3, #0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <_ZN9LineTrace4flipEv+0x17c>
			side_sensor_->disableIgnore();
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 fb27 	bl	80055f2 <_ZN10SideSensor13disableIgnoreEv>
		}


		if(stable_flag_ == true) led_.LR(-1, 1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003faa:	3383      	adds	r3, #131	; 0x83
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <_ZN9LineTrace4flipEv+0x19c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fe f995 	bl	80022ec <_ZN3LED2LREaa>
 8003fc2:	e007      	b.n	8003fd4 <_ZN9LineTrace4flipEv+0x1ac>
		else led_.LR(-1, 0);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f04f 31ff 	mov.w	r1, #4294967295
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe f98c 	bl	80022ec <_ZN3LED2LREaa>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe fce1 	bl	80029a0 <_ZN10LineSensor13emergencyStopEv>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <_ZN9LineTrace4flipEv+0x1d8>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	eddf 0a22 	vldr	s1, [pc, #136]	; 8004074 <_ZN9LineTrace4flipEv+0x24c>
 8003fec:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8004074 <_ZN9LineTrace4flipEv+0x24c>
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f001 fcf9 	bl	80059e8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fd f9c2 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004006:	3398      	adds	r3, #152	; 0x98
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	3301      	adds	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004014:	3398      	adds	r3, #152	; 0x98
 8004016:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800401e:	3398      	adds	r3, #152	; 0x98
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	f242 720f 	movw	r2, #9999	; 0x270f
 8004026:	4293      	cmp	r3, r2
 8004028:	d906      	bls.n	8004038 <_ZN9LineTrace4flipEv+0x210>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004030:	3398      	adds	r3, #152	; 0x98
 8004032:	f242 7210 	movw	r2, #10000	; 0x2710
 8004036:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800403e:	3398      	adds	r3, #152	; 0x98
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	2b50      	cmp	r3, #80	; 0x50
 8004044:	d808      	bhi.n	8004058 <_ZN9LineTrace4flipEv+0x230>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	330c      	adds	r3, #12
 800404a:	2201      	movs	r2, #1
 800404c:	f04f 31ff 	mov.w	r1, #4294967295
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe f94b 	bl	80022ec <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8004056:	e007      	b.n	8004068 <_ZN9LineTrace4flipEv+0x240>
		else led_.LR(-1, 0);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	330c      	adds	r3, #12
 800405c:	2200      	movs	r2, #0
 800405e:	f04f 31ff 	mov.w	r1, #4294967295
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe f942 	bl	80022ec <_ZN3LED2LREaa>
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bd90      	pop	{r4, r7, pc}
 8004070:	43480000 	.word	0x43480000
 8004074:	00000000 	.word	0x00000000

08004078 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800408a:	3348      	adds	r3, #72	; 0x48
 800408c:	887a      	ldrh	r2, [r7, #2]
 800408e:	801a      	strh	r2, [r3, #0]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	i_reset_flag_ = true;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	velocity_ctrl_->start();
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f001 fcee 	bl	8005a9a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 fa78 	bl	80055b8 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040ce:	337c      	adds	r3, #124	; 0x7c
 80040d0:	2200      	movs	r2, #0
 80040d2:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040da:	337e      	adds	r3, #126	; 0x7e
 80040dc:	2200      	movs	r2, #0
 80040de:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040e6:	3380      	adds	r3, #128	; 0x80
 80040e8:	2200      	movs	r2, #0
 80040ea:	801a      	strh	r2, [r3, #0]
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004100:	2300      	movs	r3, #0
 8004102:	737b      	strb	r3, [r7, #13]
	start();
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ffc9 	bl	800409c <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800410a:	7b7b      	ldrb	r3, [r7, #13]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d15b      	bne.n	80041c8 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8004110:	89fb      	ldrh	r3, [r7, #14]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <_ZN9LineTrace7runningEv+0x28>
 8004116:	2b0a      	cmp	r3, #10
 8004118:	d030      	beq.n	800417c <_ZN9LineTrace7runningEv+0x88>
 800411a:	e054      	b.n	80041c6 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	4618      	mov	r0, r3
 8004122:	f001 fa3d 	bl	80055a0 <_ZN10SideSensor16getWhiteLineCntREv>
 8004126:	4603      	mov	r3, r0
 8004128:	2b01      	cmp	r3, #1
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d044      	beq.n	80041c0 <_ZN9LineTrace7runningEv+0xcc>
				loggerStart();
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fe fe9e 	bl	8002e78 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004142:	3348      	adds	r3, #72	; 0x48
 8004144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fa17 	bl	8003580 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fd fb0d 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fd faeb 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	330c      	adds	r3, #12
 800416a:	f04f 32ff 	mov.w	r2, #4294967295
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe f8bb 	bl	80022ec <_ZN3LED2LREaa>
				stage = 10;
 8004176:	230a      	movs	r3, #10
 8004178:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800417a:	e021      	b.n	80041c0 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	4618      	mov	r0, r3
 8004182:	f001 fa0d 	bl	80055a0 <_ZN10SideSensor16getWhiteLineCntREv>
 8004186:	4603      	mov	r3, r0
 8004188:	2b02      	cmp	r3, #2
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d016      	beq.n	80041c4 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fe fe89 	bl	8002eae <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff fa02 	bl	80035a6 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80041a2:	2064      	movs	r0, #100	; 0x64
 80041a4:	f005 f9d8 	bl	8009558 <HAL_Delay>

				setTargetVelocity(0);
 80041a8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80041d8 <_ZN9LineTrace7runningEv+0xe4>
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff fd1e 	bl	8003bee <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80041b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041b6:	f005 f9cf 	bl	8009558 <HAL_Delay>

				goal_flag = true;
 80041ba:	2301      	movs	r3, #1
 80041bc:	737b      	strb	r3, [r7, #13]

			}

			break;
 80041be:	e001      	b.n	80041c4 <_ZN9LineTrace7runningEv+0xd0>
			break;
 80041c0:	bf00      	nop
 80041c2:	e7a2      	b.n	800410a <_ZN9LineTrace7runningEv+0x16>
			break;
 80041c4:	bf00      	nop
	while(goal_flag == false){
 80041c6:	e7a0      	b.n	800410a <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f807 	bl	80041dc <_ZN9LineTrace4stopEv>
}
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	00000000 	.word	0x00000000

080041dc <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	velocity_ctrl_->stop();
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 fc65 	bl	8005ac0 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	330c      	adds	r3, #12
 80041fa:	2201      	movs	r2, #1
 80041fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe f873 	bl	80022ec <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800420c:	3348      	adds	r3, #72	; 0x48
 800420e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d107      	bne.n	8004226 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69d8      	ldr	r0, [r3, #28]
 800421a:	4b23      	ldr	r3, [pc, #140]	; (80042a8 <_ZN9LineTrace4stopEv+0xcc>)
 800421c:	4a23      	ldr	r2, [pc, #140]	; (80042ac <_ZN9LineTrace4stopEv+0xd0>)
 800421e:	4924      	ldr	r1, [pc, #144]	; (80042b0 <_ZN9LineTrace4stopEv+0xd4>)
 8004220:	f000 fbd1 	bl	80049c6 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8004224:	e006      	b.n	8004234 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69d8      	ldr	r0, [r3, #28]
 800422a:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <_ZN9LineTrace4stopEv+0xd8>)
 800422c:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <_ZN9LineTrace4stopEv+0xdc>)
 800422e:	4920      	ldr	r1, [pc, #128]	; (80042b0 <_ZN9LineTrace4stopEv+0xd4>)
 8004230:	f000 fbec 	bl	8004a0c <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800423a:	334c      	adds	r3, #76	; 0x4c
 800423c:	2200      	movs	r2, #0
 800423e:	9200      	str	r2, [sp, #0]
 8004240:	2264      	movs	r2, #100	; 0x64
 8004242:	491e      	ldr	r1, [pc, #120]	; (80042bc <_ZN9LineTrace4stopEv+0xe0>)
 8004244:	481a      	ldr	r0, [pc, #104]	; (80042b0 <_ZN9LineTrace4stopEv+0xd4>)
 8004246:	f7fd fb19 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004250:	33dc      	adds	r3, #220	; 0xdc
 8004252:	2200      	movs	r2, #0
 8004254:	9200      	str	r2, [sp, #0]
 8004256:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800425a:	4919      	ldr	r1, [pc, #100]	; (80042c0 <_ZN9LineTrace4stopEv+0xe4>)
 800425c:	4814      	ldr	r0, [pc, #80]	; (80042b0 <_ZN9LineTrace4stopEv+0xd4>)
 800425e:	f7fd fb0d 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 8004268:	33ac      	adds	r3, #172	; 0xac
 800426a:	2200      	movs	r2, #0
 800426c:	9200      	str	r2, [sp, #0]
 800426e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004272:	4914      	ldr	r1, [pc, #80]	; (80042c4 <_ZN9LineTrace4stopEv+0xe8>)
 8004274:	480e      	ldr	r0, [pc, #56]	; (80042b0 <_ZN9LineTrace4stopEv+0xd4>)
 8004276:	f7fd fb01 	bl	800187c <sd_write_array_float>

	led_.LR(-1, 0);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	330c      	adds	r3, #12
 800427e:	2200      	movs	r2, #0
 8004280:	f04f 31ff 	mov.w	r1, #4294967295
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe f831 	bl	80022ec <_ZN3LED2LREaa>

	logger_->resetIdx();
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fc4a 	bl	8004b28 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fbf9 	bl	8004a90 <_ZN6Logger10resetLogs2Ev>
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	08019554 	.word	0x08019554
 80042ac:	08019560 	.word	0x08019560
 80042b0:	08019570 	.word	0x08019570
 80042b4:	0801957c 	.word	0x0801957c
 80042b8:	08019588 	.word	0x08019588
 80042bc:	08019598 	.word	0x08019598
 80042c0:	080195a8 	.word	0x080195a8
 80042c4:	080195b4 	.word	0x080195b4

080042c8 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b08b      	sub	sp, #44	; 0x2c
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fb31 	bl	800493c <_ZN6Logger23getDistanceArrayPointerEv>
 80042da:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fb38 	bl	8004956 <_ZN6Logger20getThetaArrayPointerEv>
 80042e6:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80042e8:	2300      	movs	r3, #0
 80042ea:	837b      	strh	r3, [r7, #26]
 80042ec:	8b7b      	ldrh	r3, [r7, #26]
 80042ee:	f241 726f 	movw	r2, #5999	; 0x176f
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d84a      	bhi.n	800438c <_ZN9LineTrace20createVelocityTabeleEv+0xc4>
		temp_distance = p_distance[i];
 80042f6:	8b7b      	ldrh	r3, [r7, #26]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	4413      	add	r3, r2
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004302:	8b7b      	ldrh	r3, [r7, #26]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4413      	add	r3, r2
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800430e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004312:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431a:	d101      	bne.n	8004320 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 800431c:	4b4c      	ldr	r3, [pc, #304]	; (8004450 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 800431e:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004320:	ed97 7a02 	vldr	s14, [r7, #8]
 8004324:	edd7 7a07 	vldr	s15, [r7, #28]
 8004328:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800432c:	eeb0 0a66 	vmov.f32	s0, s13
 8004330:	f7fe fb86 	bl	8002a40 <_ZSt3absf>
 8004334:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004338:	edd7 7a05 	vldr	s15, [r7, #20]
 800433c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004454 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004348:	db01      	blt.n	800434e <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800434a:	4b43      	ldr	r3, [pc, #268]	; (8004458 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 800434c:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 800434e:	8b7c      	ldrh	r4, [r7, #26]
 8004350:	ed97 0a05 	vldr	s0, [r7, #20]
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7fe ff15 	bl	8003184 <_ZN9LineTrace15radius2VelocityEf>
 800435a:	eef0 7a40 	vmov.f32	s15, s0
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	3304      	adds	r3, #4
 800436a:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 800436e:	8b7b      	ldrh	r3, [r7, #26]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	441a      	add	r2, r3
 8004376:	8b7b      	ldrh	r3, [r7, #26]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	3330      	adds	r3, #48	; 0x30
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004384:	8b7b      	ldrh	r3, [r7, #26]
 8004386:	3301      	adds	r3, #1
 8004388:	837b      	strh	r3, [r7, #26]
 800438a:	e7af      	b.n	80042ec <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004392:	3348      	adds	r3, #72	; 0x48
 8004394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d120      	bne.n	80043de <_ZN9LineTrace20createVelocityTabeleEv+0x116>
		velocity_table_[0] = min_velocity_;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80043a8:	3304      	adds	r3, #4
 80043aa:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80043b2:	338c      	adds	r3, #140	; 0x8c
 80043b4:	edd3 7a00 	vldr	s15, [r3]
 80043b8:	6939      	ldr	r1, [r7, #16]
 80043ba:	eeb0 0a67 	vmov.f32	s0, s15
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fe ff96 	bl	80032f0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80043ca:	3388      	adds	r3, #136	; 0x88
 80043cc:	edd3 7a00 	vldr	s15, [r3]
 80043d0:	6939      	ldr	r1, [r7, #16]
 80043d2:	eeb0 0a67 	vmov.f32	s0, s15
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff f82e 	bl	8003438 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80043dc:	e027      	b.n	800442e <_ZN9LineTrace20createVelocityTabeleEv+0x166>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043e4:	3348      	adds	r3, #72	; 0x48
 80043e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d11f      	bne.n	800442e <_ZN9LineTrace20createVelocityTabeleEv+0x166>
		velocity_table_[0] = min_velocity2_;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80043fa:	3304      	adds	r3, #4
 80043fc:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004404:	3394      	adds	r3, #148	; 0x94
 8004406:	edd3 7a00 	vldr	s15, [r3]
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	eeb0 0a67 	vmov.f32	s0, s15
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7fe ff6d 	bl	80032f0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800441c:	3390      	adds	r3, #144	; 0x90
 800441e:	edd3 7a00 	vldr	s15, [r3]
 8004422:	6939      	ldr	r1, [r7, #16]
 8004424:	eeb0 0a67 	vmov.f32	s0, s15
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff f805 	bl	8003438 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004434:	3304      	adds	r3, #4
 8004436:	2200      	movs	r2, #0
 8004438:	9200      	str	r2, [sp, #0]
 800443a:	f241 7270 	movw	r2, #6000	; 0x1770
 800443e:	4907      	ldr	r1, [pc, #28]	; (800445c <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004440:	4807      	ldr	r0, [pc, #28]	; (8004460 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004442:	f7fd fa1b 	bl	800187c <sd_write_array_float>

}
 8004446:	bf00      	nop
 8004448:	3724      	adds	r7, #36	; 0x24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd90      	pop	{r4, r7, pc}
 800444e:	bf00      	nop
 8004450:	3727c5ac 	.word	0x3727c5ac
 8004454:	459c4000 	.word	0x459c4000
 8004458:	459c4000 	.word	0x459c4000
 800445c:	080195c4 	.word	0x080195c4
 8004460:	08019570 	.word	0x08019570

08004464 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004464:	b590      	push	{r4, r7, lr}
 8004466:	b08b      	sub	sp, #44	; 0x2c
 8004468:	af02      	add	r7, sp, #8
 800446a:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69d8      	ldr	r0, [r3, #28]
 8004470:	4b6b      	ldr	r3, [pc, #428]	; (8004620 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8004472:	4a6c      	ldr	r2, [pc, #432]	; (8004624 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004474:	496c      	ldr	r1, [pc, #432]	; (8004628 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004476:	f000 faed 	bl	8004a54 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004480:	334c      	adds	r3, #76	; 0x4c
 8004482:	2264      	movs	r2, #100	; 0x64
 8004484:	4969      	ldr	r1, [pc, #420]	; (800462c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8004486:	4868      	ldr	r0, [pc, #416]	; (8004628 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004488:	f7fd fa5e 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004492:	33dc      	adds	r3, #220	; 0xdc
 8004494:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004498:	4965      	ldr	r1, [pc, #404]	; (8004630 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 800449a:	4863      	ldr	r0, [pc, #396]	; (8004628 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800449c:	f7fd fa54 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fa49 	bl	800493c <_ZN6Logger23getDistanceArrayPointerEv>
 80044aa:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fa50 	bl	8004956 <_ZN6Logger20getThetaArrayPointerEv>
 80044b6:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80044b8:	2300      	movs	r3, #0
 80044ba:	837b      	strh	r3, [r7, #26]
 80044bc:	8b7b      	ldrh	r3, [r7, #26]
 80044be:	f241 726f 	movw	r2, #5999	; 0x176f
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d84a      	bhi.n	800455c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xf8>

		temp_distance = p_distance[i];
 80044c6:	8b7b      	ldrh	r3, [r7, #26]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4413      	add	r3, r2
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80044d2:	8b7b      	ldrh	r3, [r7, #26]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80044de:	edd7 7a07 	vldr	s15, [r7, #28]
 80044e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ea:	d101      	bne.n	80044f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80044ec:	4b51      	ldr	r3, [pc, #324]	; (8004634 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 80044ee:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80044f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80044f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80044f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80044fc:	eeb0 0a66 	vmov.f32	s0, s13
 8004500:	f7fe fa9e 	bl	8002a40 <_ZSt3absf>
 8004504:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004508:	edd7 7a05 	vldr	s15, [r7, #20]
 800450c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004638 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004518:	db01      	blt.n	800451e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800451a:	4b48      	ldr	r3, [pc, #288]	; (800463c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 800451c:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 800451e:	8b7c      	ldrh	r4, [r7, #26]
 8004520:	ed97 0a05 	vldr	s0, [r7, #20]
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fe fe2d 	bl	8003184 <_ZN9LineTrace15radius2VelocityEf>
 800452a:	eef0 7a40 	vmov.f32	s15, s0
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	3304      	adds	r3, #4
 800453a:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 800453e:	8b7b      	ldrh	r3, [r7, #26]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	441a      	add	r2, r3
 8004546:	8b7b      	ldrh	r3, [r7, #26]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	3330      	adds	r3, #48	; 0x30
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004554:	8b7b      	ldrh	r3, [r7, #26]
 8004556:	3301      	adds	r3, #1
 8004558:	837b      	strh	r3, [r7, #26]
 800455a:	e7af      	b.n	80044bc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004562:	3348      	adds	r3, #72	; 0x48
 8004564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d120      	bne.n	80045ae <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14a>
		velocity_table_[0] = min_velocity_;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004578:	3304      	adds	r3, #4
 800457a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004582:	338c      	adds	r3, #140	; 0x8c
 8004584:	edd3 7a00 	vldr	s15, [r3]
 8004588:	6939      	ldr	r1, [r7, #16]
 800458a:	eeb0 0a67 	vmov.f32	s0, s15
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fe feae 	bl	80032f0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800459a:	3388      	adds	r3, #136	; 0x88
 800459c:	edd3 7a00 	vldr	s15, [r3]
 80045a0:	6939      	ldr	r1, [r7, #16]
 80045a2:	eeb0 0a67 	vmov.f32	s0, s15
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fe ff46 	bl	8003438 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80045ac:	e027      	b.n	80045fe <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19a>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045b4:	3348      	adds	r3, #72	; 0x48
 80045b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d11f      	bne.n	80045fe <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19a>
		velocity_table_[0] = min_velocity2_;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045ca:	3304      	adds	r3, #4
 80045cc:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80045d4:	3394      	adds	r3, #148	; 0x94
 80045d6:	edd3 7a00 	vldr	s15, [r3]
 80045da:	6939      	ldr	r1, [r7, #16]
 80045dc:	eeb0 0a67 	vmov.f32	s0, s15
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7fe fe85 	bl	80032f0 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80045ec:	3390      	adds	r3, #144	; 0x90
 80045ee:	edd3 7a00 	vldr	s15, [r3]
 80045f2:	6939      	ldr	r1, [r7, #16]
 80045f4:	eeb0 0a67 	vmov.f32	s0, s15
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7fe ff1d 	bl	8003438 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004604:	3304      	adds	r3, #4
 8004606:	2200      	movs	r2, #0
 8004608:	9200      	str	r2, [sp, #0]
 800460a:	f241 7270 	movw	r2, #6000	; 0x1770
 800460e:	490c      	ldr	r1, [pc, #48]	; (8004640 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8004610:	4805      	ldr	r0, [pc, #20]	; (8004628 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004612:	f7fd f933 	bl	800187c <sd_write_array_float>

}
 8004616:	bf00      	nop
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd90      	pop	{r4, r7, pc}
 800461e:	bf00      	nop
 8004620:	08019554 	.word	0x08019554
 8004624:	08019560 	.word	0x08019560
 8004628:	08019570 	.word	0x08019570
 800462c:	08019598 	.word	0x08019598
 8004630:	080195a8 	.word	0x080195a8
 8004634:	3727c5ac 	.word	0x3727c5ac
 8004638:	459c4000 	.word	0x459c4000
 800463c:	459c4000 	.word	0x459c4000
 8004640:	080195c4 	.word	0x080195c4

08004644 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004652:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004660:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004664:	2200      	movs	r2, #0
 8004666:	801a      	strh	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800466e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004672:	2200      	movs	r2, #0
 8004674:	801a      	strh	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800467c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004680:	2200      	movs	r2, #0
 8004682:	801a      	strh	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800469c:	2300      	movs	r3, #0
 800469e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80046a0:	f7fd f9de 	bl	8001a60 <sd_mount>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	bf0c      	ite	eq
 80046aa:	2301      	moveq	r3, #1
 80046ac:	2300      	movne	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d016      	beq.n	80046e2 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80046b4:	f7fc fcf4 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80046b8:	2100      	movs	r1, #0
 80046ba:	2000      	movs	r0, #0
 80046bc:	f7fc fd00 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80046c0:	4815      	ldr	r0, [pc, #84]	; (8004718 <_ZN6Logger10sdCardInitEv+0x84>)
 80046c2:	f7fc fd27 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80046c6:	2101      	movs	r1, #1
 80046c8:	2000      	movs	r0, #0
 80046ca:	f7fc fcf9 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80046ce:	4813      	ldr	r0, [pc, #76]	; (800471c <_ZN6Logger10sdCardInitEv+0x88>)
 80046d0:	f7fc fd20 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80046d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046d8:	f004 ff3e 	bl	8009558 <HAL_Delay>

	  ret = true;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
 80046e0:	e015      	b.n	800470e <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80046e2:	f7fc fcdd 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80046e6:	2100      	movs	r1, #0
 80046e8:	2000      	movs	r0, #0
 80046ea:	f7fc fce9 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80046ee:	480a      	ldr	r0, [pc, #40]	; (8004718 <_ZN6Logger10sdCardInitEv+0x84>)
 80046f0:	f7fc fd10 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80046f4:	2101      	movs	r1, #1
 80046f6:	2000      	movs	r0, #0
 80046f8:	f7fc fce2 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80046fc:	4808      	ldr	r0, [pc, #32]	; (8004720 <_ZN6Logger10sdCardInitEv+0x8c>)
 80046fe:	f7fc fd09 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004706:	f004 ff27 	bl	8009558 <HAL_Delay>

	  ret = false;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800470e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	080195d4 	.word	0x080195d4
 800471c:	080195e0 	.word	0x080195e0
 8004720:	080195e8 	.word	0x080195e8

08004724 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004736:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d028      	beq.n	8004792 <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004746:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800475c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800476c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004770:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004778:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004782:	d306      	bcc.n	8004792 <_ZN6Logger8storeLogEf+0x6e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800478a:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800478e:	2200      	movs	r2, #0
 8004790:	801a      	strh	r2, [r3, #0]
	}
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d02a      	beq.n	8004810 <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047c0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047da:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	3301      	adds	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047ea:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80047ee:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047f6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004800:	d306      	bcc.n	8004810 <_ZN6Logger9storeLog2Ef+0x72>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004808:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800480c:	2200      	movs	r2, #0
 800480e:	801a      	strh	r2, [r3, #0]
	}
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	ed87 0a02 	vstr	s0, [r7, #8]
 8004828:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004832:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800484c:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004858:	3310      	adds	r3, #16
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004868:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004878:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800487c:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004884:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	f241 726f 	movw	r2, #5999	; 0x176f
 800488e:	4293      	cmp	r3, r2
 8004890:	d906      	bls.n	80048a0 <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004898:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800489c:	2200      	movs	r2, #0
 800489e:	801a      	strh	r2, [r3, #0]
	//}
}
 80048a0:	bf00      	nop
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80048b8:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048c2:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048dc:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	f503 43ab 	add.w	r3, r3, #21888	; 0x5580
 80048e8:	3370      	adds	r3, #112	; 0x70
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048f8:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	3301      	adds	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004908:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800490c:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004914:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	f241 726f 	movw	r2, #5999	; 0x176f
 800491e:	4293      	cmp	r3, r2
 8004920:	d906      	bls.n	8004930 <_ZN6Logger22storeDistanceAndTheta2Eff+0x84>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004928:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800492c:	2200      	movs	r2, #0
 800492e:	801a      	strh	r2, [r3, #0]
	//}
}
 8004930:	bf00      	nop
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
}
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004964:	3340      	adds	r3, #64	; 0x40
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af02      	add	r7, sp, #8
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	2300      	movs	r3, #0
 8004982:	9300      	str	r3, [sp, #0]
 8004984:	4613      	mov	r3, r2
 8004986:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	68b8      	ldr	r0, [r7, #8]
 800498e:	f7fc ff75 	bl	800187c <sd_write_array_float>
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b086      	sub	sp, #24
 800499e:	af02      	add	r7, sp, #8
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 80049ac:	2300      	movs	r3, #0
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	68b8      	ldr	r0, [r7, #8]
 80049ba:	f7fc ff5f 	bl	800187c <sd_write_array_float>
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b086      	sub	sp, #24
 80049ca:	af02      	add	r7, sp, #8
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 80049da:	2300      	movs	r3, #0
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	4613      	mov	r3, r2
 80049e0:	f241 7270 	movw	r2, #6000	; 0x1770
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	68b8      	ldr	r0, [r7, #8]
 80049e8:	f7fc ff48 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80049f2:	3340      	adds	r3, #64	; 0x40
 80049f4:	2200      	movs	r2, #0
 80049f6:	9200      	str	r2, [sp, #0]
 80049f8:	f241 7270 	movw	r2, #6000	; 0x1770
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	68b8      	ldr	r0, [r7, #8]
 8004a00:	f7fc ff3c 	bl	800187c <sd_write_array_float>
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 8004a20:	2300      	movs	r3, #0
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	68b8      	ldr	r0, [r7, #8]
 8004a2e:	f7fc ff25 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004a38:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	9200      	str	r2, [sp, #0]
 8004a40:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a44:	6839      	ldr	r1, [r7, #0]
 8004a46:	68b8      	ldr	r0, [r7, #8]
 8004a48:	f7fc ff18 	bl	800187c <sd_write_array_float>
}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8004a68:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	68b8      	ldr	r0, [r7, #8]
 8004a70:	f7fc ff6a 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004a7a:	3340      	adds	r3, #64	; 0x40
 8004a7c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a80:	6839      	ldr	r1, [r7, #0]
 8004a82:	68b8      	ldr	r0, [r7, #8]
 8004a84:	f7fc ff60 	bl	8001948 <sd_read_array_float>
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004a90:	b480      	push	{r7}
 8004a92:	b08b      	sub	sp, #44	; 0x2c
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004aaa:	3340      	adds	r3, #64	; 0x40
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d009      	beq.n	8004aca <_ZN6Logger10resetLogs2Ev+0x3a>
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	617b      	str	r3, [r7, #20]
		log = 0;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac8:	e7f1      	b.n	8004aae <_ZN6Logger10resetLogs2Ev+0x1e>
	}
	for(auto &log : store_theta2_){
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004ad0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	623b      	str	r3, [r7, #32]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004ae0:	3340      	adds	r3, #64	; 0x40
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	6a3a      	ldr	r2, [r7, #32]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d009      	beq.n	8004b00 <_ZN6Logger10resetLogs2Ev+0x70>
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	3304      	adds	r3, #4
 8004afc:	623b      	str	r3, [r7, #32]
 8004afe:	e7f1      	b.n	8004ae4 <_ZN6Logger10resetLogs2Ev+0x54>
	}

	log_index_tim_ = 0;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b06:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b14:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004b18:	2200      	movs	r2, #0
 8004b1a:	801a      	strh	r2, [r3, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	372c      	adds	r7, #44	; 0x2c
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b36:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b44:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004b48:	2200      	movs	r2, #0
 8004b4a:	801a      	strh	r2, [r3, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b66:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	801a      	strh	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	805a      	strh	r2, [r3, #2]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004bc8:	2108      	movs	r1, #8
 8004bca:	4805      	ldr	r0, [pc, #20]	; (8004be0 <_ZN5Motor4initEv+0x20>)
 8004bcc:	f009 fe74 	bl	800e8b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004bd0:	210c      	movs	r1, #12
 8004bd2:	4803      	ldr	r0, [pc, #12]	; (8004be0 <_ZN5Motor4initEv+0x20>)
 8004bd4:	f009 fe70 	bl	800e8b8 <HAL_TIM_PWM_Start>

}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	200427e4 	.word	0x200427e4

08004be4 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da0d      	bge.n	8004c12 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bfc:	481f      	ldr	r0, [pc, #124]	; (8004c7c <_ZN5Motor9motorCtrlEv+0x98>)
 8004bfe:	f005 ff41 	bl	800aa84 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	425b      	negs	r3, r3
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	81fb      	strh	r3, [r7, #14]
 8004c10:	e00a      	b.n	8004c28 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004c12:	2201      	movs	r2, #1
 8004c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c18:	4818      	ldr	r0, [pc, #96]	; (8004c7c <_ZN5Motor9motorCtrlEv+0x98>)
 8004c1a:	f005 ff33 	bl	800aa84 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	da0d      	bge.n	8004c4e <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004c32:	2201      	movs	r2, #1
 8004c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c38:	4810      	ldr	r0, [pc, #64]	; (8004c7c <_ZN5Motor9motorCtrlEv+0x98>)
 8004c3a:	f005 ff23 	bl	800aa84 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	425b      	negs	r3, r3
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	81bb      	strh	r3, [r7, #12]
 8004c4c:	e00a      	b.n	8004c64 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c54:	4809      	ldr	r0, [pc, #36]	; (8004c7c <_ZN5Motor9motorCtrlEv+0x98>)
 8004c56:	f005 ff15 	bl	800aa84 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004c64:	89fa      	ldrh	r2, [r7, #14]
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004c6c:	89ba      	ldrh	r2, [r7, #12]
 8004c6e:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40020c00 	.word	0x40020c00
 8004c80:	200427e4 	.word	0x200427e4

08004c84 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004c84:	b590      	push	{r4, r7, lr}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6178      	str	r0, [r7, #20]
 8004c8c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004c90:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <_ZN5Motor8setRatioEdd+0xd8>)
 8004c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c9e:	f7fb ff53 	bl	8000b48 <__aeabi_dcmpgt>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <_ZN5Motor8setRatioEdd+0x30>
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	4c2b      	ldr	r4, [pc, #172]	; (8004d5c <_ZN5Motor8setRatioEdd+0xd8>)
 8004cae:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004cb2:	e00e      	b.n	8004cd2 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <_ZN5Motor8setRatioEdd+0xdc>)
 8004cba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cbe:	f7fb ff25 	bl	8000b0c <__aeabi_dcmplt>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <_ZN5Motor8setRatioEdd+0x4e>
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	4c24      	ldr	r4, [pc, #144]	; (8004d60 <_ZN5Motor8setRatioEdd+0xdc>)
 8004cce:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <_ZN5Motor8setRatioEdd+0xd8>)
 8004cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cdc:	f7fb ff34 	bl	8000b48 <__aeabi_dcmpgt>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <_ZN5Motor8setRatioEdd+0x6e>
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	4c1c      	ldr	r4, [pc, #112]	; (8004d5c <_ZN5Motor8setRatioEdd+0xd8>)
 8004cec:	e9c7 3400 	strd	r3, r4, [r7]
 8004cf0:	e00e      	b.n	8004d10 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <_ZN5Motor8setRatioEdd+0xdc>)
 8004cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cfc:	f7fb ff06 	bl	8000b0c <__aeabi_dcmplt>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <_ZN5Motor8setRatioEdd+0x8c>
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	4c15      	ldr	r4, [pc, #84]	; (8004d60 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d0c:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <_ZN5Motor8setRatioEdd+0xe0>)
 8004d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d1a:	f7fb fc85 	bl	8000628 <__aeabi_dmul>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	460c      	mov	r4, r1
 8004d22:	4618      	mov	r0, r3
 8004d24:	4621      	mov	r1, r4
 8004d26:	f7fb ff2f 	bl	8000b88 <__aeabi_d2iz>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	b21a      	sxth	r2, r3
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <_ZN5Motor8setRatioEdd+0xe0>)
 8004d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d3c:	f7fb fc74 	bl	8000628 <__aeabi_dmul>
 8004d40:	4603      	mov	r3, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	4618      	mov	r0, r3
 8004d46:	4621      	mov	r1, r4
 8004d48:	f7fb ff1e 	bl	8000b88 <__aeabi_d2iz>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	b21a      	sxth	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	805a      	strh	r2, [r3, #2]

}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd90      	pop	{r4, r7, pc}
 8004d5c:	3ff00000 	.word	0x3ff00000
 8004d60:	bff00000 	.word	0xbff00000
 8004d64:	409c2000 	.word	0x409c2000

08004d68 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004d68:	b490      	push	{r4, r7}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	f04f 0400 	mov.w	r4, #0
 8004d80:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	f04f 0400 	mov.w	r4, #0
 8004d8e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	f04f 0400 	mov.w	r4, #0
 8004d9c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	f04f 0400 	mov.w	r4, #0
 8004daa:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	f04f 0400 	mov.w	r4, #0
 8004db8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	609a      	str	r2, [r3, #8]
}
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc90      	pop	{r4, r7}
 8004dd8:	4770      	bx	lr
 8004dda:	0000      	movs	r0, r0
 8004ddc:	0000      	movs	r0, r0
	...

08004de0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fc fffe 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 8004df4:	ee10 3a10 	vmov	r3, s0
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fb fbbd 	bl	8000578 <__aeabi_f2d>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	460c      	mov	r4, r1
 8004e02:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fc fc4c 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004e10:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004e14:	a376      	add	r3, pc, #472	; (adr r3, 8004ff0 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e1e:	f7fb fc03 	bl	8000628 <__aeabi_dmul>
 8004e22:	4603      	mov	r3, r0
 8004e24:	460c      	mov	r4, r1
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f7fb fba0 	bl	8000578 <__aeabi_f2d>
 8004e38:	4682      	mov	sl, r0
 8004e3a:	468b      	mov	fp, r1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e50:	f7fb fd14 	bl	800087c <__aeabi_ddiv>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4640      	mov	r0, r8
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	f7fb fa2e 	bl	80002bc <__adddf3>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	ec43 2b17 	vmov	d7, r2, r3
 8004e68:	eeb0 0a47 	vmov.f32	s0, s14
 8004e6c:	eef0 0a67 	vmov.f32	s1, s15
 8004e70:	f00f f866 	bl	8013f40 <cos>
 8004e74:	ec53 2b10 	vmov	r2, r3, d0
 8004e78:	4650      	mov	r0, sl
 8004e7a:	4659      	mov	r1, fp
 8004e7c:	f7fb fbd4 	bl	8000628 <__aeabi_dmul>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4620      	mov	r0, r4
 8004e86:	4629      	mov	r1, r5
 8004e88:	f7fb fa18 	bl	80002bc <__adddf3>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	460c      	mov	r4, r1
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7fb fb6b 	bl	8000578 <__aeabi_f2d>
 8004ea2:	4682      	mov	sl, r0
 8004ea4:	468b      	mov	fp, r1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004eba:	f7fb fcdf 	bl	800087c <__aeabi_ddiv>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	f7fb f9f9 	bl	80002bc <__adddf3>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	ec43 2b17 	vmov	d7, r2, r3
 8004ed2:	eeb0 0a47 	vmov.f32	s0, s14
 8004ed6:	eef0 0a67 	vmov.f32	s1, s15
 8004eda:	f00f f875 	bl	8013fc8 <sin>
 8004ede:	ec53 2b10 	vmov	r2, r3, d0
 8004ee2:	4650      	mov	r0, sl
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	f7fb fb9f 	bl	8000628 <__aeabi_dmul>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4620      	mov	r0, r4
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	f7fb f9e3 	bl	80002bc <__adddf3>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	460c      	mov	r4, r1
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4623      	mov	r3, r4
 8004f10:	f7fb f9d4 	bl	80002bc <__adddf3>
 8004f14:	4603      	mov	r3, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	ed93 7b08 	vldr	d7, [r3, #32]
 8004f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f2e:	eef0 0a67 	vmov.f32	s1, s15
 8004f32:	f00f f805 	bl	8013f40 <cos>
 8004f36:	ec51 0b10 	vmov	r0, r1, d0
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	4b28      	ldr	r3, [pc, #160]	; (8004fe0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004f40:	f7fb fb72 	bl	8000628 <__aeabi_dmul>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4620      	mov	r0, r4
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	f7fb f9b6 	bl	80002bc <__adddf3>
 8004f50:	4603      	mov	r3, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	ed93 7b08 	vldr	d7, [r3, #32]
 8004f66:	eeb0 0a47 	vmov.f32	s0, s14
 8004f6a:	eef0 0a67 	vmov.f32	s1, s15
 8004f6e:	f00f f82b 	bl	8013fc8 <sin>
 8004f72:	ec51 0b10 	vmov	r0, r1, d0
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004f7c:	f7fb fb54 	bl	8000628 <__aeabi_dmul>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4620      	mov	r0, r4
 8004f86:	4629      	mov	r1, r5
 8004f88:	f7fb f998 	bl	80002bc <__adddf3>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	f7fb fe3a 	bl	8000c18 <__aeabi_d2f>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004fa8:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	f7fb fe30 	bl	8000c18 <__aeabi_d2f>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004fbc:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	f7fb fe26 	bl	8000c18 <__aeabi_d2f>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004fd0:	601a      	str	r2, [r3, #0]
}
 8004fd2:	bf00      	nop
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fdc:	f3af 8000 	nop.w
 8004fe0:	405b8000 	.word	0x405b8000
 8004fe4:	200002c4 	.word	0x200002c4
 8004fe8:	200002c8 	.word	0x200002c8
 8004fec:	200002cc 	.word	0x200002cc
 8004ff0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ff4:	3f50624d 	.word	0x3f50624d

08004ff8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff feed 	bl	8004de0 <_ZN8Odometry12calcPotitionEv>
}
 8005006:	bf00      	nop
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 800500e:	b490      	push	{r4, r7}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
	return theta_;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800501c:	ec44 3b17 	vmov	d7, r3, r4
}
 8005020:	eeb0 0a47 	vmov.f32	s0, s14
 8005024:	eef0 0a67 	vmov.f32	s1, s15
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bc90      	pop	{r4, r7}
 800502e:	4770      	bx	lr

08005030 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8005030:	b490      	push	{r4, r7}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	f04f 0400 	mov.w	r4, #0
 8005042:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	f04f 0400 	mov.w	r4, #0
 8005050:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	f04f 0400 	mov.w	r4, #0
 800505e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bc90      	pop	{r4, r7}
 800506a:	4770      	bx	lr

0800506c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 800506c:	b490      	push	{r4, r7}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	f04f 0400 	mov.w	r4, #0
 8005084:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	f04f 0300 	mov.w	r3, #0
 800508e:	f04f 0400 	mov.w	r4, #0
 8005092:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	f04f 0400 	mov.w	r4, #0
 80050a0:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80050aa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80050ae:	2200      	movs	r2, #0
 80050b0:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80050b2:	4a29      	ldr	r2, [pc, #164]	; (8005158 <_ZN13PathFollowingC1Ev+0xec>)
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	f04f 0400 	mov.w	r4, #0
 80050bc:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80050c0:	4a25      	ldr	r2, [pc, #148]	; (8005158 <_ZN13PathFollowingC1Ev+0xec>)
 80050c2:	f04f 0300 	mov.w	r3, #0
 80050c6:	f04f 0400 	mov.w	r4, #0
 80050ca:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80050ce:	4a22      	ldr	r2, [pc, #136]	; (8005158 <_ZN13PathFollowingC1Ev+0xec>)
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	f04f 0400 	mov.w	r4, #0
 80050d8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80050dc:	4a1f      	ldr	r2, [pc, #124]	; (800515c <_ZN13PathFollowingC1Ev+0xf0>)
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	f04f 0400 	mov.w	r4, #0
 80050e6:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80050ea:	4a1c      	ldr	r2, [pc, #112]	; (800515c <_ZN13PathFollowingC1Ev+0xf0>)
 80050ec:	f04f 0300 	mov.w	r3, #0
 80050f0:	f04f 0400 	mov.w	r4, #0
 80050f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80050f8:	4a18      	ldr	r2, [pc, #96]	; (800515c <_ZN13PathFollowingC1Ev+0xf0>)
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	f04f 0400 	mov.w	r4, #0
 8005102:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8005106:	4a15      	ldr	r2, [pc, #84]	; (800515c <_ZN13PathFollowingC1Ev+0xf0>)
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	f04f 0400 	mov.w	r4, #0
 8005110:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8005114:	4a11      	ldr	r2, [pc, #68]	; (800515c <_ZN13PathFollowingC1Ev+0xf0>)
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	f04f 0400 	mov.w	r4, #0
 800511e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8005122:	4a0e      	ldr	r2, [pc, #56]	; (800515c <_ZN13PathFollowingC1Ev+0xf0>)
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	f04f 0400 	mov.w	r4, #0
 800512c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005130:	4a0b      	ldr	r2, [pc, #44]	; (8005160 <_ZN13PathFollowingC1Ev+0xf4>)
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	f04f 0400 	mov.w	r4, #0
 800513a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 800513e:	4a08      	ldr	r2, [pc, #32]	; (8005160 <_ZN13PathFollowingC1Ev+0xf4>)
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bc90      	pop	{r4, r7}
 8005156:	4770      	bx	lr
 8005158:	20042ce8 	.word	0x20042ce8
 800515c:	20042c78 	.word	0x20042c78
 8005160:	20042cd8 	.word	0x20042cd8

08005164 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800516c:	f001 fc4e 	bl	8006a0c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005170:	f107 0318 	add.w	r3, r7, #24
 8005174:	2201      	movs	r2, #1
 8005176:	4915      	ldr	r1, [pc, #84]	; (80051cc <_ZN13PathFollowing4initEv+0x68>)
 8005178:	4815      	ldr	r0, [pc, #84]	; (80051d0 <_ZN13PathFollowing4initEv+0x6c>)
 800517a:	f7fc fc2b 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800517e:	f107 0310 	add.w	r3, r7, #16
 8005182:	2201      	movs	r2, #1
 8005184:	4913      	ldr	r1, [pc, #76]	; (80051d4 <_ZN13PathFollowing4initEv+0x70>)
 8005186:	4812      	ldr	r0, [pc, #72]	; (80051d0 <_ZN13PathFollowing4initEv+0x6c>)
 8005188:	f7fc fc24 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 800518c:	f107 0308 	add.w	r3, r7, #8
 8005190:	2201      	movs	r2, #1
 8005192:	4911      	ldr	r1, [pc, #68]	; (80051d8 <_ZN13PathFollowing4initEv+0x74>)
 8005194:	480e      	ldr	r0, [pc, #56]	; (80051d0 <_ZN13PathFollowing4initEv+0x6c>)
 8005196:	f7fc fc1d 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800519a:	ed97 7b06 	vldr	d7, [r7, #24]
 800519e:	ed97 6b04 	vldr	d6, [r7, #16]
 80051a2:	ed97 5b02 	vldr	d5, [r7, #8]
 80051a6:	eeb0 2a45 	vmov.f32	s4, s10
 80051aa:	eef0 2a65 	vmov.f32	s5, s11
 80051ae:	eeb0 1a46 	vmov.f32	s2, s12
 80051b2:	eef0 1a66 	vmov.f32	s3, s13
 80051b6:	eeb0 0a47 	vmov.f32	s0, s14
 80051ba:	eef0 0a67 	vmov.f32	s1, s15
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f80c 	bl	80051dc <_ZN13PathFollowing7setGainEddd>
}
 80051c4:	bf00      	nop
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	080195f0 	.word	0x080195f0
 80051d0:	080195f8 	.word	0x080195f8
 80051d4:	08019600 	.word	0x08019600
 80051d8:	08019608 	.word	0x08019608

080051dc <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80051dc:	b490      	push	{r4, r7}
 80051de:	b088      	sub	sp, #32
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	61f8      	str	r0, [r7, #28]
 80051e4:	ed87 0b04 	vstr	d0, [r7, #16]
 80051e8:	ed87 1b02 	vstr	d1, [r7, #8]
 80051ec:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80051f0:	4a09      	ldr	r2, [pc, #36]	; (8005218 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80051f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80051f6:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80051fa:	4a07      	ldr	r2, [pc, #28]	; (8005218 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80051fc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005200:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005206:	e9d7 3400 	ldrd	r3, r4, [r7]
 800520a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800520e:	bf00      	nop
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bc90      	pop	{r4, r7}
 8005216:	4770      	bx	lr
 8005218:	20042ce8 	.word	0x20042ce8

0800521c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005224:	2088      	movs	r0, #136	; 0x88
 8005226:	f7fc ff26 	bl	8002076 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 800522a:	2080      	movs	r0, #128	; 0x80
 800522c:	f7fc ff23 	bl	8002076 <INA260_init>
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005238:	b590      	push	{r4, r7, lr}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005240:	2188      	movs	r1, #136	; 0x88
 8005242:	2002      	movs	r0, #2
 8005244:	f7fc feb4 	bl	8001fb0 <INA260_read>
 8005248:	4603      	mov	r3, r0
 800524a:	4618      	mov	r0, r3
 800524c:	f7fb f982 	bl	8000554 <__aeabi_i2d>
 8005250:	a30c      	add	r3, pc, #48	; (adr r3, 8005284 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f7fb f9e7 	bl	8000628 <__aeabi_dmul>
 800525a:	4603      	mov	r3, r0
 800525c:	460c      	mov	r4, r1
 800525e:	4618      	mov	r0, r3
 8005260:	4621      	mov	r1, r4
 8005262:	f7fb fcd9 	bl	8000c18 <__aeabi_d2f>
 8005266:	4602      	mov	r2, r0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4a03      	ldr	r2, [pc, #12]	; (8005280 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005272:	6013      	str	r3, [r2, #0]
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	bd90      	pop	{r4, r7, pc}
 800527c:	f3af 8000 	nop.w
 8005280:	200002d0 	.word	0x200002d0
 8005284:	47ae147b 	.word	0x47ae147b
 8005288:	3f547ae1 	.word	0x3f547ae1

0800528c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	ee07 3a90 	vmov	s15, r3

}
 800529c:	eeb0 0a67 	vmov.f32	s0, s15
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80052b8:	2102      	movs	r1, #2
 80052ba:	4822      	ldr	r0, [pc, #136]	; (8005344 <_ZN12RotarySwitch8getValueEv+0x98>)
 80052bc:	f005 fbca 	bl	800aa54 <HAL_GPIO_ReadPin>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bf0c      	ite	eq
 80052c6:	2301      	moveq	r3, #1
 80052c8:	2300      	movne	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <_ZN12RotarySwitch8getValueEv+0x2c>
 80052d0:	89fb      	ldrh	r3, [r7, #14]
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80052d8:	2108      	movs	r1, #8
 80052da:	481a      	ldr	r0, [pc, #104]	; (8005344 <_ZN12RotarySwitch8getValueEv+0x98>)
 80052dc:	f005 fbba 	bl	800aa54 <HAL_GPIO_ReadPin>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	bf0c      	ite	eq
 80052e6:	2301      	moveq	r3, #1
 80052e8:	2300      	movne	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <_ZN12RotarySwitch8getValueEv+0x4c>
 80052f0:	89fb      	ldrh	r3, [r7, #14]
 80052f2:	f043 0302 	orr.w	r3, r3, #2
 80052f6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80052f8:	2110      	movs	r1, #16
 80052fa:	4812      	ldr	r0, [pc, #72]	; (8005344 <_ZN12RotarySwitch8getValueEv+0x98>)
 80052fc:	f005 fbaa 	bl	800aa54 <HAL_GPIO_ReadPin>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	bf0c      	ite	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	2300      	movne	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005310:	89fb      	ldrh	r3, [r7, #14]
 8005312:	f043 0304 	orr.w	r3, r3, #4
 8005316:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005318:	2180      	movs	r1, #128	; 0x80
 800531a:	480a      	ldr	r0, [pc, #40]	; (8005344 <_ZN12RotarySwitch8getValueEv+0x98>)
 800531c:	f005 fb9a 	bl	800aa54 <HAL_GPIO_ReadPin>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	bf0c      	ite	eq
 8005326:	2301      	moveq	r3, #1
 8005328:	2300      	movne	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005330:	89fb      	ldrh	r3, [r7, #14]
 8005332:	f043 0308 	orr.w	r3, r3, #8
 8005336:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005338:	89fb      	ldrh	r3, [r7, #14]

}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40020c00 	.word	0x40020c00

08005348 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	709a      	strb	r2, [r3, #2]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	70da      	strb	r2, [r3, #3]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	809a      	strh	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	80da      	strh	r2, [r3, #6]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	721a      	strb	r2, [r3, #8]
{

}
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7a1b      	ldrb	r3, [r3, #8]
 8005390:	f083 0301 	eor.w	r3, r3, #1
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80db 	beq.w	8005552 <_ZN10SideSensor12updateStatusEv+0x1ce>

		if(white_flag1 == false){
 800539c:	4b6f      	ldr	r3, [pc, #444]	; (800555c <_ZN10SideSensor12updateStatusEv+0x1d8>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	f083 0301 	eor.w	r3, r3, #1
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d02a      	beq.n	8005400 <_ZN10SideSensor12updateStatusEv+0x7c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80053aa:	2104      	movs	r1, #4
 80053ac:	486c      	ldr	r0, [pc, #432]	; (8005560 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 80053ae:	f005 fb51 	bl	800aa54 <HAL_GPIO_ReadPin>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	bf0c      	ite	eq
 80053b8:	2301      	moveq	r3, #1
 80053ba:	2300      	movne	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 80053c2:	4b68      	ldr	r3, [pc, #416]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	3301      	adds	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	4b66      	ldr	r3, [pc, #408]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	e002      	b.n	80053d6 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 80053d0:	4b64      	ldr	r3, [pc, #400]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80053d6:	4b63      	ldr	r3, [pc, #396]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d945      	bls.n	800546a <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ |= 0x01;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 80053f2:	4b5a      	ldr	r3, [pc, #360]	; (800555c <_ZN10SideSensor12updateStatusEv+0x1d8>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80053f8:	4b5a      	ldr	r3, [pc, #360]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	e034      	b.n	800546a <_ZN10SideSensor12updateStatusEv+0xe6>
			}

		}
		else if(white_flag1 == true){
 8005400:	4b56      	ldr	r3, [pc, #344]	; (800555c <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d030      	beq.n	800546a <_ZN10SideSensor12updateStatusEv+0xe6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005408:	2104      	movs	r1, #4
 800540a:	4855      	ldr	r0, [pc, #340]	; (8005560 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 800540c:	f005 fb22 	bl	800aa54 <HAL_GPIO_ReadPin>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf14      	ite	ne
 8005416:	2301      	movne	r3, #1
 8005418:	2300      	moveq	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d006      	beq.n	800542e <_ZN10SideSensor12updateStatusEv+0xaa>
				cnt_r++;
 8005420:	4b50      	ldr	r3, [pc, #320]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	3301      	adds	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	4b4e      	ldr	r3, [pc, #312]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	e002      	b.n	8005434 <_ZN10SideSensor12updateStatusEv+0xb0>
			}
			else{
				cnt_r = 0;
 800542e:	4b4d      	ldr	r3, [pc, #308]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005430:	2200      	movs	r2, #0
 8005432:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005434:	4b4b      	ldr	r3, [pc, #300]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	2b04      	cmp	r3, #4
 800543a:	d916      	bls.n	800546a <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ ^= 0x01;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	f083 0301 	eor.w	r3, r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 8005450:	4b42      	ldr	r3, [pc, #264]	; (800555c <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8005452:	2200      	movs	r2, #0
 8005454:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	88db      	ldrh	r3, [r3, #6]
 800545a:	3301      	adds	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	88da      	ldrh	r2, [r3, #6]
 8005466:	4b40      	ldr	r3, [pc, #256]	; (8005568 <_ZN10SideSensor12updateStatusEv+0x1e4>)
 8005468:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 800546a:	4b40      	ldr	r3, [pc, #256]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e8>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	f083 0301 	eor.w	r3, r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02a      	beq.n	80054ce <_ZN10SideSensor12updateStatusEv+0x14a>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800547c:	483c      	ldr	r0, [pc, #240]	; (8005570 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 800547e:	f005 fae9 	bl	800aa54 <HAL_GPIO_ReadPin>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf0c      	ite	eq
 8005488:	2301      	moveq	r3, #1
 800548a:	2300      	movne	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d006      	beq.n	80054a0 <_ZN10SideSensor12updateStatusEv+0x11c>
				cnt_l++;
 8005492:	4b38      	ldr	r3, [pc, #224]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	4b36      	ldr	r3, [pc, #216]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800549c:	801a      	strh	r2, [r3, #0]
 800549e:	e002      	b.n	80054a6 <_ZN10SideSensor12updateStatusEv+0x122>
			}
			else{
				cnt_l = 0;
 80054a0:	4b34      	ldr	r3, [pc, #208]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80054a6:	4b33      	ldr	r3, [pc, #204]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d90f      	bls.n	80054ce <_ZN10SideSensor12updateStatusEv+0x14a>
				status_ |= 0x02;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	f043 0302 	orr.w	r3, r3, #2
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 80054c2:	4b2a      	ldr	r3, [pc, #168]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e8>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 80054c8:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 80054ce:	4b27      	ldr	r3, [pc, #156]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e8>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d031      	beq.n	800553a <_ZN10SideSensor12updateStatusEv+0x1b6>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80054d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054da:	4825      	ldr	r0, [pc, #148]	; (8005570 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 80054dc:	f005 faba 	bl	800aa54 <HAL_GPIO_ReadPin>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf14      	ite	ne
 80054e6:	2301      	movne	r3, #1
 80054e8:	2300      	moveq	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d006      	beq.n	80054fe <_ZN10SideSensor12updateStatusEv+0x17a>
				cnt_l++;
 80054f0:	4b20      	ldr	r3, [pc, #128]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e002      	b.n	8005504 <_ZN10SideSensor12updateStatusEv+0x180>
			}
			else{
				cnt_l = 0;
 80054fe:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005500:	2200      	movs	r2, #0
 8005502:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005504:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d916      	bls.n	800553a <_ZN10SideSensor12updateStatusEv+0x1b6>
				status_ ^= 0x02;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	f083 0302 	eor.w	r3, r3, #2
 8005514:	b29a      	uxth	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 8005520:	4b12      	ldr	r3, [pc, #72]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	889b      	ldrh	r3, [r3, #4]
 800552a:	3301      	adds	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	889a      	ldrh	r2, [r3, #4]
 8005536:	4b10      	ldr	r3, [pc, #64]	; (8005578 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005538:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	881a      	ldrh	r2, [r3, #0]
 800553e:	4b0f      	ldr	r3, [pc, #60]	; (800557c <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005540:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	789a      	ldrb	r2, [r3, #2]
 8005546:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005548:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	78da      	ldrb	r2, [r3, #3]
 800554e:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005550:	701a      	strb	r2, [r3, #0]
	}

}
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	200002dc 	.word	0x200002dc
 8005560:	40021000 	.word	0x40021000
 8005564:	200002e0 	.word	0x200002e0
 8005568:	200002da 	.word	0x200002da
 800556c:	200002dd 	.word	0x200002dd
 8005570:	40020c00 	.word	0x40020c00
 8005574:	200002de 	.word	0x200002de
 8005578:	200002d8 	.word	0x200002d8
 800557c:	200002d4 	.word	0x200002d4
 8005580:	200002d6 	.word	0x200002d6
 8005584:	200002d7 	.word	0x200002d7

08005588 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	789b      	ldrb	r3, [r3, #2]
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	88db      	ldrh	r3, [r3, #6]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	80da      	strh	r2, [r3, #6]
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	721a      	strb	r2, [r3, #8]
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	721a      	strb	r2, [r3, #8]
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	7a1b      	ldrb	r3, [r3, #8]
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4a10      	ldr	r2, [pc, #64]	; (8005674 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8005634:	3308      	adds	r3, #8
 8005636:	4611      	mov	r1, r2
 8005638:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800563c:	4618      	mov	r0, r3
 800563e:	f00f fcff 	bl	8015040 <memcpy>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	0801962c 	.word	0x0801962c

08005678 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800568a:	2b00      	cmp	r3, #0
 800568c:	d010      	beq.n	80056b0 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	ed97 0a00 	vldr	s0, [r7]
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff f844 	bl	8004724 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80056a6:	eeb0 0a67 	vmov.f32	s0, s15
 80056aa:	4610      	mov	r0, r2
 80056ac:	f7ff f877 	bl	800479e <_ZN6Logger9storeLog2Ef>
	}

}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 80056b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d046      	beq.n	8005758 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80056d6:	461a      	mov	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3204      	adds	r2, #4
 80056dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80056f8:	3301      	adds	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005708:	4a15      	ldr	r2, [pc, #84]	; (8005760 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 800570a:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005712:	2bf9      	cmp	r3, #249	; 0xf9
 8005714:	d903      	bls.n	800571e <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	22fa      	movs	r2, #250	; 0xfa
 800571a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685c      	ldr	r4, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005728:	4618      	mov	r0, r3
 800572a:	f7fa ff25 	bl	8000578 <__aeabi_f2d>
 800572e:	4605      	mov	r5, r0
 8005730:	460e      	mov	r6, r1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005738:	eef1 7a67 	vneg.f32	s15, s15
 800573c:	ee17 3a90 	vmov	r3, s15
 8005740:	4618      	mov	r0, r3
 8005742:	f7fa ff19 	bl	8000578 <__aeabi_f2d>
 8005746:	4602      	mov	r2, r0
 8005748:	460b      	mov	r3, r1
 800574a:	ec43 2b11 	vmov	d1, r2, r3
 800574e:	ec46 5b10 	vmov	d0, r5, r6
 8005752:	4620      	mov	r0, r4
 8005754:	f7ff fa96 	bl	8004c84 <_ZN5Motor8setRatioEdd>

	}

}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005760:	200002e4 	.word	0x200002e4

08005764 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	609a      	str	r2, [r3, #8]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	60da      	str	r2, [r3, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	611a      	str	r2, [r3, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	615a      	str	r2, [r3, #20]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f04f 0200 	mov.w	r2, #0
 80057a8:	619a      	str	r2, [r3, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	61da      	str	r2, [r3, #28]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f04f 0200 	mov.w	r2, #0
 80057b8:	621a      	str	r2, [r3, #32]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	625a      	str	r2, [r3, #36]	; 0x24
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38

}
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	0000      	movs	r0, r0
 80057fc:	0000      	movs	r0, r0
	...

08005800 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005800:	b590      	push	{r4, r7, lr}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580c:	f107 020c 	add.w	r2, r7, #12
 8005810:	f107 0110 	add.w	r1, r7, #16
 8005814:	4618      	mov	r0, r3
 8005816:	f7fb ff33 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800581a:	ed97 7a04 	vldr	s14, [r7, #16]
 800581e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005822:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005826:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800582a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800582e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005832:	6978      	ldr	r0, [r7, #20]
 8005834:	f7fa fea0 	bl	8000578 <__aeabi_f2d>
 8005838:	a30b      	add	r3, pc, #44	; (adr r3, 8005868 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f7fa fef3 	bl	8000628 <__aeabi_dmul>
 8005842:	4603      	mov	r3, r0
 8005844:	460c      	mov	r4, r1
 8005846:	4618      	mov	r0, r3
 8005848:	4621      	mov	r1, r4
 800584a:	f7fb f9e5 	bl	8000c18 <__aeabi_d2f>
 800584e:	4602      	mov	r2, r0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	ee07 3a90 	vmov	s15, r3
}
 800585c:	eeb0 0a67 	vmov.f32	s0, s15
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd90      	pop	{r4, r7, pc}
 8005866:	bf00      	nop
 8005868:	1ab1d998 	.word	0x1ab1d998
 800586c:	3f7830b5 	.word	0x3f7830b5

08005870 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	ed93 7a00 	vldr	s14, [r3]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	edd3 7a02 	vldr	s15, [r3, #8]
 8005884:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005888:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005892:	2b00      	cmp	r3, #0
 8005894:	d007      	beq.n	80058a6 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005896:	4b48      	ldr	r3, [pc, #288]	; (80059b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80058ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80058b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b4:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80058b8:	4b3f      	ldr	r3, [pc, #252]	; (80059b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fa fe5b 	bl	8000578 <__aeabi_f2d>
 80058c2:	4604      	mov	r4, r0
 80058c4:	460d      	mov	r5, r1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80058cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80058d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d4:	ee17 0a90 	vmov	r0, s15
 80058d8:	f7fa fe4e 	bl	8000578 <__aeabi_f2d>
 80058dc:	a334      	add	r3, pc, #208	; (adr r3, 80059b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f7fa fea1 	bl	8000628 <__aeabi_dmul>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4620      	mov	r0, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7fa fce5 	bl	80002bc <__adddf3>
 80058f2:	4603      	mov	r3, r0
 80058f4:	460c      	mov	r4, r1
 80058f6:	4618      	mov	r0, r3
 80058f8:	4621      	mov	r1, r4
 80058fa:	f7fb f98d 	bl	8000c18 <__aeabi_d2f>
 80058fe:	4602      	mov	r2, r0
 8005900:	4b2d      	ldr	r3, [pc, #180]	; (80059b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005902:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	ed93 7a05 	vldr	s14, [r3, #20]
 800590a:	4b2c      	ldr	r3, [pc, #176]	; (80059bc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800590c:	edd3 7a00 	vldr	s15, [r3]
 8005910:	edd7 6a05 	vldr	s13, [r7, #20]
 8005914:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591c:	ee17 0a90 	vmov	r0, s15
 8005920:	f7fa fe2a 	bl	8000578 <__aeabi_f2d>
 8005924:	a322      	add	r3, pc, #136	; (adr r3, 80059b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	f7fa ffa7 	bl	800087c <__aeabi_ddiv>
 800592e:	4603      	mov	r3, r0
 8005930:	460c      	mov	r4, r1
 8005932:	4618      	mov	r0, r3
 8005934:	4621      	mov	r1, r4
 8005936:	f7fb f96f 	bl	8000c18 <__aeabi_d2f>
 800593a:	4603      	mov	r3, r0
 800593c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 800593e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005942:	edd7 7a03 	vldr	s15, [r7, #12]
 8005946:	ee37 7a27 	vadd.f32	s14, s14, s15
 800594a:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800594c:	edd3 7a00 	vldr	s15, [r3]
 8005950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005954:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005962:	edd7 7a02 	vldr	s15, [r7, #8]
 8005966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800596a:	ee17 0a90 	vmov	r0, s15
 800596e:	f7fa fe03 	bl	8000578 <__aeabi_f2d>
 8005972:	4605      	mov	r5, r0
 8005974:	460e      	mov	r6, r1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800597c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005984:	ee17 0a90 	vmov	r0, s15
 8005988:	f7fa fdf6 	bl	8000578 <__aeabi_f2d>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	ec43 2b11 	vmov	d1, r2, r3
 8005994:	ec46 5b10 	vmov	d0, r5, r6
 8005998:	4620      	mov	r0, r4
 800599a:	f7ff f973 	bl	8004c84 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 800599e:	4a07      	ldr	r2, [pc, #28]	; (80059bc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	6013      	str	r3, [r2, #0]
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ac:	f3af 8000 	nop.w
 80059b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80059b4:	3f50624d 	.word	0x3f50624d
 80059b8:	200002ec 	.word	0x200002ec
 80059bc:	200002e8 	.word	0x200002e8

080059c0 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80059cc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	605a      	str	r2, [r3, #4]
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80059f4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a1c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005a20:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	615a      	str	r2, [r3, #20]
}
 8005a36:	bf00      	nop
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a4e:	edc7 0a01 	vstr	s1, [r7, #4]
 8005a52:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	621a      	str	r2, [r3, #32]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff febf 	bl	8005800 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff feef 	bl	8005870 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005af0 <_ZN12VelocityCtrl4stopEv+0x30>
 8005ad8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005af0 <_ZN12VelocityCtrl4stopEv+0x30>
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff f8d1 	bl	8004c84 <_ZN5Motor8setRatioEdd>

}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	f3af 8000 	nop.w
	...

08005af8 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	ee07 3a90 	vmov	s15, r3
}
 8005b08:	eeb0 0a67 	vmov.f32	s0, s15
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d10e      	bne.n	8005b48 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005b2a:	f001 fe2b 	bl	8007784 <cppFlip100ns>

		tim7_timer++;
 8005b2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3301      	adds	r3, #1
 8005b34:	4a1b      	ldr	r2, [pc, #108]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b36:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005b38:	4b1a      	ldr	r3, [pc, #104]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d902      	bls.n	8005b48 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005b42:	4b18      	ldr	r3, [pc, #96]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a17      	ldr	r2, [pc, #92]	; (8005bac <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d10e      	bne.n	8005b70 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005b52:	f001 fdcd 	bl	80076f0 <cppFlip1ms>

		tim6_timer++;
 8005b56:	4b16      	ldr	r3, [pc, #88]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	4a14      	ldr	r2, [pc, #80]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b5e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005b60:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a10      	ldr	r2, [pc, #64]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d902      	bls.n	8005b70 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a0f      	ldr	r2, [pc, #60]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d10e      	bne.n	8005b98 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005b7a:	f001 fe0d 	bl	8007798 <cppFlip10ms>

		tim13_timer++;
 8005b7e:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3301      	adds	r3, #1
 8005b84:	4a0c      	ldr	r2, [pc, #48]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b86:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005b88:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a06      	ldr	r2, [pc, #24]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d902      	bls.n	8005b98 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005b92:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
	}

}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40001400 	.word	0x40001400
 8005ba4:	20042998 	.word	0x20042998
 8005ba8:	0001869f 	.word	0x0001869f
 8005bac:	40001000 	.word	0x40001000
 8005bb0:	20042954 	.word	0x20042954
 8005bb4:	40001c00 	.word	0x40001c00
 8005bb8:	2004299c 	.word	0x2004299c

08005bbc <init>:

void init()
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bc6:	4808      	ldr	r0, [pc, #32]	; (8005be8 <init+0x2c>)
 8005bc8:	f004 ff5c 	bl	800aa84 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005bcc:	4807      	ldr	r0, [pc, #28]	; (8005bec <init+0x30>)
 8005bce:	f008 fe24 	bl	800e81a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005bd2:	4807      	ldr	r0, [pc, #28]	; (8005bf0 <init+0x34>)
 8005bd4:	f008 fe21 	bl	800e81a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005bd8:	4806      	ldr	r0, [pc, #24]	; (8005bf4 <init+0x38>)
 8005bda:	f008 fe1e 	bl	800e81a <HAL_TIM_Base_Start_IT>

	cppInit();
 8005bde:	f001 fce3 	bl	80075a8 <cppInit>

	//path_following_initialize();

}
 8005be2:	bf00      	nop
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40021000 	.word	0x40021000
 8005bec:	20042a80 	.word	0x20042a80
 8005bf0:	20042c24 	.word	0x20042c24
 8005bf4:	200429a0 	.word	0x200429a0

08005bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005bfc:	f003 fc3a 	bl	8009474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c00:	f000 f82a 	bl	8005c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c04:	f000 fdbc 	bl	8006780 <MX_GPIO_Init>
  MX_DMA_Init();
 8005c08:	f000 fd8a 	bl	8006720 <MX_DMA_Init>
  MX_I2C2_Init();
 8005c0c:	f000 f9e8 	bl	8005fe0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005c10:	f000 fa14 	bl	800603c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005c14:	f000 fa32 	bl	800607c <MX_SPI2_Init>
  MX_TIM1_Init();
 8005c18:	f000 fa66 	bl	80060e8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005c1c:	f000 fb70 	bl	8006300 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005c20:	f000 fc3c 	bl	800649c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005c24:	f000 fd52 	bl	80066cc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005c28:	f00a fdca 	bl	80107c0 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005c2c:	f000 fbcc 	bl	80063c8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005c30:	f000 f9a8 	bl	8005f84 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005c34:	f000 fb00 	bl	8006238 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005c38:	f000 fc88 	bl	800654c <MX_TIM10_Init>
  MX_TIM11_Init();
 8005c3c:	f000 fcd4 	bl	80065e8 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005c40:	f000 f898 	bl	8005d74 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005c44:	f000 fbf6 	bl	8006434 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005c48:	f000 fd1c 	bl	8006684 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005c4c:	f7ff ffb6 	bl	8005bbc <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005c50:	f001 fdba 	bl	80077c8 <cppLoop>
 8005c54:	e7fc      	b.n	8005c50 <main+0x58>
	...

08005c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b0a4      	sub	sp, #144	; 0x90
 8005c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c5e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c62:	2234      	movs	r2, #52	; 0x34
 8005c64:	2100      	movs	r1, #0
 8005c66:	4618      	mov	r0, r3
 8005c68:	f00f f9f5 	bl	8015056 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	609a      	str	r2, [r3, #8]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c7c:	f107 030c 	add.w	r3, r7, #12
 8005c80:	223c      	movs	r2, #60	; 0x3c
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f00f f9e6 	bl	8015056 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	4b37      	ldr	r3, [pc, #220]	; (8005d6c <SystemClock_Config+0x114>)
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	4a36      	ldr	r2, [pc, #216]	; (8005d6c <SystemClock_Config+0x114>)
 8005c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c98:	6413      	str	r3, [r2, #64]	; 0x40
 8005c9a:	4b34      	ldr	r3, [pc, #208]	; (8005d6c <SystemClock_Config+0x114>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	60bb      	str	r3, [r7, #8]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	607b      	str	r3, [r7, #4]
 8005caa:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <SystemClock_Config+0x118>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a30      	ldr	r2, [pc, #192]	; (8005d70 <SystemClock_Config+0x118>)
 8005cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	4b2e      	ldr	r3, [pc, #184]	; (8005d70 <SystemClock_Config+0x118>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cbe:	607b      	str	r3, [r7, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005cc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ccc:	2302      	movs	r3, #2
 8005cce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005cd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005cd4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005cda:	23b4      	movs	r3, #180	; 0xb4
 8005cdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005ce6:	2308      	movs	r3, #8
 8005ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005cec:	2302      	movs	r3, #2
 8005cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005cf2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f006 fae6 	bl	800c2c8 <HAL_RCC_OscConfig>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005d02:	f000 fe7f 	bl	8006a04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005d06:	f005 fe61 	bl	800b9cc <HAL_PWREx_EnableOverDrive>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005d10:	f000 fe78 	bl	8006a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d14:	230f      	movs	r3, #15
 8005d16:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d18:	2302      	movs	r3, #2
 8005d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005d20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d2a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005d2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d30:	2105      	movs	r1, #5
 8005d32:	4618      	mov	r0, r3
 8005d34:	f005 fe9a 	bl	800ba6c <HAL_RCC_ClockConfig>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005d3e:	f000 fe61 	bl	8006a04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005d42:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005d46:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d50:	f107 030c 	add.w	r3, r7, #12
 8005d54:	4618      	mov	r0, r3
 8005d56:	f006 f879 	bl	800be4c <HAL_RCCEx_PeriphCLKConfig>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005d60:	f000 fe50 	bl	8006a04 <Error_Handler>
  }
}
 8005d64:	bf00      	nop
 8005d66:	3790      	adds	r7, #144	; 0x90
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	40007000 	.word	0x40007000

08005d74 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	609a      	str	r2, [r3, #8]
 8005d84:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005d86:	4b7c      	ldr	r3, [pc, #496]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005d88:	4a7c      	ldr	r2, [pc, #496]	; (8005f7c <MX_ADC2_Init+0x208>)
 8005d8a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005d8c:	4b7a      	ldr	r3, [pc, #488]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005d8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d92:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005d94:	4b78      	ldr	r3, [pc, #480]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005d9a:	4b77      	ldr	r3, [pc, #476]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005da0:	4b75      	ldr	r3, [pc, #468]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005da6:	4b74      	ldr	r3, [pc, #464]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005dae:	4b72      	ldr	r3, [pc, #456]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005db4:	4b70      	ldr	r3, [pc, #448]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005db6:	4a72      	ldr	r2, [pc, #456]	; (8005f80 <MX_ADC2_Init+0x20c>)
 8005db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005dba:	4b6f      	ldr	r3, [pc, #444]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005dc0:	4b6d      	ldr	r3, [pc, #436]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005dc2:	220e      	movs	r2, #14
 8005dc4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005dc6:	4b6c      	ldr	r3, [pc, #432]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005dce:	4b6a      	ldr	r3, [pc, #424]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005dd4:	4868      	ldr	r0, [pc, #416]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005dd6:	f003 fbe1 	bl	800959c <HAL_ADC_Init>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005de0:	f000 fe10 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005de4:	230a      	movs	r3, #10
 8005de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005de8:	2301      	movs	r3, #1
 8005dea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005dec:	2306      	movs	r3, #6
 8005dee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005df0:	463b      	mov	r3, r7
 8005df2:	4619      	mov	r1, r3
 8005df4:	4860      	ldr	r0, [pc, #384]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005df6:	f003 fd25 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005e00:	f000 fe00 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005e04:	230b      	movs	r3, #11
 8005e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4859      	ldr	r0, [pc, #356]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005e12:	f003 fd17 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005e1c:	f000 fdf2 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005e20:	230c      	movs	r3, #12
 8005e22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005e24:	2303      	movs	r3, #3
 8005e26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e28:	463b      	mov	r3, r7
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4852      	ldr	r0, [pc, #328]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005e2e:	f003 fd09 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005e38:	f000 fde4 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005e3c:	230d      	movs	r3, #13
 8005e3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005e40:	2304      	movs	r3, #4
 8005e42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e44:	463b      	mov	r3, r7
 8005e46:	4619      	mov	r1, r3
 8005e48:	484b      	ldr	r0, [pc, #300]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005e4a:	f003 fcfb 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005e54:	f000 fdd6 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005e5c:	2305      	movs	r3, #5
 8005e5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e60:	463b      	mov	r3, r7
 8005e62:	4619      	mov	r1, r3
 8005e64:	4844      	ldr	r0, [pc, #272]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005e66:	f003 fced 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005e70:	f000 fdc8 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005e74:	2301      	movs	r3, #1
 8005e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005e78:	2306      	movs	r3, #6
 8005e7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	4619      	mov	r1, r3
 8005e80:	483d      	ldr	r0, [pc, #244]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005e82:	f003 fcdf 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005e8c:	f000 fdba 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005e90:	2302      	movs	r3, #2
 8005e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005e94:	2307      	movs	r3, #7
 8005e96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e98:	463b      	mov	r3, r7
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4836      	ldr	r0, [pc, #216]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005e9e:	f003 fcd1 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005ea8:	f000 fdac 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005eac:	2303      	movs	r3, #3
 8005eae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	482f      	ldr	r0, [pc, #188]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005eba:	f003 fcc3 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005ec4:	f000 fd9e 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005ec8:	2304      	movs	r3, #4
 8005eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005ecc:	2309      	movs	r3, #9
 8005ece:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ed0:	463b      	mov	r3, r7
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	4828      	ldr	r0, [pc, #160]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005ed6:	f003 fcb5 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005ee0:	f000 fd90 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005ee4:	2305      	movs	r3, #5
 8005ee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005ee8:	230a      	movs	r3, #10
 8005eea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005eec:	463b      	mov	r3, r7
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4821      	ldr	r0, [pc, #132]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005ef2:	f003 fca7 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005efc:	f000 fd82 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005f00:	2306      	movs	r3, #6
 8005f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005f04:	230b      	movs	r3, #11
 8005f06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f08:	463b      	mov	r3, r7
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	481a      	ldr	r0, [pc, #104]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005f0e:	f003 fc99 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005f18:	f000 fd74 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005f1c:	2307      	movs	r3, #7
 8005f1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005f20:	230c      	movs	r3, #12
 8005f22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f24:	463b      	mov	r3, r7
 8005f26:	4619      	mov	r1, r3
 8005f28:	4813      	ldr	r0, [pc, #76]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005f2a:	f003 fc8b 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005f34:	f000 fd66 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005f38:	2308      	movs	r3, #8
 8005f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005f3c:	230d      	movs	r3, #13
 8005f3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f40:	463b      	mov	r3, r7
 8005f42:	4619      	mov	r1, r3
 8005f44:	480c      	ldr	r0, [pc, #48]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005f46:	f003 fc7d 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005f50:	f000 fd58 	bl	8006a04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005f54:	2309      	movs	r3, #9
 8005f56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005f58:	230e      	movs	r3, #14
 8005f5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4805      	ldr	r0, [pc, #20]	; (8005f78 <MX_ADC2_Init+0x204>)
 8005f62:	f003 fc6f 	bl	8009844 <HAL_ADC_ConfigChannel>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005f6c:	f000 fd4a 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20042824 	.word	0x20042824
 8005f7c:	40012100 	.word	0x40012100
 8005f80:	0f000001 	.word	0x0f000001

08005f84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005f88:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <MX_I2C1_Init+0x50>)
 8005f8a:	4a13      	ldr	r2, [pc, #76]	; (8005fd8 <MX_I2C1_Init+0x54>)
 8005f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005f8e:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <MX_I2C1_Init+0x50>)
 8005f90:	4a12      	ldr	r2, [pc, #72]	; (8005fdc <MX_I2C1_Init+0x58>)
 8005f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005f94:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <MX_I2C1_Init+0x50>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <MX_I2C1_Init+0x50>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fa0:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <MX_I2C1_Init+0x50>)
 8005fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <MX_I2C1_Init+0x50>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005fae:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <MX_I2C1_Init+0x50>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005fb4:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <MX_I2C1_Init+0x50>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <MX_I2C1_Init+0x50>)
 8005fbc:	2280      	movs	r2, #128	; 0x80
 8005fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fc0:	4804      	ldr	r0, [pc, #16]	; (8005fd4 <MX_I2C1_Init+0x50>)
 8005fc2:	f004 fd79 	bl	800aab8 <HAL_I2C_Init>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005fcc:	f000 fd1a 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005fd0:	bf00      	nop
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	2004286c 	.word	0x2004286c
 8005fd8:	40005400 	.word	0x40005400
 8005fdc:	000186a0 	.word	0x000186a0

08005fe0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005fe4:	4b12      	ldr	r3, [pc, #72]	; (8006030 <MX_I2C2_Init+0x50>)
 8005fe6:	4a13      	ldr	r2, [pc, #76]	; (8006034 <MX_I2C2_Init+0x54>)
 8005fe8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005fea:	4b11      	ldr	r3, [pc, #68]	; (8006030 <MX_I2C2_Init+0x50>)
 8005fec:	4a12      	ldr	r2, [pc, #72]	; (8006038 <MX_I2C2_Init+0x58>)
 8005fee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ff0:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <MX_I2C2_Init+0x50>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <MX_I2C2_Init+0x50>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ffc:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <MX_I2C2_Init+0x50>)
 8005ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006002:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <MX_I2C2_Init+0x50>)
 8006006:	2200      	movs	r2, #0
 8006008:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800600a:	4b09      	ldr	r3, [pc, #36]	; (8006030 <MX_I2C2_Init+0x50>)
 800600c:	2200      	movs	r2, #0
 800600e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <MX_I2C2_Init+0x50>)
 8006012:	2200      	movs	r2, #0
 8006014:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006016:	4b06      	ldr	r3, [pc, #24]	; (8006030 <MX_I2C2_Init+0x50>)
 8006018:	2280      	movs	r2, #128	; 0x80
 800601a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800601c:	4804      	ldr	r0, [pc, #16]	; (8006030 <MX_I2C2_Init+0x50>)
 800601e:	f004 fd4b 	bl	800aab8 <HAL_I2C_Init>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006028:	f000 fcec 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800602c:	bf00      	nop
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20042900 	.word	0x20042900
 8006034:	40005800 	.word	0x40005800
 8006038:	000186a0 	.word	0x000186a0

0800603c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <MX_SDIO_SD_Init+0x38>)
 8006042:	4a0d      	ldr	r2, [pc, #52]	; (8006078 <MX_SDIO_SD_Init+0x3c>)
 8006044:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006046:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <MX_SDIO_SD_Init+0x38>)
 8006048:	2200      	movs	r2, #0
 800604a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800604c:	4b09      	ldr	r3, [pc, #36]	; (8006074 <MX_SDIO_SD_Init+0x38>)
 800604e:	2200      	movs	r2, #0
 8006050:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <MX_SDIO_SD_Init+0x38>)
 8006054:	2200      	movs	r2, #0
 8006056:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <MX_SDIO_SD_Init+0x38>)
 800605a:	2200      	movs	r2, #0
 800605c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <MX_SDIO_SD_Init+0x38>)
 8006060:	2200      	movs	r2, #0
 8006062:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8006064:	4b03      	ldr	r3, [pc, #12]	; (8006074 <MX_SDIO_SD_Init+0x38>)
 8006066:	2202      	movs	r2, #2
 8006068:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800606a:	bf00      	nop
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	20042b00 	.word	0x20042b00
 8006078:	40012c00 	.word	0x40012c00

0800607c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006080:	4b17      	ldr	r3, [pc, #92]	; (80060e0 <MX_SPI2_Init+0x64>)
 8006082:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <MX_SPI2_Init+0x68>)
 8006084:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006086:	4b16      	ldr	r3, [pc, #88]	; (80060e0 <MX_SPI2_Init+0x64>)
 8006088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800608c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800608e:	4b14      	ldr	r3, [pc, #80]	; (80060e0 <MX_SPI2_Init+0x64>)
 8006090:	2200      	movs	r2, #0
 8006092:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006094:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <MX_SPI2_Init+0x64>)
 8006096:	2200      	movs	r2, #0
 8006098:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800609a:	4b11      	ldr	r3, [pc, #68]	; (80060e0 <MX_SPI2_Init+0x64>)
 800609c:	2202      	movs	r2, #2
 800609e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80060a0:	4b0f      	ldr	r3, [pc, #60]	; (80060e0 <MX_SPI2_Init+0x64>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80060a6:	4b0e      	ldr	r3, [pc, #56]	; (80060e0 <MX_SPI2_Init+0x64>)
 80060a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80060ae:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <MX_SPI2_Init+0x64>)
 80060b0:	2228      	movs	r2, #40	; 0x28
 80060b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <MX_SPI2_Init+0x64>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80060ba:	4b09      	ldr	r3, [pc, #36]	; (80060e0 <MX_SPI2_Init+0x64>)
 80060bc:	2200      	movs	r2, #0
 80060be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <MX_SPI2_Init+0x64>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80060c6:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <MX_SPI2_Init+0x64>)
 80060c8:	220a      	movs	r2, #10
 80060ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80060cc:	4804      	ldr	r0, [pc, #16]	; (80060e0 <MX_SPI2_Init+0x64>)
 80060ce:	f007 fe25 	bl	800dd1c <HAL_SPI_Init>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80060d8:	f000 fc94 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80060dc:	bf00      	nop
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	2004274c 	.word	0x2004274c
 80060e4:	40003800 	.word	0x40003800

080060e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b09a      	sub	sp, #104	; 0x68
 80060ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80060ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80060f2:	2224      	movs	r2, #36	; 0x24
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f00e ffad 	bl	8015056 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006106:	f107 0320 	add.w	r3, r7, #32
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	605a      	str	r2, [r3, #4]
 8006110:	609a      	str	r2, [r3, #8]
 8006112:	60da      	str	r2, [r3, #12]
 8006114:	611a      	str	r2, [r3, #16]
 8006116:	615a      	str	r2, [r3, #20]
 8006118:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800611a:	463b      	mov	r3, r7
 800611c:	2220      	movs	r2, #32
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f00e ff98 	bl	8015056 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006126:	4b42      	ldr	r3, [pc, #264]	; (8006230 <MX_TIM1_Init+0x148>)
 8006128:	4a42      	ldr	r2, [pc, #264]	; (8006234 <MX_TIM1_Init+0x14c>)
 800612a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800612c:	4b40      	ldr	r3, [pc, #256]	; (8006230 <MX_TIM1_Init+0x148>)
 800612e:	2200      	movs	r2, #0
 8006130:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006132:	4b3f      	ldr	r3, [pc, #252]	; (8006230 <MX_TIM1_Init+0x148>)
 8006134:	2200      	movs	r2, #0
 8006136:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006138:	4b3d      	ldr	r3, [pc, #244]	; (8006230 <MX_TIM1_Init+0x148>)
 800613a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800613e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006140:	4b3b      	ldr	r3, [pc, #236]	; (8006230 <MX_TIM1_Init+0x148>)
 8006142:	2200      	movs	r2, #0
 8006144:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006146:	4b3a      	ldr	r3, [pc, #232]	; (8006230 <MX_TIM1_Init+0x148>)
 8006148:	2200      	movs	r2, #0
 800614a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800614c:	4b38      	ldr	r3, [pc, #224]	; (8006230 <MX_TIM1_Init+0x148>)
 800614e:	2200      	movs	r2, #0
 8006150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006152:	4837      	ldr	r0, [pc, #220]	; (8006230 <MX_TIM1_Init+0x148>)
 8006154:	f008 fb85 	bl	800e862 <HAL_TIM_PWM_Init>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800615e:	f000 fc51 	bl	8006a04 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006162:	2303      	movs	r3, #3
 8006164:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006166:	2300      	movs	r3, #0
 8006168:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800616a:	2301      	movs	r3, #1
 800616c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800616e:	2300      	movs	r3, #0
 8006170:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006176:	2300      	movs	r3, #0
 8006178:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800617a:	2301      	movs	r3, #1
 800617c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800617e:	2300      	movs	r3, #0
 8006180:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006182:	2300      	movs	r3, #0
 8006184:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006186:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800618a:	4619      	mov	r1, r3
 800618c:	4828      	ldr	r0, [pc, #160]	; (8006230 <MX_TIM1_Init+0x148>)
 800618e:	f008 fbd1 	bl	800e934 <HAL_TIM_Encoder_Init>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006198:	f000 fc34 	bl	8006a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800619c:	2300      	movs	r3, #0
 800619e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80061a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80061a8:	4619      	mov	r1, r3
 80061aa:	4821      	ldr	r0, [pc, #132]	; (8006230 <MX_TIM1_Init+0x148>)
 80061ac:	f009 f8f8 	bl	800f3a0 <HAL_TIMEx_MasterConfigSynchronization>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80061b6:	f000 fc25 	bl	8006a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80061ba:	2360      	movs	r3, #96	; 0x60
 80061bc:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061c2:	2300      	movs	r3, #0
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80061c6:	2300      	movs	r3, #0
 80061c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061ca:	2300      	movs	r3, #0
 80061cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80061ce:	2300      	movs	r3, #0
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80061d2:	2300      	movs	r3, #0
 80061d4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80061d6:	f107 0320 	add.w	r3, r7, #32
 80061da:	2208      	movs	r2, #8
 80061dc:	4619      	mov	r1, r3
 80061de:	4814      	ldr	r0, [pc, #80]	; (8006230 <MX_TIM1_Init+0x148>)
 80061e0:	f008 fd7a 	bl	800ecd8 <HAL_TIM_PWM_ConfigChannel>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80061ea:	f000 fc0b 	bl	8006a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80061f2:	2300      	movs	r3, #0
 80061f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006206:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006208:	2300      	movs	r3, #0
 800620a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800620c:	463b      	mov	r3, r7
 800620e:	4619      	mov	r1, r3
 8006210:	4807      	ldr	r0, [pc, #28]	; (8006230 <MX_TIM1_Init+0x148>)
 8006212:	f009 f941 	bl	800f498 <HAL_TIMEx_ConfigBreakDeadTime>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800621c:	f000 fbf2 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006220:	4803      	ldr	r0, [pc, #12]	; (8006230 <MX_TIM1_Init+0x148>)
 8006222:	f000 ffdf 	bl	80071e4 <HAL_TIM_MspPostInit>

}
 8006226:	bf00      	nop
 8006228:	3768      	adds	r7, #104	; 0x68
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20042ac0 	.word	0x20042ac0
 8006234:	40010000 	.word	0x40010000

08006238 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800623e:	f107 0320 	add.w	r3, r7, #32
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006248:	1d3b      	adds	r3, r7, #4
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	605a      	str	r2, [r3, #4]
 8006250:	609a      	str	r2, [r3, #8]
 8006252:	60da      	str	r2, [r3, #12]
 8006254:	611a      	str	r2, [r3, #16]
 8006256:	615a      	str	r2, [r3, #20]
 8006258:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800625a:	4b27      	ldr	r3, [pc, #156]	; (80062f8 <MX_TIM3_Init+0xc0>)
 800625c:	4a27      	ldr	r2, [pc, #156]	; (80062fc <MX_TIM3_Init+0xc4>)
 800625e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006260:	4b25      	ldr	r3, [pc, #148]	; (80062f8 <MX_TIM3_Init+0xc0>)
 8006262:	2201      	movs	r2, #1
 8006264:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006266:	4b24      	ldr	r3, [pc, #144]	; (80062f8 <MX_TIM3_Init+0xc0>)
 8006268:	2200      	movs	r2, #0
 800626a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 800626c:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <MX_TIM3_Init+0xc0>)
 800626e:	f241 1293 	movw	r2, #4499	; 0x1193
 8006272:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006274:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <MX_TIM3_Init+0xc0>)
 8006276:	2200      	movs	r2, #0
 8006278:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800627a:	4b1f      	ldr	r3, [pc, #124]	; (80062f8 <MX_TIM3_Init+0xc0>)
 800627c:	2200      	movs	r2, #0
 800627e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006280:	481d      	ldr	r0, [pc, #116]	; (80062f8 <MX_TIM3_Init+0xc0>)
 8006282:	f008 faee 	bl	800e862 <HAL_TIM_PWM_Init>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800628c:	f000 fbba 	bl	8006a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006290:	2300      	movs	r3, #0
 8006292:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006294:	2300      	movs	r3, #0
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006298:	f107 0320 	add.w	r3, r7, #32
 800629c:	4619      	mov	r1, r3
 800629e:	4816      	ldr	r0, [pc, #88]	; (80062f8 <MX_TIM3_Init+0xc0>)
 80062a0:	f009 f87e 	bl	800f3a0 <HAL_TIMEx_MasterConfigSynchronization>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80062aa:	f000 fbab 	bl	8006a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062ae:	2360      	movs	r3, #96	; 0x60
 80062b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	2200      	movs	r2, #0
 80062c2:	4619      	mov	r1, r3
 80062c4:	480c      	ldr	r0, [pc, #48]	; (80062f8 <MX_TIM3_Init+0xc0>)
 80062c6:	f008 fd07 	bl	800ecd8 <HAL_TIM_PWM_ConfigChannel>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80062d0:	f000 fb98 	bl	8006a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80062d4:	1d3b      	adds	r3, r7, #4
 80062d6:	2204      	movs	r2, #4
 80062d8:	4619      	mov	r1, r3
 80062da:	4807      	ldr	r0, [pc, #28]	; (80062f8 <MX_TIM3_Init+0xc0>)
 80062dc:	f008 fcfc 	bl	800ecd8 <HAL_TIM_PWM_ConfigChannel>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80062e6:	f000 fb8d 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80062ea:	4803      	ldr	r0, [pc, #12]	; (80062f8 <MX_TIM3_Init+0xc0>)
 80062ec:	f000 ff7a 	bl	80071e4 <HAL_TIM_MspPostInit>

}
 80062f0:	bf00      	nop
 80062f2:	3728      	adds	r7, #40	; 0x28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20042958 	.word	0x20042958
 80062fc:	40000400 	.word	0x40000400

08006300 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08a      	sub	sp, #40	; 0x28
 8006304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006306:	f107 0320 	add.w	r3, r7, #32
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006310:	1d3b      	adds	r3, r7, #4
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	605a      	str	r2, [r3, #4]
 8006318:	609a      	str	r2, [r3, #8]
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	611a      	str	r2, [r3, #16]
 800631e:	615a      	str	r2, [r3, #20]
 8006320:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006322:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <MX_TIM4_Init+0xc0>)
 8006324:	4a27      	ldr	r2, [pc, #156]	; (80063c4 <MX_TIM4_Init+0xc4>)
 8006326:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006328:	4b25      	ldr	r3, [pc, #148]	; (80063c0 <MX_TIM4_Init+0xc0>)
 800632a:	2200      	movs	r2, #0
 800632c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800632e:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <MX_TIM4_Init+0xc0>)
 8006330:	2200      	movs	r2, #0
 8006332:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006334:	4b22      	ldr	r3, [pc, #136]	; (80063c0 <MX_TIM4_Init+0xc0>)
 8006336:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800633a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800633c:	4b20      	ldr	r3, [pc, #128]	; (80063c0 <MX_TIM4_Init+0xc0>)
 800633e:	2200      	movs	r2, #0
 8006340:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006342:	4b1f      	ldr	r3, [pc, #124]	; (80063c0 <MX_TIM4_Init+0xc0>)
 8006344:	2200      	movs	r2, #0
 8006346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006348:	481d      	ldr	r0, [pc, #116]	; (80063c0 <MX_TIM4_Init+0xc0>)
 800634a:	f008 fa8a 	bl	800e862 <HAL_TIM_PWM_Init>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006354:	f000 fb56 	bl	8006a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006358:	2300      	movs	r3, #0
 800635a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800635c:	2300      	movs	r3, #0
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006360:	f107 0320 	add.w	r3, r7, #32
 8006364:	4619      	mov	r1, r3
 8006366:	4816      	ldr	r0, [pc, #88]	; (80063c0 <MX_TIM4_Init+0xc0>)
 8006368:	f009 f81a 	bl	800f3a0 <HAL_TIMEx_MasterConfigSynchronization>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006372:	f000 fb47 	bl	8006a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006376:	2360      	movs	r3, #96	; 0x60
 8006378:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006382:	2300      	movs	r3, #0
 8006384:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006386:	1d3b      	adds	r3, r7, #4
 8006388:	2208      	movs	r2, #8
 800638a:	4619      	mov	r1, r3
 800638c:	480c      	ldr	r0, [pc, #48]	; (80063c0 <MX_TIM4_Init+0xc0>)
 800638e:	f008 fca3 	bl	800ecd8 <HAL_TIM_PWM_ConfigChannel>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006398:	f000 fb34 	bl	8006a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800639c:	1d3b      	adds	r3, r7, #4
 800639e:	220c      	movs	r2, #12
 80063a0:	4619      	mov	r1, r3
 80063a2:	4807      	ldr	r0, [pc, #28]	; (80063c0 <MX_TIM4_Init+0xc0>)
 80063a4:	f008 fc98 	bl	800ecd8 <HAL_TIM_PWM_ConfigChannel>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80063ae:	f000 fb29 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80063b2:	4803      	ldr	r0, [pc, #12]	; (80063c0 <MX_TIM4_Init+0xc0>)
 80063b4:	f000 ff16 	bl	80071e4 <HAL_TIM_MspPostInit>

}
 80063b8:	bf00      	nop
 80063ba:	3728      	adds	r7, #40	; 0x28
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	200427e4 	.word	0x200427e4
 80063c4:	40000800 	.word	0x40000800

080063c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063ce:	463b      	mov	r3, r7
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80063d6:	4b15      	ldr	r3, [pc, #84]	; (800642c <MX_TIM6_Init+0x64>)
 80063d8:	4a15      	ldr	r2, [pc, #84]	; (8006430 <MX_TIM6_Init+0x68>)
 80063da:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80063dc:	4b13      	ldr	r3, [pc, #76]	; (800642c <MX_TIM6_Init+0x64>)
 80063de:	2259      	movs	r2, #89	; 0x59
 80063e0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063e2:	4b12      	ldr	r3, [pc, #72]	; (800642c <MX_TIM6_Init+0x64>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80063e8:	4b10      	ldr	r3, [pc, #64]	; (800642c <MX_TIM6_Init+0x64>)
 80063ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80063ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063f0:	4b0e      	ldr	r3, [pc, #56]	; (800642c <MX_TIM6_Init+0x64>)
 80063f2:	2280      	movs	r2, #128	; 0x80
 80063f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80063f6:	480d      	ldr	r0, [pc, #52]	; (800642c <MX_TIM6_Init+0x64>)
 80063f8:	f008 f9e4 	bl	800e7c4 <HAL_TIM_Base_Init>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006402:	f000 faff 	bl	8006a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006406:	2300      	movs	r3, #0
 8006408:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800640a:	2300      	movs	r3, #0
 800640c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800640e:	463b      	mov	r3, r7
 8006410:	4619      	mov	r1, r3
 8006412:	4806      	ldr	r0, [pc, #24]	; (800642c <MX_TIM6_Init+0x64>)
 8006414:	f008 ffc4 	bl	800f3a0 <HAL_TIMEx_MasterConfigSynchronization>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800641e:	f000 faf1 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20042a80 	.word	0x20042a80
 8006430:	40001000 	.word	0x40001000

08006434 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800643a:	463b      	mov	r3, r7
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006442:	4b14      	ldr	r3, [pc, #80]	; (8006494 <MX_TIM7_Init+0x60>)
 8006444:	4a14      	ldr	r2, [pc, #80]	; (8006498 <MX_TIM7_Init+0x64>)
 8006446:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006448:	4b12      	ldr	r3, [pc, #72]	; (8006494 <MX_TIM7_Init+0x60>)
 800644a:	22b3      	movs	r2, #179	; 0xb3
 800644c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800644e:	4b11      	ldr	r3, [pc, #68]	; (8006494 <MX_TIM7_Init+0x60>)
 8006450:	2200      	movs	r2, #0
 8006452:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006454:	4b0f      	ldr	r3, [pc, #60]	; (8006494 <MX_TIM7_Init+0x60>)
 8006456:	2231      	movs	r2, #49	; 0x31
 8006458:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800645a:	4b0e      	ldr	r3, [pc, #56]	; (8006494 <MX_TIM7_Init+0x60>)
 800645c:	2280      	movs	r2, #128	; 0x80
 800645e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006460:	480c      	ldr	r0, [pc, #48]	; (8006494 <MX_TIM7_Init+0x60>)
 8006462:	f008 f9af 	bl	800e7c4 <HAL_TIM_Base_Init>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800646c:	f000 faca 	bl	8006a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006470:	2300      	movs	r3, #0
 8006472:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006474:	2300      	movs	r3, #0
 8006476:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006478:	463b      	mov	r3, r7
 800647a:	4619      	mov	r1, r3
 800647c:	4805      	ldr	r0, [pc, #20]	; (8006494 <MX_TIM7_Init+0x60>)
 800647e:	f008 ff8f 	bl	800f3a0 <HAL_TIMEx_MasterConfigSynchronization>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006488:	f000 fabc 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800648c:	bf00      	nop
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20042c24 	.word	0x20042c24
 8006498:	40001400 	.word	0x40001400

0800649c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08c      	sub	sp, #48	; 0x30
 80064a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80064a2:	f107 030c 	add.w	r3, r7, #12
 80064a6:	2224      	movs	r2, #36	; 0x24
 80064a8:	2100      	movs	r1, #0
 80064aa:	4618      	mov	r0, r3
 80064ac:	f00e fdd3 	bl	8015056 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064b0:	1d3b      	adds	r3, r7, #4
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80064b8:	4b22      	ldr	r3, [pc, #136]	; (8006544 <MX_TIM8_Init+0xa8>)
 80064ba:	4a23      	ldr	r2, [pc, #140]	; (8006548 <MX_TIM8_Init+0xac>)
 80064bc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80064be:	4b21      	ldr	r3, [pc, #132]	; (8006544 <MX_TIM8_Init+0xa8>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80064c4:	4b1f      	ldr	r3, [pc, #124]	; (8006544 <MX_TIM8_Init+0xa8>)
 80064c6:	2210      	movs	r2, #16
 80064c8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80064ca:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <MX_TIM8_Init+0xa8>)
 80064cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064d0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064d2:	4b1c      	ldr	r3, [pc, #112]	; (8006544 <MX_TIM8_Init+0xa8>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80064d8:	4b1a      	ldr	r3, [pc, #104]	; (8006544 <MX_TIM8_Init+0xa8>)
 80064da:	2200      	movs	r2, #0
 80064dc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064de:	4b19      	ldr	r3, [pc, #100]	; (8006544 <MX_TIM8_Init+0xa8>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80064e4:	2303      	movs	r3, #3
 80064e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80064ec:	2301      	movs	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80064f8:	2300      	movs	r3, #0
 80064fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80064fc:	2301      	movs	r3, #1
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006500:	2300      	movs	r3, #0
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006508:	f107 030c 	add.w	r3, r7, #12
 800650c:	4619      	mov	r1, r3
 800650e:	480d      	ldr	r0, [pc, #52]	; (8006544 <MX_TIM8_Init+0xa8>)
 8006510:	f008 fa10 	bl	800e934 <HAL_TIM_Encoder_Init>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800651a:	f000 fa73 	bl	8006a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006526:	1d3b      	adds	r3, r7, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4806      	ldr	r0, [pc, #24]	; (8006544 <MX_TIM8_Init+0xa8>)
 800652c:	f008 ff38 	bl	800f3a0 <HAL_TIMEx_MasterConfigSynchronization>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006536:	f000 fa65 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800653a:	bf00      	nop
 800653c:	3730      	adds	r7, #48	; 0x30
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	200427a4 	.word	0x200427a4
 8006548:	40010400 	.word	0x40010400

0800654c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	605a      	str	r2, [r3, #4]
 800655a:	609a      	str	r2, [r3, #8]
 800655c:	60da      	str	r2, [r3, #12]
 800655e:	611a      	str	r2, [r3, #16]
 8006560:	615a      	str	r2, [r3, #20]
 8006562:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006564:	4b1e      	ldr	r3, [pc, #120]	; (80065e0 <MX_TIM10_Init+0x94>)
 8006566:	4a1f      	ldr	r2, [pc, #124]	; (80065e4 <MX_TIM10_Init+0x98>)
 8006568:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 800656a:	4b1d      	ldr	r3, [pc, #116]	; (80065e0 <MX_TIM10_Init+0x94>)
 800656c:	2201      	movs	r2, #1
 800656e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006570:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <MX_TIM10_Init+0x94>)
 8006572:	2200      	movs	r2, #0
 8006574:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006576:	4b1a      	ldr	r3, [pc, #104]	; (80065e0 <MX_TIM10_Init+0x94>)
 8006578:	f242 3227 	movw	r2, #8999	; 0x2327
 800657c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800657e:	4b18      	ldr	r3, [pc, #96]	; (80065e0 <MX_TIM10_Init+0x94>)
 8006580:	2200      	movs	r2, #0
 8006582:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006584:	4b16      	ldr	r3, [pc, #88]	; (80065e0 <MX_TIM10_Init+0x94>)
 8006586:	2200      	movs	r2, #0
 8006588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800658a:	4815      	ldr	r0, [pc, #84]	; (80065e0 <MX_TIM10_Init+0x94>)
 800658c:	f008 f91a 	bl	800e7c4 <HAL_TIM_Base_Init>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006596:	f000 fa35 	bl	8006a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800659a:	4811      	ldr	r0, [pc, #68]	; (80065e0 <MX_TIM10_Init+0x94>)
 800659c:	f008 f961 	bl	800e862 <HAL_TIM_PWM_Init>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80065a6:	f000 fa2d 	bl	8006a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065aa:	2360      	movs	r3, #96	; 0x60
 80065ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065ba:	1d3b      	adds	r3, r7, #4
 80065bc:	2200      	movs	r2, #0
 80065be:	4619      	mov	r1, r3
 80065c0:	4807      	ldr	r0, [pc, #28]	; (80065e0 <MX_TIM10_Init+0x94>)
 80065c2:	f008 fb89 	bl	800ecd8 <HAL_TIM_PWM_ConfigChannel>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80065cc:	f000 fa1a 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80065d0:	4803      	ldr	r0, [pc, #12]	; (80065e0 <MX_TIM10_Init+0x94>)
 80065d2:	f000 fe07 	bl	80071e4 <HAL_TIM_MspPostInit>

}
 80065d6:	bf00      	nop
 80065d8:	3720      	adds	r7, #32
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	200428c0 	.word	0x200428c0
 80065e4:	40014400 	.word	0x40014400

080065e8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	609a      	str	r2, [r3, #8]
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	611a      	str	r2, [r3, #16]
 80065fc:	615a      	str	r2, [r3, #20]
 80065fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006600:	4b1e      	ldr	r3, [pc, #120]	; (800667c <MX_TIM11_Init+0x94>)
 8006602:	4a1f      	ldr	r2, [pc, #124]	; (8006680 <MX_TIM11_Init+0x98>)
 8006604:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006606:	4b1d      	ldr	r3, [pc, #116]	; (800667c <MX_TIM11_Init+0x94>)
 8006608:	2201      	movs	r2, #1
 800660a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800660c:	4b1b      	ldr	r3, [pc, #108]	; (800667c <MX_TIM11_Init+0x94>)
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <MX_TIM11_Init+0x94>)
 8006614:	f242 3227 	movw	r2, #8999	; 0x2327
 8006618:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800661a:	4b18      	ldr	r3, [pc, #96]	; (800667c <MX_TIM11_Init+0x94>)
 800661c:	2200      	movs	r2, #0
 800661e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006620:	4b16      	ldr	r3, [pc, #88]	; (800667c <MX_TIM11_Init+0x94>)
 8006622:	2200      	movs	r2, #0
 8006624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006626:	4815      	ldr	r0, [pc, #84]	; (800667c <MX_TIM11_Init+0x94>)
 8006628:	f008 f8cc 	bl	800e7c4 <HAL_TIM_Base_Init>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006632:	f000 f9e7 	bl	8006a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006636:	4811      	ldr	r0, [pc, #68]	; (800667c <MX_TIM11_Init+0x94>)
 8006638:	f008 f913 	bl	800e862 <HAL_TIM_PWM_Init>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006642:	f000 f9df 	bl	8006a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006646:	2360      	movs	r3, #96	; 0x60
 8006648:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006656:	1d3b      	adds	r3, r7, #4
 8006658:	2200      	movs	r2, #0
 800665a:	4619      	mov	r1, r3
 800665c:	4807      	ldr	r0, [pc, #28]	; (800667c <MX_TIM11_Init+0x94>)
 800665e:	f008 fb3b 	bl	800ecd8 <HAL_TIM_PWM_ConfigChannel>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006668:	f000 f9cc 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800666c:	4803      	ldr	r0, [pc, #12]	; (800667c <MX_TIM11_Init+0x94>)
 800666e:	f000 fdb9 	bl	80071e4 <HAL_TIM_MspPostInit>

}
 8006672:	bf00      	nop
 8006674:	3720      	adds	r7, #32
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	200429e0 	.word	0x200429e0
 8006680:	40014800 	.word	0x40014800

08006684 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006688:	4b0e      	ldr	r3, [pc, #56]	; (80066c4 <MX_TIM13_Init+0x40>)
 800668a:	4a0f      	ldr	r2, [pc, #60]	; (80066c8 <MX_TIM13_Init+0x44>)
 800668c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800668e:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <MX_TIM13_Init+0x40>)
 8006690:	2259      	movs	r2, #89	; 0x59
 8006692:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006694:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <MX_TIM13_Init+0x40>)
 8006696:	2200      	movs	r2, #0
 8006698:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <MX_TIM13_Init+0x40>)
 800669c:	f242 720f 	movw	r2, #9999	; 0x270f
 80066a0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066a2:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <MX_TIM13_Init+0x40>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066a8:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <MX_TIM13_Init+0x40>)
 80066aa:	2280      	movs	r2, #128	; 0x80
 80066ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80066ae:	4805      	ldr	r0, [pc, #20]	; (80066c4 <MX_TIM13_Init+0x40>)
 80066b0:	f008 f888 	bl	800e7c4 <HAL_TIM_Base_Init>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80066ba:	f000 f9a3 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80066be:	bf00      	nop
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	200429a0 	.word	0x200429a0
 80066c8:	40001c00 	.word	0x40001c00

080066cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80066d0:	4b11      	ldr	r3, [pc, #68]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066d2:	4a12      	ldr	r2, [pc, #72]	; (800671c <MX_USART2_UART_Init+0x50>)
 80066d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80066d6:	4b10      	ldr	r3, [pc, #64]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80066de:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80066ea:	4b0b      	ldr	r3, [pc, #44]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80066f0:	4b09      	ldr	r3, [pc, #36]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066f2:	220c      	movs	r2, #12
 80066f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066f6:	4b08      	ldr	r3, [pc, #32]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 80066fe:	2200      	movs	r2, #0
 8006700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006702:	4805      	ldr	r0, [pc, #20]	; (8006718 <MX_USART2_UART_Init+0x4c>)
 8006704:	f008 ff2e 	bl	800f564 <HAL_UART_Init>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800670e:	f000 f979 	bl	8006a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006712:	bf00      	nop
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20042b84 	.word	0x20042b84
 800671c:	40004400 	.word	0x40004400

08006720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006726:	2300      	movs	r3, #0
 8006728:	607b      	str	r3, [r7, #4]
 800672a:	4b14      	ldr	r3, [pc, #80]	; (800677c <MX_DMA_Init+0x5c>)
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	4a13      	ldr	r2, [pc, #76]	; (800677c <MX_DMA_Init+0x5c>)
 8006730:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006734:	6313      	str	r3, [r2, #48]	; 0x30
 8006736:	4b11      	ldr	r3, [pc, #68]	; (800677c <MX_DMA_Init+0x5c>)
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800673e:	607b      	str	r3, [r7, #4]
 8006740:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006742:	2200      	movs	r2, #0
 8006744:	2100      	movs	r1, #0
 8006746:	203a      	movs	r0, #58	; 0x3a
 8006748:	f003 fc07 	bl	8009f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800674c:	203a      	movs	r0, #58	; 0x3a
 800674e:	f003 fc20 	bl	8009f92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006752:	2200      	movs	r2, #0
 8006754:	2100      	movs	r1, #0
 8006756:	203b      	movs	r0, #59	; 0x3b
 8006758:	f003 fbff 	bl	8009f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800675c:	203b      	movs	r0, #59	; 0x3b
 800675e:	f003 fc18 	bl	8009f92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	2045      	movs	r0, #69	; 0x45
 8006768:	f003 fbf7 	bl	8009f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800676c:	2045      	movs	r0, #69	; 0x45
 800676e:	f003 fc10 	bl	8009f92 <HAL_NVIC_EnableIRQ>

}
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40023800 	.word	0x40023800

08006780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08c      	sub	sp, #48	; 0x30
 8006784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006786:	f107 031c 	add.w	r3, r7, #28
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	605a      	str	r2, [r3, #4]
 8006790:	609a      	str	r2, [r3, #8]
 8006792:	60da      	str	r2, [r3, #12]
 8006794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006796:	2300      	movs	r3, #0
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	4b94      	ldr	r3, [pc, #592]	; (80069ec <MX_GPIO_Init+0x26c>)
 800679c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679e:	4a93      	ldr	r2, [pc, #588]	; (80069ec <MX_GPIO_Init+0x26c>)
 80067a0:	f043 0310 	orr.w	r3, r3, #16
 80067a4:	6313      	str	r3, [r2, #48]	; 0x30
 80067a6:	4b91      	ldr	r3, [pc, #580]	; (80069ec <MX_GPIO_Init+0x26c>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	f003 0310 	and.w	r3, r3, #16
 80067ae:	61bb      	str	r3, [r7, #24]
 80067b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	4b8d      	ldr	r3, [pc, #564]	; (80069ec <MX_GPIO_Init+0x26c>)
 80067b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ba:	4a8c      	ldr	r2, [pc, #560]	; (80069ec <MX_GPIO_Init+0x26c>)
 80067bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067c0:	6313      	str	r3, [r2, #48]	; 0x30
 80067c2:	4b8a      	ldr	r3, [pc, #552]	; (80069ec <MX_GPIO_Init+0x26c>)
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80067ce:	2300      	movs	r3, #0
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	4b86      	ldr	r3, [pc, #536]	; (80069ec <MX_GPIO_Init+0x26c>)
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	4a85      	ldr	r2, [pc, #532]	; (80069ec <MX_GPIO_Init+0x26c>)
 80067d8:	f043 0304 	orr.w	r3, r3, #4
 80067dc:	6313      	str	r3, [r2, #48]	; 0x30
 80067de:	4b83      	ldr	r3, [pc, #524]	; (80069ec <MX_GPIO_Init+0x26c>)
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	f003 0304 	and.w	r3, r3, #4
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	4b7f      	ldr	r3, [pc, #508]	; (80069ec <MX_GPIO_Init+0x26c>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	4a7e      	ldr	r2, [pc, #504]	; (80069ec <MX_GPIO_Init+0x26c>)
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	6313      	str	r3, [r2, #48]	; 0x30
 80067fa:	4b7c      	ldr	r3, [pc, #496]	; (80069ec <MX_GPIO_Init+0x26c>)
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006806:	2300      	movs	r3, #0
 8006808:	60bb      	str	r3, [r7, #8]
 800680a:	4b78      	ldr	r3, [pc, #480]	; (80069ec <MX_GPIO_Init+0x26c>)
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	4a77      	ldr	r2, [pc, #476]	; (80069ec <MX_GPIO_Init+0x26c>)
 8006810:	f043 0302 	orr.w	r3, r3, #2
 8006814:	6313      	str	r3, [r2, #48]	; 0x30
 8006816:	4b75      	ldr	r3, [pc, #468]	; (80069ec <MX_GPIO_Init+0x26c>)
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	60bb      	str	r3, [r7, #8]
 8006820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006822:	2300      	movs	r3, #0
 8006824:	607b      	str	r3, [r7, #4]
 8006826:	4b71      	ldr	r3, [pc, #452]	; (80069ec <MX_GPIO_Init+0x26c>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	4a70      	ldr	r2, [pc, #448]	; (80069ec <MX_GPIO_Init+0x26c>)
 800682c:	f043 0308 	orr.w	r3, r3, #8
 8006830:	6313      	str	r3, [r2, #48]	; 0x30
 8006832:	4b6e      	ldr	r3, [pc, #440]	; (80069ec <MX_GPIO_Init+0x26c>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	607b      	str	r3, [r7, #4]
 800683c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800683e:	2200      	movs	r2, #0
 8006840:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006844:	486a      	ldr	r0, [pc, #424]	; (80069f0 <MX_GPIO_Init+0x270>)
 8006846:	f004 f91d 	bl	800aa84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800684a:	2200      	movs	r2, #0
 800684c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006850:	4868      	ldr	r0, [pc, #416]	; (80069f4 <MX_GPIO_Init+0x274>)
 8006852:	f004 f917 	bl	800aa84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006856:	2200      	movs	r2, #0
 8006858:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800685c:	4866      	ldr	r0, [pc, #408]	; (80069f8 <MX_GPIO_Init+0x278>)
 800685e:	f004 f911 	bl	800aa84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006862:	2200      	movs	r2, #0
 8006864:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006868:	4864      	ldr	r0, [pc, #400]	; (80069fc <MX_GPIO_Init+0x27c>)
 800686a:	f004 f90b 	bl	800aa84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800686e:	2304      	movs	r3, #4
 8006870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006872:	2300      	movs	r3, #0
 8006874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006876:	2300      	movs	r3, #0
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800687a:	f107 031c 	add.w	r3, r7, #28
 800687e:	4619      	mov	r1, r3
 8006880:	485b      	ldr	r0, [pc, #364]	; (80069f0 <MX_GPIO_Init+0x270>)
 8006882:	f003 ff3d 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006886:	230f      	movs	r3, #15
 8006888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800688a:	2303      	movs	r3, #3
 800688c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800688e:	2300      	movs	r3, #0
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006892:	f107 031c 	add.w	r3, r7, #28
 8006896:	4619      	mov	r1, r3
 8006898:	4859      	ldr	r0, [pc, #356]	; (8006a00 <MX_GPIO_Init+0x280>)
 800689a:	f003 ff31 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800689e:	23e1      	movs	r3, #225	; 0xe1
 80068a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068a2:	2303      	movs	r3, #3
 80068a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068aa:	f107 031c 	add.w	r3, r7, #28
 80068ae:	4619      	mov	r1, r3
 80068b0:	4852      	ldr	r0, [pc, #328]	; (80069fc <MX_GPIO_Init+0x27c>)
 80068b2:	f003 ff25 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80068b6:	2303      	movs	r3, #3
 80068b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068ba:	2303      	movs	r3, #3
 80068bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068c2:	f107 031c 	add.w	r3, r7, #28
 80068c6:	4619      	mov	r1, r3
 80068c8:	484a      	ldr	r0, [pc, #296]	; (80069f4 <MX_GPIO_Init+0x274>)
 80068ca:	f003 ff19 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068ce:	2304      	movs	r3, #4
 80068d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068d2:	2300      	movs	r3, #0
 80068d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068d6:	2301      	movs	r3, #1
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068da:	f107 031c 	add.w	r3, r7, #28
 80068de:	4619      	mov	r1, r3
 80068e0:	4844      	ldr	r0, [pc, #272]	; (80069f4 <MX_GPIO_Init+0x274>)
 80068e2:	f003 ff0d 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80068e6:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80068ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068ec:	2300      	movs	r3, #0
 80068ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068f0:	2301      	movs	r3, #1
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068f4:	f107 031c 	add.w	r3, r7, #28
 80068f8:	4619      	mov	r1, r3
 80068fa:	483d      	ldr	r0, [pc, #244]	; (80069f0 <MX_GPIO_Init+0x270>)
 80068fc:	f003 ff00 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006900:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006906:	2301      	movs	r3, #1
 8006908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690a:	2300      	movs	r3, #0
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800690e:	2300      	movs	r3, #0
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006912:	f107 031c 	add.w	r3, r7, #28
 8006916:	4619      	mov	r1, r3
 8006918:	4835      	ldr	r0, [pc, #212]	; (80069f0 <MX_GPIO_Init+0x270>)
 800691a:	f003 fef1 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800691e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006924:	2301      	movs	r3, #1
 8006926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006928:	2300      	movs	r3, #0
 800692a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800692c:	2300      	movs	r3, #0
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006930:	f107 031c 	add.w	r3, r7, #28
 8006934:	4619      	mov	r1, r3
 8006936:	482f      	ldr	r0, [pc, #188]	; (80069f4 <MX_GPIO_Init+0x274>)
 8006938:	f003 fee2 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800693c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006942:	2300      	movs	r3, #0
 8006944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006946:	2300      	movs	r3, #0
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800694a:	f107 031c 	add.w	r3, r7, #28
 800694e:	4619      	mov	r1, r3
 8006950:	4829      	ldr	r0, [pc, #164]	; (80069f8 <MX_GPIO_Init+0x278>)
 8006952:	f003 fed5 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800695a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800695c:	2301      	movs	r3, #1
 800695e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	2300      	movs	r3, #0
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006964:	2300      	movs	r3, #0
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006968:	f107 031c 	add.w	r3, r7, #28
 800696c:	4619      	mov	r1, r3
 800696e:	4822      	ldr	r0, [pc, #136]	; (80069f8 <MX_GPIO_Init+0x278>)
 8006970:	f003 fec6 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800697a:	2301      	movs	r3, #1
 800697c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800697e:	2301      	movs	r3, #1
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006982:	2300      	movs	r3, #0
 8006984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006986:	f107 031c 	add.w	r3, r7, #28
 800698a:	4619      	mov	r1, r3
 800698c:	481a      	ldr	r0, [pc, #104]	; (80069f8 <MX_GPIO_Init+0x278>)
 800698e:	f003 feb7 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006992:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006996:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006998:	2301      	movs	r3, #1
 800699a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699c:	2300      	movs	r3, #0
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069a0:	2300      	movs	r3, #0
 80069a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069a4:	f107 031c 	add.w	r3, r7, #28
 80069a8:	4619      	mov	r1, r3
 80069aa:	4814      	ldr	r0, [pc, #80]	; (80069fc <MX_GPIO_Init+0x27c>)
 80069ac:	f003 fea8 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80069b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069b6:	2300      	movs	r3, #0
 80069b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069be:	f107 031c 	add.w	r3, r7, #28
 80069c2:	4619      	mov	r1, r3
 80069c4:	480d      	ldr	r0, [pc, #52]	; (80069fc <MX_GPIO_Init+0x27c>)
 80069c6:	f003 fe9b 	bl	800a700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80069ca:	239b      	movs	r3, #155	; 0x9b
 80069cc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069ce:	2300      	movs	r3, #0
 80069d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069d2:	2301      	movs	r3, #1
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069d6:	f107 031c 	add.w	r3, r7, #28
 80069da:	4619      	mov	r1, r3
 80069dc:	4806      	ldr	r0, [pc, #24]	; (80069f8 <MX_GPIO_Init+0x278>)
 80069de:	f003 fe8f 	bl	800a700 <HAL_GPIO_Init>

}
 80069e2:	bf00      	nop
 80069e4:	3730      	adds	r7, #48	; 0x30
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40023800 	.word	0x40023800
 80069f0:	40021000 	.word	0x40021000
 80069f4:	40020400 	.word	0x40020400
 80069f8:	40020c00 	.word	0x40020c00
 80069fc:	40020000 	.word	0x40020000
 8006a00:	40020800 	.word	0x40020800

08006a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a0a:	e7fe      	b.n	8006a0a <Error_Handler+0x6>

08006a0c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006a10:	bf00      	nop
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]
 8006a26:	4b10      	ldr	r3, [pc, #64]	; (8006a68 <HAL_MspInit+0x4c>)
 8006a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2a:	4a0f      	ldr	r2, [pc, #60]	; (8006a68 <HAL_MspInit+0x4c>)
 8006a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a30:	6453      	str	r3, [r2, #68]	; 0x44
 8006a32:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <HAL_MspInit+0x4c>)
 8006a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a3e:	2300      	movs	r3, #0
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <HAL_MspInit+0x4c>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	4a08      	ldr	r2, [pc, #32]	; (8006a68 <HAL_MspInit+0x4c>)
 8006a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a4e:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <HAL_MspInit+0x4c>)
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	40023800 	.word	0x40023800

08006a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08c      	sub	sp, #48	; 0x30
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a74:	f107 031c 	add.w	r3, r7, #28
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	605a      	str	r2, [r3, #4]
 8006a7e:	609a      	str	r2, [r3, #8]
 8006a80:	60da      	str	r2, [r3, #12]
 8006a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a4a      	ldr	r2, [pc, #296]	; (8006bb4 <HAL_ADC_MspInit+0x148>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	f040 808e 	bne.w	8006bac <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006a90:	2300      	movs	r3, #0
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	4b48      	ldr	r3, [pc, #288]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a98:	4a47      	ldr	r2, [pc, #284]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8006aa0:	4b45      	ldr	r3, [pc, #276]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	4b41      	ldr	r3, [pc, #260]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	4a40      	ldr	r2, [pc, #256]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006ab6:	f043 0304 	orr.w	r3, r3, #4
 8006aba:	6313      	str	r3, [r2, #48]	; 0x30
 8006abc:	4b3e      	ldr	r3, [pc, #248]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ac8:	2300      	movs	r3, #0
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	4b3a      	ldr	r3, [pc, #232]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad0:	4a39      	ldr	r2, [pc, #228]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006ad2:	f043 0301 	orr.w	r3, r3, #1
 8006ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ad8:	4b37      	ldr	r3, [pc, #220]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	613b      	str	r3, [r7, #16]
 8006ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	4b33      	ldr	r3, [pc, #204]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aec:	4a32      	ldr	r2, [pc, #200]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006aee:	f043 0302 	orr.w	r3, r3, #2
 8006af2:	6313      	str	r3, [r2, #48]	; 0x30
 8006af4:	4b30      	ldr	r3, [pc, #192]	; (8006bb8 <HAL_ADC_MspInit+0x14c>)
 8006af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006b00:	230f      	movs	r3, #15
 8006b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b04:	2303      	movs	r3, #3
 8006b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b0c:	f107 031c 	add.w	r3, r7, #28
 8006b10:	4619      	mov	r1, r3
 8006b12:	482a      	ldr	r0, [pc, #168]	; (8006bbc <HAL_ADC_MspInit+0x150>)
 8006b14:	f003 fdf4 	bl	800a700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006b18:	23ff      	movs	r3, #255	; 0xff
 8006b1a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b24:	f107 031c 	add.w	r3, r7, #28
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4825      	ldr	r0, [pc, #148]	; (8006bc0 <HAL_ADC_MspInit+0x154>)
 8006b2c:	f003 fde8 	bl	800a700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b30:	2303      	movs	r3, #3
 8006b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b34:	2303      	movs	r3, #3
 8006b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b3c:	f107 031c 	add.w	r3, r7, #28
 8006b40:	4619      	mov	r1, r3
 8006b42:	4820      	ldr	r0, [pc, #128]	; (8006bc4 <HAL_ADC_MspInit+0x158>)
 8006b44:	f003 fddc 	bl	800a700 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006b48:	4b1f      	ldr	r3, [pc, #124]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006b4a:	4a20      	ldr	r2, [pc, #128]	; (8006bcc <HAL_ADC_MspInit+0x160>)
 8006b4c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006b4e:	4b1e      	ldr	r3, [pc, #120]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006b50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b54:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b56:	4b1c      	ldr	r3, [pc, #112]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b5c:	4b1a      	ldr	r3, [pc, #104]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006b62:	4b19      	ldr	r3, [pc, #100]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b68:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006b6a:	4b17      	ldr	r3, [pc, #92]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b70:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006b72:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b78:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006b7a:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b80:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006b82:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006b84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b88:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b8a:	4b0f      	ldr	r3, [pc, #60]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006b90:	480d      	ldr	r0, [pc, #52]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006b92:	f003 fa19 	bl	8009fc8 <HAL_DMA_Init>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006b9c:	f7ff ff32 	bl	8006a04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a09      	ldr	r2, [pc, #36]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8006ba6:	4a08      	ldr	r2, [pc, #32]	; (8006bc8 <HAL_ADC_MspInit+0x15c>)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006bac:	bf00      	nop
 8006bae:	3730      	adds	r7, #48	; 0x30
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40012100 	.word	0x40012100
 8006bb8:	40023800 	.word	0x40023800
 8006bbc:	40020800 	.word	0x40020800
 8006bc0:	40020000 	.word	0x40020000
 8006bc4:	40020400 	.word	0x40020400
 8006bc8:	20042bc4 	.word	0x20042bc4
 8006bcc:	40026440 	.word	0x40026440

08006bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08c      	sub	sp, #48	; 0x30
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd8:	f107 031c 	add.w	r3, r7, #28
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	605a      	str	r2, [r3, #4]
 8006be2:	609a      	str	r2, [r3, #8]
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a32      	ldr	r2, [pc, #200]	; (8006cb8 <HAL_I2C_MspInit+0xe8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d12c      	bne.n	8006c4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	4b31      	ldr	r3, [pc, #196]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfa:	4a30      	ldr	r2, [pc, #192]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006bfc:	f043 0302 	orr.w	r3, r3, #2
 8006c00:	6313      	str	r3, [r2, #48]	; 0x30
 8006c02:	4b2e      	ldr	r3, [pc, #184]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	61bb      	str	r3, [r7, #24]
 8006c0c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c0e:	23c0      	movs	r3, #192	; 0xc0
 8006c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c12:	2312      	movs	r3, #18
 8006c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c16:	2301      	movs	r3, #1
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c1e:	2304      	movs	r3, #4
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c22:	f107 031c 	add.w	r3, r7, #28
 8006c26:	4619      	mov	r1, r3
 8006c28:	4825      	ldr	r0, [pc, #148]	; (8006cc0 <HAL_I2C_MspInit+0xf0>)
 8006c2a:	f003 fd69 	bl	800a700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	4b22      	ldr	r3, [pc, #136]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	4a21      	ldr	r2, [pc, #132]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c3e:	4b1f      	ldr	r3, [pc, #124]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006c4a:	e031      	b.n	8006cb0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a1c      	ldr	r2, [pc, #112]	; (8006cc4 <HAL_I2C_MspInit+0xf4>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d12c      	bne.n	8006cb0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c56:	2300      	movs	r3, #0
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	4b18      	ldr	r3, [pc, #96]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	4a17      	ldr	r2, [pc, #92]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006c60:	f043 0302 	orr.w	r3, r3, #2
 8006c64:	6313      	str	r3, [r2, #48]	; 0x30
 8006c66:	4b15      	ldr	r3, [pc, #84]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006c72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c78:	2312      	movs	r3, #18
 8006c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c80:	2303      	movs	r3, #3
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006c84:	2304      	movs	r3, #4
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c88:	f107 031c 	add.w	r3, r7, #28
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	480c      	ldr	r0, [pc, #48]	; (8006cc0 <HAL_I2C_MspInit+0xf0>)
 8006c90:	f003 fd36 	bl	800a700 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	4a07      	ldr	r2, [pc, #28]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006c9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <HAL_I2C_MspInit+0xec>)
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	68fb      	ldr	r3, [r7, #12]
}
 8006cb0:	bf00      	nop
 8006cb2:	3730      	adds	r7, #48	; 0x30
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40005400 	.word	0x40005400
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	40020400 	.word	0x40020400
 8006cc4:	40005800 	.word	0x40005800

08006cc8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08a      	sub	sp, #40	; 0x28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd0:	f107 0314 	add.w	r3, r7, #20
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	605a      	str	r2, [r3, #4]
 8006cda:	609a      	str	r2, [r3, #8]
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a69      	ldr	r2, [pc, #420]	; (8006e8c <HAL_SD_MspInit+0x1c4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	f040 80cb 	bne.w	8006e82 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006cec:	2300      	movs	r3, #0
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	4b67      	ldr	r3, [pc, #412]	; (8006e90 <HAL_SD_MspInit+0x1c8>)
 8006cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf4:	4a66      	ldr	r2, [pc, #408]	; (8006e90 <HAL_SD_MspInit+0x1c8>)
 8006cf6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8006cfc:	4b64      	ldr	r3, [pc, #400]	; (8006e90 <HAL_SD_MspInit+0x1c8>)
 8006cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	4b60      	ldr	r3, [pc, #384]	; (8006e90 <HAL_SD_MspInit+0x1c8>)
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	4a5f      	ldr	r2, [pc, #380]	; (8006e90 <HAL_SD_MspInit+0x1c8>)
 8006d12:	f043 0304 	orr.w	r3, r3, #4
 8006d16:	6313      	str	r3, [r2, #48]	; 0x30
 8006d18:	4b5d      	ldr	r3, [pc, #372]	; (8006e90 <HAL_SD_MspInit+0x1c8>)
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d24:	2300      	movs	r3, #0
 8006d26:	60bb      	str	r3, [r7, #8]
 8006d28:	4b59      	ldr	r3, [pc, #356]	; (8006e90 <HAL_SD_MspInit+0x1c8>)
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	4a58      	ldr	r2, [pc, #352]	; (8006e90 <HAL_SD_MspInit+0x1c8>)
 8006d2e:	f043 0308 	orr.w	r3, r3, #8
 8006d32:	6313      	str	r3, [r2, #48]	; 0x30
 8006d34:	4b56      	ldr	r3, [pc, #344]	; (8006e90 <HAL_SD_MspInit+0x1c8>)
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d40:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006d44:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d46:	2302      	movs	r3, #2
 8006d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006d52:	230c      	movs	r3, #12
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d56:	f107 0314 	add.w	r3, r7, #20
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	484d      	ldr	r0, [pc, #308]	; (8006e94 <HAL_SD_MspInit+0x1cc>)
 8006d5e:	f003 fccf 	bl	800a700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d62:	2304      	movs	r3, #4
 8006d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d66:	2302      	movs	r3, #2
 8006d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006d72:	230c      	movs	r3, #12
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d76:	f107 0314 	add.w	r3, r7, #20
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4846      	ldr	r0, [pc, #280]	; (8006e98 <HAL_SD_MspInit+0x1d0>)
 8006d7e:	f003 fcbf 	bl	800a700 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006d82:	4b46      	ldr	r3, [pc, #280]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006d84:	4a46      	ldr	r2, [pc, #280]	; (8006ea0 <HAL_SD_MspInit+0x1d8>)
 8006d86:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006d88:	4b44      	ldr	r3, [pc, #272]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d8e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d90:	4b42      	ldr	r3, [pc, #264]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d96:	4b41      	ldr	r3, [pc, #260]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d9c:	4b3f      	ldr	r3, [pc, #252]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006da2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006da4:	4b3d      	ldr	r3, [pc, #244]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006da6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006daa:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006dac:	4b3b      	ldr	r3, [pc, #236]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006dae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006db2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006db4:	4b39      	ldr	r3, [pc, #228]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006db6:	2220      	movs	r2, #32
 8006db8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006dba:	4b38      	ldr	r3, [pc, #224]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006dbc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006dc0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006dc2:	4b36      	ldr	r3, [pc, #216]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006dc8:	4b34      	ldr	r3, [pc, #208]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006dca:	2203      	movs	r2, #3
 8006dcc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006dce:	4b33      	ldr	r3, [pc, #204]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006dd0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006dd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006dd6:	4b31      	ldr	r3, [pc, #196]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006dd8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006ddc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006dde:	482f      	ldr	r0, [pc, #188]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006de0:	f003 f8f2 	bl	8009fc8 <HAL_DMA_Init>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006dea:	f7ff fe0b 	bl	8006a04 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a2a      	ldr	r2, [pc, #168]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006df2:	641a      	str	r2, [r3, #64]	; 0x40
 8006df4:	4a29      	ldr	r2, [pc, #164]	; (8006e9c <HAL_SD_MspInit+0x1d4>)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006dfa:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006dfc:	4a2a      	ldr	r2, [pc, #168]	; (8006ea8 <HAL_SD_MspInit+0x1e0>)
 8006dfe:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006e00:	4b28      	ldr	r3, [pc, #160]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e06:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e08:	4b26      	ldr	r3, [pc, #152]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e0a:	2240      	movs	r2, #64	; 0x40
 8006e0c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e0e:	4b25      	ldr	r3, [pc, #148]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e14:	4b23      	ldr	r3, [pc, #140]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e1a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e1c:	4b21      	ldr	r3, [pc, #132]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e22:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e24:	4b1f      	ldr	r3, [pc, #124]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e2a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006e2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e2e:	2220      	movs	r2, #32
 8006e30:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e32:	4b1c      	ldr	r3, [pc, #112]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e38:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e3c:	2204      	movs	r2, #4
 8006e3e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e40:	4b18      	ldr	r3, [pc, #96]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e42:	2203      	movs	r2, #3
 8006e44:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006e46:	4b17      	ldr	r3, [pc, #92]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006e4e:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e54:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006e56:	4813      	ldr	r0, [pc, #76]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e58:	f003 f8b6 	bl	8009fc8 <HAL_DMA_Init>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006e62:	f7ff fdcf 	bl	8006a04 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a0e      	ldr	r2, [pc, #56]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8006e6c:	4a0d      	ldr	r2, [pc, #52]	; (8006ea4 <HAL_SD_MspInit+0x1dc>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006e72:	2200      	movs	r2, #0
 8006e74:	2100      	movs	r1, #0
 8006e76:	2031      	movs	r0, #49	; 0x31
 8006e78:	f003 f86f 	bl	8009f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006e7c:	2031      	movs	r0, #49	; 0x31
 8006e7e:	f003 f888 	bl	8009f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006e82:	bf00      	nop
 8006e84:	3728      	adds	r7, #40	; 0x28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40023800 	.word	0x40023800
 8006e94:	40020800 	.word	0x40020800
 8006e98:	40020c00 	.word	0x40020c00
 8006e9c:	200426ec 	.word	0x200426ec
 8006ea0:	40026458 	.word	0x40026458
 8006ea4:	20042a20 	.word	0x20042a20
 8006ea8:	400264a0 	.word	0x400264a0

08006eac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08a      	sub	sp, #40	; 0x28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eb4:	f107 0314 	add.w	r3, r7, #20
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	605a      	str	r2, [r3, #4]
 8006ebe:	609a      	str	r2, [r3, #8]
 8006ec0:	60da      	str	r2, [r3, #12]
 8006ec2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a19      	ldr	r2, [pc, #100]	; (8006f30 <HAL_SPI_MspInit+0x84>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d12c      	bne.n	8006f28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	4b18      	ldr	r3, [pc, #96]	; (8006f34 <HAL_SPI_MspInit+0x88>)
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	4a17      	ldr	r2, [pc, #92]	; (8006f34 <HAL_SPI_MspInit+0x88>)
 8006ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006edc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ede:	4b15      	ldr	r3, [pc, #84]	; (8006f34 <HAL_SPI_MspInit+0x88>)
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	4b11      	ldr	r3, [pc, #68]	; (8006f34 <HAL_SPI_MspInit+0x88>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	4a10      	ldr	r2, [pc, #64]	; (8006f34 <HAL_SPI_MspInit+0x88>)
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8006efa:	4b0e      	ldr	r3, [pc, #56]	; (8006f34 <HAL_SPI_MspInit+0x88>)
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006f06:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f14:	2303      	movs	r3, #3
 8006f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006f18:	2305      	movs	r3, #5
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f1c:	f107 0314 	add.w	r3, r7, #20
 8006f20:	4619      	mov	r1, r3
 8006f22:	4805      	ldr	r0, [pc, #20]	; (8006f38 <HAL_SPI_MspInit+0x8c>)
 8006f24:	f003 fbec 	bl	800a700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006f28:	bf00      	nop
 8006f2a:	3728      	adds	r7, #40	; 0x28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	40003800 	.word	0x40003800
 8006f34:	40023800 	.word	0x40023800
 8006f38:	40020400 	.word	0x40020400

08006f3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08c      	sub	sp, #48	; 0x30
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f44:	f107 031c 	add.w	r3, r7, #28
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	605a      	str	r2, [r3, #4]
 8006f4e:	609a      	str	r2, [r3, #8]
 8006f50:	60da      	str	r2, [r3, #12]
 8006f52:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a2d      	ldr	r2, [pc, #180]	; (8007010 <HAL_TIM_PWM_MspInit+0xd4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d12d      	bne.n	8006fba <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	4b2c      	ldr	r3, [pc, #176]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	4a2b      	ldr	r2, [pc, #172]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f6e:	4b29      	ldr	r3, [pc, #164]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	4b25      	ldr	r3, [pc, #148]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	4a24      	ldr	r2, [pc, #144]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f84:	f043 0310 	orr.w	r3, r3, #16
 8006f88:	6313      	str	r3, [r2, #48]	; 0x30
 8006f8a:	4b22      	ldr	r3, [pc, #136]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	f003 0310 	and.w	r3, r3, #16
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006f96:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006fac:	f107 031c 	add.w	r3, r7, #28
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4819      	ldr	r0, [pc, #100]	; (8007018 <HAL_TIM_PWM_MspInit+0xdc>)
 8006fb4:	f003 fba4 	bl	800a700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006fb8:	e026      	b.n	8007008 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a17      	ldr	r2, [pc, #92]	; (800701c <HAL_TIM_PWM_MspInit+0xe0>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d10e      	bne.n	8006fe2 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	613b      	str	r3, [r7, #16]
 8006fc8:	4b12      	ldr	r3, [pc, #72]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	4a11      	ldr	r2, [pc, #68]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fce:	f043 0302 	orr.w	r3, r3, #2
 8006fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8006fd4:	4b0f      	ldr	r3, [pc, #60]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	613b      	str	r3, [r7, #16]
 8006fde:	693b      	ldr	r3, [r7, #16]
}
 8006fe0:	e012      	b.n	8007008 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a0e      	ldr	r2, [pc, #56]	; (8007020 <HAL_TIM_PWM_MspInit+0xe4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d10d      	bne.n	8007008 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	4b08      	ldr	r3, [pc, #32]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	4a07      	ldr	r2, [pc, #28]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006ff6:	f043 0304 	orr.w	r3, r3, #4
 8006ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8006ffc:	4b05      	ldr	r3, [pc, #20]	; (8007014 <HAL_TIM_PWM_MspInit+0xd8>)
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	68fb      	ldr	r3, [r7, #12]
}
 8007008:	bf00      	nop
 800700a:	3730      	adds	r7, #48	; 0x30
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	40010000 	.word	0x40010000
 8007014:	40023800 	.word	0x40023800
 8007018:	40021000 	.word	0x40021000
 800701c:	40000400 	.word	0x40000400
 8007020:	40000800 	.word	0x40000800

08007024 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a3e      	ldr	r2, [pc, #248]	; (800712c <HAL_TIM_Base_MspInit+0x108>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d116      	bne.n	8007064 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007036:	2300      	movs	r3, #0
 8007038:	61fb      	str	r3, [r7, #28]
 800703a:	4b3d      	ldr	r3, [pc, #244]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	4a3c      	ldr	r2, [pc, #240]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 8007040:	f043 0310 	orr.w	r3, r3, #16
 8007044:	6413      	str	r3, [r2, #64]	; 0x40
 8007046:	4b3a      	ldr	r3, [pc, #232]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	f003 0310 	and.w	r3, r3, #16
 800704e:	61fb      	str	r3, [r7, #28]
 8007050:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007052:	2200      	movs	r2, #0
 8007054:	2101      	movs	r1, #1
 8007056:	2036      	movs	r0, #54	; 0x36
 8007058:	f002 ff7f 	bl	8009f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800705c:	2036      	movs	r0, #54	; 0x36
 800705e:	f002 ff98 	bl	8009f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007062:	e05e      	b.n	8007122 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a32      	ldr	r2, [pc, #200]	; (8007134 <HAL_TIM_Base_MspInit+0x110>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d116      	bne.n	800709c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800706e:	2300      	movs	r3, #0
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	4b2f      	ldr	r3, [pc, #188]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	4a2e      	ldr	r2, [pc, #184]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 8007078:	f043 0320 	orr.w	r3, r3, #32
 800707c:	6413      	str	r3, [r2, #64]	; 0x40
 800707e:	4b2c      	ldr	r3, [pc, #176]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800708a:	2200      	movs	r2, #0
 800708c:	2100      	movs	r1, #0
 800708e:	2037      	movs	r0, #55	; 0x37
 8007090:	f002 ff63 	bl	8009f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007094:	2037      	movs	r0, #55	; 0x37
 8007096:	f002 ff7c 	bl	8009f92 <HAL_NVIC_EnableIRQ>
}
 800709a:	e042      	b.n	8007122 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a25      	ldr	r2, [pc, #148]	; (8007138 <HAL_TIM_Base_MspInit+0x114>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d10e      	bne.n	80070c4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]
 80070aa:	4b21      	ldr	r3, [pc, #132]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 80070ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ae:	4a20      	ldr	r2, [pc, #128]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 80070b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b4:	6453      	str	r3, [r2, #68]	; 0x44
 80070b6:	4b1e      	ldr	r3, [pc, #120]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	697b      	ldr	r3, [r7, #20]
}
 80070c2:	e02e      	b.n	8007122 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1c      	ldr	r2, [pc, #112]	; (800713c <HAL_TIM_Base_MspInit+0x118>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d10e      	bne.n	80070ec <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80070ce:	2300      	movs	r3, #0
 80070d0:	613b      	str	r3, [r7, #16]
 80070d2:	4b17      	ldr	r3, [pc, #92]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 80070d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d6:	4a16      	ldr	r2, [pc, #88]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 80070d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070dc:	6453      	str	r3, [r2, #68]	; 0x44
 80070de:	4b14      	ldr	r3, [pc, #80]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 80070e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070e6:	613b      	str	r3, [r7, #16]
 80070e8:	693b      	ldr	r3, [r7, #16]
}
 80070ea:	e01a      	b.n	8007122 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a13      	ldr	r2, [pc, #76]	; (8007140 <HAL_TIM_Base_MspInit+0x11c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d115      	bne.n	8007122 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	4b0d      	ldr	r3, [pc, #52]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 80070fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fe:	4a0c      	ldr	r2, [pc, #48]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 8007100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007104:	6413      	str	r3, [r2, #64]	; 0x40
 8007106:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <HAL_TIM_Base_MspInit+0x10c>)
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007112:	2200      	movs	r2, #0
 8007114:	2100      	movs	r1, #0
 8007116:	202c      	movs	r0, #44	; 0x2c
 8007118:	f002 ff1f 	bl	8009f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800711c:	202c      	movs	r0, #44	; 0x2c
 800711e:	f002 ff38 	bl	8009f92 <HAL_NVIC_EnableIRQ>
}
 8007122:	bf00      	nop
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40001000 	.word	0x40001000
 8007130:	40023800 	.word	0x40023800
 8007134:	40001400 	.word	0x40001400
 8007138:	40014400 	.word	0x40014400
 800713c:	40014800 	.word	0x40014800
 8007140:	40001c00 	.word	0x40001c00

08007144 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08a      	sub	sp, #40	; 0x28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800714c:	f107 0314 	add.w	r3, r7, #20
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	605a      	str	r2, [r3, #4]
 8007156:	609a      	str	r2, [r3, #8]
 8007158:	60da      	str	r2, [r3, #12]
 800715a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a1d      	ldr	r2, [pc, #116]	; (80071d8 <HAL_TIM_Encoder_MspInit+0x94>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d133      	bne.n	80071ce <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007166:	2300      	movs	r3, #0
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	4b1c      	ldr	r3, [pc, #112]	; (80071dc <HAL_TIM_Encoder_MspInit+0x98>)
 800716c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716e:	4a1b      	ldr	r2, [pc, #108]	; (80071dc <HAL_TIM_Encoder_MspInit+0x98>)
 8007170:	f043 0302 	orr.w	r3, r3, #2
 8007174:	6453      	str	r3, [r2, #68]	; 0x44
 8007176:	4b19      	ldr	r3, [pc, #100]	; (80071dc <HAL_TIM_Encoder_MspInit+0x98>)
 8007178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	4b15      	ldr	r3, [pc, #84]	; (80071dc <HAL_TIM_Encoder_MspInit+0x98>)
 8007188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718a:	4a14      	ldr	r2, [pc, #80]	; (80071dc <HAL_TIM_Encoder_MspInit+0x98>)
 800718c:	f043 0304 	orr.w	r3, r3, #4
 8007190:	6313      	str	r3, [r2, #48]	; 0x30
 8007192:	4b12      	ldr	r3, [pc, #72]	; (80071dc <HAL_TIM_Encoder_MspInit+0x98>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	f003 0304 	and.w	r3, r3, #4
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800719e:	23c0      	movs	r3, #192	; 0xc0
 80071a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a2:	2302      	movs	r3, #2
 80071a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071aa:	2300      	movs	r3, #0
 80071ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80071ae:	2303      	movs	r3, #3
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071b2:	f107 0314 	add.w	r3, r7, #20
 80071b6:	4619      	mov	r1, r3
 80071b8:	4809      	ldr	r0, [pc, #36]	; (80071e0 <HAL_TIM_Encoder_MspInit+0x9c>)
 80071ba:	f003 faa1 	bl	800a700 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80071be:	2200      	movs	r2, #0
 80071c0:	2100      	movs	r1, #0
 80071c2:	202c      	movs	r0, #44	; 0x2c
 80071c4:	f002 fec9 	bl	8009f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80071c8:	202c      	movs	r0, #44	; 0x2c
 80071ca:	f002 fee2 	bl	8009f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80071ce:	bf00      	nop
 80071d0:	3728      	adds	r7, #40	; 0x28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40010400 	.word	0x40010400
 80071dc:	40023800 	.word	0x40023800
 80071e0:	40020800 	.word	0x40020800

080071e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08c      	sub	sp, #48	; 0x30
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071ec:	f107 031c 	add.w	r3, r7, #28
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	605a      	str	r2, [r3, #4]
 80071f6:	609a      	str	r2, [r3, #8]
 80071f8:	60da      	str	r2, [r3, #12]
 80071fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a5c      	ldr	r2, [pc, #368]	; (8007374 <HAL_TIM_MspPostInit+0x190>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d11f      	bne.n	8007246 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007206:	2300      	movs	r3, #0
 8007208:	61bb      	str	r3, [r7, #24]
 800720a:	4b5b      	ldr	r3, [pc, #364]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	4a5a      	ldr	r2, [pc, #360]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 8007210:	f043 0310 	orr.w	r3, r3, #16
 8007214:	6313      	str	r3, [r2, #48]	; 0x30
 8007216:	4b58      	ldr	r3, [pc, #352]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007228:	2302      	movs	r3, #2
 800722a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800722c:	2300      	movs	r3, #0
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007230:	2300      	movs	r3, #0
 8007232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007234:	2301      	movs	r3, #1
 8007236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007238:	f107 031c 	add.w	r3, r7, #28
 800723c:	4619      	mov	r1, r3
 800723e:	484f      	ldr	r0, [pc, #316]	; (800737c <HAL_TIM_MspPostInit+0x198>)
 8007240:	f003 fa5e 	bl	800a700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007244:	e091      	b.n	800736a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a4d      	ldr	r2, [pc, #308]	; (8007380 <HAL_TIM_MspPostInit+0x19c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d11e      	bne.n	800728e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007250:	2300      	movs	r3, #0
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	4b48      	ldr	r3, [pc, #288]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007258:	4a47      	ldr	r2, [pc, #284]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 800725a:	f043 0302 	orr.w	r3, r3, #2
 800725e:	6313      	str	r3, [r2, #48]	; 0x30
 8007260:	4b45      	ldr	r3, [pc, #276]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	617b      	str	r3, [r7, #20]
 800726a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800726c:	2330      	movs	r3, #48	; 0x30
 800726e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007270:	2302      	movs	r3, #2
 8007272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007274:	2300      	movs	r3, #0
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007278:	2300      	movs	r3, #0
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800727c:	2302      	movs	r3, #2
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007280:	f107 031c 	add.w	r3, r7, #28
 8007284:	4619      	mov	r1, r3
 8007286:	483f      	ldr	r0, [pc, #252]	; (8007384 <HAL_TIM_MspPostInit+0x1a0>)
 8007288:	f003 fa3a 	bl	800a700 <HAL_GPIO_Init>
}
 800728c:	e06d      	b.n	800736a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a3d      	ldr	r2, [pc, #244]	; (8007388 <HAL_TIM_MspPostInit+0x1a4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d11f      	bne.n	80072d8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007298:	2300      	movs	r3, #0
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	4b36      	ldr	r3, [pc, #216]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 800729e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a0:	4a35      	ldr	r2, [pc, #212]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 80072a2:	f043 0308 	orr.w	r3, r3, #8
 80072a6:	6313      	str	r3, [r2, #48]	; 0x30
 80072a8:	4b33      	ldr	r3, [pc, #204]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	f003 0308 	and.w	r3, r3, #8
 80072b0:	613b      	str	r3, [r7, #16]
 80072b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80072b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80072b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ba:	2302      	movs	r3, #2
 80072bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072be:	2300      	movs	r3, #0
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072c2:	2300      	movs	r3, #0
 80072c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80072c6:	2302      	movs	r3, #2
 80072c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072ca:	f107 031c 	add.w	r3, r7, #28
 80072ce:	4619      	mov	r1, r3
 80072d0:	482e      	ldr	r0, [pc, #184]	; (800738c <HAL_TIM_MspPostInit+0x1a8>)
 80072d2:	f003 fa15 	bl	800a700 <HAL_GPIO_Init>
}
 80072d6:	e048      	b.n	800736a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a2c      	ldr	r2, [pc, #176]	; (8007390 <HAL_TIM_MspPostInit+0x1ac>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d11f      	bne.n	8007322 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	4b24      	ldr	r3, [pc, #144]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 80072e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ea:	4a23      	ldr	r2, [pc, #140]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 80072ec:	f043 0302 	orr.w	r3, r3, #2
 80072f0:	6313      	str	r3, [r2, #48]	; 0x30
 80072f2:	4b21      	ldr	r3, [pc, #132]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80072fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007304:	2302      	movs	r3, #2
 8007306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007308:	2300      	movs	r3, #0
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800730c:	2300      	movs	r3, #0
 800730e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007310:	2303      	movs	r3, #3
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007314:	f107 031c 	add.w	r3, r7, #28
 8007318:	4619      	mov	r1, r3
 800731a:	481a      	ldr	r0, [pc, #104]	; (8007384 <HAL_TIM_MspPostInit+0x1a0>)
 800731c:	f003 f9f0 	bl	800a700 <HAL_GPIO_Init>
}
 8007320:	e023      	b.n	800736a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a1b      	ldr	r2, [pc, #108]	; (8007394 <HAL_TIM_MspPostInit+0x1b0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d11e      	bne.n	800736a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800732c:	2300      	movs	r3, #0
 800732e:	60bb      	str	r3, [r7, #8]
 8007330:	4b11      	ldr	r3, [pc, #68]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 8007332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007334:	4a10      	ldr	r2, [pc, #64]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 8007336:	f043 0302 	orr.w	r3, r3, #2
 800733a:	6313      	str	r3, [r2, #48]	; 0x30
 800733c:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <HAL_TIM_MspPostInit+0x194>)
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	60bb      	str	r3, [r7, #8]
 8007346:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800734c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800734e:	2302      	movs	r3, #2
 8007350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007352:	2300      	movs	r3, #0
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007356:	2300      	movs	r3, #0
 8007358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800735a:	2303      	movs	r3, #3
 800735c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800735e:	f107 031c 	add.w	r3, r7, #28
 8007362:	4619      	mov	r1, r3
 8007364:	4807      	ldr	r0, [pc, #28]	; (8007384 <HAL_TIM_MspPostInit+0x1a0>)
 8007366:	f003 f9cb 	bl	800a700 <HAL_GPIO_Init>
}
 800736a:	bf00      	nop
 800736c:	3730      	adds	r7, #48	; 0x30
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	40010000 	.word	0x40010000
 8007378:	40023800 	.word	0x40023800
 800737c:	40021000 	.word	0x40021000
 8007380:	40000400 	.word	0x40000400
 8007384:	40020400 	.word	0x40020400
 8007388:	40000800 	.word	0x40000800
 800738c:	40020c00 	.word	0x40020c00
 8007390:	40014400 	.word	0x40014400
 8007394:	40014800 	.word	0x40014800

08007398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	; 0x28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073a0:	f107 0314 	add.w	r3, r7, #20
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	605a      	str	r2, [r3, #4]
 80073aa:	609a      	str	r2, [r3, #8]
 80073ac:	60da      	str	r2, [r3, #12]
 80073ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a19      	ldr	r2, [pc, #100]	; (800741c <HAL_UART_MspInit+0x84>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d12b      	bne.n	8007412 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80073ba:	2300      	movs	r3, #0
 80073bc:	613b      	str	r3, [r7, #16]
 80073be:	4b18      	ldr	r3, [pc, #96]	; (8007420 <HAL_UART_MspInit+0x88>)
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	4a17      	ldr	r2, [pc, #92]	; (8007420 <HAL_UART_MspInit+0x88>)
 80073c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073c8:	6413      	str	r3, [r2, #64]	; 0x40
 80073ca:	4b15      	ldr	r3, [pc, #84]	; (8007420 <HAL_UART_MspInit+0x88>)
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	4b11      	ldr	r3, [pc, #68]	; (8007420 <HAL_UART_MspInit+0x88>)
 80073dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073de:	4a10      	ldr	r2, [pc, #64]	; (8007420 <HAL_UART_MspInit+0x88>)
 80073e0:	f043 0308 	orr.w	r3, r3, #8
 80073e4:	6313      	str	r3, [r2, #48]	; 0x30
 80073e6:	4b0e      	ldr	r3, [pc, #56]	; (8007420 <HAL_UART_MspInit+0x88>)
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80073f2:	2360      	movs	r3, #96	; 0x60
 80073f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073f6:	2302      	movs	r3, #2
 80073f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073fe:	2303      	movs	r3, #3
 8007400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007402:	2307      	movs	r3, #7
 8007404:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007406:	f107 0314 	add.w	r3, r7, #20
 800740a:	4619      	mov	r1, r3
 800740c:	4805      	ldr	r0, [pc, #20]	; (8007424 <HAL_UART_MspInit+0x8c>)
 800740e:	f003 f977 	bl	800a700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007412:	bf00      	nop
 8007414:	3728      	adds	r7, #40	; 0x28
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40004400 	.word	0x40004400
 8007420:	40023800 	.word	0x40023800
 8007424:	40020c00 	.word	0x40020c00

08007428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800742c:	e7fe      	b.n	800742c <NMI_Handler+0x4>

0800742e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800742e:	b480      	push	{r7}
 8007430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007432:	e7fe      	b.n	8007432 <HardFault_Handler+0x4>

08007434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007438:	e7fe      	b.n	8007438 <MemManage_Handler+0x4>

0800743a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800743a:	b480      	push	{r7}
 800743c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800743e:	e7fe      	b.n	800743e <BusFault_Handler+0x4>

08007440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007444:	e7fe      	b.n	8007444 <UsageFault_Handler+0x4>

08007446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007446:	b480      	push	{r7}
 8007448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800744a:	bf00      	nop
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007458:	bf00      	nop
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007462:	b480      	push	{r7}
 8007464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007466:	bf00      	nop
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007474:	f002 f850 	bl	8009518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007478:	bf00      	nop
 800747a:	bd80      	pop	{r7, pc}

0800747c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007480:	4803      	ldr	r0, [pc, #12]	; (8007490 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007482:	f007 fb20 	bl	800eac6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007486:	4803      	ldr	r0, [pc, #12]	; (8007494 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007488:	f007 fb1d 	bl	800eac6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800748c:	bf00      	nop
 800748e:	bd80      	pop	{r7, pc}
 8007490:	200427a4 	.word	0x200427a4
 8007494:	200429a0 	.word	0x200429a0

08007498 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800749c:	4802      	ldr	r0, [pc, #8]	; (80074a8 <SDIO_IRQHandler+0x10>)
 800749e:	f005 fbb9 	bl	800cc14 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80074a2:	bf00      	nop
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20042b00 	.word	0x20042b00

080074ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80074b0:	4802      	ldr	r0, [pc, #8]	; (80074bc <TIM6_DAC_IRQHandler+0x10>)
 80074b2:	f007 fb08 	bl	800eac6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80074b6:	bf00      	nop
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20042a80 	.word	0x20042a80

080074c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80074c4:	4802      	ldr	r0, [pc, #8]	; (80074d0 <TIM7_IRQHandler+0x10>)
 80074c6:	f007 fafe 	bl	800eac6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80074ca:	bf00      	nop
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20042c24 	.word	0x20042c24

080074d4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80074d8:	4802      	ldr	r0, [pc, #8]	; (80074e4 <DMA2_Stream2_IRQHandler+0x10>)
 80074da:	f002 fe9d 	bl	800a218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80074de:	bf00      	nop
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20042bc4 	.word	0x20042bc4

080074e8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80074ec:	4802      	ldr	r0, [pc, #8]	; (80074f8 <DMA2_Stream3_IRQHandler+0x10>)
 80074ee:	f002 fe93 	bl	800a218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	200426ec 	.word	0x200426ec

080074fc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007500:	4802      	ldr	r0, [pc, #8]	; (800750c <DMA2_Stream6_IRQHandler+0x10>)
 8007502:	f002 fe89 	bl	800a218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20042a20 	.word	0x20042a20

08007510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007518:	4a14      	ldr	r2, [pc, #80]	; (800756c <_sbrk+0x5c>)
 800751a:	4b15      	ldr	r3, [pc, #84]	; (8007570 <_sbrk+0x60>)
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007524:	4b13      	ldr	r3, [pc, #76]	; (8007574 <_sbrk+0x64>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800752c:	4b11      	ldr	r3, [pc, #68]	; (8007574 <_sbrk+0x64>)
 800752e:	4a12      	ldr	r2, [pc, #72]	; (8007578 <_sbrk+0x68>)
 8007530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007532:	4b10      	ldr	r3, [pc, #64]	; (8007574 <_sbrk+0x64>)
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4413      	add	r3, r2
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	429a      	cmp	r2, r3
 800753e:	d207      	bcs.n	8007550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007540:	f00d fd54 	bl	8014fec <__errno>
 8007544:	4602      	mov	r2, r0
 8007546:	230c      	movs	r3, #12
 8007548:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800754a:	f04f 33ff 	mov.w	r3, #4294967295
 800754e:	e009      	b.n	8007564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007550:	4b08      	ldr	r3, [pc, #32]	; (8007574 <_sbrk+0x64>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007556:	4b07      	ldr	r3, [pc, #28]	; (8007574 <_sbrk+0x64>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	4a05      	ldr	r2, [pc, #20]	; (8007574 <_sbrk+0x64>)
 8007560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007562:	68fb      	ldr	r3, [r7, #12]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	20050000 	.word	0x20050000
 8007570:	00000800 	.word	0x00000800
 8007574:	200002f0 	.word	0x200002f0
 8007578:	20044d78 	.word	0x20044d78

0800757c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007580:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <SystemInit+0x28>)
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007586:	4a07      	ldr	r2, [pc, #28]	; (80075a4 <SystemInit+0x28>)
 8007588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800758c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007590:	4b04      	ldr	r3, [pc, #16]	; (80075a4 <SystemInit+0x28>)
 8007592:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007596:	609a      	str	r2, [r3, #8]
#endif
}
 8007598:	bf00      	nop
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	e000ed00 	.word	0xe000ed00

080075a8 <cppInit>:
		}
	}
}

void cppInit(void)
{
 80075a8:	b598      	push	{r3, r4, r7, lr}
 80075aa:	af00      	add	r7, sp, #0
	lcd_init();
 80075ac:	f7f9 fd34 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80075b0:	483b      	ldr	r0, [pc, #236]	; (80076a0 <cppInit+0xf8>)
 80075b2:	f7fd fe33 	bl	800521c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80075b6:	2064      	movs	r0, #100	; 0x64
 80075b8:	f001 ffce 	bl	8009558 <HAL_Delay>
	power_sensor.updateValues();
 80075bc:	4838      	ldr	r0, [pc, #224]	; (80076a0 <cppInit+0xf8>)
 80075be:	f7fd fe3b 	bl	8005238 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80075c2:	f7f9 fd6d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80075c6:	2100      	movs	r1, #0
 80075c8:	2000      	movs	r0, #0
 80075ca:	f7f9 fd79 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80075ce:	4835      	ldr	r0, [pc, #212]	; (80076a4 <cppInit+0xfc>)
 80075d0:	f7f9 fda0 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80075d4:	2101      	movs	r1, #1
 80075d6:	2000      	movs	r0, #0
 80075d8:	f7f9 fd72 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80075dc:	4830      	ldr	r0, [pc, #192]	; (80076a0 <cppInit+0xf8>)
 80075de:	f7fd fe55 	bl	800528c <_ZN11PowerSensor17getButteryVoltageEv>
 80075e2:	ee10 3a10 	vmov	r3, s0
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7f8 ffc6 	bl	8000578 <__aeabi_f2d>
 80075ec:	4603      	mov	r3, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	461a      	mov	r2, r3
 80075f2:	4623      	mov	r3, r4
 80075f4:	482c      	ldr	r0, [pc, #176]	; (80076a8 <cppInit+0x100>)
 80075f6:	f7f9 fd8d 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80075fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075fe:	f001 ffab 	bl	8009558 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007602:	482a      	ldr	r0, [pc, #168]	; (80076ac <cppInit+0x104>)
 8007604:	f7fd f846 	bl	8004694 <_ZN6Logger10sdCardInitEv>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d007      	beq.n	800761e <cppInit+0x76>
		led.fullColor('G');
 800760e:	2147      	movs	r1, #71	; 0x47
 8007610:	4827      	ldr	r0, [pc, #156]	; (80076b0 <cppInit+0x108>)
 8007612:	f7fa fdaf 	bl	8002174 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007616:	2064      	movs	r0, #100	; 0x64
 8007618:	f001 ff9e 	bl	8009558 <HAL_Delay>
 800761c:	e006      	b.n	800762c <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800761e:	2152      	movs	r1, #82	; 0x52
 8007620:	4823      	ldr	r0, [pc, #140]	; (80076b0 <cppInit+0x108>)
 8007622:	f7fa fda7 	bl	8002174 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007626:	2064      	movs	r0, #100	; 0x64
 8007628:	f001 ff96 	bl	8009558 <HAL_Delay>
	}

	line_sensor.ADCStart();
 800762c:	4821      	ldr	r0, [pc, #132]	; (80076b4 <cppInit+0x10c>)
 800762e:	f7fa fefd 	bl	800242c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007632:	4821      	ldr	r0, [pc, #132]	; (80076b8 <cppInit+0x110>)
 8007634:	f7fd fac4 	bl	8004bc0 <_ZN5Motor4initEv>
	encoder.init();
 8007638:	4820      	ldr	r0, [pc, #128]	; (80076bc <cppInit+0x114>)
 800763a:	f7f9 fef3 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 800763e:	4820      	ldr	r0, [pc, #128]	; (80076c0 <cppInit+0x118>)
 8007640:	f7fa fb56 	bl	8001cf0 <_ZN3IMU4initEv>
	line_trace.init();
 8007644:	481f      	ldr	r0, [pc, #124]	; (80076c4 <cppInit+0x11c>)
 8007646:	f7fc f9b9 	bl	80039bc <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 800764a:	481a      	ldr	r0, [pc, #104]	; (80076b4 <cppInit+0x10c>)
 800764c:	f7fb f888 	bl	8002760 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007654:	f001 ff80 	bl	8009558 <HAL_Delay>

	led.fullColor('M');
 8007658:	214d      	movs	r1, #77	; 0x4d
 800765a:	4815      	ldr	r0, [pc, #84]	; (80076b0 <cppInit+0x108>)
 800765c:	f7fa fd8a 	bl	8002174 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007660:	4817      	ldr	r0, [pc, #92]	; (80076c0 <cppInit+0x118>)
 8007662:	f7fa fc0f 	bl	8001e84 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8007666:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80076c8 <cppInit+0x120>
 800766a:	eddf 0a18 	vldr	s1, [pc, #96]	; 80076cc <cppInit+0x124>
 800766e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80076d0 <cppInit+0x128>
 8007672:	4818      	ldr	r0, [pc, #96]	; (80076d4 <cppInit+0x12c>)
 8007674:	f7fe f9cc 	bl	8005a10 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	//velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000);
 8007678:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80076d8 <cppInit+0x130>
 800767c:	eddf 0a17 	vldr	s1, [pc, #92]	; 80076dc <cppInit+0x134>
 8007680:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80076e0 <cppInit+0x138>
 8007684:	4813      	ldr	r0, [pc, #76]	; (80076d4 <cppInit+0x12c>)
 8007686:	f7fe f9dc 	bl	8005a42 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 800768a:	4816      	ldr	r0, [pc, #88]	; (80076e4 <cppInit+0x13c>)
 800768c:	f7fd fcd0 	bl	8005030 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007690:	4815      	ldr	r0, [pc, #84]	; (80076e8 <cppInit+0x140>)
 8007692:	f7fd fd67 	bl	8005164 <_ZN13PathFollowing4initEv>

	esc.init();
 8007696:	4815      	ldr	r0, [pc, #84]	; (80076ec <cppInit+0x144>)
 8007698:	f7f9 fda8 	bl	80011ec <_ZN3ESC4initEv>

}
 800769c:	bf00      	nop
 800769e:	bd98      	pop	{r3, r4, r7, pc}
 80076a0:	20000608 	.word	0x20000608
 80076a4:	08019850 	.word	0x08019850
 80076a8:	08019858 	.word	0x08019858
 80076ac:	20000628 	.word	0x20000628
 80076b0:	20000604 	.word	0x20000604
 80076b4:	200002f4 	.word	0x200002f4
 80076b8:	20000600 	.word	0x20000600
 80076bc:	2001bbb0 	.word	0x2001bbb0
 80076c0:	20000614 	.word	0x20000614
 80076c4:	2001bc54 	.word	0x2001bc54
 80076c8:	3cceca68 	.word	0x3cceca68
 80076cc:	4180f06f 	.word	0x4180f06f
 80076d0:	3fea2d0e 	.word	0x3fea2d0e
 80076d4:	2001bbd0 	.word	0x2001bbd0
 80076d8:	00000000 	.word	0x00000000
 80076dc:	3f5e3fbc 	.word	0x3f5e3fbc
 80076e0:	3d75c28f 	.word	0x3d75c28f
 80076e4:	2001bc10 	.word	0x2001bc10
 80076e8:	20028c00 	.word	0x20028c00
 80076ec:	2001bc50 	.word	0x2001bc50

080076f0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80076f4:	4819      	ldr	r0, [pc, #100]	; (800775c <cppFlip1ms+0x6c>)
 80076f6:	f7fa fef7 	bl	80024e8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80076fa:	4819      	ldr	r0, [pc, #100]	; (8007760 <cppFlip1ms+0x70>)
 80076fc:	f7fa fb20 	bl	8001d40 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007700:	4818      	ldr	r0, [pc, #96]	; (8007764 <cppFlip1ms+0x74>)
 8007702:	f7f9 feb1 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007706:	4818      	ldr	r0, [pc, #96]	; (8007768 <cppFlip1ms+0x78>)
 8007708:	f7fc fb8e 	bl	8003e28 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800770c:	4817      	ldr	r0, [pc, #92]	; (800776c <cppFlip1ms+0x7c>)
 800770e:	f7fe f9b1 	bl	8005a74 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007712:	4817      	ldr	r0, [pc, #92]	; (8007770 <cppFlip1ms+0x80>)
 8007714:	f7fd fc70 	bl	8004ff8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007718:	4816      	ldr	r0, [pc, #88]	; (8007774 <cppFlip1ms+0x84>)
 800771a:	f7fd fe33 	bl	8005384 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800771e:	4816      	ldr	r0, [pc, #88]	; (8007778 <cppFlip1ms+0x88>)
 8007720:	f7fd fa60 	bl	8004be4 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007724:	4b15      	ldr	r3, [pc, #84]	; (800777c <cppFlip1ms+0x8c>)
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	4b13      	ldr	r3, [pc, #76]	; (800777c <cppFlip1ms+0x8c>)
 800772e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007730:	4b12      	ldr	r3, [pc, #72]	; (800777c <cppFlip1ms+0x8c>)
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d90c      	bls.n	8007752 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8007738:	4809      	ldr	r0, [pc, #36]	; (8007760 <cppFlip1ms+0x70>)
 800773a:	f7fa fb59 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 800773e:	eef0 7a40 	vmov.f32	s15, s0
 8007742:	eeb0 0a67 	vmov.f32	s0, s15
 8007746:	480e      	ldr	r0, [pc, #56]	; (8007780 <cppFlip1ms+0x90>)
 8007748:	f7fd ff96 	bl	8005678 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800774c:	4b0b      	ldr	r3, [pc, #44]	; (800777c <cppFlip1ms+0x8c>)
 800774e:	2200      	movs	r2, #0
 8007750:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007752:	4804      	ldr	r0, [pc, #16]	; (8007764 <cppFlip1ms+0x74>)
 8007754:	f7f9 ff72 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007758:	bf00      	nop
 800775a:	bd80      	pop	{r7, pc}
 800775c:	200002f4 	.word	0x200002f4
 8007760:	20000614 	.word	0x20000614
 8007764:	2001bbb0 	.word	0x2001bbb0
 8007768:	2001bc54 	.word	0x2001bc54
 800776c:	2001bbd0 	.word	0x2001bbd0
 8007770:	2001bc10 	.word	0x2001bc10
 8007774:	200005ec 	.word	0x200005ec
 8007778:	20000600 	.word	0x20000600
 800777c:	20040328 	.word	0x20040328
 8007780:	200289f0 	.word	0x200289f0

08007784 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007788:	4802      	ldr	r0, [pc, #8]	; (8007794 <cppFlip100ns+0x10>)
 800778a:	f7fa fe5f 	bl	800244c <_ZN10LineSensor17storeSensorValuesEv>
}
 800778e:	bf00      	nop
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	200002f4 	.word	0x200002f4

08007798 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 800779c:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <cppFlip10ms+0x28>)
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	3301      	adds	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <cppFlip10ms+0x28>)
 80077a6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <cppFlip10ms+0x28>)
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	2b06      	cmp	r3, #6
 80077ae:	d905      	bls.n	80077bc <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80077b0:	4804      	ldr	r0, [pc, #16]	; (80077c4 <cppFlip10ms+0x2c>)
 80077b2:	f7fd ff81 	bl	80056b8 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80077b6:	4b02      	ldr	r3, [pc, #8]	; (80077c0 <cppFlip10ms+0x28>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80077bc:	bf00      	nop
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	2004032a 	.word	0x2004032a
 80077c4:	200289f0 	.word	0x200289f0

080077c8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80077c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 80077ce:	4baf      	ldr	r3, [pc, #700]	; (8007a8c <cppLoop+0x2c4>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	f3bf 8f5b 	dmb	ish
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bf0c      	ite	eq
 80077e0:	2301      	moveq	r3, #1
 80077e2:	2300      	movne	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d015      	beq.n	8007816 <cppLoop+0x4e>
 80077ea:	48a8      	ldr	r0, [pc, #672]	; (8007a8c <cppLoop+0x2c4>)
 80077ec:	f00c fb99 	bl	8013f22 <__cxa_guard_acquire>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	bf14      	ite	ne
 80077f6:	2301      	movne	r3, #1
 80077f8:	2300      	moveq	r3, #0
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <cppLoop+0x4e>
 8007800:	48a3      	ldr	r0, [pc, #652]	; (8007a90 <cppLoop+0x2c8>)
 8007802:	f7fc f9b8 	bl	8003b76 <_ZN9LineTrace5getKpEv>
 8007806:	eef0 7a40 	vmov.f32	s15, s0
 800780a:	4ba2      	ldr	r3, [pc, #648]	; (8007a94 <cppLoop+0x2cc>)
 800780c:	edc3 7a00 	vstr	s15, [r3]
 8007810:	489e      	ldr	r0, [pc, #632]	; (8007a8c <cppLoop+0x2c4>)
 8007812:	f00c fb92 	bl	8013f3a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007816:	4ba0      	ldr	r3, [pc, #640]	; (8007a98 <cppLoop+0x2d0>)
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	f3bf 8f5b 	dmb	ish
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	bf0c      	ite	eq
 8007828:	2301      	moveq	r3, #1
 800782a:	2300      	movne	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d015      	beq.n	800785e <cppLoop+0x96>
 8007832:	4899      	ldr	r0, [pc, #612]	; (8007a98 <cppLoop+0x2d0>)
 8007834:	f00c fb75 	bl	8013f22 <__cxa_guard_acquire>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	bf14      	ite	ne
 800783e:	2301      	movne	r3, #1
 8007840:	2300      	moveq	r3, #0
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00a      	beq.n	800785e <cppLoop+0x96>
 8007848:	4891      	ldr	r0, [pc, #580]	; (8007a90 <cppLoop+0x2c8>)
 800784a:	f7fc f9a3 	bl	8003b94 <_ZN9LineTrace5getKiEv>
 800784e:	eef0 7a40 	vmov.f32	s15, s0
 8007852:	4b92      	ldr	r3, [pc, #584]	; (8007a9c <cppLoop+0x2d4>)
 8007854:	edc3 7a00 	vstr	s15, [r3]
 8007858:	488f      	ldr	r0, [pc, #572]	; (8007a98 <cppLoop+0x2d0>)
 800785a:	f00c fb6e 	bl	8013f3a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 800785e:	4b90      	ldr	r3, [pc, #576]	; (8007aa0 <cppLoop+0x2d8>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f3bf 8f5b 	dmb	ish
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	bf0c      	ite	eq
 8007870:	2301      	moveq	r3, #1
 8007872:	2300      	movne	r3, #0
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d015      	beq.n	80078a6 <cppLoop+0xde>
 800787a:	4889      	ldr	r0, [pc, #548]	; (8007aa0 <cppLoop+0x2d8>)
 800787c:	f00c fb51 	bl	8013f22 <__cxa_guard_acquire>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf14      	ite	ne
 8007886:	2301      	movne	r3, #1
 8007888:	2300      	moveq	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <cppLoop+0xde>
 8007890:	487f      	ldr	r0, [pc, #508]	; (8007a90 <cppLoop+0x2c8>)
 8007892:	f7fc f98e 	bl	8003bb2 <_ZN9LineTrace5getKdEv>
 8007896:	eef0 7a40 	vmov.f32	s15, s0
 800789a:	4b82      	ldr	r3, [pc, #520]	; (8007aa4 <cppLoop+0x2dc>)
 800789c:	edc3 7a00 	vstr	s15, [r3]
 80078a0:	487f      	ldr	r0, [pc, #508]	; (8007aa0 <cppLoop+0x2d8>)
 80078a2:	f00c fb4a 	bl	8013f3a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80078a6:	4b80      	ldr	r3, [pc, #512]	; (8007aa8 <cppLoop+0x2e0>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	f3bf 8f5b 	dmb	ish
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bf0c      	ite	eq
 80078b8:	2301      	moveq	r3, #1
 80078ba:	2300      	movne	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d015      	beq.n	80078ee <cppLoop+0x126>
 80078c2:	4879      	ldr	r0, [pc, #484]	; (8007aa8 <cppLoop+0x2e0>)
 80078c4:	f00c fb2d 	bl	8013f22 <__cxa_guard_acquire>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bf14      	ite	ne
 80078ce:	2301      	movne	r3, #1
 80078d0:	2300      	moveq	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <cppLoop+0x126>
 80078d8:	486d      	ldr	r0, [pc, #436]	; (8007a90 <cppLoop+0x2c8>)
 80078da:	f7fc f9d8 	bl	8003c8e <_ZN9LineTrace17getTargetVelocityEv>
 80078de:	eef0 7a40 	vmov.f32	s15, s0
 80078e2:	4b72      	ldr	r3, [pc, #456]	; (8007aac <cppLoop+0x2e4>)
 80078e4:	edc3 7a00 	vstr	s15, [r3]
 80078e8:	486f      	ldr	r0, [pc, #444]	; (8007aa8 <cppLoop+0x2e0>)
 80078ea:	f00c fb26 	bl	8013f3a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 80078ee:	4b70      	ldr	r3, [pc, #448]	; (8007ab0 <cppLoop+0x2e8>)
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	f3bf 8f5b 	dmb	ish
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d015      	beq.n	8007936 <cppLoop+0x16e>
 800790a:	4869      	ldr	r0, [pc, #420]	; (8007ab0 <cppLoop+0x2e8>)
 800790c:	f00c fb09 	bl	8013f22 <__cxa_guard_acquire>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	bf14      	ite	ne
 8007916:	2301      	movne	r3, #1
 8007918:	2300      	moveq	r3, #0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00a      	beq.n	8007936 <cppLoop+0x16e>
 8007920:	485b      	ldr	r0, [pc, #364]	; (8007a90 <cppLoop+0x2c8>)
 8007922:	f7fc f9c4 	bl	8003cae <_ZN9LineTrace14getMaxVelocityEv>
 8007926:	eef0 7a40 	vmov.f32	s15, s0
 800792a:	4b62      	ldr	r3, [pc, #392]	; (8007ab4 <cppLoop+0x2ec>)
 800792c:	edc3 7a00 	vstr	s15, [r3]
 8007930:	485f      	ldr	r0, [pc, #380]	; (8007ab0 <cppLoop+0x2e8>)
 8007932:	f00c fb02 	bl	8013f3a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007936:	4b60      	ldr	r3, [pc, #384]	; (8007ab8 <cppLoop+0x2f0>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	f3bf 8f5b 	dmb	ish
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	bf0c      	ite	eq
 8007948:	2301      	moveq	r3, #1
 800794a:	2300      	movne	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d015      	beq.n	800797e <cppLoop+0x1b6>
 8007952:	4859      	ldr	r0, [pc, #356]	; (8007ab8 <cppLoop+0x2f0>)
 8007954:	f00c fae5 	bl	8013f22 <__cxa_guard_acquire>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	bf14      	ite	ne
 800795e:	2301      	movne	r3, #1
 8007960:	2300      	moveq	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <cppLoop+0x1b6>
 8007968:	4849      	ldr	r0, [pc, #292]	; (8007a90 <cppLoop+0x2c8>)
 800796a:	f7fc f9b0 	bl	8003cce <_ZN9LineTrace15getMaxVelocity2Ev>
 800796e:	eef0 7a40 	vmov.f32	s15, s0
 8007972:	4b52      	ldr	r3, [pc, #328]	; (8007abc <cppLoop+0x2f4>)
 8007974:	edc3 7a00 	vstr	s15, [r3]
 8007978:	484f      	ldr	r0, [pc, #316]	; (8007ab8 <cppLoop+0x2f0>)
 800797a:	f00c fade 	bl	8013f3a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 800797e:	4b50      	ldr	r3, [pc, #320]	; (8007ac0 <cppLoop+0x2f8>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f3bf 8f5b 	dmb	ish
 8007986:	b2db      	uxtb	r3, r3
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	bf0c      	ite	eq
 8007990:	2301      	moveq	r3, #1
 8007992:	2300      	movne	r3, #0
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d015      	beq.n	80079c6 <cppLoop+0x1fe>
 800799a:	4849      	ldr	r0, [pc, #292]	; (8007ac0 <cppLoop+0x2f8>)
 800799c:	f00c fac1 	bl	8013f22 <__cxa_guard_acquire>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf14      	ite	ne
 80079a6:	2301      	movne	r3, #1
 80079a8:	2300      	moveq	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <cppLoop+0x1fe>
 80079b0:	4837      	ldr	r0, [pc, #220]	; (8007a90 <cppLoop+0x2c8>)
 80079b2:	f7fc f99c 	bl	8003cee <_ZN9LineTrace14getMinVelocityEv>
 80079b6:	eef0 7a40 	vmov.f32	s15, s0
 80079ba:	4b42      	ldr	r3, [pc, #264]	; (8007ac4 <cppLoop+0x2fc>)
 80079bc:	edc3 7a00 	vstr	s15, [r3]
 80079c0:	483f      	ldr	r0, [pc, #252]	; (8007ac0 <cppLoop+0x2f8>)
 80079c2:	f00c faba 	bl	8013f3a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 80079c6:	4b40      	ldr	r3, [pc, #256]	; (8007ac8 <cppLoop+0x300>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	f3bf 8f5b 	dmb	ish
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bf0c      	ite	eq
 80079d8:	2301      	moveq	r3, #1
 80079da:	2300      	movne	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d015      	beq.n	8007a0e <cppLoop+0x246>
 80079e2:	4839      	ldr	r0, [pc, #228]	; (8007ac8 <cppLoop+0x300>)
 80079e4:	f00c fa9d 	bl	8013f22 <__cxa_guard_acquire>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bf14      	ite	ne
 80079ee:	2301      	movne	r3, #1
 80079f0:	2300      	moveq	r3, #0
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <cppLoop+0x246>
 80079f8:	4825      	ldr	r0, [pc, #148]	; (8007a90 <cppLoop+0x2c8>)
 80079fa:	f7fc f988 	bl	8003d0e <_ZN9LineTrace15getMinVelocity2Ev>
 80079fe:	eef0 7a40 	vmov.f32	s15, s0
 8007a02:	4b32      	ldr	r3, [pc, #200]	; (8007acc <cppLoop+0x304>)
 8007a04:	edc3 7a00 	vstr	s15, [r3]
 8007a08:	482f      	ldr	r0, [pc, #188]	; (8007ac8 <cppLoop+0x300>)
 8007a0a:	f00c fa96 	bl	8013f3a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007a0e:	4b30      	ldr	r3, [pc, #192]	; (8007ad0 <cppLoop+0x308>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	f3bf 8f5b 	dmb	ish
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bf0c      	ite	eq
 8007a20:	2301      	moveq	r3, #1
 8007a22:	2300      	movne	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d015      	beq.n	8007a56 <cppLoop+0x28e>
 8007a2a:	4829      	ldr	r0, [pc, #164]	; (8007ad0 <cppLoop+0x308>)
 8007a2c:	f00c fa79 	bl	8013f22 <__cxa_guard_acquire>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bf14      	ite	ne
 8007a36:	2301      	movne	r3, #1
 8007a38:	2300      	moveq	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <cppLoop+0x28e>
 8007a40:	4813      	ldr	r0, [pc, #76]	; (8007a90 <cppLoop+0x2c8>)
 8007a42:	f7fc f9a8 	bl	8003d96 <_ZN9LineTrace9getMaxAccEv>
 8007a46:	eef0 7a40 	vmov.f32	s15, s0
 8007a4a:	4b22      	ldr	r3, [pc, #136]	; (8007ad4 <cppLoop+0x30c>)
 8007a4c:	edc3 7a00 	vstr	s15, [r3]
 8007a50:	481f      	ldr	r0, [pc, #124]	; (8007ad0 <cppLoop+0x308>)
 8007a52:	f00c fa72 	bl	8013f3a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007a56:	4b20      	ldr	r3, [pc, #128]	; (8007ad8 <cppLoop+0x310>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f3bf 8f5b 	dmb	ish
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bf0c      	ite	eq
 8007a68:	2301      	moveq	r3, #1
 8007a6a:	2300      	movne	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d03f      	beq.n	8007af2 <cppLoop+0x32a>
 8007a72:	4819      	ldr	r0, [pc, #100]	; (8007ad8 <cppLoop+0x310>)
 8007a74:	f00c fa55 	bl	8013f22 <__cxa_guard_acquire>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	bf14      	ite	ne
 8007a7e:	2301      	movne	r3, #1
 8007a80:	2300      	moveq	r3, #0
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d034      	beq.n	8007af2 <cppLoop+0x32a>
 8007a88:	e028      	b.n	8007adc <cppLoop+0x314>
 8007a8a:	bf00      	nop
 8007a8c:	2004033c 	.word	0x2004033c
 8007a90:	2001bc54 	.word	0x2001bc54
 8007a94:	20040338 	.word	0x20040338
 8007a98:	20040344 	.word	0x20040344
 8007a9c:	20040340 	.word	0x20040340
 8007aa0:	2004034c 	.word	0x2004034c
 8007aa4:	20040348 	.word	0x20040348
 8007aa8:	20040354 	.word	0x20040354
 8007aac:	20040350 	.word	0x20040350
 8007ab0:	2004035c 	.word	0x2004035c
 8007ab4:	20040358 	.word	0x20040358
 8007ab8:	20040364 	.word	0x20040364
 8007abc:	20040360 	.word	0x20040360
 8007ac0:	2004036c 	.word	0x2004036c
 8007ac4:	20040368 	.word	0x20040368
 8007ac8:	20040374 	.word	0x20040374
 8007acc:	20040370 	.word	0x20040370
 8007ad0:	2004037c 	.word	0x2004037c
 8007ad4:	20040378 	.word	0x20040378
 8007ad8:	20040384 	.word	0x20040384
 8007adc:	48b2      	ldr	r0, [pc, #712]	; (8007da8 <cppLoop+0x5e0>)
 8007ade:	f7fc f990 	bl	8003e02 <_ZN9LineTrace9getMaxDecEv>
 8007ae2:	eef0 7a40 	vmov.f32	s15, s0
 8007ae6:	4bb1      	ldr	r3, [pc, #708]	; (8007dac <cppLoop+0x5e4>)
 8007ae8:	edc3 7a00 	vstr	s15, [r3]
 8007aec:	48b0      	ldr	r0, [pc, #704]	; (8007db0 <cppLoop+0x5e8>)
 8007aee:	f00c fa24 	bl	8013f3a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007af2:	4bb0      	ldr	r3, [pc, #704]	; (8007db4 <cppLoop+0x5ec>)
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	f3bf 8f5b 	dmb	ish
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf0c      	ite	eq
 8007b04:	2301      	moveq	r3, #1
 8007b06:	2300      	movne	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d015      	beq.n	8007b3a <cppLoop+0x372>
 8007b0e:	48a9      	ldr	r0, [pc, #676]	; (8007db4 <cppLoop+0x5ec>)
 8007b10:	f00c fa07 	bl	8013f22 <__cxa_guard_acquire>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bf14      	ite	ne
 8007b1a:	2301      	movne	r3, #1
 8007b1c:	2300      	moveq	r3, #0
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <cppLoop+0x372>
 8007b24:	48a0      	ldr	r0, [pc, #640]	; (8007da8 <cppLoop+0x5e0>)
 8007b26:	f7fc f95a 	bl	8003dde <_ZN9LineTrace10getMaxAcc2Ev>
 8007b2a:	eef0 7a40 	vmov.f32	s15, s0
 8007b2e:	4ba2      	ldr	r3, [pc, #648]	; (8007db8 <cppLoop+0x5f0>)
 8007b30:	edc3 7a00 	vstr	s15, [r3]
 8007b34:	489f      	ldr	r0, [pc, #636]	; (8007db4 <cppLoop+0x5ec>)
 8007b36:	f00c fa00 	bl	8013f3a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007b3a:	4ba0      	ldr	r3, [pc, #640]	; (8007dbc <cppLoop+0x5f4>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f3bf 8f5b 	dmb	ish
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bf0c      	ite	eq
 8007b4c:	2301      	moveq	r3, #1
 8007b4e:	2300      	movne	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d015      	beq.n	8007b82 <cppLoop+0x3ba>
 8007b56:	4899      	ldr	r0, [pc, #612]	; (8007dbc <cppLoop+0x5f4>)
 8007b58:	f00c f9e3 	bl	8013f22 <__cxa_guard_acquire>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	bf14      	ite	ne
 8007b62:	2301      	movne	r3, #1
 8007b64:	2300      	moveq	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00a      	beq.n	8007b82 <cppLoop+0x3ba>
 8007b6c:	488e      	ldr	r0, [pc, #568]	; (8007da8 <cppLoop+0x5e0>)
 8007b6e:	f7fc f924 	bl	8003dba <_ZN9LineTrace10getMaxDec2Ev>
 8007b72:	eef0 7a40 	vmov.f32	s15, s0
 8007b76:	4b92      	ldr	r3, [pc, #584]	; (8007dc0 <cppLoop+0x5f8>)
 8007b78:	edc3 7a00 	vstr	s15, [r3]
 8007b7c:	488f      	ldr	r0, [pc, #572]	; (8007dbc <cppLoop+0x5f4>)
 8007b7e:	f00c f9dc 	bl	8013f3a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007b82:	4890      	ldr	r0, [pc, #576]	; (8007dc4 <cppLoop+0x5fc>)
 8007b84:	f7fd fb92 	bl	80052ac <_ZN12RotarySwitch8getValueEv>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b0f      	cmp	r3, #15
 8007b8c:	f201 8399 	bhi.w	80092c2 <cppLoop+0x1afa>
 8007b90:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <cppLoop+0x3d0>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bd9 	.word	0x08007bd9
 8007b9c:	08007f89 	.word	0x08007f89
 8007ba0:	08008041 	.word	0x08008041
 8007ba4:	080081f3 	.word	0x080081f3
 8007ba8:	080082bf 	.word	0x080082bf
 8007bac:	0800854d 	.word	0x0800854d
 8007bb0:	08008619 	.word	0x08008619
 8007bb4:	080088af 	.word	0x080088af
 8007bb8:	08008b3b 	.word	0x08008b3b
 8007bbc:	08008dc5 	.word	0x08008dc5
 8007bc0:	08008e81 	.word	0x08008e81
 8007bc4:	08008f21 	.word	0x08008f21
 8007bc8:	08008fa7 	.word	0x08008fa7
 8007bcc:	08009041 	.word	0x08009041
 8007bd0:	08009155 	.word	0x08009155
 8007bd4:	0800920d 	.word	0x0800920d
	case 0:
		led.fullColor('W');
 8007bd8:	2157      	movs	r1, #87	; 0x57
 8007bda:	487b      	ldr	r0, [pc, #492]	; (8007dc8 <cppLoop+0x600>)
 8007bdc:	f7fa faca 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007be0:	f7f9 fa5e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007be4:	2100      	movs	r1, #0
 8007be6:	2000      	movs	r0, #0
 8007be8:	f7f9 fa6a 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007bec:	486e      	ldr	r0, [pc, #440]	; (8007da8 <cppLoop+0x5e0>)
 8007bee:	f7fb ffc2 	bl	8003b76 <_ZN9LineTrace5getKpEv>
 8007bf2:	eeb0 7a40 	vmov.f32	s14, s0
 8007bf6:	eddf 7a75 	vldr	s15, [pc, #468]	; 8007dcc <cppLoop+0x604>
 8007bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfe:	ee17 0a90 	vmov	r0, s15
 8007c02:	f7f8 fcb9 	bl	8000578 <__aeabi_f2d>
 8007c06:	4603      	mov	r3, r0
 8007c08:	460c      	mov	r4, r1
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4623      	mov	r3, r4
 8007c0e:	4870      	ldr	r0, [pc, #448]	; (8007dd0 <cppLoop+0x608>)
 8007c10:	f7f9 fa80 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c14:	2101      	movs	r1, #1
 8007c16:	2000      	movs	r0, #0
 8007c18:	f7f9 fa52 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007c1c:	4862      	ldr	r0, [pc, #392]	; (8007da8 <cppLoop+0x5e0>)
 8007c1e:	f7fb ffb9 	bl	8003b94 <_ZN9LineTrace5getKiEv>
 8007c22:	eeb0 7a40 	vmov.f32	s14, s0
 8007c26:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8007dd4 <cppLoop+0x60c>
 8007c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2e:	ee17 0a90 	vmov	r0, s15
 8007c32:	f7f8 fca1 	bl	8000578 <__aeabi_f2d>
 8007c36:	4605      	mov	r5, r0
 8007c38:	460e      	mov	r6, r1
 8007c3a:	485b      	ldr	r0, [pc, #364]	; (8007da8 <cppLoop+0x5e0>)
 8007c3c:	f7fb ffb9 	bl	8003bb2 <_ZN9LineTrace5getKdEv>
 8007c40:	eeb0 7a40 	vmov.f32	s14, s0
 8007c44:	eddf 7a64 	vldr	s15, [pc, #400]	; 8007dd8 <cppLoop+0x610>
 8007c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c4c:	ee17 0a90 	vmov	r0, s15
 8007c50:	f7f8 fc92 	bl	8000578 <__aeabi_f2d>
 8007c54:	4603      	mov	r3, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	e9cd 3400 	strd	r3, r4, [sp]
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4633      	mov	r3, r6
 8007c60:	485e      	ldr	r0, [pc, #376]	; (8007ddc <cppLoop+0x614>)
 8007c62:	f7f9 fa57 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007c66:	485e      	ldr	r0, [pc, #376]	; (8007de0 <cppLoop+0x618>)
 8007c68:	f7fa fa20 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b08      	cmp	r3, #8
 8007c70:	bf0c      	ite	eq
 8007c72:	2301      	moveq	r3, #1
 8007c74:	2300      	movne	r3, #0
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d022      	beq.n	8007cc2 <cppLoop+0x4fa>
			led.LR(-1, 1);
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8007c82:	4851      	ldr	r0, [pc, #324]	; (8007dc8 <cppLoop+0x600>)
 8007c84:	f7fa fb32 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007c88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007c8c:	f001 fc64 	bl	8009558 <HAL_Delay>

			selector++;
 8007c90:	4b54      	ldr	r3, [pc, #336]	; (8007de4 <cppLoop+0x61c>)
 8007c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	3301      	adds	r3, #1
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	b21a      	sxth	r2, r3
 8007c9e:	4b51      	ldr	r3, [pc, #324]	; (8007de4 <cppLoop+0x61c>)
 8007ca0:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007ca2:	4b50      	ldr	r3, [pc, #320]	; (8007de4 <cppLoop+0x61c>)
 8007ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	dd02      	ble.n	8007cb2 <cppLoop+0x4ea>
 8007cac:	4b4d      	ldr	r3, [pc, #308]	; (8007de4 <cppLoop+0x61c>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8007cb8:	4843      	ldr	r0, [pc, #268]	; (8007dc8 <cppLoop+0x600>)
 8007cba:	f7fa fb17 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007cbe:	f001 bb02 	b.w	80092c6 <cppLoop+0x1afe>
		else if(joy_stick.getValue() == JOY_R){
 8007cc2:	4847      	ldr	r0, [pc, #284]	; (8007de0 <cppLoop+0x618>)
 8007cc4:	f7fa f9f2 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b10      	cmp	r3, #16
 8007ccc:	bf0c      	ite	eq
 8007cce:	2301      	moveq	r3, #1
 8007cd0:	2300      	movne	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 808d 	beq.w	8007df4 <cppLoop+0x62c>
			led.LR(-1, 1);
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8007ce0:	4839      	ldr	r0, [pc, #228]	; (8007dc8 <cppLoop+0x600>)
 8007ce2:	f7fa fb03 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007ce6:	2064      	movs	r0, #100	; 0x64
 8007ce8:	f001 fc36 	bl	8009558 <HAL_Delay>
			if(selector == 0){
 8007cec:	4b3d      	ldr	r3, [pc, #244]	; (8007de4 <cppLoop+0x61c>)
 8007cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d113      	bne.n	8007d1e <cppLoop+0x556>
				adj_kp = adj_kp + 0.00001;
 8007cf6:	4b3c      	ldr	r3, [pc, #240]	; (8007de8 <cppLoop+0x620>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7f8 fc3c 	bl	8000578 <__aeabi_f2d>
 8007d00:	a323      	add	r3, pc, #140	; (adr r3, 8007d90 <cppLoop+0x5c8>)
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	f7f8 fad9 	bl	80002bc <__adddf3>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	4618      	mov	r0, r3
 8007d10:	4621      	mov	r1, r4
 8007d12:	f7f8 ff81 	bl	8000c18 <__aeabi_d2f>
 8007d16:	4602      	mov	r2, r0
 8007d18:	4b33      	ldr	r3, [pc, #204]	; (8007de8 <cppLoop+0x620>)
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	e02b      	b.n	8007d76 <cppLoop+0x5ae>
			else if(selector == 1){
 8007d1e:	4b31      	ldr	r3, [pc, #196]	; (8007de4 <cppLoop+0x61c>)
 8007d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d113      	bne.n	8007d50 <cppLoop+0x588>
				adj_ki = adj_ki + 0.0001;
 8007d28:	4b30      	ldr	r3, [pc, #192]	; (8007dec <cppLoop+0x624>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7f8 fc23 	bl	8000578 <__aeabi_f2d>
 8007d32:	a319      	add	r3, pc, #100	; (adr r3, 8007d98 <cppLoop+0x5d0>)
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	f7f8 fac0 	bl	80002bc <__adddf3>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	4618      	mov	r0, r3
 8007d42:	4621      	mov	r1, r4
 8007d44:	f7f8 ff68 	bl	8000c18 <__aeabi_d2f>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	4b28      	ldr	r3, [pc, #160]	; (8007dec <cppLoop+0x624>)
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	e012      	b.n	8007d76 <cppLoop+0x5ae>
				adj_kd = adj_kd + 0.000001;
 8007d50:	4b27      	ldr	r3, [pc, #156]	; (8007df0 <cppLoop+0x628>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7f8 fc0f 	bl	8000578 <__aeabi_f2d>
 8007d5a:	a311      	add	r3, pc, #68	; (adr r3, 8007da0 <cppLoop+0x5d8>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	f7f8 faac 	bl	80002bc <__adddf3>
 8007d64:	4603      	mov	r3, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	4618      	mov	r0, r3
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	f7f8 ff54 	bl	8000c18 <__aeabi_d2f>
 8007d70:	4602      	mov	r2, r0
 8007d72:	4b1f      	ldr	r3, [pc, #124]	; (8007df0 <cppLoop+0x628>)
 8007d74:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007d76:	2152      	movs	r1, #82	; 0x52
 8007d78:	4813      	ldr	r0, [pc, #76]	; (8007dc8 <cppLoop+0x600>)
 8007d7a:	f7fa f9fb 	bl	8002174 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f04f 31ff 	mov.w	r1, #4294967295
 8007d84:	4810      	ldr	r0, [pc, #64]	; (8007dc8 <cppLoop+0x600>)
 8007d86:	f7fa fab1 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007d8a:	f001 ba9c 	b.w	80092c6 <cppLoop+0x1afe>
 8007d8e:	bf00      	nop
 8007d90:	88e368f1 	.word	0x88e368f1
 8007d94:	3ee4f8b5 	.word	0x3ee4f8b5
 8007d98:	eb1c432d 	.word	0xeb1c432d
 8007d9c:	3f1a36e2 	.word	0x3f1a36e2
 8007da0:	a0b5ed8d 	.word	0xa0b5ed8d
 8007da4:	3eb0c6f7 	.word	0x3eb0c6f7
 8007da8:	2001bc54 	.word	0x2001bc54
 8007dac:	20040380 	.word	0x20040380
 8007db0:	20040384 	.word	0x20040384
 8007db4:	2004038c 	.word	0x2004038c
 8007db8:	20040388 	.word	0x20040388
 8007dbc:	20040394 	.word	0x20040394
 8007dc0:	20040390 	.word	0x20040390
 8007dc4:	200005fc 	.word	0x200005fc
 8007dc8:	20000604 	.word	0x20000604
 8007dcc:	447a0000 	.word	0x447a0000
 8007dd0:	0801985c 	.word	0x0801985c
 8007dd4:	42c80000 	.word	0x42c80000
 8007dd8:	461c4000 	.word	0x461c4000
 8007ddc:	08019868 	.word	0x08019868
 8007de0:	200005f8 	.word	0x200005f8
 8007de4:	2004032c 	.word	0x2004032c
 8007de8:	20040338 	.word	0x20040338
 8007dec:	20040340 	.word	0x20040340
 8007df0:	20040348 	.word	0x20040348
		else if(joy_stick.getValue() == JOY_L){
 8007df4:	48c0      	ldr	r0, [pc, #768]	; (80080f8 <cppLoop+0x930>)
 8007df6:	f7fa f959 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	bf0c      	ite	eq
 8007e00:	2301      	moveq	r3, #1
 8007e02:	2300      	movne	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d059      	beq.n	8007ebe <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e10:	48ba      	ldr	r0, [pc, #744]	; (80080fc <cppLoop+0x934>)
 8007e12:	f7fa fa6b 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007e16:	2064      	movs	r0, #100	; 0x64
 8007e18:	f001 fb9e 	bl	8009558 <HAL_Delay>
			if(selector == 0){
 8007e1c:	4bb8      	ldr	r3, [pc, #736]	; (8008100 <cppLoop+0x938>)
 8007e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d113      	bne.n	8007e4e <cppLoop+0x686>
				adj_kp = adj_kp - 0.00001;
 8007e26:	4bb7      	ldr	r3, [pc, #732]	; (8008104 <cppLoop+0x93c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7f8 fba4 	bl	8000578 <__aeabi_f2d>
 8007e30:	a3a9      	add	r3, pc, #676	; (adr r3, 80080d8 <cppLoop+0x910>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f7f8 fa3f 	bl	80002b8 <__aeabi_dsub>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	4618      	mov	r0, r3
 8007e40:	4621      	mov	r1, r4
 8007e42:	f7f8 fee9 	bl	8000c18 <__aeabi_d2f>
 8007e46:	4602      	mov	r2, r0
 8007e48:	4bae      	ldr	r3, [pc, #696]	; (8008104 <cppLoop+0x93c>)
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	e02b      	b.n	8007ea6 <cppLoop+0x6de>
			else if(selector == 1){
 8007e4e:	4bac      	ldr	r3, [pc, #688]	; (8008100 <cppLoop+0x938>)
 8007e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d113      	bne.n	8007e80 <cppLoop+0x6b8>
				adj_ki = adj_ki - 0.0001;
 8007e58:	4bab      	ldr	r3, [pc, #684]	; (8008108 <cppLoop+0x940>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7f8 fb8b 	bl	8000578 <__aeabi_f2d>
 8007e62:	a39f      	add	r3, pc, #636	; (adr r3, 80080e0 <cppLoop+0x918>)
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f7f8 fa26 	bl	80002b8 <__aeabi_dsub>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	4618      	mov	r0, r3
 8007e72:	4621      	mov	r1, r4
 8007e74:	f7f8 fed0 	bl	8000c18 <__aeabi_d2f>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	4ba3      	ldr	r3, [pc, #652]	; (8008108 <cppLoop+0x940>)
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	e012      	b.n	8007ea6 <cppLoop+0x6de>
				adj_kd = adj_kd - 0.000001;
 8007e80:	4ba2      	ldr	r3, [pc, #648]	; (800810c <cppLoop+0x944>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7f8 fb77 	bl	8000578 <__aeabi_f2d>
 8007e8a:	a397      	add	r3, pc, #604	; (adr r3, 80080e8 <cppLoop+0x920>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f7f8 fa12 	bl	80002b8 <__aeabi_dsub>
 8007e94:	4603      	mov	r3, r0
 8007e96:	460c      	mov	r4, r1
 8007e98:	4618      	mov	r0, r3
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	f7f8 febc 	bl	8000c18 <__aeabi_d2f>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	4b9a      	ldr	r3, [pc, #616]	; (800810c <cppLoop+0x944>)
 8007ea4:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007ea6:	2152      	movs	r1, #82	; 0x52
 8007ea8:	4894      	ldr	r0, [pc, #592]	; (80080fc <cppLoop+0x934>)
 8007eaa:	f7fa f963 	bl	8002174 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8007eb4:	4891      	ldr	r0, [pc, #580]	; (80080fc <cppLoop+0x934>)
 8007eb6:	f7fa fa19 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007eba:	f001 ba04 	b.w	80092c6 <cppLoop+0x1afe>
		else if(joy_stick.getValue() == JOY_D){
 8007ebe:	488e      	ldr	r0, [pc, #568]	; (80080f8 <cppLoop+0x930>)
 8007ec0:	f7fa f8f4 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	bf0c      	ite	eq
 8007eca:	2301      	moveq	r3, #1
 8007ecc:	2300      	movne	r3, #0
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d011      	beq.n	8007ef8 <cppLoop+0x730>
			led.LR(-1, 1);
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f04f 31ff 	mov.w	r1, #4294967295
 8007eda:	4888      	ldr	r0, [pc, #544]	; (80080fc <cppLoop+0x934>)
 8007edc:	f7fa fa06 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007ee0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007ee4:	f001 fb38 	bl	8009558 <HAL_Delay>
			led.LR(-1, 0);
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f04f 31ff 	mov.w	r1, #4294967295
 8007eee:	4883      	ldr	r0, [pc, #524]	; (80080fc <cppLoop+0x934>)
 8007ef0:	f7fa f9fc 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007ef4:	f001 b9e7 	b.w	80092c6 <cppLoop+0x1afe>
		else if(joy_stick.getValue() == JOY_C){
 8007ef8:	487f      	ldr	r0, [pc, #508]	; (80080f8 <cppLoop+0x930>)
 8007efa:	f7fa f8d7 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	bf0c      	ite	eq
 8007f04:	2301      	moveq	r3, #1
 8007f06:	2300      	movne	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f001 81db 	beq.w	80092c6 <cppLoop+0x1afe>
			led.LR(-1, 1);
 8007f10:	2201      	movs	r2, #1
 8007f12:	f04f 31ff 	mov.w	r1, #4294967295
 8007f16:	4879      	ldr	r0, [pc, #484]	; (80080fc <cppLoop+0x934>)
 8007f18:	f7fa f9e8 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f20:	f001 fb1a 	bl	8009558 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007f24:	2300      	movs	r3, #0
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	4b76      	ldr	r3, [pc, #472]	; (8008104 <cppLoop+0x93c>)
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	4978      	ldr	r1, [pc, #480]	; (8008110 <cppLoop+0x948>)
 8007f2e:	4879      	ldr	r0, [pc, #484]	; (8008114 <cppLoop+0x94c>)
 8007f30:	f7f9 fca4 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007f34:	2300      	movs	r3, #0
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	4b73      	ldr	r3, [pc, #460]	; (8008108 <cppLoop+0x940>)
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	4976      	ldr	r1, [pc, #472]	; (8008118 <cppLoop+0x950>)
 8007f3e:	4875      	ldr	r0, [pc, #468]	; (8008114 <cppLoop+0x94c>)
 8007f40:	f7f9 fc9c 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007f44:	2300      	movs	r3, #0
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	4b70      	ldr	r3, [pc, #448]	; (800810c <cppLoop+0x944>)
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	4973      	ldr	r1, [pc, #460]	; (800811c <cppLoop+0x954>)
 8007f4e:	4871      	ldr	r0, [pc, #452]	; (8008114 <cppLoop+0x94c>)
 8007f50:	f7f9 fc94 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007f54:	4b6b      	ldr	r3, [pc, #428]	; (8008104 <cppLoop+0x93c>)
 8007f56:	edd3 7a00 	vldr	s15, [r3]
 8007f5a:	4b6b      	ldr	r3, [pc, #428]	; (8008108 <cppLoop+0x940>)
 8007f5c:	ed93 7a00 	vldr	s14, [r3]
 8007f60:	4b6a      	ldr	r3, [pc, #424]	; (800810c <cppLoop+0x944>)
 8007f62:	edd3 6a00 	vldr	s13, [r3]
 8007f66:	eeb0 1a66 	vmov.f32	s2, s13
 8007f6a:	eef0 0a47 	vmov.f32	s1, s14
 8007f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8007f72:	486b      	ldr	r0, [pc, #428]	; (8008120 <cppLoop+0x958>)
 8007f74:	f7fb fde6 	bl	8003b44 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8007f7e:	485f      	ldr	r0, [pc, #380]	; (80080fc <cppLoop+0x934>)
 8007f80:	f7fa f9b4 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007f84:	f001 b99f 	b.w	80092c6 <cppLoop+0x1afe>

	case 1:
		led.fullColor('C');
 8007f88:	2143      	movs	r1, #67	; 0x43
 8007f8a:	485c      	ldr	r0, [pc, #368]	; (80080fc <cppLoop+0x934>)
 8007f8c:	f7fa f8f2 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007f90:	f7f9 f886 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007f94:	2100      	movs	r1, #0
 8007f96:	2000      	movs	r0, #0
 8007f98:	f7f9 f892 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007f9c:	4861      	ldr	r0, [pc, #388]	; (8008124 <cppLoop+0x95c>)
 8007f9e:	f7f9 f8b9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	f7f9 f88b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007faa:	4b5f      	ldr	r3, [pc, #380]	; (8008128 <cppLoop+0x960>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7f8 fae2 	bl	8000578 <__aeabi_f2d>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	461a      	mov	r2, r3
 8007fba:	4623      	mov	r3, r4
 8007fbc:	485b      	ldr	r0, [pc, #364]	; (800812c <cppLoop+0x964>)
 8007fbe:	f7f9 f8a9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007fc2:	484d      	ldr	r0, [pc, #308]	; (80080f8 <cppLoop+0x930>)
 8007fc4:	f7fa f872 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	bf0c      	ite	eq
 8007fce:	2301      	moveq	r3, #1
 8007fd0:	2300      	movne	r3, #0
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f001 8178 	beq.w	80092ca <cppLoop+0x1b02>
			HAL_Delay(500);
 8007fda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007fde:	f001 fabb 	bl	8009558 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007fe2:	4b51      	ldr	r3, [pc, #324]	; (8008128 <cppLoop+0x960>)
 8007fe4:	edd3 7a00 	vldr	s15, [r3]
 8007fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8007fec:	484c      	ldr	r0, [pc, #304]	; (8008120 <cppLoop+0x958>)
 8007fee:	f7fb fdfe 	bl	8003bee <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	4840      	ldr	r0, [pc, #256]	; (80080fc <cppLoop+0x934>)
 8007ffa:	f7fa f977 	bl	80022ec <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007ffe:	2100      	movs	r1, #0
 8008000:	4847      	ldr	r0, [pc, #284]	; (8008120 <cppLoop+0x958>)
 8008002:	f7fc f839 	bl	8004078 <_ZN9LineTrace7setModeEs>
			esc.on(0.5, 0.5, 0.5, 0.5);
 8008006:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800800a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800800e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8008012:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008016:	4846      	ldr	r0, [pc, #280]	; (8008130 <cppLoop+0x968>)
 8008018:	f7f9 f91a 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 800801c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008020:	f001 fa9a 	bl	8009558 <HAL_Delay>
			line_trace.running();
 8008024:	483e      	ldr	r0, [pc, #248]	; (8008120 <cppLoop+0x958>)
 8008026:	f7fc f865 	bl	80040f4 <_ZN9LineTrace7runningEv>
			esc.off();
 800802a:	4841      	ldr	r0, [pc, #260]	; (8008130 <cppLoop+0x968>)
 800802c:	f7f9 f9aa 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8008030:	f04f 32ff 	mov.w	r2, #4294967295
 8008034:	2100      	movs	r1, #0
 8008036:	4831      	ldr	r0, [pc, #196]	; (80080fc <cppLoop+0x934>)
 8008038:	f7fa f958 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 800803c:	f001 b945 	b.w	80092ca <cppLoop+0x1b02>

	case 2:
		led.fullColor('B');
 8008040:	2142      	movs	r1, #66	; 0x42
 8008042:	482e      	ldr	r0, [pc, #184]	; (80080fc <cppLoop+0x934>)
 8008044:	f7fa f896 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008048:	f7f9 f82a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800804c:	2100      	movs	r1, #0
 800804e:	2000      	movs	r0, #0
 8008050:	f7f9 f836 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008054:	4833      	ldr	r0, [pc, #204]	; (8008124 <cppLoop+0x95c>)
 8008056:	f7f9 f85d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800805a:	2101      	movs	r1, #1
 800805c:	2000      	movs	r0, #0
 800805e:	f7f9 f82f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8008062:	4b31      	ldr	r3, [pc, #196]	; (8008128 <cppLoop+0x960>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f7f8 fa86 	bl	8000578 <__aeabi_f2d>
 800806c:	4603      	mov	r3, r0
 800806e:	460c      	mov	r4, r1
 8008070:	461a      	mov	r2, r3
 8008072:	4623      	mov	r3, r4
 8008074:	482f      	ldr	r0, [pc, #188]	; (8008134 <cppLoop+0x96c>)
 8008076:	f7f9 f84d 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 800807a:	481f      	ldr	r0, [pc, #124]	; (80080f8 <cppLoop+0x930>)
 800807c:	f7fa f816 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008080:	4603      	mov	r3, r0
 8008082:	2b10      	cmp	r3, #16
 8008084:	bf0c      	ite	eq
 8008086:	2301      	moveq	r3, #1
 8008088:	2300      	movne	r3, #0
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d053      	beq.n	8008138 <cppLoop+0x970>
			led.LR(-1, 1);
 8008090:	2201      	movs	r2, #1
 8008092:	f04f 31ff 	mov.w	r1, #4294967295
 8008096:	4819      	ldr	r0, [pc, #100]	; (80080fc <cppLoop+0x934>)
 8008098:	f7fa f928 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 800809c:	2064      	movs	r0, #100	; 0x64
 800809e:	f001 fa5b 	bl	8009558 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80080a2:	4b21      	ldr	r3, [pc, #132]	; (8008128 <cppLoop+0x960>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7f8 fa66 	bl	8000578 <__aeabi_f2d>
 80080ac:	a310      	add	r3, pc, #64	; (adr r3, 80080f0 <cppLoop+0x928>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 f903 	bl	80002bc <__adddf3>
 80080b6:	4603      	mov	r3, r0
 80080b8:	460c      	mov	r4, r1
 80080ba:	4618      	mov	r0, r3
 80080bc:	4621      	mov	r1, r4
 80080be:	f7f8 fdab 	bl	8000c18 <__aeabi_d2f>
 80080c2:	4602      	mov	r2, r0
 80080c4:	4b18      	ldr	r3, [pc, #96]	; (8008128 <cppLoop+0x960>)
 80080c6:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80080c8:	2200      	movs	r2, #0
 80080ca:	f04f 31ff 	mov.w	r1, #4294967295
 80080ce:	480b      	ldr	r0, [pc, #44]	; (80080fc <cppLoop+0x934>)
 80080d0:	f7fa f90c 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80080d4:	f001 b8fb 	b.w	80092ce <cppLoop+0x1b06>
 80080d8:	88e368f1 	.word	0x88e368f1
 80080dc:	3ee4f8b5 	.word	0x3ee4f8b5
 80080e0:	eb1c432d 	.word	0xeb1c432d
 80080e4:	3f1a36e2 	.word	0x3f1a36e2
 80080e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80080ec:	3eb0c6f7 	.word	0x3eb0c6f7
 80080f0:	9999999a 	.word	0x9999999a
 80080f4:	3fb99999 	.word	0x3fb99999
 80080f8:	200005f8 	.word	0x200005f8
 80080fc:	20000604 	.word	0x20000604
 8008100:	2004032c 	.word	0x2004032c
 8008104:	20040338 	.word	0x20040338
 8008108:	20040340 	.word	0x20040340
 800810c:	20040348 	.word	0x20040348
 8008110:	08019878 	.word	0x08019878
 8008114:	08019880 	.word	0x08019880
 8008118:	08019888 	.word	0x08019888
 800811c:	08019890 	.word	0x08019890
 8008120:	2001bc54 	.word	0x2001bc54
 8008124:	08019898 	.word	0x08019898
 8008128:	20040350 	.word	0x20040350
 800812c:	080198a4 	.word	0x080198a4
 8008130:	2001bc50 	.word	0x2001bc50
 8008134:	080198b0 	.word	0x080198b0
		else if(joy_stick.getValue() == JOY_L){
 8008138:	48b5      	ldr	r0, [pc, #724]	; (8008410 <cppLoop+0xc48>)
 800813a:	f7f9 ffb7 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800813e:	4603      	mov	r3, r0
 8008140:	2b01      	cmp	r3, #1
 8008142:	bf0c      	ite	eq
 8008144:	2301      	moveq	r3, #1
 8008146:	2300      	movne	r3, #0
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d023      	beq.n	8008196 <cppLoop+0x9ce>
			led.LR(-1, 1);
 800814e:	2201      	movs	r2, #1
 8008150:	f04f 31ff 	mov.w	r1, #4294967295
 8008154:	48af      	ldr	r0, [pc, #700]	; (8008414 <cppLoop+0xc4c>)
 8008156:	f7fa f8c9 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 800815a:	2064      	movs	r0, #100	; 0x64
 800815c:	f001 f9fc 	bl	8009558 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008160:	4bad      	ldr	r3, [pc, #692]	; (8008418 <cppLoop+0xc50>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4618      	mov	r0, r3
 8008166:	f7f8 fa07 	bl	8000578 <__aeabi_f2d>
 800816a:	a3a7      	add	r3, pc, #668	; (adr r3, 8008408 <cppLoop+0xc40>)
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	f7f8 f8a2 	bl	80002b8 <__aeabi_dsub>
 8008174:	4603      	mov	r3, r0
 8008176:	460c      	mov	r4, r1
 8008178:	4618      	mov	r0, r3
 800817a:	4621      	mov	r1, r4
 800817c:	f7f8 fd4c 	bl	8000c18 <__aeabi_d2f>
 8008180:	4602      	mov	r2, r0
 8008182:	4ba5      	ldr	r3, [pc, #660]	; (8008418 <cppLoop+0xc50>)
 8008184:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008186:	2200      	movs	r2, #0
 8008188:	f04f 31ff 	mov.w	r1, #4294967295
 800818c:	48a1      	ldr	r0, [pc, #644]	; (8008414 <cppLoop+0xc4c>)
 800818e:	f7fa f8ad 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008192:	f001 b89c 	b.w	80092ce <cppLoop+0x1b06>
		else if(joy_stick.getValue() == JOY_C){
 8008196:	489e      	ldr	r0, [pc, #632]	; (8008410 <cppLoop+0xc48>)
 8008198:	f7f9 ff88 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800819c:	4603      	mov	r3, r0
 800819e:	2b02      	cmp	r3, #2
 80081a0:	bf0c      	ite	eq
 80081a2:	2301      	moveq	r3, #1
 80081a4:	2300      	movne	r3, #0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f001 8090 	beq.w	80092ce <cppLoop+0x1b06>
			led.LR(-1, 1);
 80081ae:	2201      	movs	r2, #1
 80081b0:	f04f 31ff 	mov.w	r1, #4294967295
 80081b4:	4897      	ldr	r0, [pc, #604]	; (8008414 <cppLoop+0xc4c>)
 80081b6:	f7fa f899 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 80081ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80081be:	f001 f9cb 	bl	8009558 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80081c2:	2300      	movs	r3, #0
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	4b94      	ldr	r3, [pc, #592]	; (8008418 <cppLoop+0xc50>)
 80081c8:	2201      	movs	r2, #1
 80081ca:	4994      	ldr	r1, [pc, #592]	; (800841c <cppLoop+0xc54>)
 80081cc:	4894      	ldr	r0, [pc, #592]	; (8008420 <cppLoop+0xc58>)
 80081ce:	f7f9 fb55 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80081d2:	4b91      	ldr	r3, [pc, #580]	; (8008418 <cppLoop+0xc50>)
 80081d4:	edd3 7a00 	vldr	s15, [r3]
 80081d8:	eeb0 0a67 	vmov.f32	s0, s15
 80081dc:	4891      	ldr	r0, [pc, #580]	; (8008424 <cppLoop+0xc5c>)
 80081de:	f7fb fd06 	bl	8003bee <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80081e2:	2200      	movs	r2, #0
 80081e4:	f04f 31ff 	mov.w	r1, #4294967295
 80081e8:	488a      	ldr	r0, [pc, #552]	; (8008414 <cppLoop+0xc4c>)
 80081ea:	f7fa f87f 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80081ee:	f001 b86e 	b.w	80092ce <cppLoop+0x1b06>

	case 3:
		led.fullColor('Y');
 80081f2:	2159      	movs	r1, #89	; 0x59
 80081f4:	4887      	ldr	r0, [pc, #540]	; (8008414 <cppLoop+0xc4c>)
 80081f6:	f7f9 ffbd 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80081fa:	f7f8 ff51 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80081fe:	2100      	movs	r1, #0
 8008200:	2000      	movs	r0, #0
 8008202:	f7f8 ff5d 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8008206:	4b88      	ldr	r3, [pc, #544]	; (8008428 <cppLoop+0xc60>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f7f8 f9b4 	bl	8000578 <__aeabi_f2d>
 8008210:	4603      	mov	r3, r0
 8008212:	460c      	mov	r4, r1
 8008214:	461a      	mov	r2, r3
 8008216:	4623      	mov	r3, r4
 8008218:	4884      	ldr	r0, [pc, #528]	; (800842c <cppLoop+0xc64>)
 800821a:	f7f8 ff7b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800821e:	2101      	movs	r1, #1
 8008220:	2000      	movs	r0, #0
 8008222:	f7f8 ff4d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008226:	4b82      	ldr	r3, [pc, #520]	; (8008430 <cppLoop+0xc68>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f7f8 f9a4 	bl	8000578 <__aeabi_f2d>
 8008230:	4603      	mov	r3, r0
 8008232:	460c      	mov	r4, r1
 8008234:	461a      	mov	r2, r3
 8008236:	4623      	mov	r3, r4
 8008238:	487e      	ldr	r0, [pc, #504]	; (8008434 <cppLoop+0xc6c>)
 800823a:	f7f8 ff6b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800823e:	4874      	ldr	r0, [pc, #464]	; (8008410 <cppLoop+0xc48>)
 8008240:	f7f9 ff34 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008244:	4603      	mov	r3, r0
 8008246:	2b02      	cmp	r3, #2
 8008248:	bf0c      	ite	eq
 800824a:	2301      	moveq	r3, #1
 800824c:	2300      	movne	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	f001 803e 	beq.w	80092d2 <cppLoop+0x1b0a>
			HAL_Delay(500);
 8008256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800825a:	f001 f97d 	bl	8009558 <HAL_Delay>

			led.LR(1, -1);
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	2101      	movs	r1, #1
 8008264:	486b      	ldr	r0, [pc, #428]	; (8008414 <cppLoop+0xc4c>)
 8008266:	f7fa f841 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800826a:	2101      	movs	r1, #1
 800826c:	486d      	ldr	r0, [pc, #436]	; (8008424 <cppLoop+0xc5c>)
 800826e:	f7fb ff03 	bl	8004078 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008272:	4b6f      	ldr	r3, [pc, #444]	; (8008430 <cppLoop+0xc68>)
 8008274:	edd3 7a00 	vldr	s15, [r3]
 8008278:	eeb0 0a67 	vmov.f32	s0, s15
 800827c:	4869      	ldr	r0, [pc, #420]	; (8008424 <cppLoop+0xc5c>)
 800827e:	f7fb fcb6 	bl	8003bee <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008282:	4b69      	ldr	r3, [pc, #420]	; (8008428 <cppLoop+0xc60>)
 8008284:	edd3 7a00 	vldr	s15, [r3]
 8008288:	eeb0 0a67 	vmov.f32	s0, s15
 800828c:	4865      	ldr	r0, [pc, #404]	; (8008424 <cppLoop+0xc5c>)
 800828e:	f7fb fcbe 	bl	8003c0e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008292:	4b67      	ldr	r3, [pc, #412]	; (8008430 <cppLoop+0xc68>)
 8008294:	edd3 7a00 	vldr	s15, [r3]
 8008298:	eeb0 0a67 	vmov.f32	s0, s15
 800829c:	4861      	ldr	r0, [pc, #388]	; (8008424 <cppLoop+0xc5c>)
 800829e:	f7fb fcd6 	bl	8003c4e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80082a2:	4860      	ldr	r0, [pc, #384]	; (8008424 <cppLoop+0xc5c>)
 80082a4:	f7fc f810 	bl	80042c8 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80082a8:	485e      	ldr	r0, [pc, #376]	; (8008424 <cppLoop+0xc5c>)
 80082aa:	f7fb ff23 	bl	80040f4 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80082ae:	f04f 32ff 	mov.w	r2, #4294967295
 80082b2:	2100      	movs	r1, #0
 80082b4:	4857      	ldr	r0, [pc, #348]	; (8008414 <cppLoop+0xc4c>)
 80082b6:	f7fa f819 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 80082ba:	f001 b80a 	b.w	80092d2 <cppLoop+0x1b0a>

	case 4:
		led.fullColor('G');
 80082be:	2147      	movs	r1, #71	; 0x47
 80082c0:	4854      	ldr	r0, [pc, #336]	; (8008414 <cppLoop+0xc4c>)
 80082c2:	f7f9 ff57 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80082c6:	f7f8 feeb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80082ca:	2100      	movs	r1, #0
 80082cc:	2000      	movs	r0, #0
 80082ce:	f7f8 fef7 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80082d2:	4854      	ldr	r0, [pc, #336]	; (8008424 <cppLoop+0xc5c>)
 80082d4:	f7fb fceb 	bl	8003cae <_ZN9LineTrace14getMaxVelocityEv>
 80082d8:	ee10 3a10 	vmov	r3, s0
 80082dc:	4618      	mov	r0, r3
 80082de:	f7f8 f94b 	bl	8000578 <__aeabi_f2d>
 80082e2:	4603      	mov	r3, r0
 80082e4:	460c      	mov	r4, r1
 80082e6:	461a      	mov	r2, r3
 80082e8:	4623      	mov	r3, r4
 80082ea:	4850      	ldr	r0, [pc, #320]	; (800842c <cppLoop+0xc64>)
 80082ec:	f7f8 ff12 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80082f0:	2101      	movs	r1, #1
 80082f2:	2000      	movs	r0, #0
 80082f4:	f7f8 fee4 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80082f8:	484a      	ldr	r0, [pc, #296]	; (8008424 <cppLoop+0xc5c>)
 80082fa:	f7fb fcf8 	bl	8003cee <_ZN9LineTrace14getMinVelocityEv>
 80082fe:	ee10 3a10 	vmov	r3, s0
 8008302:	4618      	mov	r0, r3
 8008304:	f7f8 f938 	bl	8000578 <__aeabi_f2d>
 8008308:	4603      	mov	r3, r0
 800830a:	460c      	mov	r4, r1
 800830c:	461a      	mov	r2, r3
 800830e:	4623      	mov	r3, r4
 8008310:	4849      	ldr	r0, [pc, #292]	; (8008438 <cppLoop+0xc70>)
 8008312:	f7f8 feff 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008316:	483e      	ldr	r0, [pc, #248]	; (8008410 <cppLoop+0xc48>)
 8008318:	f7f9 fec8 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800831c:	4603      	mov	r3, r0
 800831e:	2b08      	cmp	r3, #8
 8008320:	bf0c      	ite	eq
 8008322:	2301      	moveq	r3, #1
 8008324:	2300      	movne	r3, #0
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d022      	beq.n	8008372 <cppLoop+0xbaa>
			led.LR(-1, 1);
 800832c:	2201      	movs	r2, #1
 800832e:	f04f 31ff 	mov.w	r1, #4294967295
 8008332:	4838      	ldr	r0, [pc, #224]	; (8008414 <cppLoop+0xc4c>)
 8008334:	f7f9 ffda 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008338:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800833c:	f001 f90c 	bl	8009558 <HAL_Delay>

			selector_vel++;
 8008340:	4b3e      	ldr	r3, [pc, #248]	; (800843c <cppLoop+0xc74>)
 8008342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008346:	b29b      	uxth	r3, r3
 8008348:	3301      	adds	r3, #1
 800834a:	b29b      	uxth	r3, r3
 800834c:	b21a      	sxth	r2, r3
 800834e:	4b3b      	ldr	r3, [pc, #236]	; (800843c <cppLoop+0xc74>)
 8008350:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008352:	4b3a      	ldr	r3, [pc, #232]	; (800843c <cppLoop+0xc74>)
 8008354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008358:	2b01      	cmp	r3, #1
 800835a:	dd02      	ble.n	8008362 <cppLoop+0xb9a>
 800835c:	4b37      	ldr	r3, [pc, #220]	; (800843c <cppLoop+0xc74>)
 800835e:	2200      	movs	r2, #0
 8008360:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008362:	2200      	movs	r2, #0
 8008364:	f04f 31ff 	mov.w	r1, #4294967295
 8008368:	482a      	ldr	r0, [pc, #168]	; (8008414 <cppLoop+0xc4c>)
 800836a:	f7f9 ffbf 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 800836e:	f000 bfb2 	b.w	80092d6 <cppLoop+0x1b0e>
		else if(joy_stick.getValue() == JOY_R){
 8008372:	4827      	ldr	r0, [pc, #156]	; (8008410 <cppLoop+0xc48>)
 8008374:	f7f9 fe9a 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008378:	4603      	mov	r3, r0
 800837a:	2b10      	cmp	r3, #16
 800837c:	bf0c      	ite	eq
 800837e:	2301      	moveq	r3, #1
 8008380:	2300      	movne	r3, #0
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d05b      	beq.n	8008440 <cppLoop+0xc78>
			led.LR(-1, 1);
 8008388:	2201      	movs	r2, #1
 800838a:	f04f 31ff 	mov.w	r1, #4294967295
 800838e:	4821      	ldr	r0, [pc, #132]	; (8008414 <cppLoop+0xc4c>)
 8008390:	f7f9 ffac 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008394:	2064      	movs	r0, #100	; 0x64
 8008396:	f001 f8df 	bl	8009558 <HAL_Delay>
			if(selector_vel == 0)
 800839a:	4b28      	ldr	r3, [pc, #160]	; (800843c <cppLoop+0xc74>)
 800839c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d113      	bne.n	80083cc <cppLoop+0xc04>
				adj_max_velocity = adj_max_velocity + 0.1;
 80083a4:	4b20      	ldr	r3, [pc, #128]	; (8008428 <cppLoop+0xc60>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7f8 f8e5 	bl	8000578 <__aeabi_f2d>
 80083ae:	a316      	add	r3, pc, #88	; (adr r3, 8008408 <cppLoop+0xc40>)
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f7f7 ff82 	bl	80002bc <__adddf3>
 80083b8:	4603      	mov	r3, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	4618      	mov	r0, r3
 80083be:	4621      	mov	r1, r4
 80083c0:	f7f8 fc2a 	bl	8000c18 <__aeabi_d2f>
 80083c4:	4602      	mov	r2, r0
 80083c6:	4b18      	ldr	r3, [pc, #96]	; (8008428 <cppLoop+0xc60>)
 80083c8:	601a      	str	r2, [r3, #0]
 80083ca:	e012      	b.n	80083f2 <cppLoop+0xc2a>
				adj_min_velocity = adj_min_velocity + 0.1;
 80083cc:	4b18      	ldr	r3, [pc, #96]	; (8008430 <cppLoop+0xc68>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7f8 f8d1 	bl	8000578 <__aeabi_f2d>
 80083d6:	a30c      	add	r3, pc, #48	; (adr r3, 8008408 <cppLoop+0xc40>)
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	f7f7 ff6e 	bl	80002bc <__adddf3>
 80083e0:	4603      	mov	r3, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	4618      	mov	r0, r3
 80083e6:	4621      	mov	r1, r4
 80083e8:	f7f8 fc16 	bl	8000c18 <__aeabi_d2f>
 80083ec:	4602      	mov	r2, r0
 80083ee:	4b10      	ldr	r3, [pc, #64]	; (8008430 <cppLoop+0xc68>)
 80083f0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80083f2:	2200      	movs	r2, #0
 80083f4:	f04f 31ff 	mov.w	r1, #4294967295
 80083f8:	4806      	ldr	r0, [pc, #24]	; (8008414 <cppLoop+0xc4c>)
 80083fa:	f7f9 ff77 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80083fe:	f000 bf6a 	b.w	80092d6 <cppLoop+0x1b0e>
 8008402:	bf00      	nop
 8008404:	f3af 8000 	nop.w
 8008408:	9999999a 	.word	0x9999999a
 800840c:	3fb99999 	.word	0x3fb99999
 8008410:	200005f8 	.word	0x200005f8
 8008414:	20000604 	.word	0x20000604
 8008418:	20040350 	.word	0x20040350
 800841c:	080198bc 	.word	0x080198bc
 8008420:	08019880 	.word	0x08019880
 8008424:	2001bc54 	.word	0x2001bc54
 8008428:	20040358 	.word	0x20040358
 800842c:	080198c8 	.word	0x080198c8
 8008430:	20040368 	.word	0x20040368
 8008434:	080198a4 	.word	0x080198a4
 8008438:	080198b0 	.word	0x080198b0
 800843c:	20040332 	.word	0x20040332
		else if(joy_stick.getValue() == JOY_L){
 8008440:	48bb      	ldr	r0, [pc, #748]	; (8008730 <cppLoop+0xf68>)
 8008442:	f7f9 fe33 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008446:	4603      	mov	r3, r0
 8008448:	2b01      	cmp	r3, #1
 800844a:	bf0c      	ite	eq
 800844c:	2301      	moveq	r3, #1
 800844e:	2300      	movne	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d03c      	beq.n	80084d0 <cppLoop+0xd08>
			led.LR(-1, 1);
 8008456:	2201      	movs	r2, #1
 8008458:	f04f 31ff 	mov.w	r1, #4294967295
 800845c:	48b5      	ldr	r0, [pc, #724]	; (8008734 <cppLoop+0xf6c>)
 800845e:	f7f9 ff45 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008462:	2064      	movs	r0, #100	; 0x64
 8008464:	f001 f878 	bl	8009558 <HAL_Delay>
			if(selector_vel == 0)
 8008468:	4bb3      	ldr	r3, [pc, #716]	; (8008738 <cppLoop+0xf70>)
 800846a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d113      	bne.n	800849a <cppLoop+0xcd2>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008472:	4bb2      	ldr	r3, [pc, #712]	; (800873c <cppLoop+0xf74>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4618      	mov	r0, r3
 8008478:	f7f8 f87e 	bl	8000578 <__aeabi_f2d>
 800847c:	a3aa      	add	r3, pc, #680	; (adr r3, 8008728 <cppLoop+0xf60>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f7f7 ff19 	bl	80002b8 <__aeabi_dsub>
 8008486:	4603      	mov	r3, r0
 8008488:	460c      	mov	r4, r1
 800848a:	4618      	mov	r0, r3
 800848c:	4621      	mov	r1, r4
 800848e:	f7f8 fbc3 	bl	8000c18 <__aeabi_d2f>
 8008492:	4602      	mov	r2, r0
 8008494:	4ba9      	ldr	r3, [pc, #676]	; (800873c <cppLoop+0xf74>)
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	e012      	b.n	80084c0 <cppLoop+0xcf8>
				adj_min_velocity = adj_min_velocity - 0.1;
 800849a:	4ba9      	ldr	r3, [pc, #676]	; (8008740 <cppLoop+0xf78>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7f8 f86a 	bl	8000578 <__aeabi_f2d>
 80084a4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008728 <cppLoop+0xf60>)
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	f7f7 ff05 	bl	80002b8 <__aeabi_dsub>
 80084ae:	4603      	mov	r3, r0
 80084b0:	460c      	mov	r4, r1
 80084b2:	4618      	mov	r0, r3
 80084b4:	4621      	mov	r1, r4
 80084b6:	f7f8 fbaf 	bl	8000c18 <__aeabi_d2f>
 80084ba:	4602      	mov	r2, r0
 80084bc:	4ba0      	ldr	r3, [pc, #640]	; (8008740 <cppLoop+0xf78>)
 80084be:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80084c0:	2200      	movs	r2, #0
 80084c2:	f04f 31ff 	mov.w	r1, #4294967295
 80084c6:	489b      	ldr	r0, [pc, #620]	; (8008734 <cppLoop+0xf6c>)
 80084c8:	f7f9 ff10 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80084cc:	f000 bf03 	b.w	80092d6 <cppLoop+0x1b0e>
		else if(joy_stick.getValue() == JOY_C){
 80084d0:	4897      	ldr	r0, [pc, #604]	; (8008730 <cppLoop+0xf68>)
 80084d2:	f7f9 fdeb 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b02      	cmp	r3, #2
 80084da:	bf0c      	ite	eq
 80084dc:	2301      	moveq	r3, #1
 80084de:	2300      	movne	r3, #0
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 86f7 	beq.w	80092d6 <cppLoop+0x1b0e>
			led.LR(-1, 1);
 80084e8:	2201      	movs	r2, #1
 80084ea:	f04f 31ff 	mov.w	r1, #4294967295
 80084ee:	4891      	ldr	r0, [pc, #580]	; (8008734 <cppLoop+0xf6c>)
 80084f0:	f7f9 fefc 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084f8:	f001 f82e 	bl	8009558 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80084fc:	2300      	movs	r3, #0
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	4b8e      	ldr	r3, [pc, #568]	; (800873c <cppLoop+0xf74>)
 8008502:	2201      	movs	r2, #1
 8008504:	498f      	ldr	r1, [pc, #572]	; (8008744 <cppLoop+0xf7c>)
 8008506:	4890      	ldr	r0, [pc, #576]	; (8008748 <cppLoop+0xf80>)
 8008508:	f7f9 f9b8 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 800850c:	2300      	movs	r3, #0
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	4b8b      	ldr	r3, [pc, #556]	; (8008740 <cppLoop+0xf78>)
 8008512:	2201      	movs	r2, #1
 8008514:	498d      	ldr	r1, [pc, #564]	; (800874c <cppLoop+0xf84>)
 8008516:	488c      	ldr	r0, [pc, #560]	; (8008748 <cppLoop+0xf80>)
 8008518:	f7f9 f9b0 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 800851c:	4b87      	ldr	r3, [pc, #540]	; (800873c <cppLoop+0xf74>)
 800851e:	edd3 7a00 	vldr	s15, [r3]
 8008522:	eeb0 0a67 	vmov.f32	s0, s15
 8008526:	488a      	ldr	r0, [pc, #552]	; (8008750 <cppLoop+0xf88>)
 8008528:	f7fb fb71 	bl	8003c0e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800852c:	4b84      	ldr	r3, [pc, #528]	; (8008740 <cppLoop+0xf78>)
 800852e:	edd3 7a00 	vldr	s15, [r3]
 8008532:	eeb0 0a67 	vmov.f32	s0, s15
 8008536:	4886      	ldr	r0, [pc, #536]	; (8008750 <cppLoop+0xf88>)
 8008538:	f7fb fb89 	bl	8003c4e <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 800853c:	2200      	movs	r2, #0
 800853e:	f04f 31ff 	mov.w	r1, #4294967295
 8008542:	487c      	ldr	r0, [pc, #496]	; (8008734 <cppLoop+0xf6c>)
 8008544:	f7f9 fed2 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008548:	f000 bec5 	b.w	80092d6 <cppLoop+0x1b0e>

	case 5:
		led.fullColor('M');
 800854c:	214d      	movs	r1, #77	; 0x4d
 800854e:	4879      	ldr	r0, [pc, #484]	; (8008734 <cppLoop+0xf6c>)
 8008550:	f7f9 fe10 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008554:	f7f8 fda4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008558:	2100      	movs	r1, #0
 800855a:	2000      	movs	r0, #0
 800855c:	f7f8 fdb0 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008560:	4b7c      	ldr	r3, [pc, #496]	; (8008754 <cppLoop+0xf8c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	f7f8 f807 	bl	8000578 <__aeabi_f2d>
 800856a:	4603      	mov	r3, r0
 800856c:	460c      	mov	r4, r1
 800856e:	461a      	mov	r2, r3
 8008570:	4623      	mov	r3, r4
 8008572:	4879      	ldr	r0, [pc, #484]	; (8008758 <cppLoop+0xf90>)
 8008574:	f7f8 fdce 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008578:	2101      	movs	r1, #1
 800857a:	2000      	movs	r0, #0
 800857c:	f7f8 fda0 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008580:	4b76      	ldr	r3, [pc, #472]	; (800875c <cppLoop+0xf94>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f7f7 fff7 	bl	8000578 <__aeabi_f2d>
 800858a:	4603      	mov	r3, r0
 800858c:	460c      	mov	r4, r1
 800858e:	461a      	mov	r2, r3
 8008590:	4623      	mov	r3, r4
 8008592:	4873      	ldr	r0, [pc, #460]	; (8008760 <cppLoop+0xf98>)
 8008594:	f7f8 fdbe 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008598:	4865      	ldr	r0, [pc, #404]	; (8008730 <cppLoop+0xf68>)
 800859a:	f7f9 fd87 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	bf0c      	ite	eq
 80085a4:	2301      	moveq	r3, #1
 80085a6:	2300      	movne	r3, #0
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 8695 	beq.w	80092da <cppLoop+0x1b12>
			HAL_Delay(500);
 80085b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085b4:	f000 ffd0 	bl	8009558 <HAL_Delay>

			led.LR(1, -1);
 80085b8:	f04f 32ff 	mov.w	r2, #4294967295
 80085bc:	2101      	movs	r1, #1
 80085be:	485d      	ldr	r0, [pc, #372]	; (8008734 <cppLoop+0xf6c>)
 80085c0:	f7f9 fe94 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80085c4:	2102      	movs	r1, #2
 80085c6:	4862      	ldr	r0, [pc, #392]	; (8008750 <cppLoop+0xf88>)
 80085c8:	f7fb fd56 	bl	8004078 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80085cc:	4b63      	ldr	r3, [pc, #396]	; (800875c <cppLoop+0xf94>)
 80085ce:	edd3 7a00 	vldr	s15, [r3]
 80085d2:	eeb0 0a67 	vmov.f32	s0, s15
 80085d6:	485e      	ldr	r0, [pc, #376]	; (8008750 <cppLoop+0xf88>)
 80085d8:	f7fb fb09 	bl	8003bee <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80085dc:	4b5d      	ldr	r3, [pc, #372]	; (8008754 <cppLoop+0xf8c>)
 80085de:	edd3 7a00 	vldr	s15, [r3]
 80085e2:	eeb0 0a67 	vmov.f32	s0, s15
 80085e6:	485a      	ldr	r0, [pc, #360]	; (8008750 <cppLoop+0xf88>)
 80085e8:	f7fb fb21 	bl	8003c2e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80085ec:	4b5b      	ldr	r3, [pc, #364]	; (800875c <cppLoop+0xf94>)
 80085ee:	edd3 7a00 	vldr	s15, [r3]
 80085f2:	eeb0 0a67 	vmov.f32	s0, s15
 80085f6:	4856      	ldr	r0, [pc, #344]	; (8008750 <cppLoop+0xf88>)
 80085f8:	f7fb fb39 	bl	8003c6e <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 80085fc:	4854      	ldr	r0, [pc, #336]	; (8008750 <cppLoop+0xf88>)
 80085fe:	f7fb fe63 	bl	80042c8 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008602:	4853      	ldr	r0, [pc, #332]	; (8008750 <cppLoop+0xf88>)
 8008604:	f7fb fd76 	bl	80040f4 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008608:	f04f 32ff 	mov.w	r2, #4294967295
 800860c:	2100      	movs	r1, #0
 800860e:	4849      	ldr	r0, [pc, #292]	; (8008734 <cppLoop+0xf6c>)
 8008610:	f7f9 fe6c 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 8008614:	f000 be61 	b.w	80092da <cppLoop+0x1b12>

	case 6:
		led.fullColor('R');
 8008618:	2152      	movs	r1, #82	; 0x52
 800861a:	4846      	ldr	r0, [pc, #280]	; (8008734 <cppLoop+0xf6c>)
 800861c:	f7f9 fdaa 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008620:	f7f8 fd3e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008624:	2100      	movs	r1, #0
 8008626:	2000      	movs	r0, #0
 8008628:	f7f8 fd4a 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 800862c:	4848      	ldr	r0, [pc, #288]	; (8008750 <cppLoop+0xf88>)
 800862e:	f7fb fb4e 	bl	8003cce <_ZN9LineTrace15getMaxVelocity2Ev>
 8008632:	ee10 3a10 	vmov	r3, s0
 8008636:	4618      	mov	r0, r3
 8008638:	f7f7 ff9e 	bl	8000578 <__aeabi_f2d>
 800863c:	4603      	mov	r3, r0
 800863e:	460c      	mov	r4, r1
 8008640:	461a      	mov	r2, r3
 8008642:	4623      	mov	r3, r4
 8008644:	4844      	ldr	r0, [pc, #272]	; (8008758 <cppLoop+0xf90>)
 8008646:	f7f8 fd65 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800864a:	2101      	movs	r1, #1
 800864c:	2000      	movs	r0, #0
 800864e:	f7f8 fd37 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008652:	483f      	ldr	r0, [pc, #252]	; (8008750 <cppLoop+0xf88>)
 8008654:	f7fb fb5b 	bl	8003d0e <_ZN9LineTrace15getMinVelocity2Ev>
 8008658:	ee10 3a10 	vmov	r3, s0
 800865c:	4618      	mov	r0, r3
 800865e:	f7f7 ff8b 	bl	8000578 <__aeabi_f2d>
 8008662:	4603      	mov	r3, r0
 8008664:	460c      	mov	r4, r1
 8008666:	461a      	mov	r2, r3
 8008668:	4623      	mov	r3, r4
 800866a:	483e      	ldr	r0, [pc, #248]	; (8008764 <cppLoop+0xf9c>)
 800866c:	f7f8 fd52 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008670:	482f      	ldr	r0, [pc, #188]	; (8008730 <cppLoop+0xf68>)
 8008672:	f7f9 fd1b 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008676:	4603      	mov	r3, r0
 8008678:	2b08      	cmp	r3, #8
 800867a:	bf0c      	ite	eq
 800867c:	2301      	moveq	r3, #1
 800867e:	2300      	movne	r3, #0
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d022      	beq.n	80086cc <cppLoop+0xf04>
			led.LR(-1, 1);
 8008686:	2201      	movs	r2, #1
 8008688:	f04f 31ff 	mov.w	r1, #4294967295
 800868c:	4829      	ldr	r0, [pc, #164]	; (8008734 <cppLoop+0xf6c>)
 800868e:	f7f9 fe2d 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008692:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008696:	f000 ff5f 	bl	8009558 <HAL_Delay>

			selector_vel2++;
 800869a:	4b33      	ldr	r3, [pc, #204]	; (8008768 <cppLoop+0xfa0>)
 800869c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3301      	adds	r3, #1
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	b21a      	sxth	r2, r3
 80086a8:	4b2f      	ldr	r3, [pc, #188]	; (8008768 <cppLoop+0xfa0>)
 80086aa:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 80086ac:	4b2e      	ldr	r3, [pc, #184]	; (8008768 <cppLoop+0xfa0>)
 80086ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	dd02      	ble.n	80086bc <cppLoop+0xef4>
 80086b6:	4b2c      	ldr	r3, [pc, #176]	; (8008768 <cppLoop+0xfa0>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80086bc:	2200      	movs	r2, #0
 80086be:	f04f 31ff 	mov.w	r1, #4294967295
 80086c2:	481c      	ldr	r0, [pc, #112]	; (8008734 <cppLoop+0xf6c>)
 80086c4:	f7f9 fe12 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 80086c8:	f000 be09 	b.w	80092de <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_R){
 80086cc:	4818      	ldr	r0, [pc, #96]	; (8008730 <cppLoop+0xf68>)
 80086ce:	f7f9 fced 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b10      	cmp	r3, #16
 80086d6:	bf0c      	ite	eq
 80086d8:	2301      	moveq	r3, #1
 80086da:	2300      	movne	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d05f      	beq.n	80087a2 <cppLoop+0xfda>
			led.LR(-1, 1);
 80086e2:	2201      	movs	r2, #1
 80086e4:	f04f 31ff 	mov.w	r1, #4294967295
 80086e8:	4812      	ldr	r0, [pc, #72]	; (8008734 <cppLoop+0xf6c>)
 80086ea:	f7f9 fdff 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80086ee:	2064      	movs	r0, #100	; 0x64
 80086f0:	f000 ff32 	bl	8009558 <HAL_Delay>
			if(selector_vel2 == 0)
 80086f4:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <cppLoop+0xfa0>)
 80086f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d136      	bne.n	800876c <cppLoop+0xfa4>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 80086fe:	4b15      	ldr	r3, [pc, #84]	; (8008754 <cppLoop+0xf8c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4618      	mov	r0, r3
 8008704:	f7f7 ff38 	bl	8000578 <__aeabi_f2d>
 8008708:	a307      	add	r3, pc, #28	; (adr r3, 8008728 <cppLoop+0xf60>)
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	f7f7 fdd5 	bl	80002bc <__adddf3>
 8008712:	4603      	mov	r3, r0
 8008714:	460c      	mov	r4, r1
 8008716:	4618      	mov	r0, r3
 8008718:	4621      	mov	r1, r4
 800871a:	f7f8 fa7d 	bl	8000c18 <__aeabi_d2f>
 800871e:	4602      	mov	r2, r0
 8008720:	4b0c      	ldr	r3, [pc, #48]	; (8008754 <cppLoop+0xf8c>)
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	e035      	b.n	8008792 <cppLoop+0xfca>
 8008726:	bf00      	nop
 8008728:	9999999a 	.word	0x9999999a
 800872c:	3fb99999 	.word	0x3fb99999
 8008730:	200005f8 	.word	0x200005f8
 8008734:	20000604 	.word	0x20000604
 8008738:	20040332 	.word	0x20040332
 800873c:	20040358 	.word	0x20040358
 8008740:	20040368 	.word	0x20040368
 8008744:	080198d4 	.word	0x080198d4
 8008748:	08019880 	.word	0x08019880
 800874c:	080198e0 	.word	0x080198e0
 8008750:	2001bc54 	.word	0x2001bc54
 8008754:	20040360 	.word	0x20040360
 8008758:	080198ec 	.word	0x080198ec
 800875c:	20040370 	.word	0x20040370
 8008760:	080198a4 	.word	0x080198a4
 8008764:	080198b0 	.word	0x080198b0
 8008768:	20040334 	.word	0x20040334
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 800876c:	4bba      	ldr	r3, [pc, #744]	; (8008a58 <cppLoop+0x1290>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f7f7 ff01 	bl	8000578 <__aeabi_f2d>
 8008776:	a3b6      	add	r3, pc, #728	; (adr r3, 8008a50 <cppLoop+0x1288>)
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f7f7 fd9e 	bl	80002bc <__adddf3>
 8008780:	4603      	mov	r3, r0
 8008782:	460c      	mov	r4, r1
 8008784:	4618      	mov	r0, r3
 8008786:	4621      	mov	r1, r4
 8008788:	f7f8 fa46 	bl	8000c18 <__aeabi_d2f>
 800878c:	4602      	mov	r2, r0
 800878e:	4bb2      	ldr	r3, [pc, #712]	; (8008a58 <cppLoop+0x1290>)
 8008790:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008792:	2200      	movs	r2, #0
 8008794:	f04f 31ff 	mov.w	r1, #4294967295
 8008798:	48b0      	ldr	r0, [pc, #704]	; (8008a5c <cppLoop+0x1294>)
 800879a:	f7f9 fda7 	bl	80022ec <_ZN3LED2LREaa>
		break;
 800879e:	f000 bd9e 	b.w	80092de <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_L){
 80087a2:	48af      	ldr	r0, [pc, #700]	; (8008a60 <cppLoop+0x1298>)
 80087a4:	f7f9 fc82 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	bf0c      	ite	eq
 80087ae:	2301      	moveq	r3, #1
 80087b0:	2300      	movne	r3, #0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d03c      	beq.n	8008832 <cppLoop+0x106a>
			led.LR(-1, 1);
 80087b8:	2201      	movs	r2, #1
 80087ba:	f04f 31ff 	mov.w	r1, #4294967295
 80087be:	48a7      	ldr	r0, [pc, #668]	; (8008a5c <cppLoop+0x1294>)
 80087c0:	f7f9 fd94 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80087c4:	2064      	movs	r0, #100	; 0x64
 80087c6:	f000 fec7 	bl	8009558 <HAL_Delay>
			if(selector_vel2 == 0)
 80087ca:	4ba6      	ldr	r3, [pc, #664]	; (8008a64 <cppLoop+0x129c>)
 80087cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d113      	bne.n	80087fc <cppLoop+0x1034>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80087d4:	4ba4      	ldr	r3, [pc, #656]	; (8008a68 <cppLoop+0x12a0>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7f7 fecd 	bl	8000578 <__aeabi_f2d>
 80087de:	a39c      	add	r3, pc, #624	; (adr r3, 8008a50 <cppLoop+0x1288>)
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	f7f7 fd68 	bl	80002b8 <__aeabi_dsub>
 80087e8:	4603      	mov	r3, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	4618      	mov	r0, r3
 80087ee:	4621      	mov	r1, r4
 80087f0:	f7f8 fa12 	bl	8000c18 <__aeabi_d2f>
 80087f4:	4602      	mov	r2, r0
 80087f6:	4b9c      	ldr	r3, [pc, #624]	; (8008a68 <cppLoop+0x12a0>)
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	e012      	b.n	8008822 <cppLoop+0x105a>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 80087fc:	4b96      	ldr	r3, [pc, #600]	; (8008a58 <cppLoop+0x1290>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f7f7 feb9 	bl	8000578 <__aeabi_f2d>
 8008806:	a392      	add	r3, pc, #584	; (adr r3, 8008a50 <cppLoop+0x1288>)
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	f7f7 fd54 	bl	80002b8 <__aeabi_dsub>
 8008810:	4603      	mov	r3, r0
 8008812:	460c      	mov	r4, r1
 8008814:	4618      	mov	r0, r3
 8008816:	4621      	mov	r1, r4
 8008818:	f7f8 f9fe 	bl	8000c18 <__aeabi_d2f>
 800881c:	4602      	mov	r2, r0
 800881e:	4b8e      	ldr	r3, [pc, #568]	; (8008a58 <cppLoop+0x1290>)
 8008820:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008822:	2200      	movs	r2, #0
 8008824:	f04f 31ff 	mov.w	r1, #4294967295
 8008828:	488c      	ldr	r0, [pc, #560]	; (8008a5c <cppLoop+0x1294>)
 800882a:	f7f9 fd5f 	bl	80022ec <_ZN3LED2LREaa>
		break;
 800882e:	f000 bd56 	b.w	80092de <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_C){
 8008832:	488b      	ldr	r0, [pc, #556]	; (8008a60 <cppLoop+0x1298>)
 8008834:	f7f9 fc3a 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008838:	4603      	mov	r3, r0
 800883a:	2b02      	cmp	r3, #2
 800883c:	bf0c      	ite	eq
 800883e:	2301      	moveq	r3, #1
 8008840:	2300      	movne	r3, #0
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 854a 	beq.w	80092de <cppLoop+0x1b16>
			led.LR(-1, 1);
 800884a:	2201      	movs	r2, #1
 800884c:	f04f 31ff 	mov.w	r1, #4294967295
 8008850:	4882      	ldr	r0, [pc, #520]	; (8008a5c <cppLoop+0x1294>)
 8008852:	f7f9 fd4b 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008856:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800885a:	f000 fe7d 	bl	8009558 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 800885e:	2300      	movs	r3, #0
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	4b81      	ldr	r3, [pc, #516]	; (8008a68 <cppLoop+0x12a0>)
 8008864:	2201      	movs	r2, #1
 8008866:	4981      	ldr	r1, [pc, #516]	; (8008a6c <cppLoop+0x12a4>)
 8008868:	4881      	ldr	r0, [pc, #516]	; (8008a70 <cppLoop+0x12a8>)
 800886a:	f7f9 f807 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 800886e:	2300      	movs	r3, #0
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	4b79      	ldr	r3, [pc, #484]	; (8008a58 <cppLoop+0x1290>)
 8008874:	2201      	movs	r2, #1
 8008876:	497f      	ldr	r1, [pc, #508]	; (8008a74 <cppLoop+0x12ac>)
 8008878:	487d      	ldr	r0, [pc, #500]	; (8008a70 <cppLoop+0x12a8>)
 800887a:	f7f8 ffff 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 800887e:	4b7a      	ldr	r3, [pc, #488]	; (8008a68 <cppLoop+0x12a0>)
 8008880:	edd3 7a00 	vldr	s15, [r3]
 8008884:	eeb0 0a67 	vmov.f32	s0, s15
 8008888:	487b      	ldr	r0, [pc, #492]	; (8008a78 <cppLoop+0x12b0>)
 800888a:	f7fb f9d0 	bl	8003c2e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 800888e:	4b72      	ldr	r3, [pc, #456]	; (8008a58 <cppLoop+0x1290>)
 8008890:	edd3 7a00 	vldr	s15, [r3]
 8008894:	eeb0 0a67 	vmov.f32	s0, s15
 8008898:	4877      	ldr	r0, [pc, #476]	; (8008a78 <cppLoop+0x12b0>)
 800889a:	f7fb f9e8 	bl	8003c6e <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 800889e:	2200      	movs	r2, #0
 80088a0:	f04f 31ff 	mov.w	r1, #4294967295
 80088a4:	486d      	ldr	r0, [pc, #436]	; (8008a5c <cppLoop+0x1294>)
 80088a6:	f7f9 fd21 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80088aa:	f000 bd18 	b.w	80092de <cppLoop+0x1b16>

	case 7:
		led.fullColor('W');
 80088ae:	2157      	movs	r1, #87	; 0x57
 80088b0:	486a      	ldr	r0, [pc, #424]	; (8008a5c <cppLoop+0x1294>)
 80088b2:	f7f9 fc5f 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80088b6:	f7f8 fbf3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80088ba:	2100      	movs	r1, #0
 80088bc:	2000      	movs	r0, #0
 80088be:	f7f8 fbff 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 80088c2:	486d      	ldr	r0, [pc, #436]	; (8008a78 <cppLoop+0x12b0>)
 80088c4:	f7fb fa67 	bl	8003d96 <_ZN9LineTrace9getMaxAccEv>
 80088c8:	ee10 3a10 	vmov	r3, s0
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7f7 fe53 	bl	8000578 <__aeabi_f2d>
 80088d2:	4603      	mov	r3, r0
 80088d4:	460c      	mov	r4, r1
 80088d6:	461a      	mov	r2, r3
 80088d8:	4623      	mov	r3, r4
 80088da:	4868      	ldr	r0, [pc, #416]	; (8008a7c <cppLoop+0x12b4>)
 80088dc:	f7f8 fc1a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80088e0:	2101      	movs	r1, #1
 80088e2:	2000      	movs	r0, #0
 80088e4:	f7f8 fbec 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 80088e8:	4863      	ldr	r0, [pc, #396]	; (8008a78 <cppLoop+0x12b0>)
 80088ea:	f7fb fa8a 	bl	8003e02 <_ZN9LineTrace9getMaxDecEv>
 80088ee:	ee10 3a10 	vmov	r3, s0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7f7 fe40 	bl	8000578 <__aeabi_f2d>
 80088f8:	4603      	mov	r3, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	461a      	mov	r2, r3
 80088fe:	4623      	mov	r3, r4
 8008900:	485f      	ldr	r0, [pc, #380]	; (8008a80 <cppLoop+0x12b8>)
 8008902:	f7f8 fc07 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008906:	4856      	ldr	r0, [pc, #344]	; (8008a60 <cppLoop+0x1298>)
 8008908:	f7f9 fbd0 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800890c:	4603      	mov	r3, r0
 800890e:	2b08      	cmp	r3, #8
 8008910:	bf0c      	ite	eq
 8008912:	2301      	moveq	r3, #1
 8008914:	2300      	movne	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b00      	cmp	r3, #0
 800891a:	d022      	beq.n	8008962 <cppLoop+0x119a>
			led.LR(-1, 1);
 800891c:	2201      	movs	r2, #1
 800891e:	f04f 31ff 	mov.w	r1, #4294967295
 8008922:	484e      	ldr	r0, [pc, #312]	; (8008a5c <cppLoop+0x1294>)
 8008924:	f7f9 fce2 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008928:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800892c:	f000 fe14 	bl	8009558 <HAL_Delay>

			selector_acc++;
 8008930:	4b54      	ldr	r3, [pc, #336]	; (8008a84 <cppLoop+0x12bc>)
 8008932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008936:	b29b      	uxth	r3, r3
 8008938:	3301      	adds	r3, #1
 800893a:	b29b      	uxth	r3, r3
 800893c:	b21a      	sxth	r2, r3
 800893e:	4b51      	ldr	r3, [pc, #324]	; (8008a84 <cppLoop+0x12bc>)
 8008940:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008942:	4b50      	ldr	r3, [pc, #320]	; (8008a84 <cppLoop+0x12bc>)
 8008944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008948:	2b01      	cmp	r3, #1
 800894a:	dd02      	ble.n	8008952 <cppLoop+0x118a>
 800894c:	4b4d      	ldr	r3, [pc, #308]	; (8008a84 <cppLoop+0x12bc>)
 800894e:	2200      	movs	r2, #0
 8008950:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008952:	2200      	movs	r2, #0
 8008954:	f04f 31ff 	mov.w	r1, #4294967295
 8008958:	4840      	ldr	r0, [pc, #256]	; (8008a5c <cppLoop+0x1294>)
 800895a:	f7f9 fcc7 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 800895e:	f000 bcc0 	b.w	80092e2 <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_R){
 8008962:	483f      	ldr	r0, [pc, #252]	; (8008a60 <cppLoop+0x1298>)
 8008964:	f7f9 fba2 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008968:	4603      	mov	r3, r0
 800896a:	2b10      	cmp	r3, #16
 800896c:	bf0c      	ite	eq
 800896e:	2301      	moveq	r3, #1
 8008970:	2300      	movne	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d03c      	beq.n	80089f2 <cppLoop+0x122a>
			led.LR(-1, 1);
 8008978:	2201      	movs	r2, #1
 800897a:	f04f 31ff 	mov.w	r1, #4294967295
 800897e:	4837      	ldr	r0, [pc, #220]	; (8008a5c <cppLoop+0x1294>)
 8008980:	f7f9 fcb4 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008984:	2064      	movs	r0, #100	; 0x64
 8008986:	f000 fde7 	bl	8009558 <HAL_Delay>
			if(selector_acc == 0){
 800898a:	4b3e      	ldr	r3, [pc, #248]	; (8008a84 <cppLoop+0x12bc>)
 800898c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d113      	bne.n	80089bc <cppLoop+0x11f4>
				adj_acc = adj_acc + 0.1;
 8008994:	4b3c      	ldr	r3, [pc, #240]	; (8008a88 <cppLoop+0x12c0>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f7f7 fded 	bl	8000578 <__aeabi_f2d>
 800899e:	a32c      	add	r3, pc, #176	; (adr r3, 8008a50 <cppLoop+0x1288>)
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	f7f7 fc8a 	bl	80002bc <__adddf3>
 80089a8:	4603      	mov	r3, r0
 80089aa:	460c      	mov	r4, r1
 80089ac:	4618      	mov	r0, r3
 80089ae:	4621      	mov	r1, r4
 80089b0:	f7f8 f932 	bl	8000c18 <__aeabi_d2f>
 80089b4:	4602      	mov	r2, r0
 80089b6:	4b34      	ldr	r3, [pc, #208]	; (8008a88 <cppLoop+0x12c0>)
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	e012      	b.n	80089e2 <cppLoop+0x121a>
				adj_dec = adj_dec + 0.1;
 80089bc:	4b33      	ldr	r3, [pc, #204]	; (8008a8c <cppLoop+0x12c4>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7f7 fdd9 	bl	8000578 <__aeabi_f2d>
 80089c6:	a322      	add	r3, pc, #136	; (adr r3, 8008a50 <cppLoop+0x1288>)
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f7f7 fc76 	bl	80002bc <__adddf3>
 80089d0:	4603      	mov	r3, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	4618      	mov	r0, r3
 80089d6:	4621      	mov	r1, r4
 80089d8:	f7f8 f91e 	bl	8000c18 <__aeabi_d2f>
 80089dc:	4602      	mov	r2, r0
 80089de:	4b2b      	ldr	r3, [pc, #172]	; (8008a8c <cppLoop+0x12c4>)
 80089e0:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80089e2:	2200      	movs	r2, #0
 80089e4:	f04f 31ff 	mov.w	r1, #4294967295
 80089e8:	481c      	ldr	r0, [pc, #112]	; (8008a5c <cppLoop+0x1294>)
 80089ea:	f7f9 fc7f 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80089ee:	f000 bc78 	b.w	80092e2 <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_L){
 80089f2:	481b      	ldr	r0, [pc, #108]	; (8008a60 <cppLoop+0x1298>)
 80089f4:	f7f9 fb5a 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	bf0c      	ite	eq
 80089fe:	2301      	moveq	r3, #1
 8008a00:	2300      	movne	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d05e      	beq.n	8008ac6 <cppLoop+0x12fe>
			led.LR(-1, 1);
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008a0e:	4813      	ldr	r0, [pc, #76]	; (8008a5c <cppLoop+0x1294>)
 8008a10:	f7f9 fc6c 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a14:	2064      	movs	r0, #100	; 0x64
 8008a16:	f000 fd9f 	bl	8009558 <HAL_Delay>
			if(selector_acc == 0){
 8008a1a:	4b1a      	ldr	r3, [pc, #104]	; (8008a84 <cppLoop+0x12bc>)
 8008a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d135      	bne.n	8008a90 <cppLoop+0x12c8>
				adj_acc = adj_acc - 0.1;
 8008a24:	4b18      	ldr	r3, [pc, #96]	; (8008a88 <cppLoop+0x12c0>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7f7 fda5 	bl	8000578 <__aeabi_f2d>
 8008a2e:	a308      	add	r3, pc, #32	; (adr r3, 8008a50 <cppLoop+0x1288>)
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	f7f7 fc40 	bl	80002b8 <__aeabi_dsub>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	4621      	mov	r1, r4
 8008a40:	f7f8 f8ea 	bl	8000c18 <__aeabi_d2f>
 8008a44:	4602      	mov	r2, r0
 8008a46:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <cppLoop+0x12c0>)
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	e034      	b.n	8008ab6 <cppLoop+0x12ee>
 8008a4c:	f3af 8000 	nop.w
 8008a50:	9999999a 	.word	0x9999999a
 8008a54:	3fb99999 	.word	0x3fb99999
 8008a58:	20040370 	.word	0x20040370
 8008a5c:	20000604 	.word	0x20000604
 8008a60:	200005f8 	.word	0x200005f8
 8008a64:	20040334 	.word	0x20040334
 8008a68:	20040360 	.word	0x20040360
 8008a6c:	080198f8 	.word	0x080198f8
 8008a70:	08019880 	.word	0x08019880
 8008a74:	08019904 	.word	0x08019904
 8008a78:	2001bc54 	.word	0x2001bc54
 8008a7c:	08019910 	.word	0x08019910
 8008a80:	0801991c 	.word	0x0801991c
 8008a84:	2004032e 	.word	0x2004032e
 8008a88:	20040378 	.word	0x20040378
 8008a8c:	20040380 	.word	0x20040380
				adj_dec = adj_dec - 0.1;
 8008a90:	4bbd      	ldr	r3, [pc, #756]	; (8008d88 <cppLoop+0x15c0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7f7 fd6f 	bl	8000578 <__aeabi_f2d>
 8008a9a:	a3b9      	add	r3, pc, #740	; (adr r3, 8008d80 <cppLoop+0x15b8>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f7f7 fc0a 	bl	80002b8 <__aeabi_dsub>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	4621      	mov	r1, r4
 8008aac:	f7f8 f8b4 	bl	8000c18 <__aeabi_d2f>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	4bb5      	ldr	r3, [pc, #724]	; (8008d88 <cppLoop+0x15c0>)
 8008ab4:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8008abc:	48b3      	ldr	r0, [pc, #716]	; (8008d8c <cppLoop+0x15c4>)
 8008abe:	f7f9 fc15 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008ac2:	f000 bc0e 	b.w	80092e2 <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_C){
 8008ac6:	48b2      	ldr	r0, [pc, #712]	; (8008d90 <cppLoop+0x15c8>)
 8008ac8:	f7f9 faf0 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	bf0c      	ite	eq
 8008ad2:	2301      	moveq	r3, #1
 8008ad4:	2300      	movne	r3, #0
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 8402 	beq.w	80092e2 <cppLoop+0x1b1a>
			led.LR(-1, 1);
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae4:	48a9      	ldr	r0, [pc, #676]	; (8008d8c <cppLoop+0x15c4>)
 8008ae6:	f7f9 fc01 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008aea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008aee:	f000 fd33 	bl	8009558 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008af2:	2300      	movs	r3, #0
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	4ba7      	ldr	r3, [pc, #668]	; (8008d94 <cppLoop+0x15cc>)
 8008af8:	2201      	movs	r2, #1
 8008afa:	49a7      	ldr	r1, [pc, #668]	; (8008d98 <cppLoop+0x15d0>)
 8008afc:	48a7      	ldr	r0, [pc, #668]	; (8008d9c <cppLoop+0x15d4>)
 8008afe:	f7f8 febd 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008b02:	2300      	movs	r3, #0
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	4ba0      	ldr	r3, [pc, #640]	; (8008d88 <cppLoop+0x15c0>)
 8008b08:	2201      	movs	r2, #1
 8008b0a:	49a5      	ldr	r1, [pc, #660]	; (8008da0 <cppLoop+0x15d8>)
 8008b0c:	48a3      	ldr	r0, [pc, #652]	; (8008d9c <cppLoop+0x15d4>)
 8008b0e:	f7f8 feb5 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008b12:	4ba0      	ldr	r3, [pc, #640]	; (8008d94 <cppLoop+0x15cc>)
 8008b14:	edd3 7a00 	vldr	s15, [r3]
 8008b18:	4b9b      	ldr	r3, [pc, #620]	; (8008d88 <cppLoop+0x15c0>)
 8008b1a:	ed93 7a00 	vldr	s14, [r3]
 8008b1e:	eef0 0a47 	vmov.f32	s1, s14
 8008b22:	eeb0 0a67 	vmov.f32	s0, s15
 8008b26:	489f      	ldr	r0, [pc, #636]	; (8008da4 <cppLoop+0x15dc>)
 8008b28:	f7fb f901 	bl	8003d2e <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b32:	4896      	ldr	r0, [pc, #600]	; (8008d8c <cppLoop+0x15c4>)
 8008b34:	f7f9 fbda 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008b38:	e3d3      	b.n	80092e2 <cppLoop+0x1b1a>

	case 8:
		led.fullColor('W');
 8008b3a:	2157      	movs	r1, #87	; 0x57
 8008b3c:	4893      	ldr	r0, [pc, #588]	; (8008d8c <cppLoop+0x15c4>)
 8008b3e:	f7f9 fb19 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008b42:	f7f8 faad 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008b46:	2100      	movs	r1, #0
 8008b48:	2000      	movs	r0, #0
 8008b4a:	f7f8 fab9 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008b4e:	4895      	ldr	r0, [pc, #596]	; (8008da4 <cppLoop+0x15dc>)
 8008b50:	f7fb f945 	bl	8003dde <_ZN9LineTrace10getMaxAcc2Ev>
 8008b54:	ee10 3a10 	vmov	r3, s0
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7f7 fd0d 	bl	8000578 <__aeabi_f2d>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	460c      	mov	r4, r1
 8008b62:	461a      	mov	r2, r3
 8008b64:	4623      	mov	r3, r4
 8008b66:	4890      	ldr	r0, [pc, #576]	; (8008da8 <cppLoop+0x15e0>)
 8008b68:	f7f8 fad4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	2000      	movs	r0, #0
 8008b70:	f7f8 faa6 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008b74:	488b      	ldr	r0, [pc, #556]	; (8008da4 <cppLoop+0x15dc>)
 8008b76:	f7fb f920 	bl	8003dba <_ZN9LineTrace10getMaxDec2Ev>
 8008b7a:	ee10 3a10 	vmov	r3, s0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7f7 fcfa 	bl	8000578 <__aeabi_f2d>
 8008b84:	4603      	mov	r3, r0
 8008b86:	460c      	mov	r4, r1
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4623      	mov	r3, r4
 8008b8c:	4887      	ldr	r0, [pc, #540]	; (8008dac <cppLoop+0x15e4>)
 8008b8e:	f7f8 fac1 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008b92:	487f      	ldr	r0, [pc, #508]	; (8008d90 <cppLoop+0x15c8>)
 8008b94:	f7f9 fa8a 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b08      	cmp	r3, #8
 8008b9c:	bf0c      	ite	eq
 8008b9e:	2301      	moveq	r3, #1
 8008ba0:	2300      	movne	r3, #0
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d021      	beq.n	8008bec <cppLoop+0x1424>
			led.LR(-1, 1);
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f04f 31ff 	mov.w	r1, #4294967295
 8008bae:	4877      	ldr	r0, [pc, #476]	; (8008d8c <cppLoop+0x15c4>)
 8008bb0:	f7f9 fb9c 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008bb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008bb8:	f000 fcce 	bl	8009558 <HAL_Delay>

			selector_acc2++;
 8008bbc:	4b7c      	ldr	r3, [pc, #496]	; (8008db0 <cppLoop+0x15e8>)
 8008bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	b21a      	sxth	r2, r3
 8008bca:	4b79      	ldr	r3, [pc, #484]	; (8008db0 <cppLoop+0x15e8>)
 8008bcc:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008bce:	4b78      	ldr	r3, [pc, #480]	; (8008db0 <cppLoop+0x15e8>)
 8008bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	dd02      	ble.n	8008bde <cppLoop+0x1416>
 8008bd8:	4b75      	ldr	r3, [pc, #468]	; (8008db0 <cppLoop+0x15e8>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008bde:	2200      	movs	r2, #0
 8008be0:	f04f 31ff 	mov.w	r1, #4294967295
 8008be4:	4869      	ldr	r0, [pc, #420]	; (8008d8c <cppLoop+0x15c4>)
 8008be6:	f7f9 fb81 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008bea:	e37c      	b.n	80092e6 <cppLoop+0x1b1e>
		else if(joy_stick.getValue() == JOY_R){
 8008bec:	4868      	ldr	r0, [pc, #416]	; (8008d90 <cppLoop+0x15c8>)
 8008bee:	f7f9 fa5d 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b10      	cmp	r3, #16
 8008bf6:	bf0c      	ite	eq
 8008bf8:	2301      	moveq	r3, #1
 8008bfa:	2300      	movne	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d03b      	beq.n	8008c7a <cppLoop+0x14b2>
			led.LR(-1, 1);
 8008c02:	2201      	movs	r2, #1
 8008c04:	f04f 31ff 	mov.w	r1, #4294967295
 8008c08:	4860      	ldr	r0, [pc, #384]	; (8008d8c <cppLoop+0x15c4>)
 8008c0a:	f7f9 fb6f 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c0e:	2064      	movs	r0, #100	; 0x64
 8008c10:	f000 fca2 	bl	8009558 <HAL_Delay>
			if(selector_acc2 == 0){
 8008c14:	4b66      	ldr	r3, [pc, #408]	; (8008db0 <cppLoop+0x15e8>)
 8008c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d113      	bne.n	8008c46 <cppLoop+0x147e>
				adj_acc2 = adj_acc2 + 0.1;
 8008c1e:	4b65      	ldr	r3, [pc, #404]	; (8008db4 <cppLoop+0x15ec>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7f7 fca8 	bl	8000578 <__aeabi_f2d>
 8008c28:	a355      	add	r3, pc, #340	; (adr r3, 8008d80 <cppLoop+0x15b8>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	f7f7 fb45 	bl	80002bc <__adddf3>
 8008c32:	4603      	mov	r3, r0
 8008c34:	460c      	mov	r4, r1
 8008c36:	4618      	mov	r0, r3
 8008c38:	4621      	mov	r1, r4
 8008c3a:	f7f7 ffed 	bl	8000c18 <__aeabi_d2f>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	4b5c      	ldr	r3, [pc, #368]	; (8008db4 <cppLoop+0x15ec>)
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	e012      	b.n	8008c6c <cppLoop+0x14a4>
				adj_dec2 = adj_dec2 + 0.1;
 8008c46:	4b5c      	ldr	r3, [pc, #368]	; (8008db8 <cppLoop+0x15f0>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7f7 fc94 	bl	8000578 <__aeabi_f2d>
 8008c50:	a34b      	add	r3, pc, #300	; (adr r3, 8008d80 <cppLoop+0x15b8>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	f7f7 fb31 	bl	80002bc <__adddf3>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	4618      	mov	r0, r3
 8008c60:	4621      	mov	r1, r4
 8008c62:	f7f7 ffd9 	bl	8000c18 <__aeabi_d2f>
 8008c66:	4602      	mov	r2, r0
 8008c68:	4b53      	ldr	r3, [pc, #332]	; (8008db8 <cppLoop+0x15f0>)
 8008c6a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c72:	4846      	ldr	r0, [pc, #280]	; (8008d8c <cppLoop+0x15c4>)
 8008c74:	f7f9 fb3a 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008c78:	e335      	b.n	80092e6 <cppLoop+0x1b1e>
		else if(joy_stick.getValue() == JOY_L){
 8008c7a:	4845      	ldr	r0, [pc, #276]	; (8008d90 <cppLoop+0x15c8>)
 8008c7c:	f7f9 fa16 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	bf0c      	ite	eq
 8008c86:	2301      	moveq	r3, #1
 8008c88:	2300      	movne	r3, #0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d03b      	beq.n	8008d08 <cppLoop+0x1540>
			led.LR(-1, 1);
 8008c90:	2201      	movs	r2, #1
 8008c92:	f04f 31ff 	mov.w	r1, #4294967295
 8008c96:	483d      	ldr	r0, [pc, #244]	; (8008d8c <cppLoop+0x15c4>)
 8008c98:	f7f9 fb28 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c9c:	2064      	movs	r0, #100	; 0x64
 8008c9e:	f000 fc5b 	bl	8009558 <HAL_Delay>
			if(selector_acc2 == 0){
 8008ca2:	4b43      	ldr	r3, [pc, #268]	; (8008db0 <cppLoop+0x15e8>)
 8008ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d113      	bne.n	8008cd4 <cppLoop+0x150c>
				adj_acc2 = adj_acc2 - 0.1;
 8008cac:	4b41      	ldr	r3, [pc, #260]	; (8008db4 <cppLoop+0x15ec>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7f7 fc61 	bl	8000578 <__aeabi_f2d>
 8008cb6:	a332      	add	r3, pc, #200	; (adr r3, 8008d80 <cppLoop+0x15b8>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	f7f7 fafc 	bl	80002b8 <__aeabi_dsub>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	f7f7 ffa6 	bl	8000c18 <__aeabi_d2f>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	4b39      	ldr	r3, [pc, #228]	; (8008db4 <cppLoop+0x15ec>)
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	e012      	b.n	8008cfa <cppLoop+0x1532>
				adj_dec2 = adj_dec2 - 0.1;
 8008cd4:	4b38      	ldr	r3, [pc, #224]	; (8008db8 <cppLoop+0x15f0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7f7 fc4d 	bl	8000578 <__aeabi_f2d>
 8008cde:	a328      	add	r3, pc, #160	; (adr r3, 8008d80 <cppLoop+0x15b8>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	f7f7 fae8 	bl	80002b8 <__aeabi_dsub>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	4618      	mov	r0, r3
 8008cee:	4621      	mov	r1, r4
 8008cf0:	f7f7 ff92 	bl	8000c18 <__aeabi_d2f>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	4b30      	ldr	r3, [pc, #192]	; (8008db8 <cppLoop+0x15f0>)
 8008cf8:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8008d00:	4822      	ldr	r0, [pc, #136]	; (8008d8c <cppLoop+0x15c4>)
 8008d02:	f7f9 faf3 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008d06:	e2ee      	b.n	80092e6 <cppLoop+0x1b1e>
		else if(joy_stick.getValue() == JOY_C){
 8008d08:	4821      	ldr	r0, [pc, #132]	; (8008d90 <cppLoop+0x15c8>)
 8008d0a:	f7f9 f9cf 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	bf0c      	ite	eq
 8008d14:	2301      	moveq	r3, #1
 8008d16:	2300      	movne	r3, #0
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 82e3 	beq.w	80092e6 <cppLoop+0x1b1e>
			led.LR(-1, 1);
 8008d20:	2201      	movs	r2, #1
 8008d22:	f04f 31ff 	mov.w	r1, #4294967295
 8008d26:	4819      	ldr	r0, [pc, #100]	; (8008d8c <cppLoop+0x15c4>)
 8008d28:	f7f9 fae0 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d30:	f000 fc12 	bl	8009558 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008d34:	2300      	movs	r3, #0
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	4b1e      	ldr	r3, [pc, #120]	; (8008db4 <cppLoop+0x15ec>)
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	491f      	ldr	r1, [pc, #124]	; (8008dbc <cppLoop+0x15f4>)
 8008d3e:	4817      	ldr	r0, [pc, #92]	; (8008d9c <cppLoop+0x15d4>)
 8008d40:	f7f8 fd9c 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008d44:	2300      	movs	r3, #0
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	4b1b      	ldr	r3, [pc, #108]	; (8008db8 <cppLoop+0x15f0>)
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	491c      	ldr	r1, [pc, #112]	; (8008dc0 <cppLoop+0x15f8>)
 8008d4e:	4813      	ldr	r0, [pc, #76]	; (8008d9c <cppLoop+0x15d4>)
 8008d50:	f7f8 fd94 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008d54:	4b17      	ldr	r3, [pc, #92]	; (8008db4 <cppLoop+0x15ec>)
 8008d56:	edd3 7a00 	vldr	s15, [r3]
 8008d5a:	4b17      	ldr	r3, [pc, #92]	; (8008db8 <cppLoop+0x15f0>)
 8008d5c:	ed93 7a00 	vldr	s14, [r3]
 8008d60:	eef0 0a47 	vmov.f32	s1, s14
 8008d64:	eeb0 0a67 	vmov.f32	s0, s15
 8008d68:	480e      	ldr	r0, [pc, #56]	; (8008da4 <cppLoop+0x15dc>)
 8008d6a:	f7fa fffa 	bl	8003d62 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f04f 31ff 	mov.w	r1, #4294967295
 8008d74:	4805      	ldr	r0, [pc, #20]	; (8008d8c <cppLoop+0x15c4>)
 8008d76:	f7f9 fab9 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008d7a:	e2b4      	b.n	80092e6 <cppLoop+0x1b1e>
 8008d7c:	f3af 8000 	nop.w
 8008d80:	9999999a 	.word	0x9999999a
 8008d84:	3fb99999 	.word	0x3fb99999
 8008d88:	20040380 	.word	0x20040380
 8008d8c:	20000604 	.word	0x20000604
 8008d90:	200005f8 	.word	0x200005f8
 8008d94:	20040378 	.word	0x20040378
 8008d98:	08019928 	.word	0x08019928
 8008d9c:	08019880 	.word	0x08019880
 8008da0:	08019930 	.word	0x08019930
 8008da4:	2001bc54 	.word	0x2001bc54
 8008da8:	08019938 	.word	0x08019938
 8008dac:	08019944 	.word	0x08019944
 8008db0:	20040330 	.word	0x20040330
 8008db4:	20040388 	.word	0x20040388
 8008db8:	20040390 	.word	0x20040390
 8008dbc:	08019950 	.word	0x08019950
 8008dc0:	0801995c 	.word	0x0801995c

	case 9:
		led.fullColor('~');
 8008dc4:	217e      	movs	r1, #126	; 0x7e
 8008dc6:	48c6      	ldr	r0, [pc, #792]	; (80090e0 <cppLoop+0x1918>)
 8008dc8:	f7f9 f9d4 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008dcc:	f7f8 f968 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	f7f8 f974 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8008dd8:	48c2      	ldr	r0, [pc, #776]	; (80090e4 <cppLoop+0x191c>)
 8008dda:	f7f8 f99b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008dde:	2101      	movs	r1, #1
 8008de0:	2000      	movs	r0, #0
 8008de2:	f7f8 f96d 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8008de6:	48c0      	ldr	r0, [pc, #768]	; (80090e8 <cppLoop+0x1920>)
 8008de8:	f7f8 f994 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008dec:	48bf      	ldr	r0, [pc, #764]	; (80090ec <cppLoop+0x1924>)
 8008dee:	f7f9 f95d 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	bf0c      	ite	eq
 8008df8:	2301      	moveq	r3, #1
 8008dfa:	2300      	movne	r3, #0
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 8273 	beq.w	80092ea <cppLoop+0x1b22>
			led.LR(-1, 1);
 8008e04:	2201      	movs	r2, #1
 8008e06:	f04f 31ff 	mov.w	r1, #4294967295
 8008e0a:	48b5      	ldr	r0, [pc, #724]	; (80090e0 <cppLoop+0x1918>)
 8008e0c:	f7f9 fa6e 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(500);
 8008e10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e14:	f000 fba0 	bl	8009558 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8008e18:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 80090f0 <cppLoop+0x1928>
 8008e1c:	48b5      	ldr	r0, [pc, #724]	; (80090f4 <cppLoop+0x192c>)
 8008e1e:	f7fa fed7 	bl	8003bd0 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008e22:	48b4      	ldr	r0, [pc, #720]	; (80090f4 <cppLoop+0x192c>)
 8008e24:	f7fb f93a 	bl	800409c <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8008e28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e2c:	f000 fb94 	bl	8009558 <HAL_Delay>

			led.fullColor('R');
 8008e30:	2152      	movs	r1, #82	; 0x52
 8008e32:	48ab      	ldr	r0, [pc, #684]	; (80090e0 <cppLoop+0x1918>)
 8008e34:	f7f9 f99e 	bl	8002174 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8008e38:	48af      	ldr	r0, [pc, #700]	; (80090f8 <cppLoop+0x1930>)
 8008e3a:	f7f8 fc71 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8008e3e:	f242 7010 	movw	r0, #10000	; 0x2710
 8008e42:	f000 fb89 	bl	8009558 <HAL_Delay>

			line_trace.stop();
 8008e46:	48ab      	ldr	r0, [pc, #684]	; (80090f4 <cppLoop+0x192c>)
 8008e48:	f7fb f9c8 	bl	80041dc <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8008e4c:	49ab      	ldr	r1, [pc, #684]	; (80090fc <cppLoop+0x1934>)
 8008e4e:	48ac      	ldr	r0, [pc, #688]	; (8009100 <cppLoop+0x1938>)
 8008e50:	f7f8 fc9f 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 8008e54:	48a8      	ldr	r0, [pc, #672]	; (80090f8 <cppLoop+0x1930>)
 8008e56:	f7f8 fc27 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8008e5a:	eef0 7a40 	vmov.f32	s15, s0
 8008e5e:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8008e62:	1d3b      	adds	r3, r7, #4
 8008e64:	2201      	movs	r2, #1
 8008e66:	4619      	mov	r1, r3
 8008e68:	2001      	movs	r0, #1
 8008e6a:	f7f8 fcb5 	bl	80017d8 <sd_write_float>
			user_fclose();
 8008e6e:	f7f8 fca3 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 8008e72:	2200      	movs	r2, #0
 8008e74:	f04f 31ff 	mov.w	r1, #4294967295
 8008e78:	4899      	ldr	r0, [pc, #612]	; (80090e0 <cppLoop+0x1918>)
 8008e7a:	f7f9 fa37 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 8008e7e:	e234      	b.n	80092ea <cppLoop+0x1b22>

	case 10:
		led.fullColor('~');
 8008e80:	217e      	movs	r1, #126	; 0x7e
 8008e82:	4897      	ldr	r0, [pc, #604]	; (80090e0 <cppLoop+0x1918>)
 8008e84:	f7f9 f976 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008e88:	f7f8 f90a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f7f8 f916 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8008e94:	489b      	ldr	r0, [pc, #620]	; (8009104 <cppLoop+0x193c>)
 8008e96:	f7f8 f93d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	2000      	movs	r0, #0
 8008e9e:	f7f8 f90f 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8008ea2:	4899      	ldr	r0, [pc, #612]	; (8009108 <cppLoop+0x1940>)
 8008ea4:	f7f8 f936 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8008ea8:	4890      	ldr	r0, [pc, #576]	; (80090ec <cppLoop+0x1924>)
 8008eaa:	f7f9 f8ff 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	bf0c      	ite	eq
 8008eb4:	2301      	moveq	r3, #1
 8008eb6:	2300      	movne	r3, #0
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 8217 	beq.w	80092ee <cppLoop+0x1b26>
			HAL_Delay(500);
 8008ec0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ec4:	f000 fb48 	bl	8009558 <HAL_Delay>
			led.LR(-1, 1);
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f04f 31ff 	mov.w	r1, #4294967295
 8008ece:	4884      	ldr	r0, [pc, #528]	; (80090e0 <cppLoop+0x1918>)
 8008ed0:	f7f9 fa0c 	bl	80022ec <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8008ed4:	2102      	movs	r1, #2
 8008ed6:	4887      	ldr	r0, [pc, #540]	; (80090f4 <cppLoop+0x192c>)
 8008ed8:	f7fb f8ce 	bl	8004078 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008edc:	4b8b      	ldr	r3, [pc, #556]	; (800910c <cppLoop+0x1944>)
 8008ede:	edd3 7a00 	vldr	s15, [r3]
 8008ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ee6:	4883      	ldr	r0, [pc, #524]	; (80090f4 <cppLoop+0x192c>)
 8008ee8:	f7fa fe81 	bl	8003bee <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008eec:	4b87      	ldr	r3, [pc, #540]	; (800910c <cppLoop+0x1944>)
 8008eee:	edd3 7a00 	vldr	s15, [r3]
 8008ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ef6:	487f      	ldr	r0, [pc, #508]	; (80090f4 <cppLoop+0x192c>)
 8008ef8:	f7fa fe89 	bl	8003c0e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8008efc:	4b83      	ldr	r3, [pc, #524]	; (800910c <cppLoop+0x1944>)
 8008efe:	edd3 7a00 	vldr	s15, [r3]
 8008f02:	eeb0 0a67 	vmov.f32	s0, s15
 8008f06:	487b      	ldr	r0, [pc, #492]	; (80090f4 <cppLoop+0x192c>)
 8008f08:	f7fa fea1 	bl	8003c4e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008f0c:	4879      	ldr	r0, [pc, #484]	; (80090f4 <cppLoop+0x192c>)
 8008f0e:	f7fb faa9 	bl	8004464 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8008f12:	2200      	movs	r2, #0
 8008f14:	f04f 31ff 	mov.w	r1, #4294967295
 8008f18:	4871      	ldr	r0, [pc, #452]	; (80090e0 <cppLoop+0x1918>)
 8008f1a:	f7f9 f9e7 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 8008f1e:	e1e6      	b.n	80092ee <cppLoop+0x1b26>

	case 11:
		led.fullColor('~');
 8008f20:	217e      	movs	r1, #126	; 0x7e
 8008f22:	486f      	ldr	r0, [pc, #444]	; (80090e0 <cppLoop+0x1918>)
 8008f24:	f7f9 f926 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f28:	f7f8 f8ba 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	2000      	movs	r0, #0
 8008f30:	f7f8 f8c6 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 8008f34:	4876      	ldr	r0, [pc, #472]	; (8009110 <cppLoop+0x1948>)
 8008f36:	f7f8 f8ed 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	f7f8 f8bf 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8008f42:	4874      	ldr	r0, [pc, #464]	; (8009114 <cppLoop+0x194c>)
 8008f44:	f7f8 f8e6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008f48:	4868      	ldr	r0, [pc, #416]	; (80090ec <cppLoop+0x1924>)
 8008f4a:	f7f9 f8af 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	bf0c      	ite	eq
 8008f54:	2301      	moveq	r3, #1
 8008f56:	2300      	movne	r3, #0
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 81c9 	beq.w	80092f2 <cppLoop+0x1b2a>
			HAL_Delay(1000);
 8008f60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f64:	f000 faf8 	bl	8009558 <HAL_Delay>
			led.LR(-1, 1);
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f6e:	485c      	ldr	r0, [pc, #368]	; (80090e0 <cppLoop+0x1918>)
 8008f70:	f7f9 f9bc 	bl	80022ec <_ZN3LED2LREaa>

			esc.on(0.2, 0.2, 0.2, 0.2);
 8008f74:	eddf 1a68 	vldr	s3, [pc, #416]	; 8009118 <cppLoop+0x1950>
 8008f78:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8009118 <cppLoop+0x1950>
 8008f7c:	eddf 0a66 	vldr	s1, [pc, #408]	; 8009118 <cppLoop+0x1950>
 8008f80:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8009118 <cppLoop+0x1950>
 8008f84:	4865      	ldr	r0, [pc, #404]	; (800911c <cppLoop+0x1954>)
 8008f86:	f7f8 f963 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(5000);
 8008f8a:	f241 3088 	movw	r0, #5000	; 0x1388
 8008f8e:	f000 fae3 	bl	8009558 <HAL_Delay>
			esc.off();
 8008f92:	4862      	ldr	r0, [pc, #392]	; (800911c <cppLoop+0x1954>)
 8008f94:	f7f8 f9f6 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f9e:	4850      	ldr	r0, [pc, #320]	; (80090e0 <cppLoop+0x1918>)
 8008fa0:	f7f9 f9a4 	bl	80022ec <_ZN3LED2LREaa>
			logger.saveLogs("SYSIDENT", "STEPRES.txt");

			led.LR(-1, 0);
		}
		*/
		break;
 8008fa4:	e1a5      	b.n	80092f2 <cppLoop+0x1b2a>

	case 12:
		led.fullColor('~');
 8008fa6:	217e      	movs	r1, #126	; 0x7e
 8008fa8:	484d      	ldr	r0, [pc, #308]	; (80090e0 <cppLoop+0x1918>)
 8008faa:	f7f9 f8e3 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008fae:	f7f8 f877 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	f7f8 f883 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8008fba:	4859      	ldr	r0, [pc, #356]	; (8009120 <cppLoop+0x1958>)
 8008fbc:	f7f8 f8aa 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	f7f8 f87c 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8008fc8:	4856      	ldr	r0, [pc, #344]	; (8009124 <cppLoop+0x195c>)
 8008fca:	f7f8 f8a3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008fce:	4847      	ldr	r0, [pc, #284]	; (80090ec <cppLoop+0x1924>)
 8008fd0:	f7f9 f86c 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	bf0c      	ite	eq
 8008fda:	2301      	moveq	r3, #1
 8008fdc:	2300      	movne	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 8188 	beq.w	80092f6 <cppLoop+0x1b2e>
			HAL_Delay(1500);
 8008fe6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008fea:	f000 fab5 	bl	8009558 <HAL_Delay>
			led.LR(-1, 1);
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ff4:	483a      	ldr	r0, [pc, #232]	; (80090e0 <cppLoop+0x1918>)
 8008ff6:	f7f9 f979 	bl	80022ec <_ZN3LED2LREaa>

			logger.start();
 8008ffa:	484b      	ldr	r0, [pc, #300]	; (8009128 <cppLoop+0x1960>)
 8008ffc:	f7fb fdac 	bl	8004b58 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8009000:	484a      	ldr	r0, [pc, #296]	; (800912c <cppLoop+0x1964>)
 8009002:	f7fc fd4a 	bl	8005a9a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 3.14);
 8009006:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8009130 <cppLoop+0x1968>
 800900a:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80090f0 <cppLoop+0x1928>
 800900e:	4847      	ldr	r0, [pc, #284]	; (800912c <cppLoop+0x1964>)
 8009010:	f7fc fcd6 	bl	80059c0 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009018:	f000 fa9e 	bl	8009558 <HAL_Delay>

			logger.stop();
 800901c:	4842      	ldr	r0, [pc, #264]	; (8009128 <cppLoop+0x1960>)
 800901e:	f7fb fdac 	bl	8004b7a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009022:	4842      	ldr	r0, [pc, #264]	; (800912c <cppLoop+0x1964>)
 8009024:	f7fc fd4c 	bl	8005ac0 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009028:	4a42      	ldr	r2, [pc, #264]	; (8009134 <cppLoop+0x196c>)
 800902a:	4943      	ldr	r1, [pc, #268]	; (8009138 <cppLoop+0x1970>)
 800902c:	483e      	ldr	r0, [pc, #248]	; (8009128 <cppLoop+0x1960>)
 800902e:	f7fb fca0 	bl	8004972 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009032:	2200      	movs	r2, #0
 8009034:	f04f 31ff 	mov.w	r1, #4294967295
 8009038:	4829      	ldr	r0, [pc, #164]	; (80090e0 <cppLoop+0x1918>)
 800903a:	f7f9 f957 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 800903e:	e15a      	b.n	80092f6 <cppLoop+0x1b2e>

	case 13:

		led.fullColor('~');
 8009040:	217e      	movs	r1, #126	; 0x7e
 8009042:	4827      	ldr	r0, [pc, #156]	; (80090e0 <cppLoop+0x1918>)
 8009044:	f7f9 f896 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009048:	f7f8 f82a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800904c:	2100      	movs	r1, #0
 800904e:	2000      	movs	r0, #0
 8009050:	f7f8 f836 	bl	80010c0 <lcd_locate>
		lcd_printf("Steer");
 8009054:	4839      	ldr	r0, [pc, #228]	; (800913c <cppLoop+0x1974>)
 8009056:	f7f8 f85d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800905a:	2101      	movs	r1, #1
 800905c:	2000      	movs	r0, #0
 800905e:	f7f8 f82f 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8009062:	4837      	ldr	r0, [pc, #220]	; (8009140 <cppLoop+0x1978>)
 8009064:	f7f8 f856 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009068:	4820      	ldr	r0, [pc, #128]	; (80090ec <cppLoop+0x1924>)
 800906a:	f7f9 f81f 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800906e:	4603      	mov	r3, r0
 8009070:	2b02      	cmp	r3, #2
 8009072:	bf0c      	ite	eq
 8009074:	2301      	moveq	r3, #1
 8009076:	2300      	movne	r3, #0
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 813d 	beq.w	80092fa <cppLoop+0x1b32>
			HAL_Delay(500);
 8009080:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009084:	f000 fa68 	bl	8009558 <HAL_Delay>

			line_trace.setTargetVelocity(0.3);
 8009088:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8009144 <cppLoop+0x197c>
 800908c:	4819      	ldr	r0, [pc, #100]	; (80090f4 <cppLoop+0x192c>)
 800908e:	f7fa fdae 	bl	8003bee <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8009092:	f04f 32ff 	mov.w	r2, #4294967295
 8009096:	2101      	movs	r1, #1
 8009098:	4811      	ldr	r0, [pc, #68]	; (80090e0 <cppLoop+0x1918>)
 800909a:	f7f9 f927 	bl	80022ec <_ZN3LED2LREaa>

			logger.resetIdx();
 800909e:	4822      	ldr	r0, [pc, #136]	; (8009128 <cppLoop+0x1960>)
 80090a0:	f7fb fd42 	bl	8004b28 <_ZN6Logger8resetIdxEv>
			line_trace.setMode(FIRST_RUNNING);
 80090a4:	2100      	movs	r1, #0
 80090a6:	4813      	ldr	r0, [pc, #76]	; (80090f4 <cppLoop+0x192c>)
 80090a8:	f7fa ffe6 	bl	8004078 <_ZN9LineTrace7setModeEs>
			logger.start();
 80090ac:	481e      	ldr	r0, [pc, #120]	; (8009128 <cppLoop+0x1960>)
 80090ae:	f7fb fd53 	bl	8004b58 <_ZN6Logger5startEv>
			line_trace.running();
 80090b2:	4810      	ldr	r0, [pc, #64]	; (80090f4 <cppLoop+0x192c>)
 80090b4:	f7fb f81e 	bl	80040f4 <_ZN9LineTrace7runningEv>
			logger.stop();
 80090b8:	481b      	ldr	r0, [pc, #108]	; (8009128 <cppLoop+0x1960>)
 80090ba:	f7fb fd5e 	bl	8004b7a <_ZN6Logger4stopEv>

			logger.saveLogs("STATELOG", "COMEGA.TXT");
 80090be:	4a22      	ldr	r2, [pc, #136]	; (8009148 <cppLoop+0x1980>)
 80090c0:	4922      	ldr	r1, [pc, #136]	; (800914c <cppLoop+0x1984>)
 80090c2:	4819      	ldr	r0, [pc, #100]	; (8009128 <cppLoop+0x1960>)
 80090c4:	f7fb fc55 	bl	8004972 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TOMEGA.TXT");
 80090c8:	4a21      	ldr	r2, [pc, #132]	; (8009150 <cppLoop+0x1988>)
 80090ca:	4920      	ldr	r1, [pc, #128]	; (800914c <cppLoop+0x1984>)
 80090cc:	4816      	ldr	r0, [pc, #88]	; (8009128 <cppLoop+0x1960>)
 80090ce:	f7fb fc64 	bl	800499a <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 80090d2:	f04f 32ff 	mov.w	r2, #4294967295
 80090d6:	2100      	movs	r1, #0
 80090d8:	4801      	ldr	r0, [pc, #4]	; (80090e0 <cppLoop+0x1918>)
 80090da:	f7f9 f907 	bl	80022ec <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80090de:	e10c      	b.n	80092fa <cppLoop+0x1b32>
 80090e0:	20000604 	.word	0x20000604
 80090e4:	08019968 	.word	0x08019968
 80090e8:	08019970 	.word	0x08019970
 80090ec:	200005f8 	.word	0x200005f8
 80090f0:	00000000 	.word	0x00000000
 80090f4:	2001bc54 	.word	0x2001bc54
 80090f8:	2001bbb0 	.word	0x2001bbb0
 80090fc:	0801997c 	.word	0x0801997c
 8009100:	08019984 	.word	0x08019984
 8009104:	08019990 	.word	0x08019990
 8009108:	0801999c 	.word	0x0801999c
 800910c:	20040360 	.word	0x20040360
 8009110:	080199a8 	.word	0x080199a8
 8009114:	080199ac 	.word	0x080199ac
 8009118:	3e4ccccd 	.word	0x3e4ccccd
 800911c:	2001bc50 	.word	0x2001bc50
 8009120:	080199b4 	.word	0x080199b4
 8009124:	080199b8 	.word	0x080199b8
 8009128:	20000628 	.word	0x20000628
 800912c:	2001bbd0 	.word	0x2001bbd0
 8009130:	4048f5c3 	.word	0x4048f5c3
 8009134:	080199c4 	.word	0x080199c4
 8009138:	080199d0 	.word	0x080199d0
 800913c:	080199dc 	.word	0x080199dc
 8009140:	080199e4 	.word	0x080199e4
 8009144:	3e99999a 	.word	0x3e99999a
 8009148:	080199ec 	.word	0x080199ec
 800914c:	080199f8 	.word	0x080199f8
 8009150:	08019a04 	.word	0x08019a04

	case 14:
		led.fullColor('W');
 8009154:	2157      	movs	r1, #87	; 0x57
 8009156:	486f      	ldr	r0, [pc, #444]	; (8009314 <cppLoop+0x1b4c>)
 8009158:	f7f9 f80c 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 800915c:	f7f7 ffa0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009160:	2100      	movs	r1, #0
 8009162:	2000      	movs	r0, #0
 8009164:	f7f7 ffac 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009168:	486b      	ldr	r0, [pc, #428]	; (8009318 <cppLoop+0x1b50>)
 800916a:	f7f7 ffd3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800916e:	2101      	movs	r1, #1
 8009170:	2000      	movs	r0, #0
 8009172:	f7f7 ffa5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009176:	4b69      	ldr	r3, [pc, #420]	; (800931c <cppLoop+0x1b54>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4618      	mov	r0, r3
 800917c:	f7f7 f9fc 	bl	8000578 <__aeabi_f2d>
 8009180:	4603      	mov	r3, r0
 8009182:	460c      	mov	r4, r1
 8009184:	461a      	mov	r2, r3
 8009186:	4623      	mov	r3, r4
 8009188:	4865      	ldr	r0, [pc, #404]	; (8009320 <cppLoop+0x1b58>)
 800918a:	f7f7 ffc3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800918e:	4865      	ldr	r0, [pc, #404]	; (8009324 <cppLoop+0x1b5c>)
 8009190:	f7f8 ff8c 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8009194:	4603      	mov	r3, r0
 8009196:	2b02      	cmp	r3, #2
 8009198:	bf0c      	ite	eq
 800919a:	2301      	moveq	r3, #1
 800919c:	2300      	movne	r3, #0
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 80ac 	beq.w	80092fe <cppLoop+0x1b36>
			HAL_Delay(500);
 80091a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091aa:	f000 f9d5 	bl	8009558 <HAL_Delay>

			led.LR(1, -1);
 80091ae:	f04f 32ff 	mov.w	r2, #4294967295
 80091b2:	2101      	movs	r1, #1
 80091b4:	4857      	ldr	r0, [pc, #348]	; (8009314 <cppLoop+0x1b4c>)
 80091b6:	f7f9 f899 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80091ba:	2102      	movs	r1, #2
 80091bc:	485a      	ldr	r0, [pc, #360]	; (8009328 <cppLoop+0x1b60>)
 80091be:	f7fa ff5b 	bl	8004078 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80091c2:	4b5a      	ldr	r3, [pc, #360]	; (800932c <cppLoop+0x1b64>)
 80091c4:	edd3 7a00 	vldr	s15, [r3]
 80091c8:	eeb0 0a67 	vmov.f32	s0, s15
 80091cc:	4856      	ldr	r0, [pc, #344]	; (8009328 <cppLoop+0x1b60>)
 80091ce:	f7fa fd0e 	bl	8003bee <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80091d2:	4b52      	ldr	r3, [pc, #328]	; (800931c <cppLoop+0x1b54>)
 80091d4:	edd3 7a00 	vldr	s15, [r3]
 80091d8:	eeb0 0a67 	vmov.f32	s0, s15
 80091dc:	4852      	ldr	r0, [pc, #328]	; (8009328 <cppLoop+0x1b60>)
 80091de:	f7fa fd16 	bl	8003c0e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80091e2:	4b4e      	ldr	r3, [pc, #312]	; (800931c <cppLoop+0x1b54>)
 80091e4:	edd3 7a00 	vldr	s15, [r3]
 80091e8:	eeb0 0a67 	vmov.f32	s0, s15
 80091ec:	484e      	ldr	r0, [pc, #312]	; (8009328 <cppLoop+0x1b60>)
 80091ee:	f7fa fd2e 	bl	8003c4e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80091f2:	484d      	ldr	r0, [pc, #308]	; (8009328 <cppLoop+0x1b60>)
 80091f4:	f7fb f936 	bl	8004464 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80091f8:	484b      	ldr	r0, [pc, #300]	; (8009328 <cppLoop+0x1b60>)
 80091fa:	f7fa ff7b 	bl	80040f4 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80091fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009202:	2100      	movs	r1, #0
 8009204:	4843      	ldr	r0, [pc, #268]	; (8009314 <cppLoop+0x1b4c>)
 8009206:	f7f9 f871 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 800920a:	e078      	b.n	80092fe <cppLoop+0x1b36>

	case 15:
		led.fullColor('W');
 800920c:	2157      	movs	r1, #87	; 0x57
 800920e:	4841      	ldr	r0, [pc, #260]	; (8009314 <cppLoop+0x1b4c>)
 8009210:	f7f8 ffb0 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009214:	f7f7 ff44 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009218:	2100      	movs	r1, #0
 800921a:	2000      	movs	r0, #0
 800921c:	f7f7 ff50 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009220:	4843      	ldr	r0, [pc, #268]	; (8009330 <cppLoop+0x1b68>)
 8009222:	f7f7 ff77 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009226:	2101      	movs	r1, #1
 8009228:	2000      	movs	r0, #0
 800922a:	f7f7 ff49 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800922e:	4b41      	ldr	r3, [pc, #260]	; (8009334 <cppLoop+0x1b6c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4618      	mov	r0, r3
 8009234:	f7f7 f9a0 	bl	8000578 <__aeabi_f2d>
 8009238:	4603      	mov	r3, r0
 800923a:	460c      	mov	r4, r1
 800923c:	461a      	mov	r2, r3
 800923e:	4623      	mov	r3, r4
 8009240:	4837      	ldr	r0, [pc, #220]	; (8009320 <cppLoop+0x1b58>)
 8009242:	f7f7 ff67 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009246:	4837      	ldr	r0, [pc, #220]	; (8009324 <cppLoop+0x1b5c>)
 8009248:	f7f8 ff30 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800924c:	4603      	mov	r3, r0
 800924e:	2b02      	cmp	r3, #2
 8009250:	bf0c      	ite	eq
 8009252:	2301      	moveq	r3, #1
 8009254:	2300      	movne	r3, #0
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d052      	beq.n	8009302 <cppLoop+0x1b3a>
			HAL_Delay(500);
 800925c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009260:	f000 f97a 	bl	8009558 <HAL_Delay>

			led.LR(1, -1);
 8009264:	f04f 32ff 	mov.w	r2, #4294967295
 8009268:	2101      	movs	r1, #1
 800926a:	482a      	ldr	r0, [pc, #168]	; (8009314 <cppLoop+0x1b4c>)
 800926c:	f7f9 f83e 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009270:	2101      	movs	r1, #1
 8009272:	482d      	ldr	r0, [pc, #180]	; (8009328 <cppLoop+0x1b60>)
 8009274:	f7fa ff00 	bl	8004078 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009278:	4b2f      	ldr	r3, [pc, #188]	; (8009338 <cppLoop+0x1b70>)
 800927a:	edd3 7a00 	vldr	s15, [r3]
 800927e:	eeb0 0a67 	vmov.f32	s0, s15
 8009282:	4829      	ldr	r0, [pc, #164]	; (8009328 <cppLoop+0x1b60>)
 8009284:	f7fa fcb3 	bl	8003bee <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009288:	4b2a      	ldr	r3, [pc, #168]	; (8009334 <cppLoop+0x1b6c>)
 800928a:	edd3 7a00 	vldr	s15, [r3]
 800928e:	eeb0 0a67 	vmov.f32	s0, s15
 8009292:	4825      	ldr	r0, [pc, #148]	; (8009328 <cppLoop+0x1b60>)
 8009294:	f7fa fcbb 	bl	8003c0e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009298:	4b27      	ldr	r3, [pc, #156]	; (8009338 <cppLoop+0x1b70>)
 800929a:	edd3 7a00 	vldr	s15, [r3]
 800929e:	eeb0 0a67 	vmov.f32	s0, s15
 80092a2:	4821      	ldr	r0, [pc, #132]	; (8009328 <cppLoop+0x1b60>)
 80092a4:	f7fa fcd3 	bl	8003c4e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80092a8:	481f      	ldr	r0, [pc, #124]	; (8009328 <cppLoop+0x1b60>)
 80092aa:	f7fb f8db 	bl	8004464 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80092ae:	481e      	ldr	r0, [pc, #120]	; (8009328 <cppLoop+0x1b60>)
 80092b0:	f7fa ff20 	bl	80040f4 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80092b4:	f04f 32ff 	mov.w	r2, #4294967295
 80092b8:	2100      	movs	r1, #0
 80092ba:	4816      	ldr	r0, [pc, #88]	; (8009314 <cppLoop+0x1b4c>)
 80092bc:	f7f9 f816 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 80092c0:	e01f      	b.n	8009302 <cppLoop+0x1b3a>

	default:
		break;
 80092c2:	bf00      	nop
 80092c4:	e01e      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092c6:	bf00      	nop
 80092c8:	e01c      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092ca:	bf00      	nop
 80092cc:	e01a      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092ce:	bf00      	nop
 80092d0:	e018      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092d2:	bf00      	nop
 80092d4:	e016      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092d6:	bf00      	nop
 80092d8:	e014      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092da:	bf00      	nop
 80092dc:	e012      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092de:	bf00      	nop
 80092e0:	e010      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092e2:	bf00      	nop
 80092e4:	e00e      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092e6:	bf00      	nop
 80092e8:	e00c      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092ea:	bf00      	nop
 80092ec:	e00a      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092ee:	bf00      	nop
 80092f0:	e008      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092f2:	bf00      	nop
 80092f4:	e006      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092f6:	bf00      	nop
 80092f8:	e004      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092fa:	bf00      	nop
 80092fc:	e002      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 80092fe:	bf00      	nop
 8009300:	e000      	b.n	8009304 <cppLoop+0x1b3c>
		break;
 8009302:	bf00      	nop

	}

	HAL_Delay(30);
 8009304:	201e      	movs	r0, #30
 8009306:	f000 f927 	bl	8009558 <HAL_Delay>

}
 800930a:	bf00      	nop
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009312:	bf00      	nop
 8009314:	20000604 	.word	0x20000604
 8009318:	08019a10 	.word	0x08019a10
 800931c:	20040360 	.word	0x20040360
 8009320:	080198a4 	.word	0x080198a4
 8009324:	200005f8 	.word	0x200005f8
 8009328:	2001bc54 	.word	0x2001bc54
 800932c:	20040370 	.word	0x20040370
 8009330:	08019a1c 	.word	0x08019a1c
 8009334:	20040358 	.word	0x20040358
 8009338:	20040368 	.word	0x20040368

0800933c <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af06      	add	r7, sp, #24
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d142      	bne.n	80093d2 <_Z41__static_initialization_and_destruction_0ii+0x96>
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009352:	4293      	cmp	r3, r2
 8009354:	d13d      	bne.n	80093d2 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009356:	4821      	ldr	r0, [pc, #132]	; (80093dc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009358:	f7f9 f800 	bl	800235c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800935c:	4820      	ldr	r0, [pc, #128]	; (80093e0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800935e:	f7fb fff3 	bl	8005348 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009362:	4820      	ldr	r0, [pc, #128]	; (80093e4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009364:	f7f8 fe96 	bl	8002094 <_ZN8JoyStickC1Ev>
Motor motor;
 8009368:	481f      	ldr	r0, [pc, #124]	; (80093e8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800936a:	f7fb fc17 	bl	8004b9c <_ZN5MotorC1Ev>
IMU imu;
 800936e:	481f      	ldr	r0, [pc, #124]	; (80093ec <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009370:	f7f8 fc9c 	bl	8001cac <_ZN3IMUC1Ev>
Logger logger;
 8009374:	481e      	ldr	r0, [pc, #120]	; (80093f0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009376:	f7fb f965 	bl	8004644 <_ZN6LoggerC1Ev>
Encoder encoder;
 800937a:	481e      	ldr	r0, [pc, #120]	; (80093f4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800937c:	f7f8 f826 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009380:	4b1a      	ldr	r3, [pc, #104]	; (80093ec <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009382:	4a1c      	ldr	r2, [pc, #112]	; (80093f4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009384:	4918      	ldr	r1, [pc, #96]	; (80093e8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009386:	481c      	ldr	r0, [pc, #112]	; (80093f8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009388:	f7fc f9ec 	bl	8005764 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800938c:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800938e:	4a17      	ldr	r2, [pc, #92]	; (80093ec <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009390:	4918      	ldr	r1, [pc, #96]	; (80093f4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009392:	481a      	ldr	r0, [pc, #104]	; (80093fc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009394:	f7fb fce8 	bl	8004d68 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009398:	4819      	ldr	r0, [pc, #100]	; (8009400 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800939a:	f7f7 ff1b 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 800939e:	4b18      	ldr	r3, [pc, #96]	; (8009400 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80093a0:	9305      	str	r3, [sp, #20]
 80093a2:	4b12      	ldr	r3, [pc, #72]	; (80093ec <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	4b12      	ldr	r3, [pc, #72]	; (80093f0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80093a8:	9303      	str	r3, [sp, #12]
 80093aa:	4b14      	ldr	r3, [pc, #80]	; (80093fc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80093ac:	9302      	str	r3, [sp, #8]
 80093ae:	4b11      	ldr	r3, [pc, #68]	; (80093f4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80093b0:	9301      	str	r3, [sp, #4]
 80093b2:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	4b10      	ldr	r3, [pc, #64]	; (80093f8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80093b8:	4a08      	ldr	r2, [pc, #32]	; (80093dc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80093ba:	490b      	ldr	r1, [pc, #44]	; (80093e8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80093bc:	4811      	ldr	r0, [pc, #68]	; (8009404 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80093be:	f7f9 fb4f 	bl	8002a60 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 80093c2:	4a09      	ldr	r2, [pc, #36]	; (80093e8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80093c4:	490a      	ldr	r1, [pc, #40]	; (80093f0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80093c6:	4810      	ldr	r0, [pc, #64]	; (8009408 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80093c8:	f7fc f92c 	bl	8005624 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80093cc:	480f      	ldr	r0, [pc, #60]	; (800940c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80093ce:	f7fb fe4d 	bl	800506c <_ZN13PathFollowingC1Ev>
}
 80093d2:	bf00      	nop
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	200002f4 	.word	0x200002f4
 80093e0:	200005ec 	.word	0x200005ec
 80093e4:	200005f8 	.word	0x200005f8
 80093e8:	20000600 	.word	0x20000600
 80093ec:	20000614 	.word	0x20000614
 80093f0:	20000628 	.word	0x20000628
 80093f4:	2001bbb0 	.word	0x2001bbb0
 80093f8:	2001bbd0 	.word	0x2001bbd0
 80093fc:	2001bc10 	.word	0x2001bc10
 8009400:	2001bc50 	.word	0x2001bc50
 8009404:	2001bc54 	.word	0x2001bc54
 8009408:	200289f0 	.word	0x200289f0
 800940c:	20028c00 	.word	0x20028c00

08009410 <_GLOBAL__sub_I_line_sensor>:
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
 8009414:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009418:	2001      	movs	r0, #1
 800941a:	f7ff ff8f 	bl	800933c <_Z41__static_initialization_and_destruction_0ii>
 800941e:	bd80      	pop	{r7, pc}

08009420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009458 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009426:	e003      	b.n	8009430 <LoopCopyDataInit>

08009428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009428:	4b0c      	ldr	r3, [pc, #48]	; (800945c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800942a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800942c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800942e:	3104      	adds	r1, #4

08009430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009430:	480b      	ldr	r0, [pc, #44]	; (8009460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009432:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009438:	d3f6      	bcc.n	8009428 <CopyDataInit>
  ldr  r2, =_sbss
 800943a:	4a0b      	ldr	r2, [pc, #44]	; (8009468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800943c:	e002      	b.n	8009444 <LoopFillZerobss>

0800943e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800943e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009440:	f842 3b04 	str.w	r3, [r2], #4

08009444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009444:	4b09      	ldr	r3, [pc, #36]	; (800946c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009448:	d3f9      	bcc.n	800943e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800944a:	f7fe f897 	bl	800757c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800944e:	f00b fdd3 	bl	8014ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009452:	f7fc fbd1 	bl	8005bf8 <main>
  bx  lr    
 8009456:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009458:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800945c:	0801a018 	.word	0x0801a018
  ldr  r0, =_sdata
 8009460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009464:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009468:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800946c:	20044d78 	.word	0x20044d78

08009470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009470:	e7fe      	b.n	8009470 <ADC_IRQHandler>
	...

08009474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009478:	4b0e      	ldr	r3, [pc, #56]	; (80094b4 <HAL_Init+0x40>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a0d      	ldr	r2, [pc, #52]	; (80094b4 <HAL_Init+0x40>)
 800947e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009482:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009484:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <HAL_Init+0x40>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a0a      	ldr	r2, [pc, #40]	; (80094b4 <HAL_Init+0x40>)
 800948a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800948e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009490:	4b08      	ldr	r3, [pc, #32]	; (80094b4 <HAL_Init+0x40>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a07      	ldr	r2, [pc, #28]	; (80094b4 <HAL_Init+0x40>)
 8009496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800949a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800949c:	2003      	movs	r0, #3
 800949e:	f000 fd51 	bl	8009f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80094a2:	2000      	movs	r0, #0
 80094a4:	f000 f808 	bl	80094b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80094a8:	f7fd fab8 	bl	8006a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	40023c00 	.word	0x40023c00

080094b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80094c0:	4b12      	ldr	r3, [pc, #72]	; (800950c <HAL_InitTick+0x54>)
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	4b12      	ldr	r3, [pc, #72]	; (8009510 <HAL_InitTick+0x58>)
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	4619      	mov	r1, r3
 80094ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80094ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80094d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 fd69 	bl	8009fae <HAL_SYSTICK_Config>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e00e      	b.n	8009504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b0f      	cmp	r3, #15
 80094ea:	d80a      	bhi.n	8009502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80094ec:	2200      	movs	r2, #0
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	f04f 30ff 	mov.w	r0, #4294967295
 80094f4:	f000 fd31 	bl	8009f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80094f8:	4a06      	ldr	r2, [pc, #24]	; (8009514 <HAL_InitTick+0x5c>)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	e000      	b.n	8009504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20000000 	.word	0x20000000
 8009510:	20000008 	.word	0x20000008
 8009514:	20000004 	.word	0x20000004

08009518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009518:	b480      	push	{r7}
 800951a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800951c:	4b06      	ldr	r3, [pc, #24]	; (8009538 <HAL_IncTick+0x20>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	461a      	mov	r2, r3
 8009522:	4b06      	ldr	r3, [pc, #24]	; (800953c <HAL_IncTick+0x24>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4413      	add	r3, r2
 8009528:	4a04      	ldr	r2, [pc, #16]	; (800953c <HAL_IncTick+0x24>)
 800952a:	6013      	str	r3, [r2, #0]
}
 800952c:	bf00      	nop
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	20000008 	.word	0x20000008
 800953c:	20042d00 	.word	0x20042d00

08009540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
  return uwTick;
 8009544:	4b03      	ldr	r3, [pc, #12]	; (8009554 <HAL_GetTick+0x14>)
 8009546:	681b      	ldr	r3, [r3, #0]
}
 8009548:	4618      	mov	r0, r3
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	20042d00 	.word	0x20042d00

08009558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009560:	f7ff ffee 	bl	8009540 <HAL_GetTick>
 8009564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009570:	d005      	beq.n	800957e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009572:	4b09      	ldr	r3, [pc, #36]	; (8009598 <HAL_Delay+0x40>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800957e:	bf00      	nop
 8009580:	f7ff ffde 	bl	8009540 <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	429a      	cmp	r2, r3
 800958e:	d8f7      	bhi.n	8009580 <HAL_Delay+0x28>
  {
  }
}
 8009590:	bf00      	nop
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	20000008 	.word	0x20000008

0800959c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e033      	b.n	800961a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d109      	bne.n	80095ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7fd fa56 	bl	8006a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	f003 0310 	and.w	r3, r3, #16
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d118      	bne.n	800960c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80095e2:	f023 0302 	bic.w	r3, r3, #2
 80095e6:	f043 0202 	orr.w	r2, r3, #2
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fa5a 	bl	8009aa8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	f023 0303 	bic.w	r3, r3, #3
 8009602:	f043 0201 	orr.w	r2, r3, #1
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	641a      	str	r2, [r3, #64]	; 0x40
 800960a:	e001      	b.n	8009610 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009618:	7bfb      	ldrb	r3, [r7, #15]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800963a:	2b01      	cmp	r3, #1
 800963c:	d101      	bne.n	8009642 <HAL_ADC_Start_DMA+0x1e>
 800963e:	2302      	movs	r3, #2
 8009640:	e0cc      	b.n	80097dc <HAL_ADC_Start_DMA+0x1b8>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	2b01      	cmp	r3, #1
 8009656:	d018      	beq.n	800968a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689a      	ldr	r2, [r3, #8]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 0201 	orr.w	r2, r2, #1
 8009666:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009668:	4b5e      	ldr	r3, [pc, #376]	; (80097e4 <HAL_ADC_Start_DMA+0x1c0>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a5e      	ldr	r2, [pc, #376]	; (80097e8 <HAL_ADC_Start_DMA+0x1c4>)
 800966e:	fba2 2303 	umull	r2, r3, r2, r3
 8009672:	0c9a      	lsrs	r2, r3, #18
 8009674:	4613      	mov	r3, r2
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	4413      	add	r3, r2
 800967a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800967c:	e002      	b.n	8009684 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	3b01      	subs	r3, #1
 8009682:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1f9      	bne.n	800967e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b01      	cmp	r3, #1
 8009696:	f040 80a0 	bne.w	80097da <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80096a2:	f023 0301 	bic.w	r3, r3, #1
 80096a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d007      	beq.n	80096cc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80096c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80096d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d8:	d106      	bne.n	80096e8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096de:	f023 0206 	bic.w	r2, r3, #6
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	645a      	str	r2, [r3, #68]	; 0x44
 80096e6:	e002      	b.n	80096ee <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80096f6:	4b3d      	ldr	r3, [pc, #244]	; (80097ec <HAL_ADC_Start_DMA+0x1c8>)
 80096f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fe:	4a3c      	ldr	r2, [pc, #240]	; (80097f0 <HAL_ADC_Start_DMA+0x1cc>)
 8009700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009706:	4a3b      	ldr	r2, [pc, #236]	; (80097f4 <HAL_ADC_Start_DMA+0x1d0>)
 8009708:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970e:	4a3a      	ldr	r2, [pc, #232]	; (80097f8 <HAL_ADC_Start_DMA+0x1d4>)
 8009710:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800971a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800972a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689a      	ldr	r2, [r3, #8]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800973a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	334c      	adds	r3, #76	; 0x4c
 8009746:	4619      	mov	r1, r3
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f000 fcea 	bl	800a124 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	f003 031f 	and.w	r3, r3, #31
 8009758:	2b00      	cmp	r3, #0
 800975a:	d12a      	bne.n	80097b2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a26      	ldr	r2, [pc, #152]	; (80097fc <HAL_ADC_Start_DMA+0x1d8>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d015      	beq.n	8009792 <HAL_ADC_Start_DMA+0x16e>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a25      	ldr	r2, [pc, #148]	; (8009800 <HAL_ADC_Start_DMA+0x1dc>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d105      	bne.n	800977c <HAL_ADC_Start_DMA+0x158>
 8009770:	4b1e      	ldr	r3, [pc, #120]	; (80097ec <HAL_ADC_Start_DMA+0x1c8>)
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	f003 031f 	and.w	r3, r3, #31
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00a      	beq.n	8009792 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a20      	ldr	r2, [pc, #128]	; (8009804 <HAL_ADC_Start_DMA+0x1e0>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d129      	bne.n	80097da <HAL_ADC_Start_DMA+0x1b6>
 8009786:	4b19      	ldr	r3, [pc, #100]	; (80097ec <HAL_ADC_Start_DMA+0x1c8>)
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f003 031f 	and.w	r3, r3, #31
 800978e:	2b0f      	cmp	r3, #15
 8009790:	d823      	bhi.n	80097da <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d11c      	bne.n	80097da <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689a      	ldr	r2, [r3, #8]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80097ae:	609a      	str	r2, [r3, #8]
 80097b0:	e013      	b.n	80097da <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a11      	ldr	r2, [pc, #68]	; (80097fc <HAL_ADC_Start_DMA+0x1d8>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d10e      	bne.n	80097da <HAL_ADC_Start_DMA+0x1b6>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d107      	bne.n	80097da <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80097d8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000000 	.word	0x20000000
 80097e8:	431bde83 	.word	0x431bde83
 80097ec:	40012300 	.word	0x40012300
 80097f0:	08009ca1 	.word	0x08009ca1
 80097f4:	08009d5b 	.word	0x08009d5b
 80097f8:	08009d77 	.word	0x08009d77
 80097fc:	40012000 	.word	0x40012000
 8009800:	40012100 	.word	0x40012100
 8009804:	40012200 	.word	0x40012200

08009808 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009858:	2b01      	cmp	r3, #1
 800985a:	d101      	bne.n	8009860 <HAL_ADC_ConfigChannel+0x1c>
 800985c:	2302      	movs	r3, #2
 800985e:	e113      	b.n	8009a88 <HAL_ADC_ConfigChannel+0x244>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b09      	cmp	r3, #9
 800986e:	d925      	bls.n	80098bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68d9      	ldr	r1, [r3, #12]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	b29b      	uxth	r3, r3
 800987c:	461a      	mov	r2, r3
 800987e:	4613      	mov	r3, r2
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	4413      	add	r3, r2
 8009884:	3b1e      	subs	r3, #30
 8009886:	2207      	movs	r2, #7
 8009888:	fa02 f303 	lsl.w	r3, r2, r3
 800988c:	43da      	mvns	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	400a      	ands	r2, r1
 8009894:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68d9      	ldr	r1, [r3, #12]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	689a      	ldr	r2, [r3, #8]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	4618      	mov	r0, r3
 80098a8:	4603      	mov	r3, r0
 80098aa:	005b      	lsls	r3, r3, #1
 80098ac:	4403      	add	r3, r0
 80098ae:	3b1e      	subs	r3, #30
 80098b0:	409a      	lsls	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	60da      	str	r2, [r3, #12]
 80098ba:	e022      	b.n	8009902 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	6919      	ldr	r1, [r3, #16]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	461a      	mov	r2, r3
 80098ca:	4613      	mov	r3, r2
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	4413      	add	r3, r2
 80098d0:	2207      	movs	r2, #7
 80098d2:	fa02 f303 	lsl.w	r3, r2, r3
 80098d6:	43da      	mvns	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	400a      	ands	r2, r1
 80098de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6919      	ldr	r1, [r3, #16]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	4618      	mov	r0, r3
 80098f2:	4603      	mov	r3, r0
 80098f4:	005b      	lsls	r3, r3, #1
 80098f6:	4403      	add	r3, r0
 80098f8:	409a      	lsls	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	430a      	orrs	r2, r1
 8009900:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	2b06      	cmp	r3, #6
 8009908:	d824      	bhi.n	8009954 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	4613      	mov	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	3b05      	subs	r3, #5
 800991c:	221f      	movs	r2, #31
 800991e:	fa02 f303 	lsl.w	r3, r2, r3
 8009922:	43da      	mvns	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	400a      	ands	r2, r1
 800992a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	b29b      	uxth	r3, r3
 8009938:	4618      	mov	r0, r3
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	3b05      	subs	r3, #5
 8009946:	fa00 f203 	lsl.w	r2, r0, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	635a      	str	r2, [r3, #52]	; 0x34
 8009952:	e04c      	b.n	80099ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	2b0c      	cmp	r3, #12
 800995a:	d824      	bhi.n	80099a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	4613      	mov	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	3b23      	subs	r3, #35	; 0x23
 800996e:	221f      	movs	r2, #31
 8009970:	fa02 f303 	lsl.w	r3, r2, r3
 8009974:	43da      	mvns	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	400a      	ands	r2, r1
 800997c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	b29b      	uxth	r3, r3
 800998a:	4618      	mov	r0, r3
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	4613      	mov	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	3b23      	subs	r3, #35	; 0x23
 8009998:	fa00 f203 	lsl.w	r2, r0, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	430a      	orrs	r2, r1
 80099a2:	631a      	str	r2, [r3, #48]	; 0x30
 80099a4:	e023      	b.n	80099ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	4613      	mov	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	3b41      	subs	r3, #65	; 0x41
 80099b8:	221f      	movs	r2, #31
 80099ba:	fa02 f303 	lsl.w	r3, r2, r3
 80099be:	43da      	mvns	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	400a      	ands	r2, r1
 80099c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	4618      	mov	r0, r3
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	3b41      	subs	r3, #65	; 0x41
 80099e2:	fa00 f203 	lsl.w	r2, r0, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	430a      	orrs	r2, r1
 80099ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80099ee:	4b29      	ldr	r3, [pc, #164]	; (8009a94 <HAL_ADC_ConfigChannel+0x250>)
 80099f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a28      	ldr	r2, [pc, #160]	; (8009a98 <HAL_ADC_ConfigChannel+0x254>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d10f      	bne.n	8009a1c <HAL_ADC_ConfigChannel+0x1d8>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b12      	cmp	r3, #18
 8009a02:	d10b      	bne.n	8009a1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1d      	ldr	r2, [pc, #116]	; (8009a98 <HAL_ADC_ConfigChannel+0x254>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d12b      	bne.n	8009a7e <HAL_ADC_ConfigChannel+0x23a>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1c      	ldr	r2, [pc, #112]	; (8009a9c <HAL_ADC_ConfigChannel+0x258>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d003      	beq.n	8009a38 <HAL_ADC_ConfigChannel+0x1f4>
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b11      	cmp	r3, #17
 8009a36:	d122      	bne.n	8009a7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a11      	ldr	r2, [pc, #68]	; (8009a9c <HAL_ADC_ConfigChannel+0x258>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d111      	bne.n	8009a7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009a5a:	4b11      	ldr	r3, [pc, #68]	; (8009aa0 <HAL_ADC_ConfigChannel+0x25c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a11      	ldr	r2, [pc, #68]	; (8009aa4 <HAL_ADC_ConfigChannel+0x260>)
 8009a60:	fba2 2303 	umull	r2, r3, r2, r3
 8009a64:	0c9a      	lsrs	r2, r3, #18
 8009a66:	4613      	mov	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	005b      	lsls	r3, r3, #1
 8009a6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009a70:	e002      	b.n	8009a78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1f9      	bne.n	8009a72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	40012300 	.word	0x40012300
 8009a98:	40012000 	.word	0x40012000
 8009a9c:	10000012 	.word	0x10000012
 8009aa0:	20000000 	.word	0x20000000
 8009aa4:	431bde83 	.word	0x431bde83

08009aa8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009ab0:	4b79      	ldr	r3, [pc, #484]	; (8009c98 <ADC_Init+0x1f0>)
 8009ab2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	685a      	ldr	r2, [r3, #4]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	431a      	orrs	r2, r3
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009adc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6859      	ldr	r1, [r3, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	021a      	lsls	r2, r3, #8
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	430a      	orrs	r2, r1
 8009af0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6859      	ldr	r1, [r3, #4]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	430a      	orrs	r2, r1
 8009b12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	689a      	ldr	r2, [r3, #8]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6899      	ldr	r1, [r3, #8]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3a:	4a58      	ldr	r2, [pc, #352]	; (8009c9c <ADC_Init+0x1f4>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d022      	beq.n	8009b86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	689a      	ldr	r2, [r3, #8]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6899      	ldr	r1, [r3, #8]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	430a      	orrs	r2, r1
 8009b60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009b70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6899      	ldr	r1, [r3, #8]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	430a      	orrs	r2, r1
 8009b82:	609a      	str	r2, [r3, #8]
 8009b84:	e00f      	b.n	8009ba6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	689a      	ldr	r2, [r3, #8]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	689a      	ldr	r2, [r3, #8]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009ba4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689a      	ldr	r2, [r3, #8]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0202 	bic.w	r2, r2, #2
 8009bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6899      	ldr	r1, [r3, #8]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	7e1b      	ldrb	r3, [r3, #24]
 8009bc0:	005a      	lsls	r2, r3, #1
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	430a      	orrs	r2, r1
 8009bc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d01b      	beq.n	8009c0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685a      	ldr	r2, [r3, #4]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009be2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685a      	ldr	r2, [r3, #4]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009bf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6859      	ldr	r1, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	035a      	lsls	r2, r3, #13
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	605a      	str	r2, [r3, #4]
 8009c0a:	e007      	b.n	8009c1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	051a      	lsls	r2, r3, #20
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009c50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6899      	ldr	r1, [r3, #8]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c5e:	025a      	lsls	r2, r3, #9
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689a      	ldr	r2, [r3, #8]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6899      	ldr	r1, [r3, #8]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	695b      	ldr	r3, [r3, #20]
 8009c82:	029a      	lsls	r2, r3, #10
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	609a      	str	r2, [r3, #8]
}
 8009c8c:	bf00      	nop
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	40012300 	.word	0x40012300
 8009c9c:	0f000001 	.word	0x0f000001

08009ca0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d13c      	bne.n	8009d34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d12b      	bne.n	8009d2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d127      	bne.n	8009d2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d006      	beq.n	8009cf8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d119      	bne.n	8009d2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	685a      	ldr	r2, [r3, #4]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f022 0220 	bic.w	r2, r2, #32
 8009d06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d105      	bne.n	8009d2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d24:	f043 0201 	orr.w	r2, r3, #1
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f7ff fd6b 	bl	8009808 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009d32:	e00e      	b.n	8009d52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d38:	f003 0310 	and.w	r3, r3, #16
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f7ff fd75 	bl	8009830 <HAL_ADC_ErrorCallback>
}
 8009d46:	e004      	b.n	8009d52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	4798      	blx	r3
}
 8009d52:	bf00      	nop
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f7ff fd57 	bl	800981c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d6e:	bf00      	nop
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2240      	movs	r2, #64	; 0x40
 8009d88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8e:	f043 0204 	orr.w	r2, r3, #4
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f7ff fd4a 	bl	8009830 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d9c:	bf00      	nop
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009db4:	4b0c      	ldr	r3, [pc, #48]	; (8009de8 <__NVIC_SetPriorityGrouping+0x44>)
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009dd6:	4a04      	ldr	r2, [pc, #16]	; (8009de8 <__NVIC_SetPriorityGrouping+0x44>)
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	60d3      	str	r3, [r2, #12]
}
 8009ddc:	bf00      	nop
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	e000ed00 	.word	0xe000ed00

08009dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009dec:	b480      	push	{r7}
 8009dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009df0:	4b04      	ldr	r3, [pc, #16]	; (8009e04 <__NVIC_GetPriorityGrouping+0x18>)
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	0a1b      	lsrs	r3, r3, #8
 8009df6:	f003 0307 	and.w	r3, r3, #7
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	e000ed00 	.word	0xe000ed00

08009e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	db0b      	blt.n	8009e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e1a:	79fb      	ldrb	r3, [r7, #7]
 8009e1c:	f003 021f 	and.w	r2, r3, #31
 8009e20:	4907      	ldr	r1, [pc, #28]	; (8009e40 <__NVIC_EnableIRQ+0x38>)
 8009e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e26:	095b      	lsrs	r3, r3, #5
 8009e28:	2001      	movs	r0, #1
 8009e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8009e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009e32:	bf00      	nop
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	e000e100 	.word	0xe000e100

08009e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	6039      	str	r1, [r7, #0]
 8009e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	db0a      	blt.n	8009e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	490c      	ldr	r1, [pc, #48]	; (8009e90 <__NVIC_SetPriority+0x4c>)
 8009e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e62:	0112      	lsls	r2, r2, #4
 8009e64:	b2d2      	uxtb	r2, r2
 8009e66:	440b      	add	r3, r1
 8009e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009e6c:	e00a      	b.n	8009e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	4908      	ldr	r1, [pc, #32]	; (8009e94 <__NVIC_SetPriority+0x50>)
 8009e74:	79fb      	ldrb	r3, [r7, #7]
 8009e76:	f003 030f 	and.w	r3, r3, #15
 8009e7a:	3b04      	subs	r3, #4
 8009e7c:	0112      	lsls	r2, r2, #4
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	440b      	add	r3, r1
 8009e82:	761a      	strb	r2, [r3, #24]
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	e000e100 	.word	0xe000e100
 8009e94:	e000ed00 	.word	0xe000ed00

08009e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b089      	sub	sp, #36	; 0x24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f003 0307 	and.w	r3, r3, #7
 8009eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	f1c3 0307 	rsb	r3, r3, #7
 8009eb2:	2b04      	cmp	r3, #4
 8009eb4:	bf28      	it	cs
 8009eb6:	2304      	movcs	r3, #4
 8009eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	2b06      	cmp	r3, #6
 8009ec0:	d902      	bls.n	8009ec8 <NVIC_EncodePriority+0x30>
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	3b03      	subs	r3, #3
 8009ec6:	e000      	b.n	8009eca <NVIC_EncodePriority+0x32>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed6:	43da      	mvns	r2, r3
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	401a      	ands	r2, r3
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8009eea:	43d9      	mvns	r1, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ef0:	4313      	orrs	r3, r2
         );
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3724      	adds	r7, #36	; 0x24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
	...

08009f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f10:	d301      	bcc.n	8009f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009f12:	2301      	movs	r3, #1
 8009f14:	e00f      	b.n	8009f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009f16:	4a0a      	ldr	r2, [pc, #40]	; (8009f40 <SysTick_Config+0x40>)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009f1e:	210f      	movs	r1, #15
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
 8009f24:	f7ff ff8e 	bl	8009e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009f28:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <SysTick_Config+0x40>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009f2e:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <SysTick_Config+0x40>)
 8009f30:	2207      	movs	r2, #7
 8009f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	e000e010 	.word	0xe000e010

08009f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff ff29 	bl	8009da4 <__NVIC_SetPriorityGrouping>
}
 8009f52:	bf00      	nop
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b086      	sub	sp, #24
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	4603      	mov	r3, r0
 8009f62:	60b9      	str	r1, [r7, #8]
 8009f64:	607a      	str	r2, [r7, #4]
 8009f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009f6c:	f7ff ff3e 	bl	8009dec <__NVIC_GetPriorityGrouping>
 8009f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	68b9      	ldr	r1, [r7, #8]
 8009f76:	6978      	ldr	r0, [r7, #20]
 8009f78:	f7ff ff8e 	bl	8009e98 <NVIC_EncodePriority>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f82:	4611      	mov	r1, r2
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7ff ff5d 	bl	8009e44 <__NVIC_SetPriority>
}
 8009f8a:	bf00      	nop
 8009f8c:	3718      	adds	r7, #24
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	4603      	mov	r3, r0
 8009f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7ff ff31 	bl	8009e08 <__NVIC_EnableIRQ>
}
 8009fa6:	bf00      	nop
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b082      	sub	sp, #8
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff ffa2 	bl	8009f00 <SysTick_Config>
 8009fbc:	4603      	mov	r3, r0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009fd4:	f7ff fab4 	bl	8009540 <HAL_GetTick>
 8009fd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e099      	b.n	800a118 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2202      	movs	r2, #2
 8009ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f022 0201 	bic.w	r2, r2, #1
 800a002:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a004:	e00f      	b.n	800a026 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a006:	f7ff fa9b 	bl	8009540 <HAL_GetTick>
 800a00a:	4602      	mov	r2, r0
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	2b05      	cmp	r3, #5
 800a012:	d908      	bls.n	800a026 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2220      	movs	r2, #32
 800a018:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2203      	movs	r2, #3
 800a01e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e078      	b.n	800a118 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1e8      	bne.n	800a006 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	4b38      	ldr	r3, [pc, #224]	; (800a120 <HAL_DMA_Init+0x158>)
 800a040:	4013      	ands	r3, r2
 800a042:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a052:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a05e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a06a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	4313      	orrs	r3, r2
 800a076:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d107      	bne.n	800a090 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a088:	4313      	orrs	r3, r2
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	f023 0307 	bic.w	r3, r3, #7
 800a0a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d117      	bne.n	800a0ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00e      	beq.n	800a0ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fa9d 	bl	800a60c <DMA_CheckFifoParam>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d008      	beq.n	800a0ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2240      	movs	r2, #64	; 0x40
 800a0dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e016      	b.n	800a118 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa54 	bl	800a5a0 <DMA_CalcBaseAndBitshift>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a100:	223f      	movs	r2, #63	; 0x3f
 800a102:	409a      	lsls	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	f010803f 	.word	0xf010803f

0800a124 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
 800a130:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a142:	2b01      	cmp	r3, #1
 800a144:	d101      	bne.n	800a14a <HAL_DMA_Start_IT+0x26>
 800a146:	2302      	movs	r3, #2
 800a148:	e040      	b.n	800a1cc <HAL_DMA_Start_IT+0xa8>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d12f      	bne.n	800a1be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2202      	movs	r2, #2
 800a162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	68b9      	ldr	r1, [r7, #8]
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 f9e6 	bl	800a544 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a17c:	223f      	movs	r2, #63	; 0x3f
 800a17e:	409a      	lsls	r2, r3
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f042 0216 	orr.w	r2, r2, #22
 800a192:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d007      	beq.n	800a1ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f042 0208 	orr.w	r2, r2, #8
 800a1aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f042 0201 	orr.w	r2, r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	e005      	b.n	800a1ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b02      	cmp	r3, #2
 800a1e6:	d004      	beq.n	800a1f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2280      	movs	r2, #128	; 0x80
 800a1ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e00c      	b.n	800a20c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2205      	movs	r2, #5
 800a1f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f022 0201 	bic.w	r2, r2, #1
 800a208:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a220:	2300      	movs	r3, #0
 800a222:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a224:	4b92      	ldr	r3, [pc, #584]	; (800a470 <HAL_DMA_IRQHandler+0x258>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a92      	ldr	r2, [pc, #584]	; (800a474 <HAL_DMA_IRQHandler+0x25c>)
 800a22a:	fba2 2303 	umull	r2, r3, r2, r3
 800a22e:	0a9b      	lsrs	r3, r3, #10
 800a230:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a236:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a242:	2208      	movs	r2, #8
 800a244:	409a      	lsls	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	4013      	ands	r3, r2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d01a      	beq.n	800a284 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 0304 	and.w	r3, r3, #4
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d013      	beq.n	800a284 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f022 0204 	bic.w	r2, r2, #4
 800a26a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a270:	2208      	movs	r2, #8
 800a272:	409a      	lsls	r2, r3
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27c:	f043 0201 	orr.w	r2, r3, #1
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a288:	2201      	movs	r2, #1
 800a28a:	409a      	lsls	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4013      	ands	r3, r2
 800a290:	2b00      	cmp	r3, #0
 800a292:	d012      	beq.n	800a2ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	409a      	lsls	r2, r3
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b2:	f043 0202 	orr.w	r2, r3, #2
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2be:	2204      	movs	r2, #4
 800a2c0:	409a      	lsls	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d012      	beq.n	800a2f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0302 	and.w	r3, r3, #2
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00b      	beq.n	800a2f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2dc:	2204      	movs	r2, #4
 800a2de:	409a      	lsls	r2, r3
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e8:	f043 0204 	orr.w	r2, r3, #4
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2f4:	2210      	movs	r2, #16
 800a2f6:	409a      	lsls	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d043      	beq.n	800a388 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 0308 	and.w	r3, r3, #8
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d03c      	beq.n	800a388 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a312:	2210      	movs	r2, #16
 800a314:	409a      	lsls	r2, r3
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d018      	beq.n	800a35a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a332:	2b00      	cmp	r3, #0
 800a334:	d108      	bne.n	800a348 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d024      	beq.n	800a388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	4798      	blx	r3
 800a346:	e01f      	b.n	800a388 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d01b      	beq.n	800a388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	4798      	blx	r3
 800a358:	e016      	b.n	800a388 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a364:	2b00      	cmp	r3, #0
 800a366:	d107      	bne.n	800a378 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0208 	bic.w	r2, r2, #8
 800a376:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d003      	beq.n	800a388 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a38c:	2220      	movs	r2, #32
 800a38e:	409a      	lsls	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4013      	ands	r3, r2
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 808e 	beq.w	800a4b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 0310 	and.w	r3, r3, #16
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 8086 	beq.w	800a4b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	409a      	lsls	r2, r3
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b05      	cmp	r3, #5
 800a3c0:	d136      	bne.n	800a430 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 0216 	bic.w	r2, r2, #22
 800a3d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	695a      	ldr	r2, [r3, #20]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d103      	bne.n	800a3f2 <HAL_DMA_IRQHandler+0x1da>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d007      	beq.n	800a402 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f022 0208 	bic.w	r2, r2, #8
 800a400:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a406:	223f      	movs	r2, #63	; 0x3f
 800a408:	409a      	lsls	r2, r3
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a422:	2b00      	cmp	r3, #0
 800a424:	d07d      	beq.n	800a522 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	4798      	blx	r3
        }
        return;
 800a42e:	e078      	b.n	800a522 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d01c      	beq.n	800a478 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d108      	bne.n	800a45e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a450:	2b00      	cmp	r3, #0
 800a452:	d030      	beq.n	800a4b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	4798      	blx	r3
 800a45c:	e02b      	b.n	800a4b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a462:	2b00      	cmp	r3, #0
 800a464:	d027      	beq.n	800a4b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	4798      	blx	r3
 800a46e:	e022      	b.n	800a4b6 <HAL_DMA_IRQHandler+0x29e>
 800a470:	20000000 	.word	0x20000000
 800a474:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10f      	bne.n	800a4a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f022 0210 	bic.w	r2, r2, #16
 800a494:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d003      	beq.n	800a4b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d032      	beq.n	800a524 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d022      	beq.n	800a510 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2205      	movs	r2, #5
 800a4ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f022 0201 	bic.w	r2, r2, #1
 800a4e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	60bb      	str	r3, [r7, #8]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d307      	bcc.n	800a4fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f2      	bne.n	800a4e2 <HAL_DMA_IRQHandler+0x2ca>
 800a4fc:	e000      	b.n	800a500 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a4fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a514:	2b00      	cmp	r3, #0
 800a516:	d005      	beq.n	800a524 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	4798      	blx	r3
 800a520:	e000      	b.n	800a524 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a522:	bf00      	nop
    }
  }
}
 800a524:	3718      	adds	r7, #24
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop

0800a52c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a538:	4618      	mov	r0, r3
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
 800a550:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a560:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	2b40      	cmp	r3, #64	; 0x40
 800a570:	d108      	bne.n	800a584 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a582:	e007      	b.n	800a594 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	60da      	str	r2, [r3, #12]
}
 800a594:	bf00      	nop
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	3b10      	subs	r3, #16
 800a5b0:	4a14      	ldr	r2, [pc, #80]	; (800a604 <DMA_CalcBaseAndBitshift+0x64>)
 800a5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b6:	091b      	lsrs	r3, r3, #4
 800a5b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a5ba:	4a13      	ldr	r2, [pc, #76]	; (800a608 <DMA_CalcBaseAndBitshift+0x68>)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4413      	add	r3, r2
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	d909      	bls.n	800a5e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a5d6:	f023 0303 	bic.w	r3, r3, #3
 800a5da:	1d1a      	adds	r2, r3, #4
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	659a      	str	r2, [r3, #88]	; 0x58
 800a5e0:	e007      	b.n	800a5f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a5ea:	f023 0303 	bic.w	r3, r3, #3
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3714      	adds	r7, #20
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	aaaaaaab 	.word	0xaaaaaaab
 800a608:	08019a5c 	.word	0x08019a5c

0800a60c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d11f      	bne.n	800a666 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2b03      	cmp	r3, #3
 800a62a:	d855      	bhi.n	800a6d8 <DMA_CheckFifoParam+0xcc>
 800a62c:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <DMA_CheckFifoParam+0x28>)
 800a62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a632:	bf00      	nop
 800a634:	0800a645 	.word	0x0800a645
 800a638:	0800a657 	.word	0x0800a657
 800a63c:	0800a645 	.word	0x0800a645
 800a640:	0800a6d9 	.word	0x0800a6d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d045      	beq.n	800a6dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a654:	e042      	b.n	800a6dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a65e:	d13f      	bne.n	800a6e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a664:	e03c      	b.n	800a6e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a66e:	d121      	bne.n	800a6b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2b03      	cmp	r3, #3
 800a674:	d836      	bhi.n	800a6e4 <DMA_CheckFifoParam+0xd8>
 800a676:	a201      	add	r2, pc, #4	; (adr r2, 800a67c <DMA_CheckFifoParam+0x70>)
 800a678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67c:	0800a68d 	.word	0x0800a68d
 800a680:	0800a693 	.word	0x0800a693
 800a684:	0800a68d 	.word	0x0800a68d
 800a688:	0800a6a5 	.word	0x0800a6a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	73fb      	strb	r3, [r7, #15]
      break;
 800a690:	e02f      	b.n	800a6f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d024      	beq.n	800a6e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a6a2:	e021      	b.n	800a6e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a6ac:	d11e      	bne.n	800a6ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a6b2:	e01b      	b.n	800a6ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d902      	bls.n	800a6c0 <DMA_CheckFifoParam+0xb4>
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d003      	beq.n	800a6c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a6be:	e018      	b.n	800a6f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c4:	e015      	b.n	800a6f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00e      	beq.n	800a6f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6d6:	e00b      	b.n	800a6f0 <DMA_CheckFifoParam+0xe4>
      break;
 800a6d8:	bf00      	nop
 800a6da:	e00a      	b.n	800a6f2 <DMA_CheckFifoParam+0xe6>
      break;
 800a6dc:	bf00      	nop
 800a6de:	e008      	b.n	800a6f2 <DMA_CheckFifoParam+0xe6>
      break;
 800a6e0:	bf00      	nop
 800a6e2:	e006      	b.n	800a6f2 <DMA_CheckFifoParam+0xe6>
      break;
 800a6e4:	bf00      	nop
 800a6e6:	e004      	b.n	800a6f2 <DMA_CheckFifoParam+0xe6>
      break;
 800a6e8:	bf00      	nop
 800a6ea:	e002      	b.n	800a6f2 <DMA_CheckFifoParam+0xe6>
      break;   
 800a6ec:	bf00      	nop
 800a6ee:	e000      	b.n	800a6f2 <DMA_CheckFifoParam+0xe6>
      break;
 800a6f0:	bf00      	nop
    }
  } 
  
  return status; 
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a700:	b480      	push	{r7}
 800a702:	b089      	sub	sp, #36	; 0x24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a70a:	2300      	movs	r3, #0
 800a70c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a70e:	2300      	movs	r3, #0
 800a710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a712:	2300      	movs	r3, #0
 800a714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a716:	2300      	movs	r3, #0
 800a718:	61fb      	str	r3, [r7, #28]
 800a71a:	e177      	b.n	800aa0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a71c:	2201      	movs	r2, #1
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	fa02 f303 	lsl.w	r3, r2, r3
 800a724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	4013      	ands	r3, r2
 800a72e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a730:	693a      	ldr	r2, [r7, #16]
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	429a      	cmp	r2, r3
 800a736:	f040 8166 	bne.w	800aa06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d00b      	beq.n	800a75a <HAL_GPIO_Init+0x5a>
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	2b02      	cmp	r3, #2
 800a748:	d007      	beq.n	800a75a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a74e:	2b11      	cmp	r3, #17
 800a750:	d003      	beq.n	800a75a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	2b12      	cmp	r3, #18
 800a758:	d130      	bne.n	800a7bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	005b      	lsls	r3, r3, #1
 800a764:	2203      	movs	r2, #3
 800a766:	fa02 f303 	lsl.w	r3, r2, r3
 800a76a:	43db      	mvns	r3, r3
 800a76c:	69ba      	ldr	r2, [r7, #24]
 800a76e:	4013      	ands	r3, r2
 800a770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	68da      	ldr	r2, [r3, #12]
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	fa02 f303 	lsl.w	r3, r2, r3
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	4313      	orrs	r3, r2
 800a782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	69ba      	ldr	r2, [r7, #24]
 800a788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a790:	2201      	movs	r2, #1
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	fa02 f303 	lsl.w	r3, r2, r3
 800a798:	43db      	mvns	r3, r3
 800a79a:	69ba      	ldr	r2, [r7, #24]
 800a79c:	4013      	ands	r3, r2
 800a79e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	091b      	lsrs	r3, r3, #4
 800a7a6:	f003 0201 	and.w	r2, r3, #1
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b0:	69ba      	ldr	r2, [r7, #24]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	69ba      	ldr	r2, [r7, #24]
 800a7ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	2203      	movs	r2, #3
 800a7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7cc:	43db      	mvns	r3, r3
 800a7ce:	69ba      	ldr	r2, [r7, #24]
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	689a      	ldr	r2, [r3, #8]
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	005b      	lsls	r3, r3, #1
 800a7dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e0:	69ba      	ldr	r2, [r7, #24]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	69ba      	ldr	r2, [r7, #24]
 800a7ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d003      	beq.n	800a7fc <HAL_GPIO_Init+0xfc>
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	2b12      	cmp	r3, #18
 800a7fa:	d123      	bne.n	800a844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	08da      	lsrs	r2, r3, #3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3208      	adds	r2, #8
 800a804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	f003 0307 	and.w	r3, r3, #7
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	220f      	movs	r2, #15
 800a814:	fa02 f303 	lsl.w	r3, r2, r3
 800a818:	43db      	mvns	r3, r3
 800a81a:	69ba      	ldr	r2, [r7, #24]
 800a81c:	4013      	ands	r3, r2
 800a81e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	691a      	ldr	r2, [r3, #16]
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	fa02 f303 	lsl.w	r3, r2, r3
 800a830:	69ba      	ldr	r2, [r7, #24]
 800a832:	4313      	orrs	r3, r2
 800a834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	08da      	lsrs	r2, r3, #3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	3208      	adds	r2, #8
 800a83e:	69b9      	ldr	r1, [r7, #24]
 800a840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	2203      	movs	r2, #3
 800a850:	fa02 f303 	lsl.w	r3, r2, r3
 800a854:	43db      	mvns	r3, r3
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	4013      	ands	r3, r2
 800a85a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	f003 0203 	and.w	r2, r3, #3
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	fa02 f303 	lsl.w	r3, r2, r3
 800a86c:	69ba      	ldr	r2, [r7, #24]
 800a86e:	4313      	orrs	r3, r2
 800a870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	69ba      	ldr	r2, [r7, #24]
 800a876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 80c0 	beq.w	800aa06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a886:	2300      	movs	r3, #0
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	4b65      	ldr	r3, [pc, #404]	; (800aa20 <HAL_GPIO_Init+0x320>)
 800a88c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a88e:	4a64      	ldr	r2, [pc, #400]	; (800aa20 <HAL_GPIO_Init+0x320>)
 800a890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a894:	6453      	str	r3, [r2, #68]	; 0x44
 800a896:	4b62      	ldr	r3, [pc, #392]	; (800aa20 <HAL_GPIO_Init+0x320>)
 800a898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a89a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a8a2:	4a60      	ldr	r2, [pc, #384]	; (800aa24 <HAL_GPIO_Init+0x324>)
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	089b      	lsrs	r3, r3, #2
 800a8a8:	3302      	adds	r3, #2
 800a8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	f003 0303 	and.w	r3, r3, #3
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	220f      	movs	r2, #15
 800a8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a8be:	43db      	mvns	r3, r3
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a57      	ldr	r2, [pc, #348]	; (800aa28 <HAL_GPIO_Init+0x328>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d037      	beq.n	800a93e <HAL_GPIO_Init+0x23e>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a56      	ldr	r2, [pc, #344]	; (800aa2c <HAL_GPIO_Init+0x32c>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d031      	beq.n	800a93a <HAL_GPIO_Init+0x23a>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a55      	ldr	r2, [pc, #340]	; (800aa30 <HAL_GPIO_Init+0x330>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d02b      	beq.n	800a936 <HAL_GPIO_Init+0x236>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a54      	ldr	r2, [pc, #336]	; (800aa34 <HAL_GPIO_Init+0x334>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d025      	beq.n	800a932 <HAL_GPIO_Init+0x232>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a53      	ldr	r2, [pc, #332]	; (800aa38 <HAL_GPIO_Init+0x338>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d01f      	beq.n	800a92e <HAL_GPIO_Init+0x22e>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a52      	ldr	r2, [pc, #328]	; (800aa3c <HAL_GPIO_Init+0x33c>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d019      	beq.n	800a92a <HAL_GPIO_Init+0x22a>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a51      	ldr	r2, [pc, #324]	; (800aa40 <HAL_GPIO_Init+0x340>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d013      	beq.n	800a926 <HAL_GPIO_Init+0x226>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a50      	ldr	r2, [pc, #320]	; (800aa44 <HAL_GPIO_Init+0x344>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d00d      	beq.n	800a922 <HAL_GPIO_Init+0x222>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a4f      	ldr	r2, [pc, #316]	; (800aa48 <HAL_GPIO_Init+0x348>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d007      	beq.n	800a91e <HAL_GPIO_Init+0x21e>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a4e      	ldr	r2, [pc, #312]	; (800aa4c <HAL_GPIO_Init+0x34c>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d101      	bne.n	800a91a <HAL_GPIO_Init+0x21a>
 800a916:	2309      	movs	r3, #9
 800a918:	e012      	b.n	800a940 <HAL_GPIO_Init+0x240>
 800a91a:	230a      	movs	r3, #10
 800a91c:	e010      	b.n	800a940 <HAL_GPIO_Init+0x240>
 800a91e:	2308      	movs	r3, #8
 800a920:	e00e      	b.n	800a940 <HAL_GPIO_Init+0x240>
 800a922:	2307      	movs	r3, #7
 800a924:	e00c      	b.n	800a940 <HAL_GPIO_Init+0x240>
 800a926:	2306      	movs	r3, #6
 800a928:	e00a      	b.n	800a940 <HAL_GPIO_Init+0x240>
 800a92a:	2305      	movs	r3, #5
 800a92c:	e008      	b.n	800a940 <HAL_GPIO_Init+0x240>
 800a92e:	2304      	movs	r3, #4
 800a930:	e006      	b.n	800a940 <HAL_GPIO_Init+0x240>
 800a932:	2303      	movs	r3, #3
 800a934:	e004      	b.n	800a940 <HAL_GPIO_Init+0x240>
 800a936:	2302      	movs	r3, #2
 800a938:	e002      	b.n	800a940 <HAL_GPIO_Init+0x240>
 800a93a:	2301      	movs	r3, #1
 800a93c:	e000      	b.n	800a940 <HAL_GPIO_Init+0x240>
 800a93e:	2300      	movs	r3, #0
 800a940:	69fa      	ldr	r2, [r7, #28]
 800a942:	f002 0203 	and.w	r2, r2, #3
 800a946:	0092      	lsls	r2, r2, #2
 800a948:	4093      	lsls	r3, r2
 800a94a:	69ba      	ldr	r2, [r7, #24]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a950:	4934      	ldr	r1, [pc, #208]	; (800aa24 <HAL_GPIO_Init+0x324>)
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	089b      	lsrs	r3, r3, #2
 800a956:	3302      	adds	r3, #2
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a95e:	4b3c      	ldr	r3, [pc, #240]	; (800aa50 <HAL_GPIO_Init+0x350>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	43db      	mvns	r3, r3
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	4013      	ands	r3, r2
 800a96c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	4313      	orrs	r3, r2
 800a980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a982:	4a33      	ldr	r2, [pc, #204]	; (800aa50 <HAL_GPIO_Init+0x350>)
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a988:	4b31      	ldr	r3, [pc, #196]	; (800aa50 <HAL_GPIO_Init+0x350>)
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	43db      	mvns	r3, r3
 800a992:	69ba      	ldr	r2, [r7, #24]
 800a994:	4013      	ands	r3, r2
 800a996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d003      	beq.n	800a9ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a9ac:	4a28      	ldr	r2, [pc, #160]	; (800aa50 <HAL_GPIO_Init+0x350>)
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a9b2:	4b27      	ldr	r3, [pc, #156]	; (800aa50 <HAL_GPIO_Init+0x350>)
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	43db      	mvns	r3, r3
 800a9bc:	69ba      	ldr	r2, [r7, #24]
 800a9be:	4013      	ands	r3, r2
 800a9c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a9ce:	69ba      	ldr	r2, [r7, #24]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a9d6:	4a1e      	ldr	r2, [pc, #120]	; (800aa50 <HAL_GPIO_Init+0x350>)
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a9dc:	4b1c      	ldr	r3, [pc, #112]	; (800aa50 <HAL_GPIO_Init+0x350>)
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	43db      	mvns	r3, r3
 800a9e6:	69ba      	ldr	r2, [r7, #24]
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d003      	beq.n	800aa00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a9f8:	69ba      	ldr	r2, [r7, #24]
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aa00:	4a13      	ldr	r2, [pc, #76]	; (800aa50 <HAL_GPIO_Init+0x350>)
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	61fb      	str	r3, [r7, #28]
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	2b0f      	cmp	r3, #15
 800aa10:	f67f ae84 	bls.w	800a71c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800aa14:	bf00      	nop
 800aa16:	3724      	adds	r7, #36	; 0x24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	40023800 	.word	0x40023800
 800aa24:	40013800 	.word	0x40013800
 800aa28:	40020000 	.word	0x40020000
 800aa2c:	40020400 	.word	0x40020400
 800aa30:	40020800 	.word	0x40020800
 800aa34:	40020c00 	.word	0x40020c00
 800aa38:	40021000 	.word	0x40021000
 800aa3c:	40021400 	.word	0x40021400
 800aa40:	40021800 	.word	0x40021800
 800aa44:	40021c00 	.word	0x40021c00
 800aa48:	40022000 	.word	0x40022000
 800aa4c:	40022400 	.word	0x40022400
 800aa50:	40013c00 	.word	0x40013c00

0800aa54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	691a      	ldr	r2, [r3, #16]
 800aa64:	887b      	ldrh	r3, [r7, #2]
 800aa66:	4013      	ands	r3, r2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	73fb      	strb	r3, [r7, #15]
 800aa70:	e001      	b.n	800aa76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aa72:	2300      	movs	r3, #0
 800aa74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	807b      	strh	r3, [r7, #2]
 800aa90:	4613      	mov	r3, r2
 800aa92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aa94:	787b      	ldrb	r3, [r7, #1]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aa9a:	887a      	ldrh	r2, [r7, #2]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aaa0:	e003      	b.n	800aaaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aaa2:	887b      	ldrh	r3, [r7, #2]
 800aaa4:	041a      	lsls	r2, r3, #16
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	619a      	str	r2, [r3, #24]
}
 800aaaa:	bf00      	nop
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
	...

0800aab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e11f      	b.n	800ad0a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d106      	bne.n	800aae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7fc f876 	bl	8006bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2224      	movs	r2, #36	; 0x24
 800aae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f022 0201 	bic.w	r2, r2, #1
 800aafa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ab1c:	f001 f96e 	bl	800bdfc <HAL_RCC_GetPCLK1Freq>
 800ab20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	4a7b      	ldr	r2, [pc, #492]	; (800ad14 <HAL_I2C_Init+0x25c>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d807      	bhi.n	800ab3c <HAL_I2C_Init+0x84>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4a7a      	ldr	r2, [pc, #488]	; (800ad18 <HAL_I2C_Init+0x260>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	bf94      	ite	ls
 800ab34:	2301      	movls	r3, #1
 800ab36:	2300      	movhi	r3, #0
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	e006      	b.n	800ab4a <HAL_I2C_Init+0x92>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	4a77      	ldr	r2, [pc, #476]	; (800ad1c <HAL_I2C_Init+0x264>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	bf94      	ite	ls
 800ab44:	2301      	movls	r3, #1
 800ab46:	2300      	movhi	r3, #0
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e0db      	b.n	800ad0a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4a72      	ldr	r2, [pc, #456]	; (800ad20 <HAL_I2C_Init+0x268>)
 800ab56:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5a:	0c9b      	lsrs	r3, r3, #18
 800ab5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	430a      	orrs	r2, r1
 800ab70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	4a64      	ldr	r2, [pc, #400]	; (800ad14 <HAL_I2C_Init+0x25c>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d802      	bhi.n	800ab8c <HAL_I2C_Init+0xd4>
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	e009      	b.n	800aba0 <HAL_I2C_Init+0xe8>
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab92:	fb02 f303 	mul.w	r3, r2, r3
 800ab96:	4a63      	ldr	r2, [pc, #396]	; (800ad24 <HAL_I2C_Init+0x26c>)
 800ab98:	fba2 2303 	umull	r2, r3, r2, r3
 800ab9c:	099b      	lsrs	r3, r3, #6
 800ab9e:	3301      	adds	r3, #1
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	6812      	ldr	r2, [r2, #0]
 800aba4:	430b      	orrs	r3, r1
 800aba6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800abb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	4956      	ldr	r1, [pc, #344]	; (800ad14 <HAL_I2C_Init+0x25c>)
 800abbc:	428b      	cmp	r3, r1
 800abbe:	d80d      	bhi.n	800abdc <HAL_I2C_Init+0x124>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	1e59      	subs	r1, r3, #1
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	005b      	lsls	r3, r3, #1
 800abca:	fbb1 f3f3 	udiv	r3, r1, r3
 800abce:	3301      	adds	r3, #1
 800abd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abd4:	2b04      	cmp	r3, #4
 800abd6:	bf38      	it	cc
 800abd8:	2304      	movcc	r3, #4
 800abda:	e04f      	b.n	800ac7c <HAL_I2C_Init+0x1c4>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d111      	bne.n	800ac08 <HAL_I2C_Init+0x150>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	1e58      	subs	r0, r3, #1
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6859      	ldr	r1, [r3, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	005b      	lsls	r3, r3, #1
 800abf0:	440b      	add	r3, r1
 800abf2:	fbb0 f3f3 	udiv	r3, r0, r3
 800abf6:	3301      	adds	r3, #1
 800abf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bf0c      	ite	eq
 800ac00:	2301      	moveq	r3, #1
 800ac02:	2300      	movne	r3, #0
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	e012      	b.n	800ac2e <HAL_I2C_Init+0x176>
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	1e58      	subs	r0, r3, #1
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6859      	ldr	r1, [r3, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	440b      	add	r3, r1
 800ac16:	0099      	lsls	r1, r3, #2
 800ac18:	440b      	add	r3, r1
 800ac1a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac1e:	3301      	adds	r3, #1
 800ac20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	bf0c      	ite	eq
 800ac28:	2301      	moveq	r3, #1
 800ac2a:	2300      	movne	r3, #0
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <HAL_I2C_Init+0x17e>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e022      	b.n	800ac7c <HAL_I2C_Init+0x1c4>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d10e      	bne.n	800ac5c <HAL_I2C_Init+0x1a4>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	1e58      	subs	r0, r3, #1
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6859      	ldr	r1, [r3, #4]
 800ac46:	460b      	mov	r3, r1
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	440b      	add	r3, r1
 800ac4c:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac50:	3301      	adds	r3, #1
 800ac52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac5a:	e00f      	b.n	800ac7c <HAL_I2C_Init+0x1c4>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	1e58      	subs	r0, r3, #1
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6859      	ldr	r1, [r3, #4]
 800ac64:	460b      	mov	r3, r1
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	440b      	add	r3, r1
 800ac6a:	0099      	lsls	r1, r3, #2
 800ac6c:	440b      	add	r3, r1
 800ac6e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ac72:	3301      	adds	r3, #1
 800ac74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac7c:	6879      	ldr	r1, [r7, #4]
 800ac7e:	6809      	ldr	r1, [r1, #0]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	69da      	ldr	r2, [r3, #28]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a1b      	ldr	r3, [r3, #32]
 800ac96:	431a      	orrs	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800acaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	6911      	ldr	r1, [r2, #16]
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	68d2      	ldr	r2, [r2, #12]
 800acb6:	4311      	orrs	r1, r2
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	6812      	ldr	r2, [r2, #0]
 800acbc:	430b      	orrs	r3, r1
 800acbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	695a      	ldr	r2, [r3, #20]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	431a      	orrs	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	430a      	orrs	r2, r1
 800acda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f042 0201 	orr.w	r2, r2, #1
 800acea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	000186a0 	.word	0x000186a0
 800ad18:	001e847f 	.word	0x001e847f
 800ad1c:	003d08ff 	.word	0x003d08ff
 800ad20:	431bde83 	.word	0x431bde83
 800ad24:	10624dd3 	.word	0x10624dd3

0800ad28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b088      	sub	sp, #32
 800ad2c:	af02      	add	r7, sp, #8
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	607a      	str	r2, [r7, #4]
 800ad32:	461a      	mov	r2, r3
 800ad34:	460b      	mov	r3, r1
 800ad36:	817b      	strh	r3, [r7, #10]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ad3c:	f7fe fc00 	bl	8009540 <HAL_GetTick>
 800ad40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	2b20      	cmp	r3, #32
 800ad4c:	f040 80e0 	bne.w	800af10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	2319      	movs	r3, #25
 800ad56:	2201      	movs	r2, #1
 800ad58:	4970      	ldr	r1, [pc, #448]	; (800af1c <HAL_I2C_Master_Transmit+0x1f4>)
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f000 fc58 	bl	800b610 <I2C_WaitOnFlagUntilTimeout>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d001      	beq.n	800ad6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ad66:	2302      	movs	r3, #2
 800ad68:	e0d3      	b.n	800af12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d101      	bne.n	800ad78 <HAL_I2C_Master_Transmit+0x50>
 800ad74:	2302      	movs	r3, #2
 800ad76:	e0cc      	b.n	800af12 <HAL_I2C_Master_Transmit+0x1ea>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d007      	beq.n	800ad9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f042 0201 	orr.w	r2, r2, #1
 800ad9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800adac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2221      	movs	r2, #33	; 0x21
 800adb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2210      	movs	r2, #16
 800adba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	893a      	ldrh	r2, [r7, #8]
 800adce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800add4:	b29a      	uxth	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	4a50      	ldr	r2, [pc, #320]	; (800af20 <HAL_I2C_Master_Transmit+0x1f8>)
 800adde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ade0:	8979      	ldrh	r1, [r7, #10]
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	6a3a      	ldr	r2, [r7, #32]
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	f000 fac2 	bl	800b370 <I2C_MasterRequestWrite>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d001      	beq.n	800adf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	e08d      	b.n	800af12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adf6:	2300      	movs	r3, #0
 800adf8:	613b      	str	r3, [r7, #16]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	699b      	ldr	r3, [r3, #24]
 800ae08:	613b      	str	r3, [r7, #16]
 800ae0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ae0c:	e066      	b.n	800aedc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	6a39      	ldr	r1, [r7, #32]
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f000 fcd2 	bl	800b7bc <I2C_WaitOnTXEFlagUntilTimeout>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00d      	beq.n	800ae3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae22:	2b04      	cmp	r3, #4
 800ae24:	d107      	bne.n	800ae36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e06b      	b.n	800af12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3e:	781a      	ldrb	r2, [r3, #0]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	1c5a      	adds	r2, r3, #1
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	3b01      	subs	r3, #1
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae62:	3b01      	subs	r3, #1
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d11b      	bne.n	800aeb0 <HAL_I2C_Master_Transmit+0x188>
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d017      	beq.n	800aeb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	781a      	ldrb	r2, [r3, #0]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	6a39      	ldr	r1, [r7, #32]
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 fcc2 	bl	800b83e <I2C_WaitOnBTFFlagUntilTimeout>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00d      	beq.n	800aedc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec4:	2b04      	cmp	r3, #4
 800aec6:	d107      	bne.n	800aed8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aed6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e01a      	b.n	800af12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d194      	bne.n	800ae0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2220      	movs	r2, #32
 800aef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	e000      	b.n	800af12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800af10:	2302      	movs	r3, #2
  }
}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	00100002 	.word	0x00100002
 800af20:	ffff0000 	.word	0xffff0000

0800af24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08c      	sub	sp, #48	; 0x30
 800af28:	af02      	add	r7, sp, #8
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	607a      	str	r2, [r7, #4]
 800af2e:	461a      	mov	r2, r3
 800af30:	460b      	mov	r3, r1
 800af32:	817b      	strh	r3, [r7, #10]
 800af34:	4613      	mov	r3, r2
 800af36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800af38:	f7fe fb02 	bl	8009540 <HAL_GetTick>
 800af3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af44:	b2db      	uxtb	r3, r3
 800af46:	2b20      	cmp	r3, #32
 800af48:	f040 820b 	bne.w	800b362 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	2319      	movs	r3, #25
 800af52:	2201      	movs	r2, #1
 800af54:	497c      	ldr	r1, [pc, #496]	; (800b148 <HAL_I2C_Master_Receive+0x224>)
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f000 fb5a 	bl	800b610 <I2C_WaitOnFlagUntilTimeout>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800af62:	2302      	movs	r3, #2
 800af64:	e1fe      	b.n	800b364 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d101      	bne.n	800af74 <HAL_I2C_Master_Receive+0x50>
 800af70:	2302      	movs	r3, #2
 800af72:	e1f7      	b.n	800b364 <HAL_I2C_Master_Receive+0x440>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2201      	movs	r2, #1
 800af78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	2b01      	cmp	r3, #1
 800af88:	d007      	beq.n	800af9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f042 0201 	orr.w	r2, r2, #1
 800af98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800afa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2222      	movs	r2, #34	; 0x22
 800afae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2210      	movs	r2, #16
 800afb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	893a      	ldrh	r2, [r7, #8]
 800afca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	4a5c      	ldr	r2, [pc, #368]	; (800b14c <HAL_I2C_Master_Receive+0x228>)
 800afda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800afdc:	8979      	ldrh	r1, [r7, #10]
 800afde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f000 fa46 	bl	800b474 <I2C_MasterRequestRead>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e1b8      	b.n	800b364 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d113      	bne.n	800b022 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800affa:	2300      	movs	r3, #0
 800affc:	623b      	str	r3, [r7, #32]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	623b      	str	r3, [r7, #32]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	623b      	str	r3, [r7, #32]
 800b00e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	e18c      	b.n	800b33c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b026:	2b01      	cmp	r3, #1
 800b028:	d11b      	bne.n	800b062 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b03a:	2300      	movs	r3, #0
 800b03c:	61fb      	str	r3, [r7, #28]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	61fb      	str	r3, [r7, #28]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	61fb      	str	r3, [r7, #28]
 800b04e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	e16c      	b.n	800b33c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b066:	2b02      	cmp	r3, #2
 800b068:	d11b      	bne.n	800b0a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b078:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b08a:	2300      	movs	r3, #0
 800b08c:	61bb      	str	r3, [r7, #24]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	695b      	ldr	r3, [r3, #20]
 800b094:	61bb      	str	r3, [r7, #24]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	61bb      	str	r3, [r7, #24]
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	e14c      	b.n	800b33c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b0b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	617b      	str	r3, [r7, #20]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	695b      	ldr	r3, [r3, #20]
 800b0bc:	617b      	str	r3, [r7, #20]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	699b      	ldr	r3, [r3, #24]
 800b0c4:	617b      	str	r3, [r7, #20]
 800b0c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b0c8:	e138      	b.n	800b33c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ce:	2b03      	cmp	r3, #3
 800b0d0:	f200 80f1 	bhi.w	800b2b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d123      	bne.n	800b124 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 fbed 	bl	800b8c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e139      	b.n	800b364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	691a      	ldr	r2, [r3, #16]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fa:	b2d2      	uxtb	r2, r2
 800b0fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b102:	1c5a      	adds	r2, r3, #1
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b10c:	3b01      	subs	r3, #1
 800b10e:	b29a      	uxth	r2, r3
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b118:	b29b      	uxth	r3, r3
 800b11a:	3b01      	subs	r3, #1
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b122:	e10b      	b.n	800b33c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d14e      	bne.n	800b1ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b132:	2200      	movs	r2, #0
 800b134:	4906      	ldr	r1, [pc, #24]	; (800b150 <HAL_I2C_Master_Receive+0x22c>)
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f000 fa6a 	bl	800b610 <I2C_WaitOnFlagUntilTimeout>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d008      	beq.n	800b154 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e10e      	b.n	800b364 <HAL_I2C_Master_Receive+0x440>
 800b146:	bf00      	nop
 800b148:	00100002 	.word	0x00100002
 800b14c:	ffff0000 	.word	0xffff0000
 800b150:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691a      	ldr	r2, [r3, #16]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	b2d2      	uxtb	r2, r2
 800b170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	1c5a      	adds	r2, r3, #1
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b180:	3b01      	subs	r3, #1
 800b182:	b29a      	uxth	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	3b01      	subs	r3, #1
 800b190:	b29a      	uxth	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	691a      	ldr	r2, [r3, #16]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	b2d2      	uxtb	r2, r2
 800b1a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b1c8:	e0b8      	b.n	800b33c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	4966      	ldr	r1, [pc, #408]	; (800b36c <HAL_I2C_Master_Receive+0x448>)
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f000 fa1b 	bl	800b610 <I2C_WaitOnFlagUntilTimeout>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e0bf      	b.n	800b364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	691a      	ldr	r2, [r3, #16]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fe:	b2d2      	uxtb	r2, r2
 800b200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	1c5a      	adds	r2, r3, #1
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b210:	3b01      	subs	r3, #1
 800b212:	b29a      	uxth	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	3b01      	subs	r3, #1
 800b220:	b29a      	uxth	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22c:	2200      	movs	r2, #0
 800b22e:	494f      	ldr	r1, [pc, #316]	; (800b36c <HAL_I2C_Master_Receive+0x448>)
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f000 f9ed 	bl	800b610 <I2C_WaitOnFlagUntilTimeout>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e091      	b.n	800b364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b24e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	691a      	ldr	r2, [r3, #16]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25a:	b2d2      	uxtb	r2, r2
 800b25c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b26c:	3b01      	subs	r3, #1
 800b26e:	b29a      	uxth	r2, r3
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b278:	b29b      	uxth	r3, r3
 800b27a:	3b01      	subs	r3, #1
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	691a      	ldr	r2, [r3, #16]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28c:	b2d2      	uxtb	r2, r2
 800b28e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b294:	1c5a      	adds	r2, r3, #1
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b2b4:	e042      	b.n	800b33c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 fb00 	bl	800b8c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e04c      	b.n	800b364 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	691a      	ldr	r2, [r3, #16]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	b2d2      	uxtb	r2, r2
 800b2d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	f003 0304 	and.w	r3, r3, #4
 800b306:	2b04      	cmp	r3, #4
 800b308:	d118      	bne.n	800b33c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	691a      	ldr	r2, [r3, #16]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b314:	b2d2      	uxtb	r2, r2
 800b316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b326:	3b01      	subs	r3, #1
 800b328:	b29a      	uxth	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b332:	b29b      	uxth	r3, r3
 800b334:	3b01      	subs	r3, #1
 800b336:	b29a      	uxth	r2, r3
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b340:	2b00      	cmp	r3, #0
 800b342:	f47f aec2 	bne.w	800b0ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2220      	movs	r2, #32
 800b34a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	e000      	b.n	800b364 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b362:	2302      	movs	r3, #2
  }
}
 800b364:	4618      	mov	r0, r3
 800b366:	3728      	adds	r7, #40	; 0x28
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	00010004 	.word	0x00010004

0800b370 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af02      	add	r7, sp, #8
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	607a      	str	r2, [r7, #4]
 800b37a:	603b      	str	r3, [r7, #0]
 800b37c:	460b      	mov	r3, r1
 800b37e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b384:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2b08      	cmp	r3, #8
 800b38a:	d006      	beq.n	800b39a <I2C_MasterRequestWrite+0x2a>
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d003      	beq.n	800b39a <I2C_MasterRequestWrite+0x2a>
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b398:	d108      	bne.n	800b3ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3a8:	601a      	str	r2, [r3, #0]
 800b3aa:	e00b      	b.n	800b3c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b0:	2b12      	cmp	r3, #18
 800b3b2:	d107      	bne.n	800b3c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f000 f91d 	bl	800b610 <I2C_WaitOnFlagUntilTimeout>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00d      	beq.n	800b3f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ea:	d103      	bne.n	800b3f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e035      	b.n	800b464 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b400:	d108      	bne.n	800b414 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b402:	897b      	ldrh	r3, [r7, #10]
 800b404:	b2db      	uxtb	r3, r3
 800b406:	461a      	mov	r2, r3
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b410:	611a      	str	r2, [r3, #16]
 800b412:	e01b      	b.n	800b44c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b414:	897b      	ldrh	r3, [r7, #10]
 800b416:	11db      	asrs	r3, r3, #7
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	f003 0306 	and.w	r3, r3, #6
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	f063 030f 	orn	r3, r3, #15
 800b424:	b2da      	uxtb	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	490e      	ldr	r1, [pc, #56]	; (800b46c <I2C_MasterRequestWrite+0xfc>)
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f000 f943 	bl	800b6be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e010      	b.n	800b464 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b442:	897b      	ldrh	r3, [r7, #10]
 800b444:	b2da      	uxtb	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	4907      	ldr	r1, [pc, #28]	; (800b470 <I2C_MasterRequestWrite+0x100>)
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f000 f933 	bl	800b6be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e000      	b.n	800b464 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3718      	adds	r7, #24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	00010008 	.word	0x00010008
 800b470:	00010002 	.word	0x00010002

0800b474 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af02      	add	r7, sp, #8
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	607a      	str	r2, [r7, #4]
 800b47e:	603b      	str	r3, [r7, #0]
 800b480:	460b      	mov	r3, r1
 800b482:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b488:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b498:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b08      	cmp	r3, #8
 800b49e:	d006      	beq.n	800b4ae <I2C_MasterRequestRead+0x3a>
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d003      	beq.n	800b4ae <I2C_MasterRequestRead+0x3a>
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b4ac:	d108      	bne.n	800b4c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4bc:	601a      	str	r2, [r3, #0]
 800b4be:	e00b      	b.n	800b4d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4c4:	2b11      	cmp	r3, #17
 800b4c6:	d107      	bne.n	800b4d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f893 	bl	800b610 <I2C_WaitOnFlagUntilTimeout>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00d      	beq.n	800b50c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4fe:	d103      	bne.n	800b508 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b506:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b508:	2303      	movs	r3, #3
 800b50a:	e079      	b.n	800b600 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b514:	d108      	bne.n	800b528 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b516:	897b      	ldrh	r3, [r7, #10]
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	f043 0301 	orr.w	r3, r3, #1
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	611a      	str	r2, [r3, #16]
 800b526:	e05f      	b.n	800b5e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b528:	897b      	ldrh	r3, [r7, #10]
 800b52a:	11db      	asrs	r3, r3, #7
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	f003 0306 	and.w	r3, r3, #6
 800b532:	b2db      	uxtb	r3, r3
 800b534:	f063 030f 	orn	r3, r3, #15
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	4930      	ldr	r1, [pc, #192]	; (800b608 <I2C_MasterRequestRead+0x194>)
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f000 f8b9 	bl	800b6be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e054      	b.n	800b600 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b556:	897b      	ldrh	r3, [r7, #10]
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	4929      	ldr	r1, [pc, #164]	; (800b60c <I2C_MasterRequestRead+0x198>)
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f000 f8a9 	bl	800b6be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e044      	b.n	800b600 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b576:	2300      	movs	r3, #0
 800b578:	613b      	str	r3, [r7, #16]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	613b      	str	r3, [r7, #16]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	613b      	str	r3, [r7, #16]
 800b58a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b59a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f000 f831 	bl	800b610 <I2C_WaitOnFlagUntilTimeout>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00d      	beq.n	800b5d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5c2:	d103      	bne.n	800b5cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	e017      	b.n	800b600 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b5d0:	897b      	ldrh	r3, [r7, #10]
 800b5d2:	11db      	asrs	r3, r3, #7
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	f003 0306 	and.w	r3, r3, #6
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	f063 030e 	orn	r3, r3, #14
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	4907      	ldr	r1, [pc, #28]	; (800b60c <I2C_MasterRequestRead+0x198>)
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f000 f865 	bl	800b6be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e000      	b.n	800b600 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3718      	adds	r7, #24
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	00010008 	.word	0x00010008
 800b60c:	00010002 	.word	0x00010002

0800b610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	603b      	str	r3, [r7, #0]
 800b61c:	4613      	mov	r3, r2
 800b61e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b620:	e025      	b.n	800b66e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b628:	d021      	beq.n	800b66e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b62a:	f7fd ff89 	bl	8009540 <HAL_GetTick>
 800b62e:	4602      	mov	r2, r0
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	429a      	cmp	r2, r3
 800b638:	d302      	bcc.n	800b640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d116      	bne.n	800b66e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2200      	movs	r2, #0
 800b644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2220      	movs	r2, #32
 800b64a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	f043 0220 	orr.w	r2, r3, #32
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e023      	b.n	800b6b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	0c1b      	lsrs	r3, r3, #16
 800b672:	b2db      	uxtb	r3, r3
 800b674:	2b01      	cmp	r3, #1
 800b676:	d10d      	bne.n	800b694 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	695b      	ldr	r3, [r3, #20]
 800b67e:	43da      	mvns	r2, r3
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	4013      	ands	r3, r2
 800b684:	b29b      	uxth	r3, r3
 800b686:	2b00      	cmp	r3, #0
 800b688:	bf0c      	ite	eq
 800b68a:	2301      	moveq	r3, #1
 800b68c:	2300      	movne	r3, #0
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	461a      	mov	r2, r3
 800b692:	e00c      	b.n	800b6ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	43da      	mvns	r2, r3
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	4013      	ands	r3, r2
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	bf0c      	ite	eq
 800b6a6:	2301      	moveq	r3, #1
 800b6a8:	2300      	movne	r3, #0
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	79fb      	ldrb	r3, [r7, #7]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d0b6      	beq.n	800b622 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b084      	sub	sp, #16
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	60f8      	str	r0, [r7, #12]
 800b6c6:	60b9      	str	r1, [r7, #8]
 800b6c8:	607a      	str	r2, [r7, #4]
 800b6ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b6cc:	e051      	b.n	800b772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6dc:	d123      	bne.n	800b726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b6f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2220      	movs	r2, #32
 800b702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b712:	f043 0204 	orr.w	r2, r3, #4
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e046      	b.n	800b7b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72c:	d021      	beq.n	800b772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b72e:	f7fd ff07 	bl	8009540 <HAL_GetTick>
 800b732:	4602      	mov	r2, r0
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d302      	bcc.n	800b744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d116      	bne.n	800b772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2220      	movs	r2, #32
 800b74e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75e:	f043 0220 	orr.w	r2, r3, #32
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e020      	b.n	800b7b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	0c1b      	lsrs	r3, r3, #16
 800b776:	b2db      	uxtb	r3, r3
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d10c      	bne.n	800b796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	695b      	ldr	r3, [r3, #20]
 800b782:	43da      	mvns	r2, r3
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	4013      	ands	r3, r2
 800b788:	b29b      	uxth	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	bf14      	ite	ne
 800b78e:	2301      	movne	r3, #1
 800b790:	2300      	moveq	r3, #0
 800b792:	b2db      	uxtb	r3, r3
 800b794:	e00b      	b.n	800b7ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	43da      	mvns	r2, r3
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	bf14      	ite	ne
 800b7a8:	2301      	movne	r3, #1
 800b7aa:	2300      	moveq	r3, #0
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d18d      	bne.n	800b6ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b7c8:	e02d      	b.n	800b826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f000 f8ce 	bl	800b96c <I2C_IsAcknowledgeFailed>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d001      	beq.n	800b7da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e02d      	b.n	800b836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e0:	d021      	beq.n	800b826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7e2:	f7fd fead 	bl	8009540 <HAL_GetTick>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	68ba      	ldr	r2, [r7, #8]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d302      	bcc.n	800b7f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d116      	bne.n	800b826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2220      	movs	r2, #32
 800b802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b812:	f043 0220 	orr.w	r2, r3, #32
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e007      	b.n	800b836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b830:	2b80      	cmp	r3, #128	; 0x80
 800b832:	d1ca      	bne.n	800b7ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b084      	sub	sp, #16
 800b842:	af00      	add	r7, sp, #0
 800b844:	60f8      	str	r0, [r7, #12]
 800b846:	60b9      	str	r1, [r7, #8]
 800b848:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b84a:	e02d      	b.n	800b8a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f000 f88d 	bl	800b96c <I2C_IsAcknowledgeFailed>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d001      	beq.n	800b85c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	e02d      	b.n	800b8b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b862:	d021      	beq.n	800b8a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b864:	f7fd fe6c 	bl	8009540 <HAL_GetTick>
 800b868:	4602      	mov	r2, r0
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	429a      	cmp	r2, r3
 800b872:	d302      	bcc.n	800b87a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d116      	bne.n	800b8a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2200      	movs	r2, #0
 800b87e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2220      	movs	r2, #32
 800b884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b894:	f043 0220 	orr.w	r2, r3, #32
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e007      	b.n	800b8b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	695b      	ldr	r3, [r3, #20]
 800b8ae:	f003 0304 	and.w	r3, r3, #4
 800b8b2:	2b04      	cmp	r3, #4
 800b8b4:	d1ca      	bne.n	800b84c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b8cc:	e042      	b.n	800b954 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	695b      	ldr	r3, [r3, #20]
 800b8d4:	f003 0310 	and.w	r3, r3, #16
 800b8d8:	2b10      	cmp	r3, #16
 800b8da:	d119      	bne.n	800b910 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f06f 0210 	mvn.w	r2, #16
 800b8e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e029      	b.n	800b964 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b910:	f7fd fe16 	bl	8009540 <HAL_GetTick>
 800b914:	4602      	mov	r2, r0
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	68ba      	ldr	r2, [r7, #8]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d302      	bcc.n	800b926 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d116      	bne.n	800b954 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2220      	movs	r2, #32
 800b930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2200      	movs	r2, #0
 800b938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b940:	f043 0220 	orr.w	r2, r3, #32
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	e007      	b.n	800b964 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	695b      	ldr	r3, [r3, #20]
 800b95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b95e:	2b40      	cmp	r3, #64	; 0x40
 800b960:	d1b5      	bne.n	800b8ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b97e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b982:	d11b      	bne.n	800b9bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b98c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2220      	movs	r2, #32
 800b998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a8:	f043 0204 	orr.w	r2, r3, #4
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e000      	b.n	800b9be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
	...

0800b9cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	603b      	str	r3, [r7, #0]
 800b9da:	4b20      	ldr	r3, [pc, #128]	; (800ba5c <HAL_PWREx_EnableOverDrive+0x90>)
 800b9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9de:	4a1f      	ldr	r2, [pc, #124]	; (800ba5c <HAL_PWREx_EnableOverDrive+0x90>)
 800b9e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9e4:	6413      	str	r3, [r2, #64]	; 0x40
 800b9e6:	4b1d      	ldr	r3, [pc, #116]	; (800ba5c <HAL_PWREx_EnableOverDrive+0x90>)
 800b9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9ee:	603b      	str	r3, [r7, #0]
 800b9f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b9f2:	4b1b      	ldr	r3, [pc, #108]	; (800ba60 <HAL_PWREx_EnableOverDrive+0x94>)
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b9f8:	f7fd fda2 	bl	8009540 <HAL_GetTick>
 800b9fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b9fe:	e009      	b.n	800ba14 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ba00:	f7fd fd9e 	bl	8009540 <HAL_GetTick>
 800ba04:	4602      	mov	r2, r0
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba0e:	d901      	bls.n	800ba14 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e01f      	b.n	800ba54 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ba14:	4b13      	ldr	r3, [pc, #76]	; (800ba64 <HAL_PWREx_EnableOverDrive+0x98>)
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba20:	d1ee      	bne.n	800ba00 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ba22:	4b11      	ldr	r3, [pc, #68]	; (800ba68 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ba24:	2201      	movs	r2, #1
 800ba26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ba28:	f7fd fd8a 	bl	8009540 <HAL_GetTick>
 800ba2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ba2e:	e009      	b.n	800ba44 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ba30:	f7fd fd86 	bl	8009540 <HAL_GetTick>
 800ba34:	4602      	mov	r2, r0
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba3e:	d901      	bls.n	800ba44 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ba40:	2303      	movs	r3, #3
 800ba42:	e007      	b.n	800ba54 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ba44:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <HAL_PWREx_EnableOverDrive+0x98>)
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba50:	d1ee      	bne.n	800ba30 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	40023800 	.word	0x40023800
 800ba60:	420e0040 	.word	0x420e0040
 800ba64:	40007000 	.word	0x40007000
 800ba68:	420e0044 	.word	0x420e0044

0800ba6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e0cc      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ba80:	4b68      	ldr	r3, [pc, #416]	; (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 030f 	and.w	r3, r3, #15
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d90c      	bls.n	800baa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba8e:	4b65      	ldr	r3, [pc, #404]	; (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	b2d2      	uxtb	r2, r2
 800ba94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba96:	4b63      	ldr	r3, [pc, #396]	; (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f003 030f 	and.w	r3, r3, #15
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d001      	beq.n	800baa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	e0b8      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f003 0302 	and.w	r3, r3, #2
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d020      	beq.n	800baf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 0304 	and.w	r3, r3, #4
 800babc:	2b00      	cmp	r3, #0
 800babe:	d005      	beq.n	800bacc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bac0:	4b59      	ldr	r3, [pc, #356]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	4a58      	ldr	r2, [pc, #352]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bac6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800baca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0308 	and.w	r3, r3, #8
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d005      	beq.n	800bae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bad8:	4b53      	ldr	r3, [pc, #332]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	4a52      	ldr	r2, [pc, #328]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bade:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bae4:	4b50      	ldr	r3, [pc, #320]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	494d      	ldr	r1, [pc, #308]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800baf2:	4313      	orrs	r3, r2
 800baf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d044      	beq.n	800bb8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d107      	bne.n	800bb1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb0a:	4b47      	ldr	r3, [pc, #284]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d119      	bne.n	800bb4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	e07f      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d003      	beq.n	800bb2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	d107      	bne.n	800bb3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb2a:	4b3f      	ldr	r3, [pc, #252]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d109      	bne.n	800bb4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e06f      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb3a:	4b3b      	ldr	r3, [pc, #236]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f003 0302 	and.w	r3, r3, #2
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e067      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bb4a:	4b37      	ldr	r3, [pc, #220]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	f023 0203 	bic.w	r2, r3, #3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	4934      	ldr	r1, [pc, #208]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bb5c:	f7fd fcf0 	bl	8009540 <HAL_GetTick>
 800bb60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb62:	e00a      	b.n	800bb7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb64:	f7fd fcec 	bl	8009540 <HAL_GetTick>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d901      	bls.n	800bb7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bb76:	2303      	movs	r3, #3
 800bb78:	e04f      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb7a:	4b2b      	ldr	r3, [pc, #172]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	f003 020c 	and.w	r2, r3, #12
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d1eb      	bne.n	800bb64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bb8c:	4b25      	ldr	r3, [pc, #148]	; (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 030f 	and.w	r3, r3, #15
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d20c      	bcs.n	800bbb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb9a:	4b22      	ldr	r3, [pc, #136]	; (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	b2d2      	uxtb	r2, r2
 800bba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bba2:	4b20      	ldr	r3, [pc, #128]	; (800bc24 <HAL_RCC_ClockConfig+0x1b8>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f003 030f 	and.w	r3, r3, #15
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d001      	beq.n	800bbb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e032      	b.n	800bc1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 0304 	and.w	r3, r3, #4
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d008      	beq.n	800bbd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bbc0:	4b19      	ldr	r3, [pc, #100]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	4916      	ldr	r1, [pc, #88]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f003 0308 	and.w	r3, r3, #8
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d009      	beq.n	800bbf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bbde:	4b12      	ldr	r3, [pc, #72]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	00db      	lsls	r3, r3, #3
 800bbec:	490e      	ldr	r1, [pc, #56]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bbf2:	f000 f821 	bl	800bc38 <HAL_RCC_GetSysClockFreq>
 800bbf6:	4601      	mov	r1, r0
 800bbf8:	4b0b      	ldr	r3, [pc, #44]	; (800bc28 <HAL_RCC_ClockConfig+0x1bc>)
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	091b      	lsrs	r3, r3, #4
 800bbfe:	f003 030f 	and.w	r3, r3, #15
 800bc02:	4a0a      	ldr	r2, [pc, #40]	; (800bc2c <HAL_RCC_ClockConfig+0x1c0>)
 800bc04:	5cd3      	ldrb	r3, [r2, r3]
 800bc06:	fa21 f303 	lsr.w	r3, r1, r3
 800bc0a:	4a09      	ldr	r2, [pc, #36]	; (800bc30 <HAL_RCC_ClockConfig+0x1c4>)
 800bc0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bc0e:	4b09      	ldr	r3, [pc, #36]	; (800bc34 <HAL_RCC_ClockConfig+0x1c8>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fd fc50 	bl	80094b8 <HAL_InitTick>

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	40023c00 	.word	0x40023c00
 800bc28:	40023800 	.word	0x40023800
 800bc2c:	08019a44 	.word	0x08019a44
 800bc30:	20000000 	.word	0x20000000
 800bc34:	20000004 	.word	0x20000004

0800bc38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	607b      	str	r3, [r7, #4]
 800bc42:	2300      	movs	r3, #0
 800bc44:	60fb      	str	r3, [r7, #12]
 800bc46:	2300      	movs	r3, #0
 800bc48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bc4e:	4b63      	ldr	r3, [pc, #396]	; (800bddc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	f003 030c 	and.w	r3, r3, #12
 800bc56:	2b04      	cmp	r3, #4
 800bc58:	d007      	beq.n	800bc6a <HAL_RCC_GetSysClockFreq+0x32>
 800bc5a:	2b08      	cmp	r3, #8
 800bc5c:	d008      	beq.n	800bc70 <HAL_RCC_GetSysClockFreq+0x38>
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f040 80b4 	bne.w	800bdcc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bc64:	4b5e      	ldr	r3, [pc, #376]	; (800bde0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bc66:	60bb      	str	r3, [r7, #8]
       break;
 800bc68:	e0b3      	b.n	800bdd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bc6a:	4b5d      	ldr	r3, [pc, #372]	; (800bde0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bc6c:	60bb      	str	r3, [r7, #8]
      break;
 800bc6e:	e0b0      	b.n	800bdd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bc70:	4b5a      	ldr	r3, [pc, #360]	; (800bddc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bc7a:	4b58      	ldr	r3, [pc, #352]	; (800bddc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d04a      	beq.n	800bd1c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc86:	4b55      	ldr	r3, [pc, #340]	; (800bddc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	099b      	lsrs	r3, r3, #6
 800bc8c:	f04f 0400 	mov.w	r4, #0
 800bc90:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bc94:	f04f 0200 	mov.w	r2, #0
 800bc98:	ea03 0501 	and.w	r5, r3, r1
 800bc9c:	ea04 0602 	and.w	r6, r4, r2
 800bca0:	4629      	mov	r1, r5
 800bca2:	4632      	mov	r2, r6
 800bca4:	f04f 0300 	mov.w	r3, #0
 800bca8:	f04f 0400 	mov.w	r4, #0
 800bcac:	0154      	lsls	r4, r2, #5
 800bcae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bcb2:	014b      	lsls	r3, r1, #5
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4622      	mov	r2, r4
 800bcb8:	1b49      	subs	r1, r1, r5
 800bcba:	eb62 0206 	sbc.w	r2, r2, r6
 800bcbe:	f04f 0300 	mov.w	r3, #0
 800bcc2:	f04f 0400 	mov.w	r4, #0
 800bcc6:	0194      	lsls	r4, r2, #6
 800bcc8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bccc:	018b      	lsls	r3, r1, #6
 800bcce:	1a5b      	subs	r3, r3, r1
 800bcd0:	eb64 0402 	sbc.w	r4, r4, r2
 800bcd4:	f04f 0100 	mov.w	r1, #0
 800bcd8:	f04f 0200 	mov.w	r2, #0
 800bcdc:	00e2      	lsls	r2, r4, #3
 800bcde:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bce2:	00d9      	lsls	r1, r3, #3
 800bce4:	460b      	mov	r3, r1
 800bce6:	4614      	mov	r4, r2
 800bce8:	195b      	adds	r3, r3, r5
 800bcea:	eb44 0406 	adc.w	r4, r4, r6
 800bcee:	f04f 0100 	mov.w	r1, #0
 800bcf2:	f04f 0200 	mov.w	r2, #0
 800bcf6:	02a2      	lsls	r2, r4, #10
 800bcf8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bcfc:	0299      	lsls	r1, r3, #10
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4614      	mov	r4, r2
 800bd02:	4618      	mov	r0, r3
 800bd04:	4621      	mov	r1, r4
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f04f 0400 	mov.w	r4, #0
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	4623      	mov	r3, r4
 800bd10:	f7f4 ffd2 	bl	8000cb8 <__aeabi_uldivmod>
 800bd14:	4603      	mov	r3, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	e049      	b.n	800bdb0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd1c:	4b2f      	ldr	r3, [pc, #188]	; (800bddc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	099b      	lsrs	r3, r3, #6
 800bd22:	f04f 0400 	mov.w	r4, #0
 800bd26:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bd2a:	f04f 0200 	mov.w	r2, #0
 800bd2e:	ea03 0501 	and.w	r5, r3, r1
 800bd32:	ea04 0602 	and.w	r6, r4, r2
 800bd36:	4629      	mov	r1, r5
 800bd38:	4632      	mov	r2, r6
 800bd3a:	f04f 0300 	mov.w	r3, #0
 800bd3e:	f04f 0400 	mov.w	r4, #0
 800bd42:	0154      	lsls	r4, r2, #5
 800bd44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bd48:	014b      	lsls	r3, r1, #5
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4622      	mov	r2, r4
 800bd4e:	1b49      	subs	r1, r1, r5
 800bd50:	eb62 0206 	sbc.w	r2, r2, r6
 800bd54:	f04f 0300 	mov.w	r3, #0
 800bd58:	f04f 0400 	mov.w	r4, #0
 800bd5c:	0194      	lsls	r4, r2, #6
 800bd5e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bd62:	018b      	lsls	r3, r1, #6
 800bd64:	1a5b      	subs	r3, r3, r1
 800bd66:	eb64 0402 	sbc.w	r4, r4, r2
 800bd6a:	f04f 0100 	mov.w	r1, #0
 800bd6e:	f04f 0200 	mov.w	r2, #0
 800bd72:	00e2      	lsls	r2, r4, #3
 800bd74:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bd78:	00d9      	lsls	r1, r3, #3
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4614      	mov	r4, r2
 800bd7e:	195b      	adds	r3, r3, r5
 800bd80:	eb44 0406 	adc.w	r4, r4, r6
 800bd84:	f04f 0100 	mov.w	r1, #0
 800bd88:	f04f 0200 	mov.w	r2, #0
 800bd8c:	02a2      	lsls	r2, r4, #10
 800bd8e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bd92:	0299      	lsls	r1, r3, #10
 800bd94:	460b      	mov	r3, r1
 800bd96:	4614      	mov	r4, r2
 800bd98:	4618      	mov	r0, r3
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f04f 0400 	mov.w	r4, #0
 800bda2:	461a      	mov	r2, r3
 800bda4:	4623      	mov	r3, r4
 800bda6:	f7f4 ff87 	bl	8000cb8 <__aeabi_uldivmod>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	460c      	mov	r4, r1
 800bdae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bdb0:	4b0a      	ldr	r3, [pc, #40]	; (800bddc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	0c1b      	lsrs	r3, r3, #16
 800bdb6:	f003 0303 	and.w	r3, r3, #3
 800bdba:	3301      	adds	r3, #1
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdc8:	60bb      	str	r3, [r7, #8]
      break;
 800bdca:	e002      	b.n	800bdd2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bdcc:	4b04      	ldr	r3, [pc, #16]	; (800bde0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bdce:	60bb      	str	r3, [r7, #8]
      break;
 800bdd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bdd2:	68bb      	ldr	r3, [r7, #8]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bddc:	40023800 	.word	0x40023800
 800bde0:	00f42400 	.word	0x00f42400

0800bde4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bde4:	b480      	push	{r7}
 800bde6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bde8:	4b03      	ldr	r3, [pc, #12]	; (800bdf8 <HAL_RCC_GetHCLKFreq+0x14>)
 800bdea:	681b      	ldr	r3, [r3, #0]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	20000000 	.word	0x20000000

0800bdfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800be00:	f7ff fff0 	bl	800bde4 <HAL_RCC_GetHCLKFreq>
 800be04:	4601      	mov	r1, r0
 800be06:	4b05      	ldr	r3, [pc, #20]	; (800be1c <HAL_RCC_GetPCLK1Freq+0x20>)
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	0a9b      	lsrs	r3, r3, #10
 800be0c:	f003 0307 	and.w	r3, r3, #7
 800be10:	4a03      	ldr	r2, [pc, #12]	; (800be20 <HAL_RCC_GetPCLK1Freq+0x24>)
 800be12:	5cd3      	ldrb	r3, [r2, r3]
 800be14:	fa21 f303 	lsr.w	r3, r1, r3
}
 800be18:	4618      	mov	r0, r3
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	40023800 	.word	0x40023800
 800be20:	08019a54 	.word	0x08019a54

0800be24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800be28:	f7ff ffdc 	bl	800bde4 <HAL_RCC_GetHCLKFreq>
 800be2c:	4601      	mov	r1, r0
 800be2e:	4b05      	ldr	r3, [pc, #20]	; (800be44 <HAL_RCC_GetPCLK2Freq+0x20>)
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	0b5b      	lsrs	r3, r3, #13
 800be34:	f003 0307 	and.w	r3, r3, #7
 800be38:	4a03      	ldr	r2, [pc, #12]	; (800be48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800be3a:	5cd3      	ldrb	r3, [r2, r3]
 800be3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800be40:	4618      	mov	r0, r3
 800be42:	bd80      	pop	{r7, pc}
 800be44:	40023800 	.word	0x40023800
 800be48:	08019a54 	.word	0x08019a54

0800be4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b088      	sub	sp, #32
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800be54:	2300      	movs	r3, #0
 800be56:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800be58:	2300      	movs	r3, #0
 800be5a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800be5c:	2300      	movs	r3, #0
 800be5e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800be60:	2300      	movs	r3, #0
 800be62:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800be64:	2300      	movs	r3, #0
 800be66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00a      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800be74:	4b66      	ldr	r3, [pc, #408]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800be76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be7a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be82:	4963      	ldr	r1, [pc, #396]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800be84:	4313      	orrs	r3, r2
 800be86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00a      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800be96:	4b5e      	ldr	r3, [pc, #376]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800be98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be9c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea4:	495a      	ldr	r1, [pc, #360]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bea6:	4313      	orrs	r3, r2
 800bea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10b      	bne.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d105      	bne.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800becc:	2b00      	cmp	r3, #0
 800bece:	d075      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bed0:	4b50      	ldr	r3, [pc, #320]	; (800c014 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bed6:	f7fd fb33 	bl	8009540 <HAL_GetTick>
 800beda:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bedc:	e008      	b.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bede:	f7fd fb2f 	bl	8009540 <HAL_GetTick>
 800bee2:	4602      	mov	r2, r0
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	1ad3      	subs	r3, r2, r3
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d901      	bls.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800beec:	2303      	movs	r3, #3
 800beee:	e1dc      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bef0:	4b47      	ldr	r3, [pc, #284]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1f0      	bne.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f003 0301 	and.w	r3, r3, #1
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d009      	beq.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	019a      	lsls	r2, r3, #6
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	071b      	lsls	r3, r3, #28
 800bf14:	493e      	ldr	r1, [pc, #248]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf16:	4313      	orrs	r3, r2
 800bf18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 0302 	and.w	r3, r3, #2
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d01f      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bf28:	4b39      	ldr	r3, [pc, #228]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf2e:	0f1b      	lsrs	r3, r3, #28
 800bf30:	f003 0307 	and.w	r3, r3, #7
 800bf34:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	019a      	lsls	r2, r3, #6
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	061b      	lsls	r3, r3, #24
 800bf42:	431a      	orrs	r2, r3
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	071b      	lsls	r3, r3, #28
 800bf48:	4931      	ldr	r1, [pc, #196]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bf50:	4b2f      	ldr	r3, [pc, #188]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf56:	f023 021f 	bic.w	r2, r3, #31
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	492b      	ldr	r1, [pc, #172]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf62:	4313      	orrs	r3, r2
 800bf64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00d      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	019a      	lsls	r2, r3, #6
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	061b      	lsls	r3, r3, #24
 800bf80:	431a      	orrs	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	071b      	lsls	r3, r3, #28
 800bf88:	4921      	ldr	r1, [pc, #132]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bf90:	4b20      	ldr	r3, [pc, #128]	; (800c014 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800bf92:	2201      	movs	r2, #1
 800bf94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bf96:	f7fd fad3 	bl	8009540 <HAL_GetTick>
 800bf9a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bf9c:	e008      	b.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bf9e:	f7fd facf 	bl	8009540 <HAL_GetTick>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	2b02      	cmp	r3, #2
 800bfaa:	d901      	bls.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e17c      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bfb0:	4b17      	ldr	r3, [pc, #92]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d0f0      	beq.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 0304 	and.w	r3, r3, #4
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d112      	bne.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10c      	bne.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 80ce 	beq.w	800c17e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800bfe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfea:	f040 80c8 	bne.w	800c17e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bfee:	4b0a      	ldr	r3, [pc, #40]	; (800c018 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bff4:	f7fd faa4 	bl	8009540 <HAL_GetTick>
 800bff8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bffa:	e00f      	b.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bffc:	f7fd faa0 	bl	8009540 <HAL_GetTick>
 800c000:	4602      	mov	r2, r0
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	1ad3      	subs	r3, r2, r3
 800c006:	2b02      	cmp	r3, #2
 800c008:	d908      	bls.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c00a:	2303      	movs	r3, #3
 800c00c:	e14d      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c00e:	bf00      	nop
 800c010:	40023800 	.word	0x40023800
 800c014:	42470068 	.word	0x42470068
 800c018:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c01c:	4ba5      	ldr	r3, [pc, #660]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c028:	d0e8      	beq.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f003 0304 	and.w	r3, r3, #4
 800c032:	2b00      	cmp	r3, #0
 800c034:	d02e      	beq.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c036:	4b9f      	ldr	r3, [pc, #636]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c03c:	0c1b      	lsrs	r3, r3, #16
 800c03e:	f003 0303 	and.w	r3, r3, #3
 800c042:	3301      	adds	r3, #1
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c048:	4b9a      	ldr	r3, [pc, #616]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c04e:	0f1b      	lsrs	r3, r3, #28
 800c050:	f003 0307 	and.w	r3, r3, #7
 800c054:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	019a      	lsls	r2, r3, #6
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	085b      	lsrs	r3, r3, #1
 800c060:	3b01      	subs	r3, #1
 800c062:	041b      	lsls	r3, r3, #16
 800c064:	431a      	orrs	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	699b      	ldr	r3, [r3, #24]
 800c06a:	061b      	lsls	r3, r3, #24
 800c06c:	431a      	orrs	r2, r3
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	071b      	lsls	r3, r3, #28
 800c072:	4990      	ldr	r1, [pc, #576]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c074:	4313      	orrs	r3, r2
 800c076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c07a:	4b8e      	ldr	r3, [pc, #568]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c07c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c080:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c088:	3b01      	subs	r3, #1
 800c08a:	021b      	lsls	r3, r3, #8
 800c08c:	4989      	ldr	r1, [pc, #548]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c08e:	4313      	orrs	r3, r2
 800c090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 0308 	and.w	r3, r3, #8
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d02c      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c0a0:	4b84      	ldr	r3, [pc, #528]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0a6:	0c1b      	lsrs	r3, r3, #16
 800c0a8:	f003 0303 	and.w	r3, r3, #3
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	005b      	lsls	r3, r3, #1
 800c0b0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c0b2:	4b80      	ldr	r3, [pc, #512]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0b8:	0e1b      	lsrs	r3, r3, #24
 800c0ba:	f003 030f 	and.w	r3, r3, #15
 800c0be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	019a      	lsls	r2, r3, #6
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	085b      	lsrs	r3, r3, #1
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	041b      	lsls	r3, r3, #16
 800c0ce:	431a      	orrs	r2, r3
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	061b      	lsls	r3, r3, #24
 800c0d4:	431a      	orrs	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	69db      	ldr	r3, [r3, #28]
 800c0da:	071b      	lsls	r3, r3, #28
 800c0dc:	4975      	ldr	r1, [pc, #468]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c0e4:	4b73      	ldr	r3, [pc, #460]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f2:	4970      	ldr	r1, [pc, #448]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c102:	2b00      	cmp	r3, #0
 800c104:	d024      	beq.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c10a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c10e:	d11f      	bne.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c110:	4b68      	ldr	r3, [pc, #416]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c116:	0e1b      	lsrs	r3, r3, #24
 800c118:	f003 030f 	and.w	r3, r3, #15
 800c11c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c11e:	4b65      	ldr	r3, [pc, #404]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c124:	0f1b      	lsrs	r3, r3, #28
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	019a      	lsls	r2, r3, #6
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	085b      	lsrs	r3, r3, #1
 800c138:	3b01      	subs	r3, #1
 800c13a:	041b      	lsls	r3, r3, #16
 800c13c:	431a      	orrs	r2, r3
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	061b      	lsls	r3, r3, #24
 800c142:	431a      	orrs	r2, r3
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	071b      	lsls	r3, r3, #28
 800c148:	495a      	ldr	r1, [pc, #360]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c14a:	4313      	orrs	r3, r2
 800c14c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c150:	4b59      	ldr	r3, [pc, #356]	; (800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c152:	2201      	movs	r2, #1
 800c154:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c156:	f7fd f9f3 	bl	8009540 <HAL_GetTick>
 800c15a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c15c:	e008      	b.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c15e:	f7fd f9ef 	bl	8009540 <HAL_GetTick>
 800c162:	4602      	mov	r2, r0
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	1ad3      	subs	r3, r2, r3
 800c168:	2b02      	cmp	r3, #2
 800c16a:	d901      	bls.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c16c:	2303      	movs	r3, #3
 800c16e:	e09c      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c170:	4b50      	ldr	r3, [pc, #320]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c17c:	d1ef      	bne.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 0320 	and.w	r3, r3, #32
 800c186:	2b00      	cmp	r3, #0
 800c188:	f000 8083 	beq.w	800c292 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c18c:	2300      	movs	r3, #0
 800c18e:	60bb      	str	r3, [r7, #8]
 800c190:	4b48      	ldr	r3, [pc, #288]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c194:	4a47      	ldr	r2, [pc, #284]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c19a:	6413      	str	r3, [r2, #64]	; 0x40
 800c19c:	4b45      	ldr	r3, [pc, #276]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1a4:	60bb      	str	r3, [r7, #8]
 800c1a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c1a8:	4b44      	ldr	r3, [pc, #272]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a43      	ldr	r2, [pc, #268]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c1ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1b2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c1b4:	f7fd f9c4 	bl	8009540 <HAL_GetTick>
 800c1b8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c1ba:	e008      	b.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c1bc:	f7fd f9c0 	bl	8009540 <HAL_GetTick>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	d901      	bls.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c1ca:	2303      	movs	r3, #3
 800c1cc:	e06d      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c1ce:	4b3b      	ldr	r3, [pc, #236]	; (800c2bc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d0f0      	beq.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c1da:	4b36      	ldr	r3, [pc, #216]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1e2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d02f      	beq.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1f2:	69ba      	ldr	r2, [r7, #24]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d028      	beq.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c1f8:	4b2e      	ldr	r3, [pc, #184]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c200:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c202:	4b2f      	ldr	r3, [pc, #188]	; (800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c204:	2201      	movs	r2, #1
 800c206:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c208:	4b2d      	ldr	r3, [pc, #180]	; (800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c20a:	2200      	movs	r2, #0
 800c20c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c20e:	4a29      	ldr	r2, [pc, #164]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c214:	4b27      	ldr	r3, [pc, #156]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d114      	bne.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c220:	f7fd f98e 	bl	8009540 <HAL_GetTick>
 800c224:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c226:	e00a      	b.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c228:	f7fd f98a 	bl	8009540 <HAL_GetTick>
 800c22c:	4602      	mov	r2, r0
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	f241 3288 	movw	r2, #5000	; 0x1388
 800c236:	4293      	cmp	r3, r2
 800c238:	d901      	bls.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c23a:	2303      	movs	r3, #3
 800c23c:	e035      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c23e:	4b1d      	ldr	r3, [pc, #116]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c242:	f003 0302 	and.w	r3, r3, #2
 800c246:	2b00      	cmp	r3, #0
 800c248:	d0ee      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c256:	d10d      	bne.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c258:	4b16      	ldr	r3, [pc, #88]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c264:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c26c:	4911      	ldr	r1, [pc, #68]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c26e:	4313      	orrs	r3, r2
 800c270:	608b      	str	r3, [r1, #8]
 800c272:	e005      	b.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c274:	4b0f      	ldr	r3, [pc, #60]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	4a0e      	ldr	r2, [pc, #56]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c27a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c27e:	6093      	str	r3, [r2, #8]
 800c280:	4b0c      	ldr	r3, [pc, #48]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c282:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c28c:	4909      	ldr	r1, [pc, #36]	; (800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c28e:	4313      	orrs	r3, r2
 800c290:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f003 0310 	and.w	r3, r3, #16
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d004      	beq.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c2a4:	4b07      	ldr	r3, [pc, #28]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c2a6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3720      	adds	r7, #32
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	40023800 	.word	0x40023800
 800c2b8:	42470070 	.word	0x42470070
 800c2bc:	40007000 	.word	0x40007000
 800c2c0:	42470e40 	.word	0x42470e40
 800c2c4:	424711e0 	.word	0x424711e0

0800c2c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b086      	sub	sp, #24
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d075      	beq.n	800c3cc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c2e0:	4ba2      	ldr	r3, [pc, #648]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	f003 030c 	and.w	r3, r3, #12
 800c2e8:	2b04      	cmp	r3, #4
 800c2ea:	d00c      	beq.n	800c306 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c2ec:	4b9f      	ldr	r3, [pc, #636]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c2f4:	2b08      	cmp	r3, #8
 800c2f6:	d112      	bne.n	800c31e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c2f8:	4b9c      	ldr	r3, [pc, #624]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c304:	d10b      	bne.n	800c31e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c306:	4b99      	ldr	r3, [pc, #612]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d05b      	beq.n	800c3ca <HAL_RCC_OscConfig+0x102>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d157      	bne.n	800c3ca <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	e20b      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c326:	d106      	bne.n	800c336 <HAL_RCC_OscConfig+0x6e>
 800c328:	4b90      	ldr	r3, [pc, #576]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a8f      	ldr	r2, [pc, #572]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c32e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	e01d      	b.n	800c372 <HAL_RCC_OscConfig+0xaa>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c33e:	d10c      	bne.n	800c35a <HAL_RCC_OscConfig+0x92>
 800c340:	4b8a      	ldr	r3, [pc, #552]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a89      	ldr	r2, [pc, #548]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c346:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c34a:	6013      	str	r3, [r2, #0]
 800c34c:	4b87      	ldr	r3, [pc, #540]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a86      	ldr	r2, [pc, #536]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c356:	6013      	str	r3, [r2, #0]
 800c358:	e00b      	b.n	800c372 <HAL_RCC_OscConfig+0xaa>
 800c35a:	4b84      	ldr	r3, [pc, #528]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a83      	ldr	r2, [pc, #524]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c364:	6013      	str	r3, [r2, #0]
 800c366:	4b81      	ldr	r3, [pc, #516]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a80      	ldr	r2, [pc, #512]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c36c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c370:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d013      	beq.n	800c3a2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c37a:	f7fd f8e1 	bl	8009540 <HAL_GetTick>
 800c37e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c380:	e008      	b.n	800c394 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c382:	f7fd f8dd 	bl	8009540 <HAL_GetTick>
 800c386:	4602      	mov	r2, r0
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	1ad3      	subs	r3, r2, r3
 800c38c:	2b64      	cmp	r3, #100	; 0x64
 800c38e:	d901      	bls.n	800c394 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c390:	2303      	movs	r3, #3
 800c392:	e1d0      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c394:	4b75      	ldr	r3, [pc, #468]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d0f0      	beq.n	800c382 <HAL_RCC_OscConfig+0xba>
 800c3a0:	e014      	b.n	800c3cc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3a2:	f7fd f8cd 	bl	8009540 <HAL_GetTick>
 800c3a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3a8:	e008      	b.n	800c3bc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c3aa:	f7fd f8c9 	bl	8009540 <HAL_GetTick>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	2b64      	cmp	r3, #100	; 0x64
 800c3b6:	d901      	bls.n	800c3bc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c3b8:	2303      	movs	r3, #3
 800c3ba:	e1bc      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c3bc:	4b6b      	ldr	r3, [pc, #428]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1f0      	bne.n	800c3aa <HAL_RCC_OscConfig+0xe2>
 800c3c8:	e000      	b.n	800c3cc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0302 	and.w	r3, r3, #2
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d063      	beq.n	800c4a0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c3d8:	4b64      	ldr	r3, [pc, #400]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	f003 030c 	and.w	r3, r3, #12
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00b      	beq.n	800c3fc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c3e4:	4b61      	ldr	r3, [pc, #388]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c3ec:	2b08      	cmp	r3, #8
 800c3ee:	d11c      	bne.n	800c42a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c3f0:	4b5e      	ldr	r3, [pc, #376]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d116      	bne.n	800c42a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c3fc:	4b5b      	ldr	r3, [pc, #364]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 0302 	and.w	r3, r3, #2
 800c404:	2b00      	cmp	r3, #0
 800c406:	d005      	beq.n	800c414 <HAL_RCC_OscConfig+0x14c>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d001      	beq.n	800c414 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c410:	2301      	movs	r3, #1
 800c412:	e190      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c414:	4b55      	ldr	r3, [pc, #340]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	691b      	ldr	r3, [r3, #16]
 800c420:	00db      	lsls	r3, r3, #3
 800c422:	4952      	ldr	r1, [pc, #328]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c424:	4313      	orrs	r3, r2
 800c426:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c428:	e03a      	b.n	800c4a0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d020      	beq.n	800c474 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c432:	4b4f      	ldr	r3, [pc, #316]	; (800c570 <HAL_RCC_OscConfig+0x2a8>)
 800c434:	2201      	movs	r2, #1
 800c436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c438:	f7fd f882 	bl	8009540 <HAL_GetTick>
 800c43c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c43e:	e008      	b.n	800c452 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c440:	f7fd f87e 	bl	8009540 <HAL_GetTick>
 800c444:	4602      	mov	r2, r0
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d901      	bls.n	800c452 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c44e:	2303      	movs	r3, #3
 800c450:	e171      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c452:	4b46      	ldr	r3, [pc, #280]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 0302 	and.w	r3, r3, #2
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d0f0      	beq.n	800c440 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c45e:	4b43      	ldr	r3, [pc, #268]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	493f      	ldr	r1, [pc, #252]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c46e:	4313      	orrs	r3, r2
 800c470:	600b      	str	r3, [r1, #0]
 800c472:	e015      	b.n	800c4a0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c474:	4b3e      	ldr	r3, [pc, #248]	; (800c570 <HAL_RCC_OscConfig+0x2a8>)
 800c476:	2200      	movs	r2, #0
 800c478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c47a:	f7fd f861 	bl	8009540 <HAL_GetTick>
 800c47e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c480:	e008      	b.n	800c494 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c482:	f7fd f85d 	bl	8009540 <HAL_GetTick>
 800c486:	4602      	mov	r2, r0
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	1ad3      	subs	r3, r2, r3
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	d901      	bls.n	800c494 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c490:	2303      	movs	r3, #3
 800c492:	e150      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c494:	4b35      	ldr	r3, [pc, #212]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 0302 	and.w	r3, r3, #2
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1f0      	bne.n	800c482 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 0308 	and.w	r3, r3, #8
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d030      	beq.n	800c50e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	695b      	ldr	r3, [r3, #20]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d016      	beq.n	800c4e2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c4b4:	4b2f      	ldr	r3, [pc, #188]	; (800c574 <HAL_RCC_OscConfig+0x2ac>)
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4ba:	f7fd f841 	bl	8009540 <HAL_GetTick>
 800c4be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c4c0:	e008      	b.n	800c4d4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c4c2:	f7fd f83d 	bl	8009540 <HAL_GetTick>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d901      	bls.n	800c4d4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	e130      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c4d4:	4b25      	ldr	r3, [pc, #148]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c4d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4d8:	f003 0302 	and.w	r3, r3, #2
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d0f0      	beq.n	800c4c2 <HAL_RCC_OscConfig+0x1fa>
 800c4e0:	e015      	b.n	800c50e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c4e2:	4b24      	ldr	r3, [pc, #144]	; (800c574 <HAL_RCC_OscConfig+0x2ac>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4e8:	f7fd f82a 	bl	8009540 <HAL_GetTick>
 800c4ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c4ee:	e008      	b.n	800c502 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c4f0:	f7fd f826 	bl	8009540 <HAL_GetTick>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d901      	bls.n	800c502 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e119      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c502:	4b1a      	ldr	r3, [pc, #104]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c506:	f003 0302 	and.w	r3, r3, #2
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1f0      	bne.n	800c4f0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f003 0304 	and.w	r3, r3, #4
 800c516:	2b00      	cmp	r3, #0
 800c518:	f000 809f 	beq.w	800c65a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c51c:	2300      	movs	r3, #0
 800c51e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c520:	4b12      	ldr	r3, [pc, #72]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10f      	bne.n	800c54c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c52c:	2300      	movs	r3, #0
 800c52e:	60fb      	str	r3, [r7, #12]
 800c530:	4b0e      	ldr	r3, [pc, #56]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c534:	4a0d      	ldr	r2, [pc, #52]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c53a:	6413      	str	r3, [r2, #64]	; 0x40
 800c53c:	4b0b      	ldr	r3, [pc, #44]	; (800c56c <HAL_RCC_OscConfig+0x2a4>)
 800c53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c544:	60fb      	str	r3, [r7, #12]
 800c546:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c548:	2301      	movs	r3, #1
 800c54a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c54c:	4b0a      	ldr	r3, [pc, #40]	; (800c578 <HAL_RCC_OscConfig+0x2b0>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c554:	2b00      	cmp	r3, #0
 800c556:	d120      	bne.n	800c59a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c558:	4b07      	ldr	r3, [pc, #28]	; (800c578 <HAL_RCC_OscConfig+0x2b0>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a06      	ldr	r2, [pc, #24]	; (800c578 <HAL_RCC_OscConfig+0x2b0>)
 800c55e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c562:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c564:	f7fc ffec 	bl	8009540 <HAL_GetTick>
 800c568:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c56a:	e010      	b.n	800c58e <HAL_RCC_OscConfig+0x2c6>
 800c56c:	40023800 	.word	0x40023800
 800c570:	42470000 	.word	0x42470000
 800c574:	42470e80 	.word	0x42470e80
 800c578:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c57c:	f7fc ffe0 	bl	8009540 <HAL_GetTick>
 800c580:	4602      	mov	r2, r0
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	1ad3      	subs	r3, r2, r3
 800c586:	2b02      	cmp	r3, #2
 800c588:	d901      	bls.n	800c58e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c58a:	2303      	movs	r3, #3
 800c58c:	e0d3      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c58e:	4b6c      	ldr	r3, [pc, #432]	; (800c740 <HAL_RCC_OscConfig+0x478>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0f0      	beq.n	800c57c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d106      	bne.n	800c5b0 <HAL_RCC_OscConfig+0x2e8>
 800c5a2:	4b68      	ldr	r3, [pc, #416]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5a6:	4a67      	ldr	r2, [pc, #412]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c5a8:	f043 0301 	orr.w	r3, r3, #1
 800c5ac:	6713      	str	r3, [r2, #112]	; 0x70
 800c5ae:	e01c      	b.n	800c5ea <HAL_RCC_OscConfig+0x322>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	2b05      	cmp	r3, #5
 800c5b6:	d10c      	bne.n	800c5d2 <HAL_RCC_OscConfig+0x30a>
 800c5b8:	4b62      	ldr	r3, [pc, #392]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c5ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5bc:	4a61      	ldr	r2, [pc, #388]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c5be:	f043 0304 	orr.w	r3, r3, #4
 800c5c2:	6713      	str	r3, [r2, #112]	; 0x70
 800c5c4:	4b5f      	ldr	r3, [pc, #380]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5c8:	4a5e      	ldr	r2, [pc, #376]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c5ca:	f043 0301 	orr.w	r3, r3, #1
 800c5ce:	6713      	str	r3, [r2, #112]	; 0x70
 800c5d0:	e00b      	b.n	800c5ea <HAL_RCC_OscConfig+0x322>
 800c5d2:	4b5c      	ldr	r3, [pc, #368]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c5d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5d6:	4a5b      	ldr	r2, [pc, #364]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c5d8:	f023 0301 	bic.w	r3, r3, #1
 800c5dc:	6713      	str	r3, [r2, #112]	; 0x70
 800c5de:	4b59      	ldr	r3, [pc, #356]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e2:	4a58      	ldr	r2, [pc, #352]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c5e4:	f023 0304 	bic.w	r3, r3, #4
 800c5e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d015      	beq.n	800c61e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5f2:	f7fc ffa5 	bl	8009540 <HAL_GetTick>
 800c5f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c5f8:	e00a      	b.n	800c610 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c5fa:	f7fc ffa1 	bl	8009540 <HAL_GetTick>
 800c5fe:	4602      	mov	r2, r0
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	1ad3      	subs	r3, r2, r3
 800c604:	f241 3288 	movw	r2, #5000	; 0x1388
 800c608:	4293      	cmp	r3, r2
 800c60a:	d901      	bls.n	800c610 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c60c:	2303      	movs	r3, #3
 800c60e:	e092      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c610:	4b4c      	ldr	r3, [pc, #304]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c614:	f003 0302 	and.w	r3, r3, #2
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d0ee      	beq.n	800c5fa <HAL_RCC_OscConfig+0x332>
 800c61c:	e014      	b.n	800c648 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c61e:	f7fc ff8f 	bl	8009540 <HAL_GetTick>
 800c622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c624:	e00a      	b.n	800c63c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c626:	f7fc ff8b 	bl	8009540 <HAL_GetTick>
 800c62a:	4602      	mov	r2, r0
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	f241 3288 	movw	r2, #5000	; 0x1388
 800c634:	4293      	cmp	r3, r2
 800c636:	d901      	bls.n	800c63c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800c638:	2303      	movs	r3, #3
 800c63a:	e07c      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c63c:	4b41      	ldr	r3, [pc, #260]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c63e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c640:	f003 0302 	and.w	r3, r3, #2
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1ee      	bne.n	800c626 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c648:	7dfb      	ldrb	r3, [r7, #23]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d105      	bne.n	800c65a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c64e:	4b3d      	ldr	r3, [pc, #244]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c652:	4a3c      	ldr	r2, [pc, #240]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c658:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	699b      	ldr	r3, [r3, #24]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d068      	beq.n	800c734 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c662:	4b38      	ldr	r3, [pc, #224]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	f003 030c 	and.w	r3, r3, #12
 800c66a:	2b08      	cmp	r3, #8
 800c66c:	d060      	beq.n	800c730 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	2b02      	cmp	r3, #2
 800c674:	d145      	bne.n	800c702 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c676:	4b34      	ldr	r3, [pc, #208]	; (800c748 <HAL_RCC_OscConfig+0x480>)
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c67c:	f7fc ff60 	bl	8009540 <HAL_GetTick>
 800c680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c682:	e008      	b.n	800c696 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c684:	f7fc ff5c 	bl	8009540 <HAL_GetTick>
 800c688:	4602      	mov	r2, r0
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d901      	bls.n	800c696 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800c692:	2303      	movs	r3, #3
 800c694:	e04f      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c696:	4b2b      	ldr	r3, [pc, #172]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1f0      	bne.n	800c684 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	69da      	ldr	r2, [r3, #28]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6a1b      	ldr	r3, [r3, #32]
 800c6aa:	431a      	orrs	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b0:	019b      	lsls	r3, r3, #6
 800c6b2:	431a      	orrs	r2, r3
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b8:	085b      	lsrs	r3, r3, #1
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	041b      	lsls	r3, r3, #16
 800c6be:	431a      	orrs	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c4:	061b      	lsls	r3, r3, #24
 800c6c6:	431a      	orrs	r2, r3
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6cc:	071b      	lsls	r3, r3, #28
 800c6ce:	491d      	ldr	r1, [pc, #116]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c6d4:	4b1c      	ldr	r3, [pc, #112]	; (800c748 <HAL_RCC_OscConfig+0x480>)
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6da:	f7fc ff31 	bl	8009540 <HAL_GetTick>
 800c6de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6e0:	e008      	b.n	800c6f4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c6e2:	f7fc ff2d 	bl	8009540 <HAL_GetTick>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d901      	bls.n	800c6f4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e020      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c6f4:	4b13      	ldr	r3, [pc, #76]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d0f0      	beq.n	800c6e2 <HAL_RCC_OscConfig+0x41a>
 800c700:	e018      	b.n	800c734 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c702:	4b11      	ldr	r3, [pc, #68]	; (800c748 <HAL_RCC_OscConfig+0x480>)
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c708:	f7fc ff1a 	bl	8009540 <HAL_GetTick>
 800c70c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c70e:	e008      	b.n	800c722 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c710:	f7fc ff16 	bl	8009540 <HAL_GetTick>
 800c714:	4602      	mov	r2, r0
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d901      	bls.n	800c722 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800c71e:	2303      	movs	r3, #3
 800c720:	e009      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c722:	4b08      	ldr	r3, [pc, #32]	; (800c744 <HAL_RCC_OscConfig+0x47c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1f0      	bne.n	800c710 <HAL_RCC_OscConfig+0x448>
 800c72e:	e001      	b.n	800c734 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	e000      	b.n	800c736 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3718      	adds	r7, #24
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	40007000 	.word	0x40007000
 800c744:	40023800 	.word	0x40023800
 800c748:	42470060 	.word	0x42470060

0800c74c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d101      	bne.n	800c75e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e022      	b.n	800c7a4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c764:	b2db      	uxtb	r3, r3
 800c766:	2b00      	cmp	r3, #0
 800c768:	d105      	bne.n	800c776 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7fa faa9 	bl	8006cc8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2203      	movs	r2, #3
 800c77a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f814 	bl	800c7ac <HAL_SD_InitCard>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	e00a      	b.n	800c7a4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2200      	movs	r2, #0
 800c792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2201      	movs	r2, #1
 800c79e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c7ac:	b5b0      	push	{r4, r5, r7, lr}
 800c7ae:	b08e      	sub	sp, #56	; 0x38
 800c7b0:	af04      	add	r7, sp, #16
 800c7b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c7c8:	2376      	movs	r3, #118	; 0x76
 800c7ca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681d      	ldr	r5, [r3, #0]
 800c7d0:	466c      	mov	r4, sp
 800c7d2:	f107 0314 	add.w	r3, r7, #20
 800c7d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c7da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c7de:	f107 0308 	add.w	r3, r7, #8
 800c7e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	f003 fa87 	bl	800fcf8 <SDIO_Init>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c7f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d001      	beq.n	800c7fc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e031      	b.n	800c860 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c7fc:	4b1a      	ldr	r3, [pc, #104]	; (800c868 <HAL_SD_InitCard+0xbc>)
 800c7fe:	2200      	movs	r2, #0
 800c800:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4618      	mov	r0, r3
 800c808:	f003 fabf 	bl	800fd8a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c80c:	4b16      	ldr	r3, [pc, #88]	; (800c868 <HAL_SD_InitCard+0xbc>)
 800c80e:	2201      	movs	r2, #1
 800c810:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 ffc6 	bl	800d7a4 <SD_PowerON>
 800c818:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c81a:	6a3b      	ldr	r3, [r7, #32]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00b      	beq.n	800c838 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c82c:	6a3b      	ldr	r3, [r7, #32]
 800c82e:	431a      	orrs	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c834:	2301      	movs	r3, #1
 800c836:	e013      	b.n	800c860 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 fee5 	bl	800d608 <SD_InitCard>
 800c83e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00b      	beq.n	800c85e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c852:	6a3b      	ldr	r3, [r7, #32]
 800c854:	431a      	orrs	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c85a:	2301      	movs	r3, #1
 800c85c:	e000      	b.n	800c860 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800c85e:	2300      	movs	r3, #0
}
 800c860:	4618      	mov	r0, r3
 800c862:	3728      	adds	r7, #40	; 0x28
 800c864:	46bd      	mov	sp, r7
 800c866:	bdb0      	pop	{r4, r5, r7, pc}
 800c868:	422580a0 	.word	0x422580a0

0800c86c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b08c      	sub	sp, #48	; 0x30
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
 800c878:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d107      	bne.n	800c894 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c888:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c890:	2301      	movs	r3, #1
 800c892:	e0c7      	b.n	800ca24 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	f040 80c0 	bne.w	800ca22 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	441a      	add	r2, r3
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d907      	bls.n	800c8c6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e0ae      	b.n	800ca24 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2203      	movs	r2, #3
 800c8ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c8e4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	4a50      	ldr	r2, [pc, #320]	; (800ca2c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c8ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f2:	4a4f      	ldr	r2, [pc, #316]	; (800ca30 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800c8f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	3380      	adds	r3, #128	; 0x80
 800c908:	4619      	mov	r1, r3
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	025b      	lsls	r3, r3, #9
 800c910:	089b      	lsrs	r3, r3, #2
 800c912:	f7fd fc07 	bl	800a124 <HAL_DMA_Start_IT>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d017      	beq.n	800c94c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c92a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a40      	ldr	r2, [pc, #256]	; (800ca34 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c932:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c938:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2201      	movs	r2, #1
 800c944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c948:	2301      	movs	r3, #1
 800c94a:	e06b      	b.n	800ca24 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c94c:	4b3a      	ldr	r3, [pc, #232]	; (800ca38 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800c94e:	2201      	movs	r2, #1
 800c950:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c956:	2b01      	cmp	r3, #1
 800c958:	d002      	beq.n	800c960 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800c95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95c:	025b      	lsls	r3, r3, #9
 800c95e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c968:	4618      	mov	r0, r3
 800c96a:	f003 faa1 	bl	800feb0 <SDMMC_CmdBlockLength>
 800c96e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00f      	beq.n	800c996 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a2e      	ldr	r2, [pc, #184]	; (800ca34 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c97c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c984:	431a      	orrs	r2, r3
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2201      	movs	r2, #1
 800c98e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800c992:	2301      	movs	r3, #1
 800c994:	e046      	b.n	800ca24 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c996:	f04f 33ff 	mov.w	r3, #4294967295
 800c99a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	025b      	lsls	r3, r3, #9
 800c9a0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c9a2:	2390      	movs	r3, #144	; 0x90
 800c9a4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c9a6:	2302      	movs	r3, #2
 800c9a8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f107 0210 	add.w	r2, r7, #16
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f003 fa4b 	bl	800fe58 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d90a      	bls.n	800c9de <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2282      	movs	r2, #130	; 0x82
 800c9cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f003 faaf 	bl	800ff38 <SDMMC_CmdReadMultiBlock>
 800c9da:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c9dc:	e009      	b.n	800c9f2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2281      	movs	r2, #129	; 0x81
 800c9e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f003 fa82 	bl	800fef4 <SDMMC_CmdReadSingleBlock>
 800c9f0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d012      	beq.n	800ca1e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a0d      	ldr	r2, [pc, #52]	; (800ca34 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c9fe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca06:	431a      	orrs	r2, r3
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2200      	movs	r2, #0
 800ca18:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e002      	b.n	800ca24 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	e000      	b.n	800ca24 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ca22:	2302      	movs	r3, #2
  }
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3730      	adds	r7, #48	; 0x30
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	0800d417 	.word	0x0800d417
 800ca30:	0800d489 	.word	0x0800d489
 800ca34:	004005ff 	.word	0x004005ff
 800ca38:	4225858c 	.word	0x4225858c

0800ca3c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b08c      	sub	sp, #48	; 0x30
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
 800ca48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d107      	bne.n	800ca64 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca60:	2301      	movs	r3, #1
 800ca62:	e0ca      	b.n	800cbfa <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	f040 80c3 	bne.w	800cbf8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	441a      	add	r2, r3
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d907      	bls.n	800ca96 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	e0b1      	b.n	800cbfa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2203      	movs	r2, #3
 800ca9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2200      	movs	r2, #0
 800caa4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f042 021a 	orr.w	r2, r2, #26
 800cab4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caba:	4a52      	ldr	r2, [pc, #328]	; (800cc04 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cabc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cac2:	4a51      	ldr	r2, [pc, #324]	; (800cc08 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cac4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caca:	2200      	movs	r2, #0
 800cacc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d002      	beq.n	800cadc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad8:	025b      	lsls	r3, r3, #9
 800cada:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cae4:	4618      	mov	r0, r3
 800cae6:	f003 f9e3 	bl	800feb0 <SDMMC_CmdBlockLength>
 800caea:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00f      	beq.n	800cb12 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a45      	ldr	r2, [pc, #276]	; (800cc0c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800caf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb00:	431a      	orrs	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e073      	b.n	800cbfa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d90a      	bls.n	800cb2e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	22a0      	movs	r2, #160	; 0xa0
 800cb1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb24:	4618      	mov	r0, r3
 800cb26:	f003 fa4b 	bl	800ffc0 <SDMMC_CmdWriteMultiBlock>
 800cb2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cb2c:	e009      	b.n	800cb42 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2290      	movs	r2, #144	; 0x90
 800cb32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f003 fa1e 	bl	800ff7c <SDMMC_CmdWriteSingleBlock>
 800cb40:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d012      	beq.n	800cb6e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a2f      	ldr	r2, [pc, #188]	; (800cc0c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cb4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb56:	431a      	orrs	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e045      	b.n	800cbfa <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cb6e:	4b28      	ldr	r3, [pc, #160]	; (800cc10 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cb70:	2201      	movs	r2, #1
 800cb72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cb78:	68b9      	ldr	r1, [r7, #8]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	3380      	adds	r3, #128	; 0x80
 800cb80:	461a      	mov	r2, r3
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	025b      	lsls	r3, r3, #9
 800cb86:	089b      	lsrs	r3, r3, #2
 800cb88:	f7fd facc 	bl	800a124 <HAL_DMA_Start_IT>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d01a      	beq.n	800cbc8 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f022 021a 	bic.w	r2, r2, #26
 800cba0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a19      	ldr	r2, [pc, #100]	; (800cc0c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cba8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e018      	b.n	800cbfa <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbcc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	025b      	lsls	r3, r3, #9
 800cbd2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cbd4:	2390      	movs	r3, #144	; 0x90
 800cbd6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f107 0210 	add.w	r2, r7, #16
 800cbec:	4611      	mov	r1, r2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f003 f932 	bl	800fe58 <SDIO_ConfigData>

      return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	e000      	b.n	800cbfa <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800cbf8:	2302      	movs	r3, #2
  }
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3730      	adds	r7, #48	; 0x30
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	0800d3ed 	.word	0x0800d3ed
 800cc08:	0800d489 	.word	0x0800d489
 800cc0c:	004005ff 	.word	0x004005ff
 800cc10:	4225858c 	.word	0x4225858c

0800cc14 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc20:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d008      	beq.n	800cc42 <HAL_SD_IRQHandler+0x2e>
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f003 0308 	and.w	r3, r3, #8
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 ffc8 	bl	800dbd0 <SD_Read_IT>
 800cc40:	e155      	b.n	800ceee <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f000 808f 	beq.w	800cd70 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc5a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	6812      	ldr	r2, [r2, #0]
 800cc66:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800cc6a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800cc6e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f022 0201 	bic.w	r2, r2, #1
 800cc7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f003 0308 	and.w	r3, r3, #8
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d039      	beq.n	800ccfe <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f003 0302 	and.w	r3, r3, #2
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d104      	bne.n	800cc9e <HAL_SD_IRQHandler+0x8a>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f003 0320 	and.w	r3, r3, #32
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d011      	beq.n	800ccc2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	4618      	mov	r0, r3
 800cca4:	f003 f9ae 	bl	8010004 <SDMMC_CmdStopTransfer>
 800cca8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d008      	beq.n	800ccc2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	431a      	orrs	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 f91f 	bl	800cf00 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f240 523a 	movw	r2, #1338	; 0x53a
 800ccca:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d104      	bne.n	800ccee <HAL_SD_IRQHandler+0xda>
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f003 0302 	and.w	r3, r3, #2
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d003      	beq.n	800ccf6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f003 fe04 	bl	80108fc <HAL_SD_RxCpltCallback>
 800ccf4:	e0fb      	b.n	800ceee <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f003 fdf6 	bl	80108e8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ccfc:	e0f7      	b.n	800ceee <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f000 80f2 	beq.w	800ceee <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f003 0320 	and.w	r3, r3, #32
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d011      	beq.n	800cd38 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f003 f973 	bl	8010004 <SDMMC_CmdStopTransfer>
 800cd1e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d008      	beq.n	800cd38 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	431a      	orrs	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 f8e4 	bl	800cf00 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	f040 80d5 	bne.w	800ceee <HAL_SD_IRQHandler+0x2da>
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f003 0302 	and.w	r3, r3, #2
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f040 80cf 	bne.w	800ceee <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f022 0208 	bic.w	r2, r2, #8
 800cd5e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f003 fdbd 	bl	80108e8 <HAL_SD_TxCpltCallback>
}
 800cd6e:	e0be      	b.n	800ceee <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d008      	beq.n	800cd90 <HAL_SD_IRQHandler+0x17c>
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f003 0308 	and.w	r3, r3, #8
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d003      	beq.n	800cd90 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 ff72 	bl	800dc72 <SD_Write_IT>
 800cd8e:	e0ae      	b.n	800ceee <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd96:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 80a7 	beq.w	800ceee <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda6:	f003 0302 	and.w	r3, r3, #2
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d005      	beq.n	800cdba <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb2:	f043 0202 	orr.w	r2, r3, #2
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdc0:	f003 0308 	and.w	r3, r3, #8
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d005      	beq.n	800cdd4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdcc:	f043 0208 	orr.w	r2, r3, #8
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdda:	f003 0320 	and.w	r3, r3, #32
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d005      	beq.n	800cdee <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde6:	f043 0220 	orr.w	r2, r3, #32
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf4:	f003 0310 	and.w	r3, r3, #16
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d005      	beq.n	800ce08 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce00:	f043 0210 	orr.w	r2, r3, #16
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ce10:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ce20:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f003 f8ec 	bl	8010004 <SDMMC_CmdStopTransfer>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce32:	431a      	orrs	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f003 0308 	and.w	r3, r3, #8
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00a      	beq.n	800ce58 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2201      	movs	r2, #1
 800ce46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 f855 	bl	800cf00 <HAL_SD_ErrorCallback>
}
 800ce56:	e04a      	b.n	800ceee <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d045      	beq.n	800ceee <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f003 0310 	and.w	r3, r3, #16
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d104      	bne.n	800ce76 <HAL_SD_IRQHandler+0x262>
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f003 0320 	and.w	r3, r3, #32
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d011      	beq.n	800ce9a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce7a:	4a1f      	ldr	r2, [pc, #124]	; (800cef8 <HAL_SD_IRQHandler+0x2e4>)
 800ce7c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fd f9a6 	bl	800a1d4 <HAL_DMA_Abort_IT>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d02f      	beq.n	800ceee <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce92:	4618      	mov	r0, r3
 800ce94:	f000 fb4a 	bl	800d52c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ce98:	e029      	b.n	800ceee <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f003 0301 	and.w	r3, r3, #1
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d104      	bne.n	800ceae <HAL_SD_IRQHandler+0x29a>
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f003 0302 	and.w	r3, r3, #2
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d011      	beq.n	800ced2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb2:	4a12      	ldr	r2, [pc, #72]	; (800cefc <HAL_SD_IRQHandler+0x2e8>)
 800ceb4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7fd f98a 	bl	800a1d4 <HAL_DMA_Abort_IT>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d013      	beq.n	800ceee <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceca:	4618      	mov	r0, r3
 800cecc:	f000 fb65 	bl	800d59a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ced0:	e00d      	b.n	800ceee <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f003 fcf4 	bl	80108d4 <HAL_SD_AbortCallback>
}
 800ceec:	e7ff      	b.n	800ceee <HAL_SD_IRQHandler+0x2da>
 800ceee:	bf00      	nop
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	0800d52d 	.word	0x0800d52d
 800cefc:	0800d59b 	.word	0x0800d59b

0800cf00 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cf08:	bf00      	nop
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf22:	0f9b      	lsrs	r3, r3, #30
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf2e:	0e9b      	lsrs	r3, r3, #26
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	f003 030f 	and.w	r3, r3, #15
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf40:	0e1b      	lsrs	r3, r3, #24
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	f003 0303 	and.w	r3, r3, #3
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf52:	0c1b      	lsrs	r3, r3, #16
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf5e:	0a1b      	lsrs	r3, r3, #8
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf74:	0d1b      	lsrs	r3, r3, #20
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf80:	0c1b      	lsrs	r3, r3, #16
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	f003 030f 	and.w	r3, r3, #15
 800cf88:	b2da      	uxtb	r2, r3
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf92:	0bdb      	lsrs	r3, r3, #15
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	b2da      	uxtb	r2, r3
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfa4:	0b9b      	lsrs	r3, r3, #14
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	f003 0301 	and.w	r3, r3, #1
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfb6:	0b5b      	lsrs	r3, r3, #13
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfc8:	0b1b      	lsrs	r3, r3, #12
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	f003 0301 	and.w	r3, r3, #1
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d163      	bne.n	800d0ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfe8:	009a      	lsls	r2, r3, #2
 800cfea:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cfee:	4013      	ands	r3, r2
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800cff4:	0f92      	lsrs	r2, r2, #30
 800cff6:	431a      	orrs	r2, r3
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d000:	0edb      	lsrs	r3, r3, #27
 800d002:	b2db      	uxtb	r3, r3
 800d004:	f003 0307 	and.w	r3, r3, #7
 800d008:	b2da      	uxtb	r2, r3
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d012:	0e1b      	lsrs	r3, r3, #24
 800d014:	b2db      	uxtb	r3, r3
 800d016:	f003 0307 	and.w	r3, r3, #7
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d024:	0d5b      	lsrs	r3, r3, #21
 800d026:	b2db      	uxtb	r3, r3
 800d028:	f003 0307 	and.w	r3, r3, #7
 800d02c:	b2da      	uxtb	r2, r3
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d036:	0c9b      	lsrs	r3, r3, #18
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	f003 0307 	and.w	r3, r3, #7
 800d03e:	b2da      	uxtb	r2, r3
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d048:	0bdb      	lsrs	r3, r3, #15
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	f003 0307 	and.w	r3, r3, #7
 800d050:	b2da      	uxtb	r2, r3
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	1c5a      	adds	r2, r3, #1
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	7e1b      	ldrb	r3, [r3, #24]
 800d064:	b2db      	uxtb	r3, r3
 800d066:	f003 0307 	and.w	r3, r3, #7
 800d06a:	3302      	adds	r3, #2
 800d06c:	2201      	movs	r2, #1
 800d06e:	fa02 f303 	lsl.w	r3, r2, r3
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d076:	fb02 f203 	mul.w	r2, r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	7a1b      	ldrb	r3, [r3, #8]
 800d082:	b2db      	uxtb	r3, r3
 800d084:	f003 030f 	and.w	r3, r3, #15
 800d088:	2201      	movs	r2, #1
 800d08a:	409a      	lsls	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d098:	0a52      	lsrs	r2, r2, #9
 800d09a:	fb02 f203 	mul.w	r2, r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0a8:	661a      	str	r2, [r3, #96]	; 0x60
 800d0aa:	e031      	b.n	800d110 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d11d      	bne.n	800d0f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0b8:	041b      	lsls	r3, r3, #16
 800d0ba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0c2:	0c1b      	lsrs	r3, r3, #16
 800d0c4:	431a      	orrs	r2, r3
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	029a      	lsls	r2, r3, #10
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0e4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	661a      	str	r2, [r3, #96]	; 0x60
 800d0ee:	e00f      	b.n	800d110 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a58      	ldr	r2, [pc, #352]	; (800d258 <HAL_SD_GetCardCSD+0x344>)
 800d0f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	e09d      	b.n	800d24c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d114:	0b9b      	lsrs	r3, r3, #14
 800d116:	b2db      	uxtb	r3, r3
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d126:	09db      	lsrs	r3, r3, #7
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d13e:	b2da      	uxtb	r2, r3
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d148:	0fdb      	lsrs	r3, r3, #31
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d154:	0f5b      	lsrs	r3, r3, #29
 800d156:	b2db      	uxtb	r3, r3
 800d158:	f003 0303 	and.w	r3, r3, #3
 800d15c:	b2da      	uxtb	r2, r3
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d166:	0e9b      	lsrs	r3, r3, #26
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	f003 0307 	and.w	r3, r3, #7
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d178:	0d9b      	lsrs	r3, r3, #22
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	f003 030f 	and.w	r3, r3, #15
 800d180:	b2da      	uxtb	r2, r3
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d18a:	0d5b      	lsrs	r3, r3, #21
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	f003 0301 	and.w	r3, r3, #1
 800d192:	b2da      	uxtb	r2, r3
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a6:	0c1b      	lsrs	r3, r3, #16
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	f003 0301 	and.w	r3, r3, #1
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ba:	0bdb      	lsrs	r3, r3, #15
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	b2da      	uxtb	r2, r3
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ce:	0b9b      	lsrs	r3, r3, #14
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	f003 0301 	and.w	r3, r3, #1
 800d1d6:	b2da      	uxtb	r2, r3
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e2:	0b5b      	lsrs	r3, r3, #13
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	f003 0301 	and.w	r3, r3, #1
 800d1ea:	b2da      	uxtb	r2, r3
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1f6:	0b1b      	lsrs	r3, r3, #12
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	f003 0301 	and.w	r3, r3, #1
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d20a:	0a9b      	lsrs	r3, r3, #10
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	f003 0303 	and.w	r3, r3, #3
 800d212:	b2da      	uxtb	r2, r3
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d21e:	0a1b      	lsrs	r3, r3, #8
 800d220:	b2db      	uxtb	r3, r3
 800d222:	f003 0303 	and.w	r3, r3, #3
 800d226:	b2da      	uxtb	r2, r3
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d232:	085b      	lsrs	r3, r3, #1
 800d234:	b2db      	uxtb	r3, r3
 800d236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d23a:	b2da      	uxtb	r2, r3
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	2201      	movs	r2, #1
 800d246:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d24a:	2300      	movs	r3, #0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr
 800d258:	004005ff 	.word	0x004005ff

0800d25c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d2b4:	b5b0      	push	{r4, r5, r7, lr}
 800d2b6:	b08e      	sub	sp, #56	; 0x38
 800d2b8:	af04      	add	r7, sp, #16
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2203      	movs	r2, #3
 800d2c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ca:	2b03      	cmp	r3, #3
 800d2cc:	d02e      	beq.n	800d32c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2d4:	d106      	bne.n	800d2e4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	639a      	str	r2, [r3, #56]	; 0x38
 800d2e2:	e029      	b.n	800d338 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2ea:	d10a      	bne.n	800d302 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 fb0f 	bl	800d910 <SD_WideBus_Enable>
 800d2f2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fa:	431a      	orrs	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	639a      	str	r2, [r3, #56]	; 0x38
 800d300:	e01a      	b.n	800d338 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10a      	bne.n	800d31e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fb4c 	bl	800d9a6 <SD_WideBus_Disable>
 800d30e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	431a      	orrs	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	639a      	str	r2, [r3, #56]	; 0x38
 800d31c:	e00c      	b.n	800d338 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d322:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	639a      	str	r2, [r3, #56]	; 0x38
 800d32a:	e005      	b.n	800d338 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d330:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d009      	beq.n	800d354 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a18      	ldr	r2, [pc, #96]	; (800d3a8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d346:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2201      	movs	r2, #1
 800d34c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e024      	b.n	800d39e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	68db      	ldr	r3, [r3, #12]
 800d364:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	695b      	ldr	r3, [r3, #20]
 800d36e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	699b      	ldr	r3, [r3, #24]
 800d374:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681d      	ldr	r5, [r3, #0]
 800d37a:	466c      	mov	r4, sp
 800d37c:	f107 0318 	add.w	r3, r7, #24
 800d380:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d388:	f107 030c 	add.w	r3, r7, #12
 800d38c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d38e:	4628      	mov	r0, r5
 800d390:	f002 fcb2 	bl	800fcf8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3728      	adds	r7, #40	; 0x28
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bdb0      	pop	{r4, r5, r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	004005ff 	.word	0x004005ff

0800d3ac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b086      	sub	sp, #24
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d3b8:	f107 030c 	add.w	r3, r7, #12
 800d3bc:	4619      	mov	r1, r3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 fa7e 	bl	800d8c0 <SD_SendStatus>
 800d3c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d005      	beq.n	800d3d8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	431a      	orrs	r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	0a5b      	lsrs	r3, r3, #9
 800d3dc:	f003 030f 	and.w	r3, r3, #15
 800d3e0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d3e2:	693b      	ldr	r3, [r7, #16]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d408:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d40a:	bf00      	nop
 800d40c:	3714      	adds	r7, #20
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr

0800d416 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d422:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d428:	2b82      	cmp	r3, #130	; 0x82
 800d42a:	d111      	bne.n	800d450 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4618      	mov	r0, r3
 800d432:	f002 fde7 	bl	8010004 <SDMMC_CmdStopTransfer>
 800d436:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d008      	beq.n	800d450 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	431a      	orrs	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f7ff fd58 	bl	800cf00 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f022 0208 	bic.w	r2, r2, #8
 800d45e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f240 523a 	movw	r2, #1338	; 0x53a
 800d468:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2201      	movs	r2, #1
 800d46e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2200      	movs	r2, #0
 800d476:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f003 fa3f 	bl	80108fc <HAL_SD_RxCpltCallback>
#endif
}
 800d47e:	bf00      	nop
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
	...

0800d488 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d494:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f7fd f848 	bl	800a52c <HAL_DMA_GetError>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b02      	cmp	r3, #2
 800d4a0:	d03e      	beq.n	800d520 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4a8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4b0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d002      	beq.n	800d4be <SD_DMAError+0x36>
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d12d      	bne.n	800d51a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4a19      	ldr	r2, [pc, #100]	; (800d528 <SD_DMAError+0xa0>)
 800d4c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d4d4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d4e2:	6978      	ldr	r0, [r7, #20]
 800d4e4:	f7ff ff62 	bl	800d3ac <HAL_SD_GetCardState>
 800d4e8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	2b06      	cmp	r3, #6
 800d4ee:	d002      	beq.n	800d4f6 <SD_DMAError+0x6e>
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	2b05      	cmp	r3, #5
 800d4f4:	d10a      	bne.n	800d50c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f002 fd82 	bl	8010004 <SDMMC_CmdStopTransfer>
 800d500:	4602      	mov	r2, r0
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d506:	431a      	orrs	r2, r3
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	2201      	movs	r2, #1
 800d510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	2200      	movs	r2, #0
 800d518:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d51a:	6978      	ldr	r0, [r7, #20]
 800d51c:	f7ff fcf0 	bl	800cf00 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d520:	bf00      	nop
 800d522:	3718      	adds	r7, #24
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	004005ff 	.word	0x004005ff

0800d52c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d538:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d542:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f7ff ff31 	bl	800d3ac <HAL_SD_GetCardState>
 800d54a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2200      	movs	r2, #0
 800d558:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	2b06      	cmp	r3, #6
 800d55e:	d002      	beq.n	800d566 <SD_DMATxAbort+0x3a>
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	2b05      	cmp	r3, #5
 800d564:	d10a      	bne.n	800d57c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	4618      	mov	r0, r3
 800d56c:	f002 fd4a 	bl	8010004 <SDMMC_CmdStopTransfer>
 800d570:	4602      	mov	r2, r0
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d576:	431a      	orrs	r2, r3
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d580:	2b00      	cmp	r3, #0
 800d582:	d103      	bne.n	800d58c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f003 f9a5 	bl	80108d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d58a:	e002      	b.n	800d592 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f7ff fcb7 	bl	800cf00 <HAL_SD_ErrorCallback>
}
 800d592:	bf00      	nop
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b084      	sub	sp, #16
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f240 523a 	movw	r2, #1338	; 0x53a
 800d5b0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	f7ff fefa 	bl	800d3ac <HAL_SD_GetCardState>
 800d5b8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	2b06      	cmp	r3, #6
 800d5cc:	d002      	beq.n	800d5d4 <SD_DMARxAbort+0x3a>
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2b05      	cmp	r3, #5
 800d5d2:	d10a      	bne.n	800d5ea <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f002 fd13 	bl	8010004 <SDMMC_CmdStopTransfer>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5e4:	431a      	orrs	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d103      	bne.n	800d5fa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f003 f96e 	bl	80108d4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d5f8:	e002      	b.n	800d600 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f7ff fc80 	bl	800cf00 <HAL_SD_ErrorCallback>
}
 800d600:	bf00      	nop
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d608:	b5b0      	push	{r4, r5, r7, lr}
 800d60a:	b094      	sub	sp, #80	; 0x50
 800d60c:	af04      	add	r7, sp, #16
 800d60e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d610:	2301      	movs	r3, #1
 800d612:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4618      	mov	r0, r3
 800d61a:	f002 fbc5 	bl	800fda8 <SDIO_GetPowerState>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d102      	bne.n	800d62a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d624:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d628:	e0b7      	b.n	800d79a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d62e:	2b03      	cmp	r3, #3
 800d630:	d02f      	beq.n	800d692 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4618      	mov	r0, r3
 800d638:	f002 fdee 	bl	8010218 <SDMMC_CmdSendCID>
 800d63c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d640:	2b00      	cmp	r3, #0
 800d642:	d001      	beq.n	800d648 <SD_InitCard+0x40>
    {
      return errorstate;
 800d644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d646:	e0a8      	b.n	800d79a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2100      	movs	r1, #0
 800d64e:	4618      	mov	r0, r3
 800d650:	f002 fbef 	bl	800fe32 <SDIO_GetResponse>
 800d654:	4602      	mov	r2, r0
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2104      	movs	r1, #4
 800d660:	4618      	mov	r0, r3
 800d662:	f002 fbe6 	bl	800fe32 <SDIO_GetResponse>
 800d666:	4602      	mov	r2, r0
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2108      	movs	r1, #8
 800d672:	4618      	mov	r0, r3
 800d674:	f002 fbdd 	bl	800fe32 <SDIO_GetResponse>
 800d678:	4602      	mov	r2, r0
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	210c      	movs	r1, #12
 800d684:	4618      	mov	r0, r3
 800d686:	f002 fbd4 	bl	800fe32 <SDIO_GetResponse>
 800d68a:	4602      	mov	r2, r0
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d696:	2b03      	cmp	r3, #3
 800d698:	d00d      	beq.n	800d6b6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f107 020e 	add.w	r2, r7, #14
 800d6a2:	4611      	mov	r1, r2
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f002 fdf4 	bl	8010292 <SDMMC_CmdSetRelAdd>
 800d6aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <SD_InitCard+0xae>
    {
      return errorstate;
 800d6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6b4:	e071      	b.n	800d79a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d036      	beq.n	800d72c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d6be:	89fb      	ldrh	r3, [r7, #14]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6ce:	041b      	lsls	r3, r3, #16
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	4610      	mov	r0, r2
 800d6d4:	f002 fdbe 	bl	8010254 <SDMMC_CmdSendCSD>
 800d6d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6e2:	e05a      	b.n	800d79a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f002 fba1 	bl	800fe32 <SDIO_GetResponse>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2104      	movs	r1, #4
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f002 fb98 	bl	800fe32 <SDIO_GetResponse>
 800d702:	4602      	mov	r2, r0
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2108      	movs	r1, #8
 800d70e:	4618      	mov	r0, r3
 800d710:	f002 fb8f 	bl	800fe32 <SDIO_GetResponse>
 800d714:	4602      	mov	r2, r0
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	210c      	movs	r1, #12
 800d720:	4618      	mov	r0, r3
 800d722:	f002 fb86 	bl	800fe32 <SDIO_GetResponse>
 800d726:	4602      	mov	r2, r0
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2104      	movs	r1, #4
 800d732:	4618      	mov	r0, r3
 800d734:	f002 fb7d 	bl	800fe32 <SDIO_GetResponse>
 800d738:	4603      	mov	r3, r0
 800d73a:	0d1a      	lsrs	r2, r3, #20
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d740:	f107 0310 	add.w	r3, r7, #16
 800d744:	4619      	mov	r1, r3
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7ff fbe4 	bl	800cf14 <HAL_SD_GetCardCSD>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d002      	beq.n	800d758 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d752:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d756:	e020      	b.n	800d79a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6819      	ldr	r1, [r3, #0]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d760:	041b      	lsls	r3, r3, #16
 800d762:	f04f 0400 	mov.w	r4, #0
 800d766:	461a      	mov	r2, r3
 800d768:	4623      	mov	r3, r4
 800d76a:	4608      	mov	r0, r1
 800d76c:	f002 fc6c 	bl	8010048 <SDMMC_CmdSelDesel>
 800d770:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <SD_InitCard+0x174>
  {
    return errorstate;
 800d778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d77a:	e00e      	b.n	800d79a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681d      	ldr	r5, [r3, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	466c      	mov	r4, sp
 800d784:	f103 0210 	add.w	r2, r3, #16
 800d788:	ca07      	ldmia	r2, {r0, r1, r2}
 800d78a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d78e:	3304      	adds	r3, #4
 800d790:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d792:	4628      	mov	r0, r5
 800d794:	f002 fab0 	bl	800fcf8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3740      	adds	r7, #64	; 0x40
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d7a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	617b      	str	r3, [r7, #20]
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f002 fc66 	bl	801008e <SDMMC_CmdGoIdleState>
 800d7c2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d001      	beq.n	800d7ce <SD_PowerON+0x2a>
  {
    return errorstate;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	e072      	b.n	800d8b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f002 fc79 	bl	80100ca <SDMMC_CmdOperCond>
 800d7d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00d      	beq.n	800d7fc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f002 fc4f 	bl	801008e <SDMMC_CmdGoIdleState>
 800d7f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d004      	beq.n	800d802 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	e05b      	b.n	800d8b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d806:	2b01      	cmp	r3, #1
 800d808:	d137      	bne.n	800d87a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2100      	movs	r1, #0
 800d810:	4618      	mov	r0, r3
 800d812:	f002 fc79 	bl	8010108 <SDMMC_CmdAppCommand>
 800d816:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d02d      	beq.n	800d87a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d81e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d822:	e047      	b.n	800d8b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2100      	movs	r1, #0
 800d82a:	4618      	mov	r0, r3
 800d82c:	f002 fc6c 	bl	8010108 <SDMMC_CmdAppCommand>
 800d830:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d001      	beq.n	800d83c <SD_PowerON+0x98>
    {
      return errorstate;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	e03b      	b.n	800d8b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	491e      	ldr	r1, [pc, #120]	; (800d8bc <SD_PowerON+0x118>)
 800d842:	4618      	mov	r0, r3
 800d844:	f002 fc82 	bl	801014c <SDMMC_CmdAppOperCommand>
 800d848:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d850:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d854:	e02e      	b.n	800d8b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	2100      	movs	r1, #0
 800d85c:	4618      	mov	r0, r3
 800d85e:	f002 fae8 	bl	800fe32 <SDIO_GetResponse>
 800d862:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	0fdb      	lsrs	r3, r3, #31
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d101      	bne.n	800d870 <SD_PowerON+0xcc>
 800d86c:	2301      	movs	r3, #1
 800d86e:	e000      	b.n	800d872 <SD_PowerON+0xce>
 800d870:	2300      	movs	r3, #0
 800d872:	613b      	str	r3, [r7, #16]

    count++;
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	3301      	adds	r3, #1
 800d878:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d880:	4293      	cmp	r3, r2
 800d882:	d802      	bhi.n	800d88a <SD_PowerON+0xe6>
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d0cc      	beq.n	800d824 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d890:	4293      	cmp	r3, r2
 800d892:	d902      	bls.n	800d89a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d898:	e00c      	b.n	800d8b4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d003      	beq.n	800d8ac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	645a      	str	r2, [r3, #68]	; 0x44
 800d8aa:	e002      	b.n	800d8b2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3718      	adds	r7, #24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	c1100000 	.word	0xc1100000

0800d8c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d102      	bne.n	800d8d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d8d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d8d4:	e018      	b.n	800d908 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8de:	041b      	lsls	r3, r3, #16
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	4610      	mov	r0, r2
 800d8e4:	f002 fcf6 	bl	80102d4 <SDMMC_CmdSendStatus>
 800d8e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d001      	beq.n	800d8f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	e009      	b.n	800d908 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f002 fa99 	bl	800fe32 <SDIO_GetResponse>
 800d900:	4602      	mov	r2, r0
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b086      	sub	sp, #24
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d918:	2300      	movs	r3, #0
 800d91a:	60fb      	str	r3, [r7, #12]
 800d91c:	2300      	movs	r3, #0
 800d91e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2100      	movs	r1, #0
 800d926:	4618      	mov	r0, r3
 800d928:	f002 fa83 	bl	800fe32 <SDIO_GetResponse>
 800d92c:	4603      	mov	r3, r0
 800d92e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d932:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d936:	d102      	bne.n	800d93e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d938:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d93c:	e02f      	b.n	800d99e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d93e:	f107 030c 	add.w	r3, r7, #12
 800d942:	4619      	mov	r1, r3
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f879 	bl	800da3c <SD_FindSCR>
 800d94a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	e023      	b.n	800d99e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d01c      	beq.n	800d99a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d968:	041b      	lsls	r3, r3, #16
 800d96a:	4619      	mov	r1, r3
 800d96c:	4610      	mov	r0, r2
 800d96e:	f002 fbcb 	bl	8010108 <SDMMC_CmdAppCommand>
 800d972:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d001      	beq.n	800d97e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	e00f      	b.n	800d99e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2102      	movs	r1, #2
 800d984:	4618      	mov	r0, r3
 800d986:	f002 fc04 	bl	8010192 <SDMMC_CmdBusWidth>
 800d98a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	e003      	b.n	800d99e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d996:	2300      	movs	r3, #0
 800d998:	e001      	b.n	800d99e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d99a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3718      	adds	r7, #24
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	b086      	sub	sp, #24
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f002 fa38 	bl	800fe32 <SDIO_GetResponse>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d9c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d9cc:	d102      	bne.n	800d9d4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d9ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d9d2:	e02f      	b.n	800da34 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d9d4:	f107 030c 	add.w	r3, r7, #12
 800d9d8:	4619      	mov	r1, r3
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 f82e 	bl	800da3c <SD_FindSCR>
 800d9e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d001      	beq.n	800d9ec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	e023      	b.n	800da34 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d01c      	beq.n	800da30 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9fe:	041b      	lsls	r3, r3, #16
 800da00:	4619      	mov	r1, r3
 800da02:	4610      	mov	r0, r2
 800da04:	f002 fb80 	bl	8010108 <SDMMC_CmdAppCommand>
 800da08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	e00f      	b.n	800da34 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2100      	movs	r1, #0
 800da1a:	4618      	mov	r0, r3
 800da1c:	f002 fbb9 	bl	8010192 <SDMMC_CmdBusWidth>
 800da20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d001      	beq.n	800da2c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	e003      	b.n	800da34 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800da2c:	2300      	movs	r3, #0
 800da2e:	e001      	b.n	800da34 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da30:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800da34:	4618      	mov	r0, r3
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800da3c:	b590      	push	{r4, r7, lr}
 800da3e:	b08f      	sub	sp, #60	; 0x3c
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800da46:	f7fb fd7b 	bl	8009540 <HAL_GetTick>
 800da4a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800da4c:	2300      	movs	r3, #0
 800da4e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800da50:	2300      	movs	r3, #0
 800da52:	60bb      	str	r3, [r7, #8]
 800da54:	2300      	movs	r3, #0
 800da56:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2108      	movs	r1, #8
 800da62:	4618      	mov	r0, r3
 800da64:	f002 fa24 	bl	800feb0 <SDMMC_CmdBlockLength>
 800da68:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800da6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <SD_FindSCR+0x38>
  {
    return errorstate;
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	e0a9      	b.n	800dbc8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681a      	ldr	r2, [r3, #0]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da7c:	041b      	lsls	r3, r3, #16
 800da7e:	4619      	mov	r1, r3
 800da80:	4610      	mov	r0, r2
 800da82:	f002 fb41 	bl	8010108 <SDMMC_CmdAppCommand>
 800da86:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800da88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d001      	beq.n	800da92 <SD_FindSCR+0x56>
  {
    return errorstate;
 800da8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da90:	e09a      	b.n	800dbc8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da92:	f04f 33ff 	mov.w	r3, #4294967295
 800da96:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800da98:	2308      	movs	r3, #8
 800da9a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800da9c:	2330      	movs	r3, #48	; 0x30
 800da9e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800daa0:	2302      	movs	r3, #2
 800daa2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800daa4:	2300      	movs	r3, #0
 800daa6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800daa8:	2301      	movs	r3, #1
 800daaa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f107 0210 	add.w	r2, r7, #16
 800dab4:	4611      	mov	r1, r2
 800dab6:	4618      	mov	r0, r3
 800dab8:	f002 f9ce 	bl	800fe58 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f002 fb88 	bl	80101d6 <SDMMC_CmdSendSCR>
 800dac6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d022      	beq.n	800db14 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800dace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad0:	e07a      	b.n	800dbc8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00e      	beq.n	800dafe <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6819      	ldr	r1, [r3, #0]
 800dae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	f107 0208 	add.w	r2, r7, #8
 800daec:	18d4      	adds	r4, r2, r3
 800daee:	4608      	mov	r0, r1
 800daf0:	f002 f92d 	bl	800fd4e <SDIO_ReadFIFO>
 800daf4:	4603      	mov	r3, r0
 800daf6:	6023      	str	r3, [r4, #0]
      index++;
 800daf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dafa:	3301      	adds	r3, #1
 800dafc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dafe:	f7fb fd1f 	bl	8009540 <HAL_GetTick>
 800db02:	4602      	mov	r2, r0
 800db04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db06:	1ad3      	subs	r3, r2, r3
 800db08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db0c:	d102      	bne.n	800db14 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800db0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db12:	e059      	b.n	800dbc8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db1a:	f240 432a 	movw	r3, #1066	; 0x42a
 800db1e:	4013      	ands	r3, r2
 800db20:	2b00      	cmp	r3, #0
 800db22:	d0d6      	beq.n	800dad2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db2a:	f003 0308 	and.w	r3, r3, #8
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d005      	beq.n	800db3e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2208      	movs	r2, #8
 800db38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800db3a:	2308      	movs	r3, #8
 800db3c:	e044      	b.n	800dbc8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db44:	f003 0302 	and.w	r3, r3, #2
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d005      	beq.n	800db58 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2202      	movs	r2, #2
 800db52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800db54:	2302      	movs	r3, #2
 800db56:	e037      	b.n	800dbc8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db5e:	f003 0320 	and.w	r3, r3, #32
 800db62:	2b00      	cmp	r3, #0
 800db64:	d005      	beq.n	800db72 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2220      	movs	r2, #32
 800db6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800db6e:	2320      	movs	r3, #32
 800db70:	e02a      	b.n	800dbc8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f240 523a 	movw	r2, #1338	; 0x53a
 800db7a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	061a      	lsls	r2, r3, #24
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	021b      	lsls	r3, r3, #8
 800db84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db88:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	0a1b      	lsrs	r3, r3, #8
 800db8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800db92:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	0e1b      	lsrs	r3, r3, #24
 800db98:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800db9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9c:	601a      	str	r2, [r3, #0]
    scr++;
 800db9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba0:	3304      	adds	r3, #4
 800dba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	061a      	lsls	r2, r3, #24
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	021b      	lsls	r3, r3, #8
 800dbac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dbb0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	0a1b      	lsrs	r3, r3, #8
 800dbb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dbba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	0e1b      	lsrs	r3, r3, #24
 800dbc0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	373c      	adds	r7, #60	; 0x3c
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd90      	pop	{r4, r7, pc}

0800dbd0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b086      	sub	sp, #24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbdc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d03f      	beq.n	800dc6a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dbea:	2300      	movs	r3, #0
 800dbec:	617b      	str	r3, [r7, #20]
 800dbee:	e033      	b.n	800dc58 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f002 f8aa 	bl	800fd4e <SDIO_ReadFIFO>
 800dbfa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	3301      	adds	r3, #1
 800dc08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	0a1b      	lsrs	r3, r3, #8
 800dc14:	b2da      	uxtb	r2, r3
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	3b01      	subs	r3, #1
 800dc24:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	0c1b      	lsrs	r3, r3, #16
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	3301      	adds	r3, #1
 800dc34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	3b01      	subs	r3, #1
 800dc3a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	0e1b      	lsrs	r3, r3, #24
 800dc40:	b2da      	uxtb	r2, r3
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	3301      	adds	r3, #1
 800dc56:	617b      	str	r3, [r7, #20]
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	2b07      	cmp	r3, #7
 800dc5c:	d9c8      	bls.n	800dbf0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	693a      	ldr	r2, [r7, #16]
 800dc68:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800dc6a:	bf00      	nop
 800dc6c:	3718      	adds	r7, #24
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b086      	sub	sp, #24
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6a1b      	ldr	r3, [r3, #32]
 800dc7e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc84:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d043      	beq.n	800dd14 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	617b      	str	r3, [r7, #20]
 800dc90:	e037      	b.n	800dd02 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	3b01      	subs	r3, #1
 800dca2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	021a      	lsls	r2, r3, #8
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	4313      	orrs	r3, r2
 800dcae:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	041a      	lsls	r2, r3, #16
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	3301      	adds	r3, #1
 800dccc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	061a      	lsls	r2, r3, #24
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	3301      	adds	r3, #1
 800dce4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	3b01      	subs	r3, #1
 800dcea:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f107 0208 	add.w	r2, r7, #8
 800dcf4:	4611      	mov	r1, r2
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f002 f836 	bl	800fd68 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	617b      	str	r3, [r7, #20]
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	2b07      	cmp	r3, #7
 800dd06:	d9c4      	bls.n	800dc92 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	693a      	ldr	r2, [r7, #16]
 800dd12:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800dd14:	bf00      	nop
 800dd16:	3718      	adds	r7, #24
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d101      	bne.n	800dd2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e056      	b.n	800dddc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d106      	bne.n	800dd4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f7f9 f8af 	bl	8006eac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2202      	movs	r2, #2
 800dd52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	685a      	ldr	r2, [r3, #4]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	689b      	ldr	r3, [r3, #8]
 800dd6e:	431a      	orrs	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	431a      	orrs	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	691b      	ldr	r3, [r3, #16]
 800dd7a:	431a      	orrs	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	695b      	ldr	r3, [r3, #20]
 800dd80:	431a      	orrs	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	699b      	ldr	r3, [r3, #24]
 800dd86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dd8a:	431a      	orrs	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	69db      	ldr	r3, [r3, #28]
 800dd90:	431a      	orrs	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6a1b      	ldr	r3, [r3, #32]
 800dd96:	ea42 0103 	orr.w	r1, r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	430a      	orrs	r2, r1
 800dda4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	699b      	ldr	r3, [r3, #24]
 800ddaa:	0c1b      	lsrs	r3, r3, #16
 800ddac:	f003 0104 	and.w	r1, r3, #4
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	430a      	orrs	r2, r1
 800ddba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	69da      	ldr	r2, [r3, #28]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ddca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b088      	sub	sp, #32
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	603b      	str	r3, [r7, #0]
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d101      	bne.n	800de06 <HAL_SPI_Transmit+0x22>
 800de02:	2302      	movs	r3, #2
 800de04:	e11e      	b.n	800e044 <HAL_SPI_Transmit+0x260>
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2201      	movs	r2, #1
 800de0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de0e:	f7fb fb97 	bl	8009540 <HAL_GetTick>
 800de12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800de14:	88fb      	ldrh	r3, [r7, #6]
 800de16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	2b01      	cmp	r3, #1
 800de22:	d002      	beq.n	800de2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800de24:	2302      	movs	r3, #2
 800de26:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de28:	e103      	b.n	800e032 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <HAL_SPI_Transmit+0x52>
 800de30:	88fb      	ldrh	r3, [r7, #6]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d102      	bne.n	800de3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	77fb      	strb	r3, [r7, #31]
    goto error;
 800de3a:	e0fa      	b.n	800e032 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2203      	movs	r2, #3
 800de40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	88fa      	ldrh	r2, [r7, #6]
 800de54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	88fa      	ldrh	r2, [r7, #6]
 800de5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2200      	movs	r2, #0
 800de60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2200      	movs	r2, #0
 800de66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2200      	movs	r2, #0
 800de6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2200      	movs	r2, #0
 800de72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2200      	movs	r2, #0
 800de78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de82:	d107      	bne.n	800de94 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800de92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de9e:	2b40      	cmp	r3, #64	; 0x40
 800dea0:	d007      	beq.n	800deb2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800deb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800deba:	d14b      	bne.n	800df54 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <HAL_SPI_Transmit+0xe6>
 800dec4:	8afb      	ldrh	r3, [r7, #22]
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d13e      	bne.n	800df48 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dece:	881a      	ldrh	r2, [r3, #0]
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deda:	1c9a      	adds	r2, r3, #2
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	3b01      	subs	r3, #1
 800dee8:	b29a      	uxth	r2, r3
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800deee:	e02b      	b.n	800df48 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	689b      	ldr	r3, [r3, #8]
 800def6:	f003 0302 	and.w	r3, r3, #2
 800defa:	2b02      	cmp	r3, #2
 800defc:	d112      	bne.n	800df24 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df02:	881a      	ldrh	r2, [r3, #0]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df0e:	1c9a      	adds	r2, r3, #2
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df18:	b29b      	uxth	r3, r3
 800df1a:	3b01      	subs	r3, #1
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	86da      	strh	r2, [r3, #54]	; 0x36
 800df22:	e011      	b.n	800df48 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df24:	f7fb fb0c 	bl	8009540 <HAL_GetTick>
 800df28:	4602      	mov	r2, r0
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	1ad3      	subs	r3, r2, r3
 800df2e:	683a      	ldr	r2, [r7, #0]
 800df30:	429a      	cmp	r2, r3
 800df32:	d803      	bhi.n	800df3c <HAL_SPI_Transmit+0x158>
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df3a:	d102      	bne.n	800df42 <HAL_SPI_Transmit+0x15e>
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d102      	bne.n	800df48 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800df42:	2303      	movs	r3, #3
 800df44:	77fb      	strb	r3, [r7, #31]
          goto error;
 800df46:	e074      	b.n	800e032 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d1ce      	bne.n	800def0 <HAL_SPI_Transmit+0x10c>
 800df52:	e04c      	b.n	800dfee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d002      	beq.n	800df62 <HAL_SPI_Transmit+0x17e>
 800df5c:	8afb      	ldrh	r3, [r7, #22]
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d140      	bne.n	800dfe4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	330c      	adds	r3, #12
 800df6c:	7812      	ldrb	r2, [r2, #0]
 800df6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df74:	1c5a      	adds	r2, r3, #1
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df7e:	b29b      	uxth	r3, r3
 800df80:	3b01      	subs	r3, #1
 800df82:	b29a      	uxth	r2, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800df88:	e02c      	b.n	800dfe4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	f003 0302 	and.w	r3, r3, #2
 800df94:	2b02      	cmp	r3, #2
 800df96:	d113      	bne.n	800dfc0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	330c      	adds	r3, #12
 800dfa2:	7812      	ldrb	r2, [r2, #0]
 800dfa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfaa:	1c5a      	adds	r2, r3, #1
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	86da      	strh	r2, [r3, #54]	; 0x36
 800dfbe:	e011      	b.n	800dfe4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfc0:	f7fb fabe 	bl	8009540 <HAL_GetTick>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	69bb      	ldr	r3, [r7, #24]
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d803      	bhi.n	800dfd8 <HAL_SPI_Transmit+0x1f4>
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfd6:	d102      	bne.n	800dfde <HAL_SPI_Transmit+0x1fa>
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d102      	bne.n	800dfe4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800dfde:	2303      	movs	r3, #3
 800dfe0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dfe2:	e026      	b.n	800e032 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1cd      	bne.n	800df8a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dfee:	69ba      	ldr	r2, [r7, #24]
 800dff0:	6839      	ldr	r1, [r7, #0]
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f000 fba4 	bl	800e740 <SPI_EndRxTxTransaction>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d002      	beq.n	800e004 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	2220      	movs	r2, #32
 800e002:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	689b      	ldr	r3, [r3, #8]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d10a      	bne.n	800e022 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e00c:	2300      	movs	r3, #0
 800e00e:	613b      	str	r3, [r7, #16]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	613b      	str	r3, [r7, #16]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	689b      	ldr	r3, [r3, #8]
 800e01e:	613b      	str	r3, [r7, #16]
 800e020:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e026:	2b00      	cmp	r3, #0
 800e028:	d002      	beq.n	800e030 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e02a:	2301      	movs	r3, #1
 800e02c:	77fb      	strb	r3, [r7, #31]
 800e02e:	e000      	b.n	800e032 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e030:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2201      	movs	r2, #1
 800e036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e042:	7ffb      	ldrb	r3, [r7, #31]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3720      	adds	r7, #32
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b088      	sub	sp, #32
 800e050:	af02      	add	r7, sp, #8
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	603b      	str	r3, [r7, #0]
 800e058:	4613      	mov	r3, r2
 800e05a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e05c:	2300      	movs	r3, #0
 800e05e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e068:	d112      	bne.n	800e090 <HAL_SPI_Receive+0x44>
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10e      	bne.n	800e090 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2204      	movs	r2, #4
 800e076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e07a:	88fa      	ldrh	r2, [r7, #6]
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	9300      	str	r3, [sp, #0]
 800e080:	4613      	mov	r3, r2
 800e082:	68ba      	ldr	r2, [r7, #8]
 800e084:	68b9      	ldr	r1, [r7, #8]
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f000 f8e9 	bl	800e25e <HAL_SPI_TransmitReceive>
 800e08c:	4603      	mov	r3, r0
 800e08e:	e0e2      	b.n	800e256 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e096:	2b01      	cmp	r3, #1
 800e098:	d101      	bne.n	800e09e <HAL_SPI_Receive+0x52>
 800e09a:	2302      	movs	r3, #2
 800e09c:	e0db      	b.n	800e256 <HAL_SPI_Receive+0x20a>
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e0a6:	f7fb fa4b 	bl	8009540 <HAL_GetTick>
 800e0aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d002      	beq.n	800e0be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e0b8:	2302      	movs	r3, #2
 800e0ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e0bc:	e0c2      	b.n	800e244 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d002      	beq.n	800e0ca <HAL_SPI_Receive+0x7e>
 800e0c4:	88fb      	ldrh	r3, [r7, #6]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d102      	bne.n	800e0d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e0ce:	e0b9      	b.n	800e244 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2204      	movs	r2, #4
 800e0d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	68ba      	ldr	r2, [r7, #8]
 800e0e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	88fa      	ldrh	r2, [r7, #6]
 800e0e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	88fa      	ldrh	r2, [r7, #6]
 800e0ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2200      	movs	r2, #0
 800e100:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2200      	movs	r2, #0
 800e106:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2200      	movs	r2, #0
 800e10c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e116:	d107      	bne.n	800e128 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e126:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e132:	2b40      	cmp	r3, #64	; 0x40
 800e134:	d007      	beq.n	800e146 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e144:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	68db      	ldr	r3, [r3, #12]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d162      	bne.n	800e214 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e14e:	e02e      	b.n	800e1ae <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	f003 0301 	and.w	r3, r3, #1
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d115      	bne.n	800e18a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f103 020c 	add.w	r2, r3, #12
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e16a:	7812      	ldrb	r2, [r2, #0]
 800e16c:	b2d2      	uxtb	r2, r2
 800e16e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e174:	1c5a      	adds	r2, r3, #1
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e17e:	b29b      	uxth	r3, r3
 800e180:	3b01      	subs	r3, #1
 800e182:	b29a      	uxth	r2, r3
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e188:	e011      	b.n	800e1ae <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e18a:	f7fb f9d9 	bl	8009540 <HAL_GetTick>
 800e18e:	4602      	mov	r2, r0
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	1ad3      	subs	r3, r2, r3
 800e194:	683a      	ldr	r2, [r7, #0]
 800e196:	429a      	cmp	r2, r3
 800e198:	d803      	bhi.n	800e1a2 <HAL_SPI_Receive+0x156>
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a0:	d102      	bne.n	800e1a8 <HAL_SPI_Receive+0x15c>
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d102      	bne.n	800e1ae <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e1ac:	e04a      	b.n	800e244 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1cb      	bne.n	800e150 <HAL_SPI_Receive+0x104>
 800e1b8:	e031      	b.n	800e21e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	f003 0301 	and.w	r3, r3, #1
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d113      	bne.n	800e1f0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	68da      	ldr	r2, [r3, #12]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d2:	b292      	uxth	r2, r2
 800e1d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1da:	1c9a      	adds	r2, r3, #2
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e1ee:	e011      	b.n	800e214 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1f0:	f7fb f9a6 	bl	8009540 <HAL_GetTick>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	1ad3      	subs	r3, r2, r3
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d803      	bhi.n	800e208 <HAL_SPI_Receive+0x1bc>
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e206:	d102      	bne.n	800e20e <HAL_SPI_Receive+0x1c2>
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d102      	bne.n	800e214 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e20e:	2303      	movs	r3, #3
 800e210:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e212:	e017      	b.n	800e244 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e218:	b29b      	uxth	r3, r3
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d1cd      	bne.n	800e1ba <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e21e:	693a      	ldr	r2, [r7, #16]
 800e220:	6839      	ldr	r1, [r7, #0]
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f000 fa27 	bl	800e676 <SPI_EndRxTransaction>
 800e228:	4603      	mov	r3, r0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d002      	beq.n	800e234 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2220      	movs	r2, #32
 800e232:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d002      	beq.n	800e242 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e23c:	2301      	movs	r3, #1
 800e23e:	75fb      	strb	r3, [r7, #23]
 800e240:	e000      	b.n	800e244 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e242:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2201      	movs	r2, #1
 800e248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2200      	movs	r2, #0
 800e250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e254:	7dfb      	ldrb	r3, [r7, #23]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3718      	adds	r7, #24
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b08c      	sub	sp, #48	; 0x30
 800e262:	af00      	add	r7, sp, #0
 800e264:	60f8      	str	r0, [r7, #12]
 800e266:	60b9      	str	r1, [r7, #8]
 800e268:	607a      	str	r2, [r7, #4]
 800e26a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e26c:	2301      	movs	r3, #1
 800e26e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d101      	bne.n	800e284 <HAL_SPI_TransmitReceive+0x26>
 800e280:	2302      	movs	r3, #2
 800e282:	e18a      	b.n	800e59a <HAL_SPI_TransmitReceive+0x33c>
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2201      	movs	r2, #1
 800e288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e28c:	f7fb f958 	bl	8009540 <HAL_GetTick>
 800e290:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e2a2:	887b      	ldrh	r3, [r7, #2]
 800e2a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e2a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d00f      	beq.n	800e2ce <HAL_SPI_TransmitReceive+0x70>
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e2b4:	d107      	bne.n	800e2c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d103      	bne.n	800e2c6 <HAL_SPI_TransmitReceive+0x68>
 800e2be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e2c2:	2b04      	cmp	r3, #4
 800e2c4:	d003      	beq.n	800e2ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e2c6:	2302      	movs	r3, #2
 800e2c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e2cc:	e15b      	b.n	800e586 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d005      	beq.n	800e2e0 <HAL_SPI_TransmitReceive+0x82>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d002      	beq.n	800e2e0 <HAL_SPI_TransmitReceive+0x82>
 800e2da:	887b      	ldrh	r3, [r7, #2]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d103      	bne.n	800e2e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e2e6:	e14e      	b.n	800e586 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	2b04      	cmp	r3, #4
 800e2f2:	d003      	beq.n	800e2fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2205      	movs	r2, #5
 800e2f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2200      	movs	r2, #0
 800e300:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	887a      	ldrh	r2, [r7, #2]
 800e30c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	887a      	ldrh	r2, [r7, #2]
 800e312:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	68ba      	ldr	r2, [r7, #8]
 800e318:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	887a      	ldrh	r2, [r7, #2]
 800e31e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	887a      	ldrh	r2, [r7, #2]
 800e324:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2200      	movs	r2, #0
 800e32a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2200      	movs	r2, #0
 800e330:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e33c:	2b40      	cmp	r3, #64	; 0x40
 800e33e:	d007      	beq.n	800e350 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e34e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e358:	d178      	bne.n	800e44c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d002      	beq.n	800e368 <HAL_SPI_TransmitReceive+0x10a>
 800e362:	8b7b      	ldrh	r3, [r7, #26]
 800e364:	2b01      	cmp	r3, #1
 800e366:	d166      	bne.n	800e436 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e36c:	881a      	ldrh	r2, [r3, #0]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e378:	1c9a      	adds	r2, r3, #2
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e382:	b29b      	uxth	r3, r3
 800e384:	3b01      	subs	r3, #1
 800e386:	b29a      	uxth	r2, r3
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e38c:	e053      	b.n	800e436 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	689b      	ldr	r3, [r3, #8]
 800e394:	f003 0302 	and.w	r3, r3, #2
 800e398:	2b02      	cmp	r3, #2
 800e39a:	d11b      	bne.n	800e3d4 <HAL_SPI_TransmitReceive+0x176>
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d016      	beq.n	800e3d4 <HAL_SPI_TransmitReceive+0x176>
 800e3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d113      	bne.n	800e3d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3b0:	881a      	ldrh	r2, [r3, #0]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3bc:	1c9a      	adds	r2, r3, #2
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	689b      	ldr	r3, [r3, #8]
 800e3da:	f003 0301 	and.w	r3, r3, #1
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d119      	bne.n	800e416 <HAL_SPI_TransmitReceive+0x1b8>
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d014      	beq.n	800e416 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	68da      	ldr	r2, [r3, #12]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f6:	b292      	uxth	r2, r2
 800e3f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fe:	1c9a      	adds	r2, r3, #2
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e408:	b29b      	uxth	r3, r3
 800e40a:	3b01      	subs	r3, #1
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e412:	2301      	movs	r3, #1
 800e414:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e416:	f7fb f893 	bl	8009540 <HAL_GetTick>
 800e41a:	4602      	mov	r2, r0
 800e41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41e:	1ad3      	subs	r3, r2, r3
 800e420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e422:	429a      	cmp	r2, r3
 800e424:	d807      	bhi.n	800e436 <HAL_SPI_TransmitReceive+0x1d8>
 800e426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42c:	d003      	beq.n	800e436 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e42e:	2303      	movs	r3, #3
 800e430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e434:	e0a7      	b.n	800e586 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1a6      	bne.n	800e38e <HAL_SPI_TransmitReceive+0x130>
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e444:	b29b      	uxth	r3, r3
 800e446:	2b00      	cmp	r3, #0
 800e448:	d1a1      	bne.n	800e38e <HAL_SPI_TransmitReceive+0x130>
 800e44a:	e07c      	b.n	800e546 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d002      	beq.n	800e45a <HAL_SPI_TransmitReceive+0x1fc>
 800e454:	8b7b      	ldrh	r3, [r7, #26]
 800e456:	2b01      	cmp	r3, #1
 800e458:	d16b      	bne.n	800e532 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	330c      	adds	r3, #12
 800e464:	7812      	ldrb	r2, [r2, #0]
 800e466:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e46c:	1c5a      	adds	r2, r3, #1
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e476:	b29b      	uxth	r3, r3
 800e478:	3b01      	subs	r3, #1
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e480:	e057      	b.n	800e532 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	f003 0302 	and.w	r3, r3, #2
 800e48c:	2b02      	cmp	r3, #2
 800e48e:	d11c      	bne.n	800e4ca <HAL_SPI_TransmitReceive+0x26c>
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e494:	b29b      	uxth	r3, r3
 800e496:	2b00      	cmp	r3, #0
 800e498:	d017      	beq.n	800e4ca <HAL_SPI_TransmitReceive+0x26c>
 800e49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d114      	bne.n	800e4ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	330c      	adds	r3, #12
 800e4aa:	7812      	ldrb	r2, [r2, #0]
 800e4ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	3b01      	subs	r3, #1
 800e4c0:	b29a      	uxth	r2, r3
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	f003 0301 	and.w	r3, r3, #1
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d119      	bne.n	800e50c <HAL_SPI_TransmitReceive+0x2ae>
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d014      	beq.n	800e50c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	68da      	ldr	r2, [r3, #12]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ec:	b2d2      	uxtb	r2, r2
 800e4ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f4:	1c5a      	adds	r2, r3, #1
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	3b01      	subs	r3, #1
 800e502:	b29a      	uxth	r2, r3
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e508:	2301      	movs	r3, #1
 800e50a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e50c:	f7fb f818 	bl	8009540 <HAL_GetTick>
 800e510:	4602      	mov	r2, r0
 800e512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e514:	1ad3      	subs	r3, r2, r3
 800e516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e518:	429a      	cmp	r2, r3
 800e51a:	d803      	bhi.n	800e524 <HAL_SPI_TransmitReceive+0x2c6>
 800e51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e522:	d102      	bne.n	800e52a <HAL_SPI_TransmitReceive+0x2cc>
 800e524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e526:	2b00      	cmp	r3, #0
 800e528:	d103      	bne.n	800e532 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e52a:	2303      	movs	r3, #3
 800e52c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e530:	e029      	b.n	800e586 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e536:	b29b      	uxth	r3, r3
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d1a2      	bne.n	800e482 <HAL_SPI_TransmitReceive+0x224>
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e540:	b29b      	uxth	r3, r3
 800e542:	2b00      	cmp	r3, #0
 800e544:	d19d      	bne.n	800e482 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e548:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	f000 f8f8 	bl	800e740 <SPI_EndRxTxTransaction>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d006      	beq.n	800e564 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e556:	2301      	movs	r3, #1
 800e558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2220      	movs	r2, #32
 800e560:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e562:	e010      	b.n	800e586 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d10b      	bne.n	800e584 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e56c:	2300      	movs	r3, #0
 800e56e:	617b      	str	r3, [r7, #20]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	617b      	str	r3, [r7, #20]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	617b      	str	r3, [r7, #20]
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	e000      	b.n	800e586 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e584:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2201      	movs	r2, #1
 800e58a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2200      	movs	r2, #0
 800e592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e596:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3730      	adds	r7, #48	; 0x30
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b084      	sub	sp, #16
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	60f8      	str	r0, [r7, #12]
 800e5aa:	60b9      	str	r1, [r7, #8]
 800e5ac:	603b      	str	r3, [r7, #0]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e5b2:	e04c      	b.n	800e64e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ba:	d048      	beq.n	800e64e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e5bc:	f7fa ffc0 	bl	8009540 <HAL_GetTick>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	1ad3      	subs	r3, r2, r3
 800e5c6:	683a      	ldr	r2, [r7, #0]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d902      	bls.n	800e5d2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d13d      	bne.n	800e64e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	685a      	ldr	r2, [r3, #4]
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e5e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e5ea:	d111      	bne.n	800e610 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5f4:	d004      	beq.n	800e600 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5fe:	d107      	bne.n	800e610 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e60e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e618:	d10f      	bne.n	800e63a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e638:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2201      	movs	r2, #1
 800e63e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2200      	movs	r2, #0
 800e646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e64a:	2303      	movs	r3, #3
 800e64c:	e00f      	b.n	800e66e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	689a      	ldr	r2, [r3, #8]
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	4013      	ands	r3, r2
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	bf0c      	ite	eq
 800e65e:	2301      	moveq	r3, #1
 800e660:	2300      	movne	r3, #0
 800e662:	b2db      	uxtb	r3, r3
 800e664:	461a      	mov	r2, r3
 800e666:	79fb      	ldrb	r3, [r7, #7]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d1a3      	bne.n	800e5b4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e66c:	2300      	movs	r3, #0
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}

0800e676 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e676:	b580      	push	{r7, lr}
 800e678:	b086      	sub	sp, #24
 800e67a:	af02      	add	r7, sp, #8
 800e67c:	60f8      	str	r0, [r7, #12]
 800e67e:	60b9      	str	r1, [r7, #8]
 800e680:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e68a:	d111      	bne.n	800e6b0 <SPI_EndRxTransaction+0x3a>
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e694:	d004      	beq.n	800e6a0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e69e:	d107      	bne.n	800e6b0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e6ae:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6b8:	d12a      	bne.n	800e710 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6c2:	d012      	beq.n	800e6ea <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	2180      	movs	r1, #128	; 0x80
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f7ff ff67 	bl	800e5a2 <SPI_WaitFlagStateUntilTimeout>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d02d      	beq.n	800e736 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6de:	f043 0220 	orr.w	r2, r3, #32
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e6e6:	2303      	movs	r3, #3
 800e6e8:	e026      	b.n	800e738 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	9300      	str	r3, [sp, #0]
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	2101      	movs	r1, #1
 800e6f4:	68f8      	ldr	r0, [r7, #12]
 800e6f6:	f7ff ff54 	bl	800e5a2 <SPI_WaitFlagStateUntilTimeout>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d01a      	beq.n	800e736 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e704:	f043 0220 	orr.w	r2, r3, #32
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e70c:	2303      	movs	r3, #3
 800e70e:	e013      	b.n	800e738 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	2200      	movs	r2, #0
 800e718:	2101      	movs	r1, #1
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	f7ff ff41 	bl	800e5a2 <SPI_WaitFlagStateUntilTimeout>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d007      	beq.n	800e736 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e72a:	f043 0220 	orr.w	r2, r3, #32
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e732:	2303      	movs	r3, #3
 800e734:	e000      	b.n	800e738 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e736:	2300      	movs	r3, #0
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3710      	adds	r7, #16
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b088      	sub	sp, #32
 800e744:	af02      	add	r7, sp, #8
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e74c:	4b1b      	ldr	r3, [pc, #108]	; (800e7bc <SPI_EndRxTxTransaction+0x7c>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a1b      	ldr	r2, [pc, #108]	; (800e7c0 <SPI_EndRxTxTransaction+0x80>)
 800e752:	fba2 2303 	umull	r2, r3, r2, r3
 800e756:	0d5b      	lsrs	r3, r3, #21
 800e758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e75c:	fb02 f303 	mul.w	r3, r2, r3
 800e760:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e76a:	d112      	bne.n	800e792 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2200      	movs	r2, #0
 800e774:	2180      	movs	r1, #128	; 0x80
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7ff ff13 	bl	800e5a2 <SPI_WaitFlagStateUntilTimeout>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d016      	beq.n	800e7b0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e786:	f043 0220 	orr.w	r2, r3, #32
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e78e:	2303      	movs	r3, #3
 800e790:	e00f      	b.n	800e7b2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00a      	beq.n	800e7ae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	3b01      	subs	r3, #1
 800e79c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	689b      	ldr	r3, [r3, #8]
 800e7a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7a8:	2b80      	cmp	r3, #128	; 0x80
 800e7aa:	d0f2      	beq.n	800e792 <SPI_EndRxTxTransaction+0x52>
 800e7ac:	e000      	b.n	800e7b0 <SPI_EndRxTxTransaction+0x70>
        break;
 800e7ae:	bf00      	nop
  }

  return HAL_OK;
 800e7b0:	2300      	movs	r3, #0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3718      	adds	r7, #24
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop
 800e7bc:	20000000 	.word	0x20000000
 800e7c0:	165e9f81 	.word	0x165e9f81

0800e7c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d101      	bne.n	800e7d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e01d      	b.n	800e812 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d106      	bne.n	800e7f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7f8 fc1a 	bl	8007024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	3304      	adds	r3, #4
 800e800:	4619      	mov	r1, r3
 800e802:	4610      	mov	r0, r2
 800e804:	f000 fb56 	bl	800eeb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2201      	movs	r2, #1
 800e80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e810:	2300      	movs	r3, #0
}
 800e812:	4618      	mov	r0, r3
 800e814:	3708      	adds	r7, #8
 800e816:	46bd      	mov	sp, r7
 800e818:	bd80      	pop	{r7, pc}

0800e81a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e81a:	b480      	push	{r7}
 800e81c:	b085      	sub	sp, #20
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	68da      	ldr	r2, [r3, #12]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	f042 0201 	orr.w	r2, r2, #1
 800e830:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	f003 0307 	and.w	r3, r3, #7
 800e83c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2b06      	cmp	r3, #6
 800e842:	d007      	beq.n	800e854 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f042 0201 	orr.w	r2, r2, #1
 800e852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3714      	adds	r7, #20
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr

0800e862 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e862:	b580      	push	{r7, lr}
 800e864:	b082      	sub	sp, #8
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d101      	bne.n	800e874 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e870:	2301      	movs	r3, #1
 800e872:	e01d      	b.n	800e8b0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d106      	bne.n	800e88e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2200      	movs	r2, #0
 800e884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f7f8 fb57 	bl	8006f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2202      	movs	r2, #2
 800e892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	3304      	adds	r3, #4
 800e89e:	4619      	mov	r1, r3
 800e8a0:	4610      	mov	r0, r2
 800e8a2:	f000 fb07 	bl	800eeb4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	6839      	ldr	r1, [r7, #0]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f000 fd42 	bl	800f354 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4a15      	ldr	r2, [pc, #84]	; (800e92c <HAL_TIM_PWM_Start+0x74>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d004      	beq.n	800e8e4 <HAL_TIM_PWM_Start+0x2c>
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	4a14      	ldr	r2, [pc, #80]	; (800e930 <HAL_TIM_PWM_Start+0x78>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d101      	bne.n	800e8e8 <HAL_TIM_PWM_Start+0x30>
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e000      	b.n	800e8ea <HAL_TIM_PWM_Start+0x32>
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d007      	beq.n	800e8fe <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e8fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	689b      	ldr	r3, [r3, #8]
 800e904:	f003 0307 	and.w	r3, r3, #7
 800e908:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2b06      	cmp	r3, #6
 800e90e:	d007      	beq.n	800e920 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f042 0201 	orr.w	r2, r2, #1
 800e91e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e920:	2300      	movs	r3, #0
}
 800e922:	4618      	mov	r0, r3
 800e924:	3710      	adds	r7, #16
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	40010000 	.word	0x40010000
 800e930:	40010400 	.word	0x40010400

0800e934 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b086      	sub	sp, #24
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d101      	bne.n	800e948 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e944:	2301      	movs	r3, #1
 800e946:	e083      	b.n	800ea50 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	2b00      	cmp	r3, #0
 800e952:	d106      	bne.n	800e962 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7f8 fbf1 	bl	8007144 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2202      	movs	r2, #2
 800e966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	689b      	ldr	r3, [r3, #8]
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	6812      	ldr	r2, [r2, #0]
 800e974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e978:	f023 0307 	bic.w	r3, r3, #7
 800e97c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681a      	ldr	r2, [r3, #0]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	3304      	adds	r3, #4
 800e986:	4619      	mov	r1, r3
 800e988:	4610      	mov	r0, r2
 800e98a:	f000 fa93 	bl	800eeb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	699b      	ldr	r3, [r3, #24]
 800e99c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	6a1b      	ldr	r3, [r3, #32]
 800e9a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	697a      	ldr	r2, [r7, #20]
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9b6:	f023 0303 	bic.w	r3, r3, #3
 800e9ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	689a      	ldr	r2, [r3, #8]
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	699b      	ldr	r3, [r3, #24]
 800e9c4:	021b      	lsls	r3, r3, #8
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	693a      	ldr	r2, [r7, #16]
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e9d4:	f023 030c 	bic.w	r3, r3, #12
 800e9d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e9e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e9e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	68da      	ldr	r2, [r3, #12]
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	69db      	ldr	r3, [r3, #28]
 800e9ee:	021b      	lsls	r3, r3, #8
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	693a      	ldr	r2, [r7, #16]
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	691b      	ldr	r3, [r3, #16]
 800e9fc:	011a      	lsls	r2, r3, #4
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	6a1b      	ldr	r3, [r3, #32]
 800ea02:	031b      	lsls	r3, r3, #12
 800ea04:	4313      	orrs	r3, r2
 800ea06:	693a      	ldr	r2, [r7, #16]
 800ea08:	4313      	orrs	r3, r2
 800ea0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ea12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ea1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	695b      	ldr	r3, [r3, #20]
 800ea24:	011b      	lsls	r3, r3, #4
 800ea26:	4313      	orrs	r3, r2
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	697a      	ldr	r2, [r7, #20]
 800ea34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	693a      	ldr	r2, [r7, #16]
 800ea3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	68fa      	ldr	r2, [r7, #12]
 800ea44:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2201      	movs	r2, #1
 800ea4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3718      	adds	r7, #24
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d002      	beq.n	800ea6e <HAL_TIM_Encoder_Start+0x16>
 800ea68:	2b04      	cmp	r3, #4
 800ea6a:	d008      	beq.n	800ea7e <HAL_TIM_Encoder_Start+0x26>
 800ea6c:	e00f      	b.n	800ea8e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2201      	movs	r2, #1
 800ea74:	2100      	movs	r1, #0
 800ea76:	4618      	mov	r0, r3
 800ea78:	f000 fc6c 	bl	800f354 <TIM_CCxChannelCmd>
      break;
 800ea7c:	e016      	b.n	800eaac <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2201      	movs	r2, #1
 800ea84:	2104      	movs	r1, #4
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 fc64 	bl	800f354 <TIM_CCxChannelCmd>
      break;
 800ea8c:	e00e      	b.n	800eaac <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2201      	movs	r2, #1
 800ea94:	2100      	movs	r1, #0
 800ea96:	4618      	mov	r0, r3
 800ea98:	f000 fc5c 	bl	800f354 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	2104      	movs	r1, #4
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f000 fc55 	bl	800f354 <TIM_CCxChannelCmd>
      break;
 800eaaa:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	681a      	ldr	r2, [r3, #0]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f042 0201 	orr.w	r2, r2, #1
 800eaba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3708      	adds	r7, #8
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b082      	sub	sp, #8
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	691b      	ldr	r3, [r3, #16]
 800ead4:	f003 0302 	and.w	r3, r3, #2
 800ead8:	2b02      	cmp	r3, #2
 800eada:	d122      	bne.n	800eb22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	f003 0302 	and.w	r3, r3, #2
 800eae6:	2b02      	cmp	r3, #2
 800eae8:	d11b      	bne.n	800eb22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f06f 0202 	mvn.w	r2, #2
 800eaf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	699b      	ldr	r3, [r3, #24]
 800eb00:	f003 0303 	and.w	r3, r3, #3
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d003      	beq.n	800eb10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 f9b5 	bl	800ee78 <HAL_TIM_IC_CaptureCallback>
 800eb0e:	e005      	b.n	800eb1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 f9a7 	bl	800ee64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f000 f9b8 	bl	800ee8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	691b      	ldr	r3, [r3, #16]
 800eb28:	f003 0304 	and.w	r3, r3, #4
 800eb2c:	2b04      	cmp	r3, #4
 800eb2e:	d122      	bne.n	800eb76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	f003 0304 	and.w	r3, r3, #4
 800eb3a:	2b04      	cmp	r3, #4
 800eb3c:	d11b      	bne.n	800eb76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f06f 0204 	mvn.w	r2, #4
 800eb46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2202      	movs	r2, #2
 800eb4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	699b      	ldr	r3, [r3, #24]
 800eb54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d003      	beq.n	800eb64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 f98b 	bl	800ee78 <HAL_TIM_IC_CaptureCallback>
 800eb62:	e005      	b.n	800eb70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 f97d 	bl	800ee64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 f98e 	bl	800ee8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2200      	movs	r2, #0
 800eb74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	f003 0308 	and.w	r3, r3, #8
 800eb80:	2b08      	cmp	r3, #8
 800eb82:	d122      	bne.n	800ebca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	f003 0308 	and.w	r3, r3, #8
 800eb8e:	2b08      	cmp	r3, #8
 800eb90:	d11b      	bne.n	800ebca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f06f 0208 	mvn.w	r2, #8
 800eb9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2204      	movs	r2, #4
 800eba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	69db      	ldr	r3, [r3, #28]
 800eba8:	f003 0303 	and.w	r3, r3, #3
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d003      	beq.n	800ebb8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 f961 	bl	800ee78 <HAL_TIM_IC_CaptureCallback>
 800ebb6:	e005      	b.n	800ebc4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 f953 	bl	800ee64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 f964 	bl	800ee8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	691b      	ldr	r3, [r3, #16]
 800ebd0:	f003 0310 	and.w	r3, r3, #16
 800ebd4:	2b10      	cmp	r3, #16
 800ebd6:	d122      	bne.n	800ec1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	f003 0310 	and.w	r3, r3, #16
 800ebe2:	2b10      	cmp	r3, #16
 800ebe4:	d11b      	bne.n	800ec1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f06f 0210 	mvn.w	r2, #16
 800ebee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2208      	movs	r2, #8
 800ebf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	69db      	ldr	r3, [r3, #28]
 800ebfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d003      	beq.n	800ec0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 f937 	bl	800ee78 <HAL_TIM_IC_CaptureCallback>
 800ec0a:	e005      	b.n	800ec18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 f929 	bl	800ee64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 f93a 	bl	800ee8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	691b      	ldr	r3, [r3, #16]
 800ec24:	f003 0301 	and.w	r3, r3, #1
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d10e      	bne.n	800ec4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	68db      	ldr	r3, [r3, #12]
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d107      	bne.n	800ec4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f06f 0201 	mvn.w	r2, #1
 800ec42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f7f6 ff67 	bl	8005b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	691b      	ldr	r3, [r3, #16]
 800ec50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec54:	2b80      	cmp	r3, #128	; 0x80
 800ec56:	d10e      	bne.n	800ec76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec62:	2b80      	cmp	r3, #128	; 0x80
 800ec64:	d107      	bne.n	800ec76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ec6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 fc6d 	bl	800f550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	691b      	ldr	r3, [r3, #16]
 800ec7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec80:	2b40      	cmp	r3, #64	; 0x40
 800ec82:	d10e      	bne.n	800eca2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec8e:	2b40      	cmp	r3, #64	; 0x40
 800ec90:	d107      	bne.n	800eca2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f000 f8ff 	bl	800eea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	f003 0320 	and.w	r3, r3, #32
 800ecac:	2b20      	cmp	r3, #32
 800ecae:	d10e      	bne.n	800ecce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	f003 0320 	and.w	r3, r3, #32
 800ecba:	2b20      	cmp	r3, #32
 800ecbc:	d107      	bne.n	800ecce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f06f 0220 	mvn.w	r2, #32
 800ecc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f000 fc37 	bl	800f53c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ecce:	bf00      	nop
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
	...

0800ecd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d101      	bne.n	800ecf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ecee:	2302      	movs	r3, #2
 800ecf0:	e0b4      	b.n	800ee5c <HAL_TIM_PWM_ConfigChannel+0x184>
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2202      	movs	r2, #2
 800ecfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2b0c      	cmp	r3, #12
 800ed06:	f200 809f 	bhi.w	800ee48 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ed0a:	a201      	add	r2, pc, #4	; (adr r2, 800ed10 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ed0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed10:	0800ed45 	.word	0x0800ed45
 800ed14:	0800ee49 	.word	0x0800ee49
 800ed18:	0800ee49 	.word	0x0800ee49
 800ed1c:	0800ee49 	.word	0x0800ee49
 800ed20:	0800ed85 	.word	0x0800ed85
 800ed24:	0800ee49 	.word	0x0800ee49
 800ed28:	0800ee49 	.word	0x0800ee49
 800ed2c:	0800ee49 	.word	0x0800ee49
 800ed30:	0800edc7 	.word	0x0800edc7
 800ed34:	0800ee49 	.word	0x0800ee49
 800ed38:	0800ee49 	.word	0x0800ee49
 800ed3c:	0800ee49 	.word	0x0800ee49
 800ed40:	0800ee07 	.word	0x0800ee07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	68b9      	ldr	r1, [r7, #8]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f000 f952 	bl	800eff4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	699a      	ldr	r2, [r3, #24]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	f042 0208 	orr.w	r2, r2, #8
 800ed5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	699a      	ldr	r2, [r3, #24]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f022 0204 	bic.w	r2, r2, #4
 800ed6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	6999      	ldr	r1, [r3, #24]
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	691a      	ldr	r2, [r3, #16]
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	430a      	orrs	r2, r1
 800ed80:	619a      	str	r2, [r3, #24]
      break;
 800ed82:	e062      	b.n	800ee4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	68b9      	ldr	r1, [r7, #8]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f000 f9a2 	bl	800f0d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	699a      	ldr	r2, [r3, #24]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	699a      	ldr	r2, [r3, #24]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800edae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	6999      	ldr	r1, [r3, #24]
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	691b      	ldr	r3, [r3, #16]
 800edba:	021a      	lsls	r2, r3, #8
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	430a      	orrs	r2, r1
 800edc2:	619a      	str	r2, [r3, #24]
      break;
 800edc4:	e041      	b.n	800ee4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	68b9      	ldr	r1, [r7, #8]
 800edcc:	4618      	mov	r0, r3
 800edce:	f000 f9f7 	bl	800f1c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	69da      	ldr	r2, [r3, #28]
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f042 0208 	orr.w	r2, r2, #8
 800ede0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	69da      	ldr	r2, [r3, #28]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f022 0204 	bic.w	r2, r2, #4
 800edf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	69d9      	ldr	r1, [r3, #28]
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	691a      	ldr	r2, [r3, #16]
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	430a      	orrs	r2, r1
 800ee02:	61da      	str	r2, [r3, #28]
      break;
 800ee04:	e021      	b.n	800ee4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	68b9      	ldr	r1, [r7, #8]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f000 fa4b 	bl	800f2a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	69da      	ldr	r2, [r3, #28]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	69da      	ldr	r2, [r3, #28]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	69d9      	ldr	r1, [r3, #28]
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	691b      	ldr	r3, [r3, #16]
 800ee3c:	021a      	lsls	r2, r3, #8
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	430a      	orrs	r2, r1
 800ee44:	61da      	str	r2, [r3, #28]
      break;
 800ee46:	e000      	b.n	800ee4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800ee48:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	2200      	movs	r2, #0
 800ee56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3710      	adds	r7, #16
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ee6c:	bf00      	nop
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ee80:	bf00      	nop
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr

0800ee8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ee94:	bf00      	nop
 800ee96:	370c      	adds	r7, #12
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eea8:	bf00      	nop
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b085      	sub	sp, #20
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a40      	ldr	r2, [pc, #256]	; (800efc8 <TIM_Base_SetConfig+0x114>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d013      	beq.n	800eef4 <TIM_Base_SetConfig+0x40>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eed2:	d00f      	beq.n	800eef4 <TIM_Base_SetConfig+0x40>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	4a3d      	ldr	r2, [pc, #244]	; (800efcc <TIM_Base_SetConfig+0x118>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d00b      	beq.n	800eef4 <TIM_Base_SetConfig+0x40>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4a3c      	ldr	r2, [pc, #240]	; (800efd0 <TIM_Base_SetConfig+0x11c>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d007      	beq.n	800eef4 <TIM_Base_SetConfig+0x40>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4a3b      	ldr	r2, [pc, #236]	; (800efd4 <TIM_Base_SetConfig+0x120>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d003      	beq.n	800eef4 <TIM_Base_SetConfig+0x40>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	4a3a      	ldr	r2, [pc, #232]	; (800efd8 <TIM_Base_SetConfig+0x124>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d108      	bne.n	800ef06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eefa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	68fa      	ldr	r2, [r7, #12]
 800ef02:	4313      	orrs	r3, r2
 800ef04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4a2f      	ldr	r2, [pc, #188]	; (800efc8 <TIM_Base_SetConfig+0x114>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d02b      	beq.n	800ef66 <TIM_Base_SetConfig+0xb2>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef14:	d027      	beq.n	800ef66 <TIM_Base_SetConfig+0xb2>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a2c      	ldr	r2, [pc, #176]	; (800efcc <TIM_Base_SetConfig+0x118>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d023      	beq.n	800ef66 <TIM_Base_SetConfig+0xb2>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a2b      	ldr	r2, [pc, #172]	; (800efd0 <TIM_Base_SetConfig+0x11c>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d01f      	beq.n	800ef66 <TIM_Base_SetConfig+0xb2>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a2a      	ldr	r2, [pc, #168]	; (800efd4 <TIM_Base_SetConfig+0x120>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d01b      	beq.n	800ef66 <TIM_Base_SetConfig+0xb2>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a29      	ldr	r2, [pc, #164]	; (800efd8 <TIM_Base_SetConfig+0x124>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d017      	beq.n	800ef66 <TIM_Base_SetConfig+0xb2>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4a28      	ldr	r2, [pc, #160]	; (800efdc <TIM_Base_SetConfig+0x128>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d013      	beq.n	800ef66 <TIM_Base_SetConfig+0xb2>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4a27      	ldr	r2, [pc, #156]	; (800efe0 <TIM_Base_SetConfig+0x12c>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d00f      	beq.n	800ef66 <TIM_Base_SetConfig+0xb2>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a26      	ldr	r2, [pc, #152]	; (800efe4 <TIM_Base_SetConfig+0x130>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d00b      	beq.n	800ef66 <TIM_Base_SetConfig+0xb2>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a25      	ldr	r2, [pc, #148]	; (800efe8 <TIM_Base_SetConfig+0x134>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d007      	beq.n	800ef66 <TIM_Base_SetConfig+0xb2>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a24      	ldr	r2, [pc, #144]	; (800efec <TIM_Base_SetConfig+0x138>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d003      	beq.n	800ef66 <TIM_Base_SetConfig+0xb2>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a23      	ldr	r2, [pc, #140]	; (800eff0 <TIM_Base_SetConfig+0x13c>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d108      	bne.n	800ef78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	68db      	ldr	r3, [r3, #12]
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	4313      	orrs	r3, r2
 800ef76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	695b      	ldr	r3, [r3, #20]
 800ef82:	4313      	orrs	r3, r2
 800ef84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	68fa      	ldr	r2, [r7, #12]
 800ef8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	689a      	ldr	r2, [r3, #8]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	4a0a      	ldr	r2, [pc, #40]	; (800efc8 <TIM_Base_SetConfig+0x114>)
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d003      	beq.n	800efac <TIM_Base_SetConfig+0xf8>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	4a0c      	ldr	r2, [pc, #48]	; (800efd8 <TIM_Base_SetConfig+0x124>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d103      	bne.n	800efb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	691a      	ldr	r2, [r3, #16]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2201      	movs	r2, #1
 800efb8:	615a      	str	r2, [r3, #20]
}
 800efba:	bf00      	nop
 800efbc:	3714      	adds	r7, #20
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	40010000 	.word	0x40010000
 800efcc:	40000400 	.word	0x40000400
 800efd0:	40000800 	.word	0x40000800
 800efd4:	40000c00 	.word	0x40000c00
 800efd8:	40010400 	.word	0x40010400
 800efdc:	40014000 	.word	0x40014000
 800efe0:	40014400 	.word	0x40014400
 800efe4:	40014800 	.word	0x40014800
 800efe8:	40001800 	.word	0x40001800
 800efec:	40001c00 	.word	0x40001c00
 800eff0:	40002000 	.word	0x40002000

0800eff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b087      	sub	sp, #28
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6a1b      	ldr	r3, [r3, #32]
 800f002:	f023 0201 	bic.w	r2, r3, #1
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6a1b      	ldr	r3, [r3, #32]
 800f00e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	699b      	ldr	r3, [r3, #24]
 800f01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f023 0303 	bic.w	r3, r3, #3
 800f02a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	4313      	orrs	r3, r2
 800f034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	f023 0302 	bic.w	r3, r3, #2
 800f03c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	689b      	ldr	r3, [r3, #8]
 800f042:	697a      	ldr	r2, [r7, #20]
 800f044:	4313      	orrs	r3, r2
 800f046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4a20      	ldr	r2, [pc, #128]	; (800f0cc <TIM_OC1_SetConfig+0xd8>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d003      	beq.n	800f058 <TIM_OC1_SetConfig+0x64>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	4a1f      	ldr	r2, [pc, #124]	; (800f0d0 <TIM_OC1_SetConfig+0xdc>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d10c      	bne.n	800f072 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	f023 0308 	bic.w	r3, r3, #8
 800f05e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	697a      	ldr	r2, [r7, #20]
 800f066:	4313      	orrs	r3, r2
 800f068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	f023 0304 	bic.w	r3, r3, #4
 800f070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4a15      	ldr	r2, [pc, #84]	; (800f0cc <TIM_OC1_SetConfig+0xd8>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d003      	beq.n	800f082 <TIM_OC1_SetConfig+0x8e>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4a14      	ldr	r2, [pc, #80]	; (800f0d0 <TIM_OC1_SetConfig+0xdc>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d111      	bne.n	800f0a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	695b      	ldr	r3, [r3, #20]
 800f096:	693a      	ldr	r2, [r7, #16]
 800f098:	4313      	orrs	r3, r2
 800f09a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	699b      	ldr	r3, [r3, #24]
 800f0a0:	693a      	ldr	r2, [r7, #16]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	693a      	ldr	r2, [r7, #16]
 800f0aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	68fa      	ldr	r2, [r7, #12]
 800f0b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	685a      	ldr	r2, [r3, #4]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	697a      	ldr	r2, [r7, #20]
 800f0be:	621a      	str	r2, [r3, #32]
}
 800f0c0:	bf00      	nop
 800f0c2:	371c      	adds	r7, #28
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr
 800f0cc:	40010000 	.word	0x40010000
 800f0d0:	40010400 	.word	0x40010400

0800f0d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b087      	sub	sp, #28
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6a1b      	ldr	r3, [r3, #32]
 800f0e2:	f023 0210 	bic.w	r2, r3, #16
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a1b      	ldr	r3, [r3, #32]
 800f0ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	699b      	ldr	r3, [r3, #24]
 800f0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f10a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	021b      	lsls	r3, r3, #8
 800f112:	68fa      	ldr	r2, [r7, #12]
 800f114:	4313      	orrs	r3, r2
 800f116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	f023 0320 	bic.w	r3, r3, #32
 800f11e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	011b      	lsls	r3, r3, #4
 800f126:	697a      	ldr	r2, [r7, #20]
 800f128:	4313      	orrs	r3, r2
 800f12a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	4a22      	ldr	r2, [pc, #136]	; (800f1b8 <TIM_OC2_SetConfig+0xe4>)
 800f130:	4293      	cmp	r3, r2
 800f132:	d003      	beq.n	800f13c <TIM_OC2_SetConfig+0x68>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4a21      	ldr	r2, [pc, #132]	; (800f1bc <TIM_OC2_SetConfig+0xe8>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d10d      	bne.n	800f158 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	011b      	lsls	r3, r3, #4
 800f14a:	697a      	ldr	r2, [r7, #20]
 800f14c:	4313      	orrs	r3, r2
 800f14e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4a17      	ldr	r2, [pc, #92]	; (800f1b8 <TIM_OC2_SetConfig+0xe4>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d003      	beq.n	800f168 <TIM_OC2_SetConfig+0x94>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	4a16      	ldr	r2, [pc, #88]	; (800f1bc <TIM_OC2_SetConfig+0xe8>)
 800f164:	4293      	cmp	r3, r2
 800f166:	d113      	bne.n	800f190 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f16e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	695b      	ldr	r3, [r3, #20]
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	693a      	ldr	r2, [r7, #16]
 800f180:	4313      	orrs	r3, r2
 800f182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	699b      	ldr	r3, [r3, #24]
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	4313      	orrs	r3, r2
 800f18e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	693a      	ldr	r2, [r7, #16]
 800f194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	685a      	ldr	r2, [r3, #4]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	697a      	ldr	r2, [r7, #20]
 800f1a8:	621a      	str	r2, [r3, #32]
}
 800f1aa:	bf00      	nop
 800f1ac:	371c      	adds	r7, #28
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr
 800f1b6:	bf00      	nop
 800f1b8:	40010000 	.word	0x40010000
 800f1bc:	40010400 	.word	0x40010400

0800f1c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b087      	sub	sp, #28
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6a1b      	ldr	r3, [r3, #32]
 800f1ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6a1b      	ldr	r3, [r3, #32]
 800f1da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	69db      	ldr	r3, [r3, #28]
 800f1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f023 0303 	bic.w	r3, r3, #3
 800f1f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	68fa      	ldr	r2, [r7, #12]
 800f1fe:	4313      	orrs	r3, r2
 800f200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	689b      	ldr	r3, [r3, #8]
 800f20e:	021b      	lsls	r3, r3, #8
 800f210:	697a      	ldr	r2, [r7, #20]
 800f212:	4313      	orrs	r3, r2
 800f214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	4a21      	ldr	r2, [pc, #132]	; (800f2a0 <TIM_OC3_SetConfig+0xe0>)
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d003      	beq.n	800f226 <TIM_OC3_SetConfig+0x66>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	4a20      	ldr	r2, [pc, #128]	; (800f2a4 <TIM_OC3_SetConfig+0xe4>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d10d      	bne.n	800f242 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f22c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	021b      	lsls	r3, r3, #8
 800f234:	697a      	ldr	r2, [r7, #20]
 800f236:	4313      	orrs	r3, r2
 800f238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	4a16      	ldr	r2, [pc, #88]	; (800f2a0 <TIM_OC3_SetConfig+0xe0>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d003      	beq.n	800f252 <TIM_OC3_SetConfig+0x92>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4a15      	ldr	r2, [pc, #84]	; (800f2a4 <TIM_OC3_SetConfig+0xe4>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d113      	bne.n	800f27a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	695b      	ldr	r3, [r3, #20]
 800f266:	011b      	lsls	r3, r3, #4
 800f268:	693a      	ldr	r2, [r7, #16]
 800f26a:	4313      	orrs	r3, r2
 800f26c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	699b      	ldr	r3, [r3, #24]
 800f272:	011b      	lsls	r3, r3, #4
 800f274:	693a      	ldr	r2, [r7, #16]
 800f276:	4313      	orrs	r3, r2
 800f278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	693a      	ldr	r2, [r7, #16]
 800f27e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	68fa      	ldr	r2, [r7, #12]
 800f284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	685a      	ldr	r2, [r3, #4]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	697a      	ldr	r2, [r7, #20]
 800f292:	621a      	str	r2, [r3, #32]
}
 800f294:	bf00      	nop
 800f296:	371c      	adds	r7, #28
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr
 800f2a0:	40010000 	.word	0x40010000
 800f2a4:	40010400 	.word	0x40010400

0800f2a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b087      	sub	sp, #28
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6a1b      	ldr	r3, [r3, #32]
 800f2b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a1b      	ldr	r3, [r3, #32]
 800f2c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	69db      	ldr	r3, [r3, #28]
 800f2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f2de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	021b      	lsls	r3, r3, #8
 800f2e6:	68fa      	ldr	r2, [r7, #12]
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	031b      	lsls	r3, r3, #12
 800f2fa:	693a      	ldr	r2, [r7, #16]
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	4a12      	ldr	r2, [pc, #72]	; (800f34c <TIM_OC4_SetConfig+0xa4>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d003      	beq.n	800f310 <TIM_OC4_SetConfig+0x68>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4a11      	ldr	r2, [pc, #68]	; (800f350 <TIM_OC4_SetConfig+0xa8>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d109      	bne.n	800f324 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f310:	697b      	ldr	r3, [r7, #20]
 800f312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	695b      	ldr	r3, [r3, #20]
 800f31c:	019b      	lsls	r3, r3, #6
 800f31e:	697a      	ldr	r2, [r7, #20]
 800f320:	4313      	orrs	r3, r2
 800f322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	697a      	ldr	r2, [r7, #20]
 800f328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	68fa      	ldr	r2, [r7, #12]
 800f32e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	685a      	ldr	r2, [r3, #4]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	693a      	ldr	r2, [r7, #16]
 800f33c:	621a      	str	r2, [r3, #32]
}
 800f33e:	bf00      	nop
 800f340:	371c      	adds	r7, #28
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop
 800f34c:	40010000 	.word	0x40010000
 800f350:	40010400 	.word	0x40010400

0800f354 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f354:	b480      	push	{r7}
 800f356:	b087      	sub	sp, #28
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	f003 031f 	and.w	r3, r3, #31
 800f366:	2201      	movs	r2, #1
 800f368:	fa02 f303 	lsl.w	r3, r2, r3
 800f36c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6a1a      	ldr	r2, [r3, #32]
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	43db      	mvns	r3, r3
 800f376:	401a      	ands	r2, r3
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6a1a      	ldr	r2, [r3, #32]
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	f003 031f 	and.w	r3, r3, #31
 800f386:	6879      	ldr	r1, [r7, #4]
 800f388:	fa01 f303 	lsl.w	r3, r1, r3
 800f38c:	431a      	orrs	r2, r3
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	621a      	str	r2, [r3, #32]
}
 800f392:	bf00      	nop
 800f394:	371c      	adds	r7, #28
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
	...

0800f3a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b085      	sub	sp, #20
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d101      	bne.n	800f3b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f3b4:	2302      	movs	r3, #2
 800f3b6:	e05a      	b.n	800f46e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2202      	movs	r2, #2
 800f3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	689b      	ldr	r3, [r3, #8]
 800f3d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	68fa      	ldr	r2, [r7, #12]
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	68fa      	ldr	r2, [r7, #12]
 800f3f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	4a21      	ldr	r2, [pc, #132]	; (800f47c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d022      	beq.n	800f442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f404:	d01d      	beq.n	800f442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4a1d      	ldr	r2, [pc, #116]	; (800f480 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d018      	beq.n	800f442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	4a1b      	ldr	r2, [pc, #108]	; (800f484 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f416:	4293      	cmp	r3, r2
 800f418:	d013      	beq.n	800f442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	4a1a      	ldr	r2, [pc, #104]	; (800f488 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d00e      	beq.n	800f442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4a18      	ldr	r2, [pc, #96]	; (800f48c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d009      	beq.n	800f442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	4a17      	ldr	r2, [pc, #92]	; (800f490 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d004      	beq.n	800f442 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4a15      	ldr	r2, [pc, #84]	; (800f494 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f43e:	4293      	cmp	r3, r2
 800f440:	d10c      	bne.n	800f45c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	68ba      	ldr	r2, [r7, #8]
 800f450:	4313      	orrs	r3, r2
 800f452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	68ba      	ldr	r2, [r7, #8]
 800f45a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2201      	movs	r2, #1
 800f460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2200      	movs	r2, #0
 800f468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3714      	adds	r7, #20
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	40010000 	.word	0x40010000
 800f480:	40000400 	.word	0x40000400
 800f484:	40000800 	.word	0x40000800
 800f488:	40000c00 	.word	0x40000c00
 800f48c:	40010400 	.word	0x40010400
 800f490:	40014000 	.word	0x40014000
 800f494:	40001800 	.word	0x40001800

0800f498 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f498:	b480      	push	{r7}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d101      	bne.n	800f4b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f4b0:	2302      	movs	r3, #2
 800f4b2:	e03d      	b.n	800f530 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	689b      	ldr	r3, [r3, #8]
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	4313      	orrs	r3, r2
 800f4e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4313      	orrs	r3, r2
 800f4f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	691b      	ldr	r3, [r3, #16]
 800f4fe:	4313      	orrs	r3, r2
 800f500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	695b      	ldr	r3, [r3, #20]
 800f50c:	4313      	orrs	r3, r2
 800f50e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	69db      	ldr	r3, [r3, #28]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2200      	movs	r2, #0
 800f52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f52e:	2300      	movs	r3, #0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3714      	adds	r7, #20
 800f534:	46bd      	mov	sp, r7
 800f536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53a:	4770      	bx	lr

0800f53c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b083      	sub	sp, #12
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f544:	bf00      	nop
 800f546:	370c      	adds	r7, #12
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr

0800f550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f550:	b480      	push	{r7}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f558:	bf00      	nop
 800f55a:	370c      	adds	r7, #12
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d101      	bne.n	800f576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f572:	2301      	movs	r3, #1
 800f574:	e03f      	b.n	800f5f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d106      	bne.n	800f590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f7f7 ff04 	bl	8007398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2224      	movs	r2, #36	; 0x24
 800f594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	68da      	ldr	r2, [r3, #12]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f5a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f000 f829 	bl	800f600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	691a      	ldr	r2, [r3, #16]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f5bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	695a      	ldr	r2, [r3, #20]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f5cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	68da      	ldr	r2, [r3, #12]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f5dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2220      	movs	r2, #32
 800f5e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2220      	movs	r2, #32
 800f5f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
	...

0800f600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f604:	b085      	sub	sp, #20
 800f606:	af00      	add	r7, sp, #0
 800f608:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	691b      	ldr	r3, [r3, #16]
 800f610:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	68da      	ldr	r2, [r3, #12]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	430a      	orrs	r2, r1
 800f61e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	689a      	ldr	r2, [r3, #8]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	691b      	ldr	r3, [r3, #16]
 800f628:	431a      	orrs	r2, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	695b      	ldr	r3, [r3, #20]
 800f62e:	431a      	orrs	r2, r3
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	69db      	ldr	r3, [r3, #28]
 800f634:	4313      	orrs	r3, r2
 800f636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f642:	f023 030c 	bic.w	r3, r3, #12
 800f646:	687a      	ldr	r2, [r7, #4]
 800f648:	6812      	ldr	r2, [r2, #0]
 800f64a:	68f9      	ldr	r1, [r7, #12]
 800f64c:	430b      	orrs	r3, r1
 800f64e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	695b      	ldr	r3, [r3, #20]
 800f656:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	699a      	ldr	r2, [r3, #24]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	430a      	orrs	r2, r1
 800f664:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	69db      	ldr	r3, [r3, #28]
 800f66a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f66e:	f040 818b 	bne.w	800f988 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4ac1      	ldr	r2, [pc, #772]	; (800f97c <UART_SetConfig+0x37c>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d005      	beq.n	800f688 <UART_SetConfig+0x88>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4abf      	ldr	r2, [pc, #764]	; (800f980 <UART_SetConfig+0x380>)
 800f682:	4293      	cmp	r3, r2
 800f684:	f040 80bd 	bne.w	800f802 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f688:	f7fc fbcc 	bl	800be24 <HAL_RCC_GetPCLK2Freq>
 800f68c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	461d      	mov	r5, r3
 800f692:	f04f 0600 	mov.w	r6, #0
 800f696:	46a8      	mov	r8, r5
 800f698:	46b1      	mov	r9, r6
 800f69a:	eb18 0308 	adds.w	r3, r8, r8
 800f69e:	eb49 0409 	adc.w	r4, r9, r9
 800f6a2:	4698      	mov	r8, r3
 800f6a4:	46a1      	mov	r9, r4
 800f6a6:	eb18 0805 	adds.w	r8, r8, r5
 800f6aa:	eb49 0906 	adc.w	r9, r9, r6
 800f6ae:	f04f 0100 	mov.w	r1, #0
 800f6b2:	f04f 0200 	mov.w	r2, #0
 800f6b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f6ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f6be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f6c2:	4688      	mov	r8, r1
 800f6c4:	4691      	mov	r9, r2
 800f6c6:	eb18 0005 	adds.w	r0, r8, r5
 800f6ca:	eb49 0106 	adc.w	r1, r9, r6
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	461d      	mov	r5, r3
 800f6d4:	f04f 0600 	mov.w	r6, #0
 800f6d8:	196b      	adds	r3, r5, r5
 800f6da:	eb46 0406 	adc.w	r4, r6, r6
 800f6de:	461a      	mov	r2, r3
 800f6e0:	4623      	mov	r3, r4
 800f6e2:	f7f1 fae9 	bl	8000cb8 <__aeabi_uldivmod>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	460c      	mov	r4, r1
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	4ba5      	ldr	r3, [pc, #660]	; (800f984 <UART_SetConfig+0x384>)
 800f6ee:	fba3 2302 	umull	r2, r3, r3, r2
 800f6f2:	095b      	lsrs	r3, r3, #5
 800f6f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	461d      	mov	r5, r3
 800f6fc:	f04f 0600 	mov.w	r6, #0
 800f700:	46a9      	mov	r9, r5
 800f702:	46b2      	mov	sl, r6
 800f704:	eb19 0309 	adds.w	r3, r9, r9
 800f708:	eb4a 040a 	adc.w	r4, sl, sl
 800f70c:	4699      	mov	r9, r3
 800f70e:	46a2      	mov	sl, r4
 800f710:	eb19 0905 	adds.w	r9, r9, r5
 800f714:	eb4a 0a06 	adc.w	sl, sl, r6
 800f718:	f04f 0100 	mov.w	r1, #0
 800f71c:	f04f 0200 	mov.w	r2, #0
 800f720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f724:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f728:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f72c:	4689      	mov	r9, r1
 800f72e:	4692      	mov	sl, r2
 800f730:	eb19 0005 	adds.w	r0, r9, r5
 800f734:	eb4a 0106 	adc.w	r1, sl, r6
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	461d      	mov	r5, r3
 800f73e:	f04f 0600 	mov.w	r6, #0
 800f742:	196b      	adds	r3, r5, r5
 800f744:	eb46 0406 	adc.w	r4, r6, r6
 800f748:	461a      	mov	r2, r3
 800f74a:	4623      	mov	r3, r4
 800f74c:	f7f1 fab4 	bl	8000cb8 <__aeabi_uldivmod>
 800f750:	4603      	mov	r3, r0
 800f752:	460c      	mov	r4, r1
 800f754:	461a      	mov	r2, r3
 800f756:	4b8b      	ldr	r3, [pc, #556]	; (800f984 <UART_SetConfig+0x384>)
 800f758:	fba3 1302 	umull	r1, r3, r3, r2
 800f75c:	095b      	lsrs	r3, r3, #5
 800f75e:	2164      	movs	r1, #100	; 0x64
 800f760:	fb01 f303 	mul.w	r3, r1, r3
 800f764:	1ad3      	subs	r3, r2, r3
 800f766:	00db      	lsls	r3, r3, #3
 800f768:	3332      	adds	r3, #50	; 0x32
 800f76a:	4a86      	ldr	r2, [pc, #536]	; (800f984 <UART_SetConfig+0x384>)
 800f76c:	fba2 2303 	umull	r2, r3, r2, r3
 800f770:	095b      	lsrs	r3, r3, #5
 800f772:	005b      	lsls	r3, r3, #1
 800f774:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f778:	4498      	add	r8, r3
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	461d      	mov	r5, r3
 800f77e:	f04f 0600 	mov.w	r6, #0
 800f782:	46a9      	mov	r9, r5
 800f784:	46b2      	mov	sl, r6
 800f786:	eb19 0309 	adds.w	r3, r9, r9
 800f78a:	eb4a 040a 	adc.w	r4, sl, sl
 800f78e:	4699      	mov	r9, r3
 800f790:	46a2      	mov	sl, r4
 800f792:	eb19 0905 	adds.w	r9, r9, r5
 800f796:	eb4a 0a06 	adc.w	sl, sl, r6
 800f79a:	f04f 0100 	mov.w	r1, #0
 800f79e:	f04f 0200 	mov.w	r2, #0
 800f7a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f7a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f7aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f7ae:	4689      	mov	r9, r1
 800f7b0:	4692      	mov	sl, r2
 800f7b2:	eb19 0005 	adds.w	r0, r9, r5
 800f7b6:	eb4a 0106 	adc.w	r1, sl, r6
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	461d      	mov	r5, r3
 800f7c0:	f04f 0600 	mov.w	r6, #0
 800f7c4:	196b      	adds	r3, r5, r5
 800f7c6:	eb46 0406 	adc.w	r4, r6, r6
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	4623      	mov	r3, r4
 800f7ce:	f7f1 fa73 	bl	8000cb8 <__aeabi_uldivmod>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	460c      	mov	r4, r1
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	4b6a      	ldr	r3, [pc, #424]	; (800f984 <UART_SetConfig+0x384>)
 800f7da:	fba3 1302 	umull	r1, r3, r3, r2
 800f7de:	095b      	lsrs	r3, r3, #5
 800f7e0:	2164      	movs	r1, #100	; 0x64
 800f7e2:	fb01 f303 	mul.w	r3, r1, r3
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	00db      	lsls	r3, r3, #3
 800f7ea:	3332      	adds	r3, #50	; 0x32
 800f7ec:	4a65      	ldr	r2, [pc, #404]	; (800f984 <UART_SetConfig+0x384>)
 800f7ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f7f2:	095b      	lsrs	r3, r3, #5
 800f7f4:	f003 0207 	and.w	r2, r3, #7
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4442      	add	r2, r8
 800f7fe:	609a      	str	r2, [r3, #8]
 800f800:	e26f      	b.n	800fce2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f802:	f7fc fafb 	bl	800bdfc <HAL_RCC_GetPCLK1Freq>
 800f806:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	461d      	mov	r5, r3
 800f80c:	f04f 0600 	mov.w	r6, #0
 800f810:	46a8      	mov	r8, r5
 800f812:	46b1      	mov	r9, r6
 800f814:	eb18 0308 	adds.w	r3, r8, r8
 800f818:	eb49 0409 	adc.w	r4, r9, r9
 800f81c:	4698      	mov	r8, r3
 800f81e:	46a1      	mov	r9, r4
 800f820:	eb18 0805 	adds.w	r8, r8, r5
 800f824:	eb49 0906 	adc.w	r9, r9, r6
 800f828:	f04f 0100 	mov.w	r1, #0
 800f82c:	f04f 0200 	mov.w	r2, #0
 800f830:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f834:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f838:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f83c:	4688      	mov	r8, r1
 800f83e:	4691      	mov	r9, r2
 800f840:	eb18 0005 	adds.w	r0, r8, r5
 800f844:	eb49 0106 	adc.w	r1, r9, r6
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	461d      	mov	r5, r3
 800f84e:	f04f 0600 	mov.w	r6, #0
 800f852:	196b      	adds	r3, r5, r5
 800f854:	eb46 0406 	adc.w	r4, r6, r6
 800f858:	461a      	mov	r2, r3
 800f85a:	4623      	mov	r3, r4
 800f85c:	f7f1 fa2c 	bl	8000cb8 <__aeabi_uldivmod>
 800f860:	4603      	mov	r3, r0
 800f862:	460c      	mov	r4, r1
 800f864:	461a      	mov	r2, r3
 800f866:	4b47      	ldr	r3, [pc, #284]	; (800f984 <UART_SetConfig+0x384>)
 800f868:	fba3 2302 	umull	r2, r3, r3, r2
 800f86c:	095b      	lsrs	r3, r3, #5
 800f86e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	461d      	mov	r5, r3
 800f876:	f04f 0600 	mov.w	r6, #0
 800f87a:	46a9      	mov	r9, r5
 800f87c:	46b2      	mov	sl, r6
 800f87e:	eb19 0309 	adds.w	r3, r9, r9
 800f882:	eb4a 040a 	adc.w	r4, sl, sl
 800f886:	4699      	mov	r9, r3
 800f888:	46a2      	mov	sl, r4
 800f88a:	eb19 0905 	adds.w	r9, r9, r5
 800f88e:	eb4a 0a06 	adc.w	sl, sl, r6
 800f892:	f04f 0100 	mov.w	r1, #0
 800f896:	f04f 0200 	mov.w	r2, #0
 800f89a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f89e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f8a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f8a6:	4689      	mov	r9, r1
 800f8a8:	4692      	mov	sl, r2
 800f8aa:	eb19 0005 	adds.w	r0, r9, r5
 800f8ae:	eb4a 0106 	adc.w	r1, sl, r6
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	461d      	mov	r5, r3
 800f8b8:	f04f 0600 	mov.w	r6, #0
 800f8bc:	196b      	adds	r3, r5, r5
 800f8be:	eb46 0406 	adc.w	r4, r6, r6
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	4623      	mov	r3, r4
 800f8c6:	f7f1 f9f7 	bl	8000cb8 <__aeabi_uldivmod>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	460c      	mov	r4, r1
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	4b2c      	ldr	r3, [pc, #176]	; (800f984 <UART_SetConfig+0x384>)
 800f8d2:	fba3 1302 	umull	r1, r3, r3, r2
 800f8d6:	095b      	lsrs	r3, r3, #5
 800f8d8:	2164      	movs	r1, #100	; 0x64
 800f8da:	fb01 f303 	mul.w	r3, r1, r3
 800f8de:	1ad3      	subs	r3, r2, r3
 800f8e0:	00db      	lsls	r3, r3, #3
 800f8e2:	3332      	adds	r3, #50	; 0x32
 800f8e4:	4a27      	ldr	r2, [pc, #156]	; (800f984 <UART_SetConfig+0x384>)
 800f8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8ea:	095b      	lsrs	r3, r3, #5
 800f8ec:	005b      	lsls	r3, r3, #1
 800f8ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f8f2:	4498      	add	r8, r3
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	461d      	mov	r5, r3
 800f8f8:	f04f 0600 	mov.w	r6, #0
 800f8fc:	46a9      	mov	r9, r5
 800f8fe:	46b2      	mov	sl, r6
 800f900:	eb19 0309 	adds.w	r3, r9, r9
 800f904:	eb4a 040a 	adc.w	r4, sl, sl
 800f908:	4699      	mov	r9, r3
 800f90a:	46a2      	mov	sl, r4
 800f90c:	eb19 0905 	adds.w	r9, r9, r5
 800f910:	eb4a 0a06 	adc.w	sl, sl, r6
 800f914:	f04f 0100 	mov.w	r1, #0
 800f918:	f04f 0200 	mov.w	r2, #0
 800f91c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f920:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f924:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f928:	4689      	mov	r9, r1
 800f92a:	4692      	mov	sl, r2
 800f92c:	eb19 0005 	adds.w	r0, r9, r5
 800f930:	eb4a 0106 	adc.w	r1, sl, r6
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	461d      	mov	r5, r3
 800f93a:	f04f 0600 	mov.w	r6, #0
 800f93e:	196b      	adds	r3, r5, r5
 800f940:	eb46 0406 	adc.w	r4, r6, r6
 800f944:	461a      	mov	r2, r3
 800f946:	4623      	mov	r3, r4
 800f948:	f7f1 f9b6 	bl	8000cb8 <__aeabi_uldivmod>
 800f94c:	4603      	mov	r3, r0
 800f94e:	460c      	mov	r4, r1
 800f950:	461a      	mov	r2, r3
 800f952:	4b0c      	ldr	r3, [pc, #48]	; (800f984 <UART_SetConfig+0x384>)
 800f954:	fba3 1302 	umull	r1, r3, r3, r2
 800f958:	095b      	lsrs	r3, r3, #5
 800f95a:	2164      	movs	r1, #100	; 0x64
 800f95c:	fb01 f303 	mul.w	r3, r1, r3
 800f960:	1ad3      	subs	r3, r2, r3
 800f962:	00db      	lsls	r3, r3, #3
 800f964:	3332      	adds	r3, #50	; 0x32
 800f966:	4a07      	ldr	r2, [pc, #28]	; (800f984 <UART_SetConfig+0x384>)
 800f968:	fba2 2303 	umull	r2, r3, r2, r3
 800f96c:	095b      	lsrs	r3, r3, #5
 800f96e:	f003 0207 	and.w	r2, r3, #7
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	4442      	add	r2, r8
 800f978:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f97a:	e1b2      	b.n	800fce2 <UART_SetConfig+0x6e2>
 800f97c:	40011000 	.word	0x40011000
 800f980:	40011400 	.word	0x40011400
 800f984:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	4ad7      	ldr	r2, [pc, #860]	; (800fcec <UART_SetConfig+0x6ec>)
 800f98e:	4293      	cmp	r3, r2
 800f990:	d005      	beq.n	800f99e <UART_SetConfig+0x39e>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4ad6      	ldr	r2, [pc, #856]	; (800fcf0 <UART_SetConfig+0x6f0>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	f040 80d1 	bne.w	800fb40 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f99e:	f7fc fa41 	bl	800be24 <HAL_RCC_GetPCLK2Freq>
 800f9a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	469a      	mov	sl, r3
 800f9a8:	f04f 0b00 	mov.w	fp, #0
 800f9ac:	46d0      	mov	r8, sl
 800f9ae:	46d9      	mov	r9, fp
 800f9b0:	eb18 0308 	adds.w	r3, r8, r8
 800f9b4:	eb49 0409 	adc.w	r4, r9, r9
 800f9b8:	4698      	mov	r8, r3
 800f9ba:	46a1      	mov	r9, r4
 800f9bc:	eb18 080a 	adds.w	r8, r8, sl
 800f9c0:	eb49 090b 	adc.w	r9, r9, fp
 800f9c4:	f04f 0100 	mov.w	r1, #0
 800f9c8:	f04f 0200 	mov.w	r2, #0
 800f9cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f9d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f9d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f9d8:	4688      	mov	r8, r1
 800f9da:	4691      	mov	r9, r2
 800f9dc:	eb1a 0508 	adds.w	r5, sl, r8
 800f9e0:	eb4b 0609 	adc.w	r6, fp, r9
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	f04f 0200 	mov.w	r2, #0
 800f9ee:	f04f 0300 	mov.w	r3, #0
 800f9f2:	f04f 0400 	mov.w	r4, #0
 800f9f6:	0094      	lsls	r4, r2, #2
 800f9f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f9fc:	008b      	lsls	r3, r1, #2
 800f9fe:	461a      	mov	r2, r3
 800fa00:	4623      	mov	r3, r4
 800fa02:	4628      	mov	r0, r5
 800fa04:	4631      	mov	r1, r6
 800fa06:	f7f1 f957 	bl	8000cb8 <__aeabi_uldivmod>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	460c      	mov	r4, r1
 800fa0e:	461a      	mov	r2, r3
 800fa10:	4bb8      	ldr	r3, [pc, #736]	; (800fcf4 <UART_SetConfig+0x6f4>)
 800fa12:	fba3 2302 	umull	r2, r3, r3, r2
 800fa16:	095b      	lsrs	r3, r3, #5
 800fa18:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	469b      	mov	fp, r3
 800fa20:	f04f 0c00 	mov.w	ip, #0
 800fa24:	46d9      	mov	r9, fp
 800fa26:	46e2      	mov	sl, ip
 800fa28:	eb19 0309 	adds.w	r3, r9, r9
 800fa2c:	eb4a 040a 	adc.w	r4, sl, sl
 800fa30:	4699      	mov	r9, r3
 800fa32:	46a2      	mov	sl, r4
 800fa34:	eb19 090b 	adds.w	r9, r9, fp
 800fa38:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fa3c:	f04f 0100 	mov.w	r1, #0
 800fa40:	f04f 0200 	mov.w	r2, #0
 800fa44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fa48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fa4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fa50:	4689      	mov	r9, r1
 800fa52:	4692      	mov	sl, r2
 800fa54:	eb1b 0509 	adds.w	r5, fp, r9
 800fa58:	eb4c 060a 	adc.w	r6, ip, sl
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	4619      	mov	r1, r3
 800fa62:	f04f 0200 	mov.w	r2, #0
 800fa66:	f04f 0300 	mov.w	r3, #0
 800fa6a:	f04f 0400 	mov.w	r4, #0
 800fa6e:	0094      	lsls	r4, r2, #2
 800fa70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fa74:	008b      	lsls	r3, r1, #2
 800fa76:	461a      	mov	r2, r3
 800fa78:	4623      	mov	r3, r4
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	4631      	mov	r1, r6
 800fa7e:	f7f1 f91b 	bl	8000cb8 <__aeabi_uldivmod>
 800fa82:	4603      	mov	r3, r0
 800fa84:	460c      	mov	r4, r1
 800fa86:	461a      	mov	r2, r3
 800fa88:	4b9a      	ldr	r3, [pc, #616]	; (800fcf4 <UART_SetConfig+0x6f4>)
 800fa8a:	fba3 1302 	umull	r1, r3, r3, r2
 800fa8e:	095b      	lsrs	r3, r3, #5
 800fa90:	2164      	movs	r1, #100	; 0x64
 800fa92:	fb01 f303 	mul.w	r3, r1, r3
 800fa96:	1ad3      	subs	r3, r2, r3
 800fa98:	011b      	lsls	r3, r3, #4
 800fa9a:	3332      	adds	r3, #50	; 0x32
 800fa9c:	4a95      	ldr	r2, [pc, #596]	; (800fcf4 <UART_SetConfig+0x6f4>)
 800fa9e:	fba2 2303 	umull	r2, r3, r2, r3
 800faa2:	095b      	lsrs	r3, r3, #5
 800faa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800faa8:	4498      	add	r8, r3
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	469b      	mov	fp, r3
 800faae:	f04f 0c00 	mov.w	ip, #0
 800fab2:	46d9      	mov	r9, fp
 800fab4:	46e2      	mov	sl, ip
 800fab6:	eb19 0309 	adds.w	r3, r9, r9
 800faba:	eb4a 040a 	adc.w	r4, sl, sl
 800fabe:	4699      	mov	r9, r3
 800fac0:	46a2      	mov	sl, r4
 800fac2:	eb19 090b 	adds.w	r9, r9, fp
 800fac6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800faca:	f04f 0100 	mov.w	r1, #0
 800face:	f04f 0200 	mov.w	r2, #0
 800fad2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fad6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fada:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fade:	4689      	mov	r9, r1
 800fae0:	4692      	mov	sl, r2
 800fae2:	eb1b 0509 	adds.w	r5, fp, r9
 800fae6:	eb4c 060a 	adc.w	r6, ip, sl
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	4619      	mov	r1, r3
 800faf0:	f04f 0200 	mov.w	r2, #0
 800faf4:	f04f 0300 	mov.w	r3, #0
 800faf8:	f04f 0400 	mov.w	r4, #0
 800fafc:	0094      	lsls	r4, r2, #2
 800fafe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fb02:	008b      	lsls	r3, r1, #2
 800fb04:	461a      	mov	r2, r3
 800fb06:	4623      	mov	r3, r4
 800fb08:	4628      	mov	r0, r5
 800fb0a:	4631      	mov	r1, r6
 800fb0c:	f7f1 f8d4 	bl	8000cb8 <__aeabi_uldivmod>
 800fb10:	4603      	mov	r3, r0
 800fb12:	460c      	mov	r4, r1
 800fb14:	461a      	mov	r2, r3
 800fb16:	4b77      	ldr	r3, [pc, #476]	; (800fcf4 <UART_SetConfig+0x6f4>)
 800fb18:	fba3 1302 	umull	r1, r3, r3, r2
 800fb1c:	095b      	lsrs	r3, r3, #5
 800fb1e:	2164      	movs	r1, #100	; 0x64
 800fb20:	fb01 f303 	mul.w	r3, r1, r3
 800fb24:	1ad3      	subs	r3, r2, r3
 800fb26:	011b      	lsls	r3, r3, #4
 800fb28:	3332      	adds	r3, #50	; 0x32
 800fb2a:	4a72      	ldr	r2, [pc, #456]	; (800fcf4 <UART_SetConfig+0x6f4>)
 800fb2c:	fba2 2303 	umull	r2, r3, r2, r3
 800fb30:	095b      	lsrs	r3, r3, #5
 800fb32:	f003 020f 	and.w	r2, r3, #15
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4442      	add	r2, r8
 800fb3c:	609a      	str	r2, [r3, #8]
 800fb3e:	e0d0      	b.n	800fce2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fb40:	f7fc f95c 	bl	800bdfc <HAL_RCC_GetPCLK1Freq>
 800fb44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	469a      	mov	sl, r3
 800fb4a:	f04f 0b00 	mov.w	fp, #0
 800fb4e:	46d0      	mov	r8, sl
 800fb50:	46d9      	mov	r9, fp
 800fb52:	eb18 0308 	adds.w	r3, r8, r8
 800fb56:	eb49 0409 	adc.w	r4, r9, r9
 800fb5a:	4698      	mov	r8, r3
 800fb5c:	46a1      	mov	r9, r4
 800fb5e:	eb18 080a 	adds.w	r8, r8, sl
 800fb62:	eb49 090b 	adc.w	r9, r9, fp
 800fb66:	f04f 0100 	mov.w	r1, #0
 800fb6a:	f04f 0200 	mov.w	r2, #0
 800fb6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fb72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fb76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fb7a:	4688      	mov	r8, r1
 800fb7c:	4691      	mov	r9, r2
 800fb7e:	eb1a 0508 	adds.w	r5, sl, r8
 800fb82:	eb4b 0609 	adc.w	r6, fp, r9
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	f04f 0200 	mov.w	r2, #0
 800fb90:	f04f 0300 	mov.w	r3, #0
 800fb94:	f04f 0400 	mov.w	r4, #0
 800fb98:	0094      	lsls	r4, r2, #2
 800fb9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fb9e:	008b      	lsls	r3, r1, #2
 800fba0:	461a      	mov	r2, r3
 800fba2:	4623      	mov	r3, r4
 800fba4:	4628      	mov	r0, r5
 800fba6:	4631      	mov	r1, r6
 800fba8:	f7f1 f886 	bl	8000cb8 <__aeabi_uldivmod>
 800fbac:	4603      	mov	r3, r0
 800fbae:	460c      	mov	r4, r1
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	4b50      	ldr	r3, [pc, #320]	; (800fcf4 <UART_SetConfig+0x6f4>)
 800fbb4:	fba3 2302 	umull	r2, r3, r3, r2
 800fbb8:	095b      	lsrs	r3, r3, #5
 800fbba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	469b      	mov	fp, r3
 800fbc2:	f04f 0c00 	mov.w	ip, #0
 800fbc6:	46d9      	mov	r9, fp
 800fbc8:	46e2      	mov	sl, ip
 800fbca:	eb19 0309 	adds.w	r3, r9, r9
 800fbce:	eb4a 040a 	adc.w	r4, sl, sl
 800fbd2:	4699      	mov	r9, r3
 800fbd4:	46a2      	mov	sl, r4
 800fbd6:	eb19 090b 	adds.w	r9, r9, fp
 800fbda:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fbde:	f04f 0100 	mov.w	r1, #0
 800fbe2:	f04f 0200 	mov.w	r2, #0
 800fbe6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fbea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fbee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fbf2:	4689      	mov	r9, r1
 800fbf4:	4692      	mov	sl, r2
 800fbf6:	eb1b 0509 	adds.w	r5, fp, r9
 800fbfa:	eb4c 060a 	adc.w	r6, ip, sl
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	4619      	mov	r1, r3
 800fc04:	f04f 0200 	mov.w	r2, #0
 800fc08:	f04f 0300 	mov.w	r3, #0
 800fc0c:	f04f 0400 	mov.w	r4, #0
 800fc10:	0094      	lsls	r4, r2, #2
 800fc12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc16:	008b      	lsls	r3, r1, #2
 800fc18:	461a      	mov	r2, r3
 800fc1a:	4623      	mov	r3, r4
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	4631      	mov	r1, r6
 800fc20:	f7f1 f84a 	bl	8000cb8 <__aeabi_uldivmod>
 800fc24:	4603      	mov	r3, r0
 800fc26:	460c      	mov	r4, r1
 800fc28:	461a      	mov	r2, r3
 800fc2a:	4b32      	ldr	r3, [pc, #200]	; (800fcf4 <UART_SetConfig+0x6f4>)
 800fc2c:	fba3 1302 	umull	r1, r3, r3, r2
 800fc30:	095b      	lsrs	r3, r3, #5
 800fc32:	2164      	movs	r1, #100	; 0x64
 800fc34:	fb01 f303 	mul.w	r3, r1, r3
 800fc38:	1ad3      	subs	r3, r2, r3
 800fc3a:	011b      	lsls	r3, r3, #4
 800fc3c:	3332      	adds	r3, #50	; 0x32
 800fc3e:	4a2d      	ldr	r2, [pc, #180]	; (800fcf4 <UART_SetConfig+0x6f4>)
 800fc40:	fba2 2303 	umull	r2, r3, r2, r3
 800fc44:	095b      	lsrs	r3, r3, #5
 800fc46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc4a:	4498      	add	r8, r3
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	469b      	mov	fp, r3
 800fc50:	f04f 0c00 	mov.w	ip, #0
 800fc54:	46d9      	mov	r9, fp
 800fc56:	46e2      	mov	sl, ip
 800fc58:	eb19 0309 	adds.w	r3, r9, r9
 800fc5c:	eb4a 040a 	adc.w	r4, sl, sl
 800fc60:	4699      	mov	r9, r3
 800fc62:	46a2      	mov	sl, r4
 800fc64:	eb19 090b 	adds.w	r9, r9, fp
 800fc68:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fc6c:	f04f 0100 	mov.w	r1, #0
 800fc70:	f04f 0200 	mov.w	r2, #0
 800fc74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fc7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fc80:	4689      	mov	r9, r1
 800fc82:	4692      	mov	sl, r2
 800fc84:	eb1b 0509 	adds.w	r5, fp, r9
 800fc88:	eb4c 060a 	adc.w	r6, ip, sl
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	4619      	mov	r1, r3
 800fc92:	f04f 0200 	mov.w	r2, #0
 800fc96:	f04f 0300 	mov.w	r3, #0
 800fc9a:	f04f 0400 	mov.w	r4, #0
 800fc9e:	0094      	lsls	r4, r2, #2
 800fca0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fca4:	008b      	lsls	r3, r1, #2
 800fca6:	461a      	mov	r2, r3
 800fca8:	4623      	mov	r3, r4
 800fcaa:	4628      	mov	r0, r5
 800fcac:	4631      	mov	r1, r6
 800fcae:	f7f1 f803 	bl	8000cb8 <__aeabi_uldivmod>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	460c      	mov	r4, r1
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	4b0e      	ldr	r3, [pc, #56]	; (800fcf4 <UART_SetConfig+0x6f4>)
 800fcba:	fba3 1302 	umull	r1, r3, r3, r2
 800fcbe:	095b      	lsrs	r3, r3, #5
 800fcc0:	2164      	movs	r1, #100	; 0x64
 800fcc2:	fb01 f303 	mul.w	r3, r1, r3
 800fcc6:	1ad3      	subs	r3, r2, r3
 800fcc8:	011b      	lsls	r3, r3, #4
 800fcca:	3332      	adds	r3, #50	; 0x32
 800fccc:	4a09      	ldr	r2, [pc, #36]	; (800fcf4 <UART_SetConfig+0x6f4>)
 800fcce:	fba2 2303 	umull	r2, r3, r2, r3
 800fcd2:	095b      	lsrs	r3, r3, #5
 800fcd4:	f003 020f 	and.w	r2, r3, #15
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4442      	add	r2, r8
 800fcde:	609a      	str	r2, [r3, #8]
}
 800fce0:	e7ff      	b.n	800fce2 <UART_SetConfig+0x6e2>
 800fce2:	bf00      	nop
 800fce4:	3714      	adds	r7, #20
 800fce6:	46bd      	mov	sp, r7
 800fce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcec:	40011000 	.word	0x40011000
 800fcf0:	40011400 	.word	0x40011400
 800fcf4:	51eb851f 	.word	0x51eb851f

0800fcf8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800fcf8:	b084      	sub	sp, #16
 800fcfa:	b480      	push	{r7}
 800fcfc:	b085      	sub	sp, #20
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
 800fd02:	f107 001c 	add.w	r0, r7, #28
 800fd06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fd0e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fd10:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fd12:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800fd16:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800fd1a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800fd1e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800fd22:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	4313      	orrs	r3, r2
 800fd28:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800fd32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fd36:	68fa      	ldr	r2, [r7, #12]
 800fd38:	431a      	orrs	r2, r3
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fd3e:	2300      	movs	r3, #0
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3714      	adds	r7, #20
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	b004      	add	sp, #16
 800fd4c:	4770      	bx	lr

0800fd4e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800fd4e:	b480      	push	{r7}
 800fd50:	b083      	sub	sp, #12
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	370c      	adds	r7, #12
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr

0800fd68 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800fd68:	b480      	push	{r7}
 800fd6a:	b083      	sub	sp, #12
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fd7c:	2300      	movs	r3, #0
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	370c      	adds	r7, #12
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr

0800fd8a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800fd8a:	b580      	push	{r7, lr}
 800fd8c:	b082      	sub	sp, #8
 800fd8e:	af00      	add	r7, sp, #0
 800fd90:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2203      	movs	r2, #3
 800fd96:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800fd98:	2002      	movs	r0, #2
 800fd9a:	f7f9 fbdd 	bl	8009558 <HAL_Delay>
  
  return HAL_OK;
 800fd9e:	2300      	movs	r3, #0
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f003 0303 	and.w	r3, r3, #3
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	370c      	adds	r7, #12
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc2:	4770      	bx	lr

0800fdc4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b085      	sub	sp, #20
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fde2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800fde8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800fdee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	68db      	ldr	r3, [r3, #12]
 800fdfa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fdfe:	f023 030f 	bic.w	r3, r3, #15
 800fe02:	68fa      	ldr	r2, [r7, #12]
 800fe04:	431a      	orrs	r2, r3
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800fe0a:	2300      	movs	r3, #0
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3714      	adds	r7, #20
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr

0800fe18 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	691b      	ldr	r3, [r3, #16]
 800fe24:	b2db      	uxtb	r3, r3
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	370c      	adds	r7, #12
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr

0800fe32 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800fe32:	b480      	push	{r7}
 800fe34:	b085      	sub	sp, #20
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	3314      	adds	r3, #20
 800fe40:	461a      	mov	r2, r3
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	4413      	add	r3, r2
 800fe46:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
}  
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3714      	adds	r7, #20
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b085      	sub	sp, #20
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	685a      	ldr	r2, [r3, #4]
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fe7e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800fe84:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800fe8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	4313      	orrs	r3, r2
 800fe90:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe96:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	431a      	orrs	r2, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800fea2:	2300      	movs	r3, #0

}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3714      	adds	r7, #20
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b088      	sub	sp, #32
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800febe:	2310      	movs	r3, #16
 800fec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fec2:	2340      	movs	r3, #64	; 0x40
 800fec4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fec6:	2300      	movs	r3, #0
 800fec8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800feca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fece:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fed0:	f107 0308 	add.w	r3, r7, #8
 800fed4:	4619      	mov	r1, r3
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7ff ff74 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800fedc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fee0:	2110      	movs	r1, #16
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 fa40 	bl	8010368 <SDMMC_GetCmdResp1>
 800fee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800feea:	69fb      	ldr	r3, [r7, #28]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3720      	adds	r7, #32
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b088      	sub	sp, #32
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ff02:	2311      	movs	r3, #17
 800ff04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ff06:	2340      	movs	r3, #64	; 0x40
 800ff08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ff0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ff14:	f107 0308 	add.w	r3, r7, #8
 800ff18:	4619      	mov	r1, r3
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f7ff ff52 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ff20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff24:	2111      	movs	r1, #17
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 fa1e 	bl	8010368 <SDMMC_GetCmdResp1>
 800ff2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff2e:	69fb      	ldr	r3, [r7, #28]
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3720      	adds	r7, #32
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b088      	sub	sp, #32
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ff46:	2312      	movs	r3, #18
 800ff48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ff4a:	2340      	movs	r3, #64	; 0x40
 800ff4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ff52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ff58:	f107 0308 	add.w	r3, r7, #8
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f7ff ff30 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ff64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff68:	2112      	movs	r1, #18
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f9fc 	bl	8010368 <SDMMC_GetCmdResp1>
 800ff70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff72:	69fb      	ldr	r3, [r7, #28]
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3720      	adds	r7, #32
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b088      	sub	sp, #32
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ff8a:	2318      	movs	r3, #24
 800ff8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ff8e:	2340      	movs	r3, #64	; 0x40
 800ff90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ff92:	2300      	movs	r3, #0
 800ff94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ff96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ff9c:	f107 0308 	add.w	r3, r7, #8
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f7ff ff0e 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ffa8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffac:	2118      	movs	r1, #24
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 f9da 	bl	8010368 <SDMMC_GetCmdResp1>
 800ffb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffb6:	69fb      	ldr	r3, [r7, #28]
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3720      	adds	r7, #32
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b088      	sub	sp, #32
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ffce:	2319      	movs	r3, #25
 800ffd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ffd2:	2340      	movs	r3, #64	; 0x40
 800ffd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ffda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ffe0:	f107 0308 	add.w	r3, r7, #8
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f7ff feec 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ffec:	f241 3288 	movw	r2, #5000	; 0x1388
 800fff0:	2119      	movs	r1, #25
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 f9b8 	bl	8010368 <SDMMC_GetCmdResp1>
 800fff8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fffa:	69fb      	ldr	r3, [r7, #28]
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3720      	adds	r7, #32
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b088      	sub	sp, #32
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801000c:	2300      	movs	r3, #0
 801000e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010010:	230c      	movs	r3, #12
 8010012:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010014:	2340      	movs	r3, #64	; 0x40
 8010016:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010018:	2300      	movs	r3, #0
 801001a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801001c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010020:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010022:	f107 0308 	add.w	r3, r7, #8
 8010026:	4619      	mov	r1, r3
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f7ff fecb 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801002e:	4a05      	ldr	r2, [pc, #20]	; (8010044 <SDMMC_CmdStopTransfer+0x40>)
 8010030:	210c      	movs	r1, #12
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f000 f998 	bl	8010368 <SDMMC_GetCmdResp1>
 8010038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801003a:	69fb      	ldr	r3, [r7, #28]
}
 801003c:	4618      	mov	r0, r3
 801003e:	3720      	adds	r7, #32
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	05f5e100 	.word	0x05f5e100

08010048 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b08a      	sub	sp, #40	; 0x28
 801004c:	af00      	add	r7, sp, #0
 801004e:	60f8      	str	r0, [r7, #12]
 8010050:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010058:	2307      	movs	r3, #7
 801005a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801005c:	2340      	movs	r3, #64	; 0x40
 801005e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010060:	2300      	movs	r3, #0
 8010062:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010068:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801006a:	f107 0310 	add.w	r3, r7, #16
 801006e:	4619      	mov	r1, r3
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	f7ff fea7 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010076:	f241 3288 	movw	r2, #5000	; 0x1388
 801007a:	2107      	movs	r1, #7
 801007c:	68f8      	ldr	r0, [r7, #12]
 801007e:	f000 f973 	bl	8010368 <SDMMC_GetCmdResp1>
 8010082:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010086:	4618      	mov	r0, r3
 8010088:	3728      	adds	r7, #40	; 0x28
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}

0801008e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801008e:	b580      	push	{r7, lr}
 8010090:	b088      	sub	sp, #32
 8010092:	af00      	add	r7, sp, #0
 8010094:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010096:	2300      	movs	r3, #0
 8010098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801009a:	2300      	movs	r3, #0
 801009c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801009e:	2300      	movs	r3, #0
 80100a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80100a2:	2300      	movs	r3, #0
 80100a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80100a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100ac:	f107 0308 	add.w	r3, r7, #8
 80100b0:	4619      	mov	r1, r3
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f7ff fe86 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 f92d 	bl	8010318 <SDMMC_GetCmdError>
 80100be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100c0:	69fb      	ldr	r3, [r7, #28]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3720      	adds	r7, #32
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}

080100ca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80100ca:	b580      	push	{r7, lr}
 80100cc:	b088      	sub	sp, #32
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80100d2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80100d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80100d8:	2308      	movs	r3, #8
 80100da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80100dc:	2340      	movs	r3, #64	; 0x40
 80100de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80100e0:	2300      	movs	r3, #0
 80100e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80100e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100ea:	f107 0308 	add.w	r3, r7, #8
 80100ee:	4619      	mov	r1, r3
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f7ff fe67 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 fb16 	bl	8010728 <SDMMC_GetCmdResp7>
 80100fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100fe:	69fb      	ldr	r3, [r7, #28]
}
 8010100:	4618      	mov	r0, r3
 8010102:	3720      	adds	r7, #32
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b088      	sub	sp, #32
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010116:	2337      	movs	r3, #55	; 0x37
 8010118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801011a:	2340      	movs	r3, #64	; 0x40
 801011c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801011e:	2300      	movs	r3, #0
 8010120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010126:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010128:	f107 0308 	add.w	r3, r7, #8
 801012c:	4619      	mov	r1, r3
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f7ff fe48 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010134:	f241 3288 	movw	r2, #5000	; 0x1388
 8010138:	2137      	movs	r1, #55	; 0x37
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 f914 	bl	8010368 <SDMMC_GetCmdResp1>
 8010140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010142:	69fb      	ldr	r3, [r7, #28]
}
 8010144:	4618      	mov	r0, r3
 8010146:	3720      	adds	r7, #32
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b088      	sub	sp, #32
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801015c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010162:	2329      	movs	r3, #41	; 0x29
 8010164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010166:	2340      	movs	r3, #64	; 0x40
 8010168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801016a:	2300      	movs	r3, #0
 801016c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801016e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010172:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010174:	f107 0308 	add.w	r3, r7, #8
 8010178:	4619      	mov	r1, r3
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f7ff fe22 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 fa23 	bl	80105cc <SDMMC_GetCmdResp3>
 8010186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010188:	69fb      	ldr	r3, [r7, #28]
}
 801018a:	4618      	mov	r0, r3
 801018c:	3720      	adds	r7, #32
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b088      	sub	sp, #32
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80101a0:	2306      	movs	r3, #6
 80101a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101a4:	2340      	movs	r3, #64	; 0x40
 80101a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101a8:	2300      	movs	r3, #0
 80101aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101b2:	f107 0308 	add.w	r3, r7, #8
 80101b6:	4619      	mov	r1, r3
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f7ff fe03 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80101be:	f241 3288 	movw	r2, #5000	; 0x1388
 80101c2:	2106      	movs	r1, #6
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f000 f8cf 	bl	8010368 <SDMMC_GetCmdResp1>
 80101ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101cc:	69fb      	ldr	r3, [r7, #28]
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3720      	adds	r7, #32
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}

080101d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80101d6:	b580      	push	{r7, lr}
 80101d8:	b088      	sub	sp, #32
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80101de:	2300      	movs	r3, #0
 80101e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80101e2:	2333      	movs	r3, #51	; 0x33
 80101e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101e6:	2340      	movs	r3, #64	; 0x40
 80101e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101ea:	2300      	movs	r3, #0
 80101ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101f4:	f107 0308 	add.w	r3, r7, #8
 80101f8:	4619      	mov	r1, r3
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7ff fde2 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010200:	f241 3288 	movw	r2, #5000	; 0x1388
 8010204:	2133      	movs	r1, #51	; 0x33
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 f8ae 	bl	8010368 <SDMMC_GetCmdResp1>
 801020c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801020e:	69fb      	ldr	r3, [r7, #28]
}
 8010210:	4618      	mov	r0, r3
 8010212:	3720      	adds	r7, #32
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b088      	sub	sp, #32
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010220:	2300      	movs	r3, #0
 8010222:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010224:	2302      	movs	r3, #2
 8010226:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010228:	23c0      	movs	r3, #192	; 0xc0
 801022a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801022c:	2300      	movs	r3, #0
 801022e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010234:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010236:	f107 0308 	add.w	r3, r7, #8
 801023a:	4619      	mov	r1, r3
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7ff fdc1 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f000 f97c 	bl	8010540 <SDMMC_GetCmdResp2>
 8010248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801024a:	69fb      	ldr	r3, [r7, #28]
}
 801024c:	4618      	mov	r0, r3
 801024e:	3720      	adds	r7, #32
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b088      	sub	sp, #32
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010262:	2309      	movs	r3, #9
 8010264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010266:	23c0      	movs	r3, #192	; 0xc0
 8010268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801026a:	2300      	movs	r3, #0
 801026c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801026e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010272:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010274:	f107 0308 	add.w	r3, r7, #8
 8010278:	4619      	mov	r1, r3
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7ff fda2 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f000 f95d 	bl	8010540 <SDMMC_GetCmdResp2>
 8010286:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010288:	69fb      	ldr	r3, [r7, #28]
}
 801028a:	4618      	mov	r0, r3
 801028c:	3720      	adds	r7, #32
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}

08010292 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010292:	b580      	push	{r7, lr}
 8010294:	b088      	sub	sp, #32
 8010296:	af00      	add	r7, sp, #0
 8010298:	6078      	str	r0, [r7, #4]
 801029a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801029c:	2300      	movs	r3, #0
 801029e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80102a0:	2303      	movs	r3, #3
 80102a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102a4:	2340      	movs	r3, #64	; 0x40
 80102a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102a8:	2300      	movs	r3, #0
 80102aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102b2:	f107 0308 	add.w	r3, r7, #8
 80102b6:	4619      	mov	r1, r3
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f7ff fd83 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80102be:	683a      	ldr	r2, [r7, #0]
 80102c0:	2103      	movs	r1, #3
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 f9bc 	bl	8010640 <SDMMC_GetCmdResp6>
 80102c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102ca:	69fb      	ldr	r3, [r7, #28]
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3720      	adds	r7, #32
 80102d0:	46bd      	mov	sp, r7
 80102d2:	bd80      	pop	{r7, pc}

080102d4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b088      	sub	sp, #32
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80102e2:	230d      	movs	r3, #13
 80102e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102e6:	2340      	movs	r3, #64	; 0x40
 80102e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102ea:	2300      	movs	r3, #0
 80102ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102f4:	f107 0308 	add.w	r3, r7, #8
 80102f8:	4619      	mov	r1, r3
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f7ff fd62 	bl	800fdc4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010300:	f241 3288 	movw	r2, #5000	; 0x1388
 8010304:	210d      	movs	r1, #13
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f000 f82e 	bl	8010368 <SDMMC_GetCmdResp1>
 801030c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801030e:	69fb      	ldr	r3, [r7, #28]
}
 8010310:	4618      	mov	r0, r3
 8010312:	3720      	adds	r7, #32
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010318:	b490      	push	{r4, r7}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010320:	4b0f      	ldr	r3, [pc, #60]	; (8010360 <SDMMC_GetCmdError+0x48>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4a0f      	ldr	r2, [pc, #60]	; (8010364 <SDMMC_GetCmdError+0x4c>)
 8010326:	fba2 2303 	umull	r2, r3, r2, r3
 801032a:	0a5b      	lsrs	r3, r3, #9
 801032c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010330:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010334:	4623      	mov	r3, r4
 8010336:	1e5c      	subs	r4, r3, #1
 8010338:	2b00      	cmp	r3, #0
 801033a:	d102      	bne.n	8010342 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801033c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010340:	e009      	b.n	8010356 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801034a:	2b00      	cmp	r3, #0
 801034c:	d0f2      	beq.n	8010334 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	22c5      	movs	r2, #197	; 0xc5
 8010352:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	3708      	adds	r7, #8
 801035a:	46bd      	mov	sp, r7
 801035c:	bc90      	pop	{r4, r7}
 801035e:	4770      	bx	lr
 8010360:	20000000 	.word	0x20000000
 8010364:	10624dd3 	.word	0x10624dd3

08010368 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010368:	b590      	push	{r4, r7, lr}
 801036a:	b087      	sub	sp, #28
 801036c:	af00      	add	r7, sp, #0
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	460b      	mov	r3, r1
 8010372:	607a      	str	r2, [r7, #4]
 8010374:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010376:	4b6f      	ldr	r3, [pc, #444]	; (8010534 <SDMMC_GetCmdResp1+0x1cc>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	4a6f      	ldr	r2, [pc, #444]	; (8010538 <SDMMC_GetCmdResp1+0x1d0>)
 801037c:	fba2 2303 	umull	r2, r3, r2, r3
 8010380:	0a5b      	lsrs	r3, r3, #9
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010388:	4623      	mov	r3, r4
 801038a:	1e5c      	subs	r4, r3, #1
 801038c:	2b00      	cmp	r3, #0
 801038e:	d102      	bne.n	8010396 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010390:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010394:	e0c9      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801039a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d0f0      	beq.n	8010388 <SDMMC_GetCmdResp1+0x20>
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d1eb      	bne.n	8010388 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103b4:	f003 0304 	and.w	r3, r3, #4
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d004      	beq.n	80103c6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2204      	movs	r2, #4
 80103c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80103c2:	2304      	movs	r3, #4
 80103c4:	e0b1      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103ca:	f003 0301 	and.w	r3, r3, #1
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d004      	beq.n	80103dc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2201      	movs	r2, #1
 80103d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80103d8:	2301      	movs	r3, #1
 80103da:	e0a6      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	22c5      	movs	r2, #197	; 0xc5
 80103e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80103e2:	68f8      	ldr	r0, [r7, #12]
 80103e4:	f7ff fd18 	bl	800fe18 <SDIO_GetCommandResponse>
 80103e8:	4603      	mov	r3, r0
 80103ea:	461a      	mov	r2, r3
 80103ec:	7afb      	ldrb	r3, [r7, #11]
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d001      	beq.n	80103f6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80103f2:	2301      	movs	r3, #1
 80103f4:	e099      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80103f6:	2100      	movs	r1, #0
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f7ff fd1a 	bl	800fe32 <SDIO_GetResponse>
 80103fe:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010400:	693a      	ldr	r2, [r7, #16]
 8010402:	4b4e      	ldr	r3, [pc, #312]	; (801053c <SDMMC_GetCmdResp1+0x1d4>)
 8010404:	4013      	ands	r3, r2
 8010406:	2b00      	cmp	r3, #0
 8010408:	d101      	bne.n	801040e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801040a:	2300      	movs	r3, #0
 801040c:	e08d      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	2b00      	cmp	r3, #0
 8010412:	da02      	bge.n	801041a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010418:	e087      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010420:	2b00      	cmp	r3, #0
 8010422:	d001      	beq.n	8010428 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010424:	2340      	movs	r3, #64	; 0x40
 8010426:	e080      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801042e:	2b00      	cmp	r3, #0
 8010430:	d001      	beq.n	8010436 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010432:	2380      	movs	r3, #128	; 0x80
 8010434:	e079      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801043c:	2b00      	cmp	r3, #0
 801043e:	d002      	beq.n	8010446 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010444:	e071      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801044c:	2b00      	cmp	r3, #0
 801044e:	d002      	beq.n	8010456 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010450:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010454:	e069      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801045c:	2b00      	cmp	r3, #0
 801045e:	d002      	beq.n	8010466 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010464:	e061      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801046c:	2b00      	cmp	r3, #0
 801046e:	d002      	beq.n	8010476 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010474:	e059      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801047c:	2b00      	cmp	r3, #0
 801047e:	d002      	beq.n	8010486 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010484:	e051      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801048c:	2b00      	cmp	r3, #0
 801048e:	d002      	beq.n	8010496 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010494:	e049      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80104a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80104a4:	e041      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d002      	beq.n	80104b6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80104b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80104b4:	e039      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d002      	beq.n	80104c6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80104c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80104c4:	e031      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d002      	beq.n	80104d6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80104d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80104d4:	e029      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d002      	beq.n	80104e6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80104e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80104e4:	e021      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d002      	beq.n	80104f6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80104f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80104f4:	e019      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d002      	beq.n	8010506 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010500:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010504:	e011      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801050c:	2b00      	cmp	r3, #0
 801050e:	d002      	beq.n	8010516 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010510:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010514:	e009      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	f003 0308 	and.w	r3, r3, #8
 801051c:	2b00      	cmp	r3, #0
 801051e:	d002      	beq.n	8010526 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010520:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010524:	e001      	b.n	801052a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801052a:	4618      	mov	r0, r3
 801052c:	371c      	adds	r7, #28
 801052e:	46bd      	mov	sp, r7
 8010530:	bd90      	pop	{r4, r7, pc}
 8010532:	bf00      	nop
 8010534:	20000000 	.word	0x20000000
 8010538:	10624dd3 	.word	0x10624dd3
 801053c:	fdffe008 	.word	0xfdffe008

08010540 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010540:	b490      	push	{r4, r7}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010548:	4b1e      	ldr	r3, [pc, #120]	; (80105c4 <SDMMC_GetCmdResp2+0x84>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4a1e      	ldr	r2, [pc, #120]	; (80105c8 <SDMMC_GetCmdResp2+0x88>)
 801054e:	fba2 2303 	umull	r2, r3, r2, r3
 8010552:	0a5b      	lsrs	r3, r3, #9
 8010554:	f241 3288 	movw	r2, #5000	; 0x1388
 8010558:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801055c:	4623      	mov	r3, r4
 801055e:	1e5c      	subs	r4, r3, #1
 8010560:	2b00      	cmp	r3, #0
 8010562:	d102      	bne.n	801056a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010568:	e026      	b.n	80105b8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801056e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010576:	2b00      	cmp	r3, #0
 8010578:	d0f0      	beq.n	801055c <SDMMC_GetCmdResp2+0x1c>
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010580:	2b00      	cmp	r3, #0
 8010582:	d1eb      	bne.n	801055c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010588:	f003 0304 	and.w	r3, r3, #4
 801058c:	2b00      	cmp	r3, #0
 801058e:	d004      	beq.n	801059a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2204      	movs	r2, #4
 8010594:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010596:	2304      	movs	r3, #4
 8010598:	e00e      	b.n	80105b8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801059e:	f003 0301 	and.w	r3, r3, #1
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d004      	beq.n	80105b0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2201      	movs	r2, #1
 80105aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105ac:	2301      	movs	r3, #1
 80105ae:	e003      	b.n	80105b8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	22c5      	movs	r2, #197	; 0xc5
 80105b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80105b6:	2300      	movs	r3, #0
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3710      	adds	r7, #16
 80105bc:	46bd      	mov	sp, r7
 80105be:	bc90      	pop	{r4, r7}
 80105c0:	4770      	bx	lr
 80105c2:	bf00      	nop
 80105c4:	20000000 	.word	0x20000000
 80105c8:	10624dd3 	.word	0x10624dd3

080105cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80105cc:	b490      	push	{r4, r7}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80105d4:	4b18      	ldr	r3, [pc, #96]	; (8010638 <SDMMC_GetCmdResp3+0x6c>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4a18      	ldr	r2, [pc, #96]	; (801063c <SDMMC_GetCmdResp3+0x70>)
 80105da:	fba2 2303 	umull	r2, r3, r2, r3
 80105de:	0a5b      	lsrs	r3, r3, #9
 80105e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80105e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80105e8:	4623      	mov	r3, r4
 80105ea:	1e5c      	subs	r4, r3, #1
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d102      	bne.n	80105f6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80105f4:	e01b      	b.n	801062e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010602:	2b00      	cmp	r3, #0
 8010604:	d0f0      	beq.n	80105e8 <SDMMC_GetCmdResp3+0x1c>
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801060c:	2b00      	cmp	r3, #0
 801060e:	d1eb      	bne.n	80105e8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010614:	f003 0304 	and.w	r3, r3, #4
 8010618:	2b00      	cmp	r3, #0
 801061a:	d004      	beq.n	8010626 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2204      	movs	r2, #4
 8010620:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010622:	2304      	movs	r3, #4
 8010624:	e003      	b.n	801062e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	22c5      	movs	r2, #197	; 0xc5
 801062a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801062c:	2300      	movs	r3, #0
}
 801062e:	4618      	mov	r0, r3
 8010630:	3710      	adds	r7, #16
 8010632:	46bd      	mov	sp, r7
 8010634:	bc90      	pop	{r4, r7}
 8010636:	4770      	bx	lr
 8010638:	20000000 	.word	0x20000000
 801063c:	10624dd3 	.word	0x10624dd3

08010640 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010640:	b590      	push	{r4, r7, lr}
 8010642:	b087      	sub	sp, #28
 8010644:	af00      	add	r7, sp, #0
 8010646:	60f8      	str	r0, [r7, #12]
 8010648:	460b      	mov	r3, r1
 801064a:	607a      	str	r2, [r7, #4]
 801064c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801064e:	4b34      	ldr	r3, [pc, #208]	; (8010720 <SDMMC_GetCmdResp6+0xe0>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	4a34      	ldr	r2, [pc, #208]	; (8010724 <SDMMC_GetCmdResp6+0xe4>)
 8010654:	fba2 2303 	umull	r2, r3, r2, r3
 8010658:	0a5b      	lsrs	r3, r3, #9
 801065a:	f241 3288 	movw	r2, #5000	; 0x1388
 801065e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010662:	4623      	mov	r3, r4
 8010664:	1e5c      	subs	r4, r3, #1
 8010666:	2b00      	cmp	r3, #0
 8010668:	d102      	bne.n	8010670 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801066a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801066e:	e052      	b.n	8010716 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010674:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801067c:	2b00      	cmp	r3, #0
 801067e:	d0f0      	beq.n	8010662 <SDMMC_GetCmdResp6+0x22>
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010686:	2b00      	cmp	r3, #0
 8010688:	d1eb      	bne.n	8010662 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801068e:	f003 0304 	and.w	r3, r3, #4
 8010692:	2b00      	cmp	r3, #0
 8010694:	d004      	beq.n	80106a0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2204      	movs	r2, #4
 801069a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801069c:	2304      	movs	r3, #4
 801069e:	e03a      	b.n	8010716 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106a4:	f003 0301 	and.w	r3, r3, #1
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d004      	beq.n	80106b6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2201      	movs	r2, #1
 80106b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80106b2:	2301      	movs	r3, #1
 80106b4:	e02f      	b.n	8010716 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80106b6:	68f8      	ldr	r0, [r7, #12]
 80106b8:	f7ff fbae 	bl	800fe18 <SDIO_GetCommandResponse>
 80106bc:	4603      	mov	r3, r0
 80106be:	461a      	mov	r2, r3
 80106c0:	7afb      	ldrb	r3, [r7, #11]
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d001      	beq.n	80106ca <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80106c6:	2301      	movs	r3, #1
 80106c8:	e025      	b.n	8010716 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	22c5      	movs	r2, #197	; 0xc5
 80106ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80106d0:	2100      	movs	r1, #0
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	f7ff fbad 	bl	800fe32 <SDIO_GetResponse>
 80106d8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d106      	bne.n	80106f2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	0c1b      	lsrs	r3, r3, #16
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80106ee:	2300      	movs	r3, #0
 80106f0:	e011      	b.n	8010716 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d002      	beq.n	8010702 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80106fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010700:	e009      	b.n	8010716 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010708:	2b00      	cmp	r3, #0
 801070a:	d002      	beq.n	8010712 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010710:	e001      	b.n	8010716 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010716:	4618      	mov	r0, r3
 8010718:	371c      	adds	r7, #28
 801071a:	46bd      	mov	sp, r7
 801071c:	bd90      	pop	{r4, r7, pc}
 801071e:	bf00      	nop
 8010720:	20000000 	.word	0x20000000
 8010724:	10624dd3 	.word	0x10624dd3

08010728 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010728:	b490      	push	{r4, r7}
 801072a:	b084      	sub	sp, #16
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010730:	4b21      	ldr	r3, [pc, #132]	; (80107b8 <SDMMC_GetCmdResp7+0x90>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	4a21      	ldr	r2, [pc, #132]	; (80107bc <SDMMC_GetCmdResp7+0x94>)
 8010736:	fba2 2303 	umull	r2, r3, r2, r3
 801073a:	0a5b      	lsrs	r3, r3, #9
 801073c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010740:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010744:	4623      	mov	r3, r4
 8010746:	1e5c      	subs	r4, r3, #1
 8010748:	2b00      	cmp	r3, #0
 801074a:	d102      	bne.n	8010752 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801074c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010750:	e02c      	b.n	80107ac <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010756:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801075e:	2b00      	cmp	r3, #0
 8010760:	d0f0      	beq.n	8010744 <SDMMC_GetCmdResp7+0x1c>
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010768:	2b00      	cmp	r3, #0
 801076a:	d1eb      	bne.n	8010744 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010770:	f003 0304 	and.w	r3, r3, #4
 8010774:	2b00      	cmp	r3, #0
 8010776:	d004      	beq.n	8010782 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2204      	movs	r2, #4
 801077c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801077e:	2304      	movs	r3, #4
 8010780:	e014      	b.n	80107ac <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010786:	f003 0301 	and.w	r3, r3, #1
 801078a:	2b00      	cmp	r3, #0
 801078c:	d004      	beq.n	8010798 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2201      	movs	r2, #1
 8010792:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010794:	2301      	movs	r3, #1
 8010796:	e009      	b.n	80107ac <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801079c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d002      	beq.n	80107aa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2240      	movs	r2, #64	; 0x40
 80107a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80107aa:	2300      	movs	r3, #0
  
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bc90      	pop	{r4, r7}
 80107b4:	4770      	bx	lr
 80107b6:	bf00      	nop
 80107b8:	20000000 	.word	0x20000000
 80107bc:	10624dd3 	.word	0x10624dd3

080107c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80107c4:	4904      	ldr	r1, [pc, #16]	; (80107d8 <MX_FATFS_Init+0x18>)
 80107c6:	4805      	ldr	r0, [pc, #20]	; (80107dc <MX_FATFS_Init+0x1c>)
 80107c8:	f003 fb9c 	bl	8013f04 <FATFS_LinkDriver>
 80107cc:	4603      	mov	r3, r0
 80107ce:	461a      	mov	r2, r3
 80107d0:	4b03      	ldr	r3, [pc, #12]	; (80107e0 <MX_FATFS_Init+0x20>)
 80107d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80107d4:	bf00      	nop
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	20042d08 	.word	0x20042d08
 80107dc:	08019a64 	.word	0x08019a64
 80107e0:	20042d04 	.word	0x20042d04

080107e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b082      	sub	sp, #8
 80107e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80107ea:	2300      	movs	r3, #0
 80107ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80107ee:	f000 f896 	bl	801091e <BSP_SD_IsDetected>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d001      	beq.n	80107fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80107f8:	2301      	movs	r3, #1
 80107fa:	e012      	b.n	8010822 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80107fc:	480b      	ldr	r0, [pc, #44]	; (801082c <BSP_SD_Init+0x48>)
 80107fe:	f7fb ffa5 	bl	800c74c <HAL_SD_Init>
 8010802:	4603      	mov	r3, r0
 8010804:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010806:	79fb      	ldrb	r3, [r7, #7]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d109      	bne.n	8010820 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801080c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010810:	4806      	ldr	r0, [pc, #24]	; (801082c <BSP_SD_Init+0x48>)
 8010812:	f7fc fd4f 	bl	800d2b4 <HAL_SD_ConfigWideBusOperation>
 8010816:	4603      	mov	r3, r0
 8010818:	2b00      	cmp	r3, #0
 801081a:	d001      	beq.n	8010820 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801081c:	2301      	movs	r3, #1
 801081e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010820:	79fb      	ldrb	r3, [r7, #7]
}
 8010822:	4618      	mov	r0, r3
 8010824:	3708      	adds	r7, #8
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
 801082a:	bf00      	nop
 801082c:	20042b00 	.word	0x20042b00

08010830 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b086      	sub	sp, #24
 8010834:	af00      	add	r7, sp, #0
 8010836:	60f8      	str	r0, [r7, #12]
 8010838:	60b9      	str	r1, [r7, #8]
 801083a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801083c:	2300      	movs	r3, #0
 801083e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	68ba      	ldr	r2, [r7, #8]
 8010844:	68f9      	ldr	r1, [r7, #12]
 8010846:	4806      	ldr	r0, [pc, #24]	; (8010860 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010848:	f7fc f810 	bl	800c86c <HAL_SD_ReadBlocks_DMA>
 801084c:	4603      	mov	r3, r0
 801084e:	2b00      	cmp	r3, #0
 8010850:	d001      	beq.n	8010856 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010852:	2301      	movs	r3, #1
 8010854:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010856:	7dfb      	ldrb	r3, [r7, #23]
}
 8010858:	4618      	mov	r0, r3
 801085a:	3718      	adds	r7, #24
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	20042b00 	.word	0x20042b00

08010864 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b086      	sub	sp, #24
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010870:	2300      	movs	r3, #0
 8010872:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	68ba      	ldr	r2, [r7, #8]
 8010878:	68f9      	ldr	r1, [r7, #12]
 801087a:	4806      	ldr	r0, [pc, #24]	; (8010894 <BSP_SD_WriteBlocks_DMA+0x30>)
 801087c:	f7fc f8de 	bl	800ca3c <HAL_SD_WriteBlocks_DMA>
 8010880:	4603      	mov	r3, r0
 8010882:	2b00      	cmp	r3, #0
 8010884:	d001      	beq.n	801088a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010886:	2301      	movs	r3, #1
 8010888:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801088a:	7dfb      	ldrb	r3, [r7, #23]
}
 801088c:	4618      	mov	r0, r3
 801088e:	3718      	adds	r7, #24
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}
 8010894:	20042b00 	.word	0x20042b00

08010898 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801089c:	4805      	ldr	r0, [pc, #20]	; (80108b4 <BSP_SD_GetCardState+0x1c>)
 801089e:	f7fc fd85 	bl	800d3ac <HAL_SD_GetCardState>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b04      	cmp	r3, #4
 80108a6:	bf14      	ite	ne
 80108a8:	2301      	movne	r3, #1
 80108aa:	2300      	moveq	r3, #0
 80108ac:	b2db      	uxtb	r3, r3
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	bd80      	pop	{r7, pc}
 80108b2:	bf00      	nop
 80108b4:	20042b00 	.word	0x20042b00

080108b8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80108c0:	6879      	ldr	r1, [r7, #4]
 80108c2:	4803      	ldr	r0, [pc, #12]	; (80108d0 <BSP_SD_GetCardInfo+0x18>)
 80108c4:	f7fc fcca 	bl	800d25c <HAL_SD_GetCardInfo>
}
 80108c8:	bf00      	nop
 80108ca:	3708      	adds	r7, #8
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}
 80108d0:	20042b00 	.word	0x20042b00

080108d4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80108dc:	f000 f818 	bl	8010910 <BSP_SD_AbortCallback>
}
 80108e0:	bf00      	nop
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80108f0:	f000 f9a8 	bl	8010c44 <BSP_SD_WriteCpltCallback>
}
 80108f4:	bf00      	nop
 80108f6:	3708      	adds	r7, #8
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010904:	f000 f9aa 	bl	8010c5c <BSP_SD_ReadCpltCallback>
}
 8010908:	bf00      	nop
 801090a:	3708      	adds	r7, #8
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}

08010910 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010910:	b480      	push	{r7}
 8010912:	af00      	add	r7, sp, #0

}
 8010914:	bf00      	nop
 8010916:	46bd      	mov	sp, r7
 8010918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091c:	4770      	bx	lr

0801091e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801091e:	b580      	push	{r7, lr}
 8010920:	b082      	sub	sp, #8
 8010922:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010924:	2301      	movs	r3, #1
 8010926:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010928:	f000 f80c 	bl	8010944 <BSP_PlatformIsDetected>
 801092c:	4603      	mov	r3, r0
 801092e:	2b00      	cmp	r3, #0
 8010930:	d101      	bne.n	8010936 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010932:	2300      	movs	r3, #0
 8010934:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010936:	79fb      	ldrb	r3, [r7, #7]
 8010938:	b2db      	uxtb	r3, r3
}
 801093a:	4618      	mov	r0, r3
 801093c:	3708      	adds	r7, #8
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}
	...

08010944 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801094a:	2301      	movs	r3, #1
 801094c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801094e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010952:	4806      	ldr	r0, [pc, #24]	; (801096c <BSP_PlatformIsDetected+0x28>)
 8010954:	f7fa f87e 	bl	800aa54 <HAL_GPIO_ReadPin>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d001      	beq.n	8010962 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801095e:	2300      	movs	r3, #0
 8010960:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010962:	79fb      	ldrb	r3, [r7, #7]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	40020000 	.word	0x40020000

08010970 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b084      	sub	sp, #16
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010978:	f7f8 fde2 	bl	8009540 <HAL_GetTick>
 801097c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801097e:	e006      	b.n	801098e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010980:	f7ff ff8a 	bl	8010898 <BSP_SD_GetCardState>
 8010984:	4603      	mov	r3, r0
 8010986:	2b00      	cmp	r3, #0
 8010988:	d101      	bne.n	801098e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801098a:	2300      	movs	r3, #0
 801098c:	e009      	b.n	80109a2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801098e:	f7f8 fdd7 	bl	8009540 <HAL_GetTick>
 8010992:	4602      	mov	r2, r0
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	1ad3      	subs	r3, r2, r3
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	429a      	cmp	r2, r3
 801099c:	d8f0      	bhi.n	8010980 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801099e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3710      	adds	r7, #16
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
	...

080109ac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	4603      	mov	r3, r0
 80109b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80109b6:	4b0b      	ldr	r3, [pc, #44]	; (80109e4 <SD_CheckStatus+0x38>)
 80109b8:	2201      	movs	r2, #1
 80109ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80109bc:	f7ff ff6c 	bl	8010898 <BSP_SD_GetCardState>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d107      	bne.n	80109d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80109c6:	4b07      	ldr	r3, [pc, #28]	; (80109e4 <SD_CheckStatus+0x38>)
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	b2db      	uxtb	r3, r3
 80109cc:	f023 0301 	bic.w	r3, r3, #1
 80109d0:	b2da      	uxtb	r2, r3
 80109d2:	4b04      	ldr	r3, [pc, #16]	; (80109e4 <SD_CheckStatus+0x38>)
 80109d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80109d6:	4b03      	ldr	r3, [pc, #12]	; (80109e4 <SD_CheckStatus+0x38>)
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	b2db      	uxtb	r3, r3
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3708      	adds	r7, #8
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	20000009 	.word	0x20000009

080109e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	4603      	mov	r3, r0
 80109f0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80109f2:	f7ff fef7 	bl	80107e4 <BSP_SD_Init>
 80109f6:	4603      	mov	r3, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d107      	bne.n	8010a0c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80109fc:	79fb      	ldrb	r3, [r7, #7]
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7ff ffd4 	bl	80109ac <SD_CheckStatus>
 8010a04:	4603      	mov	r3, r0
 8010a06:	461a      	mov	r2, r3
 8010a08:	4b04      	ldr	r3, [pc, #16]	; (8010a1c <SD_initialize+0x34>)
 8010a0a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010a0c:	4b03      	ldr	r3, [pc, #12]	; (8010a1c <SD_initialize+0x34>)
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	b2db      	uxtb	r3, r3
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3708      	adds	r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	20000009 	.word	0x20000009

08010a20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	4603      	mov	r3, r0
 8010a28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010a2a:	79fb      	ldrb	r3, [r7, #7]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7ff ffbd 	bl	80109ac <SD_CheckStatus>
 8010a32:	4603      	mov	r3, r0
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60b9      	str	r1, [r7, #8]
 8010a44:	607a      	str	r2, [r7, #4]
 8010a46:	603b      	str	r3, [r7, #0]
 8010a48:	4603      	mov	r3, r0
 8010a4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010a50:	f247 5030 	movw	r0, #30000	; 0x7530
 8010a54:	f7ff ff8c 	bl	8010970 <SD_CheckStatusWithTimeout>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	da01      	bge.n	8010a62 <SD_read+0x26>
  {
    return res;
 8010a5e:	7dfb      	ldrb	r3, [r7, #23]
 8010a60:	e03b      	b.n	8010ada <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010a62:	683a      	ldr	r2, [r7, #0]
 8010a64:	6879      	ldr	r1, [r7, #4]
 8010a66:	68b8      	ldr	r0, [r7, #8]
 8010a68:	f7ff fee2 	bl	8010830 <BSP_SD_ReadBlocks_DMA>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d132      	bne.n	8010ad8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010a72:	4b1c      	ldr	r3, [pc, #112]	; (8010ae4 <SD_read+0xa8>)
 8010a74:	2200      	movs	r2, #0
 8010a76:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010a78:	f7f8 fd62 	bl	8009540 <HAL_GetTick>
 8010a7c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010a7e:	bf00      	nop
 8010a80:	4b18      	ldr	r3, [pc, #96]	; (8010ae4 <SD_read+0xa8>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d108      	bne.n	8010a9a <SD_read+0x5e>
 8010a88:	f7f8 fd5a 	bl	8009540 <HAL_GetTick>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	1ad3      	subs	r3, r2, r3
 8010a92:	f247 522f 	movw	r2, #29999	; 0x752f
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d9f2      	bls.n	8010a80 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010a9a:	4b12      	ldr	r3, [pc, #72]	; (8010ae4 <SD_read+0xa8>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d102      	bne.n	8010aa8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	75fb      	strb	r3, [r7, #23]
 8010aa6:	e017      	b.n	8010ad8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010aa8:	4b0e      	ldr	r3, [pc, #56]	; (8010ae4 <SD_read+0xa8>)
 8010aaa:	2200      	movs	r2, #0
 8010aac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010aae:	f7f8 fd47 	bl	8009540 <HAL_GetTick>
 8010ab2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ab4:	e007      	b.n	8010ac6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ab6:	f7ff feef 	bl	8010898 <BSP_SD_GetCardState>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d102      	bne.n	8010ac6 <SD_read+0x8a>
          {
            res = RES_OK;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010ac4:	e008      	b.n	8010ad8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ac6:	f7f8 fd3b 	bl	8009540 <HAL_GetTick>
 8010aca:	4602      	mov	r2, r0
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	1ad3      	subs	r3, r2, r3
 8010ad0:	f247 522f 	movw	r2, #29999	; 0x752f
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d9ee      	bls.n	8010ab6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3718      	adds	r7, #24
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	2004039c 	.word	0x2004039c

08010ae8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b086      	sub	sp, #24
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60b9      	str	r1, [r7, #8]
 8010af0:	607a      	str	r2, [r7, #4]
 8010af2:	603b      	str	r3, [r7, #0]
 8010af4:	4603      	mov	r3, r0
 8010af6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010af8:	2301      	movs	r3, #1
 8010afa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010afc:	4b24      	ldr	r3, [pc, #144]	; (8010b90 <SD_write+0xa8>)
 8010afe:	2200      	movs	r2, #0
 8010b00:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010b02:	f247 5030 	movw	r0, #30000	; 0x7530
 8010b06:	f7ff ff33 	bl	8010970 <SD_CheckStatusWithTimeout>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	da01      	bge.n	8010b14 <SD_write+0x2c>
  {
    return res;
 8010b10:	7dfb      	ldrb	r3, [r7, #23]
 8010b12:	e038      	b.n	8010b86 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010b14:	683a      	ldr	r2, [r7, #0]
 8010b16:	6879      	ldr	r1, [r7, #4]
 8010b18:	68b8      	ldr	r0, [r7, #8]
 8010b1a:	f7ff fea3 	bl	8010864 <BSP_SD_WriteBlocks_DMA>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d12f      	bne.n	8010b84 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010b24:	f7f8 fd0c 	bl	8009540 <HAL_GetTick>
 8010b28:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010b2a:	bf00      	nop
 8010b2c:	4b18      	ldr	r3, [pc, #96]	; (8010b90 <SD_write+0xa8>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d108      	bne.n	8010b46 <SD_write+0x5e>
 8010b34:	f7f8 fd04 	bl	8009540 <HAL_GetTick>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	1ad3      	subs	r3, r2, r3
 8010b3e:	f247 522f 	movw	r2, #29999	; 0x752f
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d9f2      	bls.n	8010b2c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010b46:	4b12      	ldr	r3, [pc, #72]	; (8010b90 <SD_write+0xa8>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d102      	bne.n	8010b54 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	75fb      	strb	r3, [r7, #23]
 8010b52:	e017      	b.n	8010b84 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010b54:	4b0e      	ldr	r3, [pc, #56]	; (8010b90 <SD_write+0xa8>)
 8010b56:	2200      	movs	r2, #0
 8010b58:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010b5a:	f7f8 fcf1 	bl	8009540 <HAL_GetTick>
 8010b5e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010b60:	e007      	b.n	8010b72 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010b62:	f7ff fe99 	bl	8010898 <BSP_SD_GetCardState>
 8010b66:	4603      	mov	r3, r0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d102      	bne.n	8010b72 <SD_write+0x8a>
          {
            res = RES_OK;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	75fb      	strb	r3, [r7, #23]
            break;
 8010b70:	e008      	b.n	8010b84 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010b72:	f7f8 fce5 	bl	8009540 <HAL_GetTick>
 8010b76:	4602      	mov	r2, r0
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d9ee      	bls.n	8010b62 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3718      	adds	r7, #24
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	20040398 	.word	0x20040398

08010b94 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b08c      	sub	sp, #48	; 0x30
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	603a      	str	r2, [r7, #0]
 8010b9e:	71fb      	strb	r3, [r7, #7]
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010baa:	4b25      	ldr	r3, [pc, #148]	; (8010c40 <SD_ioctl+0xac>)
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	f003 0301 	and.w	r3, r3, #1
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d001      	beq.n	8010bbc <SD_ioctl+0x28>
 8010bb8:	2303      	movs	r3, #3
 8010bba:	e03c      	b.n	8010c36 <SD_ioctl+0xa2>

  switch (cmd)
 8010bbc:	79bb      	ldrb	r3, [r7, #6]
 8010bbe:	2b03      	cmp	r3, #3
 8010bc0:	d834      	bhi.n	8010c2c <SD_ioctl+0x98>
 8010bc2:	a201      	add	r2, pc, #4	; (adr r2, 8010bc8 <SD_ioctl+0x34>)
 8010bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bc8:	08010bd9 	.word	0x08010bd9
 8010bcc:	08010be1 	.word	0x08010be1
 8010bd0:	08010bf9 	.word	0x08010bf9
 8010bd4:	08010c13 	.word	0x08010c13
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010bde:	e028      	b.n	8010c32 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010be0:	f107 030c 	add.w	r3, r7, #12
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7ff fe67 	bl	80108b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010bf6:	e01c      	b.n	8010c32 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010bf8:	f107 030c 	add.w	r3, r7, #12
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7ff fe5b 	bl	80108b8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c10:	e00f      	b.n	8010c32 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c12:	f107 030c 	add.w	r3, r7, #12
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ff fe4e 	bl	80108b8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1e:	0a5a      	lsrs	r2, r3, #9
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010c24:	2300      	movs	r3, #0
 8010c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c2a:	e002      	b.n	8010c32 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010c2c:	2304      	movs	r3, #4
 8010c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3730      	adds	r7, #48	; 0x30
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	20000009 	.word	0x20000009

08010c44 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010c44:	b480      	push	{r7}
 8010c46:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010c48:	4b03      	ldr	r3, [pc, #12]	; (8010c58 <BSP_SD_WriteCpltCallback+0x14>)
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	601a      	str	r2, [r3, #0]
}
 8010c4e:	bf00      	nop
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr
 8010c58:	20040398 	.word	0x20040398

08010c5c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010c60:	4b03      	ldr	r3, [pc, #12]	; (8010c70 <BSP_SD_ReadCpltCallback+0x14>)
 8010c62:	2201      	movs	r2, #1
 8010c64:	601a      	str	r2, [r3, #0]
}
 8010c66:	bf00      	nop
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr
 8010c70:	2004039c 	.word	0x2004039c

08010c74 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010c7e:	79fb      	ldrb	r3, [r7, #7]
 8010c80:	4a08      	ldr	r2, [pc, #32]	; (8010ca4 <disk_status+0x30>)
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	4413      	add	r3, r2
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	79fa      	ldrb	r2, [r7, #7]
 8010c8c:	4905      	ldr	r1, [pc, #20]	; (8010ca4 <disk_status+0x30>)
 8010c8e:	440a      	add	r2, r1
 8010c90:	7a12      	ldrb	r2, [r2, #8]
 8010c92:	4610      	mov	r0, r2
 8010c94:	4798      	blx	r3
 8010c96:	4603      	mov	r3, r0
 8010c98:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	3710      	adds	r7, #16
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}
 8010ca4:	200403c8 	.word	0x200403c8

08010ca8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	4603      	mov	r3, r0
 8010cb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010cb6:	79fb      	ldrb	r3, [r7, #7]
 8010cb8:	4a0d      	ldr	r2, [pc, #52]	; (8010cf0 <disk_initialize+0x48>)
 8010cba:	5cd3      	ldrb	r3, [r2, r3]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d111      	bne.n	8010ce4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010cc0:	79fb      	ldrb	r3, [r7, #7]
 8010cc2:	4a0b      	ldr	r2, [pc, #44]	; (8010cf0 <disk_initialize+0x48>)
 8010cc4:	2101      	movs	r1, #1
 8010cc6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010cc8:	79fb      	ldrb	r3, [r7, #7]
 8010cca:	4a09      	ldr	r2, [pc, #36]	; (8010cf0 <disk_initialize+0x48>)
 8010ccc:	009b      	lsls	r3, r3, #2
 8010cce:	4413      	add	r3, r2
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	79fa      	ldrb	r2, [r7, #7]
 8010cd6:	4906      	ldr	r1, [pc, #24]	; (8010cf0 <disk_initialize+0x48>)
 8010cd8:	440a      	add	r2, r1
 8010cda:	7a12      	ldrb	r2, [r2, #8]
 8010cdc:	4610      	mov	r0, r2
 8010cde:	4798      	blx	r3
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3710      	adds	r7, #16
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	200403c8 	.word	0x200403c8

08010cf4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010cf4:	b590      	push	{r4, r7, lr}
 8010cf6:	b087      	sub	sp, #28
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	60b9      	str	r1, [r7, #8]
 8010cfc:	607a      	str	r2, [r7, #4]
 8010cfe:	603b      	str	r3, [r7, #0]
 8010d00:	4603      	mov	r3, r0
 8010d02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d04:	7bfb      	ldrb	r3, [r7, #15]
 8010d06:	4a0a      	ldr	r2, [pc, #40]	; (8010d30 <disk_read+0x3c>)
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	4413      	add	r3, r2
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	689c      	ldr	r4, [r3, #8]
 8010d10:	7bfb      	ldrb	r3, [r7, #15]
 8010d12:	4a07      	ldr	r2, [pc, #28]	; (8010d30 <disk_read+0x3c>)
 8010d14:	4413      	add	r3, r2
 8010d16:	7a18      	ldrb	r0, [r3, #8]
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	687a      	ldr	r2, [r7, #4]
 8010d1c:	68b9      	ldr	r1, [r7, #8]
 8010d1e:	47a0      	blx	r4
 8010d20:	4603      	mov	r3, r0
 8010d22:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	371c      	adds	r7, #28
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd90      	pop	{r4, r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	200403c8 	.word	0x200403c8

08010d34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010d34:	b590      	push	{r4, r7, lr}
 8010d36:	b087      	sub	sp, #28
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60b9      	str	r1, [r7, #8]
 8010d3c:	607a      	str	r2, [r7, #4]
 8010d3e:	603b      	str	r3, [r7, #0]
 8010d40:	4603      	mov	r3, r0
 8010d42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010d44:	7bfb      	ldrb	r3, [r7, #15]
 8010d46:	4a0a      	ldr	r2, [pc, #40]	; (8010d70 <disk_write+0x3c>)
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	4413      	add	r3, r2
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	68dc      	ldr	r4, [r3, #12]
 8010d50:	7bfb      	ldrb	r3, [r7, #15]
 8010d52:	4a07      	ldr	r2, [pc, #28]	; (8010d70 <disk_write+0x3c>)
 8010d54:	4413      	add	r3, r2
 8010d56:	7a18      	ldrb	r0, [r3, #8]
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	68b9      	ldr	r1, [r7, #8]
 8010d5e:	47a0      	blx	r4
 8010d60:	4603      	mov	r3, r0
 8010d62:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	371c      	adds	r7, #28
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd90      	pop	{r4, r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	200403c8 	.word	0x200403c8

08010d74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b084      	sub	sp, #16
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	603a      	str	r2, [r7, #0]
 8010d7e:	71fb      	strb	r3, [r7, #7]
 8010d80:	460b      	mov	r3, r1
 8010d82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010d84:	79fb      	ldrb	r3, [r7, #7]
 8010d86:	4a09      	ldr	r2, [pc, #36]	; (8010dac <disk_ioctl+0x38>)
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	4413      	add	r3, r2
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	691b      	ldr	r3, [r3, #16]
 8010d90:	79fa      	ldrb	r2, [r7, #7]
 8010d92:	4906      	ldr	r1, [pc, #24]	; (8010dac <disk_ioctl+0x38>)
 8010d94:	440a      	add	r2, r1
 8010d96:	7a10      	ldrb	r0, [r2, #8]
 8010d98:	79b9      	ldrb	r1, [r7, #6]
 8010d9a:	683a      	ldr	r2, [r7, #0]
 8010d9c:	4798      	blx	r3
 8010d9e:	4603      	mov	r3, r0
 8010da0:	73fb      	strb	r3, [r7, #15]
  return res;
 8010da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3710      	adds	r7, #16
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	200403c8 	.word	0x200403c8

08010db0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010db0:	b480      	push	{r7}
 8010db2:	b085      	sub	sp, #20
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	3301      	adds	r3, #1
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010dc0:	89fb      	ldrh	r3, [r7, #14]
 8010dc2:	021b      	lsls	r3, r3, #8
 8010dc4:	b21a      	sxth	r2, r3
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	b21b      	sxth	r3, r3
 8010dcc:	4313      	orrs	r3, r2
 8010dce:	b21b      	sxth	r3, r3
 8010dd0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010dd2:	89fb      	ldrh	r3, [r7, #14]
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3714      	adds	r7, #20
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr

08010de0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010de0:	b480      	push	{r7}
 8010de2:	b085      	sub	sp, #20
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	3303      	adds	r3, #3
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	021b      	lsls	r3, r3, #8
 8010df4:	687a      	ldr	r2, [r7, #4]
 8010df6:	3202      	adds	r2, #2
 8010df8:	7812      	ldrb	r2, [r2, #0]
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	021b      	lsls	r3, r3, #8
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	3201      	adds	r2, #1
 8010e06:	7812      	ldrb	r2, [r2, #0]
 8010e08:	4313      	orrs	r3, r2
 8010e0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	021b      	lsls	r3, r3, #8
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	7812      	ldrb	r2, [r2, #0]
 8010e14:	4313      	orrs	r3, r2
 8010e16:	60fb      	str	r3, [r7, #12]
	return rv;
 8010e18:	68fb      	ldr	r3, [r7, #12]
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3714      	adds	r7, #20
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e24:	4770      	bx	lr

08010e26 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010e26:	b480      	push	{r7}
 8010e28:	b083      	sub	sp, #12
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
 8010e2e:	460b      	mov	r3, r1
 8010e30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	1c5a      	adds	r2, r3, #1
 8010e36:	607a      	str	r2, [r7, #4]
 8010e38:	887a      	ldrh	r2, [r7, #2]
 8010e3a:	b2d2      	uxtb	r2, r2
 8010e3c:	701a      	strb	r2, [r3, #0]
 8010e3e:	887b      	ldrh	r3, [r7, #2]
 8010e40:	0a1b      	lsrs	r3, r3, #8
 8010e42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	1c5a      	adds	r2, r3, #1
 8010e48:	607a      	str	r2, [r7, #4]
 8010e4a:	887a      	ldrh	r2, [r7, #2]
 8010e4c:	b2d2      	uxtb	r2, r2
 8010e4e:	701a      	strb	r2, [r3, #0]
}
 8010e50:	bf00      	nop
 8010e52:	370c      	adds	r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5a:	4770      	bx	lr

08010e5c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	1c5a      	adds	r2, r3, #1
 8010e6a:	607a      	str	r2, [r7, #4]
 8010e6c:	683a      	ldr	r2, [r7, #0]
 8010e6e:	b2d2      	uxtb	r2, r2
 8010e70:	701a      	strb	r2, [r3, #0]
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	0a1b      	lsrs	r3, r3, #8
 8010e76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	1c5a      	adds	r2, r3, #1
 8010e7c:	607a      	str	r2, [r7, #4]
 8010e7e:	683a      	ldr	r2, [r7, #0]
 8010e80:	b2d2      	uxtb	r2, r2
 8010e82:	701a      	strb	r2, [r3, #0]
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	0a1b      	lsrs	r3, r3, #8
 8010e88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	1c5a      	adds	r2, r3, #1
 8010e8e:	607a      	str	r2, [r7, #4]
 8010e90:	683a      	ldr	r2, [r7, #0]
 8010e92:	b2d2      	uxtb	r2, r2
 8010e94:	701a      	strb	r2, [r3, #0]
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	0a1b      	lsrs	r3, r3, #8
 8010e9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	1c5a      	adds	r2, r3, #1
 8010ea0:	607a      	str	r2, [r7, #4]
 8010ea2:	683a      	ldr	r2, [r7, #0]
 8010ea4:	b2d2      	uxtb	r2, r2
 8010ea6:	701a      	strb	r2, [r3, #0]
}
 8010ea8:	bf00      	nop
 8010eaa:	370c      	adds	r7, #12
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010eb4:	b480      	push	{r7}
 8010eb6:	b087      	sub	sp, #28
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60f8      	str	r0, [r7, #12]
 8010ebc:	60b9      	str	r1, [r7, #8]
 8010ebe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d00d      	beq.n	8010eea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010ece:	693a      	ldr	r2, [r7, #16]
 8010ed0:	1c53      	adds	r3, r2, #1
 8010ed2:	613b      	str	r3, [r7, #16]
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	1c59      	adds	r1, r3, #1
 8010ed8:	6179      	str	r1, [r7, #20]
 8010eda:	7812      	ldrb	r2, [r2, #0]
 8010edc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	3b01      	subs	r3, #1
 8010ee2:	607b      	str	r3, [r7, #4]
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d1f1      	bne.n	8010ece <mem_cpy+0x1a>
	}
}
 8010eea:	bf00      	nop
 8010eec:	371c      	adds	r7, #28
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef4:	4770      	bx	lr

08010ef6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010ef6:	b480      	push	{r7}
 8010ef8:	b087      	sub	sp, #28
 8010efa:	af00      	add	r7, sp, #0
 8010efc:	60f8      	str	r0, [r7, #12]
 8010efe:	60b9      	str	r1, [r7, #8]
 8010f00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	1c5a      	adds	r2, r3, #1
 8010f0a:	617a      	str	r2, [r7, #20]
 8010f0c:	68ba      	ldr	r2, [r7, #8]
 8010f0e:	b2d2      	uxtb	r2, r2
 8010f10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	3b01      	subs	r3, #1
 8010f16:	607b      	str	r3, [r7, #4]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d1f3      	bne.n	8010f06 <mem_set+0x10>
}
 8010f1e:	bf00      	nop
 8010f20:	371c      	adds	r7, #28
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr

08010f2a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010f2a:	b480      	push	{r7}
 8010f2c:	b089      	sub	sp, #36	; 0x24
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	60f8      	str	r0, [r7, #12]
 8010f32:	60b9      	str	r1, [r7, #8]
 8010f34:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	61fb      	str	r3, [r7, #28]
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	1c5a      	adds	r2, r3, #1
 8010f46:	61fa      	str	r2, [r7, #28]
 8010f48:	781b      	ldrb	r3, [r3, #0]
 8010f4a:	4619      	mov	r1, r3
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	1c5a      	adds	r2, r3, #1
 8010f50:	61ba      	str	r2, [r7, #24]
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	1acb      	subs	r3, r1, r3
 8010f56:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	607b      	str	r3, [r7, #4]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d002      	beq.n	8010f6a <mem_cmp+0x40>
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d0eb      	beq.n	8010f42 <mem_cmp+0x18>

	return r;
 8010f6a:	697b      	ldr	r3, [r7, #20]
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3724      	adds	r7, #36	; 0x24
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010f82:	e002      	b.n	8010f8a <chk_chr+0x12>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	3301      	adds	r3, #1
 8010f88:	607b      	str	r3, [r7, #4]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d005      	beq.n	8010f9e <chk_chr+0x26>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	781b      	ldrb	r3, [r3, #0]
 8010f96:	461a      	mov	r2, r3
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	4293      	cmp	r3, r2
 8010f9c:	d1f2      	bne.n	8010f84 <chk_chr+0xc>
	return *str;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	781b      	ldrb	r3, [r3, #0]
}
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	370c      	adds	r7, #12
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr
	...

08010fb0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b085      	sub	sp, #20
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
 8010fb8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010fba:	2300      	movs	r3, #0
 8010fbc:	60bb      	str	r3, [r7, #8]
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	60fb      	str	r3, [r7, #12]
 8010fc2:	e029      	b.n	8011018 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010fc4:	4a27      	ldr	r2, [pc, #156]	; (8011064 <chk_lock+0xb4>)
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	011b      	lsls	r3, r3, #4
 8010fca:	4413      	add	r3, r2
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d01d      	beq.n	801100e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010fd2:	4a24      	ldr	r2, [pc, #144]	; (8011064 <chk_lock+0xb4>)
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	011b      	lsls	r3, r3, #4
 8010fd8:	4413      	add	r3, r2
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d116      	bne.n	8011012 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010fe4:	4a1f      	ldr	r2, [pc, #124]	; (8011064 <chk_lock+0xb4>)
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	011b      	lsls	r3, r3, #4
 8010fea:	4413      	add	r3, r2
 8010fec:	3304      	adds	r3, #4
 8010fee:	681a      	ldr	r2, [r3, #0]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d10c      	bne.n	8011012 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010ff8:	4a1a      	ldr	r2, [pc, #104]	; (8011064 <chk_lock+0xb4>)
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	011b      	lsls	r3, r3, #4
 8010ffe:	4413      	add	r3, r2
 8011000:	3308      	adds	r3, #8
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011008:	429a      	cmp	r2, r3
 801100a:	d102      	bne.n	8011012 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801100c:	e007      	b.n	801101e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801100e:	2301      	movs	r3, #1
 8011010:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	3301      	adds	r3, #1
 8011016:	60fb      	str	r3, [r7, #12]
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	2b01      	cmp	r3, #1
 801101c:	d9d2      	bls.n	8010fc4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	2b02      	cmp	r3, #2
 8011022:	d109      	bne.n	8011038 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d102      	bne.n	8011030 <chk_lock+0x80>
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	2b02      	cmp	r3, #2
 801102e:	d101      	bne.n	8011034 <chk_lock+0x84>
 8011030:	2300      	movs	r3, #0
 8011032:	e010      	b.n	8011056 <chk_lock+0xa6>
 8011034:	2312      	movs	r3, #18
 8011036:	e00e      	b.n	8011056 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d108      	bne.n	8011050 <chk_lock+0xa0>
 801103e:	4a09      	ldr	r2, [pc, #36]	; (8011064 <chk_lock+0xb4>)
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	011b      	lsls	r3, r3, #4
 8011044:	4413      	add	r3, r2
 8011046:	330c      	adds	r3, #12
 8011048:	881b      	ldrh	r3, [r3, #0]
 801104a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801104e:	d101      	bne.n	8011054 <chk_lock+0xa4>
 8011050:	2310      	movs	r3, #16
 8011052:	e000      	b.n	8011056 <chk_lock+0xa6>
 8011054:	2300      	movs	r3, #0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3714      	adds	r7, #20
 801105a:	46bd      	mov	sp, r7
 801105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011060:	4770      	bx	lr
 8011062:	bf00      	nop
 8011064:	200403a8 	.word	0x200403a8

08011068 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011068:	b480      	push	{r7}
 801106a:	b083      	sub	sp, #12
 801106c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801106e:	2300      	movs	r3, #0
 8011070:	607b      	str	r3, [r7, #4]
 8011072:	e002      	b.n	801107a <enq_lock+0x12>
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	3301      	adds	r3, #1
 8011078:	607b      	str	r3, [r7, #4]
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2b01      	cmp	r3, #1
 801107e:	d806      	bhi.n	801108e <enq_lock+0x26>
 8011080:	4a09      	ldr	r2, [pc, #36]	; (80110a8 <enq_lock+0x40>)
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	011b      	lsls	r3, r3, #4
 8011086:	4413      	add	r3, r2
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d1f2      	bne.n	8011074 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2b02      	cmp	r3, #2
 8011092:	bf14      	ite	ne
 8011094:	2301      	movne	r3, #1
 8011096:	2300      	moveq	r3, #0
 8011098:	b2db      	uxtb	r3, r3
}
 801109a:	4618      	mov	r0, r3
 801109c:	370c      	adds	r7, #12
 801109e:	46bd      	mov	sp, r7
 80110a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a4:	4770      	bx	lr
 80110a6:	bf00      	nop
 80110a8:	200403a8 	.word	0x200403a8

080110ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b085      	sub	sp, #20
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80110b6:	2300      	movs	r3, #0
 80110b8:	60fb      	str	r3, [r7, #12]
 80110ba:	e01f      	b.n	80110fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80110bc:	4a41      	ldr	r2, [pc, #260]	; (80111c4 <inc_lock+0x118>)
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	011b      	lsls	r3, r3, #4
 80110c2:	4413      	add	r3, r2
 80110c4:	681a      	ldr	r2, [r3, #0]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d113      	bne.n	80110f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80110ce:	4a3d      	ldr	r2, [pc, #244]	; (80111c4 <inc_lock+0x118>)
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	011b      	lsls	r3, r3, #4
 80110d4:	4413      	add	r3, r2
 80110d6:	3304      	adds	r3, #4
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80110de:	429a      	cmp	r2, r3
 80110e0:	d109      	bne.n	80110f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80110e2:	4a38      	ldr	r2, [pc, #224]	; (80111c4 <inc_lock+0x118>)
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	011b      	lsls	r3, r3, #4
 80110e8:	4413      	add	r3, r2
 80110ea:	3308      	adds	r3, #8
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d006      	beq.n	8011104 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	3301      	adds	r3, #1
 80110fa:	60fb      	str	r3, [r7, #12]
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2b01      	cmp	r3, #1
 8011100:	d9dc      	bls.n	80110bc <inc_lock+0x10>
 8011102:	e000      	b.n	8011106 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011104:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2b02      	cmp	r3, #2
 801110a:	d132      	bne.n	8011172 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801110c:	2300      	movs	r3, #0
 801110e:	60fb      	str	r3, [r7, #12]
 8011110:	e002      	b.n	8011118 <inc_lock+0x6c>
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	3301      	adds	r3, #1
 8011116:	60fb      	str	r3, [r7, #12]
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2b01      	cmp	r3, #1
 801111c:	d806      	bhi.n	801112c <inc_lock+0x80>
 801111e:	4a29      	ldr	r2, [pc, #164]	; (80111c4 <inc_lock+0x118>)
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	011b      	lsls	r3, r3, #4
 8011124:	4413      	add	r3, r2
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d1f2      	bne.n	8011112 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	2b02      	cmp	r3, #2
 8011130:	d101      	bne.n	8011136 <inc_lock+0x8a>
 8011132:	2300      	movs	r3, #0
 8011134:	e040      	b.n	80111b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	4922      	ldr	r1, [pc, #136]	; (80111c4 <inc_lock+0x118>)
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	011b      	lsls	r3, r3, #4
 8011140:	440b      	add	r3, r1
 8011142:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	689a      	ldr	r2, [r3, #8]
 8011148:	491e      	ldr	r1, [pc, #120]	; (80111c4 <inc_lock+0x118>)
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	011b      	lsls	r3, r3, #4
 801114e:	440b      	add	r3, r1
 8011150:	3304      	adds	r3, #4
 8011152:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	695a      	ldr	r2, [r3, #20]
 8011158:	491a      	ldr	r1, [pc, #104]	; (80111c4 <inc_lock+0x118>)
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	011b      	lsls	r3, r3, #4
 801115e:	440b      	add	r3, r1
 8011160:	3308      	adds	r3, #8
 8011162:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011164:	4a17      	ldr	r2, [pc, #92]	; (80111c4 <inc_lock+0x118>)
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	011b      	lsls	r3, r3, #4
 801116a:	4413      	add	r3, r2
 801116c:	330c      	adds	r3, #12
 801116e:	2200      	movs	r2, #0
 8011170:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d009      	beq.n	801118c <inc_lock+0xe0>
 8011178:	4a12      	ldr	r2, [pc, #72]	; (80111c4 <inc_lock+0x118>)
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	011b      	lsls	r3, r3, #4
 801117e:	4413      	add	r3, r2
 8011180:	330c      	adds	r3, #12
 8011182:	881b      	ldrh	r3, [r3, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d001      	beq.n	801118c <inc_lock+0xe0>
 8011188:	2300      	movs	r3, #0
 801118a:	e015      	b.n	80111b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d108      	bne.n	80111a4 <inc_lock+0xf8>
 8011192:	4a0c      	ldr	r2, [pc, #48]	; (80111c4 <inc_lock+0x118>)
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	011b      	lsls	r3, r3, #4
 8011198:	4413      	add	r3, r2
 801119a:	330c      	adds	r3, #12
 801119c:	881b      	ldrh	r3, [r3, #0]
 801119e:	3301      	adds	r3, #1
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	e001      	b.n	80111a8 <inc_lock+0xfc>
 80111a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80111a8:	4906      	ldr	r1, [pc, #24]	; (80111c4 <inc_lock+0x118>)
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	011b      	lsls	r3, r3, #4
 80111ae:	440b      	add	r3, r1
 80111b0:	330c      	adds	r3, #12
 80111b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	3301      	adds	r3, #1
}
 80111b8:	4618      	mov	r0, r3
 80111ba:	3714      	adds	r7, #20
 80111bc:	46bd      	mov	sp, r7
 80111be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c2:	4770      	bx	lr
 80111c4:	200403a8 	.word	0x200403a8

080111c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b085      	sub	sp, #20
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	3b01      	subs	r3, #1
 80111d4:	607b      	str	r3, [r7, #4]
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d825      	bhi.n	8011228 <dec_lock+0x60>
		n = Files[i].ctr;
 80111dc:	4a17      	ldr	r2, [pc, #92]	; (801123c <dec_lock+0x74>)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	011b      	lsls	r3, r3, #4
 80111e2:	4413      	add	r3, r2
 80111e4:	330c      	adds	r3, #12
 80111e6:	881b      	ldrh	r3, [r3, #0]
 80111e8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80111ea:	89fb      	ldrh	r3, [r7, #14]
 80111ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111f0:	d101      	bne.n	80111f6 <dec_lock+0x2e>
 80111f2:	2300      	movs	r3, #0
 80111f4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80111f6:	89fb      	ldrh	r3, [r7, #14]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d002      	beq.n	8011202 <dec_lock+0x3a>
 80111fc:	89fb      	ldrh	r3, [r7, #14]
 80111fe:	3b01      	subs	r3, #1
 8011200:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011202:	4a0e      	ldr	r2, [pc, #56]	; (801123c <dec_lock+0x74>)
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	011b      	lsls	r3, r3, #4
 8011208:	4413      	add	r3, r2
 801120a:	330c      	adds	r3, #12
 801120c:	89fa      	ldrh	r2, [r7, #14]
 801120e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011210:	89fb      	ldrh	r3, [r7, #14]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d105      	bne.n	8011222 <dec_lock+0x5a>
 8011216:	4a09      	ldr	r2, [pc, #36]	; (801123c <dec_lock+0x74>)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	011b      	lsls	r3, r3, #4
 801121c:	4413      	add	r3, r2
 801121e:	2200      	movs	r2, #0
 8011220:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011222:	2300      	movs	r3, #0
 8011224:	737b      	strb	r3, [r7, #13]
 8011226:	e001      	b.n	801122c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011228:	2302      	movs	r3, #2
 801122a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801122c:	7b7b      	ldrb	r3, [r7, #13]
}
 801122e:	4618      	mov	r0, r3
 8011230:	3714      	adds	r7, #20
 8011232:	46bd      	mov	sp, r7
 8011234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011238:	4770      	bx	lr
 801123a:	bf00      	nop
 801123c:	200403a8 	.word	0x200403a8

08011240 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011240:	b480      	push	{r7}
 8011242:	b085      	sub	sp, #20
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011248:	2300      	movs	r3, #0
 801124a:	60fb      	str	r3, [r7, #12]
 801124c:	e010      	b.n	8011270 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801124e:	4a0d      	ldr	r2, [pc, #52]	; (8011284 <clear_lock+0x44>)
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	011b      	lsls	r3, r3, #4
 8011254:	4413      	add	r3, r2
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	429a      	cmp	r2, r3
 801125c:	d105      	bne.n	801126a <clear_lock+0x2a>
 801125e:	4a09      	ldr	r2, [pc, #36]	; (8011284 <clear_lock+0x44>)
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	011b      	lsls	r3, r3, #4
 8011264:	4413      	add	r3, r2
 8011266:	2200      	movs	r2, #0
 8011268:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	3301      	adds	r3, #1
 801126e:	60fb      	str	r3, [r7, #12]
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	2b01      	cmp	r3, #1
 8011274:	d9eb      	bls.n	801124e <clear_lock+0xe>
	}
}
 8011276:	bf00      	nop
 8011278:	3714      	adds	r7, #20
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop
 8011284:	200403a8 	.word	0x200403a8

08011288 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b086      	sub	sp, #24
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011290:	2300      	movs	r3, #0
 8011292:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	78db      	ldrb	r3, [r3, #3]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d034      	beq.n	8011306 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112a0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	7858      	ldrb	r0, [r3, #1]
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80112ac:	2301      	movs	r3, #1
 80112ae:	697a      	ldr	r2, [r7, #20]
 80112b0:	f7ff fd40 	bl	8010d34 <disk_write>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d002      	beq.n	80112c0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80112ba:	2301      	movs	r3, #1
 80112bc:	73fb      	strb	r3, [r7, #15]
 80112be:	e022      	b.n	8011306 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2200      	movs	r2, #0
 80112c4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112ca:	697a      	ldr	r2, [r7, #20]
 80112cc:	1ad2      	subs	r2, r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6a1b      	ldr	r3, [r3, #32]
 80112d2:	429a      	cmp	r2, r3
 80112d4:	d217      	bcs.n	8011306 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	789b      	ldrb	r3, [r3, #2]
 80112da:	613b      	str	r3, [r7, #16]
 80112dc:	e010      	b.n	8011300 <sync_window+0x78>
					wsect += fs->fsize;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6a1b      	ldr	r3, [r3, #32]
 80112e2:	697a      	ldr	r2, [r7, #20]
 80112e4:	4413      	add	r3, r2
 80112e6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	7858      	ldrb	r0, [r3, #1]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80112f2:	2301      	movs	r3, #1
 80112f4:	697a      	ldr	r2, [r7, #20]
 80112f6:	f7ff fd1d 	bl	8010d34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80112fa:	693b      	ldr	r3, [r7, #16]
 80112fc:	3b01      	subs	r3, #1
 80112fe:	613b      	str	r3, [r7, #16]
 8011300:	693b      	ldr	r3, [r7, #16]
 8011302:	2b01      	cmp	r3, #1
 8011304:	d8eb      	bhi.n	80112de <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011306:	7bfb      	ldrb	r3, [r7, #15]
}
 8011308:	4618      	mov	r0, r3
 801130a:	3718      	adds	r7, #24
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b084      	sub	sp, #16
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
 8011318:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801131a:	2300      	movs	r3, #0
 801131c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011322:	683a      	ldr	r2, [r7, #0]
 8011324:	429a      	cmp	r2, r3
 8011326:	d01b      	beq.n	8011360 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f7ff ffad 	bl	8011288 <sync_window>
 801132e:	4603      	mov	r3, r0
 8011330:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011332:	7bfb      	ldrb	r3, [r7, #15]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d113      	bne.n	8011360 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	7858      	ldrb	r0, [r3, #1]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011342:	2301      	movs	r3, #1
 8011344:	683a      	ldr	r2, [r7, #0]
 8011346:	f7ff fcd5 	bl	8010cf4 <disk_read>
 801134a:	4603      	mov	r3, r0
 801134c:	2b00      	cmp	r3, #0
 801134e:	d004      	beq.n	801135a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011350:	f04f 33ff 	mov.w	r3, #4294967295
 8011354:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011356:	2301      	movs	r3, #1
 8011358:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	683a      	ldr	r2, [r7, #0]
 801135e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011360:	7bfb      	ldrb	r3, [r7, #15]
}
 8011362:	4618      	mov	r0, r3
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
	...

0801136c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f7ff ff87 	bl	8011288 <sync_window>
 801137a:	4603      	mov	r3, r0
 801137c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801137e:	7bfb      	ldrb	r3, [r7, #15]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d159      	bne.n	8011438 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	2b03      	cmp	r3, #3
 801138a:	d149      	bne.n	8011420 <sync_fs+0xb4>
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	791b      	ldrb	r3, [r3, #4]
 8011390:	2b01      	cmp	r3, #1
 8011392:	d145      	bne.n	8011420 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	899b      	ldrh	r3, [r3, #12]
 801139e:	461a      	mov	r2, r3
 80113a0:	2100      	movs	r1, #0
 80113a2:	f7ff fda8 	bl	8010ef6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	3338      	adds	r3, #56	; 0x38
 80113aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80113ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7ff fd37 	bl	8010e26 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	3338      	adds	r3, #56	; 0x38
 80113bc:	4921      	ldr	r1, [pc, #132]	; (8011444 <sync_fs+0xd8>)
 80113be:	4618      	mov	r0, r3
 80113c0:	f7ff fd4c 	bl	8010e5c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	3338      	adds	r3, #56	; 0x38
 80113c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80113cc:	491e      	ldr	r1, [pc, #120]	; (8011448 <sync_fs+0xdc>)
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7ff fd44 	bl	8010e5c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	3338      	adds	r3, #56	; 0x38
 80113d8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	695b      	ldr	r3, [r3, #20]
 80113e0:	4619      	mov	r1, r3
 80113e2:	4610      	mov	r0, r2
 80113e4:	f7ff fd3a 	bl	8010e5c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	3338      	adds	r3, #56	; 0x38
 80113ec:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	691b      	ldr	r3, [r3, #16]
 80113f4:	4619      	mov	r1, r3
 80113f6:	4610      	mov	r0, r2
 80113f8:	f7ff fd30 	bl	8010e5c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011400:	1c5a      	adds	r2, r3, #1
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	7858      	ldrb	r0, [r3, #1]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011414:	2301      	movs	r3, #1
 8011416:	f7ff fc8d 	bl	8010d34 <disk_write>
			fs->fsi_flag = 0;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2200      	movs	r2, #0
 801141e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	785b      	ldrb	r3, [r3, #1]
 8011424:	2200      	movs	r2, #0
 8011426:	2100      	movs	r1, #0
 8011428:	4618      	mov	r0, r3
 801142a:	f7ff fca3 	bl	8010d74 <disk_ioctl>
 801142e:	4603      	mov	r3, r0
 8011430:	2b00      	cmp	r3, #0
 8011432:	d001      	beq.n	8011438 <sync_fs+0xcc>
 8011434:	2301      	movs	r3, #1
 8011436:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011438:	7bfb      	ldrb	r3, [r7, #15]
}
 801143a:	4618      	mov	r0, r3
 801143c:	3710      	adds	r7, #16
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	41615252 	.word	0x41615252
 8011448:	61417272 	.word	0x61417272

0801144c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801144c:	b480      	push	{r7}
 801144e:	b083      	sub	sp, #12
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	3b02      	subs	r3, #2
 801145a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	69db      	ldr	r3, [r3, #28]
 8011460:	3b02      	subs	r3, #2
 8011462:	683a      	ldr	r2, [r7, #0]
 8011464:	429a      	cmp	r2, r3
 8011466:	d301      	bcc.n	801146c <clust2sect+0x20>
 8011468:	2300      	movs	r3, #0
 801146a:	e008      	b.n	801147e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	895b      	ldrh	r3, [r3, #10]
 8011470:	461a      	mov	r2, r3
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	fb03 f202 	mul.w	r2, r3, r2
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801147c:	4413      	add	r3, r2
}
 801147e:	4618      	mov	r0, r3
 8011480:	370c      	adds	r7, #12
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b086      	sub	sp, #24
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
 8011492:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	2b01      	cmp	r3, #1
 801149e:	d904      	bls.n	80114aa <get_fat+0x20>
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	69db      	ldr	r3, [r3, #28]
 80114a4:	683a      	ldr	r2, [r7, #0]
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d302      	bcc.n	80114b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80114aa:	2301      	movs	r3, #1
 80114ac:	617b      	str	r3, [r7, #20]
 80114ae:	e0b7      	b.n	8011620 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80114b0:	f04f 33ff 	mov.w	r3, #4294967295
 80114b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	2b02      	cmp	r3, #2
 80114bc:	d05a      	beq.n	8011574 <get_fat+0xea>
 80114be:	2b03      	cmp	r3, #3
 80114c0:	d07d      	beq.n	80115be <get_fat+0x134>
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	f040 80a2 	bne.w	801160c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	60fb      	str	r3, [r7, #12]
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	085b      	lsrs	r3, r3, #1
 80114d0:	68fa      	ldr	r2, [r7, #12]
 80114d2:	4413      	add	r3, r2
 80114d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	899b      	ldrh	r3, [r3, #12]
 80114de:	4619      	mov	r1, r3
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80114e6:	4413      	add	r3, r2
 80114e8:	4619      	mov	r1, r3
 80114ea:	6938      	ldr	r0, [r7, #16]
 80114ec:	f7ff ff10 	bl	8011310 <move_window>
 80114f0:	4603      	mov	r3, r0
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f040 808d 	bne.w	8011612 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	1c5a      	adds	r2, r3, #1
 80114fc:	60fa      	str	r2, [r7, #12]
 80114fe:	693a      	ldr	r2, [r7, #16]
 8011500:	8992      	ldrh	r2, [r2, #12]
 8011502:	fbb3 f1f2 	udiv	r1, r3, r2
 8011506:	fb02 f201 	mul.w	r2, r2, r1
 801150a:	1a9b      	subs	r3, r3, r2
 801150c:	693a      	ldr	r2, [r7, #16]
 801150e:	4413      	add	r3, r2
 8011510:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011514:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	899b      	ldrh	r3, [r3, #12]
 801151e:	4619      	mov	r1, r3
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	fbb3 f3f1 	udiv	r3, r3, r1
 8011526:	4413      	add	r3, r2
 8011528:	4619      	mov	r1, r3
 801152a:	6938      	ldr	r0, [r7, #16]
 801152c:	f7ff fef0 	bl	8011310 <move_window>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d16f      	bne.n	8011616 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	899b      	ldrh	r3, [r3, #12]
 801153a:	461a      	mov	r2, r3
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011542:	fb02 f201 	mul.w	r2, r2, r1
 8011546:	1a9b      	subs	r3, r3, r2
 8011548:	693a      	ldr	r2, [r7, #16]
 801154a:	4413      	add	r3, r2
 801154c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011550:	021b      	lsls	r3, r3, #8
 8011552:	461a      	mov	r2, r3
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	4313      	orrs	r3, r2
 8011558:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	f003 0301 	and.w	r3, r3, #1
 8011560:	2b00      	cmp	r3, #0
 8011562:	d002      	beq.n	801156a <get_fat+0xe0>
 8011564:	68bb      	ldr	r3, [r7, #8]
 8011566:	091b      	lsrs	r3, r3, #4
 8011568:	e002      	b.n	8011570 <get_fat+0xe6>
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011570:	617b      	str	r3, [r7, #20]
			break;
 8011572:	e055      	b.n	8011620 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	899b      	ldrh	r3, [r3, #12]
 801157c:	085b      	lsrs	r3, r3, #1
 801157e:	b29b      	uxth	r3, r3
 8011580:	4619      	mov	r1, r3
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	fbb3 f3f1 	udiv	r3, r3, r1
 8011588:	4413      	add	r3, r2
 801158a:	4619      	mov	r1, r3
 801158c:	6938      	ldr	r0, [r7, #16]
 801158e:	f7ff febf 	bl	8011310 <move_window>
 8011592:	4603      	mov	r3, r0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d140      	bne.n	801161a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	005b      	lsls	r3, r3, #1
 80115a2:	693a      	ldr	r2, [r7, #16]
 80115a4:	8992      	ldrh	r2, [r2, #12]
 80115a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80115aa:	fb02 f200 	mul.w	r2, r2, r0
 80115ae:	1a9b      	subs	r3, r3, r2
 80115b0:	440b      	add	r3, r1
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7ff fbfc 	bl	8010db0 <ld_word>
 80115b8:	4603      	mov	r3, r0
 80115ba:	617b      	str	r3, [r7, #20]
			break;
 80115bc:	e030      	b.n	8011620 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	899b      	ldrh	r3, [r3, #12]
 80115c6:	089b      	lsrs	r3, r3, #2
 80115c8:	b29b      	uxth	r3, r3
 80115ca:	4619      	mov	r1, r3
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80115d2:	4413      	add	r3, r2
 80115d4:	4619      	mov	r1, r3
 80115d6:	6938      	ldr	r0, [r7, #16]
 80115d8:	f7ff fe9a 	bl	8011310 <move_window>
 80115dc:	4603      	mov	r3, r0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d11d      	bne.n	801161e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	009b      	lsls	r3, r3, #2
 80115ec:	693a      	ldr	r2, [r7, #16]
 80115ee:	8992      	ldrh	r2, [r2, #12]
 80115f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80115f4:	fb02 f200 	mul.w	r2, r2, r0
 80115f8:	1a9b      	subs	r3, r3, r2
 80115fa:	440b      	add	r3, r1
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7ff fbef 	bl	8010de0 <ld_dword>
 8011602:	4603      	mov	r3, r0
 8011604:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011608:	617b      	str	r3, [r7, #20]
			break;
 801160a:	e009      	b.n	8011620 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801160c:	2301      	movs	r3, #1
 801160e:	617b      	str	r3, [r7, #20]
 8011610:	e006      	b.n	8011620 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011612:	bf00      	nop
 8011614:	e004      	b.n	8011620 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011616:	bf00      	nop
 8011618:	e002      	b.n	8011620 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801161a:	bf00      	nop
 801161c:	e000      	b.n	8011620 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801161e:	bf00      	nop
		}
	}

	return val;
 8011620:	697b      	ldr	r3, [r7, #20]
}
 8011622:	4618      	mov	r0, r3
 8011624:	3718      	adds	r7, #24
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}

0801162a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801162a:	b590      	push	{r4, r7, lr}
 801162c:	b089      	sub	sp, #36	; 0x24
 801162e:	af00      	add	r7, sp, #0
 8011630:	60f8      	str	r0, [r7, #12]
 8011632:	60b9      	str	r1, [r7, #8]
 8011634:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011636:	2302      	movs	r3, #2
 8011638:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	2b01      	cmp	r3, #1
 801163e:	f240 8106 	bls.w	801184e <put_fat+0x224>
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	69db      	ldr	r3, [r3, #28]
 8011646:	68ba      	ldr	r2, [r7, #8]
 8011648:	429a      	cmp	r2, r3
 801164a:	f080 8100 	bcs.w	801184e <put_fat+0x224>
		switch (fs->fs_type) {
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	2b02      	cmp	r3, #2
 8011654:	f000 8088 	beq.w	8011768 <put_fat+0x13e>
 8011658:	2b03      	cmp	r3, #3
 801165a:	f000 80b0 	beq.w	80117be <put_fat+0x194>
 801165e:	2b01      	cmp	r3, #1
 8011660:	f040 80f5 	bne.w	801184e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	61bb      	str	r3, [r7, #24]
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	085b      	lsrs	r3, r3, #1
 801166c:	69ba      	ldr	r2, [r7, #24]
 801166e:	4413      	add	r3, r2
 8011670:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	899b      	ldrh	r3, [r3, #12]
 801167a:	4619      	mov	r1, r3
 801167c:	69bb      	ldr	r3, [r7, #24]
 801167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011682:	4413      	add	r3, r2
 8011684:	4619      	mov	r1, r3
 8011686:	68f8      	ldr	r0, [r7, #12]
 8011688:	f7ff fe42 	bl	8011310 <move_window>
 801168c:	4603      	mov	r3, r0
 801168e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011690:	7ffb      	ldrb	r3, [r7, #31]
 8011692:	2b00      	cmp	r3, #0
 8011694:	f040 80d4 	bne.w	8011840 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801169e:	69bb      	ldr	r3, [r7, #24]
 80116a0:	1c5a      	adds	r2, r3, #1
 80116a2:	61ba      	str	r2, [r7, #24]
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	8992      	ldrh	r2, [r2, #12]
 80116a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80116ac:	fb02 f200 	mul.w	r2, r2, r0
 80116b0:	1a9b      	subs	r3, r3, r2
 80116b2:	440b      	add	r3, r1
 80116b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	f003 0301 	and.w	r3, r3, #1
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00d      	beq.n	80116dc <put_fat+0xb2>
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	b25b      	sxtb	r3, r3
 80116c6:	f003 030f 	and.w	r3, r3, #15
 80116ca:	b25a      	sxtb	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	011b      	lsls	r3, r3, #4
 80116d2:	b25b      	sxtb	r3, r3
 80116d4:	4313      	orrs	r3, r2
 80116d6:	b25b      	sxtb	r3, r3
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	e001      	b.n	80116e0 <put_fat+0xb6>
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	b2db      	uxtb	r3, r3
 80116e0:	697a      	ldr	r2, [r7, #20]
 80116e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2201      	movs	r2, #1
 80116e8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	899b      	ldrh	r3, [r3, #12]
 80116f2:	4619      	mov	r1, r3
 80116f4:	69bb      	ldr	r3, [r7, #24]
 80116f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80116fa:	4413      	add	r3, r2
 80116fc:	4619      	mov	r1, r3
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	f7ff fe06 	bl	8011310 <move_window>
 8011704:	4603      	mov	r3, r0
 8011706:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011708:	7ffb      	ldrb	r3, [r7, #31]
 801170a:	2b00      	cmp	r3, #0
 801170c:	f040 809a 	bne.w	8011844 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	899b      	ldrh	r3, [r3, #12]
 801171a:	461a      	mov	r2, r3
 801171c:	69bb      	ldr	r3, [r7, #24]
 801171e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011722:	fb02 f200 	mul.w	r2, r2, r0
 8011726:	1a9b      	subs	r3, r3, r2
 8011728:	440b      	add	r3, r1
 801172a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	f003 0301 	and.w	r3, r3, #1
 8011732:	2b00      	cmp	r3, #0
 8011734:	d003      	beq.n	801173e <put_fat+0x114>
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	091b      	lsrs	r3, r3, #4
 801173a:	b2db      	uxtb	r3, r3
 801173c:	e00e      	b.n	801175c <put_fat+0x132>
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	b25b      	sxtb	r3, r3
 8011744:	f023 030f 	bic.w	r3, r3, #15
 8011748:	b25a      	sxtb	r2, r3
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	0a1b      	lsrs	r3, r3, #8
 801174e:	b25b      	sxtb	r3, r3
 8011750:	f003 030f 	and.w	r3, r3, #15
 8011754:	b25b      	sxtb	r3, r3
 8011756:	4313      	orrs	r3, r2
 8011758:	b25b      	sxtb	r3, r3
 801175a:	b2db      	uxtb	r3, r3
 801175c:	697a      	ldr	r2, [r7, #20]
 801175e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2201      	movs	r2, #1
 8011764:	70da      	strb	r2, [r3, #3]
			break;
 8011766:	e072      	b.n	801184e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	899b      	ldrh	r3, [r3, #12]
 8011770:	085b      	lsrs	r3, r3, #1
 8011772:	b29b      	uxth	r3, r3
 8011774:	4619      	mov	r1, r3
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	fbb3 f3f1 	udiv	r3, r3, r1
 801177c:	4413      	add	r3, r2
 801177e:	4619      	mov	r1, r3
 8011780:	68f8      	ldr	r0, [r7, #12]
 8011782:	f7ff fdc5 	bl	8011310 <move_window>
 8011786:	4603      	mov	r3, r0
 8011788:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801178a:	7ffb      	ldrb	r3, [r7, #31]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d15b      	bne.n	8011848 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	005b      	lsls	r3, r3, #1
 801179a:	68fa      	ldr	r2, [r7, #12]
 801179c:	8992      	ldrh	r2, [r2, #12]
 801179e:	fbb3 f0f2 	udiv	r0, r3, r2
 80117a2:	fb02 f200 	mul.w	r2, r2, r0
 80117a6:	1a9b      	subs	r3, r3, r2
 80117a8:	440b      	add	r3, r1
 80117aa:	687a      	ldr	r2, [r7, #4]
 80117ac:	b292      	uxth	r2, r2
 80117ae:	4611      	mov	r1, r2
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7ff fb38 	bl	8010e26 <st_word>
			fs->wflag = 1;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2201      	movs	r2, #1
 80117ba:	70da      	strb	r2, [r3, #3]
			break;
 80117bc:	e047      	b.n	801184e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	899b      	ldrh	r3, [r3, #12]
 80117c6:	089b      	lsrs	r3, r3, #2
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	4619      	mov	r1, r3
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80117d2:	4413      	add	r3, r2
 80117d4:	4619      	mov	r1, r3
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	f7ff fd9a 	bl	8011310 <move_window>
 80117dc:	4603      	mov	r3, r0
 80117de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80117e0:	7ffb      	ldrb	r3, [r7, #31]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d132      	bne.n	801184c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	68fa      	ldr	r2, [r7, #12]
 80117f8:	8992      	ldrh	r2, [r2, #12]
 80117fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80117fe:	fb02 f200 	mul.w	r2, r2, r0
 8011802:	1a9b      	subs	r3, r3, r2
 8011804:	440b      	add	r3, r1
 8011806:	4618      	mov	r0, r3
 8011808:	f7ff faea 	bl	8010de0 <ld_dword>
 801180c:	4603      	mov	r3, r0
 801180e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011812:	4323      	orrs	r3, r4
 8011814:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	009b      	lsls	r3, r3, #2
 8011820:	68fa      	ldr	r2, [r7, #12]
 8011822:	8992      	ldrh	r2, [r2, #12]
 8011824:	fbb3 f0f2 	udiv	r0, r3, r2
 8011828:	fb02 f200 	mul.w	r2, r2, r0
 801182c:	1a9b      	subs	r3, r3, r2
 801182e:	440b      	add	r3, r1
 8011830:	6879      	ldr	r1, [r7, #4]
 8011832:	4618      	mov	r0, r3
 8011834:	f7ff fb12 	bl	8010e5c <st_dword>
			fs->wflag = 1;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2201      	movs	r2, #1
 801183c:	70da      	strb	r2, [r3, #3]
			break;
 801183e:	e006      	b.n	801184e <put_fat+0x224>
			if (res != FR_OK) break;
 8011840:	bf00      	nop
 8011842:	e004      	b.n	801184e <put_fat+0x224>
			if (res != FR_OK) break;
 8011844:	bf00      	nop
 8011846:	e002      	b.n	801184e <put_fat+0x224>
			if (res != FR_OK) break;
 8011848:	bf00      	nop
 801184a:	e000      	b.n	801184e <put_fat+0x224>
			if (res != FR_OK) break;
 801184c:	bf00      	nop
		}
	}
	return res;
 801184e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011850:	4618      	mov	r0, r3
 8011852:	3724      	adds	r7, #36	; 0x24
 8011854:	46bd      	mov	sp, r7
 8011856:	bd90      	pop	{r4, r7, pc}

08011858 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b088      	sub	sp, #32
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011864:	2300      	movs	r3, #0
 8011866:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	2b01      	cmp	r3, #1
 8011872:	d904      	bls.n	801187e <remove_chain+0x26>
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	69db      	ldr	r3, [r3, #28]
 8011878:	68ba      	ldr	r2, [r7, #8]
 801187a:	429a      	cmp	r2, r3
 801187c:	d301      	bcc.n	8011882 <remove_chain+0x2a>
 801187e:	2302      	movs	r3, #2
 8011880:	e04b      	b.n	801191a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d00c      	beq.n	80118a2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011888:	f04f 32ff 	mov.w	r2, #4294967295
 801188c:	6879      	ldr	r1, [r7, #4]
 801188e:	69b8      	ldr	r0, [r7, #24]
 8011890:	f7ff fecb 	bl	801162a <put_fat>
 8011894:	4603      	mov	r3, r0
 8011896:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011898:	7ffb      	ldrb	r3, [r7, #31]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d001      	beq.n	80118a2 <remove_chain+0x4a>
 801189e:	7ffb      	ldrb	r3, [r7, #31]
 80118a0:	e03b      	b.n	801191a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80118a2:	68b9      	ldr	r1, [r7, #8]
 80118a4:	68f8      	ldr	r0, [r7, #12]
 80118a6:	f7ff fdf0 	bl	801148a <get_fat>
 80118aa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d031      	beq.n	8011916 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	d101      	bne.n	80118bc <remove_chain+0x64>
 80118b8:	2302      	movs	r3, #2
 80118ba:	e02e      	b.n	801191a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118c2:	d101      	bne.n	80118c8 <remove_chain+0x70>
 80118c4:	2301      	movs	r3, #1
 80118c6:	e028      	b.n	801191a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80118c8:	2200      	movs	r2, #0
 80118ca:	68b9      	ldr	r1, [r7, #8]
 80118cc:	69b8      	ldr	r0, [r7, #24]
 80118ce:	f7ff feac 	bl	801162a <put_fat>
 80118d2:	4603      	mov	r3, r0
 80118d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80118d6:	7ffb      	ldrb	r3, [r7, #31]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d001      	beq.n	80118e0 <remove_chain+0x88>
 80118dc:	7ffb      	ldrb	r3, [r7, #31]
 80118de:	e01c      	b.n	801191a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	695a      	ldr	r2, [r3, #20]
 80118e4:	69bb      	ldr	r3, [r7, #24]
 80118e6:	69db      	ldr	r3, [r3, #28]
 80118e8:	3b02      	subs	r3, #2
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d20b      	bcs.n	8011906 <remove_chain+0xae>
			fs->free_clst++;
 80118ee:	69bb      	ldr	r3, [r7, #24]
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	1c5a      	adds	r2, r3, #1
 80118f4:	69bb      	ldr	r3, [r7, #24]
 80118f6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80118f8:	69bb      	ldr	r3, [r7, #24]
 80118fa:	791b      	ldrb	r3, [r3, #4]
 80118fc:	f043 0301 	orr.w	r3, r3, #1
 8011900:	b2da      	uxtb	r2, r3
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801190a:	69bb      	ldr	r3, [r7, #24]
 801190c:	69db      	ldr	r3, [r3, #28]
 801190e:	68ba      	ldr	r2, [r7, #8]
 8011910:	429a      	cmp	r2, r3
 8011912:	d3c6      	bcc.n	80118a2 <remove_chain+0x4a>
 8011914:	e000      	b.n	8011918 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011916:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011918:	2300      	movs	r3, #0
}
 801191a:	4618      	mov	r0, r3
 801191c:	3720      	adds	r7, #32
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}

08011922 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011922:	b580      	push	{r7, lr}
 8011924:	b088      	sub	sp, #32
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
 801192a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d10d      	bne.n	8011954 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	691b      	ldr	r3, [r3, #16]
 801193c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801193e:	69bb      	ldr	r3, [r7, #24]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d004      	beq.n	801194e <create_chain+0x2c>
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	69db      	ldr	r3, [r3, #28]
 8011948:	69ba      	ldr	r2, [r7, #24]
 801194a:	429a      	cmp	r2, r3
 801194c:	d31b      	bcc.n	8011986 <create_chain+0x64>
 801194e:	2301      	movs	r3, #1
 8011950:	61bb      	str	r3, [r7, #24]
 8011952:	e018      	b.n	8011986 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011954:	6839      	ldr	r1, [r7, #0]
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f7ff fd97 	bl	801148a <get_fat>
 801195c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	2b01      	cmp	r3, #1
 8011962:	d801      	bhi.n	8011968 <create_chain+0x46>
 8011964:	2301      	movs	r3, #1
 8011966:	e070      	b.n	8011a4a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801196e:	d101      	bne.n	8011974 <create_chain+0x52>
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	e06a      	b.n	8011a4a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	69db      	ldr	r3, [r3, #28]
 8011978:	68fa      	ldr	r2, [r7, #12]
 801197a:	429a      	cmp	r2, r3
 801197c:	d201      	bcs.n	8011982 <create_chain+0x60>
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	e063      	b.n	8011a4a <create_chain+0x128>
		scl = clst;
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011986:	69bb      	ldr	r3, [r7, #24]
 8011988:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	3301      	adds	r3, #1
 801198e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	69db      	ldr	r3, [r3, #28]
 8011994:	69fa      	ldr	r2, [r7, #28]
 8011996:	429a      	cmp	r2, r3
 8011998:	d307      	bcc.n	80119aa <create_chain+0x88>
				ncl = 2;
 801199a:	2302      	movs	r3, #2
 801199c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801199e:	69fa      	ldr	r2, [r7, #28]
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d901      	bls.n	80119aa <create_chain+0x88>
 80119a6:	2300      	movs	r3, #0
 80119a8:	e04f      	b.n	8011a4a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80119aa:	69f9      	ldr	r1, [r7, #28]
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f7ff fd6c 	bl	801148a <get_fat>
 80119b2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d00e      	beq.n	80119d8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d003      	beq.n	80119c8 <create_chain+0xa6>
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119c6:	d101      	bne.n	80119cc <create_chain+0xaa>
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	e03e      	b.n	8011a4a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80119cc:	69fa      	ldr	r2, [r7, #28]
 80119ce:	69bb      	ldr	r3, [r7, #24]
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d1da      	bne.n	801198a <create_chain+0x68>
 80119d4:	2300      	movs	r3, #0
 80119d6:	e038      	b.n	8011a4a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80119d8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80119da:	f04f 32ff 	mov.w	r2, #4294967295
 80119de:	69f9      	ldr	r1, [r7, #28]
 80119e0:	6938      	ldr	r0, [r7, #16]
 80119e2:	f7ff fe22 	bl	801162a <put_fat>
 80119e6:	4603      	mov	r3, r0
 80119e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80119ea:	7dfb      	ldrb	r3, [r7, #23]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d109      	bne.n	8011a04 <create_chain+0xe2>
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d006      	beq.n	8011a04 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80119f6:	69fa      	ldr	r2, [r7, #28]
 80119f8:	6839      	ldr	r1, [r7, #0]
 80119fa:	6938      	ldr	r0, [r7, #16]
 80119fc:	f7ff fe15 	bl	801162a <put_fat>
 8011a00:	4603      	mov	r3, r0
 8011a02:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011a04:	7dfb      	ldrb	r3, [r7, #23]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d116      	bne.n	8011a38 <create_chain+0x116>
		fs->last_clst = ncl;
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	69fa      	ldr	r2, [r7, #28]
 8011a0e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	695a      	ldr	r2, [r3, #20]
 8011a14:	693b      	ldr	r3, [r7, #16]
 8011a16:	69db      	ldr	r3, [r3, #28]
 8011a18:	3b02      	subs	r3, #2
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d804      	bhi.n	8011a28 <create_chain+0x106>
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	695b      	ldr	r3, [r3, #20]
 8011a22:	1e5a      	subs	r2, r3, #1
 8011a24:	693b      	ldr	r3, [r7, #16]
 8011a26:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	791b      	ldrb	r3, [r3, #4]
 8011a2c:	f043 0301 	orr.w	r3, r3, #1
 8011a30:	b2da      	uxtb	r2, r3
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	711a      	strb	r2, [r3, #4]
 8011a36:	e007      	b.n	8011a48 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011a38:	7dfb      	ldrb	r3, [r7, #23]
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d102      	bne.n	8011a44 <create_chain+0x122>
 8011a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a42:	e000      	b.n	8011a46 <create_chain+0x124>
 8011a44:	2301      	movs	r3, #1
 8011a46:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011a48:	69fb      	ldr	r3, [r7, #28]
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3720      	adds	r7, #32
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011a52:	b480      	push	{r7}
 8011a54:	b087      	sub	sp, #28
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
 8011a5a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a66:	3304      	adds	r3, #4
 8011a68:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	899b      	ldrh	r3, [r3, #12]
 8011a6e:	461a      	mov	r2, r3
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a76:	68fa      	ldr	r2, [r7, #12]
 8011a78:	8952      	ldrh	r2, [r2, #10]
 8011a7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a7e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	1d1a      	adds	r2, r3, #4
 8011a84:	613a      	str	r2, [r7, #16]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d101      	bne.n	8011a94 <clmt_clust+0x42>
 8011a90:	2300      	movs	r3, #0
 8011a92:	e010      	b.n	8011ab6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011a94:	697a      	ldr	r2, [r7, #20]
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d307      	bcc.n	8011aac <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011a9c:	697a      	ldr	r2, [r7, #20]
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	1ad3      	subs	r3, r2, r3
 8011aa2:	617b      	str	r3, [r7, #20]
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	3304      	adds	r3, #4
 8011aa8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011aaa:	e7e9      	b.n	8011a80 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011aac:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	4413      	add	r3, r2
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	371c      	adds	r7, #28
 8011aba:	46bd      	mov	sp, r7
 8011abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac0:	4770      	bx	lr

08011ac2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011ac2:	b580      	push	{r7, lr}
 8011ac4:	b086      	sub	sp, #24
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
 8011aca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011ad8:	d204      	bcs.n	8011ae4 <dir_sdi+0x22>
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	f003 031f 	and.w	r3, r3, #31
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d001      	beq.n	8011ae8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011ae4:	2302      	movs	r3, #2
 8011ae6:	e071      	b.n	8011bcc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	683a      	ldr	r2, [r7, #0]
 8011aec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	689b      	ldr	r3, [r3, #8]
 8011af2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d106      	bne.n	8011b08 <dir_sdi+0x46>
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	2b02      	cmp	r3, #2
 8011b00:	d902      	bls.n	8011b08 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b06:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d10c      	bne.n	8011b28 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	095b      	lsrs	r3, r3, #5
 8011b12:	693a      	ldr	r2, [r7, #16]
 8011b14:	8912      	ldrh	r2, [r2, #8]
 8011b16:	4293      	cmp	r3, r2
 8011b18:	d301      	bcc.n	8011b1e <dir_sdi+0x5c>
 8011b1a:	2302      	movs	r3, #2
 8011b1c:	e056      	b.n	8011bcc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011b1e:	693b      	ldr	r3, [r7, #16]
 8011b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	61da      	str	r2, [r3, #28]
 8011b26:	e02d      	b.n	8011b84 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	895b      	ldrh	r3, [r3, #10]
 8011b2c:	461a      	mov	r2, r3
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	899b      	ldrh	r3, [r3, #12]
 8011b32:	fb03 f302 	mul.w	r3, r3, r2
 8011b36:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b38:	e019      	b.n	8011b6e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6979      	ldr	r1, [r7, #20]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f7ff fca3 	bl	801148a <get_fat>
 8011b44:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b4c:	d101      	bne.n	8011b52 <dir_sdi+0x90>
 8011b4e:	2301      	movs	r3, #1
 8011b50:	e03c      	b.n	8011bcc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d904      	bls.n	8011b62 <dir_sdi+0xa0>
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	69db      	ldr	r3, [r3, #28]
 8011b5c:	697a      	ldr	r2, [r7, #20]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d301      	bcc.n	8011b66 <dir_sdi+0xa4>
 8011b62:	2302      	movs	r3, #2
 8011b64:	e032      	b.n	8011bcc <dir_sdi+0x10a>
			ofs -= csz;
 8011b66:	683a      	ldr	r2, [r7, #0]
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	1ad3      	subs	r3, r2, r3
 8011b6c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011b6e:	683a      	ldr	r2, [r7, #0]
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d2e1      	bcs.n	8011b3a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011b76:	6979      	ldr	r1, [r7, #20]
 8011b78:	6938      	ldr	r0, [r7, #16]
 8011b7a:	f7ff fc67 	bl	801144c <clust2sect>
 8011b7e:	4602      	mov	r2, r0
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	697a      	ldr	r2, [r7, #20]
 8011b88:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	69db      	ldr	r3, [r3, #28]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d101      	bne.n	8011b96 <dir_sdi+0xd4>
 8011b92:	2302      	movs	r3, #2
 8011b94:	e01a      	b.n	8011bcc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	69da      	ldr	r2, [r3, #28]
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	899b      	ldrh	r3, [r3, #12]
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ba6:	441a      	add	r2, r3
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	899b      	ldrh	r3, [r3, #12]
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bbe:	fb02 f200 	mul.w	r2, r2, r0
 8011bc2:	1a9b      	subs	r3, r3, r2
 8011bc4:	18ca      	adds	r2, r1, r3
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011bca:	2300      	movs	r3, #0
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3718      	adds	r7, #24
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}

08011bd4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b086      	sub	sp, #24
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	695b      	ldr	r3, [r3, #20]
 8011be8:	3320      	adds	r3, #32
 8011bea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	69db      	ldr	r3, [r3, #28]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d003      	beq.n	8011bfc <dir_next+0x28>
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011bfa:	d301      	bcc.n	8011c00 <dir_next+0x2c>
 8011bfc:	2304      	movs	r3, #4
 8011bfe:	e0bb      	b.n	8011d78 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	899b      	ldrh	r3, [r3, #12]
 8011c04:	461a      	mov	r2, r3
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c0c:	fb02 f201 	mul.w	r2, r2, r1
 8011c10:	1a9b      	subs	r3, r3, r2
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	f040 809d 	bne.w	8011d52 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	69db      	ldr	r3, [r3, #28]
 8011c1c:	1c5a      	adds	r2, r3, #1
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	699b      	ldr	r3, [r3, #24]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d10b      	bne.n	8011c42 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	095b      	lsrs	r3, r3, #5
 8011c2e:	68fa      	ldr	r2, [r7, #12]
 8011c30:	8912      	ldrh	r2, [r2, #8]
 8011c32:	4293      	cmp	r3, r2
 8011c34:	f0c0 808d 	bcc.w	8011d52 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	61da      	str	r2, [r3, #28]
 8011c3e:	2304      	movs	r3, #4
 8011c40:	e09a      	b.n	8011d78 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	899b      	ldrh	r3, [r3, #12]
 8011c46:	461a      	mov	r2, r3
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c4e:	68fa      	ldr	r2, [r7, #12]
 8011c50:	8952      	ldrh	r2, [r2, #10]
 8011c52:	3a01      	subs	r2, #1
 8011c54:	4013      	ands	r3, r2
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d17b      	bne.n	8011d52 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	699b      	ldr	r3, [r3, #24]
 8011c60:	4619      	mov	r1, r3
 8011c62:	4610      	mov	r0, r2
 8011c64:	f7ff fc11 	bl	801148a <get_fat>
 8011c68:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d801      	bhi.n	8011c74 <dir_next+0xa0>
 8011c70:	2302      	movs	r3, #2
 8011c72:	e081      	b.n	8011d78 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c7a:	d101      	bne.n	8011c80 <dir_next+0xac>
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	e07b      	b.n	8011d78 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	69db      	ldr	r3, [r3, #28]
 8011c84:	697a      	ldr	r2, [r7, #20]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d359      	bcc.n	8011d3e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d104      	bne.n	8011c9a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2200      	movs	r2, #0
 8011c94:	61da      	str	r2, [r3, #28]
 8011c96:	2304      	movs	r3, #4
 8011c98:	e06e      	b.n	8011d78 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	699b      	ldr	r3, [r3, #24]
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	4610      	mov	r0, r2
 8011ca4:	f7ff fe3d 	bl	8011922 <create_chain>
 8011ca8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d101      	bne.n	8011cb4 <dir_next+0xe0>
 8011cb0:	2307      	movs	r3, #7
 8011cb2:	e061      	b.n	8011d78 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	2b01      	cmp	r3, #1
 8011cb8:	d101      	bne.n	8011cbe <dir_next+0xea>
 8011cba:	2302      	movs	r3, #2
 8011cbc:	e05c      	b.n	8011d78 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc4:	d101      	bne.n	8011cca <dir_next+0xf6>
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	e056      	b.n	8011d78 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011cca:	68f8      	ldr	r0, [r7, #12]
 8011ccc:	f7ff fadc 	bl	8011288 <sync_window>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d001      	beq.n	8011cda <dir_next+0x106>
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	e04e      	b.n	8011d78 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	899b      	ldrh	r3, [r3, #12]
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	2100      	movs	r1, #0
 8011ce8:	f7ff f905 	bl	8010ef6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011cec:	2300      	movs	r3, #0
 8011cee:	613b      	str	r3, [r7, #16]
 8011cf0:	6979      	ldr	r1, [r7, #20]
 8011cf2:	68f8      	ldr	r0, [r7, #12]
 8011cf4:	f7ff fbaa 	bl	801144c <clust2sect>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8011cfe:	e012      	b.n	8011d26 <dir_next+0x152>
						fs->wflag = 1;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2201      	movs	r2, #1
 8011d04:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011d06:	68f8      	ldr	r0, [r7, #12]
 8011d08:	f7ff fabe 	bl	8011288 <sync_window>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d001      	beq.n	8011d16 <dir_next+0x142>
 8011d12:	2301      	movs	r3, #1
 8011d14:	e030      	b.n	8011d78 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	3301      	adds	r3, #1
 8011d1a:	613b      	str	r3, [r7, #16]
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d20:	1c5a      	adds	r2, r3, #1
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	635a      	str	r2, [r3, #52]	; 0x34
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	895b      	ldrh	r3, [r3, #10]
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d3e6      	bcc.n	8011d00 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	1ad2      	subs	r2, r2, r3
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	697a      	ldr	r2, [r7, #20]
 8011d42:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011d44:	6979      	ldr	r1, [r7, #20]
 8011d46:	68f8      	ldr	r0, [r7, #12]
 8011d48:	f7ff fb80 	bl	801144c <clust2sect>
 8011d4c:	4602      	mov	r2, r0
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	68ba      	ldr	r2, [r7, #8]
 8011d56:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	899b      	ldrh	r3, [r3, #12]
 8011d62:	461a      	mov	r2, r3
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d6a:	fb02 f200 	mul.w	r2, r2, r0
 8011d6e:	1a9b      	subs	r3, r3, r2
 8011d70:	18ca      	adds	r2, r1, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011d76:	2300      	movs	r3, #0
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3718      	adds	r7, #24
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}

08011d80 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b086      	sub	sp, #24
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011d90:	2100      	movs	r1, #0
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f7ff fe95 	bl	8011ac2 <dir_sdi>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011d9c:	7dfb      	ldrb	r3, [r7, #23]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d12b      	bne.n	8011dfa <dir_alloc+0x7a>
		n = 0;
 8011da2:	2300      	movs	r3, #0
 8011da4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	69db      	ldr	r3, [r3, #28]
 8011daa:	4619      	mov	r1, r3
 8011dac:	68f8      	ldr	r0, [r7, #12]
 8011dae:	f7ff faaf 	bl	8011310 <move_window>
 8011db2:	4603      	mov	r3, r0
 8011db4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011db6:	7dfb      	ldrb	r3, [r7, #23]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d11d      	bne.n	8011df8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6a1b      	ldr	r3, [r3, #32]
 8011dc0:	781b      	ldrb	r3, [r3, #0]
 8011dc2:	2be5      	cmp	r3, #229	; 0xe5
 8011dc4:	d004      	beq.n	8011dd0 <dir_alloc+0x50>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6a1b      	ldr	r3, [r3, #32]
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d107      	bne.n	8011de0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	613b      	str	r3, [r7, #16]
 8011dd6:	693a      	ldr	r2, [r7, #16]
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d102      	bne.n	8011de4 <dir_alloc+0x64>
 8011dde:	e00c      	b.n	8011dfa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011de0:	2300      	movs	r3, #0
 8011de2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011de4:	2101      	movs	r1, #1
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f7ff fef4 	bl	8011bd4 <dir_next>
 8011dec:	4603      	mov	r3, r0
 8011dee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011df0:	7dfb      	ldrb	r3, [r7, #23]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d0d7      	beq.n	8011da6 <dir_alloc+0x26>
 8011df6:	e000      	b.n	8011dfa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011df8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011dfa:	7dfb      	ldrb	r3, [r7, #23]
 8011dfc:	2b04      	cmp	r3, #4
 8011dfe:	d101      	bne.n	8011e04 <dir_alloc+0x84>
 8011e00:	2307      	movs	r3, #7
 8011e02:	75fb      	strb	r3, [r7, #23]
	return res;
 8011e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3718      	adds	r7, #24
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}

08011e0e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011e0e:	b580      	push	{r7, lr}
 8011e10:	b084      	sub	sp, #16
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	6078      	str	r0, [r7, #4]
 8011e16:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	331a      	adds	r3, #26
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fe ffc7 	bl	8010db0 <ld_word>
 8011e22:	4603      	mov	r3, r0
 8011e24:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	2b03      	cmp	r3, #3
 8011e2c:	d109      	bne.n	8011e42 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	3314      	adds	r3, #20
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7fe ffbc 	bl	8010db0 <ld_word>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	041b      	lsls	r3, r3, #16
 8011e3c:	68fa      	ldr	r2, [r7, #12]
 8011e3e:	4313      	orrs	r3, r2
 8011e40:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011e42:	68fb      	ldr	r3, [r7, #12]
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3710      	adds	r7, #16
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}

08011e4c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	60b9      	str	r1, [r7, #8]
 8011e56:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	331a      	adds	r3, #26
 8011e5c:	687a      	ldr	r2, [r7, #4]
 8011e5e:	b292      	uxth	r2, r2
 8011e60:	4611      	mov	r1, r2
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fe ffdf 	bl	8010e26 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	2b03      	cmp	r3, #3
 8011e6e:	d109      	bne.n	8011e84 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	f103 0214 	add.w	r2, r3, #20
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	0c1b      	lsrs	r3, r3, #16
 8011e7a:	b29b      	uxth	r3, r3
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	4610      	mov	r0, r2
 8011e80:	f7fe ffd1 	bl	8010e26 <st_word>
	}
}
 8011e84:	bf00      	nop
 8011e86:	3710      	adds	r7, #16
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b086      	sub	sp, #24
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011e96:	2304      	movs	r3, #4
 8011e98:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011ea0:	e03c      	b.n	8011f1c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	69db      	ldr	r3, [r3, #28]
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	6938      	ldr	r0, [r7, #16]
 8011eaa:	f7ff fa31 	bl	8011310 <move_window>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011eb2:	7dfb      	ldrb	r3, [r7, #23]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d136      	bne.n	8011f26 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6a1b      	ldr	r3, [r3, #32]
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011ec0:	7bfb      	ldrb	r3, [r7, #15]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d102      	bne.n	8011ecc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011ec6:	2304      	movs	r3, #4
 8011ec8:	75fb      	strb	r3, [r7, #23]
 8011eca:	e031      	b.n	8011f30 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6a1b      	ldr	r3, [r3, #32]
 8011ed0:	330b      	adds	r3, #11
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ed8:	73bb      	strb	r3, [r7, #14]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	7bba      	ldrb	r2, [r7, #14]
 8011ede:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011ee0:	7bfb      	ldrb	r3, [r7, #15]
 8011ee2:	2be5      	cmp	r3, #229	; 0xe5
 8011ee4:	d011      	beq.n	8011f0a <dir_read+0x7e>
 8011ee6:	7bfb      	ldrb	r3, [r7, #15]
 8011ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8011eea:	d00e      	beq.n	8011f0a <dir_read+0x7e>
 8011eec:	7bbb      	ldrb	r3, [r7, #14]
 8011eee:	2b0f      	cmp	r3, #15
 8011ef0:	d00b      	beq.n	8011f0a <dir_read+0x7e>
 8011ef2:	7bbb      	ldrb	r3, [r7, #14]
 8011ef4:	f023 0320 	bic.w	r3, r3, #32
 8011ef8:	2b08      	cmp	r3, #8
 8011efa:	bf0c      	ite	eq
 8011efc:	2301      	moveq	r3, #1
 8011efe:	2300      	movne	r3, #0
 8011f00:	b2db      	uxtb	r3, r3
 8011f02:	461a      	mov	r2, r3
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	4293      	cmp	r3, r2
 8011f08:	d00f      	beq.n	8011f2a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7ff fe61 	bl	8011bd4 <dir_next>
 8011f12:	4603      	mov	r3, r0
 8011f14:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f16:	7dfb      	ldrb	r3, [r7, #23]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d108      	bne.n	8011f2e <dir_read+0xa2>
	while (dp->sect) {
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	69db      	ldr	r3, [r3, #28]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d1be      	bne.n	8011ea2 <dir_read+0x16>
 8011f24:	e004      	b.n	8011f30 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011f26:	bf00      	nop
 8011f28:	e002      	b.n	8011f30 <dir_read+0xa4>
				break;
 8011f2a:	bf00      	nop
 8011f2c:	e000      	b.n	8011f30 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011f2e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011f30:	7dfb      	ldrb	r3, [r7, #23]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d002      	beq.n	8011f3c <dir_read+0xb0>
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2200      	movs	r2, #0
 8011f3a:	61da      	str	r2, [r3, #28]
	return res;
 8011f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3718      	adds	r7, #24
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011f46:	b580      	push	{r7, lr}
 8011f48:	b086      	sub	sp, #24
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011f54:	2100      	movs	r1, #0
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f7ff fdb3 	bl	8011ac2 <dir_sdi>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011f60:	7dfb      	ldrb	r3, [r7, #23]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d001      	beq.n	8011f6a <dir_find+0x24>
 8011f66:	7dfb      	ldrb	r3, [r7, #23]
 8011f68:	e03e      	b.n	8011fe8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	69db      	ldr	r3, [r3, #28]
 8011f6e:	4619      	mov	r1, r3
 8011f70:	6938      	ldr	r0, [r7, #16]
 8011f72:	f7ff f9cd 	bl	8011310 <move_window>
 8011f76:	4603      	mov	r3, r0
 8011f78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011f7a:	7dfb      	ldrb	r3, [r7, #23]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d12f      	bne.n	8011fe0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	6a1b      	ldr	r3, [r3, #32]
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011f88:	7bfb      	ldrb	r3, [r7, #15]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d102      	bne.n	8011f94 <dir_find+0x4e>
 8011f8e:	2304      	movs	r3, #4
 8011f90:	75fb      	strb	r3, [r7, #23]
 8011f92:	e028      	b.n	8011fe6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6a1b      	ldr	r3, [r3, #32]
 8011f98:	330b      	adds	r3, #11
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011fa0:	b2da      	uxtb	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6a1b      	ldr	r3, [r3, #32]
 8011faa:	330b      	adds	r3, #11
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	f003 0308 	and.w	r3, r3, #8
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d10a      	bne.n	8011fcc <dir_find+0x86>
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6a18      	ldr	r0, [r3, #32]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	3324      	adds	r3, #36	; 0x24
 8011fbe:	220b      	movs	r2, #11
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	f7fe ffb2 	bl	8010f2a <mem_cmp>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d00b      	beq.n	8011fe4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011fcc:	2100      	movs	r1, #0
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f7ff fe00 	bl	8011bd4 <dir_next>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011fd8:	7dfb      	ldrb	r3, [r7, #23]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d0c5      	beq.n	8011f6a <dir_find+0x24>
 8011fde:	e002      	b.n	8011fe6 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011fe0:	bf00      	nop
 8011fe2:	e000      	b.n	8011fe6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011fe4:	bf00      	nop

	return res;
 8011fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3718      	adds	r7, #24
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b084      	sub	sp, #16
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011ffe:	2101      	movs	r1, #1
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f7ff febd 	bl	8011d80 <dir_alloc>
 8012006:	4603      	mov	r3, r0
 8012008:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801200a:	7bfb      	ldrb	r3, [r7, #15]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d11c      	bne.n	801204a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	69db      	ldr	r3, [r3, #28]
 8012014:	4619      	mov	r1, r3
 8012016:	68b8      	ldr	r0, [r7, #8]
 8012018:	f7ff f97a 	bl	8011310 <move_window>
 801201c:	4603      	mov	r3, r0
 801201e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012020:	7bfb      	ldrb	r3, [r7, #15]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d111      	bne.n	801204a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6a1b      	ldr	r3, [r3, #32]
 801202a:	2220      	movs	r2, #32
 801202c:	2100      	movs	r1, #0
 801202e:	4618      	mov	r0, r3
 8012030:	f7fe ff61 	bl	8010ef6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6a18      	ldr	r0, [r3, #32]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	3324      	adds	r3, #36	; 0x24
 801203c:	220b      	movs	r2, #11
 801203e:	4619      	mov	r1, r3
 8012040:	f7fe ff38 	bl	8010eb4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	2201      	movs	r2, #1
 8012048:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801204a:	7bfb      	ldrb	r3, [r7, #15]
}
 801204c:	4618      	mov	r0, r3
 801204e:	3710      	adds	r7, #16
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}

08012054 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b084      	sub	sp, #16
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	69db      	ldr	r3, [r3, #28]
 8012066:	4619      	mov	r1, r3
 8012068:	68f8      	ldr	r0, [r7, #12]
 801206a:	f7ff f951 	bl	8011310 <move_window>
 801206e:	4603      	mov	r3, r0
 8012070:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012072:	7afb      	ldrb	r3, [r7, #11]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d106      	bne.n	8012086 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6a1b      	ldr	r3, [r3, #32]
 801207c:	22e5      	movs	r2, #229	; 0xe5
 801207e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	2201      	movs	r2, #1
 8012084:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012086:	7afb      	ldrb	r3, [r7, #11]
}
 8012088:	4618      	mov	r0, r3
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b088      	sub	sp, #32
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	60fb      	str	r3, [r7, #12]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	3324      	adds	r3, #36	; 0x24
 80120a4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80120a6:	220b      	movs	r2, #11
 80120a8:	2120      	movs	r1, #32
 80120aa:	68b8      	ldr	r0, [r7, #8]
 80120ac:	f7fe ff23 	bl	8010ef6 <mem_set>
	si = i = 0; ni = 8;
 80120b0:	2300      	movs	r3, #0
 80120b2:	613b      	str	r3, [r7, #16]
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	617b      	str	r3, [r7, #20]
 80120b8:	2308      	movs	r3, #8
 80120ba:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80120bc:	68fa      	ldr	r2, [r7, #12]
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	4413      	add	r3, r2
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	2b2e      	cmp	r3, #46	; 0x2e
 80120c6:	d12f      	bne.n	8012128 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	1c5a      	adds	r2, r3, #1
 80120cc:	617a      	str	r2, [r7, #20]
 80120ce:	68fa      	ldr	r2, [r7, #12]
 80120d0:	4413      	add	r3, r2
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80120d6:	7ffb      	ldrb	r3, [r7, #31]
 80120d8:	2b2e      	cmp	r3, #46	; 0x2e
 80120da:	d10a      	bne.n	80120f2 <create_name+0x62>
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	2b02      	cmp	r3, #2
 80120e0:	d807      	bhi.n	80120f2 <create_name+0x62>
			sfn[i++] = c;
 80120e2:	693b      	ldr	r3, [r7, #16]
 80120e4:	1c5a      	adds	r2, r3, #1
 80120e6:	613a      	str	r2, [r7, #16]
 80120e8:	68ba      	ldr	r2, [r7, #8]
 80120ea:	4413      	add	r3, r2
 80120ec:	7ffa      	ldrb	r2, [r7, #31]
 80120ee:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80120f0:	e7ea      	b.n	80120c8 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80120f2:	7ffb      	ldrb	r3, [r7, #31]
 80120f4:	2b2f      	cmp	r3, #47	; 0x2f
 80120f6:	d007      	beq.n	8012108 <create_name+0x78>
 80120f8:	7ffb      	ldrb	r3, [r7, #31]
 80120fa:	2b5c      	cmp	r3, #92	; 0x5c
 80120fc:	d004      	beq.n	8012108 <create_name+0x78>
 80120fe:	7ffb      	ldrb	r3, [r7, #31]
 8012100:	2b20      	cmp	r3, #32
 8012102:	d901      	bls.n	8012108 <create_name+0x78>
 8012104:	2306      	movs	r3, #6
 8012106:	e084      	b.n	8012212 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012108:	68fa      	ldr	r2, [r7, #12]
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	441a      	add	r2, r3
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012112:	7ffb      	ldrb	r3, [r7, #31]
 8012114:	2b20      	cmp	r3, #32
 8012116:	d801      	bhi.n	801211c <create_name+0x8c>
 8012118:	2224      	movs	r2, #36	; 0x24
 801211a:	e000      	b.n	801211e <create_name+0x8e>
 801211c:	2220      	movs	r2, #32
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	330b      	adds	r3, #11
 8012122:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012124:	2300      	movs	r3, #0
 8012126:	e074      	b.n	8012212 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	1c5a      	adds	r2, r3, #1
 801212c:	617a      	str	r2, [r7, #20]
 801212e:	68fa      	ldr	r2, [r7, #12]
 8012130:	4413      	add	r3, r2
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012136:	7ffb      	ldrb	r3, [r7, #31]
 8012138:	2b20      	cmp	r3, #32
 801213a:	d94e      	bls.n	80121da <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801213c:	7ffb      	ldrb	r3, [r7, #31]
 801213e:	2b2f      	cmp	r3, #47	; 0x2f
 8012140:	d006      	beq.n	8012150 <create_name+0xc0>
 8012142:	7ffb      	ldrb	r3, [r7, #31]
 8012144:	2b5c      	cmp	r3, #92	; 0x5c
 8012146:	d110      	bne.n	801216a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012148:	e002      	b.n	8012150 <create_name+0xc0>
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	3301      	adds	r3, #1
 801214e:	617b      	str	r3, [r7, #20]
 8012150:	68fa      	ldr	r2, [r7, #12]
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	4413      	add	r3, r2
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	2b2f      	cmp	r3, #47	; 0x2f
 801215a:	d0f6      	beq.n	801214a <create_name+0xba>
 801215c:	68fa      	ldr	r2, [r7, #12]
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	4413      	add	r3, r2
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	2b5c      	cmp	r3, #92	; 0x5c
 8012166:	d0f0      	beq.n	801214a <create_name+0xba>
			break;
 8012168:	e038      	b.n	80121dc <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801216a:	7ffb      	ldrb	r3, [r7, #31]
 801216c:	2b2e      	cmp	r3, #46	; 0x2e
 801216e:	d003      	beq.n	8012178 <create_name+0xe8>
 8012170:	693a      	ldr	r2, [r7, #16]
 8012172:	69bb      	ldr	r3, [r7, #24]
 8012174:	429a      	cmp	r2, r3
 8012176:	d30c      	bcc.n	8012192 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012178:	69bb      	ldr	r3, [r7, #24]
 801217a:	2b0b      	cmp	r3, #11
 801217c:	d002      	beq.n	8012184 <create_name+0xf4>
 801217e:	7ffb      	ldrb	r3, [r7, #31]
 8012180:	2b2e      	cmp	r3, #46	; 0x2e
 8012182:	d001      	beq.n	8012188 <create_name+0xf8>
 8012184:	2306      	movs	r3, #6
 8012186:	e044      	b.n	8012212 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012188:	2308      	movs	r3, #8
 801218a:	613b      	str	r3, [r7, #16]
 801218c:	230b      	movs	r3, #11
 801218e:	61bb      	str	r3, [r7, #24]
			continue;
 8012190:	e022      	b.n	80121d8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012192:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012196:	2b00      	cmp	r3, #0
 8012198:	da04      	bge.n	80121a4 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801219a:	7ffb      	ldrb	r3, [r7, #31]
 801219c:	3b80      	subs	r3, #128	; 0x80
 801219e:	4a1f      	ldr	r2, [pc, #124]	; (801221c <create_name+0x18c>)
 80121a0:	5cd3      	ldrb	r3, [r2, r3]
 80121a2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80121a4:	7ffb      	ldrb	r3, [r7, #31]
 80121a6:	4619      	mov	r1, r3
 80121a8:	481d      	ldr	r0, [pc, #116]	; (8012220 <create_name+0x190>)
 80121aa:	f7fe fee5 	bl	8010f78 <chk_chr>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d001      	beq.n	80121b8 <create_name+0x128>
 80121b4:	2306      	movs	r3, #6
 80121b6:	e02c      	b.n	8012212 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80121b8:	7ffb      	ldrb	r3, [r7, #31]
 80121ba:	2b60      	cmp	r3, #96	; 0x60
 80121bc:	d905      	bls.n	80121ca <create_name+0x13a>
 80121be:	7ffb      	ldrb	r3, [r7, #31]
 80121c0:	2b7a      	cmp	r3, #122	; 0x7a
 80121c2:	d802      	bhi.n	80121ca <create_name+0x13a>
 80121c4:	7ffb      	ldrb	r3, [r7, #31]
 80121c6:	3b20      	subs	r3, #32
 80121c8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	1c5a      	adds	r2, r3, #1
 80121ce:	613a      	str	r2, [r7, #16]
 80121d0:	68ba      	ldr	r2, [r7, #8]
 80121d2:	4413      	add	r3, r2
 80121d4:	7ffa      	ldrb	r2, [r7, #31]
 80121d6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80121d8:	e7a6      	b.n	8012128 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80121da:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80121dc:	68fa      	ldr	r2, [r7, #12]
 80121de:	697b      	ldr	r3, [r7, #20]
 80121e0:	441a      	add	r2, r3
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d101      	bne.n	80121f0 <create_name+0x160>
 80121ec:	2306      	movs	r3, #6
 80121ee:	e010      	b.n	8012212 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	2be5      	cmp	r3, #229	; 0xe5
 80121f6:	d102      	bne.n	80121fe <create_name+0x16e>
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	2205      	movs	r2, #5
 80121fc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80121fe:	7ffb      	ldrb	r3, [r7, #31]
 8012200:	2b20      	cmp	r3, #32
 8012202:	d801      	bhi.n	8012208 <create_name+0x178>
 8012204:	2204      	movs	r2, #4
 8012206:	e000      	b.n	801220a <create_name+0x17a>
 8012208:	2200      	movs	r2, #0
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	330b      	adds	r3, #11
 801220e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012210:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012212:	4618      	mov	r0, r3
 8012214:	3720      	adds	r7, #32
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	08019a78 	.word	0x08019a78
 8012220:	08019a28 	.word	0x08019a28

08012224 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b086      	sub	sp, #24
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012232:	693b      	ldr	r3, [r7, #16]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	2b2f      	cmp	r3, #47	; 0x2f
 801223e:	d00b      	beq.n	8012258 <follow_path+0x34>
 8012240:	683b      	ldr	r3, [r7, #0]
 8012242:	781b      	ldrb	r3, [r3, #0]
 8012244:	2b5c      	cmp	r3, #92	; 0x5c
 8012246:	d007      	beq.n	8012258 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	699a      	ldr	r2, [r3, #24]
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	609a      	str	r2, [r3, #8]
 8012250:	e00d      	b.n	801226e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	3301      	adds	r3, #1
 8012256:	603b      	str	r3, [r7, #0]
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	781b      	ldrb	r3, [r3, #0]
 801225c:	2b2f      	cmp	r3, #47	; 0x2f
 801225e:	d0f8      	beq.n	8012252 <follow_path+0x2e>
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	2b5c      	cmp	r3, #92	; 0x5c
 8012266:	d0f4      	beq.n	8012252 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012268:	693b      	ldr	r3, [r7, #16]
 801226a:	2200      	movs	r2, #0
 801226c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	781b      	ldrb	r3, [r3, #0]
 8012272:	2b1f      	cmp	r3, #31
 8012274:	d80a      	bhi.n	801228c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2280      	movs	r2, #128	; 0x80
 801227a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801227e:	2100      	movs	r1, #0
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f7ff fc1e 	bl	8011ac2 <dir_sdi>
 8012286:	4603      	mov	r3, r0
 8012288:	75fb      	strb	r3, [r7, #23]
 801228a:	e05b      	b.n	8012344 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801228c:	463b      	mov	r3, r7
 801228e:	4619      	mov	r1, r3
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7ff fefd 	bl	8012090 <create_name>
 8012296:	4603      	mov	r3, r0
 8012298:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801229a:	7dfb      	ldrb	r3, [r7, #23]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d14c      	bne.n	801233a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f7ff fe50 	bl	8011f46 <dir_find>
 80122a6:	4603      	mov	r3, r0
 80122a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80122b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80122b2:	7dfb      	ldrb	r3, [r7, #23]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d01b      	beq.n	80122f0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80122b8:	7dfb      	ldrb	r3, [r7, #23]
 80122ba:	2b04      	cmp	r3, #4
 80122bc:	d13f      	bne.n	801233e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80122be:	7afb      	ldrb	r3, [r7, #11]
 80122c0:	f003 0320 	and.w	r3, r3, #32
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d00b      	beq.n	80122e0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80122c8:	7afb      	ldrb	r3, [r7, #11]
 80122ca:	f003 0304 	and.w	r3, r3, #4
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d031      	beq.n	8012336 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2280      	movs	r2, #128	; 0x80
 80122d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80122da:	2300      	movs	r3, #0
 80122dc:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80122de:	e02e      	b.n	801233e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80122e0:	7afb      	ldrb	r3, [r7, #11]
 80122e2:	f003 0304 	and.w	r3, r3, #4
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d129      	bne.n	801233e <follow_path+0x11a>
 80122ea:	2305      	movs	r3, #5
 80122ec:	75fb      	strb	r3, [r7, #23]
				break;
 80122ee:	e026      	b.n	801233e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80122f0:	7afb      	ldrb	r3, [r7, #11]
 80122f2:	f003 0304 	and.w	r3, r3, #4
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d123      	bne.n	8012342 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	799b      	ldrb	r3, [r3, #6]
 80122fe:	f003 0310 	and.w	r3, r3, #16
 8012302:	2b00      	cmp	r3, #0
 8012304:	d102      	bne.n	801230c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012306:	2305      	movs	r3, #5
 8012308:	75fb      	strb	r3, [r7, #23]
 801230a:	e01b      	b.n	8012344 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	695b      	ldr	r3, [r3, #20]
 8012316:	68fa      	ldr	r2, [r7, #12]
 8012318:	8992      	ldrh	r2, [r2, #12]
 801231a:	fbb3 f0f2 	udiv	r0, r3, r2
 801231e:	fb02 f200 	mul.w	r2, r2, r0
 8012322:	1a9b      	subs	r3, r3, r2
 8012324:	440b      	add	r3, r1
 8012326:	4619      	mov	r1, r3
 8012328:	68f8      	ldr	r0, [r7, #12]
 801232a:	f7ff fd70 	bl	8011e0e <ld_clust>
 801232e:	4602      	mov	r2, r0
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	609a      	str	r2, [r3, #8]
 8012334:	e7aa      	b.n	801228c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012336:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012338:	e7a8      	b.n	801228c <follow_path+0x68>
			if (res != FR_OK) break;
 801233a:	bf00      	nop
 801233c:	e002      	b.n	8012344 <follow_path+0x120>
				break;
 801233e:	bf00      	nop
 8012340:	e000      	b.n	8012344 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012342:	bf00      	nop
			}
		}
	}

	return res;
 8012344:	7dfb      	ldrb	r3, [r7, #23]
}
 8012346:	4618      	mov	r0, r3
 8012348:	3718      	adds	r7, #24
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}

0801234e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801234e:	b480      	push	{r7}
 8012350:	b087      	sub	sp, #28
 8012352:	af00      	add	r7, sp, #0
 8012354:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012356:	f04f 33ff 	mov.w	r3, #4294967295
 801235a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d031      	beq.n	80123c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	617b      	str	r3, [r7, #20]
 801236a:	e002      	b.n	8012372 <get_ldnumber+0x24>
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	3301      	adds	r3, #1
 8012370:	617b      	str	r3, [r7, #20]
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	2b20      	cmp	r3, #32
 8012378:	d903      	bls.n	8012382 <get_ldnumber+0x34>
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	2b3a      	cmp	r3, #58	; 0x3a
 8012380:	d1f4      	bne.n	801236c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	781b      	ldrb	r3, [r3, #0]
 8012386:	2b3a      	cmp	r3, #58	; 0x3a
 8012388:	d11c      	bne.n	80123c4 <get_ldnumber+0x76>
			tp = *path;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	1c5a      	adds	r2, r3, #1
 8012394:	60fa      	str	r2, [r7, #12]
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	3b30      	subs	r3, #48	; 0x30
 801239a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	2b09      	cmp	r3, #9
 80123a0:	d80e      	bhi.n	80123c0 <get_ldnumber+0x72>
 80123a2:	68fa      	ldr	r2, [r7, #12]
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d10a      	bne.n	80123c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d107      	bne.n	80123c0 <get_ldnumber+0x72>
					vol = (int)i;
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	3301      	adds	r3, #1
 80123b8:	617b      	str	r3, [r7, #20]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	697a      	ldr	r2, [r7, #20]
 80123be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	e002      	b.n	80123ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80123c4:	2300      	movs	r3, #0
 80123c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80123c8:	693b      	ldr	r3, [r7, #16]
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	371c      	adds	r7, #28
 80123ce:	46bd      	mov	sp, r7
 80123d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d4:	4770      	bx	lr
	...

080123d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2200      	movs	r2, #0
 80123e6:	70da      	strb	r2, [r3, #3]
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f04f 32ff 	mov.w	r2, #4294967295
 80123ee:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80123f0:	6839      	ldr	r1, [r7, #0]
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f7fe ff8c 	bl	8011310 <move_window>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d001      	beq.n	8012402 <check_fs+0x2a>
 80123fe:	2304      	movs	r3, #4
 8012400:	e038      	b.n	8012474 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	3338      	adds	r3, #56	; 0x38
 8012406:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801240a:	4618      	mov	r0, r3
 801240c:	f7fe fcd0 	bl	8010db0 <ld_word>
 8012410:	4603      	mov	r3, r0
 8012412:	461a      	mov	r2, r3
 8012414:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012418:	429a      	cmp	r2, r3
 801241a:	d001      	beq.n	8012420 <check_fs+0x48>
 801241c:	2303      	movs	r3, #3
 801241e:	e029      	b.n	8012474 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012426:	2be9      	cmp	r3, #233	; 0xe9
 8012428:	d009      	beq.n	801243e <check_fs+0x66>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012430:	2beb      	cmp	r3, #235	; 0xeb
 8012432:	d11e      	bne.n	8012472 <check_fs+0x9a>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801243a:	2b90      	cmp	r3, #144	; 0x90
 801243c:	d119      	bne.n	8012472 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	3338      	adds	r3, #56	; 0x38
 8012442:	3336      	adds	r3, #54	; 0x36
 8012444:	4618      	mov	r0, r3
 8012446:	f7fe fccb 	bl	8010de0 <ld_dword>
 801244a:	4603      	mov	r3, r0
 801244c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012450:	4a0a      	ldr	r2, [pc, #40]	; (801247c <check_fs+0xa4>)
 8012452:	4293      	cmp	r3, r2
 8012454:	d101      	bne.n	801245a <check_fs+0x82>
 8012456:	2300      	movs	r3, #0
 8012458:	e00c      	b.n	8012474 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	3338      	adds	r3, #56	; 0x38
 801245e:	3352      	adds	r3, #82	; 0x52
 8012460:	4618      	mov	r0, r3
 8012462:	f7fe fcbd 	bl	8010de0 <ld_dword>
 8012466:	4602      	mov	r2, r0
 8012468:	4b05      	ldr	r3, [pc, #20]	; (8012480 <check_fs+0xa8>)
 801246a:	429a      	cmp	r2, r3
 801246c:	d101      	bne.n	8012472 <check_fs+0x9a>
 801246e:	2300      	movs	r3, #0
 8012470:	e000      	b.n	8012474 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012472:	2302      	movs	r3, #2
}
 8012474:	4618      	mov	r0, r3
 8012476:	3708      	adds	r7, #8
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}
 801247c:	00544146 	.word	0x00544146
 8012480:	33544146 	.word	0x33544146

08012484 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b096      	sub	sp, #88	; 0x58
 8012488:	af00      	add	r7, sp, #0
 801248a:	60f8      	str	r0, [r7, #12]
 801248c:	60b9      	str	r1, [r7, #8]
 801248e:	4613      	mov	r3, r2
 8012490:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	2200      	movs	r2, #0
 8012496:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f7ff ff58 	bl	801234e <get_ldnumber>
 801249e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80124a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	da01      	bge.n	80124aa <find_volume+0x26>
 80124a6:	230b      	movs	r3, #11
 80124a8:	e268      	b.n	801297c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80124aa:	4ab0      	ldr	r2, [pc, #704]	; (801276c <find_volume+0x2e8>)
 80124ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80124b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d101      	bne.n	80124be <find_volume+0x3a>
 80124ba:	230c      	movs	r3, #12
 80124bc:	e25e      	b.n	801297c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80124c4:	79fb      	ldrb	r3, [r7, #7]
 80124c6:	f023 0301 	bic.w	r3, r3, #1
 80124ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80124cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d01a      	beq.n	801250a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80124d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d6:	785b      	ldrb	r3, [r3, #1]
 80124d8:	4618      	mov	r0, r3
 80124da:	f7fe fbcb 	bl	8010c74 <disk_status>
 80124de:	4603      	mov	r3, r0
 80124e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80124e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124e8:	f003 0301 	and.w	r3, r3, #1
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d10c      	bne.n	801250a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80124f0:	79fb      	ldrb	r3, [r7, #7]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d007      	beq.n	8012506 <find_volume+0x82>
 80124f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124fa:	f003 0304 	and.w	r3, r3, #4
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d001      	beq.n	8012506 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012502:	230a      	movs	r3, #10
 8012504:	e23a      	b.n	801297c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012506:	2300      	movs	r3, #0
 8012508:	e238      	b.n	801297c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801250c:	2200      	movs	r2, #0
 801250e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012512:	b2da      	uxtb	r2, r3
 8012514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012516:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251a:	785b      	ldrb	r3, [r3, #1]
 801251c:	4618      	mov	r0, r3
 801251e:	f7fe fbc3 	bl	8010ca8 <disk_initialize>
 8012522:	4603      	mov	r3, r0
 8012524:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012528:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801252c:	f003 0301 	and.w	r3, r3, #1
 8012530:	2b00      	cmp	r3, #0
 8012532:	d001      	beq.n	8012538 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012534:	2303      	movs	r3, #3
 8012536:	e221      	b.n	801297c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012538:	79fb      	ldrb	r3, [r7, #7]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d007      	beq.n	801254e <find_volume+0xca>
 801253e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012542:	f003 0304 	and.w	r3, r3, #4
 8012546:	2b00      	cmp	r3, #0
 8012548:	d001      	beq.n	801254e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801254a:	230a      	movs	r3, #10
 801254c:	e216      	b.n	801297c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012550:	7858      	ldrb	r0, [r3, #1]
 8012552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012554:	330c      	adds	r3, #12
 8012556:	461a      	mov	r2, r3
 8012558:	2102      	movs	r1, #2
 801255a:	f7fe fc0b 	bl	8010d74 <disk_ioctl>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d001      	beq.n	8012568 <find_volume+0xe4>
 8012564:	2301      	movs	r3, #1
 8012566:	e209      	b.n	801297c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801256a:	899b      	ldrh	r3, [r3, #12]
 801256c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012570:	d80d      	bhi.n	801258e <find_volume+0x10a>
 8012572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012574:	899b      	ldrh	r3, [r3, #12]
 8012576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801257a:	d308      	bcc.n	801258e <find_volume+0x10a>
 801257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257e:	899b      	ldrh	r3, [r3, #12]
 8012580:	461a      	mov	r2, r3
 8012582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012584:	899b      	ldrh	r3, [r3, #12]
 8012586:	3b01      	subs	r3, #1
 8012588:	4013      	ands	r3, r2
 801258a:	2b00      	cmp	r3, #0
 801258c:	d001      	beq.n	8012592 <find_volume+0x10e>
 801258e:	2301      	movs	r3, #1
 8012590:	e1f4      	b.n	801297c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012592:	2300      	movs	r3, #0
 8012594:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012596:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012598:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801259a:	f7ff ff1d 	bl	80123d8 <check_fs>
 801259e:	4603      	mov	r3, r0
 80125a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80125a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125a8:	2b02      	cmp	r3, #2
 80125aa:	d14b      	bne.n	8012644 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80125ac:	2300      	movs	r3, #0
 80125ae:	643b      	str	r3, [r7, #64]	; 0x40
 80125b0:	e01f      	b.n	80125f2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80125b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80125b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125ba:	011b      	lsls	r3, r3, #4
 80125bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80125c0:	4413      	add	r3, r2
 80125c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80125c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c6:	3304      	adds	r3, #4
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d006      	beq.n	80125dc <find_volume+0x158>
 80125ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d0:	3308      	adds	r3, #8
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7fe fc04 	bl	8010de0 <ld_dword>
 80125d8:	4602      	mov	r2, r0
 80125da:	e000      	b.n	80125de <find_volume+0x15a>
 80125dc:	2200      	movs	r2, #0
 80125de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125e0:	009b      	lsls	r3, r3, #2
 80125e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80125e6:	440b      	add	r3, r1
 80125e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80125ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125ee:	3301      	adds	r3, #1
 80125f0:	643b      	str	r3, [r7, #64]	; 0x40
 80125f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125f4:	2b03      	cmp	r3, #3
 80125f6:	d9dc      	bls.n	80125b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80125f8:	2300      	movs	r3, #0
 80125fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80125fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d002      	beq.n	8012608 <find_volume+0x184>
 8012602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012604:	3b01      	subs	r3, #1
 8012606:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801260a:	009b      	lsls	r3, r3, #2
 801260c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012610:	4413      	add	r3, r2
 8012612:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012616:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801261a:	2b00      	cmp	r3, #0
 801261c:	d005      	beq.n	801262a <find_volume+0x1a6>
 801261e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012622:	f7ff fed9 	bl	80123d8 <check_fs>
 8012626:	4603      	mov	r3, r0
 8012628:	e000      	b.n	801262c <find_volume+0x1a8>
 801262a:	2303      	movs	r3, #3
 801262c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012634:	2b01      	cmp	r3, #1
 8012636:	d905      	bls.n	8012644 <find_volume+0x1c0>
 8012638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801263a:	3301      	adds	r3, #1
 801263c:	643b      	str	r3, [r7, #64]	; 0x40
 801263e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012640:	2b03      	cmp	r3, #3
 8012642:	d9e1      	bls.n	8012608 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012644:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012648:	2b04      	cmp	r3, #4
 801264a:	d101      	bne.n	8012650 <find_volume+0x1cc>
 801264c:	2301      	movs	r3, #1
 801264e:	e195      	b.n	801297c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012650:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012654:	2b01      	cmp	r3, #1
 8012656:	d901      	bls.n	801265c <find_volume+0x1d8>
 8012658:	230d      	movs	r3, #13
 801265a:	e18f      	b.n	801297c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801265e:	3338      	adds	r3, #56	; 0x38
 8012660:	330b      	adds	r3, #11
 8012662:	4618      	mov	r0, r3
 8012664:	f7fe fba4 	bl	8010db0 <ld_word>
 8012668:	4603      	mov	r3, r0
 801266a:	461a      	mov	r2, r3
 801266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266e:	899b      	ldrh	r3, [r3, #12]
 8012670:	429a      	cmp	r2, r3
 8012672:	d001      	beq.n	8012678 <find_volume+0x1f4>
 8012674:	230d      	movs	r3, #13
 8012676:	e181      	b.n	801297c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801267a:	3338      	adds	r3, #56	; 0x38
 801267c:	3316      	adds	r3, #22
 801267e:	4618      	mov	r0, r3
 8012680:	f7fe fb96 	bl	8010db0 <ld_word>
 8012684:	4603      	mov	r3, r0
 8012686:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801268a:	2b00      	cmp	r3, #0
 801268c:	d106      	bne.n	801269c <find_volume+0x218>
 801268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012690:	3338      	adds	r3, #56	; 0x38
 8012692:	3324      	adds	r3, #36	; 0x24
 8012694:	4618      	mov	r0, r3
 8012696:	f7fe fba3 	bl	8010de0 <ld_dword>
 801269a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80126a0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80126a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80126a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80126ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ae:	789b      	ldrb	r3, [r3, #2]
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d005      	beq.n	80126c0 <find_volume+0x23c>
 80126b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b6:	789b      	ldrb	r3, [r3, #2]
 80126b8:	2b02      	cmp	r3, #2
 80126ba:	d001      	beq.n	80126c0 <find_volume+0x23c>
 80126bc:	230d      	movs	r3, #13
 80126be:	e15d      	b.n	801297c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80126c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c2:	789b      	ldrb	r3, [r3, #2]
 80126c4:	461a      	mov	r2, r3
 80126c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126c8:	fb02 f303 	mul.w	r3, r2, r3
 80126cc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80126ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80126da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126dc:	895b      	ldrh	r3, [r3, #10]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d008      	beq.n	80126f4 <find_volume+0x270>
 80126e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e4:	895b      	ldrh	r3, [r3, #10]
 80126e6:	461a      	mov	r2, r3
 80126e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ea:	895b      	ldrh	r3, [r3, #10]
 80126ec:	3b01      	subs	r3, #1
 80126ee:	4013      	ands	r3, r2
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d001      	beq.n	80126f8 <find_volume+0x274>
 80126f4:	230d      	movs	r3, #13
 80126f6:	e141      	b.n	801297c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80126f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126fa:	3338      	adds	r3, #56	; 0x38
 80126fc:	3311      	adds	r3, #17
 80126fe:	4618      	mov	r0, r3
 8012700:	f7fe fb56 	bl	8010db0 <ld_word>
 8012704:	4603      	mov	r3, r0
 8012706:	461a      	mov	r2, r3
 8012708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270e:	891b      	ldrh	r3, [r3, #8]
 8012710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012712:	8992      	ldrh	r2, [r2, #12]
 8012714:	0952      	lsrs	r2, r2, #5
 8012716:	b292      	uxth	r2, r2
 8012718:	fbb3 f1f2 	udiv	r1, r3, r2
 801271c:	fb02 f201 	mul.w	r2, r2, r1
 8012720:	1a9b      	subs	r3, r3, r2
 8012722:	b29b      	uxth	r3, r3
 8012724:	2b00      	cmp	r3, #0
 8012726:	d001      	beq.n	801272c <find_volume+0x2a8>
 8012728:	230d      	movs	r3, #13
 801272a:	e127      	b.n	801297c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272e:	3338      	adds	r3, #56	; 0x38
 8012730:	3313      	adds	r3, #19
 8012732:	4618      	mov	r0, r3
 8012734:	f7fe fb3c 	bl	8010db0 <ld_word>
 8012738:	4603      	mov	r3, r0
 801273a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801273c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801273e:	2b00      	cmp	r3, #0
 8012740:	d106      	bne.n	8012750 <find_volume+0x2cc>
 8012742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012744:	3338      	adds	r3, #56	; 0x38
 8012746:	3320      	adds	r3, #32
 8012748:	4618      	mov	r0, r3
 801274a:	f7fe fb49 	bl	8010de0 <ld_dword>
 801274e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012752:	3338      	adds	r3, #56	; 0x38
 8012754:	330e      	adds	r3, #14
 8012756:	4618      	mov	r0, r3
 8012758:	f7fe fb2a 	bl	8010db0 <ld_word>
 801275c:	4603      	mov	r3, r0
 801275e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012760:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012762:	2b00      	cmp	r3, #0
 8012764:	d104      	bne.n	8012770 <find_volume+0x2ec>
 8012766:	230d      	movs	r3, #13
 8012768:	e108      	b.n	801297c <find_volume+0x4f8>
 801276a:	bf00      	nop
 801276c:	200403a0 	.word	0x200403a0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012770:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012774:	4413      	add	r3, r2
 8012776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012778:	8911      	ldrh	r1, [r2, #8]
 801277a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801277c:	8992      	ldrh	r2, [r2, #12]
 801277e:	0952      	lsrs	r2, r2, #5
 8012780:	b292      	uxth	r2, r2
 8012782:	fbb1 f2f2 	udiv	r2, r1, r2
 8012786:	b292      	uxth	r2, r2
 8012788:	4413      	add	r3, r2
 801278a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801278c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012790:	429a      	cmp	r2, r3
 8012792:	d201      	bcs.n	8012798 <find_volume+0x314>
 8012794:	230d      	movs	r3, #13
 8012796:	e0f1      	b.n	801297c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279c:	1ad3      	subs	r3, r2, r3
 801279e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127a0:	8952      	ldrh	r2, [r2, #10]
 80127a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80127a6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80127a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d101      	bne.n	80127b2 <find_volume+0x32e>
 80127ae:	230d      	movs	r3, #13
 80127b0:	e0e4      	b.n	801297c <find_volume+0x4f8>
		fmt = FS_FAT32;
 80127b2:	2303      	movs	r3, #3
 80127b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80127b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80127be:	4293      	cmp	r3, r2
 80127c0:	d802      	bhi.n	80127c8 <find_volume+0x344>
 80127c2:	2302      	movs	r3, #2
 80127c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80127c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ca:	f640 72f5 	movw	r2, #4085	; 0xff5
 80127ce:	4293      	cmp	r3, r2
 80127d0:	d802      	bhi.n	80127d8 <find_volume+0x354>
 80127d2:	2301      	movs	r3, #1
 80127d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80127d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127da:	1c9a      	adds	r2, r3, #2
 80127dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127de:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80127e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127e4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80127e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80127e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ea:	441a      	add	r2, r3
 80127ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ee:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80127f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80127f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127f4:	441a      	add	r2, r3
 80127f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80127fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127fe:	2b03      	cmp	r3, #3
 8012800:	d11e      	bne.n	8012840 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012804:	3338      	adds	r3, #56	; 0x38
 8012806:	332a      	adds	r3, #42	; 0x2a
 8012808:	4618      	mov	r0, r3
 801280a:	f7fe fad1 	bl	8010db0 <ld_word>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d001      	beq.n	8012818 <find_volume+0x394>
 8012814:	230d      	movs	r3, #13
 8012816:	e0b1      	b.n	801297c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281a:	891b      	ldrh	r3, [r3, #8]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d001      	beq.n	8012824 <find_volume+0x3a0>
 8012820:	230d      	movs	r3, #13
 8012822:	e0ab      	b.n	801297c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012826:	3338      	adds	r3, #56	; 0x38
 8012828:	332c      	adds	r3, #44	; 0x2c
 801282a:	4618      	mov	r0, r3
 801282c:	f7fe fad8 	bl	8010de0 <ld_dword>
 8012830:	4602      	mov	r2, r0
 8012832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012834:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012838:	69db      	ldr	r3, [r3, #28]
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	647b      	str	r3, [r7, #68]	; 0x44
 801283e:	e01f      	b.n	8012880 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012842:	891b      	ldrh	r3, [r3, #8]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d101      	bne.n	801284c <find_volume+0x3c8>
 8012848:	230d      	movs	r3, #13
 801284a:	e097      	b.n	801297c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801284e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012852:	441a      	add	r2, r3
 8012854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012856:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012858:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801285c:	2b02      	cmp	r3, #2
 801285e:	d103      	bne.n	8012868 <find_volume+0x3e4>
 8012860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012862:	69db      	ldr	r3, [r3, #28]
 8012864:	005b      	lsls	r3, r3, #1
 8012866:	e00a      	b.n	801287e <find_volume+0x3fa>
 8012868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801286a:	69da      	ldr	r2, [r3, #28]
 801286c:	4613      	mov	r3, r2
 801286e:	005b      	lsls	r3, r3, #1
 8012870:	4413      	add	r3, r2
 8012872:	085a      	lsrs	r2, r3, #1
 8012874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012876:	69db      	ldr	r3, [r3, #28]
 8012878:	f003 0301 	and.w	r3, r3, #1
 801287c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801287e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012882:	6a1a      	ldr	r2, [r3, #32]
 8012884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012886:	899b      	ldrh	r3, [r3, #12]
 8012888:	4619      	mov	r1, r3
 801288a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801288c:	440b      	add	r3, r1
 801288e:	3b01      	subs	r3, #1
 8012890:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012892:	8989      	ldrh	r1, [r1, #12]
 8012894:	fbb3 f3f1 	udiv	r3, r3, r1
 8012898:	429a      	cmp	r2, r3
 801289a:	d201      	bcs.n	80128a0 <find_volume+0x41c>
 801289c:	230d      	movs	r3, #13
 801289e:	e06d      	b.n	801297c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80128a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a2:	f04f 32ff 	mov.w	r2, #4294967295
 80128a6:	615a      	str	r2, [r3, #20]
 80128a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128aa:	695a      	ldr	r2, [r3, #20]
 80128ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80128b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b2:	2280      	movs	r2, #128	; 0x80
 80128b4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80128b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80128ba:	2b03      	cmp	r3, #3
 80128bc:	d149      	bne.n	8012952 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80128be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c0:	3338      	adds	r3, #56	; 0x38
 80128c2:	3330      	adds	r3, #48	; 0x30
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7fe fa73 	bl	8010db0 <ld_word>
 80128ca:	4603      	mov	r3, r0
 80128cc:	2b01      	cmp	r3, #1
 80128ce:	d140      	bne.n	8012952 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80128d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128d2:	3301      	adds	r3, #1
 80128d4:	4619      	mov	r1, r3
 80128d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80128d8:	f7fe fd1a 	bl	8011310 <move_window>
 80128dc:	4603      	mov	r3, r0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d137      	bne.n	8012952 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80128e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e4:	2200      	movs	r2, #0
 80128e6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80128e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ea:	3338      	adds	r3, #56	; 0x38
 80128ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80128f0:	4618      	mov	r0, r3
 80128f2:	f7fe fa5d 	bl	8010db0 <ld_word>
 80128f6:	4603      	mov	r3, r0
 80128f8:	461a      	mov	r2, r3
 80128fa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80128fe:	429a      	cmp	r2, r3
 8012900:	d127      	bne.n	8012952 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012904:	3338      	adds	r3, #56	; 0x38
 8012906:	4618      	mov	r0, r3
 8012908:	f7fe fa6a 	bl	8010de0 <ld_dword>
 801290c:	4602      	mov	r2, r0
 801290e:	4b1d      	ldr	r3, [pc, #116]	; (8012984 <find_volume+0x500>)
 8012910:	429a      	cmp	r2, r3
 8012912:	d11e      	bne.n	8012952 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012916:	3338      	adds	r3, #56	; 0x38
 8012918:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801291c:	4618      	mov	r0, r3
 801291e:	f7fe fa5f 	bl	8010de0 <ld_dword>
 8012922:	4602      	mov	r2, r0
 8012924:	4b18      	ldr	r3, [pc, #96]	; (8012988 <find_volume+0x504>)
 8012926:	429a      	cmp	r2, r3
 8012928:	d113      	bne.n	8012952 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801292a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801292c:	3338      	adds	r3, #56	; 0x38
 801292e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012932:	4618      	mov	r0, r3
 8012934:	f7fe fa54 	bl	8010de0 <ld_dword>
 8012938:	4602      	mov	r2, r0
 801293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801293c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012940:	3338      	adds	r3, #56	; 0x38
 8012942:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012946:	4618      	mov	r0, r3
 8012948:	f7fe fa4a 	bl	8010de0 <ld_dword>
 801294c:	4602      	mov	r2, r0
 801294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012950:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012954:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012958:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801295a:	4b0c      	ldr	r3, [pc, #48]	; (801298c <find_volume+0x508>)
 801295c:	881b      	ldrh	r3, [r3, #0]
 801295e:	3301      	adds	r3, #1
 8012960:	b29a      	uxth	r2, r3
 8012962:	4b0a      	ldr	r3, [pc, #40]	; (801298c <find_volume+0x508>)
 8012964:	801a      	strh	r2, [r3, #0]
 8012966:	4b09      	ldr	r3, [pc, #36]	; (801298c <find_volume+0x508>)
 8012968:	881a      	ldrh	r2, [r3, #0]
 801296a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801296c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012970:	2200      	movs	r2, #0
 8012972:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012976:	f7fe fc63 	bl	8011240 <clear_lock>
#endif
	return FR_OK;
 801297a:	2300      	movs	r3, #0
}
 801297c:	4618      	mov	r0, r3
 801297e:	3758      	adds	r7, #88	; 0x58
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}
 8012984:	41615252 	.word	0x41615252
 8012988:	61417272 	.word	0x61417272
 801298c:	200403a4 	.word	0x200403a4

08012990 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801299a:	2309      	movs	r3, #9
 801299c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d01c      	beq.n	80129de <validate+0x4e>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d018      	beq.n	80129de <validate+0x4e>
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d013      	beq.n	80129de <validate+0x4e>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	889a      	ldrh	r2, [r3, #4]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	88db      	ldrh	r3, [r3, #6]
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d10c      	bne.n	80129de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	785b      	ldrb	r3, [r3, #1]
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7fe f952 	bl	8010c74 <disk_status>
 80129d0:	4603      	mov	r3, r0
 80129d2:	f003 0301 	and.w	r3, r3, #1
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d101      	bne.n	80129de <validate+0x4e>
			res = FR_OK;
 80129da:	2300      	movs	r3, #0
 80129dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80129de:	7bfb      	ldrb	r3, [r7, #15]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d102      	bne.n	80129ea <validate+0x5a>
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	e000      	b.n	80129ec <validate+0x5c>
 80129ea:	2300      	movs	r3, #0
 80129ec:	683a      	ldr	r2, [r7, #0]
 80129ee:	6013      	str	r3, [r2, #0]
	return res;
 80129f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	3710      	adds	r7, #16
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}
	...

080129fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b088      	sub	sp, #32
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	60f8      	str	r0, [r7, #12]
 8012a04:	60b9      	str	r1, [r7, #8]
 8012a06:	4613      	mov	r3, r2
 8012a08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012a0e:	f107 0310 	add.w	r3, r7, #16
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7ff fc9b 	bl	801234e <get_ldnumber>
 8012a18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012a1a:	69fb      	ldr	r3, [r7, #28]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	da01      	bge.n	8012a24 <f_mount+0x28>
 8012a20:	230b      	movs	r3, #11
 8012a22:	e02b      	b.n	8012a7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012a24:	4a17      	ldr	r2, [pc, #92]	; (8012a84 <f_mount+0x88>)
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012a2e:	69bb      	ldr	r3, [r7, #24]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d005      	beq.n	8012a40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012a34:	69b8      	ldr	r0, [r7, #24]
 8012a36:	f7fe fc03 	bl	8011240 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012a3a:	69bb      	ldr	r3, [r7, #24]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d002      	beq.n	8012a4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012a4c:	68fa      	ldr	r2, [r7, #12]
 8012a4e:	490d      	ldr	r1, [pc, #52]	; (8012a84 <f_mount+0x88>)
 8012a50:	69fb      	ldr	r3, [r7, #28]
 8012a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d002      	beq.n	8012a62 <f_mount+0x66>
 8012a5c:	79fb      	ldrb	r3, [r7, #7]
 8012a5e:	2b01      	cmp	r3, #1
 8012a60:	d001      	beq.n	8012a66 <f_mount+0x6a>
 8012a62:	2300      	movs	r3, #0
 8012a64:	e00a      	b.n	8012a7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012a66:	f107 010c 	add.w	r1, r7, #12
 8012a6a:	f107 0308 	add.w	r3, r7, #8
 8012a6e:	2200      	movs	r2, #0
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7ff fd07 	bl	8012484 <find_volume>
 8012a76:	4603      	mov	r3, r0
 8012a78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3720      	adds	r7, #32
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	200403a0 	.word	0x200403a0

08012a88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b098      	sub	sp, #96	; 0x60
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	4613      	mov	r3, r2
 8012a94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d101      	bne.n	8012aa0 <f_open+0x18>
 8012a9c:	2309      	movs	r3, #9
 8012a9e:	e1ba      	b.n	8012e16 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012aa0:	79fb      	ldrb	r3, [r7, #7]
 8012aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012aa6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012aa8:	79fa      	ldrb	r2, [r7, #7]
 8012aaa:	f107 0110 	add.w	r1, r7, #16
 8012aae:	f107 0308 	add.w	r3, r7, #8
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7ff fce6 	bl	8012484 <find_volume>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012abe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	f040 819e 	bne.w	8012e04 <f_open+0x37c>
		dj.obj.fs = fs;
 8012ac8:	693b      	ldr	r3, [r7, #16]
 8012aca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012acc:	68ba      	ldr	r2, [r7, #8]
 8012ace:	f107 0314 	add.w	r3, r7, #20
 8012ad2:	4611      	mov	r1, r2
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7ff fba5 	bl	8012224 <follow_path>
 8012ada:	4603      	mov	r3, r0
 8012adc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d11a      	bne.n	8012b1e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012ae8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012aec:	b25b      	sxtb	r3, r3
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	da03      	bge.n	8012afa <f_open+0x72>
				res = FR_INVALID_NAME;
 8012af2:	2306      	movs	r3, #6
 8012af4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012af8:	e011      	b.n	8012b1e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012afa:	79fb      	ldrb	r3, [r7, #7]
 8012afc:	f023 0301 	bic.w	r3, r3, #1
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	bf14      	ite	ne
 8012b04:	2301      	movne	r3, #1
 8012b06:	2300      	moveq	r3, #0
 8012b08:	b2db      	uxtb	r3, r3
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	f107 0314 	add.w	r3, r7, #20
 8012b10:	4611      	mov	r1, r2
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7fe fa4c 	bl	8010fb0 <chk_lock>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012b1e:	79fb      	ldrb	r3, [r7, #7]
 8012b20:	f003 031c 	and.w	r3, r3, #28
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d07e      	beq.n	8012c26 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012b28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d017      	beq.n	8012b60 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012b30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b34:	2b04      	cmp	r3, #4
 8012b36:	d10e      	bne.n	8012b56 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012b38:	f7fe fa96 	bl	8011068 <enq_lock>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d006      	beq.n	8012b50 <f_open+0xc8>
 8012b42:	f107 0314 	add.w	r3, r7, #20
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7ff fa52 	bl	8011ff0 <dir_register>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	e000      	b.n	8012b52 <f_open+0xca>
 8012b50:	2312      	movs	r3, #18
 8012b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012b56:	79fb      	ldrb	r3, [r7, #7]
 8012b58:	f043 0308 	orr.w	r3, r3, #8
 8012b5c:	71fb      	strb	r3, [r7, #7]
 8012b5e:	e010      	b.n	8012b82 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012b60:	7ebb      	ldrb	r3, [r7, #26]
 8012b62:	f003 0311 	and.w	r3, r3, #17
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d003      	beq.n	8012b72 <f_open+0xea>
					res = FR_DENIED;
 8012b6a:	2307      	movs	r3, #7
 8012b6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012b70:	e007      	b.n	8012b82 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012b72:	79fb      	ldrb	r3, [r7, #7]
 8012b74:	f003 0304 	and.w	r3, r3, #4
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d002      	beq.n	8012b82 <f_open+0xfa>
 8012b7c:	2308      	movs	r3, #8
 8012b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012b82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d167      	bne.n	8012c5a <f_open+0x1d2>
 8012b8a:	79fb      	ldrb	r3, [r7, #7]
 8012b8c:	f003 0308 	and.w	r3, r3, #8
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d062      	beq.n	8012c5a <f_open+0x1d2>
				dw = GET_FATTIME();
 8012b94:	4ba2      	ldr	r3, [pc, #648]	; (8012e20 <f_open+0x398>)
 8012b96:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b9a:	330e      	adds	r3, #14
 8012b9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7fe f95c 	bl	8010e5c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ba6:	3316      	adds	r3, #22
 8012ba8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7fe f956 	bl	8010e5c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bb2:	330b      	adds	r3, #11
 8012bb4:	2220      	movs	r2, #32
 8012bb6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012bb8:	693b      	ldr	r3, [r7, #16]
 8012bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bbc:	4611      	mov	r1, r2
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7ff f925 	bl	8011e0e <ld_clust>
 8012bc4:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012bc6:	693b      	ldr	r3, [r7, #16]
 8012bc8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012bca:	2200      	movs	r2, #0
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7ff f93d 	bl	8011e4c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bd4:	331c      	adds	r3, #28
 8012bd6:	2100      	movs	r1, #0
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fe f93f 	bl	8010e5c <st_dword>
					fs->wflag = 1;
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	2201      	movs	r2, #1
 8012be2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d037      	beq.n	8012c5a <f_open+0x1d2>
						dw = fs->winsect;
 8012bea:	693b      	ldr	r3, [r7, #16]
 8012bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bee:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012bf0:	f107 0314 	add.w	r3, r7, #20
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f7fe fe2d 	bl	8011858 <remove_chain>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012c04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d126      	bne.n	8012c5a <f_open+0x1d2>
							res = move_window(fs, dw);
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7fe fb7d 	bl	8011310 <move_window>
 8012c16:	4603      	mov	r3, r0
 8012c18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c20:	3a01      	subs	r2, #1
 8012c22:	611a      	str	r2, [r3, #16]
 8012c24:	e019      	b.n	8012c5a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d115      	bne.n	8012c5a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012c2e:	7ebb      	ldrb	r3, [r7, #26]
 8012c30:	f003 0310 	and.w	r3, r3, #16
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d003      	beq.n	8012c40 <f_open+0x1b8>
					res = FR_NO_FILE;
 8012c38:	2304      	movs	r3, #4
 8012c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012c3e:	e00c      	b.n	8012c5a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012c40:	79fb      	ldrb	r3, [r7, #7]
 8012c42:	f003 0302 	and.w	r3, r3, #2
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d007      	beq.n	8012c5a <f_open+0x1d2>
 8012c4a:	7ebb      	ldrb	r3, [r7, #26]
 8012c4c:	f003 0301 	and.w	r3, r3, #1
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d002      	beq.n	8012c5a <f_open+0x1d2>
						res = FR_DENIED;
 8012c54:	2307      	movs	r3, #7
 8012c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012c5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d128      	bne.n	8012cb4 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012c62:	79fb      	ldrb	r3, [r7, #7]
 8012c64:	f003 0308 	and.w	r3, r3, #8
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d003      	beq.n	8012c74 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8012c6c:	79fb      	ldrb	r3, [r7, #7]
 8012c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c72:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012c82:	79fb      	ldrb	r3, [r7, #7]
 8012c84:	f023 0301 	bic.w	r3, r3, #1
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	bf14      	ite	ne
 8012c8c:	2301      	movne	r3, #1
 8012c8e:	2300      	moveq	r3, #0
 8012c90:	b2db      	uxtb	r3, r3
 8012c92:	461a      	mov	r2, r3
 8012c94:	f107 0314 	add.w	r3, r7, #20
 8012c98:	4611      	mov	r1, r2
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7fe fa06 	bl	80110ac <inc_lock>
 8012ca0:	4602      	mov	r2, r0
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	691b      	ldr	r3, [r3, #16]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d102      	bne.n	8012cb4 <f_open+0x22c>
 8012cae:	2302      	movs	r3, #2
 8012cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012cb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	f040 80a3 	bne.w	8012e04 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cc2:	4611      	mov	r1, r2
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7ff f8a2 	bl	8011e0e <ld_clust>
 8012cca:	4602      	mov	r2, r0
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cd2:	331c      	adds	r3, #28
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7fe f883 	bl	8010de0 <ld_dword>
 8012cda:	4602      	mov	r2, r0
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012ce6:	693a      	ldr	r2, [r7, #16]
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	88da      	ldrh	r2, [r3, #6]
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	79fa      	ldrb	r2, [r7, #7]
 8012cf8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	2200      	movs	r2, #0
 8012d04:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2200      	movs	r2, #0
 8012d0a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	3330      	adds	r3, #48	; 0x30
 8012d10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012d14:	2100      	movs	r1, #0
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fe f8ed 	bl	8010ef6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012d1c:	79fb      	ldrb	r3, [r7, #7]
 8012d1e:	f003 0320 	and.w	r3, r3, #32
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d06e      	beq.n	8012e04 <f_open+0x37c>
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	68db      	ldr	r3, [r3, #12]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d06a      	beq.n	8012e04 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	68da      	ldr	r2, [r3, #12]
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	895b      	ldrh	r3, [r3, #10]
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	899b      	ldrh	r3, [r3, #12]
 8012d40:	fb03 f302 	mul.w	r3, r3, r2
 8012d44:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	689b      	ldr	r3, [r3, #8]
 8012d4a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	657b      	str	r3, [r7, #84]	; 0x54
 8012d52:	e016      	b.n	8012d82 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7fe fb96 	bl	801148a <get_fat>
 8012d5e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d62:	2b01      	cmp	r3, #1
 8012d64:	d802      	bhi.n	8012d6c <f_open+0x2e4>
 8012d66:	2302      	movs	r3, #2
 8012d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d72:	d102      	bne.n	8012d7a <f_open+0x2f2>
 8012d74:	2301      	movs	r3, #1
 8012d76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012d7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d7e:	1ad3      	subs	r3, r2, r3
 8012d80:	657b      	str	r3, [r7, #84]	; 0x54
 8012d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d103      	bne.n	8012d92 <f_open+0x30a>
 8012d8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	d8e0      	bhi.n	8012d54 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d96:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012d98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d131      	bne.n	8012e04 <f_open+0x37c>
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	899b      	ldrh	r3, [r3, #12]
 8012da4:	461a      	mov	r2, r3
 8012da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012da8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012dac:	fb02 f201 	mul.w	r2, r2, r1
 8012db0:	1a9b      	subs	r3, r3, r2
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d026      	beq.n	8012e04 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7fe fb46 	bl	801144c <clust2sect>
 8012dc0:	6478      	str	r0, [r7, #68]	; 0x44
 8012dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d103      	bne.n	8012dd0 <f_open+0x348>
						res = FR_INT_ERR;
 8012dc8:	2302      	movs	r3, #2
 8012dca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012dce:	e019      	b.n	8012e04 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	899b      	ldrh	r3, [r3, #12]
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dd8:	fbb3 f2f2 	udiv	r2, r3, r2
 8012ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dde:	441a      	add	r2, r3
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	7858      	ldrb	r0, [r3, #1]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	6a1a      	ldr	r2, [r3, #32]
 8012df2:	2301      	movs	r3, #1
 8012df4:	f7fd ff7e 	bl	8010cf4 <disk_read>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d002      	beq.n	8012e04 <f_open+0x37c>
 8012dfe:	2301      	movs	r3, #1
 8012e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012e04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d002      	beq.n	8012e12 <f_open+0x38a>
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	2200      	movs	r2, #0
 8012e10:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	3760      	adds	r7, #96	; 0x60
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop
 8012e20:	274a0000 	.word	0x274a0000

08012e24 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b08e      	sub	sp, #56	; 0x38
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	60f8      	str	r0, [r7, #12]
 8012e2c:	60b9      	str	r1, [r7, #8]
 8012e2e:	607a      	str	r2, [r7, #4]
 8012e30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	f107 0214 	add.w	r2, r7, #20
 8012e42:	4611      	mov	r1, r2
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7ff fda3 	bl	8012990 <validate>
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012e50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d107      	bne.n	8012e68 <f_read+0x44>
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	7d5b      	ldrb	r3, [r3, #21]
 8012e5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d002      	beq.n	8012e6e <f_read+0x4a>
 8012e68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e6c:	e135      	b.n	80130da <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	7d1b      	ldrb	r3, [r3, #20]
 8012e72:	f003 0301 	and.w	r3, r3, #1
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d101      	bne.n	8012e7e <f_read+0x5a>
 8012e7a:	2307      	movs	r3, #7
 8012e7c:	e12d      	b.n	80130da <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	68da      	ldr	r2, [r3, #12]
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	699b      	ldr	r3, [r3, #24]
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	6a3b      	ldr	r3, [r7, #32]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	f240 811e 	bls.w	80130d0 <f_read+0x2ac>
 8012e94:	6a3b      	ldr	r3, [r7, #32]
 8012e96:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012e98:	e11a      	b.n	80130d0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	699b      	ldr	r3, [r3, #24]
 8012e9e:	697a      	ldr	r2, [r7, #20]
 8012ea0:	8992      	ldrh	r2, [r2, #12]
 8012ea2:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ea6:	fb02 f201 	mul.w	r2, r2, r1
 8012eaa:	1a9b      	subs	r3, r3, r2
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	f040 80d5 	bne.w	801305c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	699b      	ldr	r3, [r3, #24]
 8012eb6:	697a      	ldr	r2, [r7, #20]
 8012eb8:	8992      	ldrh	r2, [r2, #12]
 8012eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ebe:	697a      	ldr	r2, [r7, #20]
 8012ec0:	8952      	ldrh	r2, [r2, #10]
 8012ec2:	3a01      	subs	r2, #1
 8012ec4:	4013      	ands	r3, r2
 8012ec6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012ec8:	69fb      	ldr	r3, [r7, #28]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d12f      	bne.n	8012f2e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	699b      	ldr	r3, [r3, #24]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d103      	bne.n	8012ede <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	689b      	ldr	r3, [r3, #8]
 8012eda:	633b      	str	r3, [r7, #48]	; 0x30
 8012edc:	e013      	b.n	8012f06 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d007      	beq.n	8012ef6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	699b      	ldr	r3, [r3, #24]
 8012eea:	4619      	mov	r1, r3
 8012eec:	68f8      	ldr	r0, [r7, #12]
 8012eee:	f7fe fdb0 	bl	8011a52 <clmt_clust>
 8012ef2:	6338      	str	r0, [r7, #48]	; 0x30
 8012ef4:	e007      	b.n	8012f06 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012ef6:	68fa      	ldr	r2, [r7, #12]
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	69db      	ldr	r3, [r3, #28]
 8012efc:	4619      	mov	r1, r3
 8012efe:	4610      	mov	r0, r2
 8012f00:	f7fe fac3 	bl	801148a <get_fat>
 8012f04:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f08:	2b01      	cmp	r3, #1
 8012f0a:	d804      	bhi.n	8012f16 <f_read+0xf2>
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2202      	movs	r2, #2
 8012f10:	755a      	strb	r2, [r3, #21]
 8012f12:	2302      	movs	r3, #2
 8012f14:	e0e1      	b.n	80130da <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f1c:	d104      	bne.n	8012f28 <f_read+0x104>
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	2201      	movs	r2, #1
 8012f22:	755a      	strb	r2, [r3, #21]
 8012f24:	2301      	movs	r3, #1
 8012f26:	e0d8      	b.n	80130da <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f2c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012f2e:	697a      	ldr	r2, [r7, #20]
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	69db      	ldr	r3, [r3, #28]
 8012f34:	4619      	mov	r1, r3
 8012f36:	4610      	mov	r0, r2
 8012f38:	f7fe fa88 	bl	801144c <clust2sect>
 8012f3c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012f3e:	69bb      	ldr	r3, [r7, #24]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d104      	bne.n	8012f4e <f_read+0x12a>
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	2202      	movs	r2, #2
 8012f48:	755a      	strb	r2, [r3, #21]
 8012f4a:	2302      	movs	r3, #2
 8012f4c:	e0c5      	b.n	80130da <f_read+0x2b6>
			sect += csect;
 8012f4e:	69ba      	ldr	r2, [r7, #24]
 8012f50:	69fb      	ldr	r3, [r7, #28]
 8012f52:	4413      	add	r3, r2
 8012f54:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	899b      	ldrh	r3, [r3, #12]
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f62:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d041      	beq.n	8012fee <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012f6a:	69fa      	ldr	r2, [r7, #28]
 8012f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f6e:	4413      	add	r3, r2
 8012f70:	697a      	ldr	r2, [r7, #20]
 8012f72:	8952      	ldrh	r2, [r2, #10]
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d905      	bls.n	8012f84 <f_read+0x160>
					cc = fs->csize - csect;
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	895b      	ldrh	r3, [r3, #10]
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	69fb      	ldr	r3, [r7, #28]
 8012f80:	1ad3      	subs	r3, r2, r3
 8012f82:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	7858      	ldrb	r0, [r3, #1]
 8012f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8a:	69ba      	ldr	r2, [r7, #24]
 8012f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f8e:	f7fd feb1 	bl	8010cf4 <disk_read>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d004      	beq.n	8012fa2 <f_read+0x17e>
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	2201      	movs	r2, #1
 8012f9c:	755a      	strb	r2, [r3, #21]
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	e09b      	b.n	80130da <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	7d1b      	ldrb	r3, [r3, #20]
 8012fa6:	b25b      	sxtb	r3, r3
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	da18      	bge.n	8012fde <f_read+0x1ba>
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	6a1a      	ldr	r2, [r3, #32]
 8012fb0:	69bb      	ldr	r3, [r7, #24]
 8012fb2:	1ad3      	subs	r3, r2, r3
 8012fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d911      	bls.n	8012fde <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	6a1a      	ldr	r2, [r3, #32]
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	1ad3      	subs	r3, r2, r3
 8012fc2:	697a      	ldr	r2, [r7, #20]
 8012fc4:	8992      	ldrh	r2, [r2, #12]
 8012fc6:	fb02 f303 	mul.w	r3, r2, r3
 8012fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fcc:	18d0      	adds	r0, r2, r3
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	899b      	ldrh	r3, [r3, #12]
 8012fd8:	461a      	mov	r2, r3
 8012fda:	f7fd ff6b 	bl	8010eb4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	899b      	ldrh	r3, [r3, #12]
 8012fe2:	461a      	mov	r2, r3
 8012fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe6:	fb02 f303 	mul.w	r3, r2, r3
 8012fea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012fec:	e05c      	b.n	80130a8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	6a1b      	ldr	r3, [r3, #32]
 8012ff2:	69ba      	ldr	r2, [r7, #24]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d02e      	beq.n	8013056 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	7d1b      	ldrb	r3, [r3, #20]
 8012ffc:	b25b      	sxtb	r3, r3
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	da18      	bge.n	8013034 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013002:	697b      	ldr	r3, [r7, #20]
 8013004:	7858      	ldrb	r0, [r3, #1]
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	6a1a      	ldr	r2, [r3, #32]
 8013010:	2301      	movs	r3, #1
 8013012:	f7fd fe8f 	bl	8010d34 <disk_write>
 8013016:	4603      	mov	r3, r0
 8013018:	2b00      	cmp	r3, #0
 801301a:	d004      	beq.n	8013026 <f_read+0x202>
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2201      	movs	r2, #1
 8013020:	755a      	strb	r2, [r3, #21]
 8013022:	2301      	movs	r3, #1
 8013024:	e059      	b.n	80130da <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	7d1b      	ldrb	r3, [r3, #20]
 801302a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801302e:	b2da      	uxtb	r2, r3
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	7858      	ldrb	r0, [r3, #1]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801303e:	2301      	movs	r3, #1
 8013040:	69ba      	ldr	r2, [r7, #24]
 8013042:	f7fd fe57 	bl	8010cf4 <disk_read>
 8013046:	4603      	mov	r3, r0
 8013048:	2b00      	cmp	r3, #0
 801304a:	d004      	beq.n	8013056 <f_read+0x232>
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	2201      	movs	r2, #1
 8013050:	755a      	strb	r2, [r3, #21]
 8013052:	2301      	movs	r3, #1
 8013054:	e041      	b.n	80130da <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	69ba      	ldr	r2, [r7, #24]
 801305a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	899b      	ldrh	r3, [r3, #12]
 8013060:	4618      	mov	r0, r3
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	699b      	ldr	r3, [r3, #24]
 8013066:	697a      	ldr	r2, [r7, #20]
 8013068:	8992      	ldrh	r2, [r2, #12]
 801306a:	fbb3 f1f2 	udiv	r1, r3, r2
 801306e:	fb02 f201 	mul.w	r2, r2, r1
 8013072:	1a9b      	subs	r3, r3, r2
 8013074:	1ac3      	subs	r3, r0, r3
 8013076:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	429a      	cmp	r2, r3
 801307e:	d901      	bls.n	8013084 <f_read+0x260>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	699b      	ldr	r3, [r3, #24]
 801308e:	697a      	ldr	r2, [r7, #20]
 8013090:	8992      	ldrh	r2, [r2, #12]
 8013092:	fbb3 f0f2 	udiv	r0, r3, r2
 8013096:	fb02 f200 	mul.w	r2, r2, r0
 801309a:	1a9b      	subs	r3, r3, r2
 801309c:	440b      	add	r3, r1
 801309e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80130a0:	4619      	mov	r1, r3
 80130a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130a4:	f7fd ff06 	bl	8010eb4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80130a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ac:	4413      	add	r3, r2
 80130ae:	627b      	str	r3, [r7, #36]	; 0x24
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	699a      	ldr	r2, [r3, #24]
 80130b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b6:	441a      	add	r2, r3
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	619a      	str	r2, [r3, #24]
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	681a      	ldr	r2, [r3, #0]
 80130c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c2:	441a      	add	r2, r3
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	601a      	str	r2, [r3, #0]
 80130c8:	687a      	ldr	r2, [r7, #4]
 80130ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130cc:	1ad3      	subs	r3, r2, r3
 80130ce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	f47f aee1 	bne.w	8012e9a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80130d8:	2300      	movs	r3, #0
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3738      	adds	r7, #56	; 0x38
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}

080130e2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80130e2:	b580      	push	{r7, lr}
 80130e4:	b08c      	sub	sp, #48	; 0x30
 80130e6:	af00      	add	r7, sp, #0
 80130e8:	60f8      	str	r0, [r7, #12]
 80130ea:	60b9      	str	r1, [r7, #8]
 80130ec:	607a      	str	r2, [r7, #4]
 80130ee:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	2200      	movs	r2, #0
 80130f8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	f107 0210 	add.w	r2, r7, #16
 8013100:	4611      	mov	r1, r2
 8013102:	4618      	mov	r0, r3
 8013104:	f7ff fc44 	bl	8012990 <validate>
 8013108:	4603      	mov	r3, r0
 801310a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801310e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013112:	2b00      	cmp	r3, #0
 8013114:	d107      	bne.n	8013126 <f_write+0x44>
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	7d5b      	ldrb	r3, [r3, #21]
 801311a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801311e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013122:	2b00      	cmp	r3, #0
 8013124:	d002      	beq.n	801312c <f_write+0x4a>
 8013126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801312a:	e16a      	b.n	8013402 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	7d1b      	ldrb	r3, [r3, #20]
 8013130:	f003 0302 	and.w	r3, r3, #2
 8013134:	2b00      	cmp	r3, #0
 8013136:	d101      	bne.n	801313c <f_write+0x5a>
 8013138:	2307      	movs	r3, #7
 801313a:	e162      	b.n	8013402 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	699a      	ldr	r2, [r3, #24]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	441a      	add	r2, r3
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	699b      	ldr	r3, [r3, #24]
 8013148:	429a      	cmp	r2, r3
 801314a:	f080 814c 	bcs.w	80133e6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	699b      	ldr	r3, [r3, #24]
 8013152:	43db      	mvns	r3, r3
 8013154:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013156:	e146      	b.n	80133e6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	699b      	ldr	r3, [r3, #24]
 801315c:	693a      	ldr	r2, [r7, #16]
 801315e:	8992      	ldrh	r2, [r2, #12]
 8013160:	fbb3 f1f2 	udiv	r1, r3, r2
 8013164:	fb02 f201 	mul.w	r2, r2, r1
 8013168:	1a9b      	subs	r3, r3, r2
 801316a:	2b00      	cmp	r3, #0
 801316c:	f040 80f1 	bne.w	8013352 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	699b      	ldr	r3, [r3, #24]
 8013174:	693a      	ldr	r2, [r7, #16]
 8013176:	8992      	ldrh	r2, [r2, #12]
 8013178:	fbb3 f3f2 	udiv	r3, r3, r2
 801317c:	693a      	ldr	r2, [r7, #16]
 801317e:	8952      	ldrh	r2, [r2, #10]
 8013180:	3a01      	subs	r2, #1
 8013182:	4013      	ands	r3, r2
 8013184:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013186:	69bb      	ldr	r3, [r7, #24]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d143      	bne.n	8013214 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	699b      	ldr	r3, [r3, #24]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d10c      	bne.n	80131ae <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	689b      	ldr	r3, [r3, #8]
 8013198:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319c:	2b00      	cmp	r3, #0
 801319e:	d11a      	bne.n	80131d6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2100      	movs	r1, #0
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7fe fbbc 	bl	8011922 <create_chain>
 80131aa:	62b8      	str	r0, [r7, #40]	; 0x28
 80131ac:	e013      	b.n	80131d6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d007      	beq.n	80131c6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	699b      	ldr	r3, [r3, #24]
 80131ba:	4619      	mov	r1, r3
 80131bc:	68f8      	ldr	r0, [r7, #12]
 80131be:	f7fe fc48 	bl	8011a52 <clmt_clust>
 80131c2:	62b8      	str	r0, [r7, #40]	; 0x28
 80131c4:	e007      	b.n	80131d6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80131c6:	68fa      	ldr	r2, [r7, #12]
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	69db      	ldr	r3, [r3, #28]
 80131cc:	4619      	mov	r1, r3
 80131ce:	4610      	mov	r0, r2
 80131d0:	f7fe fba7 	bl	8011922 <create_chain>
 80131d4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80131d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d8:	2b00      	cmp	r3, #0
 80131da:	f000 8109 	beq.w	80133f0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80131de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e0:	2b01      	cmp	r3, #1
 80131e2:	d104      	bne.n	80131ee <f_write+0x10c>
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	2202      	movs	r2, #2
 80131e8:	755a      	strb	r2, [r3, #21]
 80131ea:	2302      	movs	r3, #2
 80131ec:	e109      	b.n	8013402 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80131ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131f4:	d104      	bne.n	8013200 <f_write+0x11e>
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	2201      	movs	r2, #1
 80131fa:	755a      	strb	r2, [r3, #21]
 80131fc:	2301      	movs	r3, #1
 80131fe:	e100      	b.n	8013402 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013204:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	689b      	ldr	r3, [r3, #8]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d102      	bne.n	8013214 <f_write+0x132>
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013212:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	7d1b      	ldrb	r3, [r3, #20]
 8013218:	b25b      	sxtb	r3, r3
 801321a:	2b00      	cmp	r3, #0
 801321c:	da18      	bge.n	8013250 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801321e:	693b      	ldr	r3, [r7, #16]
 8013220:	7858      	ldrb	r0, [r3, #1]
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	6a1a      	ldr	r2, [r3, #32]
 801322c:	2301      	movs	r3, #1
 801322e:	f7fd fd81 	bl	8010d34 <disk_write>
 8013232:	4603      	mov	r3, r0
 8013234:	2b00      	cmp	r3, #0
 8013236:	d004      	beq.n	8013242 <f_write+0x160>
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	2201      	movs	r2, #1
 801323c:	755a      	strb	r2, [r3, #21]
 801323e:	2301      	movs	r3, #1
 8013240:	e0df      	b.n	8013402 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	7d1b      	ldrb	r3, [r3, #20]
 8013246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801324a:	b2da      	uxtb	r2, r3
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013250:	693a      	ldr	r2, [r7, #16]
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	69db      	ldr	r3, [r3, #28]
 8013256:	4619      	mov	r1, r3
 8013258:	4610      	mov	r0, r2
 801325a:	f7fe f8f7 	bl	801144c <clust2sect>
 801325e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013260:	697b      	ldr	r3, [r7, #20]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d104      	bne.n	8013270 <f_write+0x18e>
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	2202      	movs	r2, #2
 801326a:	755a      	strb	r2, [r3, #21]
 801326c:	2302      	movs	r3, #2
 801326e:	e0c8      	b.n	8013402 <f_write+0x320>
			sect += csect;
 8013270:	697a      	ldr	r2, [r7, #20]
 8013272:	69bb      	ldr	r3, [r7, #24]
 8013274:	4413      	add	r3, r2
 8013276:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	899b      	ldrh	r3, [r3, #12]
 801327c:	461a      	mov	r2, r3
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	fbb3 f3f2 	udiv	r3, r3, r2
 8013284:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013286:	6a3b      	ldr	r3, [r7, #32]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d043      	beq.n	8013314 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801328c:	69ba      	ldr	r2, [r7, #24]
 801328e:	6a3b      	ldr	r3, [r7, #32]
 8013290:	4413      	add	r3, r2
 8013292:	693a      	ldr	r2, [r7, #16]
 8013294:	8952      	ldrh	r2, [r2, #10]
 8013296:	4293      	cmp	r3, r2
 8013298:	d905      	bls.n	80132a6 <f_write+0x1c4>
					cc = fs->csize - csect;
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	895b      	ldrh	r3, [r3, #10]
 801329e:	461a      	mov	r2, r3
 80132a0:	69bb      	ldr	r3, [r7, #24]
 80132a2:	1ad3      	subs	r3, r2, r3
 80132a4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	7858      	ldrb	r0, [r3, #1]
 80132aa:	6a3b      	ldr	r3, [r7, #32]
 80132ac:	697a      	ldr	r2, [r7, #20]
 80132ae:	69f9      	ldr	r1, [r7, #28]
 80132b0:	f7fd fd40 	bl	8010d34 <disk_write>
 80132b4:	4603      	mov	r3, r0
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d004      	beq.n	80132c4 <f_write+0x1e2>
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	2201      	movs	r2, #1
 80132be:	755a      	strb	r2, [r3, #21]
 80132c0:	2301      	movs	r3, #1
 80132c2:	e09e      	b.n	8013402 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	6a1a      	ldr	r2, [r3, #32]
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	1ad3      	subs	r3, r2, r3
 80132cc:	6a3a      	ldr	r2, [r7, #32]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d918      	bls.n	8013304 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	6a1a      	ldr	r2, [r3, #32]
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	1ad3      	subs	r3, r2, r3
 80132e0:	693a      	ldr	r2, [r7, #16]
 80132e2:	8992      	ldrh	r2, [r2, #12]
 80132e4:	fb02 f303 	mul.w	r3, r2, r3
 80132e8:	69fa      	ldr	r2, [r7, #28]
 80132ea:	18d1      	adds	r1, r2, r3
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	899b      	ldrh	r3, [r3, #12]
 80132f0:	461a      	mov	r2, r3
 80132f2:	f7fd fddf 	bl	8010eb4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	7d1b      	ldrb	r3, [r3, #20]
 80132fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132fe:	b2da      	uxtb	r2, r3
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	899b      	ldrh	r3, [r3, #12]
 8013308:	461a      	mov	r2, r3
 801330a:	6a3b      	ldr	r3, [r7, #32]
 801330c:	fb02 f303 	mul.w	r3, r2, r3
 8013310:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013312:	e04b      	b.n	80133ac <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	6a1b      	ldr	r3, [r3, #32]
 8013318:	697a      	ldr	r2, [r7, #20]
 801331a:	429a      	cmp	r2, r3
 801331c:	d016      	beq.n	801334c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	699a      	ldr	r2, [r3, #24]
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013326:	429a      	cmp	r2, r3
 8013328:	d210      	bcs.n	801334c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801332a:	693b      	ldr	r3, [r7, #16]
 801332c:	7858      	ldrb	r0, [r3, #1]
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013334:	2301      	movs	r3, #1
 8013336:	697a      	ldr	r2, [r7, #20]
 8013338:	f7fd fcdc 	bl	8010cf4 <disk_read>
 801333c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801333e:	2b00      	cmp	r3, #0
 8013340:	d004      	beq.n	801334c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	2201      	movs	r2, #1
 8013346:	755a      	strb	r2, [r3, #21]
 8013348:	2301      	movs	r3, #1
 801334a:	e05a      	b.n	8013402 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	697a      	ldr	r2, [r7, #20]
 8013350:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	899b      	ldrh	r3, [r3, #12]
 8013356:	4618      	mov	r0, r3
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	699b      	ldr	r3, [r3, #24]
 801335c:	693a      	ldr	r2, [r7, #16]
 801335e:	8992      	ldrh	r2, [r2, #12]
 8013360:	fbb3 f1f2 	udiv	r1, r3, r2
 8013364:	fb02 f201 	mul.w	r2, r2, r1
 8013368:	1a9b      	subs	r3, r3, r2
 801336a:	1ac3      	subs	r3, r0, r3
 801336c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801336e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	429a      	cmp	r2, r3
 8013374:	d901      	bls.n	801337a <f_write+0x298>
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	699b      	ldr	r3, [r3, #24]
 8013384:	693a      	ldr	r2, [r7, #16]
 8013386:	8992      	ldrh	r2, [r2, #12]
 8013388:	fbb3 f0f2 	udiv	r0, r3, r2
 801338c:	fb02 f200 	mul.w	r2, r2, r0
 8013390:	1a9b      	subs	r3, r3, r2
 8013392:	440b      	add	r3, r1
 8013394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013396:	69f9      	ldr	r1, [r7, #28]
 8013398:	4618      	mov	r0, r3
 801339a:	f7fd fd8b 	bl	8010eb4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	7d1b      	ldrb	r3, [r3, #20]
 80133a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80133a6:	b2da      	uxtb	r2, r3
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80133ac:	69fa      	ldr	r2, [r7, #28]
 80133ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b0:	4413      	add	r3, r2
 80133b2:	61fb      	str	r3, [r7, #28]
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	699a      	ldr	r2, [r3, #24]
 80133b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ba:	441a      	add	r2, r3
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	619a      	str	r2, [r3, #24]
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	68da      	ldr	r2, [r3, #12]
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	699b      	ldr	r3, [r3, #24]
 80133c8:	429a      	cmp	r2, r3
 80133ca:	bf38      	it	cc
 80133cc:	461a      	movcc	r2, r3
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	60da      	str	r2, [r3, #12]
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	681a      	ldr	r2, [r3, #0]
 80133d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d8:	441a      	add	r2, r3
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	601a      	str	r2, [r3, #0]
 80133de:	687a      	ldr	r2, [r7, #4]
 80133e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e2:	1ad3      	subs	r3, r2, r3
 80133e4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	f47f aeb5 	bne.w	8013158 <f_write+0x76>
 80133ee:	e000      	b.n	80133f2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80133f0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	7d1b      	ldrb	r3, [r3, #20]
 80133f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133fa:	b2da      	uxtb	r2, r3
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013400:	2300      	movs	r3, #0
}
 8013402:	4618      	mov	r0, r3
 8013404:	3730      	adds	r7, #48	; 0x30
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
	...

0801340c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b086      	sub	sp, #24
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f107 0208 	add.w	r2, r7, #8
 801341a:	4611      	mov	r1, r2
 801341c:	4618      	mov	r0, r3
 801341e:	f7ff fab7 	bl	8012990 <validate>
 8013422:	4603      	mov	r3, r0
 8013424:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013426:	7dfb      	ldrb	r3, [r7, #23]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d167      	bne.n	80134fc <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	7d1b      	ldrb	r3, [r3, #20]
 8013430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013434:	2b00      	cmp	r3, #0
 8013436:	d061      	beq.n	80134fc <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	7d1b      	ldrb	r3, [r3, #20]
 801343c:	b25b      	sxtb	r3, r3
 801343e:	2b00      	cmp	r3, #0
 8013440:	da15      	bge.n	801346e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	7858      	ldrb	r0, [r3, #1]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	6a1a      	ldr	r2, [r3, #32]
 8013450:	2301      	movs	r3, #1
 8013452:	f7fd fc6f 	bl	8010d34 <disk_write>
 8013456:	4603      	mov	r3, r0
 8013458:	2b00      	cmp	r3, #0
 801345a:	d001      	beq.n	8013460 <f_sync+0x54>
 801345c:	2301      	movs	r3, #1
 801345e:	e04e      	b.n	80134fe <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	7d1b      	ldrb	r3, [r3, #20]
 8013464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013468:	b2da      	uxtb	r2, r3
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801346e:	4b26      	ldr	r3, [pc, #152]	; (8013508 <f_sync+0xfc>)
 8013470:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013472:	68ba      	ldr	r2, [r7, #8]
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013478:	4619      	mov	r1, r3
 801347a:	4610      	mov	r0, r2
 801347c:	f7fd ff48 	bl	8011310 <move_window>
 8013480:	4603      	mov	r3, r0
 8013482:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013484:	7dfb      	ldrb	r3, [r7, #23]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d138      	bne.n	80134fc <f_sync+0xf0>
					dir = fp->dir_ptr;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801348e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	330b      	adds	r3, #11
 8013494:	781a      	ldrb	r2, [r3, #0]
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	330b      	adds	r3, #11
 801349a:	f042 0220 	orr.w	r2, r2, #32
 801349e:	b2d2      	uxtb	r2, r2
 80134a0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6818      	ldr	r0, [r3, #0]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	689b      	ldr	r3, [r3, #8]
 80134aa:	461a      	mov	r2, r3
 80134ac:	68f9      	ldr	r1, [r7, #12]
 80134ae:	f7fe fccd 	bl	8011e4c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	f103 021c 	add.w	r2, r3, #28
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	68db      	ldr	r3, [r3, #12]
 80134bc:	4619      	mov	r1, r3
 80134be:	4610      	mov	r0, r2
 80134c0:	f7fd fccc 	bl	8010e5c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	3316      	adds	r3, #22
 80134c8:	6939      	ldr	r1, [r7, #16]
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7fd fcc6 	bl	8010e5c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	3312      	adds	r3, #18
 80134d4:	2100      	movs	r1, #0
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7fd fca5 	bl	8010e26 <st_word>
					fs->wflag = 1;
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	2201      	movs	r2, #1
 80134e0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7fd ff41 	bl	801136c <sync_fs>
 80134ea:	4603      	mov	r3, r0
 80134ec:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	7d1b      	ldrb	r3, [r3, #20]
 80134f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80134f6:	b2da      	uxtb	r2, r3
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80134fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3718      	adds	r7, #24
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
 8013506:	bf00      	nop
 8013508:	274a0000 	.word	0x274a0000

0801350c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f7ff ff79 	bl	801340c <f_sync>
 801351a:	4603      	mov	r3, r0
 801351c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801351e:	7bfb      	ldrb	r3, [r7, #15]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d118      	bne.n	8013556 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f107 0208 	add.w	r2, r7, #8
 801352a:	4611      	mov	r1, r2
 801352c:	4618      	mov	r0, r3
 801352e:	f7ff fa2f 	bl	8012990 <validate>
 8013532:	4603      	mov	r3, r0
 8013534:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013536:	7bfb      	ldrb	r3, [r7, #15]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d10c      	bne.n	8013556 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	691b      	ldr	r3, [r3, #16]
 8013540:	4618      	mov	r0, r3
 8013542:	f7fd fe41 	bl	80111c8 <dec_lock>
 8013546:	4603      	mov	r3, r0
 8013548:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801354a:	7bfb      	ldrb	r3, [r7, #15]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d102      	bne.n	8013556 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2200      	movs	r2, #0
 8013554:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013556:	7bfb      	ldrb	r3, [r7, #15]
}
 8013558:	4618      	mov	r0, r3
 801355a:	3710      	adds	r7, #16
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}

08013560 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013560:	b590      	push	{r4, r7, lr}
 8013562:	b091      	sub	sp, #68	; 0x44
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013568:	f107 0108 	add.w	r1, r7, #8
 801356c:	1d3b      	adds	r3, r7, #4
 801356e:	2200      	movs	r2, #0
 8013570:	4618      	mov	r0, r3
 8013572:	f7fe ff87 	bl	8012484 <find_volume>
 8013576:	4603      	mov	r3, r0
 8013578:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801357c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013580:	2b00      	cmp	r3, #0
 8013582:	d131      	bne.n	80135e8 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013584:	68bb      	ldr	r3, [r7, #8]
 8013586:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013588:	687a      	ldr	r2, [r7, #4]
 801358a:	f107 030c 	add.w	r3, r7, #12
 801358e:	4611      	mov	r1, r2
 8013590:	4618      	mov	r0, r3
 8013592:	f7fe fe47 	bl	8012224 <follow_path>
 8013596:	4603      	mov	r3, r0
 8013598:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 801359c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d11a      	bne.n	80135da <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80135a4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80135a8:	b25b      	sxtb	r3, r3
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	da03      	bge.n	80135b6 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	697a      	ldr	r2, [r7, #20]
 80135b2:	619a      	str	r2, [r3, #24]
 80135b4:	e011      	b.n	80135da <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80135b6:	7cbb      	ldrb	r3, [r7, #18]
 80135b8:	f003 0310 	and.w	r3, r3, #16
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d009      	beq.n	80135d4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135c4:	68bc      	ldr	r4, [r7, #8]
 80135c6:	4611      	mov	r1, r2
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7fe fc20 	bl	8011e0e <ld_clust>
 80135ce:	4603      	mov	r3, r0
 80135d0:	61a3      	str	r3, [r4, #24]
 80135d2:	e002      	b.n	80135da <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80135d4:	2305      	movs	r3, #5
 80135d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80135da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135de:	2b04      	cmp	r3, #4
 80135e0:	d102      	bne.n	80135e8 <f_chdir+0x88>
 80135e2:	2305      	movs	r3, #5
 80135e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80135e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3744      	adds	r7, #68	; 0x44
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd90      	pop	{r4, r7, pc}

080135f4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b090      	sub	sp, #64	; 0x40
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f107 0208 	add.w	r2, r7, #8
 8013604:	4611      	mov	r1, r2
 8013606:	4618      	mov	r0, r3
 8013608:	f7ff f9c2 	bl	8012990 <validate>
 801360c:	4603      	mov	r3, r0
 801360e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013616:	2b00      	cmp	r3, #0
 8013618:	d103      	bne.n	8013622 <f_lseek+0x2e>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	7d5b      	ldrb	r3, [r3, #21]
 801361e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013622:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013626:	2b00      	cmp	r3, #0
 8013628:	d002      	beq.n	8013630 <f_lseek+0x3c>
 801362a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801362e:	e201      	b.n	8013a34 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013634:	2b00      	cmp	r3, #0
 8013636:	f000 80d9 	beq.w	80137ec <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013640:	d15a      	bne.n	80136f8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013646:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364a:	1d1a      	adds	r2, r3, #4
 801364c:	627a      	str	r2, [r7, #36]	; 0x24
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	617b      	str	r3, [r7, #20]
 8013652:	2302      	movs	r3, #2
 8013654:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	689b      	ldr	r3, [r3, #8]
 801365a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365e:	2b00      	cmp	r3, #0
 8013660:	d03a      	beq.n	80136d8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013664:	613b      	str	r3, [r7, #16]
 8013666:	2300      	movs	r3, #0
 8013668:	62fb      	str	r3, [r7, #44]	; 0x2c
 801366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366c:	3302      	adds	r3, #2
 801366e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013672:	60fb      	str	r3, [r7, #12]
 8013674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013676:	3301      	adds	r3, #1
 8013678:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801367e:	4618      	mov	r0, r3
 8013680:	f7fd ff03 	bl	801148a <get_fat>
 8013684:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013688:	2b01      	cmp	r3, #1
 801368a:	d804      	bhi.n	8013696 <f_lseek+0xa2>
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2202      	movs	r2, #2
 8013690:	755a      	strb	r2, [r3, #21]
 8013692:	2302      	movs	r3, #2
 8013694:	e1ce      	b.n	8013a34 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801369c:	d104      	bne.n	80136a8 <f_lseek+0xb4>
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	2201      	movs	r2, #1
 80136a2:	755a      	strb	r2, [r3, #21]
 80136a4:	2301      	movs	r3, #1
 80136a6:	e1c5      	b.n	8013a34 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	3301      	adds	r3, #1
 80136ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136ae:	429a      	cmp	r2, r3
 80136b0:	d0de      	beq.n	8013670 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80136b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d809      	bhi.n	80136ce <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80136ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136bc:	1d1a      	adds	r2, r3, #4
 80136be:	627a      	str	r2, [r7, #36]	; 0x24
 80136c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136c2:	601a      	str	r2, [r3, #0]
 80136c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c6:	1d1a      	adds	r2, r3, #4
 80136c8:	627a      	str	r2, [r7, #36]	; 0x24
 80136ca:	693a      	ldr	r2, [r7, #16]
 80136cc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80136ce:	68bb      	ldr	r3, [r7, #8]
 80136d0:	69db      	ldr	r3, [r3, #28]
 80136d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d3c4      	bcc.n	8013662 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136de:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80136e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d803      	bhi.n	80136f0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80136e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ea:	2200      	movs	r2, #0
 80136ec:	601a      	str	r2, [r3, #0]
 80136ee:	e19f      	b.n	8013a30 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80136f0:	2311      	movs	r3, #17
 80136f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80136f6:	e19b      	b.n	8013a30 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	68db      	ldr	r3, [r3, #12]
 80136fc:	683a      	ldr	r2, [r7, #0]
 80136fe:	429a      	cmp	r2, r3
 8013700:	d902      	bls.n	8013708 <f_lseek+0x114>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	68db      	ldr	r3, [r3, #12]
 8013706:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	683a      	ldr	r2, [r7, #0]
 801370c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	2b00      	cmp	r3, #0
 8013712:	f000 818d 	beq.w	8013a30 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	3b01      	subs	r3, #1
 801371a:	4619      	mov	r1, r3
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f7fe f998 	bl	8011a52 <clmt_clust>
 8013722:	4602      	mov	r2, r0
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013728:	68ba      	ldr	r2, [r7, #8]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	69db      	ldr	r3, [r3, #28]
 801372e:	4619      	mov	r1, r3
 8013730:	4610      	mov	r0, r2
 8013732:	f7fd fe8b 	bl	801144c <clust2sect>
 8013736:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013738:	69bb      	ldr	r3, [r7, #24]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d104      	bne.n	8013748 <f_lseek+0x154>
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2202      	movs	r2, #2
 8013742:	755a      	strb	r2, [r3, #21]
 8013744:	2302      	movs	r3, #2
 8013746:	e175      	b.n	8013a34 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	3b01      	subs	r3, #1
 801374c:	68ba      	ldr	r2, [r7, #8]
 801374e:	8992      	ldrh	r2, [r2, #12]
 8013750:	fbb3 f3f2 	udiv	r3, r3, r2
 8013754:	68ba      	ldr	r2, [r7, #8]
 8013756:	8952      	ldrh	r2, [r2, #10]
 8013758:	3a01      	subs	r2, #1
 801375a:	4013      	ands	r3, r2
 801375c:	69ba      	ldr	r2, [r7, #24]
 801375e:	4413      	add	r3, r2
 8013760:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	699b      	ldr	r3, [r3, #24]
 8013766:	68ba      	ldr	r2, [r7, #8]
 8013768:	8992      	ldrh	r2, [r2, #12]
 801376a:	fbb3 f1f2 	udiv	r1, r3, r2
 801376e:	fb02 f201 	mul.w	r2, r2, r1
 8013772:	1a9b      	subs	r3, r3, r2
 8013774:	2b00      	cmp	r3, #0
 8013776:	f000 815b 	beq.w	8013a30 <f_lseek+0x43c>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	6a1b      	ldr	r3, [r3, #32]
 801377e:	69ba      	ldr	r2, [r7, #24]
 8013780:	429a      	cmp	r2, r3
 8013782:	f000 8155 	beq.w	8013a30 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	7d1b      	ldrb	r3, [r3, #20]
 801378a:	b25b      	sxtb	r3, r3
 801378c:	2b00      	cmp	r3, #0
 801378e:	da18      	bge.n	80137c2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	7858      	ldrb	r0, [r3, #1]
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6a1a      	ldr	r2, [r3, #32]
 801379e:	2301      	movs	r3, #1
 80137a0:	f7fd fac8 	bl	8010d34 <disk_write>
 80137a4:	4603      	mov	r3, r0
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d004      	beq.n	80137b4 <f_lseek+0x1c0>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2201      	movs	r2, #1
 80137ae:	755a      	strb	r2, [r3, #21]
 80137b0:	2301      	movs	r3, #1
 80137b2:	e13f      	b.n	8013a34 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	7d1b      	ldrb	r3, [r3, #20]
 80137b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137bc:	b2da      	uxtb	r2, r3
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	7858      	ldrb	r0, [r3, #1]
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137cc:	2301      	movs	r3, #1
 80137ce:	69ba      	ldr	r2, [r7, #24]
 80137d0:	f7fd fa90 	bl	8010cf4 <disk_read>
 80137d4:	4603      	mov	r3, r0
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d004      	beq.n	80137e4 <f_lseek+0x1f0>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2201      	movs	r2, #1
 80137de:	755a      	strb	r2, [r3, #21]
 80137e0:	2301      	movs	r3, #1
 80137e2:	e127      	b.n	8013a34 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	69ba      	ldr	r2, [r7, #24]
 80137e8:	621a      	str	r2, [r3, #32]
 80137ea:	e121      	b.n	8013a30 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	68db      	ldr	r3, [r3, #12]
 80137f0:	683a      	ldr	r2, [r7, #0]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d908      	bls.n	8013808 <f_lseek+0x214>
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	7d1b      	ldrb	r3, [r3, #20]
 80137fa:	f003 0302 	and.w	r3, r3, #2
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d102      	bne.n	8013808 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	68db      	ldr	r3, [r3, #12]
 8013806:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	699b      	ldr	r3, [r3, #24]
 801380c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801380e:	2300      	movs	r3, #0
 8013810:	637b      	str	r3, [r7, #52]	; 0x34
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013816:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	2b00      	cmp	r3, #0
 801381c:	f000 80b5 	beq.w	801398a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	895b      	ldrh	r3, [r3, #10]
 8013824:	461a      	mov	r2, r3
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	899b      	ldrh	r3, [r3, #12]
 801382a:	fb03 f302 	mul.w	r3, r3, r2
 801382e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013830:	6a3b      	ldr	r3, [r7, #32]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d01b      	beq.n	801386e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	1e5a      	subs	r2, r3, #1
 801383a:	69fb      	ldr	r3, [r7, #28]
 801383c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013840:	6a3b      	ldr	r3, [r7, #32]
 8013842:	1e59      	subs	r1, r3, #1
 8013844:	69fb      	ldr	r3, [r7, #28]
 8013846:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801384a:	429a      	cmp	r2, r3
 801384c:	d30f      	bcc.n	801386e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801384e:	6a3b      	ldr	r3, [r7, #32]
 8013850:	1e5a      	subs	r2, r3, #1
 8013852:	69fb      	ldr	r3, [r7, #28]
 8013854:	425b      	negs	r3, r3
 8013856:	401a      	ands	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	699b      	ldr	r3, [r3, #24]
 8013860:	683a      	ldr	r2, [r7, #0]
 8013862:	1ad3      	subs	r3, r2, r3
 8013864:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	69db      	ldr	r3, [r3, #28]
 801386a:	63bb      	str	r3, [r7, #56]	; 0x38
 801386c:	e022      	b.n	80138b4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	689b      	ldr	r3, [r3, #8]
 8013872:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013876:	2b00      	cmp	r3, #0
 8013878:	d119      	bne.n	80138ae <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2100      	movs	r1, #0
 801387e:	4618      	mov	r0, r3
 8013880:	f7fe f84f 	bl	8011922 <create_chain>
 8013884:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013888:	2b01      	cmp	r3, #1
 801388a:	d104      	bne.n	8013896 <f_lseek+0x2a2>
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2202      	movs	r2, #2
 8013890:	755a      	strb	r2, [r3, #21]
 8013892:	2302      	movs	r3, #2
 8013894:	e0ce      	b.n	8013a34 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801389c:	d104      	bne.n	80138a8 <f_lseek+0x2b4>
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2201      	movs	r2, #1
 80138a2:	755a      	strb	r2, [r3, #21]
 80138a4:	2301      	movs	r3, #1
 80138a6:	e0c5      	b.n	8013a34 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138ac:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138b2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80138b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d067      	beq.n	801398a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80138ba:	e03a      	b.n	8013932 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80138bc:	683a      	ldr	r2, [r7, #0]
 80138be:	69fb      	ldr	r3, [r7, #28]
 80138c0:	1ad3      	subs	r3, r2, r3
 80138c2:	603b      	str	r3, [r7, #0]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	699a      	ldr	r2, [r3, #24]
 80138c8:	69fb      	ldr	r3, [r7, #28]
 80138ca:	441a      	add	r2, r3
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	7d1b      	ldrb	r3, [r3, #20]
 80138d4:	f003 0302 	and.w	r3, r3, #2
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d00b      	beq.n	80138f4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7fe f81e 	bl	8011922 <create_chain>
 80138e6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80138e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d108      	bne.n	8013900 <f_lseek+0x30c>
							ofs = 0; break;
 80138ee:	2300      	movs	r3, #0
 80138f0:	603b      	str	r3, [r7, #0]
 80138f2:	e022      	b.n	801393a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7fd fdc6 	bl	801148a <get_fat>
 80138fe:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013906:	d104      	bne.n	8013912 <f_lseek+0x31e>
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2201      	movs	r2, #1
 801390c:	755a      	strb	r2, [r3, #21]
 801390e:	2301      	movs	r3, #1
 8013910:	e090      	b.n	8013a34 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013914:	2b01      	cmp	r3, #1
 8013916:	d904      	bls.n	8013922 <f_lseek+0x32e>
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	69db      	ldr	r3, [r3, #28]
 801391c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801391e:	429a      	cmp	r2, r3
 8013920:	d304      	bcc.n	801392c <f_lseek+0x338>
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	2202      	movs	r2, #2
 8013926:	755a      	strb	r2, [r3, #21]
 8013928:	2302      	movs	r3, #2
 801392a:	e083      	b.n	8013a34 <f_lseek+0x440>
					fp->clust = clst;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013930:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013932:	683a      	ldr	r2, [r7, #0]
 8013934:	69fb      	ldr	r3, [r7, #28]
 8013936:	429a      	cmp	r2, r3
 8013938:	d8c0      	bhi.n	80138bc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	699a      	ldr	r2, [r3, #24]
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	441a      	add	r2, r3
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	899b      	ldrh	r3, [r3, #12]
 801394a:	461a      	mov	r2, r3
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013952:	fb02 f201 	mul.w	r2, r2, r1
 8013956:	1a9b      	subs	r3, r3, r2
 8013958:	2b00      	cmp	r3, #0
 801395a:	d016      	beq.n	801398a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013960:	4618      	mov	r0, r3
 8013962:	f7fd fd73 	bl	801144c <clust2sect>
 8013966:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801396a:	2b00      	cmp	r3, #0
 801396c:	d104      	bne.n	8013978 <f_lseek+0x384>
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2202      	movs	r2, #2
 8013972:	755a      	strb	r2, [r3, #21]
 8013974:	2302      	movs	r3, #2
 8013976:	e05d      	b.n	8013a34 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	899b      	ldrh	r3, [r3, #12]
 801397c:	461a      	mov	r2, r3
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	fbb3 f3f2 	udiv	r3, r3, r2
 8013984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013986:	4413      	add	r3, r2
 8013988:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	699a      	ldr	r2, [r3, #24]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	68db      	ldr	r3, [r3, #12]
 8013992:	429a      	cmp	r2, r3
 8013994:	d90a      	bls.n	80139ac <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	699a      	ldr	r2, [r3, #24]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	7d1b      	ldrb	r3, [r3, #20]
 80139a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139a6:	b2da      	uxtb	r2, r3
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	699b      	ldr	r3, [r3, #24]
 80139b0:	68ba      	ldr	r2, [r7, #8]
 80139b2:	8992      	ldrh	r2, [r2, #12]
 80139b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80139b8:	fb02 f201 	mul.w	r2, r2, r1
 80139bc:	1a9b      	subs	r3, r3, r2
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d036      	beq.n	8013a30 <f_lseek+0x43c>
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	6a1b      	ldr	r3, [r3, #32]
 80139c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d031      	beq.n	8013a30 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	7d1b      	ldrb	r3, [r3, #20]
 80139d0:	b25b      	sxtb	r3, r3
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	da18      	bge.n	8013a08 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	7858      	ldrb	r0, [r3, #1]
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	6a1a      	ldr	r2, [r3, #32]
 80139e4:	2301      	movs	r3, #1
 80139e6:	f7fd f9a5 	bl	8010d34 <disk_write>
 80139ea:	4603      	mov	r3, r0
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d004      	beq.n	80139fa <f_lseek+0x406>
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2201      	movs	r2, #1
 80139f4:	755a      	strb	r2, [r3, #21]
 80139f6:	2301      	movs	r3, #1
 80139f8:	e01c      	b.n	8013a34 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	7d1b      	ldrb	r3, [r3, #20]
 80139fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a02:	b2da      	uxtb	r2, r3
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	7858      	ldrb	r0, [r3, #1]
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a12:	2301      	movs	r3, #1
 8013a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a16:	f7fd f96d 	bl	8010cf4 <disk_read>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d004      	beq.n	8013a2a <f_lseek+0x436>
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2201      	movs	r2, #1
 8013a24:	755a      	strb	r2, [r3, #21]
 8013a26:	2301      	movs	r3, #1
 8013a28:	e004      	b.n	8013a34 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a2e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013a30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3740      	adds	r7, #64	; 0x40
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}

08013a3c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b09e      	sub	sp, #120	; 0x78
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013a44:	2300      	movs	r3, #0
 8013a46:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013a48:	f107 010c 	add.w	r1, r7, #12
 8013a4c:	1d3b      	adds	r3, r7, #4
 8013a4e:	2202      	movs	r2, #2
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7fe fd17 	bl	8012484 <find_volume>
 8013a56:	4603      	mov	r3, r0
 8013a58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013a60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	f040 80a4 	bne.w	8013bb2 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013a6a:	687a      	ldr	r2, [r7, #4]
 8013a6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013a70:	4611      	mov	r1, r2
 8013a72:	4618      	mov	r0, r3
 8013a74:	f7fe fbd6 	bl	8012224 <follow_path>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013a7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d108      	bne.n	8013a98 <f_unlink+0x5c>
 8013a86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013a8a:	f003 0320 	and.w	r3, r3, #32
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d002      	beq.n	8013a98 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013a92:	2306      	movs	r3, #6
 8013a94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013a98:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d108      	bne.n	8013ab2 <f_unlink+0x76>
 8013aa0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013aa4:	2102      	movs	r1, #2
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7fd fa82 	bl	8010fb0 <chk_lock>
 8013aac:	4603      	mov	r3, r0
 8013aae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013ab2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d17b      	bne.n	8013bb2 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013aba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013abe:	b25b      	sxtb	r3, r3
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	da03      	bge.n	8013acc <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013ac4:	2306      	movs	r3, #6
 8013ac6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013aca:	e008      	b.n	8013ade <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013acc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013ad0:	f003 0301 	and.w	r3, r3, #1
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d002      	beq.n	8013ade <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013ad8:	2307      	movs	r3, #7
 8013ada:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013ade:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d13d      	bne.n	8013b62 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013aea:	4611      	mov	r1, r2
 8013aec:	4618      	mov	r0, r3
 8013aee:	f7fe f98e 	bl	8011e0e <ld_clust>
 8013af2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013af4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013af8:	f003 0310 	and.w	r3, r3, #16
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d030      	beq.n	8013b62 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	699b      	ldr	r3, [r3, #24]
 8013b04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d103      	bne.n	8013b12 <f_unlink+0xd6>
						res = FR_DENIED;
 8013b0a:	2307      	movs	r3, #7
 8013b0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013b10:	e027      	b.n	8013b62 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b18:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013b1a:	f107 0310 	add.w	r3, r7, #16
 8013b1e:	2100      	movs	r1, #0
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7fd ffce 	bl	8011ac2 <dir_sdi>
 8013b26:	4603      	mov	r3, r0
 8013b28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013b2c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d116      	bne.n	8013b62 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013b34:	f107 0310 	add.w	r3, r7, #16
 8013b38:	2100      	movs	r1, #0
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f7fe f9a6 	bl	8011e8c <dir_read>
 8013b40:	4603      	mov	r3, r0
 8013b42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013b46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d102      	bne.n	8013b54 <f_unlink+0x118>
 8013b4e:	2307      	movs	r3, #7
 8013b50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013b54:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b58:	2b04      	cmp	r3, #4
 8013b5a:	d102      	bne.n	8013b62 <f_unlink+0x126>
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013b62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d123      	bne.n	8013bb2 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013b6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7fe fa70 	bl	8012054 <dir_remove>
 8013b74:	4603      	mov	r3, r0
 8013b76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013b7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d10c      	bne.n	8013b9c <f_unlink+0x160>
 8013b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d009      	beq.n	8013b9c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013b88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7fd fe61 	bl	8011858 <remove_chain>
 8013b96:	4603      	mov	r3, r0
 8013b98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013b9c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d106      	bne.n	8013bb2 <f_unlink+0x176>
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7fd fbe0 	bl	801136c <sync_fs>
 8013bac:	4603      	mov	r3, r0
 8013bae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013bb2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3778      	adds	r7, #120	; 0x78
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
	...

08013bc0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b096      	sub	sp, #88	; 0x58
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013bc8:	f107 0108 	add.w	r1, r7, #8
 8013bcc:	1d3b      	adds	r3, r7, #4
 8013bce:	2202      	movs	r2, #2
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7fe fc57 	bl	8012484 <find_volume>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	f040 80fe 	bne.w	8013de6 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013bea:	687a      	ldr	r2, [r7, #4]
 8013bec:	f107 030c 	add.w	r3, r7, #12
 8013bf0:	4611      	mov	r1, r2
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7fe fb16 	bl	8012224 <follow_path>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013bfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d102      	bne.n	8013c0c <f_mkdir+0x4c>
 8013c06:	2308      	movs	r3, #8
 8013c08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c10:	2b04      	cmp	r3, #4
 8013c12:	d108      	bne.n	8013c26 <f_mkdir+0x66>
 8013c14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013c18:	f003 0320 	and.w	r3, r3, #32
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d002      	beq.n	8013c26 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013c20:	2306      	movs	r3, #6
 8013c22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013c26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c2a:	2b04      	cmp	r3, #4
 8013c2c:	f040 80db 	bne.w	8013de6 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013c30:	f107 030c 	add.w	r3, r7, #12
 8013c34:	2100      	movs	r1, #0
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7fd fe73 	bl	8011922 <create_chain>
 8013c3c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	895b      	ldrh	r3, [r3, #10]
 8013c42:	461a      	mov	r2, r3
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	899b      	ldrh	r3, [r3, #12]
 8013c48:	fb03 f302 	mul.w	r3, r3, r2
 8013c4c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d102      	bne.n	8013c60 <f_mkdir+0xa0>
 8013c5a:	2307      	movs	r3, #7
 8013c5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d102      	bne.n	8013c6c <f_mkdir+0xac>
 8013c66:	2302      	movs	r3, #2
 8013c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c72:	d102      	bne.n	8013c7a <f_mkdir+0xba>
 8013c74:	2301      	movs	r3, #1
 8013c76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013c7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d106      	bne.n	8013c90 <f_mkdir+0xd0>
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7fd faff 	bl	8011288 <sync_window>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013c90:	4b58      	ldr	r3, [pc, #352]	; (8013df4 <f_mkdir+0x234>)
 8013c92:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013c94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d16c      	bne.n	8013d76 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8013c9c:	68bb      	ldr	r3, [r7, #8]
 8013c9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7fd fbd3 	bl	801144c <clust2sect>
 8013ca6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	3338      	adds	r3, #56	; 0x38
 8013cac:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013cae:	68bb      	ldr	r3, [r7, #8]
 8013cb0:	899b      	ldrh	r3, [r3, #12]
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	2100      	movs	r1, #0
 8013cb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013cb8:	f7fd f91d 	bl	8010ef6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013cbc:	220b      	movs	r2, #11
 8013cbe:	2120      	movs	r1, #32
 8013cc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013cc2:	f7fd f918 	bl	8010ef6 <mem_set>
					dir[DIR_Name] = '.';
 8013cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cc8:	222e      	movs	r2, #46	; 0x2e
 8013cca:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cce:	330b      	adds	r3, #11
 8013cd0:	2210      	movs	r2, #16
 8013cd2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cd6:	3316      	adds	r3, #22
 8013cd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f7fd f8be 	bl	8010e5c <st_dword>
					st_clust(fs, dir, dcl);
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f7fe f8b0 	bl	8011e4c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cee:	3320      	adds	r3, #32
 8013cf0:	2220      	movs	r2, #32
 8013cf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7fd f8dd 	bl	8010eb4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cfc:	3321      	adds	r3, #33	; 0x21
 8013cfe:	222e      	movs	r2, #46	; 0x2e
 8013d00:	701a      	strb	r2, [r3, #0]
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	781b      	ldrb	r3, [r3, #0]
 8013d0a:	2b03      	cmp	r3, #3
 8013d0c:	d106      	bne.n	8013d1c <f_mkdir+0x15c>
 8013d0e:	68bb      	ldr	r3, [r7, #8]
 8013d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d101      	bne.n	8013d1c <f_mkdir+0x15c>
 8013d18:	2300      	movs	r3, #0
 8013d1a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013d1c:	68b8      	ldr	r0, [r7, #8]
 8013d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d20:	3320      	adds	r3, #32
 8013d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d24:	4619      	mov	r1, r3
 8013d26:	f7fe f891 	bl	8011e4c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	895b      	ldrh	r3, [r3, #10]
 8013d2e:	653b      	str	r3, [r7, #80]	; 0x50
 8013d30:	e01c      	b.n	8013d6c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d34:	1c5a      	adds	r2, r3, #1
 8013d36:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013d38:	68ba      	ldr	r2, [r7, #8]
 8013d3a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	2201      	movs	r2, #1
 8013d40:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7fd fa9f 	bl	8011288 <sync_window>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013d50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d10d      	bne.n	8013d74 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	899b      	ldrh	r3, [r3, #12]
 8013d5c:	461a      	mov	r2, r3
 8013d5e:	2100      	movs	r1, #0
 8013d60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013d62:	f7fd f8c8 	bl	8010ef6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d68:	3b01      	subs	r3, #1
 8013d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8013d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d1df      	bne.n	8013d32 <f_mkdir+0x172>
 8013d72:	e000      	b.n	8013d76 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013d74:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013d76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d107      	bne.n	8013d8e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013d7e:	f107 030c 	add.w	r3, r7, #12
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7fe f934 	bl	8011ff0 <dir_register>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d120      	bne.n	8013dd8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d98:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d9c:	3316      	adds	r3, #22
 8013d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7fd f85b 	bl	8010e5c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013daa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7fe f84d 	bl	8011e4c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013db4:	330b      	adds	r3, #11
 8013db6:	2210      	movs	r2, #16
 8013db8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	2201      	movs	r2, #1
 8013dbe:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d10e      	bne.n	8013de6 <f_mkdir+0x226>
					res = sync_fs(fs);
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7fd face 	bl	801136c <sync_fs>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013dd6:	e006      	b.n	8013de6 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013dd8:	f107 030c 	add.w	r3, r7, #12
 8013ddc:	2200      	movs	r2, #0
 8013dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013de0:	4618      	mov	r0, r3
 8013de2:	f7fd fd39 	bl	8011858 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013de6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	3758      	adds	r7, #88	; 0x58
 8013dee:	46bd      	mov	sp, r7
 8013df0:	bd80      	pop	{r7, pc}
 8013df2:	bf00      	nop
 8013df4:	274a0000 	.word	0x274a0000

08013df8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b088      	sub	sp, #32
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	60b9      	str	r1, [r7, #8]
 8013e02:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013e04:	2300      	movs	r3, #0
 8013e06:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013e0c:	e017      	b.n	8013e3e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8013e0e:	f107 0310 	add.w	r3, r7, #16
 8013e12:	f107 0114 	add.w	r1, r7, #20
 8013e16:	2201      	movs	r2, #1
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f7ff f803 	bl	8012e24 <f_read>
		if (rc != 1) break;
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	2b01      	cmp	r3, #1
 8013e22:	d112      	bne.n	8013e4a <f_gets+0x52>
		c = s[0];
 8013e24:	7d3b      	ldrb	r3, [r7, #20]
 8013e26:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8013e28:	69bb      	ldr	r3, [r7, #24]
 8013e2a:	1c5a      	adds	r2, r3, #1
 8013e2c:	61ba      	str	r2, [r7, #24]
 8013e2e:	7dfa      	ldrb	r2, [r7, #23]
 8013e30:	701a      	strb	r2, [r3, #0]
		n++;
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	3301      	adds	r3, #1
 8013e36:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8013e38:	7dfb      	ldrb	r3, [r7, #23]
 8013e3a:	2b0a      	cmp	r3, #10
 8013e3c:	d007      	beq.n	8013e4e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	3b01      	subs	r3, #1
 8013e42:	69fa      	ldr	r2, [r7, #28]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	dbe2      	blt.n	8013e0e <f_gets+0x16>
 8013e48:	e002      	b.n	8013e50 <f_gets+0x58>
		if (rc != 1) break;
 8013e4a:	bf00      	nop
 8013e4c:	e000      	b.n	8013e50 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8013e4e:	bf00      	nop
	}
	*p = 0;
 8013e50:	69bb      	ldr	r3, [r7, #24]
 8013e52:	2200      	movs	r2, #0
 8013e54:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013e56:	69fb      	ldr	r3, [r7, #28]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d001      	beq.n	8013e60 <f_gets+0x68>
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	e000      	b.n	8013e62 <f_gets+0x6a>
 8013e60:	2300      	movs	r3, #0
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	3720      	adds	r7, #32
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
	...

08013e6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	b087      	sub	sp, #28
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	60f8      	str	r0, [r7, #12]
 8013e74:	60b9      	str	r1, [r7, #8]
 8013e76:	4613      	mov	r3, r2
 8013e78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013e82:	4b1f      	ldr	r3, [pc, #124]	; (8013f00 <FATFS_LinkDriverEx+0x94>)
 8013e84:	7a5b      	ldrb	r3, [r3, #9]
 8013e86:	b2db      	uxtb	r3, r3
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d131      	bne.n	8013ef0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013e8c:	4b1c      	ldr	r3, [pc, #112]	; (8013f00 <FATFS_LinkDriverEx+0x94>)
 8013e8e:	7a5b      	ldrb	r3, [r3, #9]
 8013e90:	b2db      	uxtb	r3, r3
 8013e92:	461a      	mov	r2, r3
 8013e94:	4b1a      	ldr	r3, [pc, #104]	; (8013f00 <FATFS_LinkDriverEx+0x94>)
 8013e96:	2100      	movs	r1, #0
 8013e98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013e9a:	4b19      	ldr	r3, [pc, #100]	; (8013f00 <FATFS_LinkDriverEx+0x94>)
 8013e9c:	7a5b      	ldrb	r3, [r3, #9]
 8013e9e:	b2db      	uxtb	r3, r3
 8013ea0:	4a17      	ldr	r2, [pc, #92]	; (8013f00 <FATFS_LinkDriverEx+0x94>)
 8013ea2:	009b      	lsls	r3, r3, #2
 8013ea4:	4413      	add	r3, r2
 8013ea6:	68fa      	ldr	r2, [r7, #12]
 8013ea8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013eaa:	4b15      	ldr	r3, [pc, #84]	; (8013f00 <FATFS_LinkDriverEx+0x94>)
 8013eac:	7a5b      	ldrb	r3, [r3, #9]
 8013eae:	b2db      	uxtb	r3, r3
 8013eb0:	461a      	mov	r2, r3
 8013eb2:	4b13      	ldr	r3, [pc, #76]	; (8013f00 <FATFS_LinkDriverEx+0x94>)
 8013eb4:	4413      	add	r3, r2
 8013eb6:	79fa      	ldrb	r2, [r7, #7]
 8013eb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013eba:	4b11      	ldr	r3, [pc, #68]	; (8013f00 <FATFS_LinkDriverEx+0x94>)
 8013ebc:	7a5b      	ldrb	r3, [r3, #9]
 8013ebe:	b2db      	uxtb	r3, r3
 8013ec0:	1c5a      	adds	r2, r3, #1
 8013ec2:	b2d1      	uxtb	r1, r2
 8013ec4:	4a0e      	ldr	r2, [pc, #56]	; (8013f00 <FATFS_LinkDriverEx+0x94>)
 8013ec6:	7251      	strb	r1, [r2, #9]
 8013ec8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013eca:	7dbb      	ldrb	r3, [r7, #22]
 8013ecc:	3330      	adds	r3, #48	; 0x30
 8013ece:	b2da      	uxtb	r2, r3
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	223a      	movs	r2, #58	; 0x3a
 8013eda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013edc:	68bb      	ldr	r3, [r7, #8]
 8013ede:	3302      	adds	r3, #2
 8013ee0:	222f      	movs	r2, #47	; 0x2f
 8013ee2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	3303      	adds	r3, #3
 8013ee8:	2200      	movs	r2, #0
 8013eea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013eec:	2300      	movs	r3, #0
 8013eee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	371c      	adds	r7, #28
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efc:	4770      	bx	lr
 8013efe:	bf00      	nop
 8013f00:	200403c8 	.word	0x200403c8

08013f04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
 8013f0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013f0e:	2200      	movs	r2, #0
 8013f10:	6839      	ldr	r1, [r7, #0]
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	f7ff ffaa 	bl	8013e6c <FATFS_LinkDriverEx>
 8013f18:	4603      	mov	r3, r0
}
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	3708      	adds	r7, #8
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}

08013f22 <__cxa_guard_acquire>:
 8013f22:	6803      	ldr	r3, [r0, #0]
 8013f24:	07db      	lsls	r3, r3, #31
 8013f26:	d406      	bmi.n	8013f36 <__cxa_guard_acquire+0x14>
 8013f28:	7843      	ldrb	r3, [r0, #1]
 8013f2a:	b103      	cbz	r3, 8013f2e <__cxa_guard_acquire+0xc>
 8013f2c:	deff      	udf	#255	; 0xff
 8013f2e:	2301      	movs	r3, #1
 8013f30:	7043      	strb	r3, [r0, #1]
 8013f32:	4618      	mov	r0, r3
 8013f34:	4770      	bx	lr
 8013f36:	2000      	movs	r0, #0
 8013f38:	4770      	bx	lr

08013f3a <__cxa_guard_release>:
 8013f3a:	2301      	movs	r3, #1
 8013f3c:	6003      	str	r3, [r0, #0]
 8013f3e:	4770      	bx	lr

08013f40 <cos>:
 8013f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f42:	ec51 0b10 	vmov	r0, r1, d0
 8013f46:	4a1e      	ldr	r2, [pc, #120]	; (8013fc0 <cos+0x80>)
 8013f48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013f4c:	4293      	cmp	r3, r2
 8013f4e:	dc06      	bgt.n	8013f5e <cos+0x1e>
 8013f50:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8013fb8 <cos+0x78>
 8013f54:	f000 fa74 	bl	8014440 <__kernel_cos>
 8013f58:	ec51 0b10 	vmov	r0, r1, d0
 8013f5c:	e007      	b.n	8013f6e <cos+0x2e>
 8013f5e:	4a19      	ldr	r2, [pc, #100]	; (8013fc4 <cos+0x84>)
 8013f60:	4293      	cmp	r3, r2
 8013f62:	dd09      	ble.n	8013f78 <cos+0x38>
 8013f64:	ee10 2a10 	vmov	r2, s0
 8013f68:	460b      	mov	r3, r1
 8013f6a:	f7ec f9a5 	bl	80002b8 <__aeabi_dsub>
 8013f6e:	ec41 0b10 	vmov	d0, r0, r1
 8013f72:	b005      	add	sp, #20
 8013f74:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f78:	4668      	mov	r0, sp
 8013f7a:	f000 f86d 	bl	8014058 <__ieee754_rem_pio2>
 8013f7e:	f000 0003 	and.w	r0, r0, #3
 8013f82:	2801      	cmp	r0, #1
 8013f84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013f88:	ed9d 0b00 	vldr	d0, [sp]
 8013f8c:	d007      	beq.n	8013f9e <cos+0x5e>
 8013f8e:	2802      	cmp	r0, #2
 8013f90:	d00e      	beq.n	8013fb0 <cos+0x70>
 8013f92:	2800      	cmp	r0, #0
 8013f94:	d0de      	beq.n	8013f54 <cos+0x14>
 8013f96:	2001      	movs	r0, #1
 8013f98:	f000 fe5a 	bl	8014c50 <__kernel_sin>
 8013f9c:	e7dc      	b.n	8013f58 <cos+0x18>
 8013f9e:	f000 fe57 	bl	8014c50 <__kernel_sin>
 8013fa2:	ec53 2b10 	vmov	r2, r3, d0
 8013fa6:	ee10 0a10 	vmov	r0, s0
 8013faa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013fae:	e7de      	b.n	8013f6e <cos+0x2e>
 8013fb0:	f000 fa46 	bl	8014440 <__kernel_cos>
 8013fb4:	e7f5      	b.n	8013fa2 <cos+0x62>
 8013fb6:	bf00      	nop
	...
 8013fc0:	3fe921fb 	.word	0x3fe921fb
 8013fc4:	7fefffff 	.word	0x7fefffff

08013fc8 <sin>:
 8013fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013fca:	ec51 0b10 	vmov	r0, r1, d0
 8013fce:	4a20      	ldr	r2, [pc, #128]	; (8014050 <sin+0x88>)
 8013fd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	dc07      	bgt.n	8013fe8 <sin+0x20>
 8013fd8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014048 <sin+0x80>
 8013fdc:	2000      	movs	r0, #0
 8013fde:	f000 fe37 	bl	8014c50 <__kernel_sin>
 8013fe2:	ec51 0b10 	vmov	r0, r1, d0
 8013fe6:	e007      	b.n	8013ff8 <sin+0x30>
 8013fe8:	4a1a      	ldr	r2, [pc, #104]	; (8014054 <sin+0x8c>)
 8013fea:	4293      	cmp	r3, r2
 8013fec:	dd09      	ble.n	8014002 <sin+0x3a>
 8013fee:	ee10 2a10 	vmov	r2, s0
 8013ff2:	460b      	mov	r3, r1
 8013ff4:	f7ec f960 	bl	80002b8 <__aeabi_dsub>
 8013ff8:	ec41 0b10 	vmov	d0, r0, r1
 8013ffc:	b005      	add	sp, #20
 8013ffe:	f85d fb04 	ldr.w	pc, [sp], #4
 8014002:	4668      	mov	r0, sp
 8014004:	f000 f828 	bl	8014058 <__ieee754_rem_pio2>
 8014008:	f000 0003 	and.w	r0, r0, #3
 801400c:	2801      	cmp	r0, #1
 801400e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014012:	ed9d 0b00 	vldr	d0, [sp]
 8014016:	d004      	beq.n	8014022 <sin+0x5a>
 8014018:	2802      	cmp	r0, #2
 801401a:	d005      	beq.n	8014028 <sin+0x60>
 801401c:	b970      	cbnz	r0, 801403c <sin+0x74>
 801401e:	2001      	movs	r0, #1
 8014020:	e7dd      	b.n	8013fde <sin+0x16>
 8014022:	f000 fa0d 	bl	8014440 <__kernel_cos>
 8014026:	e7dc      	b.n	8013fe2 <sin+0x1a>
 8014028:	2001      	movs	r0, #1
 801402a:	f000 fe11 	bl	8014c50 <__kernel_sin>
 801402e:	ec53 2b10 	vmov	r2, r3, d0
 8014032:	ee10 0a10 	vmov	r0, s0
 8014036:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801403a:	e7dd      	b.n	8013ff8 <sin+0x30>
 801403c:	f000 fa00 	bl	8014440 <__kernel_cos>
 8014040:	e7f5      	b.n	801402e <sin+0x66>
 8014042:	bf00      	nop
 8014044:	f3af 8000 	nop.w
	...
 8014050:	3fe921fb 	.word	0x3fe921fb
 8014054:	7fefffff 	.word	0x7fefffff

08014058 <__ieee754_rem_pio2>:
 8014058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801405c:	ec57 6b10 	vmov	r6, r7, d0
 8014060:	4bc3      	ldr	r3, [pc, #780]	; (8014370 <__ieee754_rem_pio2+0x318>)
 8014062:	b08d      	sub	sp, #52	; 0x34
 8014064:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014068:	4598      	cmp	r8, r3
 801406a:	4604      	mov	r4, r0
 801406c:	9704      	str	r7, [sp, #16]
 801406e:	dc07      	bgt.n	8014080 <__ieee754_rem_pio2+0x28>
 8014070:	2200      	movs	r2, #0
 8014072:	2300      	movs	r3, #0
 8014074:	ed84 0b00 	vstr	d0, [r4]
 8014078:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801407c:	2500      	movs	r5, #0
 801407e:	e027      	b.n	80140d0 <__ieee754_rem_pio2+0x78>
 8014080:	4bbc      	ldr	r3, [pc, #752]	; (8014374 <__ieee754_rem_pio2+0x31c>)
 8014082:	4598      	cmp	r8, r3
 8014084:	dc75      	bgt.n	8014172 <__ieee754_rem_pio2+0x11a>
 8014086:	9b04      	ldr	r3, [sp, #16]
 8014088:	4dbb      	ldr	r5, [pc, #748]	; (8014378 <__ieee754_rem_pio2+0x320>)
 801408a:	2b00      	cmp	r3, #0
 801408c:	ee10 0a10 	vmov	r0, s0
 8014090:	a3a9      	add	r3, pc, #676	; (adr r3, 8014338 <__ieee754_rem_pio2+0x2e0>)
 8014092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014096:	4639      	mov	r1, r7
 8014098:	dd36      	ble.n	8014108 <__ieee754_rem_pio2+0xb0>
 801409a:	f7ec f90d 	bl	80002b8 <__aeabi_dsub>
 801409e:	45a8      	cmp	r8, r5
 80140a0:	4606      	mov	r6, r0
 80140a2:	460f      	mov	r7, r1
 80140a4:	d018      	beq.n	80140d8 <__ieee754_rem_pio2+0x80>
 80140a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8014340 <__ieee754_rem_pio2+0x2e8>)
 80140a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ac:	f7ec f904 	bl	80002b8 <__aeabi_dsub>
 80140b0:	4602      	mov	r2, r0
 80140b2:	460b      	mov	r3, r1
 80140b4:	e9c4 2300 	strd	r2, r3, [r4]
 80140b8:	4630      	mov	r0, r6
 80140ba:	4639      	mov	r1, r7
 80140bc:	f7ec f8fc 	bl	80002b8 <__aeabi_dsub>
 80140c0:	a39f      	add	r3, pc, #636	; (adr r3, 8014340 <__ieee754_rem_pio2+0x2e8>)
 80140c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c6:	f7ec f8f7 	bl	80002b8 <__aeabi_dsub>
 80140ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80140ce:	2501      	movs	r5, #1
 80140d0:	4628      	mov	r0, r5
 80140d2:	b00d      	add	sp, #52	; 0x34
 80140d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140d8:	a39b      	add	r3, pc, #620	; (adr r3, 8014348 <__ieee754_rem_pio2+0x2f0>)
 80140da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140de:	f7ec f8eb 	bl	80002b8 <__aeabi_dsub>
 80140e2:	a39b      	add	r3, pc, #620	; (adr r3, 8014350 <__ieee754_rem_pio2+0x2f8>)
 80140e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e8:	4606      	mov	r6, r0
 80140ea:	460f      	mov	r7, r1
 80140ec:	f7ec f8e4 	bl	80002b8 <__aeabi_dsub>
 80140f0:	4602      	mov	r2, r0
 80140f2:	460b      	mov	r3, r1
 80140f4:	e9c4 2300 	strd	r2, r3, [r4]
 80140f8:	4630      	mov	r0, r6
 80140fa:	4639      	mov	r1, r7
 80140fc:	f7ec f8dc 	bl	80002b8 <__aeabi_dsub>
 8014100:	a393      	add	r3, pc, #588	; (adr r3, 8014350 <__ieee754_rem_pio2+0x2f8>)
 8014102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014106:	e7de      	b.n	80140c6 <__ieee754_rem_pio2+0x6e>
 8014108:	f7ec f8d8 	bl	80002bc <__adddf3>
 801410c:	45a8      	cmp	r8, r5
 801410e:	4606      	mov	r6, r0
 8014110:	460f      	mov	r7, r1
 8014112:	d016      	beq.n	8014142 <__ieee754_rem_pio2+0xea>
 8014114:	a38a      	add	r3, pc, #552	; (adr r3, 8014340 <__ieee754_rem_pio2+0x2e8>)
 8014116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801411a:	f7ec f8cf 	bl	80002bc <__adddf3>
 801411e:	4602      	mov	r2, r0
 8014120:	460b      	mov	r3, r1
 8014122:	e9c4 2300 	strd	r2, r3, [r4]
 8014126:	4630      	mov	r0, r6
 8014128:	4639      	mov	r1, r7
 801412a:	f7ec f8c5 	bl	80002b8 <__aeabi_dsub>
 801412e:	a384      	add	r3, pc, #528	; (adr r3, 8014340 <__ieee754_rem_pio2+0x2e8>)
 8014130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014134:	f7ec f8c2 	bl	80002bc <__adddf3>
 8014138:	f04f 35ff 	mov.w	r5, #4294967295
 801413c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014140:	e7c6      	b.n	80140d0 <__ieee754_rem_pio2+0x78>
 8014142:	a381      	add	r3, pc, #516	; (adr r3, 8014348 <__ieee754_rem_pio2+0x2f0>)
 8014144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014148:	f7ec f8b8 	bl	80002bc <__adddf3>
 801414c:	a380      	add	r3, pc, #512	; (adr r3, 8014350 <__ieee754_rem_pio2+0x2f8>)
 801414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014152:	4606      	mov	r6, r0
 8014154:	460f      	mov	r7, r1
 8014156:	f7ec f8b1 	bl	80002bc <__adddf3>
 801415a:	4602      	mov	r2, r0
 801415c:	460b      	mov	r3, r1
 801415e:	e9c4 2300 	strd	r2, r3, [r4]
 8014162:	4630      	mov	r0, r6
 8014164:	4639      	mov	r1, r7
 8014166:	f7ec f8a7 	bl	80002b8 <__aeabi_dsub>
 801416a:	a379      	add	r3, pc, #484	; (adr r3, 8014350 <__ieee754_rem_pio2+0x2f8>)
 801416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014170:	e7e0      	b.n	8014134 <__ieee754_rem_pio2+0xdc>
 8014172:	4b82      	ldr	r3, [pc, #520]	; (801437c <__ieee754_rem_pio2+0x324>)
 8014174:	4598      	cmp	r8, r3
 8014176:	f300 80d0 	bgt.w	801431a <__ieee754_rem_pio2+0x2c2>
 801417a:	f000 fe23 	bl	8014dc4 <fabs>
 801417e:	ec57 6b10 	vmov	r6, r7, d0
 8014182:	ee10 0a10 	vmov	r0, s0
 8014186:	a374      	add	r3, pc, #464	; (adr r3, 8014358 <__ieee754_rem_pio2+0x300>)
 8014188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418c:	4639      	mov	r1, r7
 801418e:	f7ec fa4b 	bl	8000628 <__aeabi_dmul>
 8014192:	2200      	movs	r2, #0
 8014194:	4b7a      	ldr	r3, [pc, #488]	; (8014380 <__ieee754_rem_pio2+0x328>)
 8014196:	f7ec f891 	bl	80002bc <__adddf3>
 801419a:	f7ec fcf5 	bl	8000b88 <__aeabi_d2iz>
 801419e:	4605      	mov	r5, r0
 80141a0:	f7ec f9d8 	bl	8000554 <__aeabi_i2d>
 80141a4:	a364      	add	r3, pc, #400	; (adr r3, 8014338 <__ieee754_rem_pio2+0x2e0>)
 80141a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141ae:	f7ec fa3b 	bl	8000628 <__aeabi_dmul>
 80141b2:	4602      	mov	r2, r0
 80141b4:	460b      	mov	r3, r1
 80141b6:	4630      	mov	r0, r6
 80141b8:	4639      	mov	r1, r7
 80141ba:	f7ec f87d 	bl	80002b8 <__aeabi_dsub>
 80141be:	a360      	add	r3, pc, #384	; (adr r3, 8014340 <__ieee754_rem_pio2+0x2e8>)
 80141c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c4:	4682      	mov	sl, r0
 80141c6:	468b      	mov	fp, r1
 80141c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141cc:	f7ec fa2c 	bl	8000628 <__aeabi_dmul>
 80141d0:	2d1f      	cmp	r5, #31
 80141d2:	4606      	mov	r6, r0
 80141d4:	460f      	mov	r7, r1
 80141d6:	dc0c      	bgt.n	80141f2 <__ieee754_rem_pio2+0x19a>
 80141d8:	1e6a      	subs	r2, r5, #1
 80141da:	4b6a      	ldr	r3, [pc, #424]	; (8014384 <__ieee754_rem_pio2+0x32c>)
 80141dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141e0:	4543      	cmp	r3, r8
 80141e2:	d006      	beq.n	80141f2 <__ieee754_rem_pio2+0x19a>
 80141e4:	4632      	mov	r2, r6
 80141e6:	463b      	mov	r3, r7
 80141e8:	4650      	mov	r0, sl
 80141ea:	4659      	mov	r1, fp
 80141ec:	f7ec f864 	bl	80002b8 <__aeabi_dsub>
 80141f0:	e00e      	b.n	8014210 <__ieee754_rem_pio2+0x1b8>
 80141f2:	4632      	mov	r2, r6
 80141f4:	463b      	mov	r3, r7
 80141f6:	4650      	mov	r0, sl
 80141f8:	4659      	mov	r1, fp
 80141fa:	f7ec f85d 	bl	80002b8 <__aeabi_dsub>
 80141fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014202:	9305      	str	r3, [sp, #20]
 8014204:	9a05      	ldr	r2, [sp, #20]
 8014206:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801420a:	1ad3      	subs	r3, r2, r3
 801420c:	2b10      	cmp	r3, #16
 801420e:	dc02      	bgt.n	8014216 <__ieee754_rem_pio2+0x1be>
 8014210:	e9c4 0100 	strd	r0, r1, [r4]
 8014214:	e039      	b.n	801428a <__ieee754_rem_pio2+0x232>
 8014216:	a34c      	add	r3, pc, #304	; (adr r3, 8014348 <__ieee754_rem_pio2+0x2f0>)
 8014218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801421c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014220:	f7ec fa02 	bl	8000628 <__aeabi_dmul>
 8014224:	4606      	mov	r6, r0
 8014226:	460f      	mov	r7, r1
 8014228:	4602      	mov	r2, r0
 801422a:	460b      	mov	r3, r1
 801422c:	4650      	mov	r0, sl
 801422e:	4659      	mov	r1, fp
 8014230:	f7ec f842 	bl	80002b8 <__aeabi_dsub>
 8014234:	4602      	mov	r2, r0
 8014236:	460b      	mov	r3, r1
 8014238:	4680      	mov	r8, r0
 801423a:	4689      	mov	r9, r1
 801423c:	4650      	mov	r0, sl
 801423e:	4659      	mov	r1, fp
 8014240:	f7ec f83a 	bl	80002b8 <__aeabi_dsub>
 8014244:	4632      	mov	r2, r6
 8014246:	463b      	mov	r3, r7
 8014248:	f7ec f836 	bl	80002b8 <__aeabi_dsub>
 801424c:	a340      	add	r3, pc, #256	; (adr r3, 8014350 <__ieee754_rem_pio2+0x2f8>)
 801424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014252:	4606      	mov	r6, r0
 8014254:	460f      	mov	r7, r1
 8014256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801425a:	f7ec f9e5 	bl	8000628 <__aeabi_dmul>
 801425e:	4632      	mov	r2, r6
 8014260:	463b      	mov	r3, r7
 8014262:	f7ec f829 	bl	80002b8 <__aeabi_dsub>
 8014266:	4602      	mov	r2, r0
 8014268:	460b      	mov	r3, r1
 801426a:	4606      	mov	r6, r0
 801426c:	460f      	mov	r7, r1
 801426e:	4640      	mov	r0, r8
 8014270:	4649      	mov	r1, r9
 8014272:	f7ec f821 	bl	80002b8 <__aeabi_dsub>
 8014276:	9a05      	ldr	r2, [sp, #20]
 8014278:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801427c:	1ad3      	subs	r3, r2, r3
 801427e:	2b31      	cmp	r3, #49	; 0x31
 8014280:	dc20      	bgt.n	80142c4 <__ieee754_rem_pio2+0x26c>
 8014282:	e9c4 0100 	strd	r0, r1, [r4]
 8014286:	46c2      	mov	sl, r8
 8014288:	46cb      	mov	fp, r9
 801428a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801428e:	4650      	mov	r0, sl
 8014290:	4642      	mov	r2, r8
 8014292:	464b      	mov	r3, r9
 8014294:	4659      	mov	r1, fp
 8014296:	f7ec f80f 	bl	80002b8 <__aeabi_dsub>
 801429a:	463b      	mov	r3, r7
 801429c:	4632      	mov	r2, r6
 801429e:	f7ec f80b 	bl	80002b8 <__aeabi_dsub>
 80142a2:	9b04      	ldr	r3, [sp, #16]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80142aa:	f6bf af11 	bge.w	80140d0 <__ieee754_rem_pio2+0x78>
 80142ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80142b2:	6063      	str	r3, [r4, #4]
 80142b4:	f8c4 8000 	str.w	r8, [r4]
 80142b8:	60a0      	str	r0, [r4, #8]
 80142ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142be:	60e3      	str	r3, [r4, #12]
 80142c0:	426d      	negs	r5, r5
 80142c2:	e705      	b.n	80140d0 <__ieee754_rem_pio2+0x78>
 80142c4:	a326      	add	r3, pc, #152	; (adr r3, 8014360 <__ieee754_rem_pio2+0x308>)
 80142c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142ce:	f7ec f9ab 	bl	8000628 <__aeabi_dmul>
 80142d2:	4606      	mov	r6, r0
 80142d4:	460f      	mov	r7, r1
 80142d6:	4602      	mov	r2, r0
 80142d8:	460b      	mov	r3, r1
 80142da:	4640      	mov	r0, r8
 80142dc:	4649      	mov	r1, r9
 80142de:	f7eb ffeb 	bl	80002b8 <__aeabi_dsub>
 80142e2:	4602      	mov	r2, r0
 80142e4:	460b      	mov	r3, r1
 80142e6:	4682      	mov	sl, r0
 80142e8:	468b      	mov	fp, r1
 80142ea:	4640      	mov	r0, r8
 80142ec:	4649      	mov	r1, r9
 80142ee:	f7eb ffe3 	bl	80002b8 <__aeabi_dsub>
 80142f2:	4632      	mov	r2, r6
 80142f4:	463b      	mov	r3, r7
 80142f6:	f7eb ffdf 	bl	80002b8 <__aeabi_dsub>
 80142fa:	a31b      	add	r3, pc, #108	; (adr r3, 8014368 <__ieee754_rem_pio2+0x310>)
 80142fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014300:	4606      	mov	r6, r0
 8014302:	460f      	mov	r7, r1
 8014304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014308:	f7ec f98e 	bl	8000628 <__aeabi_dmul>
 801430c:	4632      	mov	r2, r6
 801430e:	463b      	mov	r3, r7
 8014310:	f7eb ffd2 	bl	80002b8 <__aeabi_dsub>
 8014314:	4606      	mov	r6, r0
 8014316:	460f      	mov	r7, r1
 8014318:	e764      	b.n	80141e4 <__ieee754_rem_pio2+0x18c>
 801431a:	4b1b      	ldr	r3, [pc, #108]	; (8014388 <__ieee754_rem_pio2+0x330>)
 801431c:	4598      	cmp	r8, r3
 801431e:	dd35      	ble.n	801438c <__ieee754_rem_pio2+0x334>
 8014320:	ee10 2a10 	vmov	r2, s0
 8014324:	463b      	mov	r3, r7
 8014326:	4630      	mov	r0, r6
 8014328:	4639      	mov	r1, r7
 801432a:	f7eb ffc5 	bl	80002b8 <__aeabi_dsub>
 801432e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014332:	e9c4 0100 	strd	r0, r1, [r4]
 8014336:	e6a1      	b.n	801407c <__ieee754_rem_pio2+0x24>
 8014338:	54400000 	.word	0x54400000
 801433c:	3ff921fb 	.word	0x3ff921fb
 8014340:	1a626331 	.word	0x1a626331
 8014344:	3dd0b461 	.word	0x3dd0b461
 8014348:	1a600000 	.word	0x1a600000
 801434c:	3dd0b461 	.word	0x3dd0b461
 8014350:	2e037073 	.word	0x2e037073
 8014354:	3ba3198a 	.word	0x3ba3198a
 8014358:	6dc9c883 	.word	0x6dc9c883
 801435c:	3fe45f30 	.word	0x3fe45f30
 8014360:	2e000000 	.word	0x2e000000
 8014364:	3ba3198a 	.word	0x3ba3198a
 8014368:	252049c1 	.word	0x252049c1
 801436c:	397b839a 	.word	0x397b839a
 8014370:	3fe921fb 	.word	0x3fe921fb
 8014374:	4002d97b 	.word	0x4002d97b
 8014378:	3ff921fb 	.word	0x3ff921fb
 801437c:	413921fb 	.word	0x413921fb
 8014380:	3fe00000 	.word	0x3fe00000
 8014384:	08019af8 	.word	0x08019af8
 8014388:	7fefffff 	.word	0x7fefffff
 801438c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014390:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014394:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014398:	4630      	mov	r0, r6
 801439a:	460f      	mov	r7, r1
 801439c:	f7ec fbf4 	bl	8000b88 <__aeabi_d2iz>
 80143a0:	f7ec f8d8 	bl	8000554 <__aeabi_i2d>
 80143a4:	4602      	mov	r2, r0
 80143a6:	460b      	mov	r3, r1
 80143a8:	4630      	mov	r0, r6
 80143aa:	4639      	mov	r1, r7
 80143ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80143b0:	f7eb ff82 	bl	80002b8 <__aeabi_dsub>
 80143b4:	2200      	movs	r2, #0
 80143b6:	4b1f      	ldr	r3, [pc, #124]	; (8014434 <__ieee754_rem_pio2+0x3dc>)
 80143b8:	f7ec f936 	bl	8000628 <__aeabi_dmul>
 80143bc:	460f      	mov	r7, r1
 80143be:	4606      	mov	r6, r0
 80143c0:	f7ec fbe2 	bl	8000b88 <__aeabi_d2iz>
 80143c4:	f7ec f8c6 	bl	8000554 <__aeabi_i2d>
 80143c8:	4602      	mov	r2, r0
 80143ca:	460b      	mov	r3, r1
 80143cc:	4630      	mov	r0, r6
 80143ce:	4639      	mov	r1, r7
 80143d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80143d4:	f7eb ff70 	bl	80002b8 <__aeabi_dsub>
 80143d8:	2200      	movs	r2, #0
 80143da:	4b16      	ldr	r3, [pc, #88]	; (8014434 <__ieee754_rem_pio2+0x3dc>)
 80143dc:	f7ec f924 	bl	8000628 <__aeabi_dmul>
 80143e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80143e4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80143e8:	f04f 0803 	mov.w	r8, #3
 80143ec:	2600      	movs	r6, #0
 80143ee:	2700      	movs	r7, #0
 80143f0:	4632      	mov	r2, r6
 80143f2:	463b      	mov	r3, r7
 80143f4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80143f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80143fc:	f7ec fb7c 	bl	8000af8 <__aeabi_dcmpeq>
 8014400:	b9b0      	cbnz	r0, 8014430 <__ieee754_rem_pio2+0x3d8>
 8014402:	4b0d      	ldr	r3, [pc, #52]	; (8014438 <__ieee754_rem_pio2+0x3e0>)
 8014404:	9301      	str	r3, [sp, #4]
 8014406:	2302      	movs	r3, #2
 8014408:	9300      	str	r3, [sp, #0]
 801440a:	462a      	mov	r2, r5
 801440c:	4643      	mov	r3, r8
 801440e:	4621      	mov	r1, r4
 8014410:	a806      	add	r0, sp, #24
 8014412:	f000 f8dd 	bl	80145d0 <__kernel_rem_pio2>
 8014416:	9b04      	ldr	r3, [sp, #16]
 8014418:	2b00      	cmp	r3, #0
 801441a:	4605      	mov	r5, r0
 801441c:	f6bf ae58 	bge.w	80140d0 <__ieee754_rem_pio2+0x78>
 8014420:	6863      	ldr	r3, [r4, #4]
 8014422:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014426:	6063      	str	r3, [r4, #4]
 8014428:	68e3      	ldr	r3, [r4, #12]
 801442a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801442e:	e746      	b.n	80142be <__ieee754_rem_pio2+0x266>
 8014430:	46d0      	mov	r8, sl
 8014432:	e7dd      	b.n	80143f0 <__ieee754_rem_pio2+0x398>
 8014434:	41700000 	.word	0x41700000
 8014438:	08019b78 	.word	0x08019b78
 801443c:	00000000 	.word	0x00000000

08014440 <__kernel_cos>:
 8014440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014444:	ec59 8b10 	vmov	r8, r9, d0
 8014448:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801444c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014450:	ed2d 8b02 	vpush	{d8}
 8014454:	eeb0 8a41 	vmov.f32	s16, s2
 8014458:	eef0 8a61 	vmov.f32	s17, s3
 801445c:	da07      	bge.n	801446e <__kernel_cos+0x2e>
 801445e:	ee10 0a10 	vmov	r0, s0
 8014462:	4649      	mov	r1, r9
 8014464:	f7ec fb90 	bl	8000b88 <__aeabi_d2iz>
 8014468:	2800      	cmp	r0, #0
 801446a:	f000 8089 	beq.w	8014580 <__kernel_cos+0x140>
 801446e:	4642      	mov	r2, r8
 8014470:	464b      	mov	r3, r9
 8014472:	4640      	mov	r0, r8
 8014474:	4649      	mov	r1, r9
 8014476:	f7ec f8d7 	bl	8000628 <__aeabi_dmul>
 801447a:	2200      	movs	r2, #0
 801447c:	4b4e      	ldr	r3, [pc, #312]	; (80145b8 <__kernel_cos+0x178>)
 801447e:	4604      	mov	r4, r0
 8014480:	460d      	mov	r5, r1
 8014482:	f7ec f8d1 	bl	8000628 <__aeabi_dmul>
 8014486:	a340      	add	r3, pc, #256	; (adr r3, 8014588 <__kernel_cos+0x148>)
 8014488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801448c:	4682      	mov	sl, r0
 801448e:	468b      	mov	fp, r1
 8014490:	4620      	mov	r0, r4
 8014492:	4629      	mov	r1, r5
 8014494:	f7ec f8c8 	bl	8000628 <__aeabi_dmul>
 8014498:	a33d      	add	r3, pc, #244	; (adr r3, 8014590 <__kernel_cos+0x150>)
 801449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801449e:	f7eb ff0d 	bl	80002bc <__adddf3>
 80144a2:	4622      	mov	r2, r4
 80144a4:	462b      	mov	r3, r5
 80144a6:	f7ec f8bf 	bl	8000628 <__aeabi_dmul>
 80144aa:	a33b      	add	r3, pc, #236	; (adr r3, 8014598 <__kernel_cos+0x158>)
 80144ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b0:	f7eb ff02 	bl	80002b8 <__aeabi_dsub>
 80144b4:	4622      	mov	r2, r4
 80144b6:	462b      	mov	r3, r5
 80144b8:	f7ec f8b6 	bl	8000628 <__aeabi_dmul>
 80144bc:	a338      	add	r3, pc, #224	; (adr r3, 80145a0 <__kernel_cos+0x160>)
 80144be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c2:	f7eb fefb 	bl	80002bc <__adddf3>
 80144c6:	4622      	mov	r2, r4
 80144c8:	462b      	mov	r3, r5
 80144ca:	f7ec f8ad 	bl	8000628 <__aeabi_dmul>
 80144ce:	a336      	add	r3, pc, #216	; (adr r3, 80145a8 <__kernel_cos+0x168>)
 80144d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d4:	f7eb fef0 	bl	80002b8 <__aeabi_dsub>
 80144d8:	4622      	mov	r2, r4
 80144da:	462b      	mov	r3, r5
 80144dc:	f7ec f8a4 	bl	8000628 <__aeabi_dmul>
 80144e0:	a333      	add	r3, pc, #204	; (adr r3, 80145b0 <__kernel_cos+0x170>)
 80144e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e6:	f7eb fee9 	bl	80002bc <__adddf3>
 80144ea:	4622      	mov	r2, r4
 80144ec:	462b      	mov	r3, r5
 80144ee:	f7ec f89b 	bl	8000628 <__aeabi_dmul>
 80144f2:	4622      	mov	r2, r4
 80144f4:	462b      	mov	r3, r5
 80144f6:	f7ec f897 	bl	8000628 <__aeabi_dmul>
 80144fa:	ec53 2b18 	vmov	r2, r3, d8
 80144fe:	4604      	mov	r4, r0
 8014500:	460d      	mov	r5, r1
 8014502:	4640      	mov	r0, r8
 8014504:	4649      	mov	r1, r9
 8014506:	f7ec f88f 	bl	8000628 <__aeabi_dmul>
 801450a:	460b      	mov	r3, r1
 801450c:	4602      	mov	r2, r0
 801450e:	4629      	mov	r1, r5
 8014510:	4620      	mov	r0, r4
 8014512:	f7eb fed1 	bl	80002b8 <__aeabi_dsub>
 8014516:	4b29      	ldr	r3, [pc, #164]	; (80145bc <__kernel_cos+0x17c>)
 8014518:	429e      	cmp	r6, r3
 801451a:	4680      	mov	r8, r0
 801451c:	4689      	mov	r9, r1
 801451e:	dc11      	bgt.n	8014544 <__kernel_cos+0x104>
 8014520:	4602      	mov	r2, r0
 8014522:	460b      	mov	r3, r1
 8014524:	4650      	mov	r0, sl
 8014526:	4659      	mov	r1, fp
 8014528:	f7eb fec6 	bl	80002b8 <__aeabi_dsub>
 801452c:	460b      	mov	r3, r1
 801452e:	4924      	ldr	r1, [pc, #144]	; (80145c0 <__kernel_cos+0x180>)
 8014530:	4602      	mov	r2, r0
 8014532:	2000      	movs	r0, #0
 8014534:	f7eb fec0 	bl	80002b8 <__aeabi_dsub>
 8014538:	ecbd 8b02 	vpop	{d8}
 801453c:	ec41 0b10 	vmov	d0, r0, r1
 8014540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014544:	4b1f      	ldr	r3, [pc, #124]	; (80145c4 <__kernel_cos+0x184>)
 8014546:	491e      	ldr	r1, [pc, #120]	; (80145c0 <__kernel_cos+0x180>)
 8014548:	429e      	cmp	r6, r3
 801454a:	bfcc      	ite	gt
 801454c:	4d1e      	ldrgt	r5, [pc, #120]	; (80145c8 <__kernel_cos+0x188>)
 801454e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014552:	2400      	movs	r4, #0
 8014554:	4622      	mov	r2, r4
 8014556:	462b      	mov	r3, r5
 8014558:	2000      	movs	r0, #0
 801455a:	f7eb fead 	bl	80002b8 <__aeabi_dsub>
 801455e:	4622      	mov	r2, r4
 8014560:	4606      	mov	r6, r0
 8014562:	460f      	mov	r7, r1
 8014564:	462b      	mov	r3, r5
 8014566:	4650      	mov	r0, sl
 8014568:	4659      	mov	r1, fp
 801456a:	f7eb fea5 	bl	80002b8 <__aeabi_dsub>
 801456e:	4642      	mov	r2, r8
 8014570:	464b      	mov	r3, r9
 8014572:	f7eb fea1 	bl	80002b8 <__aeabi_dsub>
 8014576:	4602      	mov	r2, r0
 8014578:	460b      	mov	r3, r1
 801457a:	4630      	mov	r0, r6
 801457c:	4639      	mov	r1, r7
 801457e:	e7d9      	b.n	8014534 <__kernel_cos+0xf4>
 8014580:	2000      	movs	r0, #0
 8014582:	490f      	ldr	r1, [pc, #60]	; (80145c0 <__kernel_cos+0x180>)
 8014584:	e7d8      	b.n	8014538 <__kernel_cos+0xf8>
 8014586:	bf00      	nop
 8014588:	be8838d4 	.word	0xbe8838d4
 801458c:	bda8fae9 	.word	0xbda8fae9
 8014590:	bdb4b1c4 	.word	0xbdb4b1c4
 8014594:	3e21ee9e 	.word	0x3e21ee9e
 8014598:	809c52ad 	.word	0x809c52ad
 801459c:	3e927e4f 	.word	0x3e927e4f
 80145a0:	19cb1590 	.word	0x19cb1590
 80145a4:	3efa01a0 	.word	0x3efa01a0
 80145a8:	16c15177 	.word	0x16c15177
 80145ac:	3f56c16c 	.word	0x3f56c16c
 80145b0:	5555554c 	.word	0x5555554c
 80145b4:	3fa55555 	.word	0x3fa55555
 80145b8:	3fe00000 	.word	0x3fe00000
 80145bc:	3fd33332 	.word	0x3fd33332
 80145c0:	3ff00000 	.word	0x3ff00000
 80145c4:	3fe90000 	.word	0x3fe90000
 80145c8:	3fd20000 	.word	0x3fd20000
 80145cc:	00000000 	.word	0x00000000

080145d0 <__kernel_rem_pio2>:
 80145d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d4:	ed2d 8b02 	vpush	{d8}
 80145d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80145dc:	1ed4      	subs	r4, r2, #3
 80145de:	9308      	str	r3, [sp, #32]
 80145e0:	9101      	str	r1, [sp, #4]
 80145e2:	4bc5      	ldr	r3, [pc, #788]	; (80148f8 <__kernel_rem_pio2+0x328>)
 80145e4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80145e6:	9009      	str	r0, [sp, #36]	; 0x24
 80145e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80145ec:	9304      	str	r3, [sp, #16]
 80145ee:	9b08      	ldr	r3, [sp, #32]
 80145f0:	3b01      	subs	r3, #1
 80145f2:	9307      	str	r3, [sp, #28]
 80145f4:	2318      	movs	r3, #24
 80145f6:	fb94 f4f3 	sdiv	r4, r4, r3
 80145fa:	f06f 0317 	mvn.w	r3, #23
 80145fe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014602:	fb04 3303 	mla	r3, r4, r3, r3
 8014606:	eb03 0a02 	add.w	sl, r3, r2
 801460a:	9b04      	ldr	r3, [sp, #16]
 801460c:	9a07      	ldr	r2, [sp, #28]
 801460e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80148e8 <__kernel_rem_pio2+0x318>
 8014612:	eb03 0802 	add.w	r8, r3, r2
 8014616:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014618:	1aa7      	subs	r7, r4, r2
 801461a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801461e:	ae22      	add	r6, sp, #136	; 0x88
 8014620:	2500      	movs	r5, #0
 8014622:	4545      	cmp	r5, r8
 8014624:	dd13      	ble.n	801464e <__kernel_rem_pio2+0x7e>
 8014626:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80148e8 <__kernel_rem_pio2+0x318>
 801462a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801462e:	2600      	movs	r6, #0
 8014630:	9b04      	ldr	r3, [sp, #16]
 8014632:	429e      	cmp	r6, r3
 8014634:	dc32      	bgt.n	801469c <__kernel_rem_pio2+0xcc>
 8014636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014638:	9302      	str	r3, [sp, #8]
 801463a:	9b08      	ldr	r3, [sp, #32]
 801463c:	199d      	adds	r5, r3, r6
 801463e:	ab22      	add	r3, sp, #136	; 0x88
 8014640:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014644:	9306      	str	r3, [sp, #24]
 8014646:	ec59 8b18 	vmov	r8, r9, d8
 801464a:	2700      	movs	r7, #0
 801464c:	e01f      	b.n	801468e <__kernel_rem_pio2+0xbe>
 801464e:	42ef      	cmn	r7, r5
 8014650:	d407      	bmi.n	8014662 <__kernel_rem_pio2+0x92>
 8014652:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014656:	f7eb ff7d 	bl	8000554 <__aeabi_i2d>
 801465a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801465e:	3501      	adds	r5, #1
 8014660:	e7df      	b.n	8014622 <__kernel_rem_pio2+0x52>
 8014662:	ec51 0b18 	vmov	r0, r1, d8
 8014666:	e7f8      	b.n	801465a <__kernel_rem_pio2+0x8a>
 8014668:	9906      	ldr	r1, [sp, #24]
 801466a:	9d02      	ldr	r5, [sp, #8]
 801466c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014670:	9106      	str	r1, [sp, #24]
 8014672:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014676:	9502      	str	r5, [sp, #8]
 8014678:	f7eb ffd6 	bl	8000628 <__aeabi_dmul>
 801467c:	4602      	mov	r2, r0
 801467e:	460b      	mov	r3, r1
 8014680:	4640      	mov	r0, r8
 8014682:	4649      	mov	r1, r9
 8014684:	f7eb fe1a 	bl	80002bc <__adddf3>
 8014688:	3701      	adds	r7, #1
 801468a:	4680      	mov	r8, r0
 801468c:	4689      	mov	r9, r1
 801468e:	9b07      	ldr	r3, [sp, #28]
 8014690:	429f      	cmp	r7, r3
 8014692:	dde9      	ble.n	8014668 <__kernel_rem_pio2+0x98>
 8014694:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014698:	3601      	adds	r6, #1
 801469a:	e7c9      	b.n	8014630 <__kernel_rem_pio2+0x60>
 801469c:	9b04      	ldr	r3, [sp, #16]
 801469e:	aa0e      	add	r2, sp, #56	; 0x38
 80146a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80146a4:	930c      	str	r3, [sp, #48]	; 0x30
 80146a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80146a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80146ac:	9c04      	ldr	r4, [sp, #16]
 80146ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80146b0:	ab9a      	add	r3, sp, #616	; 0x268
 80146b2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80146b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80146ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80146be:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80146c2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80146c6:	ab9a      	add	r3, sp, #616	; 0x268
 80146c8:	445b      	add	r3, fp
 80146ca:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80146ce:	2500      	movs	r5, #0
 80146d0:	1b63      	subs	r3, r4, r5
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	dc78      	bgt.n	80147c8 <__kernel_rem_pio2+0x1f8>
 80146d6:	4650      	mov	r0, sl
 80146d8:	ec49 8b10 	vmov	d0, r8, r9
 80146dc:	f000 fc00 	bl	8014ee0 <scalbn>
 80146e0:	ec57 6b10 	vmov	r6, r7, d0
 80146e4:	2200      	movs	r2, #0
 80146e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80146ea:	ee10 0a10 	vmov	r0, s0
 80146ee:	4639      	mov	r1, r7
 80146f0:	f7eb ff9a 	bl	8000628 <__aeabi_dmul>
 80146f4:	ec41 0b10 	vmov	d0, r0, r1
 80146f8:	f000 fb6e 	bl	8014dd8 <floor>
 80146fc:	2200      	movs	r2, #0
 80146fe:	ec51 0b10 	vmov	r0, r1, d0
 8014702:	4b7e      	ldr	r3, [pc, #504]	; (80148fc <__kernel_rem_pio2+0x32c>)
 8014704:	f7eb ff90 	bl	8000628 <__aeabi_dmul>
 8014708:	4602      	mov	r2, r0
 801470a:	460b      	mov	r3, r1
 801470c:	4630      	mov	r0, r6
 801470e:	4639      	mov	r1, r7
 8014710:	f7eb fdd2 	bl	80002b8 <__aeabi_dsub>
 8014714:	460f      	mov	r7, r1
 8014716:	4606      	mov	r6, r0
 8014718:	f7ec fa36 	bl	8000b88 <__aeabi_d2iz>
 801471c:	9006      	str	r0, [sp, #24]
 801471e:	f7eb ff19 	bl	8000554 <__aeabi_i2d>
 8014722:	4602      	mov	r2, r0
 8014724:	460b      	mov	r3, r1
 8014726:	4630      	mov	r0, r6
 8014728:	4639      	mov	r1, r7
 801472a:	f7eb fdc5 	bl	80002b8 <__aeabi_dsub>
 801472e:	f1ba 0f00 	cmp.w	sl, #0
 8014732:	4606      	mov	r6, r0
 8014734:	460f      	mov	r7, r1
 8014736:	dd6c      	ble.n	8014812 <__kernel_rem_pio2+0x242>
 8014738:	1e62      	subs	r2, r4, #1
 801473a:	ab0e      	add	r3, sp, #56	; 0x38
 801473c:	f1ca 0118 	rsb	r1, sl, #24
 8014740:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014744:	9d06      	ldr	r5, [sp, #24]
 8014746:	fa40 f301 	asr.w	r3, r0, r1
 801474a:	441d      	add	r5, r3
 801474c:	408b      	lsls	r3, r1
 801474e:	1ac0      	subs	r0, r0, r3
 8014750:	ab0e      	add	r3, sp, #56	; 0x38
 8014752:	9506      	str	r5, [sp, #24]
 8014754:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014758:	f1ca 0317 	rsb	r3, sl, #23
 801475c:	fa40 f303 	asr.w	r3, r0, r3
 8014760:	9302      	str	r3, [sp, #8]
 8014762:	9b02      	ldr	r3, [sp, #8]
 8014764:	2b00      	cmp	r3, #0
 8014766:	dd62      	ble.n	801482e <__kernel_rem_pio2+0x25e>
 8014768:	9b06      	ldr	r3, [sp, #24]
 801476a:	2200      	movs	r2, #0
 801476c:	3301      	adds	r3, #1
 801476e:	9306      	str	r3, [sp, #24]
 8014770:	4615      	mov	r5, r2
 8014772:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014776:	4294      	cmp	r4, r2
 8014778:	f300 8095 	bgt.w	80148a6 <__kernel_rem_pio2+0x2d6>
 801477c:	f1ba 0f00 	cmp.w	sl, #0
 8014780:	dd07      	ble.n	8014792 <__kernel_rem_pio2+0x1c2>
 8014782:	f1ba 0f01 	cmp.w	sl, #1
 8014786:	f000 80a2 	beq.w	80148ce <__kernel_rem_pio2+0x2fe>
 801478a:	f1ba 0f02 	cmp.w	sl, #2
 801478e:	f000 80c1 	beq.w	8014914 <__kernel_rem_pio2+0x344>
 8014792:	9b02      	ldr	r3, [sp, #8]
 8014794:	2b02      	cmp	r3, #2
 8014796:	d14a      	bne.n	801482e <__kernel_rem_pio2+0x25e>
 8014798:	4632      	mov	r2, r6
 801479a:	463b      	mov	r3, r7
 801479c:	2000      	movs	r0, #0
 801479e:	4958      	ldr	r1, [pc, #352]	; (8014900 <__kernel_rem_pio2+0x330>)
 80147a0:	f7eb fd8a 	bl	80002b8 <__aeabi_dsub>
 80147a4:	4606      	mov	r6, r0
 80147a6:	460f      	mov	r7, r1
 80147a8:	2d00      	cmp	r5, #0
 80147aa:	d040      	beq.n	801482e <__kernel_rem_pio2+0x25e>
 80147ac:	4650      	mov	r0, sl
 80147ae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80148f0 <__kernel_rem_pio2+0x320>
 80147b2:	f000 fb95 	bl	8014ee0 <scalbn>
 80147b6:	4630      	mov	r0, r6
 80147b8:	4639      	mov	r1, r7
 80147ba:	ec53 2b10 	vmov	r2, r3, d0
 80147be:	f7eb fd7b 	bl	80002b8 <__aeabi_dsub>
 80147c2:	4606      	mov	r6, r0
 80147c4:	460f      	mov	r7, r1
 80147c6:	e032      	b.n	801482e <__kernel_rem_pio2+0x25e>
 80147c8:	2200      	movs	r2, #0
 80147ca:	4b4e      	ldr	r3, [pc, #312]	; (8014904 <__kernel_rem_pio2+0x334>)
 80147cc:	4640      	mov	r0, r8
 80147ce:	4649      	mov	r1, r9
 80147d0:	f7eb ff2a 	bl	8000628 <__aeabi_dmul>
 80147d4:	f7ec f9d8 	bl	8000b88 <__aeabi_d2iz>
 80147d8:	f7eb febc 	bl	8000554 <__aeabi_i2d>
 80147dc:	2200      	movs	r2, #0
 80147de:	4b4a      	ldr	r3, [pc, #296]	; (8014908 <__kernel_rem_pio2+0x338>)
 80147e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80147e4:	f7eb ff20 	bl	8000628 <__aeabi_dmul>
 80147e8:	4602      	mov	r2, r0
 80147ea:	460b      	mov	r3, r1
 80147ec:	4640      	mov	r0, r8
 80147ee:	4649      	mov	r1, r9
 80147f0:	f7eb fd62 	bl	80002b8 <__aeabi_dsub>
 80147f4:	f7ec f9c8 	bl	8000b88 <__aeabi_d2iz>
 80147f8:	ab0e      	add	r3, sp, #56	; 0x38
 80147fa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80147fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014806:	f7eb fd59 	bl	80002bc <__adddf3>
 801480a:	3501      	adds	r5, #1
 801480c:	4680      	mov	r8, r0
 801480e:	4689      	mov	r9, r1
 8014810:	e75e      	b.n	80146d0 <__kernel_rem_pio2+0x100>
 8014812:	d105      	bne.n	8014820 <__kernel_rem_pio2+0x250>
 8014814:	1e63      	subs	r3, r4, #1
 8014816:	aa0e      	add	r2, sp, #56	; 0x38
 8014818:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801481c:	15c3      	asrs	r3, r0, #23
 801481e:	e79f      	b.n	8014760 <__kernel_rem_pio2+0x190>
 8014820:	2200      	movs	r2, #0
 8014822:	4b3a      	ldr	r3, [pc, #232]	; (801490c <__kernel_rem_pio2+0x33c>)
 8014824:	f7ec f986 	bl	8000b34 <__aeabi_dcmpge>
 8014828:	2800      	cmp	r0, #0
 801482a:	d139      	bne.n	80148a0 <__kernel_rem_pio2+0x2d0>
 801482c:	9002      	str	r0, [sp, #8]
 801482e:	2200      	movs	r2, #0
 8014830:	2300      	movs	r3, #0
 8014832:	4630      	mov	r0, r6
 8014834:	4639      	mov	r1, r7
 8014836:	f7ec f95f 	bl	8000af8 <__aeabi_dcmpeq>
 801483a:	2800      	cmp	r0, #0
 801483c:	f000 80c7 	beq.w	80149ce <__kernel_rem_pio2+0x3fe>
 8014840:	1e65      	subs	r5, r4, #1
 8014842:	462b      	mov	r3, r5
 8014844:	2200      	movs	r2, #0
 8014846:	9904      	ldr	r1, [sp, #16]
 8014848:	428b      	cmp	r3, r1
 801484a:	da6a      	bge.n	8014922 <__kernel_rem_pio2+0x352>
 801484c:	2a00      	cmp	r2, #0
 801484e:	f000 8088 	beq.w	8014962 <__kernel_rem_pio2+0x392>
 8014852:	ab0e      	add	r3, sp, #56	; 0x38
 8014854:	f1aa 0a18 	sub.w	sl, sl, #24
 8014858:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801485c:	2b00      	cmp	r3, #0
 801485e:	f000 80b4 	beq.w	80149ca <__kernel_rem_pio2+0x3fa>
 8014862:	4650      	mov	r0, sl
 8014864:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80148f0 <__kernel_rem_pio2+0x320>
 8014868:	f000 fb3a 	bl	8014ee0 <scalbn>
 801486c:	00ec      	lsls	r4, r5, #3
 801486e:	ab72      	add	r3, sp, #456	; 0x1c8
 8014870:	191e      	adds	r6, r3, r4
 8014872:	ec59 8b10 	vmov	r8, r9, d0
 8014876:	f106 0a08 	add.w	sl, r6, #8
 801487a:	462f      	mov	r7, r5
 801487c:	2f00      	cmp	r7, #0
 801487e:	f280 80df 	bge.w	8014a40 <__kernel_rem_pio2+0x470>
 8014882:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80148e8 <__kernel_rem_pio2+0x318>
 8014886:	f04f 0a00 	mov.w	sl, #0
 801488a:	eba5 030a 	sub.w	r3, r5, sl
 801488e:	2b00      	cmp	r3, #0
 8014890:	f2c0 810a 	blt.w	8014aa8 <__kernel_rem_pio2+0x4d8>
 8014894:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014910 <__kernel_rem_pio2+0x340>
 8014898:	ec59 8b18 	vmov	r8, r9, d8
 801489c:	2700      	movs	r7, #0
 801489e:	e0f5      	b.n	8014a8c <__kernel_rem_pio2+0x4bc>
 80148a0:	2302      	movs	r3, #2
 80148a2:	9302      	str	r3, [sp, #8]
 80148a4:	e760      	b.n	8014768 <__kernel_rem_pio2+0x198>
 80148a6:	ab0e      	add	r3, sp, #56	; 0x38
 80148a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148ac:	b94d      	cbnz	r5, 80148c2 <__kernel_rem_pio2+0x2f2>
 80148ae:	b12b      	cbz	r3, 80148bc <__kernel_rem_pio2+0x2ec>
 80148b0:	a80e      	add	r0, sp, #56	; 0x38
 80148b2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80148b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80148ba:	2301      	movs	r3, #1
 80148bc:	3201      	adds	r2, #1
 80148be:	461d      	mov	r5, r3
 80148c0:	e759      	b.n	8014776 <__kernel_rem_pio2+0x1a6>
 80148c2:	a80e      	add	r0, sp, #56	; 0x38
 80148c4:	1acb      	subs	r3, r1, r3
 80148c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80148ca:	462b      	mov	r3, r5
 80148cc:	e7f6      	b.n	80148bc <__kernel_rem_pio2+0x2ec>
 80148ce:	1e62      	subs	r2, r4, #1
 80148d0:	ab0e      	add	r3, sp, #56	; 0x38
 80148d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80148da:	a90e      	add	r1, sp, #56	; 0x38
 80148dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80148e0:	e757      	b.n	8014792 <__kernel_rem_pio2+0x1c2>
 80148e2:	bf00      	nop
 80148e4:	f3af 8000 	nop.w
	...
 80148f4:	3ff00000 	.word	0x3ff00000
 80148f8:	08019cc0 	.word	0x08019cc0
 80148fc:	40200000 	.word	0x40200000
 8014900:	3ff00000 	.word	0x3ff00000
 8014904:	3e700000 	.word	0x3e700000
 8014908:	41700000 	.word	0x41700000
 801490c:	3fe00000 	.word	0x3fe00000
 8014910:	08019c80 	.word	0x08019c80
 8014914:	1e62      	subs	r2, r4, #1
 8014916:	ab0e      	add	r3, sp, #56	; 0x38
 8014918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801491c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014920:	e7db      	b.n	80148da <__kernel_rem_pio2+0x30a>
 8014922:	a90e      	add	r1, sp, #56	; 0x38
 8014924:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014928:	3b01      	subs	r3, #1
 801492a:	430a      	orrs	r2, r1
 801492c:	e78b      	b.n	8014846 <__kernel_rem_pio2+0x276>
 801492e:	3301      	adds	r3, #1
 8014930:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014934:	2900      	cmp	r1, #0
 8014936:	d0fa      	beq.n	801492e <__kernel_rem_pio2+0x35e>
 8014938:	9a08      	ldr	r2, [sp, #32]
 801493a:	4422      	add	r2, r4
 801493c:	00d2      	lsls	r2, r2, #3
 801493e:	a922      	add	r1, sp, #136	; 0x88
 8014940:	18e3      	adds	r3, r4, r3
 8014942:	9206      	str	r2, [sp, #24]
 8014944:	440a      	add	r2, r1
 8014946:	9302      	str	r3, [sp, #8]
 8014948:	f10b 0108 	add.w	r1, fp, #8
 801494c:	f102 0308 	add.w	r3, r2, #8
 8014950:	1c66      	adds	r6, r4, #1
 8014952:	910a      	str	r1, [sp, #40]	; 0x28
 8014954:	2500      	movs	r5, #0
 8014956:	930d      	str	r3, [sp, #52]	; 0x34
 8014958:	9b02      	ldr	r3, [sp, #8]
 801495a:	42b3      	cmp	r3, r6
 801495c:	da04      	bge.n	8014968 <__kernel_rem_pio2+0x398>
 801495e:	461c      	mov	r4, r3
 8014960:	e6a6      	b.n	80146b0 <__kernel_rem_pio2+0xe0>
 8014962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014964:	2301      	movs	r3, #1
 8014966:	e7e3      	b.n	8014930 <__kernel_rem_pio2+0x360>
 8014968:	9b06      	ldr	r3, [sp, #24]
 801496a:	18ef      	adds	r7, r5, r3
 801496c:	ab22      	add	r3, sp, #136	; 0x88
 801496e:	441f      	add	r7, r3
 8014970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014972:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014976:	f7eb fded 	bl	8000554 <__aeabi_i2d>
 801497a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801497c:	461c      	mov	r4, r3
 801497e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014980:	e9c7 0100 	strd	r0, r1, [r7]
 8014984:	eb03 0b05 	add.w	fp, r3, r5
 8014988:	2700      	movs	r7, #0
 801498a:	f04f 0800 	mov.w	r8, #0
 801498e:	f04f 0900 	mov.w	r9, #0
 8014992:	9b07      	ldr	r3, [sp, #28]
 8014994:	429f      	cmp	r7, r3
 8014996:	dd08      	ble.n	80149aa <__kernel_rem_pio2+0x3da>
 8014998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801499a:	aa72      	add	r2, sp, #456	; 0x1c8
 801499c:	18eb      	adds	r3, r5, r3
 801499e:	4413      	add	r3, r2
 80149a0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80149a4:	3601      	adds	r6, #1
 80149a6:	3508      	adds	r5, #8
 80149a8:	e7d6      	b.n	8014958 <__kernel_rem_pio2+0x388>
 80149aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80149ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80149b2:	f7eb fe39 	bl	8000628 <__aeabi_dmul>
 80149b6:	4602      	mov	r2, r0
 80149b8:	460b      	mov	r3, r1
 80149ba:	4640      	mov	r0, r8
 80149bc:	4649      	mov	r1, r9
 80149be:	f7eb fc7d 	bl	80002bc <__adddf3>
 80149c2:	3701      	adds	r7, #1
 80149c4:	4680      	mov	r8, r0
 80149c6:	4689      	mov	r9, r1
 80149c8:	e7e3      	b.n	8014992 <__kernel_rem_pio2+0x3c2>
 80149ca:	3d01      	subs	r5, #1
 80149cc:	e741      	b.n	8014852 <__kernel_rem_pio2+0x282>
 80149ce:	f1ca 0000 	rsb	r0, sl, #0
 80149d2:	ec47 6b10 	vmov	d0, r6, r7
 80149d6:	f000 fa83 	bl	8014ee0 <scalbn>
 80149da:	ec57 6b10 	vmov	r6, r7, d0
 80149de:	2200      	movs	r2, #0
 80149e0:	4b99      	ldr	r3, [pc, #612]	; (8014c48 <__kernel_rem_pio2+0x678>)
 80149e2:	ee10 0a10 	vmov	r0, s0
 80149e6:	4639      	mov	r1, r7
 80149e8:	f7ec f8a4 	bl	8000b34 <__aeabi_dcmpge>
 80149ec:	b1f8      	cbz	r0, 8014a2e <__kernel_rem_pio2+0x45e>
 80149ee:	2200      	movs	r2, #0
 80149f0:	4b96      	ldr	r3, [pc, #600]	; (8014c4c <__kernel_rem_pio2+0x67c>)
 80149f2:	4630      	mov	r0, r6
 80149f4:	4639      	mov	r1, r7
 80149f6:	f7eb fe17 	bl	8000628 <__aeabi_dmul>
 80149fa:	f7ec f8c5 	bl	8000b88 <__aeabi_d2iz>
 80149fe:	4680      	mov	r8, r0
 8014a00:	f7eb fda8 	bl	8000554 <__aeabi_i2d>
 8014a04:	2200      	movs	r2, #0
 8014a06:	4b90      	ldr	r3, [pc, #576]	; (8014c48 <__kernel_rem_pio2+0x678>)
 8014a08:	f7eb fe0e 	bl	8000628 <__aeabi_dmul>
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	4602      	mov	r2, r0
 8014a10:	4639      	mov	r1, r7
 8014a12:	4630      	mov	r0, r6
 8014a14:	f7eb fc50 	bl	80002b8 <__aeabi_dsub>
 8014a18:	f7ec f8b6 	bl	8000b88 <__aeabi_d2iz>
 8014a1c:	1c65      	adds	r5, r4, #1
 8014a1e:	ab0e      	add	r3, sp, #56	; 0x38
 8014a20:	f10a 0a18 	add.w	sl, sl, #24
 8014a24:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014a28:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014a2c:	e719      	b.n	8014862 <__kernel_rem_pio2+0x292>
 8014a2e:	4630      	mov	r0, r6
 8014a30:	4639      	mov	r1, r7
 8014a32:	f7ec f8a9 	bl	8000b88 <__aeabi_d2iz>
 8014a36:	ab0e      	add	r3, sp, #56	; 0x38
 8014a38:	4625      	mov	r5, r4
 8014a3a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014a3e:	e710      	b.n	8014862 <__kernel_rem_pio2+0x292>
 8014a40:	ab0e      	add	r3, sp, #56	; 0x38
 8014a42:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014a46:	f7eb fd85 	bl	8000554 <__aeabi_i2d>
 8014a4a:	4642      	mov	r2, r8
 8014a4c:	464b      	mov	r3, r9
 8014a4e:	f7eb fdeb 	bl	8000628 <__aeabi_dmul>
 8014a52:	2200      	movs	r2, #0
 8014a54:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014a58:	4b7c      	ldr	r3, [pc, #496]	; (8014c4c <__kernel_rem_pio2+0x67c>)
 8014a5a:	4640      	mov	r0, r8
 8014a5c:	4649      	mov	r1, r9
 8014a5e:	f7eb fde3 	bl	8000628 <__aeabi_dmul>
 8014a62:	3f01      	subs	r7, #1
 8014a64:	4680      	mov	r8, r0
 8014a66:	4689      	mov	r9, r1
 8014a68:	e708      	b.n	801487c <__kernel_rem_pio2+0x2ac>
 8014a6a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a72:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014a76:	f7eb fdd7 	bl	8000628 <__aeabi_dmul>
 8014a7a:	4602      	mov	r2, r0
 8014a7c:	460b      	mov	r3, r1
 8014a7e:	4640      	mov	r0, r8
 8014a80:	4649      	mov	r1, r9
 8014a82:	f7eb fc1b 	bl	80002bc <__adddf3>
 8014a86:	3701      	adds	r7, #1
 8014a88:	4680      	mov	r8, r0
 8014a8a:	4689      	mov	r9, r1
 8014a8c:	9b04      	ldr	r3, [sp, #16]
 8014a8e:	429f      	cmp	r7, r3
 8014a90:	dc01      	bgt.n	8014a96 <__kernel_rem_pio2+0x4c6>
 8014a92:	45ba      	cmp	sl, r7
 8014a94:	dae9      	bge.n	8014a6a <__kernel_rem_pio2+0x49a>
 8014a96:	ab4a      	add	r3, sp, #296	; 0x128
 8014a98:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014a9c:	e9c3 8900 	strd	r8, r9, [r3]
 8014aa0:	f10a 0a01 	add.w	sl, sl, #1
 8014aa4:	3e08      	subs	r6, #8
 8014aa6:	e6f0      	b.n	801488a <__kernel_rem_pio2+0x2ba>
 8014aa8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014aaa:	2b03      	cmp	r3, #3
 8014aac:	d85b      	bhi.n	8014b66 <__kernel_rem_pio2+0x596>
 8014aae:	e8df f003 	tbb	[pc, r3]
 8014ab2:	264a      	.short	0x264a
 8014ab4:	0226      	.short	0x0226
 8014ab6:	ab9a      	add	r3, sp, #616	; 0x268
 8014ab8:	441c      	add	r4, r3
 8014aba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014abe:	46a2      	mov	sl, r4
 8014ac0:	46ab      	mov	fp, r5
 8014ac2:	f1bb 0f00 	cmp.w	fp, #0
 8014ac6:	dc6c      	bgt.n	8014ba2 <__kernel_rem_pio2+0x5d2>
 8014ac8:	46a2      	mov	sl, r4
 8014aca:	46ab      	mov	fp, r5
 8014acc:	f1bb 0f01 	cmp.w	fp, #1
 8014ad0:	f300 8086 	bgt.w	8014be0 <__kernel_rem_pio2+0x610>
 8014ad4:	2000      	movs	r0, #0
 8014ad6:	2100      	movs	r1, #0
 8014ad8:	2d01      	cmp	r5, #1
 8014ada:	f300 80a0 	bgt.w	8014c1e <__kernel_rem_pio2+0x64e>
 8014ade:	9b02      	ldr	r3, [sp, #8]
 8014ae0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014ae4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	f040 809e 	bne.w	8014c2a <__kernel_rem_pio2+0x65a>
 8014aee:	9b01      	ldr	r3, [sp, #4]
 8014af0:	e9c3 7800 	strd	r7, r8, [r3]
 8014af4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014af8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014afc:	e033      	b.n	8014b66 <__kernel_rem_pio2+0x596>
 8014afe:	3408      	adds	r4, #8
 8014b00:	ab4a      	add	r3, sp, #296	; 0x128
 8014b02:	441c      	add	r4, r3
 8014b04:	462e      	mov	r6, r5
 8014b06:	2000      	movs	r0, #0
 8014b08:	2100      	movs	r1, #0
 8014b0a:	2e00      	cmp	r6, #0
 8014b0c:	da3a      	bge.n	8014b84 <__kernel_rem_pio2+0x5b4>
 8014b0e:	9b02      	ldr	r3, [sp, #8]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d03d      	beq.n	8014b90 <__kernel_rem_pio2+0x5c0>
 8014b14:	4602      	mov	r2, r0
 8014b16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b1a:	9c01      	ldr	r4, [sp, #4]
 8014b1c:	e9c4 2300 	strd	r2, r3, [r4]
 8014b20:	4602      	mov	r2, r0
 8014b22:	460b      	mov	r3, r1
 8014b24:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014b28:	f7eb fbc6 	bl	80002b8 <__aeabi_dsub>
 8014b2c:	ae4c      	add	r6, sp, #304	; 0x130
 8014b2e:	2401      	movs	r4, #1
 8014b30:	42a5      	cmp	r5, r4
 8014b32:	da30      	bge.n	8014b96 <__kernel_rem_pio2+0x5c6>
 8014b34:	9b02      	ldr	r3, [sp, #8]
 8014b36:	b113      	cbz	r3, 8014b3e <__kernel_rem_pio2+0x56e>
 8014b38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b3c:	4619      	mov	r1, r3
 8014b3e:	9b01      	ldr	r3, [sp, #4]
 8014b40:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014b44:	e00f      	b.n	8014b66 <__kernel_rem_pio2+0x596>
 8014b46:	ab9a      	add	r3, sp, #616	; 0x268
 8014b48:	441c      	add	r4, r3
 8014b4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014b4e:	2000      	movs	r0, #0
 8014b50:	2100      	movs	r1, #0
 8014b52:	2d00      	cmp	r5, #0
 8014b54:	da10      	bge.n	8014b78 <__kernel_rem_pio2+0x5a8>
 8014b56:	9b02      	ldr	r3, [sp, #8]
 8014b58:	b113      	cbz	r3, 8014b60 <__kernel_rem_pio2+0x590>
 8014b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b5e:	4619      	mov	r1, r3
 8014b60:	9b01      	ldr	r3, [sp, #4]
 8014b62:	e9c3 0100 	strd	r0, r1, [r3]
 8014b66:	9b06      	ldr	r3, [sp, #24]
 8014b68:	f003 0007 	and.w	r0, r3, #7
 8014b6c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014b70:	ecbd 8b02 	vpop	{d8}
 8014b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b78:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014b7c:	f7eb fb9e 	bl	80002bc <__adddf3>
 8014b80:	3d01      	subs	r5, #1
 8014b82:	e7e6      	b.n	8014b52 <__kernel_rem_pio2+0x582>
 8014b84:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014b88:	f7eb fb98 	bl	80002bc <__adddf3>
 8014b8c:	3e01      	subs	r6, #1
 8014b8e:	e7bc      	b.n	8014b0a <__kernel_rem_pio2+0x53a>
 8014b90:	4602      	mov	r2, r0
 8014b92:	460b      	mov	r3, r1
 8014b94:	e7c1      	b.n	8014b1a <__kernel_rem_pio2+0x54a>
 8014b96:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014b9a:	f7eb fb8f 	bl	80002bc <__adddf3>
 8014b9e:	3401      	adds	r4, #1
 8014ba0:	e7c6      	b.n	8014b30 <__kernel_rem_pio2+0x560>
 8014ba2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014ba6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014baa:	4640      	mov	r0, r8
 8014bac:	ec53 2b17 	vmov	r2, r3, d7
 8014bb0:	4649      	mov	r1, r9
 8014bb2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014bb6:	f7eb fb81 	bl	80002bc <__adddf3>
 8014bba:	4602      	mov	r2, r0
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	4606      	mov	r6, r0
 8014bc0:	460f      	mov	r7, r1
 8014bc2:	4640      	mov	r0, r8
 8014bc4:	4649      	mov	r1, r9
 8014bc6:	f7eb fb77 	bl	80002b8 <__aeabi_dsub>
 8014bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014bce:	f7eb fb75 	bl	80002bc <__adddf3>
 8014bd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014bd6:	e9ca 0100 	strd	r0, r1, [sl]
 8014bda:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8014bde:	e770      	b.n	8014ac2 <__kernel_rem_pio2+0x4f2>
 8014be0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014be4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014be8:	4630      	mov	r0, r6
 8014bea:	ec53 2b17 	vmov	r2, r3, d7
 8014bee:	4639      	mov	r1, r7
 8014bf0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014bf4:	f7eb fb62 	bl	80002bc <__adddf3>
 8014bf8:	4602      	mov	r2, r0
 8014bfa:	460b      	mov	r3, r1
 8014bfc:	4680      	mov	r8, r0
 8014bfe:	4689      	mov	r9, r1
 8014c00:	4630      	mov	r0, r6
 8014c02:	4639      	mov	r1, r7
 8014c04:	f7eb fb58 	bl	80002b8 <__aeabi_dsub>
 8014c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c0c:	f7eb fb56 	bl	80002bc <__adddf3>
 8014c10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014c14:	e9ca 0100 	strd	r0, r1, [sl]
 8014c18:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8014c1c:	e756      	b.n	8014acc <__kernel_rem_pio2+0x4fc>
 8014c1e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014c22:	f7eb fb4b 	bl	80002bc <__adddf3>
 8014c26:	3d01      	subs	r5, #1
 8014c28:	e756      	b.n	8014ad8 <__kernel_rem_pio2+0x508>
 8014c2a:	9b01      	ldr	r3, [sp, #4]
 8014c2c:	9a01      	ldr	r2, [sp, #4]
 8014c2e:	601f      	str	r7, [r3, #0]
 8014c30:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014c34:	605c      	str	r4, [r3, #4]
 8014c36:	609d      	str	r5, [r3, #8]
 8014c38:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014c3c:	60d3      	str	r3, [r2, #12]
 8014c3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c42:	6110      	str	r0, [r2, #16]
 8014c44:	6153      	str	r3, [r2, #20]
 8014c46:	e78e      	b.n	8014b66 <__kernel_rem_pio2+0x596>
 8014c48:	41700000 	.word	0x41700000
 8014c4c:	3e700000 	.word	0x3e700000

08014c50 <__kernel_sin>:
 8014c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c54:	ec55 4b10 	vmov	r4, r5, d0
 8014c58:	b085      	sub	sp, #20
 8014c5a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014c5e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014c62:	ed8d 1b00 	vstr	d1, [sp]
 8014c66:	9002      	str	r0, [sp, #8]
 8014c68:	da06      	bge.n	8014c78 <__kernel_sin+0x28>
 8014c6a:	ee10 0a10 	vmov	r0, s0
 8014c6e:	4629      	mov	r1, r5
 8014c70:	f7eb ff8a 	bl	8000b88 <__aeabi_d2iz>
 8014c74:	2800      	cmp	r0, #0
 8014c76:	d051      	beq.n	8014d1c <__kernel_sin+0xcc>
 8014c78:	4622      	mov	r2, r4
 8014c7a:	462b      	mov	r3, r5
 8014c7c:	4620      	mov	r0, r4
 8014c7e:	4629      	mov	r1, r5
 8014c80:	f7eb fcd2 	bl	8000628 <__aeabi_dmul>
 8014c84:	4682      	mov	sl, r0
 8014c86:	468b      	mov	fp, r1
 8014c88:	4602      	mov	r2, r0
 8014c8a:	460b      	mov	r3, r1
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	4629      	mov	r1, r5
 8014c90:	f7eb fcca 	bl	8000628 <__aeabi_dmul>
 8014c94:	a341      	add	r3, pc, #260	; (adr r3, 8014d9c <__kernel_sin+0x14c>)
 8014c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c9a:	4680      	mov	r8, r0
 8014c9c:	4689      	mov	r9, r1
 8014c9e:	4650      	mov	r0, sl
 8014ca0:	4659      	mov	r1, fp
 8014ca2:	f7eb fcc1 	bl	8000628 <__aeabi_dmul>
 8014ca6:	a33f      	add	r3, pc, #252	; (adr r3, 8014da4 <__kernel_sin+0x154>)
 8014ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cac:	f7eb fb04 	bl	80002b8 <__aeabi_dsub>
 8014cb0:	4652      	mov	r2, sl
 8014cb2:	465b      	mov	r3, fp
 8014cb4:	f7eb fcb8 	bl	8000628 <__aeabi_dmul>
 8014cb8:	a33c      	add	r3, pc, #240	; (adr r3, 8014dac <__kernel_sin+0x15c>)
 8014cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cbe:	f7eb fafd 	bl	80002bc <__adddf3>
 8014cc2:	4652      	mov	r2, sl
 8014cc4:	465b      	mov	r3, fp
 8014cc6:	f7eb fcaf 	bl	8000628 <__aeabi_dmul>
 8014cca:	a33a      	add	r3, pc, #232	; (adr r3, 8014db4 <__kernel_sin+0x164>)
 8014ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd0:	f7eb faf2 	bl	80002b8 <__aeabi_dsub>
 8014cd4:	4652      	mov	r2, sl
 8014cd6:	465b      	mov	r3, fp
 8014cd8:	f7eb fca6 	bl	8000628 <__aeabi_dmul>
 8014cdc:	a337      	add	r3, pc, #220	; (adr r3, 8014dbc <__kernel_sin+0x16c>)
 8014cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce2:	f7eb faeb 	bl	80002bc <__adddf3>
 8014ce6:	9b02      	ldr	r3, [sp, #8]
 8014ce8:	4606      	mov	r6, r0
 8014cea:	460f      	mov	r7, r1
 8014cec:	b9db      	cbnz	r3, 8014d26 <__kernel_sin+0xd6>
 8014cee:	4602      	mov	r2, r0
 8014cf0:	460b      	mov	r3, r1
 8014cf2:	4650      	mov	r0, sl
 8014cf4:	4659      	mov	r1, fp
 8014cf6:	f7eb fc97 	bl	8000628 <__aeabi_dmul>
 8014cfa:	a325      	add	r3, pc, #148	; (adr r3, 8014d90 <__kernel_sin+0x140>)
 8014cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d00:	f7eb fada 	bl	80002b8 <__aeabi_dsub>
 8014d04:	4642      	mov	r2, r8
 8014d06:	464b      	mov	r3, r9
 8014d08:	f7eb fc8e 	bl	8000628 <__aeabi_dmul>
 8014d0c:	4602      	mov	r2, r0
 8014d0e:	460b      	mov	r3, r1
 8014d10:	4620      	mov	r0, r4
 8014d12:	4629      	mov	r1, r5
 8014d14:	f7eb fad2 	bl	80002bc <__adddf3>
 8014d18:	4604      	mov	r4, r0
 8014d1a:	460d      	mov	r5, r1
 8014d1c:	ec45 4b10 	vmov	d0, r4, r5
 8014d20:	b005      	add	sp, #20
 8014d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d26:	2200      	movs	r2, #0
 8014d28:	4b1b      	ldr	r3, [pc, #108]	; (8014d98 <__kernel_sin+0x148>)
 8014d2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d2e:	f7eb fc7b 	bl	8000628 <__aeabi_dmul>
 8014d32:	4632      	mov	r2, r6
 8014d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d38:	463b      	mov	r3, r7
 8014d3a:	4640      	mov	r0, r8
 8014d3c:	4649      	mov	r1, r9
 8014d3e:	f7eb fc73 	bl	8000628 <__aeabi_dmul>
 8014d42:	4602      	mov	r2, r0
 8014d44:	460b      	mov	r3, r1
 8014d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d4a:	f7eb fab5 	bl	80002b8 <__aeabi_dsub>
 8014d4e:	4652      	mov	r2, sl
 8014d50:	465b      	mov	r3, fp
 8014d52:	f7eb fc69 	bl	8000628 <__aeabi_dmul>
 8014d56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d5a:	f7eb faad 	bl	80002b8 <__aeabi_dsub>
 8014d5e:	a30c      	add	r3, pc, #48	; (adr r3, 8014d90 <__kernel_sin+0x140>)
 8014d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d64:	4606      	mov	r6, r0
 8014d66:	460f      	mov	r7, r1
 8014d68:	4640      	mov	r0, r8
 8014d6a:	4649      	mov	r1, r9
 8014d6c:	f7eb fc5c 	bl	8000628 <__aeabi_dmul>
 8014d70:	4602      	mov	r2, r0
 8014d72:	460b      	mov	r3, r1
 8014d74:	4630      	mov	r0, r6
 8014d76:	4639      	mov	r1, r7
 8014d78:	f7eb faa0 	bl	80002bc <__adddf3>
 8014d7c:	4602      	mov	r2, r0
 8014d7e:	460b      	mov	r3, r1
 8014d80:	4620      	mov	r0, r4
 8014d82:	4629      	mov	r1, r5
 8014d84:	f7eb fa98 	bl	80002b8 <__aeabi_dsub>
 8014d88:	e7c6      	b.n	8014d18 <__kernel_sin+0xc8>
 8014d8a:	bf00      	nop
 8014d8c:	f3af 8000 	nop.w
 8014d90:	55555549 	.word	0x55555549
 8014d94:	3fc55555 	.word	0x3fc55555
 8014d98:	3fe00000 	.word	0x3fe00000
 8014d9c:	5acfd57c 	.word	0x5acfd57c
 8014da0:	3de5d93a 	.word	0x3de5d93a
 8014da4:	8a2b9ceb 	.word	0x8a2b9ceb
 8014da8:	3e5ae5e6 	.word	0x3e5ae5e6
 8014dac:	57b1fe7d 	.word	0x57b1fe7d
 8014db0:	3ec71de3 	.word	0x3ec71de3
 8014db4:	19c161d5 	.word	0x19c161d5
 8014db8:	3f2a01a0 	.word	0x3f2a01a0
 8014dbc:	1110f8a6 	.word	0x1110f8a6
 8014dc0:	3f811111 	.word	0x3f811111

08014dc4 <fabs>:
 8014dc4:	ec51 0b10 	vmov	r0, r1, d0
 8014dc8:	ee10 2a10 	vmov	r2, s0
 8014dcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014dd0:	ec43 2b10 	vmov	d0, r2, r3
 8014dd4:	4770      	bx	lr
	...

08014dd8 <floor>:
 8014dd8:	ec51 0b10 	vmov	r0, r1, d0
 8014ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014de0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014de4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014de8:	2e13      	cmp	r6, #19
 8014dea:	460c      	mov	r4, r1
 8014dec:	ee10 5a10 	vmov	r5, s0
 8014df0:	4680      	mov	r8, r0
 8014df2:	dc34      	bgt.n	8014e5e <floor+0x86>
 8014df4:	2e00      	cmp	r6, #0
 8014df6:	da16      	bge.n	8014e26 <floor+0x4e>
 8014df8:	a335      	add	r3, pc, #212	; (adr r3, 8014ed0 <floor+0xf8>)
 8014dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dfe:	f7eb fa5d 	bl	80002bc <__adddf3>
 8014e02:	2200      	movs	r2, #0
 8014e04:	2300      	movs	r3, #0
 8014e06:	f7eb fe9f 	bl	8000b48 <__aeabi_dcmpgt>
 8014e0a:	b148      	cbz	r0, 8014e20 <floor+0x48>
 8014e0c:	2c00      	cmp	r4, #0
 8014e0e:	da59      	bge.n	8014ec4 <floor+0xec>
 8014e10:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014e14:	4a30      	ldr	r2, [pc, #192]	; (8014ed8 <floor+0x100>)
 8014e16:	432b      	orrs	r3, r5
 8014e18:	2500      	movs	r5, #0
 8014e1a:	42ab      	cmp	r3, r5
 8014e1c:	bf18      	it	ne
 8014e1e:	4614      	movne	r4, r2
 8014e20:	4621      	mov	r1, r4
 8014e22:	4628      	mov	r0, r5
 8014e24:	e025      	b.n	8014e72 <floor+0x9a>
 8014e26:	4f2d      	ldr	r7, [pc, #180]	; (8014edc <floor+0x104>)
 8014e28:	4137      	asrs	r7, r6
 8014e2a:	ea01 0307 	and.w	r3, r1, r7
 8014e2e:	4303      	orrs	r3, r0
 8014e30:	d01f      	beq.n	8014e72 <floor+0x9a>
 8014e32:	a327      	add	r3, pc, #156	; (adr r3, 8014ed0 <floor+0xf8>)
 8014e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e38:	f7eb fa40 	bl	80002bc <__adddf3>
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	2300      	movs	r3, #0
 8014e40:	f7eb fe82 	bl	8000b48 <__aeabi_dcmpgt>
 8014e44:	2800      	cmp	r0, #0
 8014e46:	d0eb      	beq.n	8014e20 <floor+0x48>
 8014e48:	2c00      	cmp	r4, #0
 8014e4a:	bfbe      	ittt	lt
 8014e4c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014e50:	fa43 f606 	asrlt.w	r6, r3, r6
 8014e54:	19a4      	addlt	r4, r4, r6
 8014e56:	ea24 0407 	bic.w	r4, r4, r7
 8014e5a:	2500      	movs	r5, #0
 8014e5c:	e7e0      	b.n	8014e20 <floor+0x48>
 8014e5e:	2e33      	cmp	r6, #51	; 0x33
 8014e60:	dd0b      	ble.n	8014e7a <floor+0xa2>
 8014e62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014e66:	d104      	bne.n	8014e72 <floor+0x9a>
 8014e68:	ee10 2a10 	vmov	r2, s0
 8014e6c:	460b      	mov	r3, r1
 8014e6e:	f7eb fa25 	bl	80002bc <__adddf3>
 8014e72:	ec41 0b10 	vmov	d0, r0, r1
 8014e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e7a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e82:	fa23 f707 	lsr.w	r7, r3, r7
 8014e86:	4207      	tst	r7, r0
 8014e88:	d0f3      	beq.n	8014e72 <floor+0x9a>
 8014e8a:	a311      	add	r3, pc, #68	; (adr r3, 8014ed0 <floor+0xf8>)
 8014e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e90:	f7eb fa14 	bl	80002bc <__adddf3>
 8014e94:	2200      	movs	r2, #0
 8014e96:	2300      	movs	r3, #0
 8014e98:	f7eb fe56 	bl	8000b48 <__aeabi_dcmpgt>
 8014e9c:	2800      	cmp	r0, #0
 8014e9e:	d0bf      	beq.n	8014e20 <floor+0x48>
 8014ea0:	2c00      	cmp	r4, #0
 8014ea2:	da02      	bge.n	8014eaa <floor+0xd2>
 8014ea4:	2e14      	cmp	r6, #20
 8014ea6:	d103      	bne.n	8014eb0 <floor+0xd8>
 8014ea8:	3401      	adds	r4, #1
 8014eaa:	ea25 0507 	bic.w	r5, r5, r7
 8014eae:	e7b7      	b.n	8014e20 <floor+0x48>
 8014eb0:	2301      	movs	r3, #1
 8014eb2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014eb6:	fa03 f606 	lsl.w	r6, r3, r6
 8014eba:	4435      	add	r5, r6
 8014ebc:	4545      	cmp	r5, r8
 8014ebe:	bf38      	it	cc
 8014ec0:	18e4      	addcc	r4, r4, r3
 8014ec2:	e7f2      	b.n	8014eaa <floor+0xd2>
 8014ec4:	2500      	movs	r5, #0
 8014ec6:	462c      	mov	r4, r5
 8014ec8:	e7aa      	b.n	8014e20 <floor+0x48>
 8014eca:	bf00      	nop
 8014ecc:	f3af 8000 	nop.w
 8014ed0:	8800759c 	.word	0x8800759c
 8014ed4:	7e37e43c 	.word	0x7e37e43c
 8014ed8:	bff00000 	.word	0xbff00000
 8014edc:	000fffff 	.word	0x000fffff

08014ee0 <scalbn>:
 8014ee0:	b570      	push	{r4, r5, r6, lr}
 8014ee2:	ec55 4b10 	vmov	r4, r5, d0
 8014ee6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014eea:	4606      	mov	r6, r0
 8014eec:	462b      	mov	r3, r5
 8014eee:	b9aa      	cbnz	r2, 8014f1c <scalbn+0x3c>
 8014ef0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014ef4:	4323      	orrs	r3, r4
 8014ef6:	d03b      	beq.n	8014f70 <scalbn+0x90>
 8014ef8:	4b31      	ldr	r3, [pc, #196]	; (8014fc0 <scalbn+0xe0>)
 8014efa:	4629      	mov	r1, r5
 8014efc:	2200      	movs	r2, #0
 8014efe:	ee10 0a10 	vmov	r0, s0
 8014f02:	f7eb fb91 	bl	8000628 <__aeabi_dmul>
 8014f06:	4b2f      	ldr	r3, [pc, #188]	; (8014fc4 <scalbn+0xe4>)
 8014f08:	429e      	cmp	r6, r3
 8014f0a:	4604      	mov	r4, r0
 8014f0c:	460d      	mov	r5, r1
 8014f0e:	da12      	bge.n	8014f36 <scalbn+0x56>
 8014f10:	a327      	add	r3, pc, #156	; (adr r3, 8014fb0 <scalbn+0xd0>)
 8014f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f16:	f7eb fb87 	bl	8000628 <__aeabi_dmul>
 8014f1a:	e009      	b.n	8014f30 <scalbn+0x50>
 8014f1c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014f20:	428a      	cmp	r2, r1
 8014f22:	d10c      	bne.n	8014f3e <scalbn+0x5e>
 8014f24:	ee10 2a10 	vmov	r2, s0
 8014f28:	4620      	mov	r0, r4
 8014f2a:	4629      	mov	r1, r5
 8014f2c:	f7eb f9c6 	bl	80002bc <__adddf3>
 8014f30:	4604      	mov	r4, r0
 8014f32:	460d      	mov	r5, r1
 8014f34:	e01c      	b.n	8014f70 <scalbn+0x90>
 8014f36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014f3a:	460b      	mov	r3, r1
 8014f3c:	3a36      	subs	r2, #54	; 0x36
 8014f3e:	4432      	add	r2, r6
 8014f40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014f44:	428a      	cmp	r2, r1
 8014f46:	dd0b      	ble.n	8014f60 <scalbn+0x80>
 8014f48:	ec45 4b11 	vmov	d1, r4, r5
 8014f4c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014fb8 <scalbn+0xd8>
 8014f50:	f000 f83c 	bl	8014fcc <copysign>
 8014f54:	a318      	add	r3, pc, #96	; (adr r3, 8014fb8 <scalbn+0xd8>)
 8014f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f5a:	ec51 0b10 	vmov	r0, r1, d0
 8014f5e:	e7da      	b.n	8014f16 <scalbn+0x36>
 8014f60:	2a00      	cmp	r2, #0
 8014f62:	dd08      	ble.n	8014f76 <scalbn+0x96>
 8014f64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014f68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014f6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014f70:	ec45 4b10 	vmov	d0, r4, r5
 8014f74:	bd70      	pop	{r4, r5, r6, pc}
 8014f76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014f7a:	da0d      	bge.n	8014f98 <scalbn+0xb8>
 8014f7c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014f80:	429e      	cmp	r6, r3
 8014f82:	ec45 4b11 	vmov	d1, r4, r5
 8014f86:	dce1      	bgt.n	8014f4c <scalbn+0x6c>
 8014f88:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014fb0 <scalbn+0xd0>
 8014f8c:	f000 f81e 	bl	8014fcc <copysign>
 8014f90:	a307      	add	r3, pc, #28	; (adr r3, 8014fb0 <scalbn+0xd0>)
 8014f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f96:	e7e0      	b.n	8014f5a <scalbn+0x7a>
 8014f98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014f9c:	3236      	adds	r2, #54	; 0x36
 8014f9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014fa2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014fa6:	4620      	mov	r0, r4
 8014fa8:	4629      	mov	r1, r5
 8014faa:	2200      	movs	r2, #0
 8014fac:	4b06      	ldr	r3, [pc, #24]	; (8014fc8 <scalbn+0xe8>)
 8014fae:	e7b2      	b.n	8014f16 <scalbn+0x36>
 8014fb0:	c2f8f359 	.word	0xc2f8f359
 8014fb4:	01a56e1f 	.word	0x01a56e1f
 8014fb8:	8800759c 	.word	0x8800759c
 8014fbc:	7e37e43c 	.word	0x7e37e43c
 8014fc0:	43500000 	.word	0x43500000
 8014fc4:	ffff3cb0 	.word	0xffff3cb0
 8014fc8:	3c900000 	.word	0x3c900000

08014fcc <copysign>:
 8014fcc:	ec51 0b10 	vmov	r0, r1, d0
 8014fd0:	ee11 0a90 	vmov	r0, s3
 8014fd4:	ee10 2a10 	vmov	r2, s0
 8014fd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014fdc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014fe0:	ea41 0300 	orr.w	r3, r1, r0
 8014fe4:	ec43 2b10 	vmov	d0, r2, r3
 8014fe8:	4770      	bx	lr
	...

08014fec <__errno>:
 8014fec:	4b01      	ldr	r3, [pc, #4]	; (8014ff4 <__errno+0x8>)
 8014fee:	6818      	ldr	r0, [r3, #0]
 8014ff0:	4770      	bx	lr
 8014ff2:	bf00      	nop
 8014ff4:	2000000c 	.word	0x2000000c

08014ff8 <__libc_init_array>:
 8014ff8:	b570      	push	{r4, r5, r6, lr}
 8014ffa:	4e0d      	ldr	r6, [pc, #52]	; (8015030 <__libc_init_array+0x38>)
 8014ffc:	4c0d      	ldr	r4, [pc, #52]	; (8015034 <__libc_init_array+0x3c>)
 8014ffe:	1ba4      	subs	r4, r4, r6
 8015000:	10a4      	asrs	r4, r4, #2
 8015002:	2500      	movs	r5, #0
 8015004:	42a5      	cmp	r5, r4
 8015006:	d109      	bne.n	801501c <__libc_init_array+0x24>
 8015008:	4e0b      	ldr	r6, [pc, #44]	; (8015038 <__libc_init_array+0x40>)
 801500a:	4c0c      	ldr	r4, [pc, #48]	; (801503c <__libc_init_array+0x44>)
 801500c:	f004 f9e8 	bl	80193e0 <_init>
 8015010:	1ba4      	subs	r4, r4, r6
 8015012:	10a4      	asrs	r4, r4, #2
 8015014:	2500      	movs	r5, #0
 8015016:	42a5      	cmp	r5, r4
 8015018:	d105      	bne.n	8015026 <__libc_init_array+0x2e>
 801501a:	bd70      	pop	{r4, r5, r6, pc}
 801501c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015020:	4798      	blx	r3
 8015022:	3501      	adds	r5, #1
 8015024:	e7ee      	b.n	8015004 <__libc_init_array+0xc>
 8015026:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801502a:	4798      	blx	r3
 801502c:	3501      	adds	r5, #1
 801502e:	e7f2      	b.n	8015016 <__libc_init_array+0x1e>
 8015030:	0801a00c 	.word	0x0801a00c
 8015034:	0801a00c 	.word	0x0801a00c
 8015038:	0801a00c 	.word	0x0801a00c
 801503c:	0801a014 	.word	0x0801a014

08015040 <memcpy>:
 8015040:	b510      	push	{r4, lr}
 8015042:	1e43      	subs	r3, r0, #1
 8015044:	440a      	add	r2, r1
 8015046:	4291      	cmp	r1, r2
 8015048:	d100      	bne.n	801504c <memcpy+0xc>
 801504a:	bd10      	pop	{r4, pc}
 801504c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015054:	e7f7      	b.n	8015046 <memcpy+0x6>

08015056 <memset>:
 8015056:	4402      	add	r2, r0
 8015058:	4603      	mov	r3, r0
 801505a:	4293      	cmp	r3, r2
 801505c:	d100      	bne.n	8015060 <memset+0xa>
 801505e:	4770      	bx	lr
 8015060:	f803 1b01 	strb.w	r1, [r3], #1
 8015064:	e7f9      	b.n	801505a <memset+0x4>

08015066 <__cvt>:
 8015066:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801506a:	ec55 4b10 	vmov	r4, r5, d0
 801506e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015070:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015074:	2d00      	cmp	r5, #0
 8015076:	460e      	mov	r6, r1
 8015078:	4691      	mov	r9, r2
 801507a:	4619      	mov	r1, r3
 801507c:	bfb8      	it	lt
 801507e:	4622      	movlt	r2, r4
 8015080:	462b      	mov	r3, r5
 8015082:	f027 0720 	bic.w	r7, r7, #32
 8015086:	bfbb      	ittet	lt
 8015088:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801508c:	461d      	movlt	r5, r3
 801508e:	2300      	movge	r3, #0
 8015090:	232d      	movlt	r3, #45	; 0x2d
 8015092:	bfb8      	it	lt
 8015094:	4614      	movlt	r4, r2
 8015096:	2f46      	cmp	r7, #70	; 0x46
 8015098:	700b      	strb	r3, [r1, #0]
 801509a:	d004      	beq.n	80150a6 <__cvt+0x40>
 801509c:	2f45      	cmp	r7, #69	; 0x45
 801509e:	d100      	bne.n	80150a2 <__cvt+0x3c>
 80150a0:	3601      	adds	r6, #1
 80150a2:	2102      	movs	r1, #2
 80150a4:	e000      	b.n	80150a8 <__cvt+0x42>
 80150a6:	2103      	movs	r1, #3
 80150a8:	ab03      	add	r3, sp, #12
 80150aa:	9301      	str	r3, [sp, #4]
 80150ac:	ab02      	add	r3, sp, #8
 80150ae:	9300      	str	r3, [sp, #0]
 80150b0:	4632      	mov	r2, r6
 80150b2:	4653      	mov	r3, sl
 80150b4:	ec45 4b10 	vmov	d0, r4, r5
 80150b8:	f001 fdfe 	bl	8016cb8 <_dtoa_r>
 80150bc:	2f47      	cmp	r7, #71	; 0x47
 80150be:	4680      	mov	r8, r0
 80150c0:	d102      	bne.n	80150c8 <__cvt+0x62>
 80150c2:	f019 0f01 	tst.w	r9, #1
 80150c6:	d026      	beq.n	8015116 <__cvt+0xb0>
 80150c8:	2f46      	cmp	r7, #70	; 0x46
 80150ca:	eb08 0906 	add.w	r9, r8, r6
 80150ce:	d111      	bne.n	80150f4 <__cvt+0x8e>
 80150d0:	f898 3000 	ldrb.w	r3, [r8]
 80150d4:	2b30      	cmp	r3, #48	; 0x30
 80150d6:	d10a      	bne.n	80150ee <__cvt+0x88>
 80150d8:	2200      	movs	r2, #0
 80150da:	2300      	movs	r3, #0
 80150dc:	4620      	mov	r0, r4
 80150de:	4629      	mov	r1, r5
 80150e0:	f7eb fd0a 	bl	8000af8 <__aeabi_dcmpeq>
 80150e4:	b918      	cbnz	r0, 80150ee <__cvt+0x88>
 80150e6:	f1c6 0601 	rsb	r6, r6, #1
 80150ea:	f8ca 6000 	str.w	r6, [sl]
 80150ee:	f8da 3000 	ldr.w	r3, [sl]
 80150f2:	4499      	add	r9, r3
 80150f4:	2200      	movs	r2, #0
 80150f6:	2300      	movs	r3, #0
 80150f8:	4620      	mov	r0, r4
 80150fa:	4629      	mov	r1, r5
 80150fc:	f7eb fcfc 	bl	8000af8 <__aeabi_dcmpeq>
 8015100:	b938      	cbnz	r0, 8015112 <__cvt+0xac>
 8015102:	2230      	movs	r2, #48	; 0x30
 8015104:	9b03      	ldr	r3, [sp, #12]
 8015106:	454b      	cmp	r3, r9
 8015108:	d205      	bcs.n	8015116 <__cvt+0xb0>
 801510a:	1c59      	adds	r1, r3, #1
 801510c:	9103      	str	r1, [sp, #12]
 801510e:	701a      	strb	r2, [r3, #0]
 8015110:	e7f8      	b.n	8015104 <__cvt+0x9e>
 8015112:	f8cd 900c 	str.w	r9, [sp, #12]
 8015116:	9b03      	ldr	r3, [sp, #12]
 8015118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801511a:	eba3 0308 	sub.w	r3, r3, r8
 801511e:	4640      	mov	r0, r8
 8015120:	6013      	str	r3, [r2, #0]
 8015122:	b004      	add	sp, #16
 8015124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015128 <__exponent>:
 8015128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801512a:	2900      	cmp	r1, #0
 801512c:	4604      	mov	r4, r0
 801512e:	bfba      	itte	lt
 8015130:	4249      	neglt	r1, r1
 8015132:	232d      	movlt	r3, #45	; 0x2d
 8015134:	232b      	movge	r3, #43	; 0x2b
 8015136:	2909      	cmp	r1, #9
 8015138:	f804 2b02 	strb.w	r2, [r4], #2
 801513c:	7043      	strb	r3, [r0, #1]
 801513e:	dd20      	ble.n	8015182 <__exponent+0x5a>
 8015140:	f10d 0307 	add.w	r3, sp, #7
 8015144:	461f      	mov	r7, r3
 8015146:	260a      	movs	r6, #10
 8015148:	fb91 f5f6 	sdiv	r5, r1, r6
 801514c:	fb06 1115 	mls	r1, r6, r5, r1
 8015150:	3130      	adds	r1, #48	; 0x30
 8015152:	2d09      	cmp	r5, #9
 8015154:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015158:	f103 32ff 	add.w	r2, r3, #4294967295
 801515c:	4629      	mov	r1, r5
 801515e:	dc09      	bgt.n	8015174 <__exponent+0x4c>
 8015160:	3130      	adds	r1, #48	; 0x30
 8015162:	3b02      	subs	r3, #2
 8015164:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015168:	42bb      	cmp	r3, r7
 801516a:	4622      	mov	r2, r4
 801516c:	d304      	bcc.n	8015178 <__exponent+0x50>
 801516e:	1a10      	subs	r0, r2, r0
 8015170:	b003      	add	sp, #12
 8015172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015174:	4613      	mov	r3, r2
 8015176:	e7e7      	b.n	8015148 <__exponent+0x20>
 8015178:	f813 2b01 	ldrb.w	r2, [r3], #1
 801517c:	f804 2b01 	strb.w	r2, [r4], #1
 8015180:	e7f2      	b.n	8015168 <__exponent+0x40>
 8015182:	2330      	movs	r3, #48	; 0x30
 8015184:	4419      	add	r1, r3
 8015186:	7083      	strb	r3, [r0, #2]
 8015188:	1d02      	adds	r2, r0, #4
 801518a:	70c1      	strb	r1, [r0, #3]
 801518c:	e7ef      	b.n	801516e <__exponent+0x46>
	...

08015190 <_printf_float>:
 8015190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015194:	b08d      	sub	sp, #52	; 0x34
 8015196:	460c      	mov	r4, r1
 8015198:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801519c:	4616      	mov	r6, r2
 801519e:	461f      	mov	r7, r3
 80151a0:	4605      	mov	r5, r0
 80151a2:	f002 fe7b 	bl	8017e9c <_localeconv_r>
 80151a6:	6803      	ldr	r3, [r0, #0]
 80151a8:	9304      	str	r3, [sp, #16]
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7eb f828 	bl	8000200 <strlen>
 80151b0:	2300      	movs	r3, #0
 80151b2:	930a      	str	r3, [sp, #40]	; 0x28
 80151b4:	f8d8 3000 	ldr.w	r3, [r8]
 80151b8:	9005      	str	r0, [sp, #20]
 80151ba:	3307      	adds	r3, #7
 80151bc:	f023 0307 	bic.w	r3, r3, #7
 80151c0:	f103 0208 	add.w	r2, r3, #8
 80151c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80151c8:	f8d4 b000 	ldr.w	fp, [r4]
 80151cc:	f8c8 2000 	str.w	r2, [r8]
 80151d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80151d8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80151dc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80151e0:	9307      	str	r3, [sp, #28]
 80151e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80151e6:	f04f 32ff 	mov.w	r2, #4294967295
 80151ea:	4ba7      	ldr	r3, [pc, #668]	; (8015488 <_printf_float+0x2f8>)
 80151ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80151f0:	f7eb fcb4 	bl	8000b5c <__aeabi_dcmpun>
 80151f4:	bb70      	cbnz	r0, 8015254 <_printf_float+0xc4>
 80151f6:	f04f 32ff 	mov.w	r2, #4294967295
 80151fa:	4ba3      	ldr	r3, [pc, #652]	; (8015488 <_printf_float+0x2f8>)
 80151fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015200:	f7eb fc8e 	bl	8000b20 <__aeabi_dcmple>
 8015204:	bb30      	cbnz	r0, 8015254 <_printf_float+0xc4>
 8015206:	2200      	movs	r2, #0
 8015208:	2300      	movs	r3, #0
 801520a:	4640      	mov	r0, r8
 801520c:	4649      	mov	r1, r9
 801520e:	f7eb fc7d 	bl	8000b0c <__aeabi_dcmplt>
 8015212:	b110      	cbz	r0, 801521a <_printf_float+0x8a>
 8015214:	232d      	movs	r3, #45	; 0x2d
 8015216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801521a:	4a9c      	ldr	r2, [pc, #624]	; (801548c <_printf_float+0x2fc>)
 801521c:	4b9c      	ldr	r3, [pc, #624]	; (8015490 <_printf_float+0x300>)
 801521e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015222:	bf8c      	ite	hi
 8015224:	4690      	movhi	r8, r2
 8015226:	4698      	movls	r8, r3
 8015228:	2303      	movs	r3, #3
 801522a:	f02b 0204 	bic.w	r2, fp, #4
 801522e:	6123      	str	r3, [r4, #16]
 8015230:	6022      	str	r2, [r4, #0]
 8015232:	f04f 0900 	mov.w	r9, #0
 8015236:	9700      	str	r7, [sp, #0]
 8015238:	4633      	mov	r3, r6
 801523a:	aa0b      	add	r2, sp, #44	; 0x2c
 801523c:	4621      	mov	r1, r4
 801523e:	4628      	mov	r0, r5
 8015240:	f000 f9e6 	bl	8015610 <_printf_common>
 8015244:	3001      	adds	r0, #1
 8015246:	f040 808d 	bne.w	8015364 <_printf_float+0x1d4>
 801524a:	f04f 30ff 	mov.w	r0, #4294967295
 801524e:	b00d      	add	sp, #52	; 0x34
 8015250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015254:	4642      	mov	r2, r8
 8015256:	464b      	mov	r3, r9
 8015258:	4640      	mov	r0, r8
 801525a:	4649      	mov	r1, r9
 801525c:	f7eb fc7e 	bl	8000b5c <__aeabi_dcmpun>
 8015260:	b110      	cbz	r0, 8015268 <_printf_float+0xd8>
 8015262:	4a8c      	ldr	r2, [pc, #560]	; (8015494 <_printf_float+0x304>)
 8015264:	4b8c      	ldr	r3, [pc, #560]	; (8015498 <_printf_float+0x308>)
 8015266:	e7da      	b.n	801521e <_printf_float+0x8e>
 8015268:	6861      	ldr	r1, [r4, #4]
 801526a:	1c4b      	adds	r3, r1, #1
 801526c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015270:	a80a      	add	r0, sp, #40	; 0x28
 8015272:	d13e      	bne.n	80152f2 <_printf_float+0x162>
 8015274:	2306      	movs	r3, #6
 8015276:	6063      	str	r3, [r4, #4]
 8015278:	2300      	movs	r3, #0
 801527a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801527e:	ab09      	add	r3, sp, #36	; 0x24
 8015280:	9300      	str	r3, [sp, #0]
 8015282:	ec49 8b10 	vmov	d0, r8, r9
 8015286:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801528a:	6022      	str	r2, [r4, #0]
 801528c:	f8cd a004 	str.w	sl, [sp, #4]
 8015290:	6861      	ldr	r1, [r4, #4]
 8015292:	4628      	mov	r0, r5
 8015294:	f7ff fee7 	bl	8015066 <__cvt>
 8015298:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801529c:	2b47      	cmp	r3, #71	; 0x47
 801529e:	4680      	mov	r8, r0
 80152a0:	d109      	bne.n	80152b6 <_printf_float+0x126>
 80152a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152a4:	1cd8      	adds	r0, r3, #3
 80152a6:	db02      	blt.n	80152ae <_printf_float+0x11e>
 80152a8:	6862      	ldr	r2, [r4, #4]
 80152aa:	4293      	cmp	r3, r2
 80152ac:	dd47      	ble.n	801533e <_printf_float+0x1ae>
 80152ae:	f1aa 0a02 	sub.w	sl, sl, #2
 80152b2:	fa5f fa8a 	uxtb.w	sl, sl
 80152b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80152ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152bc:	d824      	bhi.n	8015308 <_printf_float+0x178>
 80152be:	3901      	subs	r1, #1
 80152c0:	4652      	mov	r2, sl
 80152c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80152c6:	9109      	str	r1, [sp, #36]	; 0x24
 80152c8:	f7ff ff2e 	bl	8015128 <__exponent>
 80152cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152ce:	1813      	adds	r3, r2, r0
 80152d0:	2a01      	cmp	r2, #1
 80152d2:	4681      	mov	r9, r0
 80152d4:	6123      	str	r3, [r4, #16]
 80152d6:	dc02      	bgt.n	80152de <_printf_float+0x14e>
 80152d8:	6822      	ldr	r2, [r4, #0]
 80152da:	07d1      	lsls	r1, r2, #31
 80152dc:	d501      	bpl.n	80152e2 <_printf_float+0x152>
 80152de:	3301      	adds	r3, #1
 80152e0:	6123      	str	r3, [r4, #16]
 80152e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d0a5      	beq.n	8015236 <_printf_float+0xa6>
 80152ea:	232d      	movs	r3, #45	; 0x2d
 80152ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80152f0:	e7a1      	b.n	8015236 <_printf_float+0xa6>
 80152f2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80152f6:	f000 8177 	beq.w	80155e8 <_printf_float+0x458>
 80152fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80152fe:	d1bb      	bne.n	8015278 <_printf_float+0xe8>
 8015300:	2900      	cmp	r1, #0
 8015302:	d1b9      	bne.n	8015278 <_printf_float+0xe8>
 8015304:	2301      	movs	r3, #1
 8015306:	e7b6      	b.n	8015276 <_printf_float+0xe6>
 8015308:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801530c:	d119      	bne.n	8015342 <_printf_float+0x1b2>
 801530e:	2900      	cmp	r1, #0
 8015310:	6863      	ldr	r3, [r4, #4]
 8015312:	dd0c      	ble.n	801532e <_printf_float+0x19e>
 8015314:	6121      	str	r1, [r4, #16]
 8015316:	b913      	cbnz	r3, 801531e <_printf_float+0x18e>
 8015318:	6822      	ldr	r2, [r4, #0]
 801531a:	07d2      	lsls	r2, r2, #31
 801531c:	d502      	bpl.n	8015324 <_printf_float+0x194>
 801531e:	3301      	adds	r3, #1
 8015320:	440b      	add	r3, r1
 8015322:	6123      	str	r3, [r4, #16]
 8015324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015326:	65a3      	str	r3, [r4, #88]	; 0x58
 8015328:	f04f 0900 	mov.w	r9, #0
 801532c:	e7d9      	b.n	80152e2 <_printf_float+0x152>
 801532e:	b913      	cbnz	r3, 8015336 <_printf_float+0x1a6>
 8015330:	6822      	ldr	r2, [r4, #0]
 8015332:	07d0      	lsls	r0, r2, #31
 8015334:	d501      	bpl.n	801533a <_printf_float+0x1aa>
 8015336:	3302      	adds	r3, #2
 8015338:	e7f3      	b.n	8015322 <_printf_float+0x192>
 801533a:	2301      	movs	r3, #1
 801533c:	e7f1      	b.n	8015322 <_printf_float+0x192>
 801533e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015342:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015346:	4293      	cmp	r3, r2
 8015348:	db05      	blt.n	8015356 <_printf_float+0x1c6>
 801534a:	6822      	ldr	r2, [r4, #0]
 801534c:	6123      	str	r3, [r4, #16]
 801534e:	07d1      	lsls	r1, r2, #31
 8015350:	d5e8      	bpl.n	8015324 <_printf_float+0x194>
 8015352:	3301      	adds	r3, #1
 8015354:	e7e5      	b.n	8015322 <_printf_float+0x192>
 8015356:	2b00      	cmp	r3, #0
 8015358:	bfd4      	ite	le
 801535a:	f1c3 0302 	rsble	r3, r3, #2
 801535e:	2301      	movgt	r3, #1
 8015360:	4413      	add	r3, r2
 8015362:	e7de      	b.n	8015322 <_printf_float+0x192>
 8015364:	6823      	ldr	r3, [r4, #0]
 8015366:	055a      	lsls	r2, r3, #21
 8015368:	d407      	bmi.n	801537a <_printf_float+0x1ea>
 801536a:	6923      	ldr	r3, [r4, #16]
 801536c:	4642      	mov	r2, r8
 801536e:	4631      	mov	r1, r6
 8015370:	4628      	mov	r0, r5
 8015372:	47b8      	blx	r7
 8015374:	3001      	adds	r0, #1
 8015376:	d12b      	bne.n	80153d0 <_printf_float+0x240>
 8015378:	e767      	b.n	801524a <_printf_float+0xba>
 801537a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801537e:	f240 80dc 	bls.w	801553a <_printf_float+0x3aa>
 8015382:	2200      	movs	r2, #0
 8015384:	2300      	movs	r3, #0
 8015386:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801538a:	f7eb fbb5 	bl	8000af8 <__aeabi_dcmpeq>
 801538e:	2800      	cmp	r0, #0
 8015390:	d033      	beq.n	80153fa <_printf_float+0x26a>
 8015392:	2301      	movs	r3, #1
 8015394:	4a41      	ldr	r2, [pc, #260]	; (801549c <_printf_float+0x30c>)
 8015396:	4631      	mov	r1, r6
 8015398:	4628      	mov	r0, r5
 801539a:	47b8      	blx	r7
 801539c:	3001      	adds	r0, #1
 801539e:	f43f af54 	beq.w	801524a <_printf_float+0xba>
 80153a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80153a6:	429a      	cmp	r2, r3
 80153a8:	db02      	blt.n	80153b0 <_printf_float+0x220>
 80153aa:	6823      	ldr	r3, [r4, #0]
 80153ac:	07d8      	lsls	r0, r3, #31
 80153ae:	d50f      	bpl.n	80153d0 <_printf_float+0x240>
 80153b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153b4:	4631      	mov	r1, r6
 80153b6:	4628      	mov	r0, r5
 80153b8:	47b8      	blx	r7
 80153ba:	3001      	adds	r0, #1
 80153bc:	f43f af45 	beq.w	801524a <_printf_float+0xba>
 80153c0:	f04f 0800 	mov.w	r8, #0
 80153c4:	f104 091a 	add.w	r9, r4, #26
 80153c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153ca:	3b01      	subs	r3, #1
 80153cc:	4543      	cmp	r3, r8
 80153ce:	dc09      	bgt.n	80153e4 <_printf_float+0x254>
 80153d0:	6823      	ldr	r3, [r4, #0]
 80153d2:	079b      	lsls	r3, r3, #30
 80153d4:	f100 8103 	bmi.w	80155de <_printf_float+0x44e>
 80153d8:	68e0      	ldr	r0, [r4, #12]
 80153da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153dc:	4298      	cmp	r0, r3
 80153de:	bfb8      	it	lt
 80153e0:	4618      	movlt	r0, r3
 80153e2:	e734      	b.n	801524e <_printf_float+0xbe>
 80153e4:	2301      	movs	r3, #1
 80153e6:	464a      	mov	r2, r9
 80153e8:	4631      	mov	r1, r6
 80153ea:	4628      	mov	r0, r5
 80153ec:	47b8      	blx	r7
 80153ee:	3001      	adds	r0, #1
 80153f0:	f43f af2b 	beq.w	801524a <_printf_float+0xba>
 80153f4:	f108 0801 	add.w	r8, r8, #1
 80153f8:	e7e6      	b.n	80153c8 <_printf_float+0x238>
 80153fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	dc2b      	bgt.n	8015458 <_printf_float+0x2c8>
 8015400:	2301      	movs	r3, #1
 8015402:	4a26      	ldr	r2, [pc, #152]	; (801549c <_printf_float+0x30c>)
 8015404:	4631      	mov	r1, r6
 8015406:	4628      	mov	r0, r5
 8015408:	47b8      	blx	r7
 801540a:	3001      	adds	r0, #1
 801540c:	f43f af1d 	beq.w	801524a <_printf_float+0xba>
 8015410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015412:	b923      	cbnz	r3, 801541e <_printf_float+0x28e>
 8015414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015416:	b913      	cbnz	r3, 801541e <_printf_float+0x28e>
 8015418:	6823      	ldr	r3, [r4, #0]
 801541a:	07d9      	lsls	r1, r3, #31
 801541c:	d5d8      	bpl.n	80153d0 <_printf_float+0x240>
 801541e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015422:	4631      	mov	r1, r6
 8015424:	4628      	mov	r0, r5
 8015426:	47b8      	blx	r7
 8015428:	3001      	adds	r0, #1
 801542a:	f43f af0e 	beq.w	801524a <_printf_float+0xba>
 801542e:	f04f 0900 	mov.w	r9, #0
 8015432:	f104 0a1a 	add.w	sl, r4, #26
 8015436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015438:	425b      	negs	r3, r3
 801543a:	454b      	cmp	r3, r9
 801543c:	dc01      	bgt.n	8015442 <_printf_float+0x2b2>
 801543e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015440:	e794      	b.n	801536c <_printf_float+0x1dc>
 8015442:	2301      	movs	r3, #1
 8015444:	4652      	mov	r2, sl
 8015446:	4631      	mov	r1, r6
 8015448:	4628      	mov	r0, r5
 801544a:	47b8      	blx	r7
 801544c:	3001      	adds	r0, #1
 801544e:	f43f aefc 	beq.w	801524a <_printf_float+0xba>
 8015452:	f109 0901 	add.w	r9, r9, #1
 8015456:	e7ee      	b.n	8015436 <_printf_float+0x2a6>
 8015458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801545a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801545c:	429a      	cmp	r2, r3
 801545e:	bfa8      	it	ge
 8015460:	461a      	movge	r2, r3
 8015462:	2a00      	cmp	r2, #0
 8015464:	4691      	mov	r9, r2
 8015466:	dd07      	ble.n	8015478 <_printf_float+0x2e8>
 8015468:	4613      	mov	r3, r2
 801546a:	4631      	mov	r1, r6
 801546c:	4642      	mov	r2, r8
 801546e:	4628      	mov	r0, r5
 8015470:	47b8      	blx	r7
 8015472:	3001      	adds	r0, #1
 8015474:	f43f aee9 	beq.w	801524a <_printf_float+0xba>
 8015478:	f104 031a 	add.w	r3, r4, #26
 801547c:	f04f 0b00 	mov.w	fp, #0
 8015480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015484:	9306      	str	r3, [sp, #24]
 8015486:	e015      	b.n	80154b4 <_printf_float+0x324>
 8015488:	7fefffff 	.word	0x7fefffff
 801548c:	08019cd4 	.word	0x08019cd4
 8015490:	08019cd0 	.word	0x08019cd0
 8015494:	08019cdc 	.word	0x08019cdc
 8015498:	08019cd8 	.word	0x08019cd8
 801549c:	08019efb 	.word	0x08019efb
 80154a0:	2301      	movs	r3, #1
 80154a2:	9a06      	ldr	r2, [sp, #24]
 80154a4:	4631      	mov	r1, r6
 80154a6:	4628      	mov	r0, r5
 80154a8:	47b8      	blx	r7
 80154aa:	3001      	adds	r0, #1
 80154ac:	f43f aecd 	beq.w	801524a <_printf_float+0xba>
 80154b0:	f10b 0b01 	add.w	fp, fp, #1
 80154b4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80154b8:	ebaa 0309 	sub.w	r3, sl, r9
 80154bc:	455b      	cmp	r3, fp
 80154be:	dcef      	bgt.n	80154a0 <_printf_float+0x310>
 80154c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80154c4:	429a      	cmp	r2, r3
 80154c6:	44d0      	add	r8, sl
 80154c8:	db15      	blt.n	80154f6 <_printf_float+0x366>
 80154ca:	6823      	ldr	r3, [r4, #0]
 80154cc:	07da      	lsls	r2, r3, #31
 80154ce:	d412      	bmi.n	80154f6 <_printf_float+0x366>
 80154d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154d4:	eba3 020a 	sub.w	r2, r3, sl
 80154d8:	eba3 0a01 	sub.w	sl, r3, r1
 80154dc:	4592      	cmp	sl, r2
 80154de:	bfa8      	it	ge
 80154e0:	4692      	movge	sl, r2
 80154e2:	f1ba 0f00 	cmp.w	sl, #0
 80154e6:	dc0e      	bgt.n	8015506 <_printf_float+0x376>
 80154e8:	f04f 0800 	mov.w	r8, #0
 80154ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80154f0:	f104 091a 	add.w	r9, r4, #26
 80154f4:	e019      	b.n	801552a <_printf_float+0x39a>
 80154f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80154fa:	4631      	mov	r1, r6
 80154fc:	4628      	mov	r0, r5
 80154fe:	47b8      	blx	r7
 8015500:	3001      	adds	r0, #1
 8015502:	d1e5      	bne.n	80154d0 <_printf_float+0x340>
 8015504:	e6a1      	b.n	801524a <_printf_float+0xba>
 8015506:	4653      	mov	r3, sl
 8015508:	4642      	mov	r2, r8
 801550a:	4631      	mov	r1, r6
 801550c:	4628      	mov	r0, r5
 801550e:	47b8      	blx	r7
 8015510:	3001      	adds	r0, #1
 8015512:	d1e9      	bne.n	80154e8 <_printf_float+0x358>
 8015514:	e699      	b.n	801524a <_printf_float+0xba>
 8015516:	2301      	movs	r3, #1
 8015518:	464a      	mov	r2, r9
 801551a:	4631      	mov	r1, r6
 801551c:	4628      	mov	r0, r5
 801551e:	47b8      	blx	r7
 8015520:	3001      	adds	r0, #1
 8015522:	f43f ae92 	beq.w	801524a <_printf_float+0xba>
 8015526:	f108 0801 	add.w	r8, r8, #1
 801552a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801552e:	1a9b      	subs	r3, r3, r2
 8015530:	eba3 030a 	sub.w	r3, r3, sl
 8015534:	4543      	cmp	r3, r8
 8015536:	dcee      	bgt.n	8015516 <_printf_float+0x386>
 8015538:	e74a      	b.n	80153d0 <_printf_float+0x240>
 801553a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801553c:	2a01      	cmp	r2, #1
 801553e:	dc01      	bgt.n	8015544 <_printf_float+0x3b4>
 8015540:	07db      	lsls	r3, r3, #31
 8015542:	d53a      	bpl.n	80155ba <_printf_float+0x42a>
 8015544:	2301      	movs	r3, #1
 8015546:	4642      	mov	r2, r8
 8015548:	4631      	mov	r1, r6
 801554a:	4628      	mov	r0, r5
 801554c:	47b8      	blx	r7
 801554e:	3001      	adds	r0, #1
 8015550:	f43f ae7b 	beq.w	801524a <_printf_float+0xba>
 8015554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015558:	4631      	mov	r1, r6
 801555a:	4628      	mov	r0, r5
 801555c:	47b8      	blx	r7
 801555e:	3001      	adds	r0, #1
 8015560:	f108 0801 	add.w	r8, r8, #1
 8015564:	f43f ae71 	beq.w	801524a <_printf_float+0xba>
 8015568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801556a:	2200      	movs	r2, #0
 801556c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015574:	2300      	movs	r3, #0
 8015576:	f7eb fabf 	bl	8000af8 <__aeabi_dcmpeq>
 801557a:	b9c8      	cbnz	r0, 80155b0 <_printf_float+0x420>
 801557c:	4653      	mov	r3, sl
 801557e:	4642      	mov	r2, r8
 8015580:	4631      	mov	r1, r6
 8015582:	4628      	mov	r0, r5
 8015584:	47b8      	blx	r7
 8015586:	3001      	adds	r0, #1
 8015588:	d10e      	bne.n	80155a8 <_printf_float+0x418>
 801558a:	e65e      	b.n	801524a <_printf_float+0xba>
 801558c:	2301      	movs	r3, #1
 801558e:	4652      	mov	r2, sl
 8015590:	4631      	mov	r1, r6
 8015592:	4628      	mov	r0, r5
 8015594:	47b8      	blx	r7
 8015596:	3001      	adds	r0, #1
 8015598:	f43f ae57 	beq.w	801524a <_printf_float+0xba>
 801559c:	f108 0801 	add.w	r8, r8, #1
 80155a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155a2:	3b01      	subs	r3, #1
 80155a4:	4543      	cmp	r3, r8
 80155a6:	dcf1      	bgt.n	801558c <_printf_float+0x3fc>
 80155a8:	464b      	mov	r3, r9
 80155aa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80155ae:	e6de      	b.n	801536e <_printf_float+0x1de>
 80155b0:	f04f 0800 	mov.w	r8, #0
 80155b4:	f104 0a1a 	add.w	sl, r4, #26
 80155b8:	e7f2      	b.n	80155a0 <_printf_float+0x410>
 80155ba:	2301      	movs	r3, #1
 80155bc:	e7df      	b.n	801557e <_printf_float+0x3ee>
 80155be:	2301      	movs	r3, #1
 80155c0:	464a      	mov	r2, r9
 80155c2:	4631      	mov	r1, r6
 80155c4:	4628      	mov	r0, r5
 80155c6:	47b8      	blx	r7
 80155c8:	3001      	adds	r0, #1
 80155ca:	f43f ae3e 	beq.w	801524a <_printf_float+0xba>
 80155ce:	f108 0801 	add.w	r8, r8, #1
 80155d2:	68e3      	ldr	r3, [r4, #12]
 80155d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80155d6:	1a9b      	subs	r3, r3, r2
 80155d8:	4543      	cmp	r3, r8
 80155da:	dcf0      	bgt.n	80155be <_printf_float+0x42e>
 80155dc:	e6fc      	b.n	80153d8 <_printf_float+0x248>
 80155de:	f04f 0800 	mov.w	r8, #0
 80155e2:	f104 0919 	add.w	r9, r4, #25
 80155e6:	e7f4      	b.n	80155d2 <_printf_float+0x442>
 80155e8:	2900      	cmp	r1, #0
 80155ea:	f43f ae8b 	beq.w	8015304 <_printf_float+0x174>
 80155ee:	2300      	movs	r3, #0
 80155f0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80155f4:	ab09      	add	r3, sp, #36	; 0x24
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	ec49 8b10 	vmov	d0, r8, r9
 80155fc:	6022      	str	r2, [r4, #0]
 80155fe:	f8cd a004 	str.w	sl, [sp, #4]
 8015602:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015606:	4628      	mov	r0, r5
 8015608:	f7ff fd2d 	bl	8015066 <__cvt>
 801560c:	4680      	mov	r8, r0
 801560e:	e648      	b.n	80152a2 <_printf_float+0x112>

08015610 <_printf_common>:
 8015610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015614:	4691      	mov	r9, r2
 8015616:	461f      	mov	r7, r3
 8015618:	688a      	ldr	r2, [r1, #8]
 801561a:	690b      	ldr	r3, [r1, #16]
 801561c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015620:	4293      	cmp	r3, r2
 8015622:	bfb8      	it	lt
 8015624:	4613      	movlt	r3, r2
 8015626:	f8c9 3000 	str.w	r3, [r9]
 801562a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801562e:	4606      	mov	r6, r0
 8015630:	460c      	mov	r4, r1
 8015632:	b112      	cbz	r2, 801563a <_printf_common+0x2a>
 8015634:	3301      	adds	r3, #1
 8015636:	f8c9 3000 	str.w	r3, [r9]
 801563a:	6823      	ldr	r3, [r4, #0]
 801563c:	0699      	lsls	r1, r3, #26
 801563e:	bf42      	ittt	mi
 8015640:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015644:	3302      	addmi	r3, #2
 8015646:	f8c9 3000 	strmi.w	r3, [r9]
 801564a:	6825      	ldr	r5, [r4, #0]
 801564c:	f015 0506 	ands.w	r5, r5, #6
 8015650:	d107      	bne.n	8015662 <_printf_common+0x52>
 8015652:	f104 0a19 	add.w	sl, r4, #25
 8015656:	68e3      	ldr	r3, [r4, #12]
 8015658:	f8d9 2000 	ldr.w	r2, [r9]
 801565c:	1a9b      	subs	r3, r3, r2
 801565e:	42ab      	cmp	r3, r5
 8015660:	dc28      	bgt.n	80156b4 <_printf_common+0xa4>
 8015662:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015666:	6822      	ldr	r2, [r4, #0]
 8015668:	3300      	adds	r3, #0
 801566a:	bf18      	it	ne
 801566c:	2301      	movne	r3, #1
 801566e:	0692      	lsls	r2, r2, #26
 8015670:	d42d      	bmi.n	80156ce <_printf_common+0xbe>
 8015672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015676:	4639      	mov	r1, r7
 8015678:	4630      	mov	r0, r6
 801567a:	47c0      	blx	r8
 801567c:	3001      	adds	r0, #1
 801567e:	d020      	beq.n	80156c2 <_printf_common+0xb2>
 8015680:	6823      	ldr	r3, [r4, #0]
 8015682:	68e5      	ldr	r5, [r4, #12]
 8015684:	f8d9 2000 	ldr.w	r2, [r9]
 8015688:	f003 0306 	and.w	r3, r3, #6
 801568c:	2b04      	cmp	r3, #4
 801568e:	bf08      	it	eq
 8015690:	1aad      	subeq	r5, r5, r2
 8015692:	68a3      	ldr	r3, [r4, #8]
 8015694:	6922      	ldr	r2, [r4, #16]
 8015696:	bf0c      	ite	eq
 8015698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801569c:	2500      	movne	r5, #0
 801569e:	4293      	cmp	r3, r2
 80156a0:	bfc4      	itt	gt
 80156a2:	1a9b      	subgt	r3, r3, r2
 80156a4:	18ed      	addgt	r5, r5, r3
 80156a6:	f04f 0900 	mov.w	r9, #0
 80156aa:	341a      	adds	r4, #26
 80156ac:	454d      	cmp	r5, r9
 80156ae:	d11a      	bne.n	80156e6 <_printf_common+0xd6>
 80156b0:	2000      	movs	r0, #0
 80156b2:	e008      	b.n	80156c6 <_printf_common+0xb6>
 80156b4:	2301      	movs	r3, #1
 80156b6:	4652      	mov	r2, sl
 80156b8:	4639      	mov	r1, r7
 80156ba:	4630      	mov	r0, r6
 80156bc:	47c0      	blx	r8
 80156be:	3001      	adds	r0, #1
 80156c0:	d103      	bne.n	80156ca <_printf_common+0xba>
 80156c2:	f04f 30ff 	mov.w	r0, #4294967295
 80156c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156ca:	3501      	adds	r5, #1
 80156cc:	e7c3      	b.n	8015656 <_printf_common+0x46>
 80156ce:	18e1      	adds	r1, r4, r3
 80156d0:	1c5a      	adds	r2, r3, #1
 80156d2:	2030      	movs	r0, #48	; 0x30
 80156d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80156d8:	4422      	add	r2, r4
 80156da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80156de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80156e2:	3302      	adds	r3, #2
 80156e4:	e7c5      	b.n	8015672 <_printf_common+0x62>
 80156e6:	2301      	movs	r3, #1
 80156e8:	4622      	mov	r2, r4
 80156ea:	4639      	mov	r1, r7
 80156ec:	4630      	mov	r0, r6
 80156ee:	47c0      	blx	r8
 80156f0:	3001      	adds	r0, #1
 80156f2:	d0e6      	beq.n	80156c2 <_printf_common+0xb2>
 80156f4:	f109 0901 	add.w	r9, r9, #1
 80156f8:	e7d8      	b.n	80156ac <_printf_common+0x9c>
	...

080156fc <_printf_i>:
 80156fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015700:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015704:	460c      	mov	r4, r1
 8015706:	7e09      	ldrb	r1, [r1, #24]
 8015708:	b085      	sub	sp, #20
 801570a:	296e      	cmp	r1, #110	; 0x6e
 801570c:	4617      	mov	r7, r2
 801570e:	4606      	mov	r6, r0
 8015710:	4698      	mov	r8, r3
 8015712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015714:	f000 80b3 	beq.w	801587e <_printf_i+0x182>
 8015718:	d822      	bhi.n	8015760 <_printf_i+0x64>
 801571a:	2963      	cmp	r1, #99	; 0x63
 801571c:	d036      	beq.n	801578c <_printf_i+0x90>
 801571e:	d80a      	bhi.n	8015736 <_printf_i+0x3a>
 8015720:	2900      	cmp	r1, #0
 8015722:	f000 80b9 	beq.w	8015898 <_printf_i+0x19c>
 8015726:	2958      	cmp	r1, #88	; 0x58
 8015728:	f000 8083 	beq.w	8015832 <_printf_i+0x136>
 801572c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015730:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015734:	e032      	b.n	801579c <_printf_i+0xa0>
 8015736:	2964      	cmp	r1, #100	; 0x64
 8015738:	d001      	beq.n	801573e <_printf_i+0x42>
 801573a:	2969      	cmp	r1, #105	; 0x69
 801573c:	d1f6      	bne.n	801572c <_printf_i+0x30>
 801573e:	6820      	ldr	r0, [r4, #0]
 8015740:	6813      	ldr	r3, [r2, #0]
 8015742:	0605      	lsls	r5, r0, #24
 8015744:	f103 0104 	add.w	r1, r3, #4
 8015748:	d52a      	bpl.n	80157a0 <_printf_i+0xa4>
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	6011      	str	r1, [r2, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	da03      	bge.n	801575a <_printf_i+0x5e>
 8015752:	222d      	movs	r2, #45	; 0x2d
 8015754:	425b      	negs	r3, r3
 8015756:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801575a:	486f      	ldr	r0, [pc, #444]	; (8015918 <_printf_i+0x21c>)
 801575c:	220a      	movs	r2, #10
 801575e:	e039      	b.n	80157d4 <_printf_i+0xd8>
 8015760:	2973      	cmp	r1, #115	; 0x73
 8015762:	f000 809d 	beq.w	80158a0 <_printf_i+0x1a4>
 8015766:	d808      	bhi.n	801577a <_printf_i+0x7e>
 8015768:	296f      	cmp	r1, #111	; 0x6f
 801576a:	d020      	beq.n	80157ae <_printf_i+0xb2>
 801576c:	2970      	cmp	r1, #112	; 0x70
 801576e:	d1dd      	bne.n	801572c <_printf_i+0x30>
 8015770:	6823      	ldr	r3, [r4, #0]
 8015772:	f043 0320 	orr.w	r3, r3, #32
 8015776:	6023      	str	r3, [r4, #0]
 8015778:	e003      	b.n	8015782 <_printf_i+0x86>
 801577a:	2975      	cmp	r1, #117	; 0x75
 801577c:	d017      	beq.n	80157ae <_printf_i+0xb2>
 801577e:	2978      	cmp	r1, #120	; 0x78
 8015780:	d1d4      	bne.n	801572c <_printf_i+0x30>
 8015782:	2378      	movs	r3, #120	; 0x78
 8015784:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015788:	4864      	ldr	r0, [pc, #400]	; (801591c <_printf_i+0x220>)
 801578a:	e055      	b.n	8015838 <_printf_i+0x13c>
 801578c:	6813      	ldr	r3, [r2, #0]
 801578e:	1d19      	adds	r1, r3, #4
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	6011      	str	r1, [r2, #0]
 8015794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801579c:	2301      	movs	r3, #1
 801579e:	e08c      	b.n	80158ba <_printf_i+0x1be>
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	6011      	str	r1, [r2, #0]
 80157a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80157a8:	bf18      	it	ne
 80157aa:	b21b      	sxthne	r3, r3
 80157ac:	e7cf      	b.n	801574e <_printf_i+0x52>
 80157ae:	6813      	ldr	r3, [r2, #0]
 80157b0:	6825      	ldr	r5, [r4, #0]
 80157b2:	1d18      	adds	r0, r3, #4
 80157b4:	6010      	str	r0, [r2, #0]
 80157b6:	0628      	lsls	r0, r5, #24
 80157b8:	d501      	bpl.n	80157be <_printf_i+0xc2>
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	e002      	b.n	80157c4 <_printf_i+0xc8>
 80157be:	0668      	lsls	r0, r5, #25
 80157c0:	d5fb      	bpl.n	80157ba <_printf_i+0xbe>
 80157c2:	881b      	ldrh	r3, [r3, #0]
 80157c4:	4854      	ldr	r0, [pc, #336]	; (8015918 <_printf_i+0x21c>)
 80157c6:	296f      	cmp	r1, #111	; 0x6f
 80157c8:	bf14      	ite	ne
 80157ca:	220a      	movne	r2, #10
 80157cc:	2208      	moveq	r2, #8
 80157ce:	2100      	movs	r1, #0
 80157d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80157d4:	6865      	ldr	r5, [r4, #4]
 80157d6:	60a5      	str	r5, [r4, #8]
 80157d8:	2d00      	cmp	r5, #0
 80157da:	f2c0 8095 	blt.w	8015908 <_printf_i+0x20c>
 80157de:	6821      	ldr	r1, [r4, #0]
 80157e0:	f021 0104 	bic.w	r1, r1, #4
 80157e4:	6021      	str	r1, [r4, #0]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d13d      	bne.n	8015866 <_printf_i+0x16a>
 80157ea:	2d00      	cmp	r5, #0
 80157ec:	f040 808e 	bne.w	801590c <_printf_i+0x210>
 80157f0:	4665      	mov	r5, ip
 80157f2:	2a08      	cmp	r2, #8
 80157f4:	d10b      	bne.n	801580e <_printf_i+0x112>
 80157f6:	6823      	ldr	r3, [r4, #0]
 80157f8:	07db      	lsls	r3, r3, #31
 80157fa:	d508      	bpl.n	801580e <_printf_i+0x112>
 80157fc:	6923      	ldr	r3, [r4, #16]
 80157fe:	6862      	ldr	r2, [r4, #4]
 8015800:	429a      	cmp	r2, r3
 8015802:	bfde      	ittt	le
 8015804:	2330      	movle	r3, #48	; 0x30
 8015806:	f805 3c01 	strble.w	r3, [r5, #-1]
 801580a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801580e:	ebac 0305 	sub.w	r3, ip, r5
 8015812:	6123      	str	r3, [r4, #16]
 8015814:	f8cd 8000 	str.w	r8, [sp]
 8015818:	463b      	mov	r3, r7
 801581a:	aa03      	add	r2, sp, #12
 801581c:	4621      	mov	r1, r4
 801581e:	4630      	mov	r0, r6
 8015820:	f7ff fef6 	bl	8015610 <_printf_common>
 8015824:	3001      	adds	r0, #1
 8015826:	d14d      	bne.n	80158c4 <_printf_i+0x1c8>
 8015828:	f04f 30ff 	mov.w	r0, #4294967295
 801582c:	b005      	add	sp, #20
 801582e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015832:	4839      	ldr	r0, [pc, #228]	; (8015918 <_printf_i+0x21c>)
 8015834:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015838:	6813      	ldr	r3, [r2, #0]
 801583a:	6821      	ldr	r1, [r4, #0]
 801583c:	1d1d      	adds	r5, r3, #4
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	6015      	str	r5, [r2, #0]
 8015842:	060a      	lsls	r2, r1, #24
 8015844:	d50b      	bpl.n	801585e <_printf_i+0x162>
 8015846:	07ca      	lsls	r2, r1, #31
 8015848:	bf44      	itt	mi
 801584a:	f041 0120 	orrmi.w	r1, r1, #32
 801584e:	6021      	strmi	r1, [r4, #0]
 8015850:	b91b      	cbnz	r3, 801585a <_printf_i+0x15e>
 8015852:	6822      	ldr	r2, [r4, #0]
 8015854:	f022 0220 	bic.w	r2, r2, #32
 8015858:	6022      	str	r2, [r4, #0]
 801585a:	2210      	movs	r2, #16
 801585c:	e7b7      	b.n	80157ce <_printf_i+0xd2>
 801585e:	064d      	lsls	r5, r1, #25
 8015860:	bf48      	it	mi
 8015862:	b29b      	uxthmi	r3, r3
 8015864:	e7ef      	b.n	8015846 <_printf_i+0x14a>
 8015866:	4665      	mov	r5, ip
 8015868:	fbb3 f1f2 	udiv	r1, r3, r2
 801586c:	fb02 3311 	mls	r3, r2, r1, r3
 8015870:	5cc3      	ldrb	r3, [r0, r3]
 8015872:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015876:	460b      	mov	r3, r1
 8015878:	2900      	cmp	r1, #0
 801587a:	d1f5      	bne.n	8015868 <_printf_i+0x16c>
 801587c:	e7b9      	b.n	80157f2 <_printf_i+0xf6>
 801587e:	6813      	ldr	r3, [r2, #0]
 8015880:	6825      	ldr	r5, [r4, #0]
 8015882:	6961      	ldr	r1, [r4, #20]
 8015884:	1d18      	adds	r0, r3, #4
 8015886:	6010      	str	r0, [r2, #0]
 8015888:	0628      	lsls	r0, r5, #24
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	d501      	bpl.n	8015892 <_printf_i+0x196>
 801588e:	6019      	str	r1, [r3, #0]
 8015890:	e002      	b.n	8015898 <_printf_i+0x19c>
 8015892:	066a      	lsls	r2, r5, #25
 8015894:	d5fb      	bpl.n	801588e <_printf_i+0x192>
 8015896:	8019      	strh	r1, [r3, #0]
 8015898:	2300      	movs	r3, #0
 801589a:	6123      	str	r3, [r4, #16]
 801589c:	4665      	mov	r5, ip
 801589e:	e7b9      	b.n	8015814 <_printf_i+0x118>
 80158a0:	6813      	ldr	r3, [r2, #0]
 80158a2:	1d19      	adds	r1, r3, #4
 80158a4:	6011      	str	r1, [r2, #0]
 80158a6:	681d      	ldr	r5, [r3, #0]
 80158a8:	6862      	ldr	r2, [r4, #4]
 80158aa:	2100      	movs	r1, #0
 80158ac:	4628      	mov	r0, r5
 80158ae:	f7ea fcaf 	bl	8000210 <memchr>
 80158b2:	b108      	cbz	r0, 80158b8 <_printf_i+0x1bc>
 80158b4:	1b40      	subs	r0, r0, r5
 80158b6:	6060      	str	r0, [r4, #4]
 80158b8:	6863      	ldr	r3, [r4, #4]
 80158ba:	6123      	str	r3, [r4, #16]
 80158bc:	2300      	movs	r3, #0
 80158be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80158c2:	e7a7      	b.n	8015814 <_printf_i+0x118>
 80158c4:	6923      	ldr	r3, [r4, #16]
 80158c6:	462a      	mov	r2, r5
 80158c8:	4639      	mov	r1, r7
 80158ca:	4630      	mov	r0, r6
 80158cc:	47c0      	blx	r8
 80158ce:	3001      	adds	r0, #1
 80158d0:	d0aa      	beq.n	8015828 <_printf_i+0x12c>
 80158d2:	6823      	ldr	r3, [r4, #0]
 80158d4:	079b      	lsls	r3, r3, #30
 80158d6:	d413      	bmi.n	8015900 <_printf_i+0x204>
 80158d8:	68e0      	ldr	r0, [r4, #12]
 80158da:	9b03      	ldr	r3, [sp, #12]
 80158dc:	4298      	cmp	r0, r3
 80158de:	bfb8      	it	lt
 80158e0:	4618      	movlt	r0, r3
 80158e2:	e7a3      	b.n	801582c <_printf_i+0x130>
 80158e4:	2301      	movs	r3, #1
 80158e6:	464a      	mov	r2, r9
 80158e8:	4639      	mov	r1, r7
 80158ea:	4630      	mov	r0, r6
 80158ec:	47c0      	blx	r8
 80158ee:	3001      	adds	r0, #1
 80158f0:	d09a      	beq.n	8015828 <_printf_i+0x12c>
 80158f2:	3501      	adds	r5, #1
 80158f4:	68e3      	ldr	r3, [r4, #12]
 80158f6:	9a03      	ldr	r2, [sp, #12]
 80158f8:	1a9b      	subs	r3, r3, r2
 80158fa:	42ab      	cmp	r3, r5
 80158fc:	dcf2      	bgt.n	80158e4 <_printf_i+0x1e8>
 80158fe:	e7eb      	b.n	80158d8 <_printf_i+0x1dc>
 8015900:	2500      	movs	r5, #0
 8015902:	f104 0919 	add.w	r9, r4, #25
 8015906:	e7f5      	b.n	80158f4 <_printf_i+0x1f8>
 8015908:	2b00      	cmp	r3, #0
 801590a:	d1ac      	bne.n	8015866 <_printf_i+0x16a>
 801590c:	7803      	ldrb	r3, [r0, #0]
 801590e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015912:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015916:	e76c      	b.n	80157f2 <_printf_i+0xf6>
 8015918:	08019ce0 	.word	0x08019ce0
 801591c:	08019cf1 	.word	0x08019cf1

08015920 <_scanf_float>:
 8015920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015924:	469a      	mov	sl, r3
 8015926:	688b      	ldr	r3, [r1, #8]
 8015928:	4616      	mov	r6, r2
 801592a:	1e5a      	subs	r2, r3, #1
 801592c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015930:	b087      	sub	sp, #28
 8015932:	bf83      	ittte	hi
 8015934:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015938:	189b      	addhi	r3, r3, r2
 801593a:	9301      	strhi	r3, [sp, #4]
 801593c:	2300      	movls	r3, #0
 801593e:	bf86      	itte	hi
 8015940:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015944:	608b      	strhi	r3, [r1, #8]
 8015946:	9301      	strls	r3, [sp, #4]
 8015948:	680b      	ldr	r3, [r1, #0]
 801594a:	4688      	mov	r8, r1
 801594c:	f04f 0b00 	mov.w	fp, #0
 8015950:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015954:	f848 3b1c 	str.w	r3, [r8], #28
 8015958:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801595c:	4607      	mov	r7, r0
 801595e:	460c      	mov	r4, r1
 8015960:	4645      	mov	r5, r8
 8015962:	465a      	mov	r2, fp
 8015964:	46d9      	mov	r9, fp
 8015966:	f8cd b008 	str.w	fp, [sp, #8]
 801596a:	68a1      	ldr	r1, [r4, #8]
 801596c:	b181      	cbz	r1, 8015990 <_scanf_float+0x70>
 801596e:	6833      	ldr	r3, [r6, #0]
 8015970:	781b      	ldrb	r3, [r3, #0]
 8015972:	2b49      	cmp	r3, #73	; 0x49
 8015974:	d071      	beq.n	8015a5a <_scanf_float+0x13a>
 8015976:	d84d      	bhi.n	8015a14 <_scanf_float+0xf4>
 8015978:	2b39      	cmp	r3, #57	; 0x39
 801597a:	d840      	bhi.n	80159fe <_scanf_float+0xde>
 801597c:	2b31      	cmp	r3, #49	; 0x31
 801597e:	f080 8088 	bcs.w	8015a92 <_scanf_float+0x172>
 8015982:	2b2d      	cmp	r3, #45	; 0x2d
 8015984:	f000 8090 	beq.w	8015aa8 <_scanf_float+0x188>
 8015988:	d815      	bhi.n	80159b6 <_scanf_float+0x96>
 801598a:	2b2b      	cmp	r3, #43	; 0x2b
 801598c:	f000 808c 	beq.w	8015aa8 <_scanf_float+0x188>
 8015990:	f1b9 0f00 	cmp.w	r9, #0
 8015994:	d003      	beq.n	801599e <_scanf_float+0x7e>
 8015996:	6823      	ldr	r3, [r4, #0]
 8015998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801599c:	6023      	str	r3, [r4, #0]
 801599e:	3a01      	subs	r2, #1
 80159a0:	2a01      	cmp	r2, #1
 80159a2:	f200 80ea 	bhi.w	8015b7a <_scanf_float+0x25a>
 80159a6:	4545      	cmp	r5, r8
 80159a8:	f200 80dc 	bhi.w	8015b64 <_scanf_float+0x244>
 80159ac:	2601      	movs	r6, #1
 80159ae:	4630      	mov	r0, r6
 80159b0:	b007      	add	sp, #28
 80159b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159b6:	2b2e      	cmp	r3, #46	; 0x2e
 80159b8:	f000 809f 	beq.w	8015afa <_scanf_float+0x1da>
 80159bc:	2b30      	cmp	r3, #48	; 0x30
 80159be:	d1e7      	bne.n	8015990 <_scanf_float+0x70>
 80159c0:	6820      	ldr	r0, [r4, #0]
 80159c2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80159c6:	d064      	beq.n	8015a92 <_scanf_float+0x172>
 80159c8:	9b01      	ldr	r3, [sp, #4]
 80159ca:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80159ce:	6020      	str	r0, [r4, #0]
 80159d0:	f109 0901 	add.w	r9, r9, #1
 80159d4:	b11b      	cbz	r3, 80159de <_scanf_float+0xbe>
 80159d6:	3b01      	subs	r3, #1
 80159d8:	3101      	adds	r1, #1
 80159da:	9301      	str	r3, [sp, #4]
 80159dc:	60a1      	str	r1, [r4, #8]
 80159de:	68a3      	ldr	r3, [r4, #8]
 80159e0:	3b01      	subs	r3, #1
 80159e2:	60a3      	str	r3, [r4, #8]
 80159e4:	6923      	ldr	r3, [r4, #16]
 80159e6:	3301      	adds	r3, #1
 80159e8:	6123      	str	r3, [r4, #16]
 80159ea:	6873      	ldr	r3, [r6, #4]
 80159ec:	3b01      	subs	r3, #1
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	6073      	str	r3, [r6, #4]
 80159f2:	f340 80ac 	ble.w	8015b4e <_scanf_float+0x22e>
 80159f6:	6833      	ldr	r3, [r6, #0]
 80159f8:	3301      	adds	r3, #1
 80159fa:	6033      	str	r3, [r6, #0]
 80159fc:	e7b5      	b.n	801596a <_scanf_float+0x4a>
 80159fe:	2b45      	cmp	r3, #69	; 0x45
 8015a00:	f000 8085 	beq.w	8015b0e <_scanf_float+0x1ee>
 8015a04:	2b46      	cmp	r3, #70	; 0x46
 8015a06:	d06a      	beq.n	8015ade <_scanf_float+0x1be>
 8015a08:	2b41      	cmp	r3, #65	; 0x41
 8015a0a:	d1c1      	bne.n	8015990 <_scanf_float+0x70>
 8015a0c:	2a01      	cmp	r2, #1
 8015a0e:	d1bf      	bne.n	8015990 <_scanf_float+0x70>
 8015a10:	2202      	movs	r2, #2
 8015a12:	e046      	b.n	8015aa2 <_scanf_float+0x182>
 8015a14:	2b65      	cmp	r3, #101	; 0x65
 8015a16:	d07a      	beq.n	8015b0e <_scanf_float+0x1ee>
 8015a18:	d818      	bhi.n	8015a4c <_scanf_float+0x12c>
 8015a1a:	2b54      	cmp	r3, #84	; 0x54
 8015a1c:	d066      	beq.n	8015aec <_scanf_float+0x1cc>
 8015a1e:	d811      	bhi.n	8015a44 <_scanf_float+0x124>
 8015a20:	2b4e      	cmp	r3, #78	; 0x4e
 8015a22:	d1b5      	bne.n	8015990 <_scanf_float+0x70>
 8015a24:	2a00      	cmp	r2, #0
 8015a26:	d146      	bne.n	8015ab6 <_scanf_float+0x196>
 8015a28:	f1b9 0f00 	cmp.w	r9, #0
 8015a2c:	d145      	bne.n	8015aba <_scanf_float+0x19a>
 8015a2e:	6821      	ldr	r1, [r4, #0]
 8015a30:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015a34:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015a38:	d13f      	bne.n	8015aba <_scanf_float+0x19a>
 8015a3a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015a3e:	6021      	str	r1, [r4, #0]
 8015a40:	2201      	movs	r2, #1
 8015a42:	e02e      	b.n	8015aa2 <_scanf_float+0x182>
 8015a44:	2b59      	cmp	r3, #89	; 0x59
 8015a46:	d01e      	beq.n	8015a86 <_scanf_float+0x166>
 8015a48:	2b61      	cmp	r3, #97	; 0x61
 8015a4a:	e7de      	b.n	8015a0a <_scanf_float+0xea>
 8015a4c:	2b6e      	cmp	r3, #110	; 0x6e
 8015a4e:	d0e9      	beq.n	8015a24 <_scanf_float+0x104>
 8015a50:	d815      	bhi.n	8015a7e <_scanf_float+0x15e>
 8015a52:	2b66      	cmp	r3, #102	; 0x66
 8015a54:	d043      	beq.n	8015ade <_scanf_float+0x1be>
 8015a56:	2b69      	cmp	r3, #105	; 0x69
 8015a58:	d19a      	bne.n	8015990 <_scanf_float+0x70>
 8015a5a:	f1bb 0f00 	cmp.w	fp, #0
 8015a5e:	d138      	bne.n	8015ad2 <_scanf_float+0x1b2>
 8015a60:	f1b9 0f00 	cmp.w	r9, #0
 8015a64:	d197      	bne.n	8015996 <_scanf_float+0x76>
 8015a66:	6821      	ldr	r1, [r4, #0]
 8015a68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015a6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015a70:	d195      	bne.n	801599e <_scanf_float+0x7e>
 8015a72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015a76:	6021      	str	r1, [r4, #0]
 8015a78:	f04f 0b01 	mov.w	fp, #1
 8015a7c:	e011      	b.n	8015aa2 <_scanf_float+0x182>
 8015a7e:	2b74      	cmp	r3, #116	; 0x74
 8015a80:	d034      	beq.n	8015aec <_scanf_float+0x1cc>
 8015a82:	2b79      	cmp	r3, #121	; 0x79
 8015a84:	d184      	bne.n	8015990 <_scanf_float+0x70>
 8015a86:	f1bb 0f07 	cmp.w	fp, #7
 8015a8a:	d181      	bne.n	8015990 <_scanf_float+0x70>
 8015a8c:	f04f 0b08 	mov.w	fp, #8
 8015a90:	e007      	b.n	8015aa2 <_scanf_float+0x182>
 8015a92:	eb12 0f0b 	cmn.w	r2, fp
 8015a96:	f47f af7b 	bne.w	8015990 <_scanf_float+0x70>
 8015a9a:	6821      	ldr	r1, [r4, #0]
 8015a9c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015aa0:	6021      	str	r1, [r4, #0]
 8015aa2:	702b      	strb	r3, [r5, #0]
 8015aa4:	3501      	adds	r5, #1
 8015aa6:	e79a      	b.n	80159de <_scanf_float+0xbe>
 8015aa8:	6821      	ldr	r1, [r4, #0]
 8015aaa:	0608      	lsls	r0, r1, #24
 8015aac:	f57f af70 	bpl.w	8015990 <_scanf_float+0x70>
 8015ab0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015ab4:	e7f4      	b.n	8015aa0 <_scanf_float+0x180>
 8015ab6:	2a02      	cmp	r2, #2
 8015ab8:	d047      	beq.n	8015b4a <_scanf_float+0x22a>
 8015aba:	f1bb 0f01 	cmp.w	fp, #1
 8015abe:	d003      	beq.n	8015ac8 <_scanf_float+0x1a8>
 8015ac0:	f1bb 0f04 	cmp.w	fp, #4
 8015ac4:	f47f af64 	bne.w	8015990 <_scanf_float+0x70>
 8015ac8:	f10b 0b01 	add.w	fp, fp, #1
 8015acc:	fa5f fb8b 	uxtb.w	fp, fp
 8015ad0:	e7e7      	b.n	8015aa2 <_scanf_float+0x182>
 8015ad2:	f1bb 0f03 	cmp.w	fp, #3
 8015ad6:	d0f7      	beq.n	8015ac8 <_scanf_float+0x1a8>
 8015ad8:	f1bb 0f05 	cmp.w	fp, #5
 8015adc:	e7f2      	b.n	8015ac4 <_scanf_float+0x1a4>
 8015ade:	f1bb 0f02 	cmp.w	fp, #2
 8015ae2:	f47f af55 	bne.w	8015990 <_scanf_float+0x70>
 8015ae6:	f04f 0b03 	mov.w	fp, #3
 8015aea:	e7da      	b.n	8015aa2 <_scanf_float+0x182>
 8015aec:	f1bb 0f06 	cmp.w	fp, #6
 8015af0:	f47f af4e 	bne.w	8015990 <_scanf_float+0x70>
 8015af4:	f04f 0b07 	mov.w	fp, #7
 8015af8:	e7d3      	b.n	8015aa2 <_scanf_float+0x182>
 8015afa:	6821      	ldr	r1, [r4, #0]
 8015afc:	0588      	lsls	r0, r1, #22
 8015afe:	f57f af47 	bpl.w	8015990 <_scanf_float+0x70>
 8015b02:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015b06:	6021      	str	r1, [r4, #0]
 8015b08:	f8cd 9008 	str.w	r9, [sp, #8]
 8015b0c:	e7c9      	b.n	8015aa2 <_scanf_float+0x182>
 8015b0e:	6821      	ldr	r1, [r4, #0]
 8015b10:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015b14:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015b18:	d006      	beq.n	8015b28 <_scanf_float+0x208>
 8015b1a:	0548      	lsls	r0, r1, #21
 8015b1c:	f57f af38 	bpl.w	8015990 <_scanf_float+0x70>
 8015b20:	f1b9 0f00 	cmp.w	r9, #0
 8015b24:	f43f af3b 	beq.w	801599e <_scanf_float+0x7e>
 8015b28:	0588      	lsls	r0, r1, #22
 8015b2a:	bf58      	it	pl
 8015b2c:	9802      	ldrpl	r0, [sp, #8]
 8015b2e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015b32:	bf58      	it	pl
 8015b34:	eba9 0000 	subpl.w	r0, r9, r0
 8015b38:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015b3c:	bf58      	it	pl
 8015b3e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015b42:	6021      	str	r1, [r4, #0]
 8015b44:	f04f 0900 	mov.w	r9, #0
 8015b48:	e7ab      	b.n	8015aa2 <_scanf_float+0x182>
 8015b4a:	2203      	movs	r2, #3
 8015b4c:	e7a9      	b.n	8015aa2 <_scanf_float+0x182>
 8015b4e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015b52:	9205      	str	r2, [sp, #20]
 8015b54:	4631      	mov	r1, r6
 8015b56:	4638      	mov	r0, r7
 8015b58:	4798      	blx	r3
 8015b5a:	9a05      	ldr	r2, [sp, #20]
 8015b5c:	2800      	cmp	r0, #0
 8015b5e:	f43f af04 	beq.w	801596a <_scanf_float+0x4a>
 8015b62:	e715      	b.n	8015990 <_scanf_float+0x70>
 8015b64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015b6c:	4632      	mov	r2, r6
 8015b6e:	4638      	mov	r0, r7
 8015b70:	4798      	blx	r3
 8015b72:	6923      	ldr	r3, [r4, #16]
 8015b74:	3b01      	subs	r3, #1
 8015b76:	6123      	str	r3, [r4, #16]
 8015b78:	e715      	b.n	80159a6 <_scanf_float+0x86>
 8015b7a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015b7e:	2b06      	cmp	r3, #6
 8015b80:	d80a      	bhi.n	8015b98 <_scanf_float+0x278>
 8015b82:	f1bb 0f02 	cmp.w	fp, #2
 8015b86:	d968      	bls.n	8015c5a <_scanf_float+0x33a>
 8015b88:	f1ab 0b03 	sub.w	fp, fp, #3
 8015b8c:	fa5f fb8b 	uxtb.w	fp, fp
 8015b90:	eba5 0b0b 	sub.w	fp, r5, fp
 8015b94:	455d      	cmp	r5, fp
 8015b96:	d14b      	bne.n	8015c30 <_scanf_float+0x310>
 8015b98:	6823      	ldr	r3, [r4, #0]
 8015b9a:	05da      	lsls	r2, r3, #23
 8015b9c:	d51f      	bpl.n	8015bde <_scanf_float+0x2be>
 8015b9e:	055b      	lsls	r3, r3, #21
 8015ba0:	d468      	bmi.n	8015c74 <_scanf_float+0x354>
 8015ba2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015ba6:	6923      	ldr	r3, [r4, #16]
 8015ba8:	2965      	cmp	r1, #101	; 0x65
 8015baa:	f103 33ff 	add.w	r3, r3, #4294967295
 8015bae:	f105 3bff 	add.w	fp, r5, #4294967295
 8015bb2:	6123      	str	r3, [r4, #16]
 8015bb4:	d00d      	beq.n	8015bd2 <_scanf_float+0x2b2>
 8015bb6:	2945      	cmp	r1, #69	; 0x45
 8015bb8:	d00b      	beq.n	8015bd2 <_scanf_float+0x2b2>
 8015bba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015bbe:	4632      	mov	r2, r6
 8015bc0:	4638      	mov	r0, r7
 8015bc2:	4798      	blx	r3
 8015bc4:	6923      	ldr	r3, [r4, #16]
 8015bc6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015bca:	3b01      	subs	r3, #1
 8015bcc:	f1a5 0b02 	sub.w	fp, r5, #2
 8015bd0:	6123      	str	r3, [r4, #16]
 8015bd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015bd6:	4632      	mov	r2, r6
 8015bd8:	4638      	mov	r0, r7
 8015bda:	4798      	blx	r3
 8015bdc:	465d      	mov	r5, fp
 8015bde:	6826      	ldr	r6, [r4, #0]
 8015be0:	f016 0610 	ands.w	r6, r6, #16
 8015be4:	d17a      	bne.n	8015cdc <_scanf_float+0x3bc>
 8015be6:	702e      	strb	r6, [r5, #0]
 8015be8:	6823      	ldr	r3, [r4, #0]
 8015bea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015bf2:	d142      	bne.n	8015c7a <_scanf_float+0x35a>
 8015bf4:	9b02      	ldr	r3, [sp, #8]
 8015bf6:	eba9 0303 	sub.w	r3, r9, r3
 8015bfa:	425a      	negs	r2, r3
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d149      	bne.n	8015c94 <_scanf_float+0x374>
 8015c00:	2200      	movs	r2, #0
 8015c02:	4641      	mov	r1, r8
 8015c04:	4638      	mov	r0, r7
 8015c06:	f000 ff0b 	bl	8016a20 <_strtod_r>
 8015c0a:	6825      	ldr	r5, [r4, #0]
 8015c0c:	f8da 3000 	ldr.w	r3, [sl]
 8015c10:	f015 0f02 	tst.w	r5, #2
 8015c14:	f103 0204 	add.w	r2, r3, #4
 8015c18:	ec59 8b10 	vmov	r8, r9, d0
 8015c1c:	f8ca 2000 	str.w	r2, [sl]
 8015c20:	d043      	beq.n	8015caa <_scanf_float+0x38a>
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	e9c3 8900 	strd	r8, r9, [r3]
 8015c28:	68e3      	ldr	r3, [r4, #12]
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	60e3      	str	r3, [r4, #12]
 8015c2e:	e6be      	b.n	80159ae <_scanf_float+0x8e>
 8015c30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c34:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015c38:	4632      	mov	r2, r6
 8015c3a:	4638      	mov	r0, r7
 8015c3c:	4798      	blx	r3
 8015c3e:	6923      	ldr	r3, [r4, #16]
 8015c40:	3b01      	subs	r3, #1
 8015c42:	6123      	str	r3, [r4, #16]
 8015c44:	e7a6      	b.n	8015b94 <_scanf_float+0x274>
 8015c46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c4a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015c4e:	4632      	mov	r2, r6
 8015c50:	4638      	mov	r0, r7
 8015c52:	4798      	blx	r3
 8015c54:	6923      	ldr	r3, [r4, #16]
 8015c56:	3b01      	subs	r3, #1
 8015c58:	6123      	str	r3, [r4, #16]
 8015c5a:	4545      	cmp	r5, r8
 8015c5c:	d8f3      	bhi.n	8015c46 <_scanf_float+0x326>
 8015c5e:	e6a5      	b.n	80159ac <_scanf_float+0x8c>
 8015c60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015c64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015c68:	4632      	mov	r2, r6
 8015c6a:	4638      	mov	r0, r7
 8015c6c:	4798      	blx	r3
 8015c6e:	6923      	ldr	r3, [r4, #16]
 8015c70:	3b01      	subs	r3, #1
 8015c72:	6123      	str	r3, [r4, #16]
 8015c74:	4545      	cmp	r5, r8
 8015c76:	d8f3      	bhi.n	8015c60 <_scanf_float+0x340>
 8015c78:	e698      	b.n	80159ac <_scanf_float+0x8c>
 8015c7a:	9b03      	ldr	r3, [sp, #12]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d0bf      	beq.n	8015c00 <_scanf_float+0x2e0>
 8015c80:	9904      	ldr	r1, [sp, #16]
 8015c82:	230a      	movs	r3, #10
 8015c84:	4632      	mov	r2, r6
 8015c86:	3101      	adds	r1, #1
 8015c88:	4638      	mov	r0, r7
 8015c8a:	f000 ff55 	bl	8016b38 <_strtol_r>
 8015c8e:	9b03      	ldr	r3, [sp, #12]
 8015c90:	9d04      	ldr	r5, [sp, #16]
 8015c92:	1ac2      	subs	r2, r0, r3
 8015c94:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015c98:	429d      	cmp	r5, r3
 8015c9a:	bf28      	it	cs
 8015c9c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015ca0:	490f      	ldr	r1, [pc, #60]	; (8015ce0 <_scanf_float+0x3c0>)
 8015ca2:	4628      	mov	r0, r5
 8015ca4:	f000 f858 	bl	8015d58 <siprintf>
 8015ca8:	e7aa      	b.n	8015c00 <_scanf_float+0x2e0>
 8015caa:	f015 0504 	ands.w	r5, r5, #4
 8015cae:	d1b8      	bne.n	8015c22 <_scanf_float+0x302>
 8015cb0:	681f      	ldr	r7, [r3, #0]
 8015cb2:	ee10 2a10 	vmov	r2, s0
 8015cb6:	464b      	mov	r3, r9
 8015cb8:	ee10 0a10 	vmov	r0, s0
 8015cbc:	4649      	mov	r1, r9
 8015cbe:	f7ea ff4d 	bl	8000b5c <__aeabi_dcmpun>
 8015cc2:	b128      	cbz	r0, 8015cd0 <_scanf_float+0x3b0>
 8015cc4:	4628      	mov	r0, r5
 8015cc6:	f000 f80d 	bl	8015ce4 <nanf>
 8015cca:	ed87 0a00 	vstr	s0, [r7]
 8015cce:	e7ab      	b.n	8015c28 <_scanf_float+0x308>
 8015cd0:	4640      	mov	r0, r8
 8015cd2:	4649      	mov	r1, r9
 8015cd4:	f7ea ffa0 	bl	8000c18 <__aeabi_d2f>
 8015cd8:	6038      	str	r0, [r7, #0]
 8015cda:	e7a5      	b.n	8015c28 <_scanf_float+0x308>
 8015cdc:	2600      	movs	r6, #0
 8015cde:	e666      	b.n	80159ae <_scanf_float+0x8e>
 8015ce0:	08019d02 	.word	0x08019d02

08015ce4 <nanf>:
 8015ce4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015cec <nanf+0x8>
 8015ce8:	4770      	bx	lr
 8015cea:	bf00      	nop
 8015cec:	7fc00000 	.word	0x7fc00000

08015cf0 <sniprintf>:
 8015cf0:	b40c      	push	{r2, r3}
 8015cf2:	b530      	push	{r4, r5, lr}
 8015cf4:	4b17      	ldr	r3, [pc, #92]	; (8015d54 <sniprintf+0x64>)
 8015cf6:	1e0c      	subs	r4, r1, #0
 8015cf8:	b09d      	sub	sp, #116	; 0x74
 8015cfa:	681d      	ldr	r5, [r3, #0]
 8015cfc:	da08      	bge.n	8015d10 <sniprintf+0x20>
 8015cfe:	238b      	movs	r3, #139	; 0x8b
 8015d00:	602b      	str	r3, [r5, #0]
 8015d02:	f04f 30ff 	mov.w	r0, #4294967295
 8015d06:	b01d      	add	sp, #116	; 0x74
 8015d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d0c:	b002      	add	sp, #8
 8015d0e:	4770      	bx	lr
 8015d10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015d14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015d18:	bf14      	ite	ne
 8015d1a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015d1e:	4623      	moveq	r3, r4
 8015d20:	9304      	str	r3, [sp, #16]
 8015d22:	9307      	str	r3, [sp, #28]
 8015d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d28:	9002      	str	r0, [sp, #8]
 8015d2a:	9006      	str	r0, [sp, #24]
 8015d2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015d30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015d32:	ab21      	add	r3, sp, #132	; 0x84
 8015d34:	a902      	add	r1, sp, #8
 8015d36:	4628      	mov	r0, r5
 8015d38:	9301      	str	r3, [sp, #4]
 8015d3a:	f002 fde7 	bl	801890c <_svfiprintf_r>
 8015d3e:	1c43      	adds	r3, r0, #1
 8015d40:	bfbc      	itt	lt
 8015d42:	238b      	movlt	r3, #139	; 0x8b
 8015d44:	602b      	strlt	r3, [r5, #0]
 8015d46:	2c00      	cmp	r4, #0
 8015d48:	d0dd      	beq.n	8015d06 <sniprintf+0x16>
 8015d4a:	9b02      	ldr	r3, [sp, #8]
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	701a      	strb	r2, [r3, #0]
 8015d50:	e7d9      	b.n	8015d06 <sniprintf+0x16>
 8015d52:	bf00      	nop
 8015d54:	2000000c 	.word	0x2000000c

08015d58 <siprintf>:
 8015d58:	b40e      	push	{r1, r2, r3}
 8015d5a:	b500      	push	{lr}
 8015d5c:	b09c      	sub	sp, #112	; 0x70
 8015d5e:	ab1d      	add	r3, sp, #116	; 0x74
 8015d60:	9002      	str	r0, [sp, #8]
 8015d62:	9006      	str	r0, [sp, #24]
 8015d64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015d68:	4809      	ldr	r0, [pc, #36]	; (8015d90 <siprintf+0x38>)
 8015d6a:	9107      	str	r1, [sp, #28]
 8015d6c:	9104      	str	r1, [sp, #16]
 8015d6e:	4909      	ldr	r1, [pc, #36]	; (8015d94 <siprintf+0x3c>)
 8015d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d74:	9105      	str	r1, [sp, #20]
 8015d76:	6800      	ldr	r0, [r0, #0]
 8015d78:	9301      	str	r3, [sp, #4]
 8015d7a:	a902      	add	r1, sp, #8
 8015d7c:	f002 fdc6 	bl	801890c <_svfiprintf_r>
 8015d80:	9b02      	ldr	r3, [sp, #8]
 8015d82:	2200      	movs	r2, #0
 8015d84:	701a      	strb	r2, [r3, #0]
 8015d86:	b01c      	add	sp, #112	; 0x70
 8015d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8015d8c:	b003      	add	sp, #12
 8015d8e:	4770      	bx	lr
 8015d90:	2000000c 	.word	0x2000000c
 8015d94:	ffff0208 	.word	0xffff0208

08015d98 <siscanf>:
 8015d98:	b40e      	push	{r1, r2, r3}
 8015d9a:	b530      	push	{r4, r5, lr}
 8015d9c:	b09c      	sub	sp, #112	; 0x70
 8015d9e:	ac1f      	add	r4, sp, #124	; 0x7c
 8015da0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015da4:	f854 5b04 	ldr.w	r5, [r4], #4
 8015da8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015dac:	9002      	str	r0, [sp, #8]
 8015dae:	9006      	str	r0, [sp, #24]
 8015db0:	f7ea fa26 	bl	8000200 <strlen>
 8015db4:	4b0b      	ldr	r3, [pc, #44]	; (8015de4 <siscanf+0x4c>)
 8015db6:	9003      	str	r0, [sp, #12]
 8015db8:	9007      	str	r0, [sp, #28]
 8015dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8015dbc:	480a      	ldr	r0, [pc, #40]	; (8015de8 <siscanf+0x50>)
 8015dbe:	9401      	str	r4, [sp, #4]
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015dc4:	9314      	str	r3, [sp, #80]	; 0x50
 8015dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015dca:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015dce:	462a      	mov	r2, r5
 8015dd0:	4623      	mov	r3, r4
 8015dd2:	a902      	add	r1, sp, #8
 8015dd4:	6800      	ldr	r0, [r0, #0]
 8015dd6:	f002 feeb 	bl	8018bb0 <__ssvfiscanf_r>
 8015dda:	b01c      	add	sp, #112	; 0x70
 8015ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015de0:	b003      	add	sp, #12
 8015de2:	4770      	bx	lr
 8015de4:	08015ded 	.word	0x08015ded
 8015de8:	2000000c 	.word	0x2000000c

08015dec <__seofread>:
 8015dec:	2000      	movs	r0, #0
 8015dee:	4770      	bx	lr

08015df0 <strcpy>:
 8015df0:	4603      	mov	r3, r0
 8015df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015df6:	f803 2b01 	strb.w	r2, [r3], #1
 8015dfa:	2a00      	cmp	r2, #0
 8015dfc:	d1f9      	bne.n	8015df2 <strcpy+0x2>
 8015dfe:	4770      	bx	lr

08015e00 <sulp>:
 8015e00:	b570      	push	{r4, r5, r6, lr}
 8015e02:	4604      	mov	r4, r0
 8015e04:	460d      	mov	r5, r1
 8015e06:	ec45 4b10 	vmov	d0, r4, r5
 8015e0a:	4616      	mov	r6, r2
 8015e0c:	f002 fb3a 	bl	8018484 <__ulp>
 8015e10:	ec51 0b10 	vmov	r0, r1, d0
 8015e14:	b17e      	cbz	r6, 8015e36 <sulp+0x36>
 8015e16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015e1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	dd09      	ble.n	8015e36 <sulp+0x36>
 8015e22:	051b      	lsls	r3, r3, #20
 8015e24:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015e28:	2400      	movs	r4, #0
 8015e2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015e2e:	4622      	mov	r2, r4
 8015e30:	462b      	mov	r3, r5
 8015e32:	f7ea fbf9 	bl	8000628 <__aeabi_dmul>
 8015e36:	bd70      	pop	{r4, r5, r6, pc}

08015e38 <_strtod_l>:
 8015e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e3c:	461f      	mov	r7, r3
 8015e3e:	b0a1      	sub	sp, #132	; 0x84
 8015e40:	2300      	movs	r3, #0
 8015e42:	4681      	mov	r9, r0
 8015e44:	4638      	mov	r0, r7
 8015e46:	460e      	mov	r6, r1
 8015e48:	9217      	str	r2, [sp, #92]	; 0x5c
 8015e4a:	931c      	str	r3, [sp, #112]	; 0x70
 8015e4c:	f002 f824 	bl	8017e98 <__localeconv_l>
 8015e50:	4680      	mov	r8, r0
 8015e52:	6800      	ldr	r0, [r0, #0]
 8015e54:	f7ea f9d4 	bl	8000200 <strlen>
 8015e58:	f04f 0a00 	mov.w	sl, #0
 8015e5c:	4604      	mov	r4, r0
 8015e5e:	f04f 0b00 	mov.w	fp, #0
 8015e62:	961b      	str	r6, [sp, #108]	; 0x6c
 8015e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015e66:	781a      	ldrb	r2, [r3, #0]
 8015e68:	2a0d      	cmp	r2, #13
 8015e6a:	d832      	bhi.n	8015ed2 <_strtod_l+0x9a>
 8015e6c:	2a09      	cmp	r2, #9
 8015e6e:	d236      	bcs.n	8015ede <_strtod_l+0xa6>
 8015e70:	2a00      	cmp	r2, #0
 8015e72:	d03e      	beq.n	8015ef2 <_strtod_l+0xba>
 8015e74:	2300      	movs	r3, #0
 8015e76:	930d      	str	r3, [sp, #52]	; 0x34
 8015e78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015e7a:	782b      	ldrb	r3, [r5, #0]
 8015e7c:	2b30      	cmp	r3, #48	; 0x30
 8015e7e:	f040 80ac 	bne.w	8015fda <_strtod_l+0x1a2>
 8015e82:	786b      	ldrb	r3, [r5, #1]
 8015e84:	2b58      	cmp	r3, #88	; 0x58
 8015e86:	d001      	beq.n	8015e8c <_strtod_l+0x54>
 8015e88:	2b78      	cmp	r3, #120	; 0x78
 8015e8a:	d167      	bne.n	8015f5c <_strtod_l+0x124>
 8015e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e8e:	9301      	str	r3, [sp, #4]
 8015e90:	ab1c      	add	r3, sp, #112	; 0x70
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	9702      	str	r7, [sp, #8]
 8015e96:	ab1d      	add	r3, sp, #116	; 0x74
 8015e98:	4a88      	ldr	r2, [pc, #544]	; (80160bc <_strtod_l+0x284>)
 8015e9a:	a91b      	add	r1, sp, #108	; 0x6c
 8015e9c:	4648      	mov	r0, r9
 8015e9e:	f001 fd12 	bl	80178c6 <__gethex>
 8015ea2:	f010 0407 	ands.w	r4, r0, #7
 8015ea6:	4606      	mov	r6, r0
 8015ea8:	d005      	beq.n	8015eb6 <_strtod_l+0x7e>
 8015eaa:	2c06      	cmp	r4, #6
 8015eac:	d12b      	bne.n	8015f06 <_strtod_l+0xce>
 8015eae:	3501      	adds	r5, #1
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	951b      	str	r5, [sp, #108]	; 0x6c
 8015eb4:	930d      	str	r3, [sp, #52]	; 0x34
 8015eb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	f040 859a 	bne.w	80169f2 <_strtod_l+0xbba>
 8015ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ec0:	b1e3      	cbz	r3, 8015efc <_strtod_l+0xc4>
 8015ec2:	4652      	mov	r2, sl
 8015ec4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015ec8:	ec43 2b10 	vmov	d0, r2, r3
 8015ecc:	b021      	add	sp, #132	; 0x84
 8015ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ed2:	2a2b      	cmp	r2, #43	; 0x2b
 8015ed4:	d015      	beq.n	8015f02 <_strtod_l+0xca>
 8015ed6:	2a2d      	cmp	r2, #45	; 0x2d
 8015ed8:	d004      	beq.n	8015ee4 <_strtod_l+0xac>
 8015eda:	2a20      	cmp	r2, #32
 8015edc:	d1ca      	bne.n	8015e74 <_strtod_l+0x3c>
 8015ede:	3301      	adds	r3, #1
 8015ee0:	931b      	str	r3, [sp, #108]	; 0x6c
 8015ee2:	e7bf      	b.n	8015e64 <_strtod_l+0x2c>
 8015ee4:	2201      	movs	r2, #1
 8015ee6:	920d      	str	r2, [sp, #52]	; 0x34
 8015ee8:	1c5a      	adds	r2, r3, #1
 8015eea:	921b      	str	r2, [sp, #108]	; 0x6c
 8015eec:	785b      	ldrb	r3, [r3, #1]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d1c2      	bne.n	8015e78 <_strtod_l+0x40>
 8015ef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ef4:	961b      	str	r6, [sp, #108]	; 0x6c
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	f040 8579 	bne.w	80169ee <_strtod_l+0xbb6>
 8015efc:	4652      	mov	r2, sl
 8015efe:	465b      	mov	r3, fp
 8015f00:	e7e2      	b.n	8015ec8 <_strtod_l+0x90>
 8015f02:	2200      	movs	r2, #0
 8015f04:	e7ef      	b.n	8015ee6 <_strtod_l+0xae>
 8015f06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015f08:	b13a      	cbz	r2, 8015f1a <_strtod_l+0xe2>
 8015f0a:	2135      	movs	r1, #53	; 0x35
 8015f0c:	a81e      	add	r0, sp, #120	; 0x78
 8015f0e:	f002 fbb1 	bl	8018674 <__copybits>
 8015f12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f14:	4648      	mov	r0, r9
 8015f16:	f002 f81d 	bl	8017f54 <_Bfree>
 8015f1a:	3c01      	subs	r4, #1
 8015f1c:	2c04      	cmp	r4, #4
 8015f1e:	d806      	bhi.n	8015f2e <_strtod_l+0xf6>
 8015f20:	e8df f004 	tbb	[pc, r4]
 8015f24:	1714030a 	.word	0x1714030a
 8015f28:	0a          	.byte	0x0a
 8015f29:	00          	.byte	0x00
 8015f2a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015f2e:	0730      	lsls	r0, r6, #28
 8015f30:	d5c1      	bpl.n	8015eb6 <_strtod_l+0x7e>
 8015f32:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015f36:	e7be      	b.n	8015eb6 <_strtod_l+0x7e>
 8015f38:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015f3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015f3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015f42:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015f46:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015f4a:	e7f0      	b.n	8015f2e <_strtod_l+0xf6>
 8015f4c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80160c0 <_strtod_l+0x288>
 8015f50:	e7ed      	b.n	8015f2e <_strtod_l+0xf6>
 8015f52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015f56:	f04f 3aff 	mov.w	sl, #4294967295
 8015f5a:	e7e8      	b.n	8015f2e <_strtod_l+0xf6>
 8015f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f5e:	1c5a      	adds	r2, r3, #1
 8015f60:	921b      	str	r2, [sp, #108]	; 0x6c
 8015f62:	785b      	ldrb	r3, [r3, #1]
 8015f64:	2b30      	cmp	r3, #48	; 0x30
 8015f66:	d0f9      	beq.n	8015f5c <_strtod_l+0x124>
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d0a4      	beq.n	8015eb6 <_strtod_l+0x7e>
 8015f6c:	2301      	movs	r3, #1
 8015f6e:	2500      	movs	r5, #0
 8015f70:	9306      	str	r3, [sp, #24]
 8015f72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f74:	9308      	str	r3, [sp, #32]
 8015f76:	9507      	str	r5, [sp, #28]
 8015f78:	9505      	str	r5, [sp, #20]
 8015f7a:	220a      	movs	r2, #10
 8015f7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015f7e:	7807      	ldrb	r7, [r0, #0]
 8015f80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015f84:	b2d9      	uxtb	r1, r3
 8015f86:	2909      	cmp	r1, #9
 8015f88:	d929      	bls.n	8015fde <_strtod_l+0x1a6>
 8015f8a:	4622      	mov	r2, r4
 8015f8c:	f8d8 1000 	ldr.w	r1, [r8]
 8015f90:	f003 f8f8 	bl	8019184 <strncmp>
 8015f94:	2800      	cmp	r0, #0
 8015f96:	d031      	beq.n	8015ffc <_strtod_l+0x1c4>
 8015f98:	2000      	movs	r0, #0
 8015f9a:	9c05      	ldr	r4, [sp, #20]
 8015f9c:	9004      	str	r0, [sp, #16]
 8015f9e:	463b      	mov	r3, r7
 8015fa0:	4602      	mov	r2, r0
 8015fa2:	2b65      	cmp	r3, #101	; 0x65
 8015fa4:	d001      	beq.n	8015faa <_strtod_l+0x172>
 8015fa6:	2b45      	cmp	r3, #69	; 0x45
 8015fa8:	d114      	bne.n	8015fd4 <_strtod_l+0x19c>
 8015faa:	b924      	cbnz	r4, 8015fb6 <_strtod_l+0x17e>
 8015fac:	b910      	cbnz	r0, 8015fb4 <_strtod_l+0x17c>
 8015fae:	9b06      	ldr	r3, [sp, #24]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d09e      	beq.n	8015ef2 <_strtod_l+0xba>
 8015fb4:	2400      	movs	r4, #0
 8015fb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015fb8:	1c73      	adds	r3, r6, #1
 8015fba:	931b      	str	r3, [sp, #108]	; 0x6c
 8015fbc:	7873      	ldrb	r3, [r6, #1]
 8015fbe:	2b2b      	cmp	r3, #43	; 0x2b
 8015fc0:	d078      	beq.n	80160b4 <_strtod_l+0x27c>
 8015fc2:	2b2d      	cmp	r3, #45	; 0x2d
 8015fc4:	d070      	beq.n	80160a8 <_strtod_l+0x270>
 8015fc6:	f04f 0c00 	mov.w	ip, #0
 8015fca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015fce:	2f09      	cmp	r7, #9
 8015fd0:	d97c      	bls.n	80160cc <_strtod_l+0x294>
 8015fd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8015fd4:	f04f 0e00 	mov.w	lr, #0
 8015fd8:	e09a      	b.n	8016110 <_strtod_l+0x2d8>
 8015fda:	2300      	movs	r3, #0
 8015fdc:	e7c7      	b.n	8015f6e <_strtod_l+0x136>
 8015fde:	9905      	ldr	r1, [sp, #20]
 8015fe0:	2908      	cmp	r1, #8
 8015fe2:	bfdd      	ittte	le
 8015fe4:	9907      	ldrle	r1, [sp, #28]
 8015fe6:	fb02 3301 	mlale	r3, r2, r1, r3
 8015fea:	9307      	strle	r3, [sp, #28]
 8015fec:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015ff0:	9b05      	ldr	r3, [sp, #20]
 8015ff2:	3001      	adds	r0, #1
 8015ff4:	3301      	adds	r3, #1
 8015ff6:	9305      	str	r3, [sp, #20]
 8015ff8:	901b      	str	r0, [sp, #108]	; 0x6c
 8015ffa:	e7bf      	b.n	8015f7c <_strtod_l+0x144>
 8015ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ffe:	191a      	adds	r2, r3, r4
 8016000:	921b      	str	r2, [sp, #108]	; 0x6c
 8016002:	9a05      	ldr	r2, [sp, #20]
 8016004:	5d1b      	ldrb	r3, [r3, r4]
 8016006:	2a00      	cmp	r2, #0
 8016008:	d037      	beq.n	801607a <_strtod_l+0x242>
 801600a:	9c05      	ldr	r4, [sp, #20]
 801600c:	4602      	mov	r2, r0
 801600e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016012:	2909      	cmp	r1, #9
 8016014:	d913      	bls.n	801603e <_strtod_l+0x206>
 8016016:	2101      	movs	r1, #1
 8016018:	9104      	str	r1, [sp, #16]
 801601a:	e7c2      	b.n	8015fa2 <_strtod_l+0x16a>
 801601c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801601e:	1c5a      	adds	r2, r3, #1
 8016020:	921b      	str	r2, [sp, #108]	; 0x6c
 8016022:	785b      	ldrb	r3, [r3, #1]
 8016024:	3001      	adds	r0, #1
 8016026:	2b30      	cmp	r3, #48	; 0x30
 8016028:	d0f8      	beq.n	801601c <_strtod_l+0x1e4>
 801602a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801602e:	2a08      	cmp	r2, #8
 8016030:	f200 84e4 	bhi.w	80169fc <_strtod_l+0xbc4>
 8016034:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016036:	9208      	str	r2, [sp, #32]
 8016038:	4602      	mov	r2, r0
 801603a:	2000      	movs	r0, #0
 801603c:	4604      	mov	r4, r0
 801603e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016042:	f100 0101 	add.w	r1, r0, #1
 8016046:	d012      	beq.n	801606e <_strtod_l+0x236>
 8016048:	440a      	add	r2, r1
 801604a:	eb00 0c04 	add.w	ip, r0, r4
 801604e:	4621      	mov	r1, r4
 8016050:	270a      	movs	r7, #10
 8016052:	458c      	cmp	ip, r1
 8016054:	d113      	bne.n	801607e <_strtod_l+0x246>
 8016056:	1821      	adds	r1, r4, r0
 8016058:	2908      	cmp	r1, #8
 801605a:	f104 0401 	add.w	r4, r4, #1
 801605e:	4404      	add	r4, r0
 8016060:	dc19      	bgt.n	8016096 <_strtod_l+0x25e>
 8016062:	9b07      	ldr	r3, [sp, #28]
 8016064:	210a      	movs	r1, #10
 8016066:	fb01 e303 	mla	r3, r1, r3, lr
 801606a:	9307      	str	r3, [sp, #28]
 801606c:	2100      	movs	r1, #0
 801606e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016070:	1c58      	adds	r0, r3, #1
 8016072:	901b      	str	r0, [sp, #108]	; 0x6c
 8016074:	785b      	ldrb	r3, [r3, #1]
 8016076:	4608      	mov	r0, r1
 8016078:	e7c9      	b.n	801600e <_strtod_l+0x1d6>
 801607a:	9805      	ldr	r0, [sp, #20]
 801607c:	e7d3      	b.n	8016026 <_strtod_l+0x1ee>
 801607e:	2908      	cmp	r1, #8
 8016080:	f101 0101 	add.w	r1, r1, #1
 8016084:	dc03      	bgt.n	801608e <_strtod_l+0x256>
 8016086:	9b07      	ldr	r3, [sp, #28]
 8016088:	437b      	muls	r3, r7
 801608a:	9307      	str	r3, [sp, #28]
 801608c:	e7e1      	b.n	8016052 <_strtod_l+0x21a>
 801608e:	2910      	cmp	r1, #16
 8016090:	bfd8      	it	le
 8016092:	437d      	mulle	r5, r7
 8016094:	e7dd      	b.n	8016052 <_strtod_l+0x21a>
 8016096:	2c10      	cmp	r4, #16
 8016098:	bfdc      	itt	le
 801609a:	210a      	movle	r1, #10
 801609c:	fb01 e505 	mlale	r5, r1, r5, lr
 80160a0:	e7e4      	b.n	801606c <_strtod_l+0x234>
 80160a2:	2301      	movs	r3, #1
 80160a4:	9304      	str	r3, [sp, #16]
 80160a6:	e781      	b.n	8015fac <_strtod_l+0x174>
 80160a8:	f04f 0c01 	mov.w	ip, #1
 80160ac:	1cb3      	adds	r3, r6, #2
 80160ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80160b0:	78b3      	ldrb	r3, [r6, #2]
 80160b2:	e78a      	b.n	8015fca <_strtod_l+0x192>
 80160b4:	f04f 0c00 	mov.w	ip, #0
 80160b8:	e7f8      	b.n	80160ac <_strtod_l+0x274>
 80160ba:	bf00      	nop
 80160bc:	08019d08 	.word	0x08019d08
 80160c0:	7ff00000 	.word	0x7ff00000
 80160c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160c6:	1c5f      	adds	r7, r3, #1
 80160c8:	971b      	str	r7, [sp, #108]	; 0x6c
 80160ca:	785b      	ldrb	r3, [r3, #1]
 80160cc:	2b30      	cmp	r3, #48	; 0x30
 80160ce:	d0f9      	beq.n	80160c4 <_strtod_l+0x28c>
 80160d0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80160d4:	2f08      	cmp	r7, #8
 80160d6:	f63f af7d 	bhi.w	8015fd4 <_strtod_l+0x19c>
 80160da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80160de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160e0:	930a      	str	r3, [sp, #40]	; 0x28
 80160e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160e4:	1c5f      	adds	r7, r3, #1
 80160e6:	971b      	str	r7, [sp, #108]	; 0x6c
 80160e8:	785b      	ldrb	r3, [r3, #1]
 80160ea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80160ee:	f1b8 0f09 	cmp.w	r8, #9
 80160f2:	d937      	bls.n	8016164 <_strtod_l+0x32c>
 80160f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80160f6:	1a7f      	subs	r7, r7, r1
 80160f8:	2f08      	cmp	r7, #8
 80160fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80160fe:	dc37      	bgt.n	8016170 <_strtod_l+0x338>
 8016100:	45be      	cmp	lr, r7
 8016102:	bfa8      	it	ge
 8016104:	46be      	movge	lr, r7
 8016106:	f1bc 0f00 	cmp.w	ip, #0
 801610a:	d001      	beq.n	8016110 <_strtod_l+0x2d8>
 801610c:	f1ce 0e00 	rsb	lr, lr, #0
 8016110:	2c00      	cmp	r4, #0
 8016112:	d151      	bne.n	80161b8 <_strtod_l+0x380>
 8016114:	2800      	cmp	r0, #0
 8016116:	f47f aece 	bne.w	8015eb6 <_strtod_l+0x7e>
 801611a:	9a06      	ldr	r2, [sp, #24]
 801611c:	2a00      	cmp	r2, #0
 801611e:	f47f aeca 	bne.w	8015eb6 <_strtod_l+0x7e>
 8016122:	9a04      	ldr	r2, [sp, #16]
 8016124:	2a00      	cmp	r2, #0
 8016126:	f47f aee4 	bne.w	8015ef2 <_strtod_l+0xba>
 801612a:	2b4e      	cmp	r3, #78	; 0x4e
 801612c:	d027      	beq.n	801617e <_strtod_l+0x346>
 801612e:	dc21      	bgt.n	8016174 <_strtod_l+0x33c>
 8016130:	2b49      	cmp	r3, #73	; 0x49
 8016132:	f47f aede 	bne.w	8015ef2 <_strtod_l+0xba>
 8016136:	49a0      	ldr	r1, [pc, #640]	; (80163b8 <_strtod_l+0x580>)
 8016138:	a81b      	add	r0, sp, #108	; 0x6c
 801613a:	f001 fdf7 	bl	8017d2c <__match>
 801613e:	2800      	cmp	r0, #0
 8016140:	f43f aed7 	beq.w	8015ef2 <_strtod_l+0xba>
 8016144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016146:	499d      	ldr	r1, [pc, #628]	; (80163bc <_strtod_l+0x584>)
 8016148:	3b01      	subs	r3, #1
 801614a:	a81b      	add	r0, sp, #108	; 0x6c
 801614c:	931b      	str	r3, [sp, #108]	; 0x6c
 801614e:	f001 fded 	bl	8017d2c <__match>
 8016152:	b910      	cbnz	r0, 801615a <_strtod_l+0x322>
 8016154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016156:	3301      	adds	r3, #1
 8016158:	931b      	str	r3, [sp, #108]	; 0x6c
 801615a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80163d0 <_strtod_l+0x598>
 801615e:	f04f 0a00 	mov.w	sl, #0
 8016162:	e6a8      	b.n	8015eb6 <_strtod_l+0x7e>
 8016164:	210a      	movs	r1, #10
 8016166:	fb01 3e0e 	mla	lr, r1, lr, r3
 801616a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801616e:	e7b8      	b.n	80160e2 <_strtod_l+0x2aa>
 8016170:	46be      	mov	lr, r7
 8016172:	e7c8      	b.n	8016106 <_strtod_l+0x2ce>
 8016174:	2b69      	cmp	r3, #105	; 0x69
 8016176:	d0de      	beq.n	8016136 <_strtod_l+0x2fe>
 8016178:	2b6e      	cmp	r3, #110	; 0x6e
 801617a:	f47f aeba 	bne.w	8015ef2 <_strtod_l+0xba>
 801617e:	4990      	ldr	r1, [pc, #576]	; (80163c0 <_strtod_l+0x588>)
 8016180:	a81b      	add	r0, sp, #108	; 0x6c
 8016182:	f001 fdd3 	bl	8017d2c <__match>
 8016186:	2800      	cmp	r0, #0
 8016188:	f43f aeb3 	beq.w	8015ef2 <_strtod_l+0xba>
 801618c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801618e:	781b      	ldrb	r3, [r3, #0]
 8016190:	2b28      	cmp	r3, #40	; 0x28
 8016192:	d10e      	bne.n	80161b2 <_strtod_l+0x37a>
 8016194:	aa1e      	add	r2, sp, #120	; 0x78
 8016196:	498b      	ldr	r1, [pc, #556]	; (80163c4 <_strtod_l+0x58c>)
 8016198:	a81b      	add	r0, sp, #108	; 0x6c
 801619a:	f001 fddb 	bl	8017d54 <__hexnan>
 801619e:	2805      	cmp	r0, #5
 80161a0:	d107      	bne.n	80161b2 <_strtod_l+0x37a>
 80161a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80161a4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80161a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80161ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80161b0:	e681      	b.n	8015eb6 <_strtod_l+0x7e>
 80161b2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80163d8 <_strtod_l+0x5a0>
 80161b6:	e7d2      	b.n	801615e <_strtod_l+0x326>
 80161b8:	ebae 0302 	sub.w	r3, lr, r2
 80161bc:	9306      	str	r3, [sp, #24]
 80161be:	9b05      	ldr	r3, [sp, #20]
 80161c0:	9807      	ldr	r0, [sp, #28]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	bf08      	it	eq
 80161c6:	4623      	moveq	r3, r4
 80161c8:	2c10      	cmp	r4, #16
 80161ca:	9305      	str	r3, [sp, #20]
 80161cc:	46a0      	mov	r8, r4
 80161ce:	bfa8      	it	ge
 80161d0:	f04f 0810 	movge.w	r8, #16
 80161d4:	f7ea f9ae 	bl	8000534 <__aeabi_ui2d>
 80161d8:	2c09      	cmp	r4, #9
 80161da:	4682      	mov	sl, r0
 80161dc:	468b      	mov	fp, r1
 80161de:	dc13      	bgt.n	8016208 <_strtod_l+0x3d0>
 80161e0:	9b06      	ldr	r3, [sp, #24]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	f43f ae67 	beq.w	8015eb6 <_strtod_l+0x7e>
 80161e8:	9b06      	ldr	r3, [sp, #24]
 80161ea:	dd7a      	ble.n	80162e2 <_strtod_l+0x4aa>
 80161ec:	2b16      	cmp	r3, #22
 80161ee:	dc61      	bgt.n	80162b4 <_strtod_l+0x47c>
 80161f0:	4a75      	ldr	r2, [pc, #468]	; (80163c8 <_strtod_l+0x590>)
 80161f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80161f6:	e9de 0100 	ldrd	r0, r1, [lr]
 80161fa:	4652      	mov	r2, sl
 80161fc:	465b      	mov	r3, fp
 80161fe:	f7ea fa13 	bl	8000628 <__aeabi_dmul>
 8016202:	4682      	mov	sl, r0
 8016204:	468b      	mov	fp, r1
 8016206:	e656      	b.n	8015eb6 <_strtod_l+0x7e>
 8016208:	4b6f      	ldr	r3, [pc, #444]	; (80163c8 <_strtod_l+0x590>)
 801620a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801620e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016212:	f7ea fa09 	bl	8000628 <__aeabi_dmul>
 8016216:	4606      	mov	r6, r0
 8016218:	4628      	mov	r0, r5
 801621a:	460f      	mov	r7, r1
 801621c:	f7ea f98a 	bl	8000534 <__aeabi_ui2d>
 8016220:	4602      	mov	r2, r0
 8016222:	460b      	mov	r3, r1
 8016224:	4630      	mov	r0, r6
 8016226:	4639      	mov	r1, r7
 8016228:	f7ea f848 	bl	80002bc <__adddf3>
 801622c:	2c0f      	cmp	r4, #15
 801622e:	4682      	mov	sl, r0
 8016230:	468b      	mov	fp, r1
 8016232:	ddd5      	ble.n	80161e0 <_strtod_l+0x3a8>
 8016234:	9b06      	ldr	r3, [sp, #24]
 8016236:	eba4 0808 	sub.w	r8, r4, r8
 801623a:	4498      	add	r8, r3
 801623c:	f1b8 0f00 	cmp.w	r8, #0
 8016240:	f340 8096 	ble.w	8016370 <_strtod_l+0x538>
 8016244:	f018 030f 	ands.w	r3, r8, #15
 8016248:	d00a      	beq.n	8016260 <_strtod_l+0x428>
 801624a:	495f      	ldr	r1, [pc, #380]	; (80163c8 <_strtod_l+0x590>)
 801624c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016250:	4652      	mov	r2, sl
 8016252:	465b      	mov	r3, fp
 8016254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016258:	f7ea f9e6 	bl	8000628 <__aeabi_dmul>
 801625c:	4682      	mov	sl, r0
 801625e:	468b      	mov	fp, r1
 8016260:	f038 080f 	bics.w	r8, r8, #15
 8016264:	d073      	beq.n	801634e <_strtod_l+0x516>
 8016266:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801626a:	dd47      	ble.n	80162fc <_strtod_l+0x4c4>
 801626c:	2400      	movs	r4, #0
 801626e:	46a0      	mov	r8, r4
 8016270:	9407      	str	r4, [sp, #28]
 8016272:	9405      	str	r4, [sp, #20]
 8016274:	2322      	movs	r3, #34	; 0x22
 8016276:	f8df b158 	ldr.w	fp, [pc, #344]	; 80163d0 <_strtod_l+0x598>
 801627a:	f8c9 3000 	str.w	r3, [r9]
 801627e:	f04f 0a00 	mov.w	sl, #0
 8016282:	9b07      	ldr	r3, [sp, #28]
 8016284:	2b00      	cmp	r3, #0
 8016286:	f43f ae16 	beq.w	8015eb6 <_strtod_l+0x7e>
 801628a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801628c:	4648      	mov	r0, r9
 801628e:	f001 fe61 	bl	8017f54 <_Bfree>
 8016292:	9905      	ldr	r1, [sp, #20]
 8016294:	4648      	mov	r0, r9
 8016296:	f001 fe5d 	bl	8017f54 <_Bfree>
 801629a:	4641      	mov	r1, r8
 801629c:	4648      	mov	r0, r9
 801629e:	f001 fe59 	bl	8017f54 <_Bfree>
 80162a2:	9907      	ldr	r1, [sp, #28]
 80162a4:	4648      	mov	r0, r9
 80162a6:	f001 fe55 	bl	8017f54 <_Bfree>
 80162aa:	4621      	mov	r1, r4
 80162ac:	4648      	mov	r0, r9
 80162ae:	f001 fe51 	bl	8017f54 <_Bfree>
 80162b2:	e600      	b.n	8015eb6 <_strtod_l+0x7e>
 80162b4:	9a06      	ldr	r2, [sp, #24]
 80162b6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80162ba:	4293      	cmp	r3, r2
 80162bc:	dbba      	blt.n	8016234 <_strtod_l+0x3fc>
 80162be:	4d42      	ldr	r5, [pc, #264]	; (80163c8 <_strtod_l+0x590>)
 80162c0:	f1c4 040f 	rsb	r4, r4, #15
 80162c4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80162c8:	4652      	mov	r2, sl
 80162ca:	465b      	mov	r3, fp
 80162cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162d0:	f7ea f9aa 	bl	8000628 <__aeabi_dmul>
 80162d4:	9b06      	ldr	r3, [sp, #24]
 80162d6:	1b1c      	subs	r4, r3, r4
 80162d8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80162dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80162e0:	e78d      	b.n	80161fe <_strtod_l+0x3c6>
 80162e2:	f113 0f16 	cmn.w	r3, #22
 80162e6:	dba5      	blt.n	8016234 <_strtod_l+0x3fc>
 80162e8:	4a37      	ldr	r2, [pc, #220]	; (80163c8 <_strtod_l+0x590>)
 80162ea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80162ee:	e9d2 2300 	ldrd	r2, r3, [r2]
 80162f2:	4650      	mov	r0, sl
 80162f4:	4659      	mov	r1, fp
 80162f6:	f7ea fac1 	bl	800087c <__aeabi_ddiv>
 80162fa:	e782      	b.n	8016202 <_strtod_l+0x3ca>
 80162fc:	2300      	movs	r3, #0
 80162fe:	4e33      	ldr	r6, [pc, #204]	; (80163cc <_strtod_l+0x594>)
 8016300:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016304:	4650      	mov	r0, sl
 8016306:	4659      	mov	r1, fp
 8016308:	461d      	mov	r5, r3
 801630a:	f1b8 0f01 	cmp.w	r8, #1
 801630e:	dc21      	bgt.n	8016354 <_strtod_l+0x51c>
 8016310:	b10b      	cbz	r3, 8016316 <_strtod_l+0x4de>
 8016312:	4682      	mov	sl, r0
 8016314:	468b      	mov	fp, r1
 8016316:	4b2d      	ldr	r3, [pc, #180]	; (80163cc <_strtod_l+0x594>)
 8016318:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801631c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016320:	4652      	mov	r2, sl
 8016322:	465b      	mov	r3, fp
 8016324:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016328:	f7ea f97e 	bl	8000628 <__aeabi_dmul>
 801632c:	4b28      	ldr	r3, [pc, #160]	; (80163d0 <_strtod_l+0x598>)
 801632e:	460a      	mov	r2, r1
 8016330:	400b      	ands	r3, r1
 8016332:	4928      	ldr	r1, [pc, #160]	; (80163d4 <_strtod_l+0x59c>)
 8016334:	428b      	cmp	r3, r1
 8016336:	4682      	mov	sl, r0
 8016338:	d898      	bhi.n	801626c <_strtod_l+0x434>
 801633a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801633e:	428b      	cmp	r3, r1
 8016340:	bf86      	itte	hi
 8016342:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80163dc <_strtod_l+0x5a4>
 8016346:	f04f 3aff 	movhi.w	sl, #4294967295
 801634a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801634e:	2300      	movs	r3, #0
 8016350:	9304      	str	r3, [sp, #16]
 8016352:	e077      	b.n	8016444 <_strtod_l+0x60c>
 8016354:	f018 0f01 	tst.w	r8, #1
 8016358:	d006      	beq.n	8016368 <_strtod_l+0x530>
 801635a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016362:	f7ea f961 	bl	8000628 <__aeabi_dmul>
 8016366:	2301      	movs	r3, #1
 8016368:	3501      	adds	r5, #1
 801636a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801636e:	e7cc      	b.n	801630a <_strtod_l+0x4d2>
 8016370:	d0ed      	beq.n	801634e <_strtod_l+0x516>
 8016372:	f1c8 0800 	rsb	r8, r8, #0
 8016376:	f018 020f 	ands.w	r2, r8, #15
 801637a:	d00a      	beq.n	8016392 <_strtod_l+0x55a>
 801637c:	4b12      	ldr	r3, [pc, #72]	; (80163c8 <_strtod_l+0x590>)
 801637e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016382:	4650      	mov	r0, sl
 8016384:	4659      	mov	r1, fp
 8016386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801638a:	f7ea fa77 	bl	800087c <__aeabi_ddiv>
 801638e:	4682      	mov	sl, r0
 8016390:	468b      	mov	fp, r1
 8016392:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016396:	d0da      	beq.n	801634e <_strtod_l+0x516>
 8016398:	f1b8 0f1f 	cmp.w	r8, #31
 801639c:	dd20      	ble.n	80163e0 <_strtod_l+0x5a8>
 801639e:	2400      	movs	r4, #0
 80163a0:	46a0      	mov	r8, r4
 80163a2:	9407      	str	r4, [sp, #28]
 80163a4:	9405      	str	r4, [sp, #20]
 80163a6:	2322      	movs	r3, #34	; 0x22
 80163a8:	f04f 0a00 	mov.w	sl, #0
 80163ac:	f04f 0b00 	mov.w	fp, #0
 80163b0:	f8c9 3000 	str.w	r3, [r9]
 80163b4:	e765      	b.n	8016282 <_strtod_l+0x44a>
 80163b6:	bf00      	nop
 80163b8:	08019cd5 	.word	0x08019cd5
 80163bc:	08019d5b 	.word	0x08019d5b
 80163c0:	08019cdd 	.word	0x08019cdd
 80163c4:	08019d1c 	.word	0x08019d1c
 80163c8:	08019e00 	.word	0x08019e00
 80163cc:	08019dd8 	.word	0x08019dd8
 80163d0:	7ff00000 	.word	0x7ff00000
 80163d4:	7ca00000 	.word	0x7ca00000
 80163d8:	fff80000 	.word	0xfff80000
 80163dc:	7fefffff 	.word	0x7fefffff
 80163e0:	f018 0310 	ands.w	r3, r8, #16
 80163e4:	bf18      	it	ne
 80163e6:	236a      	movne	r3, #106	; 0x6a
 80163e8:	4da0      	ldr	r5, [pc, #640]	; (801666c <_strtod_l+0x834>)
 80163ea:	9304      	str	r3, [sp, #16]
 80163ec:	4650      	mov	r0, sl
 80163ee:	4659      	mov	r1, fp
 80163f0:	2300      	movs	r3, #0
 80163f2:	f1b8 0f00 	cmp.w	r8, #0
 80163f6:	f300 810a 	bgt.w	801660e <_strtod_l+0x7d6>
 80163fa:	b10b      	cbz	r3, 8016400 <_strtod_l+0x5c8>
 80163fc:	4682      	mov	sl, r0
 80163fe:	468b      	mov	fp, r1
 8016400:	9b04      	ldr	r3, [sp, #16]
 8016402:	b1bb      	cbz	r3, 8016434 <_strtod_l+0x5fc>
 8016404:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016408:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801640c:	2b00      	cmp	r3, #0
 801640e:	4659      	mov	r1, fp
 8016410:	dd10      	ble.n	8016434 <_strtod_l+0x5fc>
 8016412:	2b1f      	cmp	r3, #31
 8016414:	f340 8107 	ble.w	8016626 <_strtod_l+0x7ee>
 8016418:	2b34      	cmp	r3, #52	; 0x34
 801641a:	bfde      	ittt	le
 801641c:	3b20      	suble	r3, #32
 801641e:	f04f 32ff 	movle.w	r2, #4294967295
 8016422:	fa02 f303 	lslle.w	r3, r2, r3
 8016426:	f04f 0a00 	mov.w	sl, #0
 801642a:	bfcc      	ite	gt
 801642c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016430:	ea03 0b01 	andle.w	fp, r3, r1
 8016434:	2200      	movs	r2, #0
 8016436:	2300      	movs	r3, #0
 8016438:	4650      	mov	r0, sl
 801643a:	4659      	mov	r1, fp
 801643c:	f7ea fb5c 	bl	8000af8 <__aeabi_dcmpeq>
 8016440:	2800      	cmp	r0, #0
 8016442:	d1ac      	bne.n	801639e <_strtod_l+0x566>
 8016444:	9b07      	ldr	r3, [sp, #28]
 8016446:	9300      	str	r3, [sp, #0]
 8016448:	9a05      	ldr	r2, [sp, #20]
 801644a:	9908      	ldr	r1, [sp, #32]
 801644c:	4623      	mov	r3, r4
 801644e:	4648      	mov	r0, r9
 8016450:	f001 fdd2 	bl	8017ff8 <__s2b>
 8016454:	9007      	str	r0, [sp, #28]
 8016456:	2800      	cmp	r0, #0
 8016458:	f43f af08 	beq.w	801626c <_strtod_l+0x434>
 801645c:	9a06      	ldr	r2, [sp, #24]
 801645e:	9b06      	ldr	r3, [sp, #24]
 8016460:	2a00      	cmp	r2, #0
 8016462:	f1c3 0300 	rsb	r3, r3, #0
 8016466:	bfa8      	it	ge
 8016468:	2300      	movge	r3, #0
 801646a:	930e      	str	r3, [sp, #56]	; 0x38
 801646c:	2400      	movs	r4, #0
 801646e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016472:	9316      	str	r3, [sp, #88]	; 0x58
 8016474:	46a0      	mov	r8, r4
 8016476:	9b07      	ldr	r3, [sp, #28]
 8016478:	4648      	mov	r0, r9
 801647a:	6859      	ldr	r1, [r3, #4]
 801647c:	f001 fd36 	bl	8017eec <_Balloc>
 8016480:	9005      	str	r0, [sp, #20]
 8016482:	2800      	cmp	r0, #0
 8016484:	f43f aef6 	beq.w	8016274 <_strtod_l+0x43c>
 8016488:	9b07      	ldr	r3, [sp, #28]
 801648a:	691a      	ldr	r2, [r3, #16]
 801648c:	3202      	adds	r2, #2
 801648e:	f103 010c 	add.w	r1, r3, #12
 8016492:	0092      	lsls	r2, r2, #2
 8016494:	300c      	adds	r0, #12
 8016496:	f7fe fdd3 	bl	8015040 <memcpy>
 801649a:	aa1e      	add	r2, sp, #120	; 0x78
 801649c:	a91d      	add	r1, sp, #116	; 0x74
 801649e:	ec4b ab10 	vmov	d0, sl, fp
 80164a2:	4648      	mov	r0, r9
 80164a4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80164a8:	f002 f862 	bl	8018570 <__d2b>
 80164ac:	901c      	str	r0, [sp, #112]	; 0x70
 80164ae:	2800      	cmp	r0, #0
 80164b0:	f43f aee0 	beq.w	8016274 <_strtod_l+0x43c>
 80164b4:	2101      	movs	r1, #1
 80164b6:	4648      	mov	r0, r9
 80164b8:	f001 fe2a 	bl	8018110 <__i2b>
 80164bc:	4680      	mov	r8, r0
 80164be:	2800      	cmp	r0, #0
 80164c0:	f43f aed8 	beq.w	8016274 <_strtod_l+0x43c>
 80164c4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80164c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80164c8:	2e00      	cmp	r6, #0
 80164ca:	bfab      	itete	ge
 80164cc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80164ce:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80164d0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80164d2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80164d4:	bfac      	ite	ge
 80164d6:	18f7      	addge	r7, r6, r3
 80164d8:	1b9d      	sublt	r5, r3, r6
 80164da:	9b04      	ldr	r3, [sp, #16]
 80164dc:	1af6      	subs	r6, r6, r3
 80164de:	4416      	add	r6, r2
 80164e0:	4b63      	ldr	r3, [pc, #396]	; (8016670 <_strtod_l+0x838>)
 80164e2:	3e01      	subs	r6, #1
 80164e4:	429e      	cmp	r6, r3
 80164e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80164ea:	f280 80af 	bge.w	801664c <_strtod_l+0x814>
 80164ee:	1b9b      	subs	r3, r3, r6
 80164f0:	2b1f      	cmp	r3, #31
 80164f2:	eba2 0203 	sub.w	r2, r2, r3
 80164f6:	f04f 0101 	mov.w	r1, #1
 80164fa:	f300 809b 	bgt.w	8016634 <_strtod_l+0x7fc>
 80164fe:	fa01 f303 	lsl.w	r3, r1, r3
 8016502:	930f      	str	r3, [sp, #60]	; 0x3c
 8016504:	2300      	movs	r3, #0
 8016506:	930a      	str	r3, [sp, #40]	; 0x28
 8016508:	18be      	adds	r6, r7, r2
 801650a:	9b04      	ldr	r3, [sp, #16]
 801650c:	42b7      	cmp	r7, r6
 801650e:	4415      	add	r5, r2
 8016510:	441d      	add	r5, r3
 8016512:	463b      	mov	r3, r7
 8016514:	bfa8      	it	ge
 8016516:	4633      	movge	r3, r6
 8016518:	42ab      	cmp	r3, r5
 801651a:	bfa8      	it	ge
 801651c:	462b      	movge	r3, r5
 801651e:	2b00      	cmp	r3, #0
 8016520:	bfc2      	ittt	gt
 8016522:	1af6      	subgt	r6, r6, r3
 8016524:	1aed      	subgt	r5, r5, r3
 8016526:	1aff      	subgt	r7, r7, r3
 8016528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801652a:	b1bb      	cbz	r3, 801655c <_strtod_l+0x724>
 801652c:	4641      	mov	r1, r8
 801652e:	461a      	mov	r2, r3
 8016530:	4648      	mov	r0, r9
 8016532:	f001 fe8d 	bl	8018250 <__pow5mult>
 8016536:	4680      	mov	r8, r0
 8016538:	2800      	cmp	r0, #0
 801653a:	f43f ae9b 	beq.w	8016274 <_strtod_l+0x43c>
 801653e:	4601      	mov	r1, r0
 8016540:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016542:	4648      	mov	r0, r9
 8016544:	f001 fded 	bl	8018122 <__multiply>
 8016548:	900c      	str	r0, [sp, #48]	; 0x30
 801654a:	2800      	cmp	r0, #0
 801654c:	f43f ae92 	beq.w	8016274 <_strtod_l+0x43c>
 8016550:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016552:	4648      	mov	r0, r9
 8016554:	f001 fcfe 	bl	8017f54 <_Bfree>
 8016558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801655a:	931c      	str	r3, [sp, #112]	; 0x70
 801655c:	2e00      	cmp	r6, #0
 801655e:	dc7a      	bgt.n	8016656 <_strtod_l+0x81e>
 8016560:	9b06      	ldr	r3, [sp, #24]
 8016562:	2b00      	cmp	r3, #0
 8016564:	dd08      	ble.n	8016578 <_strtod_l+0x740>
 8016566:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016568:	9905      	ldr	r1, [sp, #20]
 801656a:	4648      	mov	r0, r9
 801656c:	f001 fe70 	bl	8018250 <__pow5mult>
 8016570:	9005      	str	r0, [sp, #20]
 8016572:	2800      	cmp	r0, #0
 8016574:	f43f ae7e 	beq.w	8016274 <_strtod_l+0x43c>
 8016578:	2d00      	cmp	r5, #0
 801657a:	dd08      	ble.n	801658e <_strtod_l+0x756>
 801657c:	462a      	mov	r2, r5
 801657e:	9905      	ldr	r1, [sp, #20]
 8016580:	4648      	mov	r0, r9
 8016582:	f001 feb3 	bl	80182ec <__lshift>
 8016586:	9005      	str	r0, [sp, #20]
 8016588:	2800      	cmp	r0, #0
 801658a:	f43f ae73 	beq.w	8016274 <_strtod_l+0x43c>
 801658e:	2f00      	cmp	r7, #0
 8016590:	dd08      	ble.n	80165a4 <_strtod_l+0x76c>
 8016592:	4641      	mov	r1, r8
 8016594:	463a      	mov	r2, r7
 8016596:	4648      	mov	r0, r9
 8016598:	f001 fea8 	bl	80182ec <__lshift>
 801659c:	4680      	mov	r8, r0
 801659e:	2800      	cmp	r0, #0
 80165a0:	f43f ae68 	beq.w	8016274 <_strtod_l+0x43c>
 80165a4:	9a05      	ldr	r2, [sp, #20]
 80165a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80165a8:	4648      	mov	r0, r9
 80165aa:	f001 ff0d 	bl	80183c8 <__mdiff>
 80165ae:	4604      	mov	r4, r0
 80165b0:	2800      	cmp	r0, #0
 80165b2:	f43f ae5f 	beq.w	8016274 <_strtod_l+0x43c>
 80165b6:	68c3      	ldr	r3, [r0, #12]
 80165b8:	930c      	str	r3, [sp, #48]	; 0x30
 80165ba:	2300      	movs	r3, #0
 80165bc:	60c3      	str	r3, [r0, #12]
 80165be:	4641      	mov	r1, r8
 80165c0:	f001 fee8 	bl	8018394 <__mcmp>
 80165c4:	2800      	cmp	r0, #0
 80165c6:	da55      	bge.n	8016674 <_strtod_l+0x83c>
 80165c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80165ca:	b9e3      	cbnz	r3, 8016606 <_strtod_l+0x7ce>
 80165cc:	f1ba 0f00 	cmp.w	sl, #0
 80165d0:	d119      	bne.n	8016606 <_strtod_l+0x7ce>
 80165d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80165d6:	b9b3      	cbnz	r3, 8016606 <_strtod_l+0x7ce>
 80165d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80165dc:	0d1b      	lsrs	r3, r3, #20
 80165de:	051b      	lsls	r3, r3, #20
 80165e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80165e4:	d90f      	bls.n	8016606 <_strtod_l+0x7ce>
 80165e6:	6963      	ldr	r3, [r4, #20]
 80165e8:	b913      	cbnz	r3, 80165f0 <_strtod_l+0x7b8>
 80165ea:	6923      	ldr	r3, [r4, #16]
 80165ec:	2b01      	cmp	r3, #1
 80165ee:	dd0a      	ble.n	8016606 <_strtod_l+0x7ce>
 80165f0:	4621      	mov	r1, r4
 80165f2:	2201      	movs	r2, #1
 80165f4:	4648      	mov	r0, r9
 80165f6:	f001 fe79 	bl	80182ec <__lshift>
 80165fa:	4641      	mov	r1, r8
 80165fc:	4604      	mov	r4, r0
 80165fe:	f001 fec9 	bl	8018394 <__mcmp>
 8016602:	2800      	cmp	r0, #0
 8016604:	dc67      	bgt.n	80166d6 <_strtod_l+0x89e>
 8016606:	9b04      	ldr	r3, [sp, #16]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d171      	bne.n	80166f0 <_strtod_l+0x8b8>
 801660c:	e63d      	b.n	801628a <_strtod_l+0x452>
 801660e:	f018 0f01 	tst.w	r8, #1
 8016612:	d004      	beq.n	801661e <_strtod_l+0x7e6>
 8016614:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016618:	f7ea f806 	bl	8000628 <__aeabi_dmul>
 801661c:	2301      	movs	r3, #1
 801661e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016622:	3508      	adds	r5, #8
 8016624:	e6e5      	b.n	80163f2 <_strtod_l+0x5ba>
 8016626:	f04f 32ff 	mov.w	r2, #4294967295
 801662a:	fa02 f303 	lsl.w	r3, r2, r3
 801662e:	ea03 0a0a 	and.w	sl, r3, sl
 8016632:	e6ff      	b.n	8016434 <_strtod_l+0x5fc>
 8016634:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016638:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801663c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016640:	36e2      	adds	r6, #226	; 0xe2
 8016642:	fa01 f306 	lsl.w	r3, r1, r6
 8016646:	930a      	str	r3, [sp, #40]	; 0x28
 8016648:	910f      	str	r1, [sp, #60]	; 0x3c
 801664a:	e75d      	b.n	8016508 <_strtod_l+0x6d0>
 801664c:	2300      	movs	r3, #0
 801664e:	930a      	str	r3, [sp, #40]	; 0x28
 8016650:	2301      	movs	r3, #1
 8016652:	930f      	str	r3, [sp, #60]	; 0x3c
 8016654:	e758      	b.n	8016508 <_strtod_l+0x6d0>
 8016656:	4632      	mov	r2, r6
 8016658:	991c      	ldr	r1, [sp, #112]	; 0x70
 801665a:	4648      	mov	r0, r9
 801665c:	f001 fe46 	bl	80182ec <__lshift>
 8016660:	901c      	str	r0, [sp, #112]	; 0x70
 8016662:	2800      	cmp	r0, #0
 8016664:	f47f af7c 	bne.w	8016560 <_strtod_l+0x728>
 8016668:	e604      	b.n	8016274 <_strtod_l+0x43c>
 801666a:	bf00      	nop
 801666c:	08019d30 	.word	0x08019d30
 8016670:	fffffc02 	.word	0xfffffc02
 8016674:	465d      	mov	r5, fp
 8016676:	f040 8086 	bne.w	8016786 <_strtod_l+0x94e>
 801667a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801667c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016680:	b32a      	cbz	r2, 80166ce <_strtod_l+0x896>
 8016682:	4aaf      	ldr	r2, [pc, #700]	; (8016940 <_strtod_l+0xb08>)
 8016684:	4293      	cmp	r3, r2
 8016686:	d153      	bne.n	8016730 <_strtod_l+0x8f8>
 8016688:	9b04      	ldr	r3, [sp, #16]
 801668a:	4650      	mov	r0, sl
 801668c:	b1d3      	cbz	r3, 80166c4 <_strtod_l+0x88c>
 801668e:	4aad      	ldr	r2, [pc, #692]	; (8016944 <_strtod_l+0xb0c>)
 8016690:	402a      	ands	r2, r5
 8016692:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016696:	f04f 31ff 	mov.w	r1, #4294967295
 801669a:	d816      	bhi.n	80166ca <_strtod_l+0x892>
 801669c:	0d12      	lsrs	r2, r2, #20
 801669e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80166a2:	fa01 f303 	lsl.w	r3, r1, r3
 80166a6:	4298      	cmp	r0, r3
 80166a8:	d142      	bne.n	8016730 <_strtod_l+0x8f8>
 80166aa:	4ba7      	ldr	r3, [pc, #668]	; (8016948 <_strtod_l+0xb10>)
 80166ac:	429d      	cmp	r5, r3
 80166ae:	d102      	bne.n	80166b6 <_strtod_l+0x87e>
 80166b0:	3001      	adds	r0, #1
 80166b2:	f43f addf 	beq.w	8016274 <_strtod_l+0x43c>
 80166b6:	4ba3      	ldr	r3, [pc, #652]	; (8016944 <_strtod_l+0xb0c>)
 80166b8:	402b      	ands	r3, r5
 80166ba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80166be:	f04f 0a00 	mov.w	sl, #0
 80166c2:	e7a0      	b.n	8016606 <_strtod_l+0x7ce>
 80166c4:	f04f 33ff 	mov.w	r3, #4294967295
 80166c8:	e7ed      	b.n	80166a6 <_strtod_l+0x86e>
 80166ca:	460b      	mov	r3, r1
 80166cc:	e7eb      	b.n	80166a6 <_strtod_l+0x86e>
 80166ce:	bb7b      	cbnz	r3, 8016730 <_strtod_l+0x8f8>
 80166d0:	f1ba 0f00 	cmp.w	sl, #0
 80166d4:	d12c      	bne.n	8016730 <_strtod_l+0x8f8>
 80166d6:	9904      	ldr	r1, [sp, #16]
 80166d8:	4a9a      	ldr	r2, [pc, #616]	; (8016944 <_strtod_l+0xb0c>)
 80166da:	465b      	mov	r3, fp
 80166dc:	b1f1      	cbz	r1, 801671c <_strtod_l+0x8e4>
 80166de:	ea02 010b 	and.w	r1, r2, fp
 80166e2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80166e6:	dc19      	bgt.n	801671c <_strtod_l+0x8e4>
 80166e8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80166ec:	f77f ae5b 	ble.w	80163a6 <_strtod_l+0x56e>
 80166f0:	4a96      	ldr	r2, [pc, #600]	; (801694c <_strtod_l+0xb14>)
 80166f2:	2300      	movs	r3, #0
 80166f4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80166f8:	4650      	mov	r0, sl
 80166fa:	4659      	mov	r1, fp
 80166fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016700:	f7e9 ff92 	bl	8000628 <__aeabi_dmul>
 8016704:	4682      	mov	sl, r0
 8016706:	468b      	mov	fp, r1
 8016708:	2900      	cmp	r1, #0
 801670a:	f47f adbe 	bne.w	801628a <_strtod_l+0x452>
 801670e:	2800      	cmp	r0, #0
 8016710:	f47f adbb 	bne.w	801628a <_strtod_l+0x452>
 8016714:	2322      	movs	r3, #34	; 0x22
 8016716:	f8c9 3000 	str.w	r3, [r9]
 801671a:	e5b6      	b.n	801628a <_strtod_l+0x452>
 801671c:	4013      	ands	r3, r2
 801671e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016722:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016726:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801672a:	f04f 3aff 	mov.w	sl, #4294967295
 801672e:	e76a      	b.n	8016606 <_strtod_l+0x7ce>
 8016730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016732:	b193      	cbz	r3, 801675a <_strtod_l+0x922>
 8016734:	422b      	tst	r3, r5
 8016736:	f43f af66 	beq.w	8016606 <_strtod_l+0x7ce>
 801673a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801673c:	9a04      	ldr	r2, [sp, #16]
 801673e:	4650      	mov	r0, sl
 8016740:	4659      	mov	r1, fp
 8016742:	b173      	cbz	r3, 8016762 <_strtod_l+0x92a>
 8016744:	f7ff fb5c 	bl	8015e00 <sulp>
 8016748:	4602      	mov	r2, r0
 801674a:	460b      	mov	r3, r1
 801674c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016750:	f7e9 fdb4 	bl	80002bc <__adddf3>
 8016754:	4682      	mov	sl, r0
 8016756:	468b      	mov	fp, r1
 8016758:	e755      	b.n	8016606 <_strtod_l+0x7ce>
 801675a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801675c:	ea13 0f0a 	tst.w	r3, sl
 8016760:	e7e9      	b.n	8016736 <_strtod_l+0x8fe>
 8016762:	f7ff fb4d 	bl	8015e00 <sulp>
 8016766:	4602      	mov	r2, r0
 8016768:	460b      	mov	r3, r1
 801676a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801676e:	f7e9 fda3 	bl	80002b8 <__aeabi_dsub>
 8016772:	2200      	movs	r2, #0
 8016774:	2300      	movs	r3, #0
 8016776:	4682      	mov	sl, r0
 8016778:	468b      	mov	fp, r1
 801677a:	f7ea f9bd 	bl	8000af8 <__aeabi_dcmpeq>
 801677e:	2800      	cmp	r0, #0
 8016780:	f47f ae11 	bne.w	80163a6 <_strtod_l+0x56e>
 8016784:	e73f      	b.n	8016606 <_strtod_l+0x7ce>
 8016786:	4641      	mov	r1, r8
 8016788:	4620      	mov	r0, r4
 801678a:	f001 ff40 	bl	801860e <__ratio>
 801678e:	ec57 6b10 	vmov	r6, r7, d0
 8016792:	2200      	movs	r2, #0
 8016794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016798:	ee10 0a10 	vmov	r0, s0
 801679c:	4639      	mov	r1, r7
 801679e:	f7ea f9bf 	bl	8000b20 <__aeabi_dcmple>
 80167a2:	2800      	cmp	r0, #0
 80167a4:	d077      	beq.n	8016896 <_strtod_l+0xa5e>
 80167a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d04a      	beq.n	8016842 <_strtod_l+0xa0a>
 80167ac:	4b68      	ldr	r3, [pc, #416]	; (8016950 <_strtod_l+0xb18>)
 80167ae:	2200      	movs	r2, #0
 80167b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80167b4:	4f66      	ldr	r7, [pc, #408]	; (8016950 <_strtod_l+0xb18>)
 80167b6:	2600      	movs	r6, #0
 80167b8:	4b62      	ldr	r3, [pc, #392]	; (8016944 <_strtod_l+0xb0c>)
 80167ba:	402b      	ands	r3, r5
 80167bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80167be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80167c0:	4b64      	ldr	r3, [pc, #400]	; (8016954 <_strtod_l+0xb1c>)
 80167c2:	429a      	cmp	r2, r3
 80167c4:	f040 80ce 	bne.w	8016964 <_strtod_l+0xb2c>
 80167c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80167cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80167d0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80167d4:	ec4b ab10 	vmov	d0, sl, fp
 80167d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80167dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80167e0:	f001 fe50 	bl	8018484 <__ulp>
 80167e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80167e8:	ec53 2b10 	vmov	r2, r3, d0
 80167ec:	f7e9 ff1c 	bl	8000628 <__aeabi_dmul>
 80167f0:	4652      	mov	r2, sl
 80167f2:	465b      	mov	r3, fp
 80167f4:	f7e9 fd62 	bl	80002bc <__adddf3>
 80167f8:	460b      	mov	r3, r1
 80167fa:	4952      	ldr	r1, [pc, #328]	; (8016944 <_strtod_l+0xb0c>)
 80167fc:	4a56      	ldr	r2, [pc, #344]	; (8016958 <_strtod_l+0xb20>)
 80167fe:	4019      	ands	r1, r3
 8016800:	4291      	cmp	r1, r2
 8016802:	4682      	mov	sl, r0
 8016804:	d95b      	bls.n	80168be <_strtod_l+0xa86>
 8016806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016808:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801680c:	4293      	cmp	r3, r2
 801680e:	d103      	bne.n	8016818 <_strtod_l+0x9e0>
 8016810:	9b08      	ldr	r3, [sp, #32]
 8016812:	3301      	adds	r3, #1
 8016814:	f43f ad2e 	beq.w	8016274 <_strtod_l+0x43c>
 8016818:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016948 <_strtod_l+0xb10>
 801681c:	f04f 3aff 	mov.w	sl, #4294967295
 8016820:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016822:	4648      	mov	r0, r9
 8016824:	f001 fb96 	bl	8017f54 <_Bfree>
 8016828:	9905      	ldr	r1, [sp, #20]
 801682a:	4648      	mov	r0, r9
 801682c:	f001 fb92 	bl	8017f54 <_Bfree>
 8016830:	4641      	mov	r1, r8
 8016832:	4648      	mov	r0, r9
 8016834:	f001 fb8e 	bl	8017f54 <_Bfree>
 8016838:	4621      	mov	r1, r4
 801683a:	4648      	mov	r0, r9
 801683c:	f001 fb8a 	bl	8017f54 <_Bfree>
 8016840:	e619      	b.n	8016476 <_strtod_l+0x63e>
 8016842:	f1ba 0f00 	cmp.w	sl, #0
 8016846:	d11a      	bne.n	801687e <_strtod_l+0xa46>
 8016848:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801684c:	b9eb      	cbnz	r3, 801688a <_strtod_l+0xa52>
 801684e:	2200      	movs	r2, #0
 8016850:	4b3f      	ldr	r3, [pc, #252]	; (8016950 <_strtod_l+0xb18>)
 8016852:	4630      	mov	r0, r6
 8016854:	4639      	mov	r1, r7
 8016856:	f7ea f959 	bl	8000b0c <__aeabi_dcmplt>
 801685a:	b9c8      	cbnz	r0, 8016890 <_strtod_l+0xa58>
 801685c:	4630      	mov	r0, r6
 801685e:	4639      	mov	r1, r7
 8016860:	2200      	movs	r2, #0
 8016862:	4b3e      	ldr	r3, [pc, #248]	; (801695c <_strtod_l+0xb24>)
 8016864:	f7e9 fee0 	bl	8000628 <__aeabi_dmul>
 8016868:	4606      	mov	r6, r0
 801686a:	460f      	mov	r7, r1
 801686c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016870:	9618      	str	r6, [sp, #96]	; 0x60
 8016872:	9319      	str	r3, [sp, #100]	; 0x64
 8016874:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016878:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801687c:	e79c      	b.n	80167b8 <_strtod_l+0x980>
 801687e:	f1ba 0f01 	cmp.w	sl, #1
 8016882:	d102      	bne.n	801688a <_strtod_l+0xa52>
 8016884:	2d00      	cmp	r5, #0
 8016886:	f43f ad8e 	beq.w	80163a6 <_strtod_l+0x56e>
 801688a:	2200      	movs	r2, #0
 801688c:	4b34      	ldr	r3, [pc, #208]	; (8016960 <_strtod_l+0xb28>)
 801688e:	e78f      	b.n	80167b0 <_strtod_l+0x978>
 8016890:	2600      	movs	r6, #0
 8016892:	4f32      	ldr	r7, [pc, #200]	; (801695c <_strtod_l+0xb24>)
 8016894:	e7ea      	b.n	801686c <_strtod_l+0xa34>
 8016896:	4b31      	ldr	r3, [pc, #196]	; (801695c <_strtod_l+0xb24>)
 8016898:	4630      	mov	r0, r6
 801689a:	4639      	mov	r1, r7
 801689c:	2200      	movs	r2, #0
 801689e:	f7e9 fec3 	bl	8000628 <__aeabi_dmul>
 80168a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168a4:	4606      	mov	r6, r0
 80168a6:	460f      	mov	r7, r1
 80168a8:	b933      	cbnz	r3, 80168b8 <_strtod_l+0xa80>
 80168aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80168ae:	9010      	str	r0, [sp, #64]	; 0x40
 80168b0:	9311      	str	r3, [sp, #68]	; 0x44
 80168b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80168b6:	e7df      	b.n	8016878 <_strtod_l+0xa40>
 80168b8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80168bc:	e7f9      	b.n	80168b2 <_strtod_l+0xa7a>
 80168be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80168c2:	9b04      	ldr	r3, [sp, #16]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d1ab      	bne.n	8016820 <_strtod_l+0x9e8>
 80168c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80168cc:	0d1b      	lsrs	r3, r3, #20
 80168ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80168d0:	051b      	lsls	r3, r3, #20
 80168d2:	429a      	cmp	r2, r3
 80168d4:	465d      	mov	r5, fp
 80168d6:	d1a3      	bne.n	8016820 <_strtod_l+0x9e8>
 80168d8:	4639      	mov	r1, r7
 80168da:	4630      	mov	r0, r6
 80168dc:	f7ea f954 	bl	8000b88 <__aeabi_d2iz>
 80168e0:	f7e9 fe38 	bl	8000554 <__aeabi_i2d>
 80168e4:	460b      	mov	r3, r1
 80168e6:	4602      	mov	r2, r0
 80168e8:	4639      	mov	r1, r7
 80168ea:	4630      	mov	r0, r6
 80168ec:	f7e9 fce4 	bl	80002b8 <__aeabi_dsub>
 80168f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168f2:	4606      	mov	r6, r0
 80168f4:	460f      	mov	r7, r1
 80168f6:	b933      	cbnz	r3, 8016906 <_strtod_l+0xace>
 80168f8:	f1ba 0f00 	cmp.w	sl, #0
 80168fc:	d103      	bne.n	8016906 <_strtod_l+0xace>
 80168fe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016902:	2d00      	cmp	r5, #0
 8016904:	d06d      	beq.n	80169e2 <_strtod_l+0xbaa>
 8016906:	a30a      	add	r3, pc, #40	; (adr r3, 8016930 <_strtod_l+0xaf8>)
 8016908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801690c:	4630      	mov	r0, r6
 801690e:	4639      	mov	r1, r7
 8016910:	f7ea f8fc 	bl	8000b0c <__aeabi_dcmplt>
 8016914:	2800      	cmp	r0, #0
 8016916:	f47f acb8 	bne.w	801628a <_strtod_l+0x452>
 801691a:	a307      	add	r3, pc, #28	; (adr r3, 8016938 <_strtod_l+0xb00>)
 801691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016920:	4630      	mov	r0, r6
 8016922:	4639      	mov	r1, r7
 8016924:	f7ea f910 	bl	8000b48 <__aeabi_dcmpgt>
 8016928:	2800      	cmp	r0, #0
 801692a:	f43f af79 	beq.w	8016820 <_strtod_l+0x9e8>
 801692e:	e4ac      	b.n	801628a <_strtod_l+0x452>
 8016930:	94a03595 	.word	0x94a03595
 8016934:	3fdfffff 	.word	0x3fdfffff
 8016938:	35afe535 	.word	0x35afe535
 801693c:	3fe00000 	.word	0x3fe00000
 8016940:	000fffff 	.word	0x000fffff
 8016944:	7ff00000 	.word	0x7ff00000
 8016948:	7fefffff 	.word	0x7fefffff
 801694c:	39500000 	.word	0x39500000
 8016950:	3ff00000 	.word	0x3ff00000
 8016954:	7fe00000 	.word	0x7fe00000
 8016958:	7c9fffff 	.word	0x7c9fffff
 801695c:	3fe00000 	.word	0x3fe00000
 8016960:	bff00000 	.word	0xbff00000
 8016964:	9b04      	ldr	r3, [sp, #16]
 8016966:	b333      	cbz	r3, 80169b6 <_strtod_l+0xb7e>
 8016968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801696a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801696e:	d822      	bhi.n	80169b6 <_strtod_l+0xb7e>
 8016970:	a327      	add	r3, pc, #156	; (adr r3, 8016a10 <_strtod_l+0xbd8>)
 8016972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016976:	4630      	mov	r0, r6
 8016978:	4639      	mov	r1, r7
 801697a:	f7ea f8d1 	bl	8000b20 <__aeabi_dcmple>
 801697e:	b1a0      	cbz	r0, 80169aa <_strtod_l+0xb72>
 8016980:	4639      	mov	r1, r7
 8016982:	4630      	mov	r0, r6
 8016984:	f7ea f928 	bl	8000bd8 <__aeabi_d2uiz>
 8016988:	2800      	cmp	r0, #0
 801698a:	bf08      	it	eq
 801698c:	2001      	moveq	r0, #1
 801698e:	f7e9 fdd1 	bl	8000534 <__aeabi_ui2d>
 8016992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016994:	4606      	mov	r6, r0
 8016996:	460f      	mov	r7, r1
 8016998:	bb03      	cbnz	r3, 80169dc <_strtod_l+0xba4>
 801699a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801699e:	9012      	str	r0, [sp, #72]	; 0x48
 80169a0:	9313      	str	r3, [sp, #76]	; 0x4c
 80169a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80169a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80169aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169ae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80169b2:	1a9b      	subs	r3, r3, r2
 80169b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80169b6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80169ba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80169be:	f001 fd61 	bl	8018484 <__ulp>
 80169c2:	4650      	mov	r0, sl
 80169c4:	ec53 2b10 	vmov	r2, r3, d0
 80169c8:	4659      	mov	r1, fp
 80169ca:	f7e9 fe2d 	bl	8000628 <__aeabi_dmul>
 80169ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80169d2:	f7e9 fc73 	bl	80002bc <__adddf3>
 80169d6:	4682      	mov	sl, r0
 80169d8:	468b      	mov	fp, r1
 80169da:	e772      	b.n	80168c2 <_strtod_l+0xa8a>
 80169dc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80169e0:	e7df      	b.n	80169a2 <_strtod_l+0xb6a>
 80169e2:	a30d      	add	r3, pc, #52	; (adr r3, 8016a18 <_strtod_l+0xbe0>)
 80169e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169e8:	f7ea f890 	bl	8000b0c <__aeabi_dcmplt>
 80169ec:	e79c      	b.n	8016928 <_strtod_l+0xaf0>
 80169ee:	2300      	movs	r3, #0
 80169f0:	930d      	str	r3, [sp, #52]	; 0x34
 80169f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80169f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169f6:	6013      	str	r3, [r2, #0]
 80169f8:	f7ff ba61 	b.w	8015ebe <_strtod_l+0x86>
 80169fc:	2b65      	cmp	r3, #101	; 0x65
 80169fe:	f04f 0200 	mov.w	r2, #0
 8016a02:	f43f ab4e 	beq.w	80160a2 <_strtod_l+0x26a>
 8016a06:	2101      	movs	r1, #1
 8016a08:	4614      	mov	r4, r2
 8016a0a:	9104      	str	r1, [sp, #16]
 8016a0c:	f7ff bacb 	b.w	8015fa6 <_strtod_l+0x16e>
 8016a10:	ffc00000 	.word	0xffc00000
 8016a14:	41dfffff 	.word	0x41dfffff
 8016a18:	94a03595 	.word	0x94a03595
 8016a1c:	3fcfffff 	.word	0x3fcfffff

08016a20 <_strtod_r>:
 8016a20:	4b05      	ldr	r3, [pc, #20]	; (8016a38 <_strtod_r+0x18>)
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	b410      	push	{r4}
 8016a26:	6a1b      	ldr	r3, [r3, #32]
 8016a28:	4c04      	ldr	r4, [pc, #16]	; (8016a3c <_strtod_r+0x1c>)
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	bf08      	it	eq
 8016a2e:	4623      	moveq	r3, r4
 8016a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a34:	f7ff ba00 	b.w	8015e38 <_strtod_l>
 8016a38:	2000000c 	.word	0x2000000c
 8016a3c:	20000070 	.word	0x20000070

08016a40 <_strtol_l.isra.0>:
 8016a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a44:	4680      	mov	r8, r0
 8016a46:	4689      	mov	r9, r1
 8016a48:	4692      	mov	sl, r2
 8016a4a:	461e      	mov	r6, r3
 8016a4c:	460f      	mov	r7, r1
 8016a4e:	463d      	mov	r5, r7
 8016a50:	9808      	ldr	r0, [sp, #32]
 8016a52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a56:	f001 fa0d 	bl	8017e74 <__locale_ctype_ptr_l>
 8016a5a:	4420      	add	r0, r4
 8016a5c:	7843      	ldrb	r3, [r0, #1]
 8016a5e:	f013 0308 	ands.w	r3, r3, #8
 8016a62:	d132      	bne.n	8016aca <_strtol_l.isra.0+0x8a>
 8016a64:	2c2d      	cmp	r4, #45	; 0x2d
 8016a66:	d132      	bne.n	8016ace <_strtol_l.isra.0+0x8e>
 8016a68:	787c      	ldrb	r4, [r7, #1]
 8016a6a:	1cbd      	adds	r5, r7, #2
 8016a6c:	2201      	movs	r2, #1
 8016a6e:	2e00      	cmp	r6, #0
 8016a70:	d05d      	beq.n	8016b2e <_strtol_l.isra.0+0xee>
 8016a72:	2e10      	cmp	r6, #16
 8016a74:	d109      	bne.n	8016a8a <_strtol_l.isra.0+0x4a>
 8016a76:	2c30      	cmp	r4, #48	; 0x30
 8016a78:	d107      	bne.n	8016a8a <_strtol_l.isra.0+0x4a>
 8016a7a:	782b      	ldrb	r3, [r5, #0]
 8016a7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016a80:	2b58      	cmp	r3, #88	; 0x58
 8016a82:	d14f      	bne.n	8016b24 <_strtol_l.isra.0+0xe4>
 8016a84:	786c      	ldrb	r4, [r5, #1]
 8016a86:	2610      	movs	r6, #16
 8016a88:	3502      	adds	r5, #2
 8016a8a:	2a00      	cmp	r2, #0
 8016a8c:	bf14      	ite	ne
 8016a8e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016a92:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016a96:	2700      	movs	r7, #0
 8016a98:	fbb1 fcf6 	udiv	ip, r1, r6
 8016a9c:	4638      	mov	r0, r7
 8016a9e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016aa2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016aa6:	2b09      	cmp	r3, #9
 8016aa8:	d817      	bhi.n	8016ada <_strtol_l.isra.0+0x9a>
 8016aaa:	461c      	mov	r4, r3
 8016aac:	42a6      	cmp	r6, r4
 8016aae:	dd23      	ble.n	8016af8 <_strtol_l.isra.0+0xb8>
 8016ab0:	1c7b      	adds	r3, r7, #1
 8016ab2:	d007      	beq.n	8016ac4 <_strtol_l.isra.0+0x84>
 8016ab4:	4584      	cmp	ip, r0
 8016ab6:	d31c      	bcc.n	8016af2 <_strtol_l.isra.0+0xb2>
 8016ab8:	d101      	bne.n	8016abe <_strtol_l.isra.0+0x7e>
 8016aba:	45a6      	cmp	lr, r4
 8016abc:	db19      	blt.n	8016af2 <_strtol_l.isra.0+0xb2>
 8016abe:	fb00 4006 	mla	r0, r0, r6, r4
 8016ac2:	2701      	movs	r7, #1
 8016ac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ac8:	e7eb      	b.n	8016aa2 <_strtol_l.isra.0+0x62>
 8016aca:	462f      	mov	r7, r5
 8016acc:	e7bf      	b.n	8016a4e <_strtol_l.isra.0+0xe>
 8016ace:	2c2b      	cmp	r4, #43	; 0x2b
 8016ad0:	bf04      	itt	eq
 8016ad2:	1cbd      	addeq	r5, r7, #2
 8016ad4:	787c      	ldrbeq	r4, [r7, #1]
 8016ad6:	461a      	mov	r2, r3
 8016ad8:	e7c9      	b.n	8016a6e <_strtol_l.isra.0+0x2e>
 8016ada:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016ade:	2b19      	cmp	r3, #25
 8016ae0:	d801      	bhi.n	8016ae6 <_strtol_l.isra.0+0xa6>
 8016ae2:	3c37      	subs	r4, #55	; 0x37
 8016ae4:	e7e2      	b.n	8016aac <_strtol_l.isra.0+0x6c>
 8016ae6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016aea:	2b19      	cmp	r3, #25
 8016aec:	d804      	bhi.n	8016af8 <_strtol_l.isra.0+0xb8>
 8016aee:	3c57      	subs	r4, #87	; 0x57
 8016af0:	e7dc      	b.n	8016aac <_strtol_l.isra.0+0x6c>
 8016af2:	f04f 37ff 	mov.w	r7, #4294967295
 8016af6:	e7e5      	b.n	8016ac4 <_strtol_l.isra.0+0x84>
 8016af8:	1c7b      	adds	r3, r7, #1
 8016afa:	d108      	bne.n	8016b0e <_strtol_l.isra.0+0xce>
 8016afc:	2322      	movs	r3, #34	; 0x22
 8016afe:	f8c8 3000 	str.w	r3, [r8]
 8016b02:	4608      	mov	r0, r1
 8016b04:	f1ba 0f00 	cmp.w	sl, #0
 8016b08:	d107      	bne.n	8016b1a <_strtol_l.isra.0+0xda>
 8016b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b0e:	b102      	cbz	r2, 8016b12 <_strtol_l.isra.0+0xd2>
 8016b10:	4240      	negs	r0, r0
 8016b12:	f1ba 0f00 	cmp.w	sl, #0
 8016b16:	d0f8      	beq.n	8016b0a <_strtol_l.isra.0+0xca>
 8016b18:	b10f      	cbz	r7, 8016b1e <_strtol_l.isra.0+0xde>
 8016b1a:	f105 39ff 	add.w	r9, r5, #4294967295
 8016b1e:	f8ca 9000 	str.w	r9, [sl]
 8016b22:	e7f2      	b.n	8016b0a <_strtol_l.isra.0+0xca>
 8016b24:	2430      	movs	r4, #48	; 0x30
 8016b26:	2e00      	cmp	r6, #0
 8016b28:	d1af      	bne.n	8016a8a <_strtol_l.isra.0+0x4a>
 8016b2a:	2608      	movs	r6, #8
 8016b2c:	e7ad      	b.n	8016a8a <_strtol_l.isra.0+0x4a>
 8016b2e:	2c30      	cmp	r4, #48	; 0x30
 8016b30:	d0a3      	beq.n	8016a7a <_strtol_l.isra.0+0x3a>
 8016b32:	260a      	movs	r6, #10
 8016b34:	e7a9      	b.n	8016a8a <_strtol_l.isra.0+0x4a>
	...

08016b38 <_strtol_r>:
 8016b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b3a:	4c06      	ldr	r4, [pc, #24]	; (8016b54 <_strtol_r+0x1c>)
 8016b3c:	4d06      	ldr	r5, [pc, #24]	; (8016b58 <_strtol_r+0x20>)
 8016b3e:	6824      	ldr	r4, [r4, #0]
 8016b40:	6a24      	ldr	r4, [r4, #32]
 8016b42:	2c00      	cmp	r4, #0
 8016b44:	bf08      	it	eq
 8016b46:	462c      	moveq	r4, r5
 8016b48:	9400      	str	r4, [sp, #0]
 8016b4a:	f7ff ff79 	bl	8016a40 <_strtol_l.isra.0>
 8016b4e:	b003      	add	sp, #12
 8016b50:	bd30      	pop	{r4, r5, pc}
 8016b52:	bf00      	nop
 8016b54:	2000000c 	.word	0x2000000c
 8016b58:	20000070 	.word	0x20000070

08016b5c <_vsiprintf_r>:
 8016b5c:	b500      	push	{lr}
 8016b5e:	b09b      	sub	sp, #108	; 0x6c
 8016b60:	9100      	str	r1, [sp, #0]
 8016b62:	9104      	str	r1, [sp, #16]
 8016b64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016b68:	9105      	str	r1, [sp, #20]
 8016b6a:	9102      	str	r1, [sp, #8]
 8016b6c:	4905      	ldr	r1, [pc, #20]	; (8016b84 <_vsiprintf_r+0x28>)
 8016b6e:	9103      	str	r1, [sp, #12]
 8016b70:	4669      	mov	r1, sp
 8016b72:	f001 fecb 	bl	801890c <_svfiprintf_r>
 8016b76:	9b00      	ldr	r3, [sp, #0]
 8016b78:	2200      	movs	r2, #0
 8016b7a:	701a      	strb	r2, [r3, #0]
 8016b7c:	b01b      	add	sp, #108	; 0x6c
 8016b7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016b82:	bf00      	nop
 8016b84:	ffff0208 	.word	0xffff0208

08016b88 <vsiprintf>:
 8016b88:	4613      	mov	r3, r2
 8016b8a:	460a      	mov	r2, r1
 8016b8c:	4601      	mov	r1, r0
 8016b8e:	4802      	ldr	r0, [pc, #8]	; (8016b98 <vsiprintf+0x10>)
 8016b90:	6800      	ldr	r0, [r0, #0]
 8016b92:	f7ff bfe3 	b.w	8016b5c <_vsiprintf_r>
 8016b96:	bf00      	nop
 8016b98:	2000000c 	.word	0x2000000c

08016b9c <quorem>:
 8016b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba0:	6903      	ldr	r3, [r0, #16]
 8016ba2:	690c      	ldr	r4, [r1, #16]
 8016ba4:	42a3      	cmp	r3, r4
 8016ba6:	4680      	mov	r8, r0
 8016ba8:	f2c0 8082 	blt.w	8016cb0 <quorem+0x114>
 8016bac:	3c01      	subs	r4, #1
 8016bae:	f101 0714 	add.w	r7, r1, #20
 8016bb2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016bb6:	f100 0614 	add.w	r6, r0, #20
 8016bba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016bbe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016bc2:	eb06 030c 	add.w	r3, r6, ip
 8016bc6:	3501      	adds	r5, #1
 8016bc8:	eb07 090c 	add.w	r9, r7, ip
 8016bcc:	9301      	str	r3, [sp, #4]
 8016bce:	fbb0 f5f5 	udiv	r5, r0, r5
 8016bd2:	b395      	cbz	r5, 8016c3a <quorem+0x9e>
 8016bd4:	f04f 0a00 	mov.w	sl, #0
 8016bd8:	4638      	mov	r0, r7
 8016bda:	46b6      	mov	lr, r6
 8016bdc:	46d3      	mov	fp, sl
 8016bde:	f850 2b04 	ldr.w	r2, [r0], #4
 8016be2:	b293      	uxth	r3, r2
 8016be4:	fb05 a303 	mla	r3, r5, r3, sl
 8016be8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016bec:	b29b      	uxth	r3, r3
 8016bee:	ebab 0303 	sub.w	r3, fp, r3
 8016bf2:	0c12      	lsrs	r2, r2, #16
 8016bf4:	f8de b000 	ldr.w	fp, [lr]
 8016bf8:	fb05 a202 	mla	r2, r5, r2, sl
 8016bfc:	fa13 f38b 	uxtah	r3, r3, fp
 8016c00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016c04:	fa1f fb82 	uxth.w	fp, r2
 8016c08:	f8de 2000 	ldr.w	r2, [lr]
 8016c0c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016c10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016c14:	b29b      	uxth	r3, r3
 8016c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016c1a:	4581      	cmp	r9, r0
 8016c1c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016c20:	f84e 3b04 	str.w	r3, [lr], #4
 8016c24:	d2db      	bcs.n	8016bde <quorem+0x42>
 8016c26:	f856 300c 	ldr.w	r3, [r6, ip]
 8016c2a:	b933      	cbnz	r3, 8016c3a <quorem+0x9e>
 8016c2c:	9b01      	ldr	r3, [sp, #4]
 8016c2e:	3b04      	subs	r3, #4
 8016c30:	429e      	cmp	r6, r3
 8016c32:	461a      	mov	r2, r3
 8016c34:	d330      	bcc.n	8016c98 <quorem+0xfc>
 8016c36:	f8c8 4010 	str.w	r4, [r8, #16]
 8016c3a:	4640      	mov	r0, r8
 8016c3c:	f001 fbaa 	bl	8018394 <__mcmp>
 8016c40:	2800      	cmp	r0, #0
 8016c42:	db25      	blt.n	8016c90 <quorem+0xf4>
 8016c44:	3501      	adds	r5, #1
 8016c46:	4630      	mov	r0, r6
 8016c48:	f04f 0c00 	mov.w	ip, #0
 8016c4c:	f857 2b04 	ldr.w	r2, [r7], #4
 8016c50:	f8d0 e000 	ldr.w	lr, [r0]
 8016c54:	b293      	uxth	r3, r2
 8016c56:	ebac 0303 	sub.w	r3, ip, r3
 8016c5a:	0c12      	lsrs	r2, r2, #16
 8016c5c:	fa13 f38e 	uxtah	r3, r3, lr
 8016c60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016c64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016c68:	b29b      	uxth	r3, r3
 8016c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016c6e:	45b9      	cmp	r9, r7
 8016c70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016c74:	f840 3b04 	str.w	r3, [r0], #4
 8016c78:	d2e8      	bcs.n	8016c4c <quorem+0xb0>
 8016c7a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016c7e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016c82:	b92a      	cbnz	r2, 8016c90 <quorem+0xf4>
 8016c84:	3b04      	subs	r3, #4
 8016c86:	429e      	cmp	r6, r3
 8016c88:	461a      	mov	r2, r3
 8016c8a:	d30b      	bcc.n	8016ca4 <quorem+0x108>
 8016c8c:	f8c8 4010 	str.w	r4, [r8, #16]
 8016c90:	4628      	mov	r0, r5
 8016c92:	b003      	add	sp, #12
 8016c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c98:	6812      	ldr	r2, [r2, #0]
 8016c9a:	3b04      	subs	r3, #4
 8016c9c:	2a00      	cmp	r2, #0
 8016c9e:	d1ca      	bne.n	8016c36 <quorem+0x9a>
 8016ca0:	3c01      	subs	r4, #1
 8016ca2:	e7c5      	b.n	8016c30 <quorem+0x94>
 8016ca4:	6812      	ldr	r2, [r2, #0]
 8016ca6:	3b04      	subs	r3, #4
 8016ca8:	2a00      	cmp	r2, #0
 8016caa:	d1ef      	bne.n	8016c8c <quorem+0xf0>
 8016cac:	3c01      	subs	r4, #1
 8016cae:	e7ea      	b.n	8016c86 <quorem+0xea>
 8016cb0:	2000      	movs	r0, #0
 8016cb2:	e7ee      	b.n	8016c92 <quorem+0xf6>
 8016cb4:	0000      	movs	r0, r0
	...

08016cb8 <_dtoa_r>:
 8016cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cbc:	ec57 6b10 	vmov	r6, r7, d0
 8016cc0:	b097      	sub	sp, #92	; 0x5c
 8016cc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016cc4:	9106      	str	r1, [sp, #24]
 8016cc6:	4604      	mov	r4, r0
 8016cc8:	920b      	str	r2, [sp, #44]	; 0x2c
 8016cca:	9312      	str	r3, [sp, #72]	; 0x48
 8016ccc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016cd0:	e9cd 6700 	strd	r6, r7, [sp]
 8016cd4:	b93d      	cbnz	r5, 8016ce6 <_dtoa_r+0x2e>
 8016cd6:	2010      	movs	r0, #16
 8016cd8:	f001 f8ee 	bl	8017eb8 <malloc>
 8016cdc:	6260      	str	r0, [r4, #36]	; 0x24
 8016cde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016ce2:	6005      	str	r5, [r0, #0]
 8016ce4:	60c5      	str	r5, [r0, #12]
 8016ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ce8:	6819      	ldr	r1, [r3, #0]
 8016cea:	b151      	cbz	r1, 8016d02 <_dtoa_r+0x4a>
 8016cec:	685a      	ldr	r2, [r3, #4]
 8016cee:	604a      	str	r2, [r1, #4]
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	4093      	lsls	r3, r2
 8016cf4:	608b      	str	r3, [r1, #8]
 8016cf6:	4620      	mov	r0, r4
 8016cf8:	f001 f92c 	bl	8017f54 <_Bfree>
 8016cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016cfe:	2200      	movs	r2, #0
 8016d00:	601a      	str	r2, [r3, #0]
 8016d02:	1e3b      	subs	r3, r7, #0
 8016d04:	bfbb      	ittet	lt
 8016d06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016d0a:	9301      	strlt	r3, [sp, #4]
 8016d0c:	2300      	movge	r3, #0
 8016d0e:	2201      	movlt	r2, #1
 8016d10:	bfac      	ite	ge
 8016d12:	f8c8 3000 	strge.w	r3, [r8]
 8016d16:	f8c8 2000 	strlt.w	r2, [r8]
 8016d1a:	4baf      	ldr	r3, [pc, #700]	; (8016fd8 <_dtoa_r+0x320>)
 8016d1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016d20:	ea33 0308 	bics.w	r3, r3, r8
 8016d24:	d114      	bne.n	8016d50 <_dtoa_r+0x98>
 8016d26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d28:	f242 730f 	movw	r3, #9999	; 0x270f
 8016d2c:	6013      	str	r3, [r2, #0]
 8016d2e:	9b00      	ldr	r3, [sp, #0]
 8016d30:	b923      	cbnz	r3, 8016d3c <_dtoa_r+0x84>
 8016d32:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016d36:	2800      	cmp	r0, #0
 8016d38:	f000 8542 	beq.w	80177c0 <_dtoa_r+0xb08>
 8016d3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d3e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016fec <_dtoa_r+0x334>
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	f000 8544 	beq.w	80177d0 <_dtoa_r+0xb18>
 8016d48:	f10b 0303 	add.w	r3, fp, #3
 8016d4c:	f000 bd3e 	b.w	80177cc <_dtoa_r+0xb14>
 8016d50:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016d54:	2200      	movs	r2, #0
 8016d56:	2300      	movs	r3, #0
 8016d58:	4630      	mov	r0, r6
 8016d5a:	4639      	mov	r1, r7
 8016d5c:	f7e9 fecc 	bl	8000af8 <__aeabi_dcmpeq>
 8016d60:	4681      	mov	r9, r0
 8016d62:	b168      	cbz	r0, 8016d80 <_dtoa_r+0xc8>
 8016d64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d66:	2301      	movs	r3, #1
 8016d68:	6013      	str	r3, [r2, #0]
 8016d6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	f000 8524 	beq.w	80177ba <_dtoa_r+0xb02>
 8016d72:	4b9a      	ldr	r3, [pc, #616]	; (8016fdc <_dtoa_r+0x324>)
 8016d74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016d76:	f103 3bff 	add.w	fp, r3, #4294967295
 8016d7a:	6013      	str	r3, [r2, #0]
 8016d7c:	f000 bd28 	b.w	80177d0 <_dtoa_r+0xb18>
 8016d80:	aa14      	add	r2, sp, #80	; 0x50
 8016d82:	a915      	add	r1, sp, #84	; 0x54
 8016d84:	ec47 6b10 	vmov	d0, r6, r7
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f001 fbf1 	bl	8018570 <__d2b>
 8016d8e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016d92:	9004      	str	r0, [sp, #16]
 8016d94:	2d00      	cmp	r5, #0
 8016d96:	d07c      	beq.n	8016e92 <_dtoa_r+0x1da>
 8016d98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016d9c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016da0:	46b2      	mov	sl, r6
 8016da2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016da6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016daa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016dae:	2200      	movs	r2, #0
 8016db0:	4b8b      	ldr	r3, [pc, #556]	; (8016fe0 <_dtoa_r+0x328>)
 8016db2:	4650      	mov	r0, sl
 8016db4:	4659      	mov	r1, fp
 8016db6:	f7e9 fa7f 	bl	80002b8 <__aeabi_dsub>
 8016dba:	a381      	add	r3, pc, #516	; (adr r3, 8016fc0 <_dtoa_r+0x308>)
 8016dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dc0:	f7e9 fc32 	bl	8000628 <__aeabi_dmul>
 8016dc4:	a380      	add	r3, pc, #512	; (adr r3, 8016fc8 <_dtoa_r+0x310>)
 8016dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dca:	f7e9 fa77 	bl	80002bc <__adddf3>
 8016dce:	4606      	mov	r6, r0
 8016dd0:	4628      	mov	r0, r5
 8016dd2:	460f      	mov	r7, r1
 8016dd4:	f7e9 fbbe 	bl	8000554 <__aeabi_i2d>
 8016dd8:	a37d      	add	r3, pc, #500	; (adr r3, 8016fd0 <_dtoa_r+0x318>)
 8016dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dde:	f7e9 fc23 	bl	8000628 <__aeabi_dmul>
 8016de2:	4602      	mov	r2, r0
 8016de4:	460b      	mov	r3, r1
 8016de6:	4630      	mov	r0, r6
 8016de8:	4639      	mov	r1, r7
 8016dea:	f7e9 fa67 	bl	80002bc <__adddf3>
 8016dee:	4606      	mov	r6, r0
 8016df0:	460f      	mov	r7, r1
 8016df2:	f7e9 fec9 	bl	8000b88 <__aeabi_d2iz>
 8016df6:	2200      	movs	r2, #0
 8016df8:	4682      	mov	sl, r0
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	4630      	mov	r0, r6
 8016dfe:	4639      	mov	r1, r7
 8016e00:	f7e9 fe84 	bl	8000b0c <__aeabi_dcmplt>
 8016e04:	b148      	cbz	r0, 8016e1a <_dtoa_r+0x162>
 8016e06:	4650      	mov	r0, sl
 8016e08:	f7e9 fba4 	bl	8000554 <__aeabi_i2d>
 8016e0c:	4632      	mov	r2, r6
 8016e0e:	463b      	mov	r3, r7
 8016e10:	f7e9 fe72 	bl	8000af8 <__aeabi_dcmpeq>
 8016e14:	b908      	cbnz	r0, 8016e1a <_dtoa_r+0x162>
 8016e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e1a:	f1ba 0f16 	cmp.w	sl, #22
 8016e1e:	d859      	bhi.n	8016ed4 <_dtoa_r+0x21c>
 8016e20:	4970      	ldr	r1, [pc, #448]	; (8016fe4 <_dtoa_r+0x32c>)
 8016e22:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016e2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e2e:	f7e9 fe8b 	bl	8000b48 <__aeabi_dcmpgt>
 8016e32:	2800      	cmp	r0, #0
 8016e34:	d050      	beq.n	8016ed8 <_dtoa_r+0x220>
 8016e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e40:	1b5d      	subs	r5, r3, r5
 8016e42:	f1b5 0801 	subs.w	r8, r5, #1
 8016e46:	bf49      	itett	mi
 8016e48:	f1c5 0301 	rsbmi	r3, r5, #1
 8016e4c:	2300      	movpl	r3, #0
 8016e4e:	9305      	strmi	r3, [sp, #20]
 8016e50:	f04f 0800 	movmi.w	r8, #0
 8016e54:	bf58      	it	pl
 8016e56:	9305      	strpl	r3, [sp, #20]
 8016e58:	f1ba 0f00 	cmp.w	sl, #0
 8016e5c:	db3e      	blt.n	8016edc <_dtoa_r+0x224>
 8016e5e:	2300      	movs	r3, #0
 8016e60:	44d0      	add	r8, sl
 8016e62:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016e66:	9307      	str	r3, [sp, #28]
 8016e68:	9b06      	ldr	r3, [sp, #24]
 8016e6a:	2b09      	cmp	r3, #9
 8016e6c:	f200 8090 	bhi.w	8016f90 <_dtoa_r+0x2d8>
 8016e70:	2b05      	cmp	r3, #5
 8016e72:	bfc4      	itt	gt
 8016e74:	3b04      	subgt	r3, #4
 8016e76:	9306      	strgt	r3, [sp, #24]
 8016e78:	9b06      	ldr	r3, [sp, #24]
 8016e7a:	f1a3 0302 	sub.w	r3, r3, #2
 8016e7e:	bfcc      	ite	gt
 8016e80:	2500      	movgt	r5, #0
 8016e82:	2501      	movle	r5, #1
 8016e84:	2b03      	cmp	r3, #3
 8016e86:	f200 808f 	bhi.w	8016fa8 <_dtoa_r+0x2f0>
 8016e8a:	e8df f003 	tbb	[pc, r3]
 8016e8e:	7f7d      	.short	0x7f7d
 8016e90:	7131      	.short	0x7131
 8016e92:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016e96:	441d      	add	r5, r3
 8016e98:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016e9c:	2820      	cmp	r0, #32
 8016e9e:	dd13      	ble.n	8016ec8 <_dtoa_r+0x210>
 8016ea0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016ea4:	9b00      	ldr	r3, [sp, #0]
 8016ea6:	fa08 f800 	lsl.w	r8, r8, r0
 8016eaa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016eae:	fa23 f000 	lsr.w	r0, r3, r0
 8016eb2:	ea48 0000 	orr.w	r0, r8, r0
 8016eb6:	f7e9 fb3d 	bl	8000534 <__aeabi_ui2d>
 8016eba:	2301      	movs	r3, #1
 8016ebc:	4682      	mov	sl, r0
 8016ebe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016ec2:	3d01      	subs	r5, #1
 8016ec4:	9313      	str	r3, [sp, #76]	; 0x4c
 8016ec6:	e772      	b.n	8016dae <_dtoa_r+0xf6>
 8016ec8:	9b00      	ldr	r3, [sp, #0]
 8016eca:	f1c0 0020 	rsb	r0, r0, #32
 8016ece:	fa03 f000 	lsl.w	r0, r3, r0
 8016ed2:	e7f0      	b.n	8016eb6 <_dtoa_r+0x1fe>
 8016ed4:	2301      	movs	r3, #1
 8016ed6:	e7b1      	b.n	8016e3c <_dtoa_r+0x184>
 8016ed8:	900f      	str	r0, [sp, #60]	; 0x3c
 8016eda:	e7b0      	b.n	8016e3e <_dtoa_r+0x186>
 8016edc:	9b05      	ldr	r3, [sp, #20]
 8016ede:	eba3 030a 	sub.w	r3, r3, sl
 8016ee2:	9305      	str	r3, [sp, #20]
 8016ee4:	f1ca 0300 	rsb	r3, sl, #0
 8016ee8:	9307      	str	r3, [sp, #28]
 8016eea:	2300      	movs	r3, #0
 8016eec:	930e      	str	r3, [sp, #56]	; 0x38
 8016eee:	e7bb      	b.n	8016e68 <_dtoa_r+0x1b0>
 8016ef0:	2301      	movs	r3, #1
 8016ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8016ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	dd59      	ble.n	8016fae <_dtoa_r+0x2f6>
 8016efa:	9302      	str	r3, [sp, #8]
 8016efc:	4699      	mov	r9, r3
 8016efe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016f00:	2200      	movs	r2, #0
 8016f02:	6072      	str	r2, [r6, #4]
 8016f04:	2204      	movs	r2, #4
 8016f06:	f102 0014 	add.w	r0, r2, #20
 8016f0a:	4298      	cmp	r0, r3
 8016f0c:	6871      	ldr	r1, [r6, #4]
 8016f0e:	d953      	bls.n	8016fb8 <_dtoa_r+0x300>
 8016f10:	4620      	mov	r0, r4
 8016f12:	f000 ffeb 	bl	8017eec <_Balloc>
 8016f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f18:	6030      	str	r0, [r6, #0]
 8016f1a:	f1b9 0f0e 	cmp.w	r9, #14
 8016f1e:	f8d3 b000 	ldr.w	fp, [r3]
 8016f22:	f200 80e6 	bhi.w	80170f2 <_dtoa_r+0x43a>
 8016f26:	2d00      	cmp	r5, #0
 8016f28:	f000 80e3 	beq.w	80170f2 <_dtoa_r+0x43a>
 8016f2c:	ed9d 7b00 	vldr	d7, [sp]
 8016f30:	f1ba 0f00 	cmp.w	sl, #0
 8016f34:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016f38:	dd74      	ble.n	8017024 <_dtoa_r+0x36c>
 8016f3a:	4a2a      	ldr	r2, [pc, #168]	; (8016fe4 <_dtoa_r+0x32c>)
 8016f3c:	f00a 030f 	and.w	r3, sl, #15
 8016f40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016f44:	ed93 7b00 	vldr	d7, [r3]
 8016f48:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016f4c:	06f0      	lsls	r0, r6, #27
 8016f4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016f52:	d565      	bpl.n	8017020 <_dtoa_r+0x368>
 8016f54:	4b24      	ldr	r3, [pc, #144]	; (8016fe8 <_dtoa_r+0x330>)
 8016f56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016f5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016f5e:	f7e9 fc8d 	bl	800087c <__aeabi_ddiv>
 8016f62:	e9cd 0100 	strd	r0, r1, [sp]
 8016f66:	f006 060f 	and.w	r6, r6, #15
 8016f6a:	2503      	movs	r5, #3
 8016f6c:	4f1e      	ldr	r7, [pc, #120]	; (8016fe8 <_dtoa_r+0x330>)
 8016f6e:	e04c      	b.n	801700a <_dtoa_r+0x352>
 8016f70:	2301      	movs	r3, #1
 8016f72:	930a      	str	r3, [sp, #40]	; 0x28
 8016f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f76:	4453      	add	r3, sl
 8016f78:	f103 0901 	add.w	r9, r3, #1
 8016f7c:	9302      	str	r3, [sp, #8]
 8016f7e:	464b      	mov	r3, r9
 8016f80:	2b01      	cmp	r3, #1
 8016f82:	bfb8      	it	lt
 8016f84:	2301      	movlt	r3, #1
 8016f86:	e7ba      	b.n	8016efe <_dtoa_r+0x246>
 8016f88:	2300      	movs	r3, #0
 8016f8a:	e7b2      	b.n	8016ef2 <_dtoa_r+0x23a>
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	e7f0      	b.n	8016f72 <_dtoa_r+0x2ba>
 8016f90:	2501      	movs	r5, #1
 8016f92:	2300      	movs	r3, #0
 8016f94:	9306      	str	r3, [sp, #24]
 8016f96:	950a      	str	r5, [sp, #40]	; 0x28
 8016f98:	f04f 33ff 	mov.w	r3, #4294967295
 8016f9c:	9302      	str	r3, [sp, #8]
 8016f9e:	4699      	mov	r9, r3
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	2312      	movs	r3, #18
 8016fa4:	920b      	str	r2, [sp, #44]	; 0x2c
 8016fa6:	e7aa      	b.n	8016efe <_dtoa_r+0x246>
 8016fa8:	2301      	movs	r3, #1
 8016faa:	930a      	str	r3, [sp, #40]	; 0x28
 8016fac:	e7f4      	b.n	8016f98 <_dtoa_r+0x2e0>
 8016fae:	2301      	movs	r3, #1
 8016fb0:	9302      	str	r3, [sp, #8]
 8016fb2:	4699      	mov	r9, r3
 8016fb4:	461a      	mov	r2, r3
 8016fb6:	e7f5      	b.n	8016fa4 <_dtoa_r+0x2ec>
 8016fb8:	3101      	adds	r1, #1
 8016fba:	6071      	str	r1, [r6, #4]
 8016fbc:	0052      	lsls	r2, r2, #1
 8016fbe:	e7a2      	b.n	8016f06 <_dtoa_r+0x24e>
 8016fc0:	636f4361 	.word	0x636f4361
 8016fc4:	3fd287a7 	.word	0x3fd287a7
 8016fc8:	8b60c8b3 	.word	0x8b60c8b3
 8016fcc:	3fc68a28 	.word	0x3fc68a28
 8016fd0:	509f79fb 	.word	0x509f79fb
 8016fd4:	3fd34413 	.word	0x3fd34413
 8016fd8:	7ff00000 	.word	0x7ff00000
 8016fdc:	08019efc 	.word	0x08019efc
 8016fe0:	3ff80000 	.word	0x3ff80000
 8016fe4:	08019e00 	.word	0x08019e00
 8016fe8:	08019dd8 	.word	0x08019dd8
 8016fec:	08019d61 	.word	0x08019d61
 8016ff0:	07f1      	lsls	r1, r6, #31
 8016ff2:	d508      	bpl.n	8017006 <_dtoa_r+0x34e>
 8016ff4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ffc:	f7e9 fb14 	bl	8000628 <__aeabi_dmul>
 8017000:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017004:	3501      	adds	r5, #1
 8017006:	1076      	asrs	r6, r6, #1
 8017008:	3708      	adds	r7, #8
 801700a:	2e00      	cmp	r6, #0
 801700c:	d1f0      	bne.n	8016ff0 <_dtoa_r+0x338>
 801700e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017012:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017016:	f7e9 fc31 	bl	800087c <__aeabi_ddiv>
 801701a:	e9cd 0100 	strd	r0, r1, [sp]
 801701e:	e01a      	b.n	8017056 <_dtoa_r+0x39e>
 8017020:	2502      	movs	r5, #2
 8017022:	e7a3      	b.n	8016f6c <_dtoa_r+0x2b4>
 8017024:	f000 80a0 	beq.w	8017168 <_dtoa_r+0x4b0>
 8017028:	f1ca 0600 	rsb	r6, sl, #0
 801702c:	4b9f      	ldr	r3, [pc, #636]	; (80172ac <_dtoa_r+0x5f4>)
 801702e:	4fa0      	ldr	r7, [pc, #640]	; (80172b0 <_dtoa_r+0x5f8>)
 8017030:	f006 020f 	and.w	r2, r6, #15
 8017034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801703c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017040:	f7e9 faf2 	bl	8000628 <__aeabi_dmul>
 8017044:	e9cd 0100 	strd	r0, r1, [sp]
 8017048:	1136      	asrs	r6, r6, #4
 801704a:	2300      	movs	r3, #0
 801704c:	2502      	movs	r5, #2
 801704e:	2e00      	cmp	r6, #0
 8017050:	d17f      	bne.n	8017152 <_dtoa_r+0x49a>
 8017052:	2b00      	cmp	r3, #0
 8017054:	d1e1      	bne.n	801701a <_dtoa_r+0x362>
 8017056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017058:	2b00      	cmp	r3, #0
 801705a:	f000 8087 	beq.w	801716c <_dtoa_r+0x4b4>
 801705e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017062:	2200      	movs	r2, #0
 8017064:	4b93      	ldr	r3, [pc, #588]	; (80172b4 <_dtoa_r+0x5fc>)
 8017066:	4630      	mov	r0, r6
 8017068:	4639      	mov	r1, r7
 801706a:	f7e9 fd4f 	bl	8000b0c <__aeabi_dcmplt>
 801706e:	2800      	cmp	r0, #0
 8017070:	d07c      	beq.n	801716c <_dtoa_r+0x4b4>
 8017072:	f1b9 0f00 	cmp.w	r9, #0
 8017076:	d079      	beq.n	801716c <_dtoa_r+0x4b4>
 8017078:	9b02      	ldr	r3, [sp, #8]
 801707a:	2b00      	cmp	r3, #0
 801707c:	dd35      	ble.n	80170ea <_dtoa_r+0x432>
 801707e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017082:	9308      	str	r3, [sp, #32]
 8017084:	4639      	mov	r1, r7
 8017086:	2200      	movs	r2, #0
 8017088:	4b8b      	ldr	r3, [pc, #556]	; (80172b8 <_dtoa_r+0x600>)
 801708a:	4630      	mov	r0, r6
 801708c:	f7e9 facc 	bl	8000628 <__aeabi_dmul>
 8017090:	e9cd 0100 	strd	r0, r1, [sp]
 8017094:	9f02      	ldr	r7, [sp, #8]
 8017096:	3501      	adds	r5, #1
 8017098:	4628      	mov	r0, r5
 801709a:	f7e9 fa5b 	bl	8000554 <__aeabi_i2d>
 801709e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80170a2:	f7e9 fac1 	bl	8000628 <__aeabi_dmul>
 80170a6:	2200      	movs	r2, #0
 80170a8:	4b84      	ldr	r3, [pc, #528]	; (80172bc <_dtoa_r+0x604>)
 80170aa:	f7e9 f907 	bl	80002bc <__adddf3>
 80170ae:	4605      	mov	r5, r0
 80170b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80170b4:	2f00      	cmp	r7, #0
 80170b6:	d15d      	bne.n	8017174 <_dtoa_r+0x4bc>
 80170b8:	2200      	movs	r2, #0
 80170ba:	4b81      	ldr	r3, [pc, #516]	; (80172c0 <_dtoa_r+0x608>)
 80170bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170c0:	f7e9 f8fa 	bl	80002b8 <__aeabi_dsub>
 80170c4:	462a      	mov	r2, r5
 80170c6:	4633      	mov	r3, r6
 80170c8:	e9cd 0100 	strd	r0, r1, [sp]
 80170cc:	f7e9 fd3c 	bl	8000b48 <__aeabi_dcmpgt>
 80170d0:	2800      	cmp	r0, #0
 80170d2:	f040 8288 	bne.w	80175e6 <_dtoa_r+0x92e>
 80170d6:	462a      	mov	r2, r5
 80170d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80170dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170e0:	f7e9 fd14 	bl	8000b0c <__aeabi_dcmplt>
 80170e4:	2800      	cmp	r0, #0
 80170e6:	f040 827c 	bne.w	80175e2 <_dtoa_r+0x92a>
 80170ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80170ee:	e9cd 2300 	strd	r2, r3, [sp]
 80170f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	f2c0 8150 	blt.w	801739a <_dtoa_r+0x6e2>
 80170fa:	f1ba 0f0e 	cmp.w	sl, #14
 80170fe:	f300 814c 	bgt.w	801739a <_dtoa_r+0x6e2>
 8017102:	4b6a      	ldr	r3, [pc, #424]	; (80172ac <_dtoa_r+0x5f4>)
 8017104:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017108:	ed93 7b00 	vldr	d7, [r3]
 801710c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801710e:	2b00      	cmp	r3, #0
 8017110:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017114:	f280 80d8 	bge.w	80172c8 <_dtoa_r+0x610>
 8017118:	f1b9 0f00 	cmp.w	r9, #0
 801711c:	f300 80d4 	bgt.w	80172c8 <_dtoa_r+0x610>
 8017120:	f040 825e 	bne.w	80175e0 <_dtoa_r+0x928>
 8017124:	2200      	movs	r2, #0
 8017126:	4b66      	ldr	r3, [pc, #408]	; (80172c0 <_dtoa_r+0x608>)
 8017128:	ec51 0b17 	vmov	r0, r1, d7
 801712c:	f7e9 fa7c 	bl	8000628 <__aeabi_dmul>
 8017130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017134:	f7e9 fcfe 	bl	8000b34 <__aeabi_dcmpge>
 8017138:	464f      	mov	r7, r9
 801713a:	464e      	mov	r6, r9
 801713c:	2800      	cmp	r0, #0
 801713e:	f040 8234 	bne.w	80175aa <_dtoa_r+0x8f2>
 8017142:	2331      	movs	r3, #49	; 0x31
 8017144:	f10b 0501 	add.w	r5, fp, #1
 8017148:	f88b 3000 	strb.w	r3, [fp]
 801714c:	f10a 0a01 	add.w	sl, sl, #1
 8017150:	e22f      	b.n	80175b2 <_dtoa_r+0x8fa>
 8017152:	07f2      	lsls	r2, r6, #31
 8017154:	d505      	bpl.n	8017162 <_dtoa_r+0x4aa>
 8017156:	e9d7 2300 	ldrd	r2, r3, [r7]
 801715a:	f7e9 fa65 	bl	8000628 <__aeabi_dmul>
 801715e:	3501      	adds	r5, #1
 8017160:	2301      	movs	r3, #1
 8017162:	1076      	asrs	r6, r6, #1
 8017164:	3708      	adds	r7, #8
 8017166:	e772      	b.n	801704e <_dtoa_r+0x396>
 8017168:	2502      	movs	r5, #2
 801716a:	e774      	b.n	8017056 <_dtoa_r+0x39e>
 801716c:	f8cd a020 	str.w	sl, [sp, #32]
 8017170:	464f      	mov	r7, r9
 8017172:	e791      	b.n	8017098 <_dtoa_r+0x3e0>
 8017174:	4b4d      	ldr	r3, [pc, #308]	; (80172ac <_dtoa_r+0x5f4>)
 8017176:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801717a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801717e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017180:	2b00      	cmp	r3, #0
 8017182:	d047      	beq.n	8017214 <_dtoa_r+0x55c>
 8017184:	4602      	mov	r2, r0
 8017186:	460b      	mov	r3, r1
 8017188:	2000      	movs	r0, #0
 801718a:	494e      	ldr	r1, [pc, #312]	; (80172c4 <_dtoa_r+0x60c>)
 801718c:	f7e9 fb76 	bl	800087c <__aeabi_ddiv>
 8017190:	462a      	mov	r2, r5
 8017192:	4633      	mov	r3, r6
 8017194:	f7e9 f890 	bl	80002b8 <__aeabi_dsub>
 8017198:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801719c:	465d      	mov	r5, fp
 801719e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171a2:	f7e9 fcf1 	bl	8000b88 <__aeabi_d2iz>
 80171a6:	4606      	mov	r6, r0
 80171a8:	f7e9 f9d4 	bl	8000554 <__aeabi_i2d>
 80171ac:	4602      	mov	r2, r0
 80171ae:	460b      	mov	r3, r1
 80171b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171b4:	f7e9 f880 	bl	80002b8 <__aeabi_dsub>
 80171b8:	3630      	adds	r6, #48	; 0x30
 80171ba:	f805 6b01 	strb.w	r6, [r5], #1
 80171be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80171c2:	e9cd 0100 	strd	r0, r1, [sp]
 80171c6:	f7e9 fca1 	bl	8000b0c <__aeabi_dcmplt>
 80171ca:	2800      	cmp	r0, #0
 80171cc:	d163      	bne.n	8017296 <_dtoa_r+0x5de>
 80171ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80171d2:	2000      	movs	r0, #0
 80171d4:	4937      	ldr	r1, [pc, #220]	; (80172b4 <_dtoa_r+0x5fc>)
 80171d6:	f7e9 f86f 	bl	80002b8 <__aeabi_dsub>
 80171da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80171de:	f7e9 fc95 	bl	8000b0c <__aeabi_dcmplt>
 80171e2:	2800      	cmp	r0, #0
 80171e4:	f040 80b7 	bne.w	8017356 <_dtoa_r+0x69e>
 80171e8:	eba5 030b 	sub.w	r3, r5, fp
 80171ec:	429f      	cmp	r7, r3
 80171ee:	f77f af7c 	ble.w	80170ea <_dtoa_r+0x432>
 80171f2:	2200      	movs	r2, #0
 80171f4:	4b30      	ldr	r3, [pc, #192]	; (80172b8 <_dtoa_r+0x600>)
 80171f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80171fa:	f7e9 fa15 	bl	8000628 <__aeabi_dmul>
 80171fe:	2200      	movs	r2, #0
 8017200:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017204:	4b2c      	ldr	r3, [pc, #176]	; (80172b8 <_dtoa_r+0x600>)
 8017206:	e9dd 0100 	ldrd	r0, r1, [sp]
 801720a:	f7e9 fa0d 	bl	8000628 <__aeabi_dmul>
 801720e:	e9cd 0100 	strd	r0, r1, [sp]
 8017212:	e7c4      	b.n	801719e <_dtoa_r+0x4e6>
 8017214:	462a      	mov	r2, r5
 8017216:	4633      	mov	r3, r6
 8017218:	f7e9 fa06 	bl	8000628 <__aeabi_dmul>
 801721c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017220:	eb0b 0507 	add.w	r5, fp, r7
 8017224:	465e      	mov	r6, fp
 8017226:	e9dd 0100 	ldrd	r0, r1, [sp]
 801722a:	f7e9 fcad 	bl	8000b88 <__aeabi_d2iz>
 801722e:	4607      	mov	r7, r0
 8017230:	f7e9 f990 	bl	8000554 <__aeabi_i2d>
 8017234:	3730      	adds	r7, #48	; 0x30
 8017236:	4602      	mov	r2, r0
 8017238:	460b      	mov	r3, r1
 801723a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801723e:	f7e9 f83b 	bl	80002b8 <__aeabi_dsub>
 8017242:	f806 7b01 	strb.w	r7, [r6], #1
 8017246:	42ae      	cmp	r6, r5
 8017248:	e9cd 0100 	strd	r0, r1, [sp]
 801724c:	f04f 0200 	mov.w	r2, #0
 8017250:	d126      	bne.n	80172a0 <_dtoa_r+0x5e8>
 8017252:	4b1c      	ldr	r3, [pc, #112]	; (80172c4 <_dtoa_r+0x60c>)
 8017254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017258:	f7e9 f830 	bl	80002bc <__adddf3>
 801725c:	4602      	mov	r2, r0
 801725e:	460b      	mov	r3, r1
 8017260:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017264:	f7e9 fc70 	bl	8000b48 <__aeabi_dcmpgt>
 8017268:	2800      	cmp	r0, #0
 801726a:	d174      	bne.n	8017356 <_dtoa_r+0x69e>
 801726c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017270:	2000      	movs	r0, #0
 8017272:	4914      	ldr	r1, [pc, #80]	; (80172c4 <_dtoa_r+0x60c>)
 8017274:	f7e9 f820 	bl	80002b8 <__aeabi_dsub>
 8017278:	4602      	mov	r2, r0
 801727a:	460b      	mov	r3, r1
 801727c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017280:	f7e9 fc44 	bl	8000b0c <__aeabi_dcmplt>
 8017284:	2800      	cmp	r0, #0
 8017286:	f43f af30 	beq.w	80170ea <_dtoa_r+0x432>
 801728a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801728e:	2b30      	cmp	r3, #48	; 0x30
 8017290:	f105 32ff 	add.w	r2, r5, #4294967295
 8017294:	d002      	beq.n	801729c <_dtoa_r+0x5e4>
 8017296:	f8dd a020 	ldr.w	sl, [sp, #32]
 801729a:	e04a      	b.n	8017332 <_dtoa_r+0x67a>
 801729c:	4615      	mov	r5, r2
 801729e:	e7f4      	b.n	801728a <_dtoa_r+0x5d2>
 80172a0:	4b05      	ldr	r3, [pc, #20]	; (80172b8 <_dtoa_r+0x600>)
 80172a2:	f7e9 f9c1 	bl	8000628 <__aeabi_dmul>
 80172a6:	e9cd 0100 	strd	r0, r1, [sp]
 80172aa:	e7bc      	b.n	8017226 <_dtoa_r+0x56e>
 80172ac:	08019e00 	.word	0x08019e00
 80172b0:	08019dd8 	.word	0x08019dd8
 80172b4:	3ff00000 	.word	0x3ff00000
 80172b8:	40240000 	.word	0x40240000
 80172bc:	401c0000 	.word	0x401c0000
 80172c0:	40140000 	.word	0x40140000
 80172c4:	3fe00000 	.word	0x3fe00000
 80172c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80172cc:	465d      	mov	r5, fp
 80172ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80172d2:	4630      	mov	r0, r6
 80172d4:	4639      	mov	r1, r7
 80172d6:	f7e9 fad1 	bl	800087c <__aeabi_ddiv>
 80172da:	f7e9 fc55 	bl	8000b88 <__aeabi_d2iz>
 80172de:	4680      	mov	r8, r0
 80172e0:	f7e9 f938 	bl	8000554 <__aeabi_i2d>
 80172e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80172e8:	f7e9 f99e 	bl	8000628 <__aeabi_dmul>
 80172ec:	4602      	mov	r2, r0
 80172ee:	460b      	mov	r3, r1
 80172f0:	4630      	mov	r0, r6
 80172f2:	4639      	mov	r1, r7
 80172f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80172f8:	f7e8 ffde 	bl	80002b8 <__aeabi_dsub>
 80172fc:	f805 6b01 	strb.w	r6, [r5], #1
 8017300:	eba5 060b 	sub.w	r6, r5, fp
 8017304:	45b1      	cmp	r9, r6
 8017306:	4602      	mov	r2, r0
 8017308:	460b      	mov	r3, r1
 801730a:	d139      	bne.n	8017380 <_dtoa_r+0x6c8>
 801730c:	f7e8 ffd6 	bl	80002bc <__adddf3>
 8017310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017314:	4606      	mov	r6, r0
 8017316:	460f      	mov	r7, r1
 8017318:	f7e9 fc16 	bl	8000b48 <__aeabi_dcmpgt>
 801731c:	b9c8      	cbnz	r0, 8017352 <_dtoa_r+0x69a>
 801731e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017322:	4630      	mov	r0, r6
 8017324:	4639      	mov	r1, r7
 8017326:	f7e9 fbe7 	bl	8000af8 <__aeabi_dcmpeq>
 801732a:	b110      	cbz	r0, 8017332 <_dtoa_r+0x67a>
 801732c:	f018 0f01 	tst.w	r8, #1
 8017330:	d10f      	bne.n	8017352 <_dtoa_r+0x69a>
 8017332:	9904      	ldr	r1, [sp, #16]
 8017334:	4620      	mov	r0, r4
 8017336:	f000 fe0d 	bl	8017f54 <_Bfree>
 801733a:	2300      	movs	r3, #0
 801733c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801733e:	702b      	strb	r3, [r5, #0]
 8017340:	f10a 0301 	add.w	r3, sl, #1
 8017344:	6013      	str	r3, [r2, #0]
 8017346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017348:	2b00      	cmp	r3, #0
 801734a:	f000 8241 	beq.w	80177d0 <_dtoa_r+0xb18>
 801734e:	601d      	str	r5, [r3, #0]
 8017350:	e23e      	b.n	80177d0 <_dtoa_r+0xb18>
 8017352:	f8cd a020 	str.w	sl, [sp, #32]
 8017356:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801735a:	2a39      	cmp	r2, #57	; 0x39
 801735c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017360:	d108      	bne.n	8017374 <_dtoa_r+0x6bc>
 8017362:	459b      	cmp	fp, r3
 8017364:	d10a      	bne.n	801737c <_dtoa_r+0x6c4>
 8017366:	9b08      	ldr	r3, [sp, #32]
 8017368:	3301      	adds	r3, #1
 801736a:	9308      	str	r3, [sp, #32]
 801736c:	2330      	movs	r3, #48	; 0x30
 801736e:	f88b 3000 	strb.w	r3, [fp]
 8017372:	465b      	mov	r3, fp
 8017374:	781a      	ldrb	r2, [r3, #0]
 8017376:	3201      	adds	r2, #1
 8017378:	701a      	strb	r2, [r3, #0]
 801737a:	e78c      	b.n	8017296 <_dtoa_r+0x5de>
 801737c:	461d      	mov	r5, r3
 801737e:	e7ea      	b.n	8017356 <_dtoa_r+0x69e>
 8017380:	2200      	movs	r2, #0
 8017382:	4b9b      	ldr	r3, [pc, #620]	; (80175f0 <_dtoa_r+0x938>)
 8017384:	f7e9 f950 	bl	8000628 <__aeabi_dmul>
 8017388:	2200      	movs	r2, #0
 801738a:	2300      	movs	r3, #0
 801738c:	4606      	mov	r6, r0
 801738e:	460f      	mov	r7, r1
 8017390:	f7e9 fbb2 	bl	8000af8 <__aeabi_dcmpeq>
 8017394:	2800      	cmp	r0, #0
 8017396:	d09a      	beq.n	80172ce <_dtoa_r+0x616>
 8017398:	e7cb      	b.n	8017332 <_dtoa_r+0x67a>
 801739a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801739c:	2a00      	cmp	r2, #0
 801739e:	f000 808b 	beq.w	80174b8 <_dtoa_r+0x800>
 80173a2:	9a06      	ldr	r2, [sp, #24]
 80173a4:	2a01      	cmp	r2, #1
 80173a6:	dc6e      	bgt.n	8017486 <_dtoa_r+0x7ce>
 80173a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80173aa:	2a00      	cmp	r2, #0
 80173ac:	d067      	beq.n	801747e <_dtoa_r+0x7c6>
 80173ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80173b2:	9f07      	ldr	r7, [sp, #28]
 80173b4:	9d05      	ldr	r5, [sp, #20]
 80173b6:	9a05      	ldr	r2, [sp, #20]
 80173b8:	2101      	movs	r1, #1
 80173ba:	441a      	add	r2, r3
 80173bc:	4620      	mov	r0, r4
 80173be:	9205      	str	r2, [sp, #20]
 80173c0:	4498      	add	r8, r3
 80173c2:	f000 fea5 	bl	8018110 <__i2b>
 80173c6:	4606      	mov	r6, r0
 80173c8:	2d00      	cmp	r5, #0
 80173ca:	dd0c      	ble.n	80173e6 <_dtoa_r+0x72e>
 80173cc:	f1b8 0f00 	cmp.w	r8, #0
 80173d0:	dd09      	ble.n	80173e6 <_dtoa_r+0x72e>
 80173d2:	4545      	cmp	r5, r8
 80173d4:	9a05      	ldr	r2, [sp, #20]
 80173d6:	462b      	mov	r3, r5
 80173d8:	bfa8      	it	ge
 80173da:	4643      	movge	r3, r8
 80173dc:	1ad2      	subs	r2, r2, r3
 80173de:	9205      	str	r2, [sp, #20]
 80173e0:	1aed      	subs	r5, r5, r3
 80173e2:	eba8 0803 	sub.w	r8, r8, r3
 80173e6:	9b07      	ldr	r3, [sp, #28]
 80173e8:	b1eb      	cbz	r3, 8017426 <_dtoa_r+0x76e>
 80173ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d067      	beq.n	80174c0 <_dtoa_r+0x808>
 80173f0:	b18f      	cbz	r7, 8017416 <_dtoa_r+0x75e>
 80173f2:	4631      	mov	r1, r6
 80173f4:	463a      	mov	r2, r7
 80173f6:	4620      	mov	r0, r4
 80173f8:	f000 ff2a 	bl	8018250 <__pow5mult>
 80173fc:	9a04      	ldr	r2, [sp, #16]
 80173fe:	4601      	mov	r1, r0
 8017400:	4606      	mov	r6, r0
 8017402:	4620      	mov	r0, r4
 8017404:	f000 fe8d 	bl	8018122 <__multiply>
 8017408:	9904      	ldr	r1, [sp, #16]
 801740a:	9008      	str	r0, [sp, #32]
 801740c:	4620      	mov	r0, r4
 801740e:	f000 fda1 	bl	8017f54 <_Bfree>
 8017412:	9b08      	ldr	r3, [sp, #32]
 8017414:	9304      	str	r3, [sp, #16]
 8017416:	9b07      	ldr	r3, [sp, #28]
 8017418:	1bda      	subs	r2, r3, r7
 801741a:	d004      	beq.n	8017426 <_dtoa_r+0x76e>
 801741c:	9904      	ldr	r1, [sp, #16]
 801741e:	4620      	mov	r0, r4
 8017420:	f000 ff16 	bl	8018250 <__pow5mult>
 8017424:	9004      	str	r0, [sp, #16]
 8017426:	2101      	movs	r1, #1
 8017428:	4620      	mov	r0, r4
 801742a:	f000 fe71 	bl	8018110 <__i2b>
 801742e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017430:	4607      	mov	r7, r0
 8017432:	2b00      	cmp	r3, #0
 8017434:	f000 81d0 	beq.w	80177d8 <_dtoa_r+0xb20>
 8017438:	461a      	mov	r2, r3
 801743a:	4601      	mov	r1, r0
 801743c:	4620      	mov	r0, r4
 801743e:	f000 ff07 	bl	8018250 <__pow5mult>
 8017442:	9b06      	ldr	r3, [sp, #24]
 8017444:	2b01      	cmp	r3, #1
 8017446:	4607      	mov	r7, r0
 8017448:	dc40      	bgt.n	80174cc <_dtoa_r+0x814>
 801744a:	9b00      	ldr	r3, [sp, #0]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d139      	bne.n	80174c4 <_dtoa_r+0x80c>
 8017450:	9b01      	ldr	r3, [sp, #4]
 8017452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017456:	2b00      	cmp	r3, #0
 8017458:	d136      	bne.n	80174c8 <_dtoa_r+0x810>
 801745a:	9b01      	ldr	r3, [sp, #4]
 801745c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017460:	0d1b      	lsrs	r3, r3, #20
 8017462:	051b      	lsls	r3, r3, #20
 8017464:	b12b      	cbz	r3, 8017472 <_dtoa_r+0x7ba>
 8017466:	9b05      	ldr	r3, [sp, #20]
 8017468:	3301      	adds	r3, #1
 801746a:	9305      	str	r3, [sp, #20]
 801746c:	f108 0801 	add.w	r8, r8, #1
 8017470:	2301      	movs	r3, #1
 8017472:	9307      	str	r3, [sp, #28]
 8017474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017476:	2b00      	cmp	r3, #0
 8017478:	d12a      	bne.n	80174d0 <_dtoa_r+0x818>
 801747a:	2001      	movs	r0, #1
 801747c:	e030      	b.n	80174e0 <_dtoa_r+0x828>
 801747e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017480:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017484:	e795      	b.n	80173b2 <_dtoa_r+0x6fa>
 8017486:	9b07      	ldr	r3, [sp, #28]
 8017488:	f109 37ff 	add.w	r7, r9, #4294967295
 801748c:	42bb      	cmp	r3, r7
 801748e:	bfbf      	itttt	lt
 8017490:	9b07      	ldrlt	r3, [sp, #28]
 8017492:	9707      	strlt	r7, [sp, #28]
 8017494:	1afa      	sublt	r2, r7, r3
 8017496:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017498:	bfbb      	ittet	lt
 801749a:	189b      	addlt	r3, r3, r2
 801749c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801749e:	1bdf      	subge	r7, r3, r7
 80174a0:	2700      	movlt	r7, #0
 80174a2:	f1b9 0f00 	cmp.w	r9, #0
 80174a6:	bfb5      	itete	lt
 80174a8:	9b05      	ldrlt	r3, [sp, #20]
 80174aa:	9d05      	ldrge	r5, [sp, #20]
 80174ac:	eba3 0509 	sublt.w	r5, r3, r9
 80174b0:	464b      	movge	r3, r9
 80174b2:	bfb8      	it	lt
 80174b4:	2300      	movlt	r3, #0
 80174b6:	e77e      	b.n	80173b6 <_dtoa_r+0x6fe>
 80174b8:	9f07      	ldr	r7, [sp, #28]
 80174ba:	9d05      	ldr	r5, [sp, #20]
 80174bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80174be:	e783      	b.n	80173c8 <_dtoa_r+0x710>
 80174c0:	9a07      	ldr	r2, [sp, #28]
 80174c2:	e7ab      	b.n	801741c <_dtoa_r+0x764>
 80174c4:	2300      	movs	r3, #0
 80174c6:	e7d4      	b.n	8017472 <_dtoa_r+0x7ba>
 80174c8:	9b00      	ldr	r3, [sp, #0]
 80174ca:	e7d2      	b.n	8017472 <_dtoa_r+0x7ba>
 80174cc:	2300      	movs	r3, #0
 80174ce:	9307      	str	r3, [sp, #28]
 80174d0:	693b      	ldr	r3, [r7, #16]
 80174d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80174d6:	6918      	ldr	r0, [r3, #16]
 80174d8:	f000 fdcc 	bl	8018074 <__hi0bits>
 80174dc:	f1c0 0020 	rsb	r0, r0, #32
 80174e0:	4440      	add	r0, r8
 80174e2:	f010 001f 	ands.w	r0, r0, #31
 80174e6:	d047      	beq.n	8017578 <_dtoa_r+0x8c0>
 80174e8:	f1c0 0320 	rsb	r3, r0, #32
 80174ec:	2b04      	cmp	r3, #4
 80174ee:	dd3b      	ble.n	8017568 <_dtoa_r+0x8b0>
 80174f0:	9b05      	ldr	r3, [sp, #20]
 80174f2:	f1c0 001c 	rsb	r0, r0, #28
 80174f6:	4403      	add	r3, r0
 80174f8:	9305      	str	r3, [sp, #20]
 80174fa:	4405      	add	r5, r0
 80174fc:	4480      	add	r8, r0
 80174fe:	9b05      	ldr	r3, [sp, #20]
 8017500:	2b00      	cmp	r3, #0
 8017502:	dd05      	ble.n	8017510 <_dtoa_r+0x858>
 8017504:	461a      	mov	r2, r3
 8017506:	9904      	ldr	r1, [sp, #16]
 8017508:	4620      	mov	r0, r4
 801750a:	f000 feef 	bl	80182ec <__lshift>
 801750e:	9004      	str	r0, [sp, #16]
 8017510:	f1b8 0f00 	cmp.w	r8, #0
 8017514:	dd05      	ble.n	8017522 <_dtoa_r+0x86a>
 8017516:	4639      	mov	r1, r7
 8017518:	4642      	mov	r2, r8
 801751a:	4620      	mov	r0, r4
 801751c:	f000 fee6 	bl	80182ec <__lshift>
 8017520:	4607      	mov	r7, r0
 8017522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017524:	b353      	cbz	r3, 801757c <_dtoa_r+0x8c4>
 8017526:	4639      	mov	r1, r7
 8017528:	9804      	ldr	r0, [sp, #16]
 801752a:	f000 ff33 	bl	8018394 <__mcmp>
 801752e:	2800      	cmp	r0, #0
 8017530:	da24      	bge.n	801757c <_dtoa_r+0x8c4>
 8017532:	2300      	movs	r3, #0
 8017534:	220a      	movs	r2, #10
 8017536:	9904      	ldr	r1, [sp, #16]
 8017538:	4620      	mov	r0, r4
 801753a:	f000 fd22 	bl	8017f82 <__multadd>
 801753e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017540:	9004      	str	r0, [sp, #16]
 8017542:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017546:	2b00      	cmp	r3, #0
 8017548:	f000 814d 	beq.w	80177e6 <_dtoa_r+0xb2e>
 801754c:	2300      	movs	r3, #0
 801754e:	4631      	mov	r1, r6
 8017550:	220a      	movs	r2, #10
 8017552:	4620      	mov	r0, r4
 8017554:	f000 fd15 	bl	8017f82 <__multadd>
 8017558:	9b02      	ldr	r3, [sp, #8]
 801755a:	2b00      	cmp	r3, #0
 801755c:	4606      	mov	r6, r0
 801755e:	dc4f      	bgt.n	8017600 <_dtoa_r+0x948>
 8017560:	9b06      	ldr	r3, [sp, #24]
 8017562:	2b02      	cmp	r3, #2
 8017564:	dd4c      	ble.n	8017600 <_dtoa_r+0x948>
 8017566:	e011      	b.n	801758c <_dtoa_r+0x8d4>
 8017568:	d0c9      	beq.n	80174fe <_dtoa_r+0x846>
 801756a:	9a05      	ldr	r2, [sp, #20]
 801756c:	331c      	adds	r3, #28
 801756e:	441a      	add	r2, r3
 8017570:	9205      	str	r2, [sp, #20]
 8017572:	441d      	add	r5, r3
 8017574:	4498      	add	r8, r3
 8017576:	e7c2      	b.n	80174fe <_dtoa_r+0x846>
 8017578:	4603      	mov	r3, r0
 801757a:	e7f6      	b.n	801756a <_dtoa_r+0x8b2>
 801757c:	f1b9 0f00 	cmp.w	r9, #0
 8017580:	dc38      	bgt.n	80175f4 <_dtoa_r+0x93c>
 8017582:	9b06      	ldr	r3, [sp, #24]
 8017584:	2b02      	cmp	r3, #2
 8017586:	dd35      	ble.n	80175f4 <_dtoa_r+0x93c>
 8017588:	f8cd 9008 	str.w	r9, [sp, #8]
 801758c:	9b02      	ldr	r3, [sp, #8]
 801758e:	b963      	cbnz	r3, 80175aa <_dtoa_r+0x8f2>
 8017590:	4639      	mov	r1, r7
 8017592:	2205      	movs	r2, #5
 8017594:	4620      	mov	r0, r4
 8017596:	f000 fcf4 	bl	8017f82 <__multadd>
 801759a:	4601      	mov	r1, r0
 801759c:	4607      	mov	r7, r0
 801759e:	9804      	ldr	r0, [sp, #16]
 80175a0:	f000 fef8 	bl	8018394 <__mcmp>
 80175a4:	2800      	cmp	r0, #0
 80175a6:	f73f adcc 	bgt.w	8017142 <_dtoa_r+0x48a>
 80175aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175ac:	465d      	mov	r5, fp
 80175ae:	ea6f 0a03 	mvn.w	sl, r3
 80175b2:	f04f 0900 	mov.w	r9, #0
 80175b6:	4639      	mov	r1, r7
 80175b8:	4620      	mov	r0, r4
 80175ba:	f000 fccb 	bl	8017f54 <_Bfree>
 80175be:	2e00      	cmp	r6, #0
 80175c0:	f43f aeb7 	beq.w	8017332 <_dtoa_r+0x67a>
 80175c4:	f1b9 0f00 	cmp.w	r9, #0
 80175c8:	d005      	beq.n	80175d6 <_dtoa_r+0x91e>
 80175ca:	45b1      	cmp	r9, r6
 80175cc:	d003      	beq.n	80175d6 <_dtoa_r+0x91e>
 80175ce:	4649      	mov	r1, r9
 80175d0:	4620      	mov	r0, r4
 80175d2:	f000 fcbf 	bl	8017f54 <_Bfree>
 80175d6:	4631      	mov	r1, r6
 80175d8:	4620      	mov	r0, r4
 80175da:	f000 fcbb 	bl	8017f54 <_Bfree>
 80175de:	e6a8      	b.n	8017332 <_dtoa_r+0x67a>
 80175e0:	2700      	movs	r7, #0
 80175e2:	463e      	mov	r6, r7
 80175e4:	e7e1      	b.n	80175aa <_dtoa_r+0x8f2>
 80175e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80175ea:	463e      	mov	r6, r7
 80175ec:	e5a9      	b.n	8017142 <_dtoa_r+0x48a>
 80175ee:	bf00      	nop
 80175f0:	40240000 	.word	0x40240000
 80175f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	f000 80fa 	beq.w	80177f4 <_dtoa_r+0xb3c>
 8017600:	2d00      	cmp	r5, #0
 8017602:	dd05      	ble.n	8017610 <_dtoa_r+0x958>
 8017604:	4631      	mov	r1, r6
 8017606:	462a      	mov	r2, r5
 8017608:	4620      	mov	r0, r4
 801760a:	f000 fe6f 	bl	80182ec <__lshift>
 801760e:	4606      	mov	r6, r0
 8017610:	9b07      	ldr	r3, [sp, #28]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d04c      	beq.n	80176b0 <_dtoa_r+0x9f8>
 8017616:	6871      	ldr	r1, [r6, #4]
 8017618:	4620      	mov	r0, r4
 801761a:	f000 fc67 	bl	8017eec <_Balloc>
 801761e:	6932      	ldr	r2, [r6, #16]
 8017620:	3202      	adds	r2, #2
 8017622:	4605      	mov	r5, r0
 8017624:	0092      	lsls	r2, r2, #2
 8017626:	f106 010c 	add.w	r1, r6, #12
 801762a:	300c      	adds	r0, #12
 801762c:	f7fd fd08 	bl	8015040 <memcpy>
 8017630:	2201      	movs	r2, #1
 8017632:	4629      	mov	r1, r5
 8017634:	4620      	mov	r0, r4
 8017636:	f000 fe59 	bl	80182ec <__lshift>
 801763a:	9b00      	ldr	r3, [sp, #0]
 801763c:	f8cd b014 	str.w	fp, [sp, #20]
 8017640:	f003 0301 	and.w	r3, r3, #1
 8017644:	46b1      	mov	r9, r6
 8017646:	9307      	str	r3, [sp, #28]
 8017648:	4606      	mov	r6, r0
 801764a:	4639      	mov	r1, r7
 801764c:	9804      	ldr	r0, [sp, #16]
 801764e:	f7ff faa5 	bl	8016b9c <quorem>
 8017652:	4649      	mov	r1, r9
 8017654:	4605      	mov	r5, r0
 8017656:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801765a:	9804      	ldr	r0, [sp, #16]
 801765c:	f000 fe9a 	bl	8018394 <__mcmp>
 8017660:	4632      	mov	r2, r6
 8017662:	9000      	str	r0, [sp, #0]
 8017664:	4639      	mov	r1, r7
 8017666:	4620      	mov	r0, r4
 8017668:	f000 feae 	bl	80183c8 <__mdiff>
 801766c:	68c3      	ldr	r3, [r0, #12]
 801766e:	4602      	mov	r2, r0
 8017670:	bb03      	cbnz	r3, 80176b4 <_dtoa_r+0x9fc>
 8017672:	4601      	mov	r1, r0
 8017674:	9008      	str	r0, [sp, #32]
 8017676:	9804      	ldr	r0, [sp, #16]
 8017678:	f000 fe8c 	bl	8018394 <__mcmp>
 801767c:	9a08      	ldr	r2, [sp, #32]
 801767e:	4603      	mov	r3, r0
 8017680:	4611      	mov	r1, r2
 8017682:	4620      	mov	r0, r4
 8017684:	9308      	str	r3, [sp, #32]
 8017686:	f000 fc65 	bl	8017f54 <_Bfree>
 801768a:	9b08      	ldr	r3, [sp, #32]
 801768c:	b9a3      	cbnz	r3, 80176b8 <_dtoa_r+0xa00>
 801768e:	9a06      	ldr	r2, [sp, #24]
 8017690:	b992      	cbnz	r2, 80176b8 <_dtoa_r+0xa00>
 8017692:	9a07      	ldr	r2, [sp, #28]
 8017694:	b982      	cbnz	r2, 80176b8 <_dtoa_r+0xa00>
 8017696:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801769a:	d029      	beq.n	80176f0 <_dtoa_r+0xa38>
 801769c:	9b00      	ldr	r3, [sp, #0]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	dd01      	ble.n	80176a6 <_dtoa_r+0x9ee>
 80176a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80176a6:	9b05      	ldr	r3, [sp, #20]
 80176a8:	1c5d      	adds	r5, r3, #1
 80176aa:	f883 8000 	strb.w	r8, [r3]
 80176ae:	e782      	b.n	80175b6 <_dtoa_r+0x8fe>
 80176b0:	4630      	mov	r0, r6
 80176b2:	e7c2      	b.n	801763a <_dtoa_r+0x982>
 80176b4:	2301      	movs	r3, #1
 80176b6:	e7e3      	b.n	8017680 <_dtoa_r+0x9c8>
 80176b8:	9a00      	ldr	r2, [sp, #0]
 80176ba:	2a00      	cmp	r2, #0
 80176bc:	db04      	blt.n	80176c8 <_dtoa_r+0xa10>
 80176be:	d125      	bne.n	801770c <_dtoa_r+0xa54>
 80176c0:	9a06      	ldr	r2, [sp, #24]
 80176c2:	bb1a      	cbnz	r2, 801770c <_dtoa_r+0xa54>
 80176c4:	9a07      	ldr	r2, [sp, #28]
 80176c6:	bb0a      	cbnz	r2, 801770c <_dtoa_r+0xa54>
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	ddec      	ble.n	80176a6 <_dtoa_r+0x9ee>
 80176cc:	2201      	movs	r2, #1
 80176ce:	9904      	ldr	r1, [sp, #16]
 80176d0:	4620      	mov	r0, r4
 80176d2:	f000 fe0b 	bl	80182ec <__lshift>
 80176d6:	4639      	mov	r1, r7
 80176d8:	9004      	str	r0, [sp, #16]
 80176da:	f000 fe5b 	bl	8018394 <__mcmp>
 80176de:	2800      	cmp	r0, #0
 80176e0:	dc03      	bgt.n	80176ea <_dtoa_r+0xa32>
 80176e2:	d1e0      	bne.n	80176a6 <_dtoa_r+0x9ee>
 80176e4:	f018 0f01 	tst.w	r8, #1
 80176e8:	d0dd      	beq.n	80176a6 <_dtoa_r+0x9ee>
 80176ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80176ee:	d1d8      	bne.n	80176a2 <_dtoa_r+0x9ea>
 80176f0:	9b05      	ldr	r3, [sp, #20]
 80176f2:	9a05      	ldr	r2, [sp, #20]
 80176f4:	1c5d      	adds	r5, r3, #1
 80176f6:	2339      	movs	r3, #57	; 0x39
 80176f8:	7013      	strb	r3, [r2, #0]
 80176fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80176fe:	2b39      	cmp	r3, #57	; 0x39
 8017700:	f105 32ff 	add.w	r2, r5, #4294967295
 8017704:	d04f      	beq.n	80177a6 <_dtoa_r+0xaee>
 8017706:	3301      	adds	r3, #1
 8017708:	7013      	strb	r3, [r2, #0]
 801770a:	e754      	b.n	80175b6 <_dtoa_r+0x8fe>
 801770c:	9a05      	ldr	r2, [sp, #20]
 801770e:	2b00      	cmp	r3, #0
 8017710:	f102 0501 	add.w	r5, r2, #1
 8017714:	dd06      	ble.n	8017724 <_dtoa_r+0xa6c>
 8017716:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801771a:	d0e9      	beq.n	80176f0 <_dtoa_r+0xa38>
 801771c:	f108 0801 	add.w	r8, r8, #1
 8017720:	9b05      	ldr	r3, [sp, #20]
 8017722:	e7c2      	b.n	80176aa <_dtoa_r+0x9f2>
 8017724:	9a02      	ldr	r2, [sp, #8]
 8017726:	f805 8c01 	strb.w	r8, [r5, #-1]
 801772a:	eba5 030b 	sub.w	r3, r5, fp
 801772e:	4293      	cmp	r3, r2
 8017730:	d021      	beq.n	8017776 <_dtoa_r+0xabe>
 8017732:	2300      	movs	r3, #0
 8017734:	220a      	movs	r2, #10
 8017736:	9904      	ldr	r1, [sp, #16]
 8017738:	4620      	mov	r0, r4
 801773a:	f000 fc22 	bl	8017f82 <__multadd>
 801773e:	45b1      	cmp	r9, r6
 8017740:	9004      	str	r0, [sp, #16]
 8017742:	f04f 0300 	mov.w	r3, #0
 8017746:	f04f 020a 	mov.w	r2, #10
 801774a:	4649      	mov	r1, r9
 801774c:	4620      	mov	r0, r4
 801774e:	d105      	bne.n	801775c <_dtoa_r+0xaa4>
 8017750:	f000 fc17 	bl	8017f82 <__multadd>
 8017754:	4681      	mov	r9, r0
 8017756:	4606      	mov	r6, r0
 8017758:	9505      	str	r5, [sp, #20]
 801775a:	e776      	b.n	801764a <_dtoa_r+0x992>
 801775c:	f000 fc11 	bl	8017f82 <__multadd>
 8017760:	4631      	mov	r1, r6
 8017762:	4681      	mov	r9, r0
 8017764:	2300      	movs	r3, #0
 8017766:	220a      	movs	r2, #10
 8017768:	4620      	mov	r0, r4
 801776a:	f000 fc0a 	bl	8017f82 <__multadd>
 801776e:	4606      	mov	r6, r0
 8017770:	e7f2      	b.n	8017758 <_dtoa_r+0xaa0>
 8017772:	f04f 0900 	mov.w	r9, #0
 8017776:	2201      	movs	r2, #1
 8017778:	9904      	ldr	r1, [sp, #16]
 801777a:	4620      	mov	r0, r4
 801777c:	f000 fdb6 	bl	80182ec <__lshift>
 8017780:	4639      	mov	r1, r7
 8017782:	9004      	str	r0, [sp, #16]
 8017784:	f000 fe06 	bl	8018394 <__mcmp>
 8017788:	2800      	cmp	r0, #0
 801778a:	dcb6      	bgt.n	80176fa <_dtoa_r+0xa42>
 801778c:	d102      	bne.n	8017794 <_dtoa_r+0xadc>
 801778e:	f018 0f01 	tst.w	r8, #1
 8017792:	d1b2      	bne.n	80176fa <_dtoa_r+0xa42>
 8017794:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017798:	2b30      	cmp	r3, #48	; 0x30
 801779a:	f105 32ff 	add.w	r2, r5, #4294967295
 801779e:	f47f af0a 	bne.w	80175b6 <_dtoa_r+0x8fe>
 80177a2:	4615      	mov	r5, r2
 80177a4:	e7f6      	b.n	8017794 <_dtoa_r+0xadc>
 80177a6:	4593      	cmp	fp, r2
 80177a8:	d105      	bne.n	80177b6 <_dtoa_r+0xafe>
 80177aa:	2331      	movs	r3, #49	; 0x31
 80177ac:	f10a 0a01 	add.w	sl, sl, #1
 80177b0:	f88b 3000 	strb.w	r3, [fp]
 80177b4:	e6ff      	b.n	80175b6 <_dtoa_r+0x8fe>
 80177b6:	4615      	mov	r5, r2
 80177b8:	e79f      	b.n	80176fa <_dtoa_r+0xa42>
 80177ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017820 <_dtoa_r+0xb68>
 80177be:	e007      	b.n	80177d0 <_dtoa_r+0xb18>
 80177c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80177c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017824 <_dtoa_r+0xb6c>
 80177c6:	b11b      	cbz	r3, 80177d0 <_dtoa_r+0xb18>
 80177c8:	f10b 0308 	add.w	r3, fp, #8
 80177cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80177ce:	6013      	str	r3, [r2, #0]
 80177d0:	4658      	mov	r0, fp
 80177d2:	b017      	add	sp, #92	; 0x5c
 80177d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177d8:	9b06      	ldr	r3, [sp, #24]
 80177da:	2b01      	cmp	r3, #1
 80177dc:	f77f ae35 	ble.w	801744a <_dtoa_r+0x792>
 80177e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177e2:	9307      	str	r3, [sp, #28]
 80177e4:	e649      	b.n	801747a <_dtoa_r+0x7c2>
 80177e6:	9b02      	ldr	r3, [sp, #8]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	dc03      	bgt.n	80177f4 <_dtoa_r+0xb3c>
 80177ec:	9b06      	ldr	r3, [sp, #24]
 80177ee:	2b02      	cmp	r3, #2
 80177f0:	f73f aecc 	bgt.w	801758c <_dtoa_r+0x8d4>
 80177f4:	465d      	mov	r5, fp
 80177f6:	4639      	mov	r1, r7
 80177f8:	9804      	ldr	r0, [sp, #16]
 80177fa:	f7ff f9cf 	bl	8016b9c <quorem>
 80177fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017802:	f805 8b01 	strb.w	r8, [r5], #1
 8017806:	9a02      	ldr	r2, [sp, #8]
 8017808:	eba5 030b 	sub.w	r3, r5, fp
 801780c:	429a      	cmp	r2, r3
 801780e:	ddb0      	ble.n	8017772 <_dtoa_r+0xaba>
 8017810:	2300      	movs	r3, #0
 8017812:	220a      	movs	r2, #10
 8017814:	9904      	ldr	r1, [sp, #16]
 8017816:	4620      	mov	r0, r4
 8017818:	f000 fbb3 	bl	8017f82 <__multadd>
 801781c:	9004      	str	r0, [sp, #16]
 801781e:	e7ea      	b.n	80177f6 <_dtoa_r+0xb3e>
 8017820:	08019efb 	.word	0x08019efb
 8017824:	08019d58 	.word	0x08019d58

08017828 <rshift>:
 8017828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801782a:	6906      	ldr	r6, [r0, #16]
 801782c:	114b      	asrs	r3, r1, #5
 801782e:	429e      	cmp	r6, r3
 8017830:	f100 0414 	add.w	r4, r0, #20
 8017834:	dd30      	ble.n	8017898 <rshift+0x70>
 8017836:	f011 011f 	ands.w	r1, r1, #31
 801783a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801783e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017842:	d108      	bne.n	8017856 <rshift+0x2e>
 8017844:	4621      	mov	r1, r4
 8017846:	42b2      	cmp	r2, r6
 8017848:	460b      	mov	r3, r1
 801784a:	d211      	bcs.n	8017870 <rshift+0x48>
 801784c:	f852 3b04 	ldr.w	r3, [r2], #4
 8017850:	f841 3b04 	str.w	r3, [r1], #4
 8017854:	e7f7      	b.n	8017846 <rshift+0x1e>
 8017856:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801785a:	f1c1 0c20 	rsb	ip, r1, #32
 801785e:	40cd      	lsrs	r5, r1
 8017860:	3204      	adds	r2, #4
 8017862:	4623      	mov	r3, r4
 8017864:	42b2      	cmp	r2, r6
 8017866:	4617      	mov	r7, r2
 8017868:	d30c      	bcc.n	8017884 <rshift+0x5c>
 801786a:	601d      	str	r5, [r3, #0]
 801786c:	b105      	cbz	r5, 8017870 <rshift+0x48>
 801786e:	3304      	adds	r3, #4
 8017870:	1b1a      	subs	r2, r3, r4
 8017872:	42a3      	cmp	r3, r4
 8017874:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017878:	bf08      	it	eq
 801787a:	2300      	moveq	r3, #0
 801787c:	6102      	str	r2, [r0, #16]
 801787e:	bf08      	it	eq
 8017880:	6143      	streq	r3, [r0, #20]
 8017882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017884:	683f      	ldr	r7, [r7, #0]
 8017886:	fa07 f70c 	lsl.w	r7, r7, ip
 801788a:	433d      	orrs	r5, r7
 801788c:	f843 5b04 	str.w	r5, [r3], #4
 8017890:	f852 5b04 	ldr.w	r5, [r2], #4
 8017894:	40cd      	lsrs	r5, r1
 8017896:	e7e5      	b.n	8017864 <rshift+0x3c>
 8017898:	4623      	mov	r3, r4
 801789a:	e7e9      	b.n	8017870 <rshift+0x48>

0801789c <__hexdig_fun>:
 801789c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80178a0:	2b09      	cmp	r3, #9
 80178a2:	d802      	bhi.n	80178aa <__hexdig_fun+0xe>
 80178a4:	3820      	subs	r0, #32
 80178a6:	b2c0      	uxtb	r0, r0
 80178a8:	4770      	bx	lr
 80178aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80178ae:	2b05      	cmp	r3, #5
 80178b0:	d801      	bhi.n	80178b6 <__hexdig_fun+0x1a>
 80178b2:	3847      	subs	r0, #71	; 0x47
 80178b4:	e7f7      	b.n	80178a6 <__hexdig_fun+0xa>
 80178b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80178ba:	2b05      	cmp	r3, #5
 80178bc:	d801      	bhi.n	80178c2 <__hexdig_fun+0x26>
 80178be:	3827      	subs	r0, #39	; 0x27
 80178c0:	e7f1      	b.n	80178a6 <__hexdig_fun+0xa>
 80178c2:	2000      	movs	r0, #0
 80178c4:	4770      	bx	lr

080178c6 <__gethex>:
 80178c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178ca:	b08b      	sub	sp, #44	; 0x2c
 80178cc:	468a      	mov	sl, r1
 80178ce:	9002      	str	r0, [sp, #8]
 80178d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80178d2:	9306      	str	r3, [sp, #24]
 80178d4:	4690      	mov	r8, r2
 80178d6:	f000 fadf 	bl	8017e98 <__localeconv_l>
 80178da:	6803      	ldr	r3, [r0, #0]
 80178dc:	9303      	str	r3, [sp, #12]
 80178de:	4618      	mov	r0, r3
 80178e0:	f7e8 fc8e 	bl	8000200 <strlen>
 80178e4:	9b03      	ldr	r3, [sp, #12]
 80178e6:	9001      	str	r0, [sp, #4]
 80178e8:	4403      	add	r3, r0
 80178ea:	f04f 0b00 	mov.w	fp, #0
 80178ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80178f2:	9307      	str	r3, [sp, #28]
 80178f4:	f8da 3000 	ldr.w	r3, [sl]
 80178f8:	3302      	adds	r3, #2
 80178fa:	461f      	mov	r7, r3
 80178fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017900:	2830      	cmp	r0, #48	; 0x30
 8017902:	d06c      	beq.n	80179de <__gethex+0x118>
 8017904:	f7ff ffca 	bl	801789c <__hexdig_fun>
 8017908:	4604      	mov	r4, r0
 801790a:	2800      	cmp	r0, #0
 801790c:	d16a      	bne.n	80179e4 <__gethex+0x11e>
 801790e:	9a01      	ldr	r2, [sp, #4]
 8017910:	9903      	ldr	r1, [sp, #12]
 8017912:	4638      	mov	r0, r7
 8017914:	f001 fc36 	bl	8019184 <strncmp>
 8017918:	2800      	cmp	r0, #0
 801791a:	d166      	bne.n	80179ea <__gethex+0x124>
 801791c:	9b01      	ldr	r3, [sp, #4]
 801791e:	5cf8      	ldrb	r0, [r7, r3]
 8017920:	18fe      	adds	r6, r7, r3
 8017922:	f7ff ffbb 	bl	801789c <__hexdig_fun>
 8017926:	2800      	cmp	r0, #0
 8017928:	d062      	beq.n	80179f0 <__gethex+0x12a>
 801792a:	4633      	mov	r3, r6
 801792c:	7818      	ldrb	r0, [r3, #0]
 801792e:	2830      	cmp	r0, #48	; 0x30
 8017930:	461f      	mov	r7, r3
 8017932:	f103 0301 	add.w	r3, r3, #1
 8017936:	d0f9      	beq.n	801792c <__gethex+0x66>
 8017938:	f7ff ffb0 	bl	801789c <__hexdig_fun>
 801793c:	fab0 f580 	clz	r5, r0
 8017940:	096d      	lsrs	r5, r5, #5
 8017942:	4634      	mov	r4, r6
 8017944:	f04f 0b01 	mov.w	fp, #1
 8017948:	463a      	mov	r2, r7
 801794a:	4616      	mov	r6, r2
 801794c:	3201      	adds	r2, #1
 801794e:	7830      	ldrb	r0, [r6, #0]
 8017950:	f7ff ffa4 	bl	801789c <__hexdig_fun>
 8017954:	2800      	cmp	r0, #0
 8017956:	d1f8      	bne.n	801794a <__gethex+0x84>
 8017958:	9a01      	ldr	r2, [sp, #4]
 801795a:	9903      	ldr	r1, [sp, #12]
 801795c:	4630      	mov	r0, r6
 801795e:	f001 fc11 	bl	8019184 <strncmp>
 8017962:	b950      	cbnz	r0, 801797a <__gethex+0xb4>
 8017964:	b954      	cbnz	r4, 801797c <__gethex+0xb6>
 8017966:	9b01      	ldr	r3, [sp, #4]
 8017968:	18f4      	adds	r4, r6, r3
 801796a:	4622      	mov	r2, r4
 801796c:	4616      	mov	r6, r2
 801796e:	3201      	adds	r2, #1
 8017970:	7830      	ldrb	r0, [r6, #0]
 8017972:	f7ff ff93 	bl	801789c <__hexdig_fun>
 8017976:	2800      	cmp	r0, #0
 8017978:	d1f8      	bne.n	801796c <__gethex+0xa6>
 801797a:	b10c      	cbz	r4, 8017980 <__gethex+0xba>
 801797c:	1ba4      	subs	r4, r4, r6
 801797e:	00a4      	lsls	r4, r4, #2
 8017980:	7833      	ldrb	r3, [r6, #0]
 8017982:	2b50      	cmp	r3, #80	; 0x50
 8017984:	d001      	beq.n	801798a <__gethex+0xc4>
 8017986:	2b70      	cmp	r3, #112	; 0x70
 8017988:	d140      	bne.n	8017a0c <__gethex+0x146>
 801798a:	7873      	ldrb	r3, [r6, #1]
 801798c:	2b2b      	cmp	r3, #43	; 0x2b
 801798e:	d031      	beq.n	80179f4 <__gethex+0x12e>
 8017990:	2b2d      	cmp	r3, #45	; 0x2d
 8017992:	d033      	beq.n	80179fc <__gethex+0x136>
 8017994:	1c71      	adds	r1, r6, #1
 8017996:	f04f 0900 	mov.w	r9, #0
 801799a:	7808      	ldrb	r0, [r1, #0]
 801799c:	f7ff ff7e 	bl	801789c <__hexdig_fun>
 80179a0:	1e43      	subs	r3, r0, #1
 80179a2:	b2db      	uxtb	r3, r3
 80179a4:	2b18      	cmp	r3, #24
 80179a6:	d831      	bhi.n	8017a0c <__gethex+0x146>
 80179a8:	f1a0 0210 	sub.w	r2, r0, #16
 80179ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80179b0:	f7ff ff74 	bl	801789c <__hexdig_fun>
 80179b4:	1e43      	subs	r3, r0, #1
 80179b6:	b2db      	uxtb	r3, r3
 80179b8:	2b18      	cmp	r3, #24
 80179ba:	d922      	bls.n	8017a02 <__gethex+0x13c>
 80179bc:	f1b9 0f00 	cmp.w	r9, #0
 80179c0:	d000      	beq.n	80179c4 <__gethex+0xfe>
 80179c2:	4252      	negs	r2, r2
 80179c4:	4414      	add	r4, r2
 80179c6:	f8ca 1000 	str.w	r1, [sl]
 80179ca:	b30d      	cbz	r5, 8017a10 <__gethex+0x14a>
 80179cc:	f1bb 0f00 	cmp.w	fp, #0
 80179d0:	bf0c      	ite	eq
 80179d2:	2706      	moveq	r7, #6
 80179d4:	2700      	movne	r7, #0
 80179d6:	4638      	mov	r0, r7
 80179d8:	b00b      	add	sp, #44	; 0x2c
 80179da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179de:	f10b 0b01 	add.w	fp, fp, #1
 80179e2:	e78a      	b.n	80178fa <__gethex+0x34>
 80179e4:	2500      	movs	r5, #0
 80179e6:	462c      	mov	r4, r5
 80179e8:	e7ae      	b.n	8017948 <__gethex+0x82>
 80179ea:	463e      	mov	r6, r7
 80179ec:	2501      	movs	r5, #1
 80179ee:	e7c7      	b.n	8017980 <__gethex+0xba>
 80179f0:	4604      	mov	r4, r0
 80179f2:	e7fb      	b.n	80179ec <__gethex+0x126>
 80179f4:	f04f 0900 	mov.w	r9, #0
 80179f8:	1cb1      	adds	r1, r6, #2
 80179fa:	e7ce      	b.n	801799a <__gethex+0xd4>
 80179fc:	f04f 0901 	mov.w	r9, #1
 8017a00:	e7fa      	b.n	80179f8 <__gethex+0x132>
 8017a02:	230a      	movs	r3, #10
 8017a04:	fb03 0202 	mla	r2, r3, r2, r0
 8017a08:	3a10      	subs	r2, #16
 8017a0a:	e7cf      	b.n	80179ac <__gethex+0xe6>
 8017a0c:	4631      	mov	r1, r6
 8017a0e:	e7da      	b.n	80179c6 <__gethex+0x100>
 8017a10:	1bf3      	subs	r3, r6, r7
 8017a12:	3b01      	subs	r3, #1
 8017a14:	4629      	mov	r1, r5
 8017a16:	2b07      	cmp	r3, #7
 8017a18:	dc49      	bgt.n	8017aae <__gethex+0x1e8>
 8017a1a:	9802      	ldr	r0, [sp, #8]
 8017a1c:	f000 fa66 	bl	8017eec <_Balloc>
 8017a20:	9b01      	ldr	r3, [sp, #4]
 8017a22:	f100 0914 	add.w	r9, r0, #20
 8017a26:	f04f 0b00 	mov.w	fp, #0
 8017a2a:	f1c3 0301 	rsb	r3, r3, #1
 8017a2e:	4605      	mov	r5, r0
 8017a30:	f8cd 9010 	str.w	r9, [sp, #16]
 8017a34:	46da      	mov	sl, fp
 8017a36:	9308      	str	r3, [sp, #32]
 8017a38:	42b7      	cmp	r7, r6
 8017a3a:	d33b      	bcc.n	8017ab4 <__gethex+0x1ee>
 8017a3c:	9804      	ldr	r0, [sp, #16]
 8017a3e:	f840 ab04 	str.w	sl, [r0], #4
 8017a42:	eba0 0009 	sub.w	r0, r0, r9
 8017a46:	1080      	asrs	r0, r0, #2
 8017a48:	6128      	str	r0, [r5, #16]
 8017a4a:	0147      	lsls	r7, r0, #5
 8017a4c:	4650      	mov	r0, sl
 8017a4e:	f000 fb11 	bl	8018074 <__hi0bits>
 8017a52:	f8d8 6000 	ldr.w	r6, [r8]
 8017a56:	1a3f      	subs	r7, r7, r0
 8017a58:	42b7      	cmp	r7, r6
 8017a5a:	dd64      	ble.n	8017b26 <__gethex+0x260>
 8017a5c:	1bbf      	subs	r7, r7, r6
 8017a5e:	4639      	mov	r1, r7
 8017a60:	4628      	mov	r0, r5
 8017a62:	f000 fe21 	bl	80186a8 <__any_on>
 8017a66:	4682      	mov	sl, r0
 8017a68:	b178      	cbz	r0, 8017a8a <__gethex+0x1c4>
 8017a6a:	1e7b      	subs	r3, r7, #1
 8017a6c:	1159      	asrs	r1, r3, #5
 8017a6e:	f003 021f 	and.w	r2, r3, #31
 8017a72:	f04f 0a01 	mov.w	sl, #1
 8017a76:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017a7a:	fa0a f202 	lsl.w	r2, sl, r2
 8017a7e:	420a      	tst	r2, r1
 8017a80:	d003      	beq.n	8017a8a <__gethex+0x1c4>
 8017a82:	4553      	cmp	r3, sl
 8017a84:	dc46      	bgt.n	8017b14 <__gethex+0x24e>
 8017a86:	f04f 0a02 	mov.w	sl, #2
 8017a8a:	4639      	mov	r1, r7
 8017a8c:	4628      	mov	r0, r5
 8017a8e:	f7ff fecb 	bl	8017828 <rshift>
 8017a92:	443c      	add	r4, r7
 8017a94:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a98:	42a3      	cmp	r3, r4
 8017a9a:	da52      	bge.n	8017b42 <__gethex+0x27c>
 8017a9c:	4629      	mov	r1, r5
 8017a9e:	9802      	ldr	r0, [sp, #8]
 8017aa0:	f000 fa58 	bl	8017f54 <_Bfree>
 8017aa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	6013      	str	r3, [r2, #0]
 8017aaa:	27a3      	movs	r7, #163	; 0xa3
 8017aac:	e793      	b.n	80179d6 <__gethex+0x110>
 8017aae:	3101      	adds	r1, #1
 8017ab0:	105b      	asrs	r3, r3, #1
 8017ab2:	e7b0      	b.n	8017a16 <__gethex+0x150>
 8017ab4:	1e73      	subs	r3, r6, #1
 8017ab6:	9305      	str	r3, [sp, #20]
 8017ab8:	9a07      	ldr	r2, [sp, #28]
 8017aba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017abe:	4293      	cmp	r3, r2
 8017ac0:	d018      	beq.n	8017af4 <__gethex+0x22e>
 8017ac2:	f1bb 0f20 	cmp.w	fp, #32
 8017ac6:	d107      	bne.n	8017ad8 <__gethex+0x212>
 8017ac8:	9b04      	ldr	r3, [sp, #16]
 8017aca:	f8c3 a000 	str.w	sl, [r3]
 8017ace:	3304      	adds	r3, #4
 8017ad0:	f04f 0a00 	mov.w	sl, #0
 8017ad4:	9304      	str	r3, [sp, #16]
 8017ad6:	46d3      	mov	fp, sl
 8017ad8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017adc:	f7ff fede 	bl	801789c <__hexdig_fun>
 8017ae0:	f000 000f 	and.w	r0, r0, #15
 8017ae4:	fa00 f00b 	lsl.w	r0, r0, fp
 8017ae8:	ea4a 0a00 	orr.w	sl, sl, r0
 8017aec:	f10b 0b04 	add.w	fp, fp, #4
 8017af0:	9b05      	ldr	r3, [sp, #20]
 8017af2:	e00d      	b.n	8017b10 <__gethex+0x24a>
 8017af4:	9b05      	ldr	r3, [sp, #20]
 8017af6:	9a08      	ldr	r2, [sp, #32]
 8017af8:	4413      	add	r3, r2
 8017afa:	42bb      	cmp	r3, r7
 8017afc:	d3e1      	bcc.n	8017ac2 <__gethex+0x1fc>
 8017afe:	4618      	mov	r0, r3
 8017b00:	9a01      	ldr	r2, [sp, #4]
 8017b02:	9903      	ldr	r1, [sp, #12]
 8017b04:	9309      	str	r3, [sp, #36]	; 0x24
 8017b06:	f001 fb3d 	bl	8019184 <strncmp>
 8017b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b0c:	2800      	cmp	r0, #0
 8017b0e:	d1d8      	bne.n	8017ac2 <__gethex+0x1fc>
 8017b10:	461e      	mov	r6, r3
 8017b12:	e791      	b.n	8017a38 <__gethex+0x172>
 8017b14:	1eb9      	subs	r1, r7, #2
 8017b16:	4628      	mov	r0, r5
 8017b18:	f000 fdc6 	bl	80186a8 <__any_on>
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	d0b2      	beq.n	8017a86 <__gethex+0x1c0>
 8017b20:	f04f 0a03 	mov.w	sl, #3
 8017b24:	e7b1      	b.n	8017a8a <__gethex+0x1c4>
 8017b26:	da09      	bge.n	8017b3c <__gethex+0x276>
 8017b28:	1bf7      	subs	r7, r6, r7
 8017b2a:	4629      	mov	r1, r5
 8017b2c:	463a      	mov	r2, r7
 8017b2e:	9802      	ldr	r0, [sp, #8]
 8017b30:	f000 fbdc 	bl	80182ec <__lshift>
 8017b34:	1be4      	subs	r4, r4, r7
 8017b36:	4605      	mov	r5, r0
 8017b38:	f100 0914 	add.w	r9, r0, #20
 8017b3c:	f04f 0a00 	mov.w	sl, #0
 8017b40:	e7a8      	b.n	8017a94 <__gethex+0x1ce>
 8017b42:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017b46:	42a0      	cmp	r0, r4
 8017b48:	dd6a      	ble.n	8017c20 <__gethex+0x35a>
 8017b4a:	1b04      	subs	r4, r0, r4
 8017b4c:	42a6      	cmp	r6, r4
 8017b4e:	dc2e      	bgt.n	8017bae <__gethex+0x2e8>
 8017b50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b54:	2b02      	cmp	r3, #2
 8017b56:	d022      	beq.n	8017b9e <__gethex+0x2d8>
 8017b58:	2b03      	cmp	r3, #3
 8017b5a:	d024      	beq.n	8017ba6 <__gethex+0x2e0>
 8017b5c:	2b01      	cmp	r3, #1
 8017b5e:	d115      	bne.n	8017b8c <__gethex+0x2c6>
 8017b60:	42a6      	cmp	r6, r4
 8017b62:	d113      	bne.n	8017b8c <__gethex+0x2c6>
 8017b64:	2e01      	cmp	r6, #1
 8017b66:	dc0b      	bgt.n	8017b80 <__gethex+0x2ba>
 8017b68:	9a06      	ldr	r2, [sp, #24]
 8017b6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017b6e:	6013      	str	r3, [r2, #0]
 8017b70:	2301      	movs	r3, #1
 8017b72:	612b      	str	r3, [r5, #16]
 8017b74:	f8c9 3000 	str.w	r3, [r9]
 8017b78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017b7a:	2762      	movs	r7, #98	; 0x62
 8017b7c:	601d      	str	r5, [r3, #0]
 8017b7e:	e72a      	b.n	80179d6 <__gethex+0x110>
 8017b80:	1e71      	subs	r1, r6, #1
 8017b82:	4628      	mov	r0, r5
 8017b84:	f000 fd90 	bl	80186a8 <__any_on>
 8017b88:	2800      	cmp	r0, #0
 8017b8a:	d1ed      	bne.n	8017b68 <__gethex+0x2a2>
 8017b8c:	4629      	mov	r1, r5
 8017b8e:	9802      	ldr	r0, [sp, #8]
 8017b90:	f000 f9e0 	bl	8017f54 <_Bfree>
 8017b94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017b96:	2300      	movs	r3, #0
 8017b98:	6013      	str	r3, [r2, #0]
 8017b9a:	2750      	movs	r7, #80	; 0x50
 8017b9c:	e71b      	b.n	80179d6 <__gethex+0x110>
 8017b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d0e1      	beq.n	8017b68 <__gethex+0x2a2>
 8017ba4:	e7f2      	b.n	8017b8c <__gethex+0x2c6>
 8017ba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d1dd      	bne.n	8017b68 <__gethex+0x2a2>
 8017bac:	e7ee      	b.n	8017b8c <__gethex+0x2c6>
 8017bae:	1e67      	subs	r7, r4, #1
 8017bb0:	f1ba 0f00 	cmp.w	sl, #0
 8017bb4:	d131      	bne.n	8017c1a <__gethex+0x354>
 8017bb6:	b127      	cbz	r7, 8017bc2 <__gethex+0x2fc>
 8017bb8:	4639      	mov	r1, r7
 8017bba:	4628      	mov	r0, r5
 8017bbc:	f000 fd74 	bl	80186a8 <__any_on>
 8017bc0:	4682      	mov	sl, r0
 8017bc2:	117a      	asrs	r2, r7, #5
 8017bc4:	2301      	movs	r3, #1
 8017bc6:	f007 071f 	and.w	r7, r7, #31
 8017bca:	fa03 f707 	lsl.w	r7, r3, r7
 8017bce:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017bd2:	4621      	mov	r1, r4
 8017bd4:	421f      	tst	r7, r3
 8017bd6:	4628      	mov	r0, r5
 8017bd8:	bf18      	it	ne
 8017bda:	f04a 0a02 	orrne.w	sl, sl, #2
 8017bde:	1b36      	subs	r6, r6, r4
 8017be0:	f7ff fe22 	bl	8017828 <rshift>
 8017be4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017be8:	2702      	movs	r7, #2
 8017bea:	f1ba 0f00 	cmp.w	sl, #0
 8017bee:	d048      	beq.n	8017c82 <__gethex+0x3bc>
 8017bf0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017bf4:	2b02      	cmp	r3, #2
 8017bf6:	d015      	beq.n	8017c24 <__gethex+0x35e>
 8017bf8:	2b03      	cmp	r3, #3
 8017bfa:	d017      	beq.n	8017c2c <__gethex+0x366>
 8017bfc:	2b01      	cmp	r3, #1
 8017bfe:	d109      	bne.n	8017c14 <__gethex+0x34e>
 8017c00:	f01a 0f02 	tst.w	sl, #2
 8017c04:	d006      	beq.n	8017c14 <__gethex+0x34e>
 8017c06:	f8d9 3000 	ldr.w	r3, [r9]
 8017c0a:	ea4a 0a03 	orr.w	sl, sl, r3
 8017c0e:	f01a 0f01 	tst.w	sl, #1
 8017c12:	d10e      	bne.n	8017c32 <__gethex+0x36c>
 8017c14:	f047 0710 	orr.w	r7, r7, #16
 8017c18:	e033      	b.n	8017c82 <__gethex+0x3bc>
 8017c1a:	f04f 0a01 	mov.w	sl, #1
 8017c1e:	e7d0      	b.n	8017bc2 <__gethex+0x2fc>
 8017c20:	2701      	movs	r7, #1
 8017c22:	e7e2      	b.n	8017bea <__gethex+0x324>
 8017c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c26:	f1c3 0301 	rsb	r3, r3, #1
 8017c2a:	9315      	str	r3, [sp, #84]	; 0x54
 8017c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d0f0      	beq.n	8017c14 <__gethex+0x34e>
 8017c32:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017c36:	f105 0314 	add.w	r3, r5, #20
 8017c3a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017c3e:	eb03 010a 	add.w	r1, r3, sl
 8017c42:	f04f 0c00 	mov.w	ip, #0
 8017c46:	4618      	mov	r0, r3
 8017c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017c50:	d01c      	beq.n	8017c8c <__gethex+0x3c6>
 8017c52:	3201      	adds	r2, #1
 8017c54:	6002      	str	r2, [r0, #0]
 8017c56:	2f02      	cmp	r7, #2
 8017c58:	f105 0314 	add.w	r3, r5, #20
 8017c5c:	d138      	bne.n	8017cd0 <__gethex+0x40a>
 8017c5e:	f8d8 2000 	ldr.w	r2, [r8]
 8017c62:	3a01      	subs	r2, #1
 8017c64:	42b2      	cmp	r2, r6
 8017c66:	d10a      	bne.n	8017c7e <__gethex+0x3b8>
 8017c68:	1171      	asrs	r1, r6, #5
 8017c6a:	2201      	movs	r2, #1
 8017c6c:	f006 061f 	and.w	r6, r6, #31
 8017c70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017c74:	fa02 f606 	lsl.w	r6, r2, r6
 8017c78:	421e      	tst	r6, r3
 8017c7a:	bf18      	it	ne
 8017c7c:	4617      	movne	r7, r2
 8017c7e:	f047 0720 	orr.w	r7, r7, #32
 8017c82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c84:	601d      	str	r5, [r3, #0]
 8017c86:	9b06      	ldr	r3, [sp, #24]
 8017c88:	601c      	str	r4, [r3, #0]
 8017c8a:	e6a4      	b.n	80179d6 <__gethex+0x110>
 8017c8c:	4299      	cmp	r1, r3
 8017c8e:	f843 cc04 	str.w	ip, [r3, #-4]
 8017c92:	d8d8      	bhi.n	8017c46 <__gethex+0x380>
 8017c94:	68ab      	ldr	r3, [r5, #8]
 8017c96:	4599      	cmp	r9, r3
 8017c98:	db12      	blt.n	8017cc0 <__gethex+0x3fa>
 8017c9a:	6869      	ldr	r1, [r5, #4]
 8017c9c:	9802      	ldr	r0, [sp, #8]
 8017c9e:	3101      	adds	r1, #1
 8017ca0:	f000 f924 	bl	8017eec <_Balloc>
 8017ca4:	692a      	ldr	r2, [r5, #16]
 8017ca6:	3202      	adds	r2, #2
 8017ca8:	f105 010c 	add.w	r1, r5, #12
 8017cac:	4683      	mov	fp, r0
 8017cae:	0092      	lsls	r2, r2, #2
 8017cb0:	300c      	adds	r0, #12
 8017cb2:	f7fd f9c5 	bl	8015040 <memcpy>
 8017cb6:	4629      	mov	r1, r5
 8017cb8:	9802      	ldr	r0, [sp, #8]
 8017cba:	f000 f94b 	bl	8017f54 <_Bfree>
 8017cbe:	465d      	mov	r5, fp
 8017cc0:	692b      	ldr	r3, [r5, #16]
 8017cc2:	1c5a      	adds	r2, r3, #1
 8017cc4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017cc8:	612a      	str	r2, [r5, #16]
 8017cca:	2201      	movs	r2, #1
 8017ccc:	615a      	str	r2, [r3, #20]
 8017cce:	e7c2      	b.n	8017c56 <__gethex+0x390>
 8017cd0:	692a      	ldr	r2, [r5, #16]
 8017cd2:	454a      	cmp	r2, r9
 8017cd4:	dd0b      	ble.n	8017cee <__gethex+0x428>
 8017cd6:	2101      	movs	r1, #1
 8017cd8:	4628      	mov	r0, r5
 8017cda:	f7ff fda5 	bl	8017828 <rshift>
 8017cde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017ce2:	3401      	adds	r4, #1
 8017ce4:	42a3      	cmp	r3, r4
 8017ce6:	f6ff aed9 	blt.w	8017a9c <__gethex+0x1d6>
 8017cea:	2701      	movs	r7, #1
 8017cec:	e7c7      	b.n	8017c7e <__gethex+0x3b8>
 8017cee:	f016 061f 	ands.w	r6, r6, #31
 8017cf2:	d0fa      	beq.n	8017cea <__gethex+0x424>
 8017cf4:	449a      	add	sl, r3
 8017cf6:	f1c6 0620 	rsb	r6, r6, #32
 8017cfa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017cfe:	f000 f9b9 	bl	8018074 <__hi0bits>
 8017d02:	42b0      	cmp	r0, r6
 8017d04:	dbe7      	blt.n	8017cd6 <__gethex+0x410>
 8017d06:	e7f0      	b.n	8017cea <__gethex+0x424>

08017d08 <L_shift>:
 8017d08:	f1c2 0208 	rsb	r2, r2, #8
 8017d0c:	0092      	lsls	r2, r2, #2
 8017d0e:	b570      	push	{r4, r5, r6, lr}
 8017d10:	f1c2 0620 	rsb	r6, r2, #32
 8017d14:	6843      	ldr	r3, [r0, #4]
 8017d16:	6804      	ldr	r4, [r0, #0]
 8017d18:	fa03 f506 	lsl.w	r5, r3, r6
 8017d1c:	432c      	orrs	r4, r5
 8017d1e:	40d3      	lsrs	r3, r2
 8017d20:	6004      	str	r4, [r0, #0]
 8017d22:	f840 3f04 	str.w	r3, [r0, #4]!
 8017d26:	4288      	cmp	r0, r1
 8017d28:	d3f4      	bcc.n	8017d14 <L_shift+0xc>
 8017d2a:	bd70      	pop	{r4, r5, r6, pc}

08017d2c <__match>:
 8017d2c:	b530      	push	{r4, r5, lr}
 8017d2e:	6803      	ldr	r3, [r0, #0]
 8017d30:	3301      	adds	r3, #1
 8017d32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d36:	b914      	cbnz	r4, 8017d3e <__match+0x12>
 8017d38:	6003      	str	r3, [r0, #0]
 8017d3a:	2001      	movs	r0, #1
 8017d3c:	bd30      	pop	{r4, r5, pc}
 8017d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017d46:	2d19      	cmp	r5, #25
 8017d48:	bf98      	it	ls
 8017d4a:	3220      	addls	r2, #32
 8017d4c:	42a2      	cmp	r2, r4
 8017d4e:	d0f0      	beq.n	8017d32 <__match+0x6>
 8017d50:	2000      	movs	r0, #0
 8017d52:	e7f3      	b.n	8017d3c <__match+0x10>

08017d54 <__hexnan>:
 8017d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d58:	680b      	ldr	r3, [r1, #0]
 8017d5a:	6801      	ldr	r1, [r0, #0]
 8017d5c:	115f      	asrs	r7, r3, #5
 8017d5e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017d62:	f013 031f 	ands.w	r3, r3, #31
 8017d66:	b087      	sub	sp, #28
 8017d68:	bf18      	it	ne
 8017d6a:	3704      	addne	r7, #4
 8017d6c:	2500      	movs	r5, #0
 8017d6e:	1f3e      	subs	r6, r7, #4
 8017d70:	4682      	mov	sl, r0
 8017d72:	4690      	mov	r8, r2
 8017d74:	9301      	str	r3, [sp, #4]
 8017d76:	f847 5c04 	str.w	r5, [r7, #-4]
 8017d7a:	46b1      	mov	r9, r6
 8017d7c:	4634      	mov	r4, r6
 8017d7e:	9502      	str	r5, [sp, #8]
 8017d80:	46ab      	mov	fp, r5
 8017d82:	784a      	ldrb	r2, [r1, #1]
 8017d84:	1c4b      	adds	r3, r1, #1
 8017d86:	9303      	str	r3, [sp, #12]
 8017d88:	b342      	cbz	r2, 8017ddc <__hexnan+0x88>
 8017d8a:	4610      	mov	r0, r2
 8017d8c:	9105      	str	r1, [sp, #20]
 8017d8e:	9204      	str	r2, [sp, #16]
 8017d90:	f7ff fd84 	bl	801789c <__hexdig_fun>
 8017d94:	2800      	cmp	r0, #0
 8017d96:	d143      	bne.n	8017e20 <__hexnan+0xcc>
 8017d98:	9a04      	ldr	r2, [sp, #16]
 8017d9a:	9905      	ldr	r1, [sp, #20]
 8017d9c:	2a20      	cmp	r2, #32
 8017d9e:	d818      	bhi.n	8017dd2 <__hexnan+0x7e>
 8017da0:	9b02      	ldr	r3, [sp, #8]
 8017da2:	459b      	cmp	fp, r3
 8017da4:	dd13      	ble.n	8017dce <__hexnan+0x7a>
 8017da6:	454c      	cmp	r4, r9
 8017da8:	d206      	bcs.n	8017db8 <__hexnan+0x64>
 8017daa:	2d07      	cmp	r5, #7
 8017dac:	dc04      	bgt.n	8017db8 <__hexnan+0x64>
 8017dae:	462a      	mov	r2, r5
 8017db0:	4649      	mov	r1, r9
 8017db2:	4620      	mov	r0, r4
 8017db4:	f7ff ffa8 	bl	8017d08 <L_shift>
 8017db8:	4544      	cmp	r4, r8
 8017dba:	d944      	bls.n	8017e46 <__hexnan+0xf2>
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	f1a4 0904 	sub.w	r9, r4, #4
 8017dc2:	f844 3c04 	str.w	r3, [r4, #-4]
 8017dc6:	f8cd b008 	str.w	fp, [sp, #8]
 8017dca:	464c      	mov	r4, r9
 8017dcc:	461d      	mov	r5, r3
 8017dce:	9903      	ldr	r1, [sp, #12]
 8017dd0:	e7d7      	b.n	8017d82 <__hexnan+0x2e>
 8017dd2:	2a29      	cmp	r2, #41	; 0x29
 8017dd4:	d14a      	bne.n	8017e6c <__hexnan+0x118>
 8017dd6:	3102      	adds	r1, #2
 8017dd8:	f8ca 1000 	str.w	r1, [sl]
 8017ddc:	f1bb 0f00 	cmp.w	fp, #0
 8017de0:	d044      	beq.n	8017e6c <__hexnan+0x118>
 8017de2:	454c      	cmp	r4, r9
 8017de4:	d206      	bcs.n	8017df4 <__hexnan+0xa0>
 8017de6:	2d07      	cmp	r5, #7
 8017de8:	dc04      	bgt.n	8017df4 <__hexnan+0xa0>
 8017dea:	462a      	mov	r2, r5
 8017dec:	4649      	mov	r1, r9
 8017dee:	4620      	mov	r0, r4
 8017df0:	f7ff ff8a 	bl	8017d08 <L_shift>
 8017df4:	4544      	cmp	r4, r8
 8017df6:	d928      	bls.n	8017e4a <__hexnan+0xf6>
 8017df8:	4643      	mov	r3, r8
 8017dfa:	f854 2b04 	ldr.w	r2, [r4], #4
 8017dfe:	f843 2b04 	str.w	r2, [r3], #4
 8017e02:	42a6      	cmp	r6, r4
 8017e04:	d2f9      	bcs.n	8017dfa <__hexnan+0xa6>
 8017e06:	2200      	movs	r2, #0
 8017e08:	f843 2b04 	str.w	r2, [r3], #4
 8017e0c:	429e      	cmp	r6, r3
 8017e0e:	d2fb      	bcs.n	8017e08 <__hexnan+0xb4>
 8017e10:	6833      	ldr	r3, [r6, #0]
 8017e12:	b91b      	cbnz	r3, 8017e1c <__hexnan+0xc8>
 8017e14:	4546      	cmp	r6, r8
 8017e16:	d127      	bne.n	8017e68 <__hexnan+0x114>
 8017e18:	2301      	movs	r3, #1
 8017e1a:	6033      	str	r3, [r6, #0]
 8017e1c:	2005      	movs	r0, #5
 8017e1e:	e026      	b.n	8017e6e <__hexnan+0x11a>
 8017e20:	3501      	adds	r5, #1
 8017e22:	2d08      	cmp	r5, #8
 8017e24:	f10b 0b01 	add.w	fp, fp, #1
 8017e28:	dd06      	ble.n	8017e38 <__hexnan+0xe4>
 8017e2a:	4544      	cmp	r4, r8
 8017e2c:	d9cf      	bls.n	8017dce <__hexnan+0x7a>
 8017e2e:	2300      	movs	r3, #0
 8017e30:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e34:	2501      	movs	r5, #1
 8017e36:	3c04      	subs	r4, #4
 8017e38:	6822      	ldr	r2, [r4, #0]
 8017e3a:	f000 000f 	and.w	r0, r0, #15
 8017e3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017e42:	6020      	str	r0, [r4, #0]
 8017e44:	e7c3      	b.n	8017dce <__hexnan+0x7a>
 8017e46:	2508      	movs	r5, #8
 8017e48:	e7c1      	b.n	8017dce <__hexnan+0x7a>
 8017e4a:	9b01      	ldr	r3, [sp, #4]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d0df      	beq.n	8017e10 <__hexnan+0xbc>
 8017e50:	f04f 32ff 	mov.w	r2, #4294967295
 8017e54:	f1c3 0320 	rsb	r3, r3, #32
 8017e58:	fa22 f303 	lsr.w	r3, r2, r3
 8017e5c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017e60:	401a      	ands	r2, r3
 8017e62:	f847 2c04 	str.w	r2, [r7, #-4]
 8017e66:	e7d3      	b.n	8017e10 <__hexnan+0xbc>
 8017e68:	3e04      	subs	r6, #4
 8017e6a:	e7d1      	b.n	8017e10 <__hexnan+0xbc>
 8017e6c:	2004      	movs	r0, #4
 8017e6e:	b007      	add	sp, #28
 8017e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e74 <__locale_ctype_ptr_l>:
 8017e74:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017e78:	4770      	bx	lr
	...

08017e7c <__locale_ctype_ptr>:
 8017e7c:	4b04      	ldr	r3, [pc, #16]	; (8017e90 <__locale_ctype_ptr+0x14>)
 8017e7e:	4a05      	ldr	r2, [pc, #20]	; (8017e94 <__locale_ctype_ptr+0x18>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	6a1b      	ldr	r3, [r3, #32]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	bf08      	it	eq
 8017e88:	4613      	moveq	r3, r2
 8017e8a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017e8e:	4770      	bx	lr
 8017e90:	2000000c 	.word	0x2000000c
 8017e94:	20000070 	.word	0x20000070

08017e98 <__localeconv_l>:
 8017e98:	30f0      	adds	r0, #240	; 0xf0
 8017e9a:	4770      	bx	lr

08017e9c <_localeconv_r>:
 8017e9c:	4b04      	ldr	r3, [pc, #16]	; (8017eb0 <_localeconv_r+0x14>)
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	6a18      	ldr	r0, [r3, #32]
 8017ea2:	4b04      	ldr	r3, [pc, #16]	; (8017eb4 <_localeconv_r+0x18>)
 8017ea4:	2800      	cmp	r0, #0
 8017ea6:	bf08      	it	eq
 8017ea8:	4618      	moveq	r0, r3
 8017eaa:	30f0      	adds	r0, #240	; 0xf0
 8017eac:	4770      	bx	lr
 8017eae:	bf00      	nop
 8017eb0:	2000000c 	.word	0x2000000c
 8017eb4:	20000070 	.word	0x20000070

08017eb8 <malloc>:
 8017eb8:	4b02      	ldr	r3, [pc, #8]	; (8017ec4 <malloc+0xc>)
 8017eba:	4601      	mov	r1, r0
 8017ebc:	6818      	ldr	r0, [r3, #0]
 8017ebe:	f000 bc71 	b.w	80187a4 <_malloc_r>
 8017ec2:	bf00      	nop
 8017ec4:	2000000c 	.word	0x2000000c

08017ec8 <__ascii_mbtowc>:
 8017ec8:	b082      	sub	sp, #8
 8017eca:	b901      	cbnz	r1, 8017ece <__ascii_mbtowc+0x6>
 8017ecc:	a901      	add	r1, sp, #4
 8017ece:	b142      	cbz	r2, 8017ee2 <__ascii_mbtowc+0x1a>
 8017ed0:	b14b      	cbz	r3, 8017ee6 <__ascii_mbtowc+0x1e>
 8017ed2:	7813      	ldrb	r3, [r2, #0]
 8017ed4:	600b      	str	r3, [r1, #0]
 8017ed6:	7812      	ldrb	r2, [r2, #0]
 8017ed8:	1c10      	adds	r0, r2, #0
 8017eda:	bf18      	it	ne
 8017edc:	2001      	movne	r0, #1
 8017ede:	b002      	add	sp, #8
 8017ee0:	4770      	bx	lr
 8017ee2:	4610      	mov	r0, r2
 8017ee4:	e7fb      	b.n	8017ede <__ascii_mbtowc+0x16>
 8017ee6:	f06f 0001 	mvn.w	r0, #1
 8017eea:	e7f8      	b.n	8017ede <__ascii_mbtowc+0x16>

08017eec <_Balloc>:
 8017eec:	b570      	push	{r4, r5, r6, lr}
 8017eee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017ef0:	4604      	mov	r4, r0
 8017ef2:	460e      	mov	r6, r1
 8017ef4:	b93d      	cbnz	r5, 8017f06 <_Balloc+0x1a>
 8017ef6:	2010      	movs	r0, #16
 8017ef8:	f7ff ffde 	bl	8017eb8 <malloc>
 8017efc:	6260      	str	r0, [r4, #36]	; 0x24
 8017efe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017f02:	6005      	str	r5, [r0, #0]
 8017f04:	60c5      	str	r5, [r0, #12]
 8017f06:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017f08:	68eb      	ldr	r3, [r5, #12]
 8017f0a:	b183      	cbz	r3, 8017f2e <_Balloc+0x42>
 8017f0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f0e:	68db      	ldr	r3, [r3, #12]
 8017f10:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017f14:	b9b8      	cbnz	r0, 8017f46 <_Balloc+0x5a>
 8017f16:	2101      	movs	r1, #1
 8017f18:	fa01 f506 	lsl.w	r5, r1, r6
 8017f1c:	1d6a      	adds	r2, r5, #5
 8017f1e:	0092      	lsls	r2, r2, #2
 8017f20:	4620      	mov	r0, r4
 8017f22:	f000 fbe2 	bl	80186ea <_calloc_r>
 8017f26:	b160      	cbz	r0, 8017f42 <_Balloc+0x56>
 8017f28:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017f2c:	e00e      	b.n	8017f4c <_Balloc+0x60>
 8017f2e:	2221      	movs	r2, #33	; 0x21
 8017f30:	2104      	movs	r1, #4
 8017f32:	4620      	mov	r0, r4
 8017f34:	f000 fbd9 	bl	80186ea <_calloc_r>
 8017f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f3a:	60e8      	str	r0, [r5, #12]
 8017f3c:	68db      	ldr	r3, [r3, #12]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d1e4      	bne.n	8017f0c <_Balloc+0x20>
 8017f42:	2000      	movs	r0, #0
 8017f44:	bd70      	pop	{r4, r5, r6, pc}
 8017f46:	6802      	ldr	r2, [r0, #0]
 8017f48:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017f52:	e7f7      	b.n	8017f44 <_Balloc+0x58>

08017f54 <_Bfree>:
 8017f54:	b570      	push	{r4, r5, r6, lr}
 8017f56:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017f58:	4606      	mov	r6, r0
 8017f5a:	460d      	mov	r5, r1
 8017f5c:	b93c      	cbnz	r4, 8017f6e <_Bfree+0x1a>
 8017f5e:	2010      	movs	r0, #16
 8017f60:	f7ff ffaa 	bl	8017eb8 <malloc>
 8017f64:	6270      	str	r0, [r6, #36]	; 0x24
 8017f66:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017f6a:	6004      	str	r4, [r0, #0]
 8017f6c:	60c4      	str	r4, [r0, #12]
 8017f6e:	b13d      	cbz	r5, 8017f80 <_Bfree+0x2c>
 8017f70:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017f72:	686a      	ldr	r2, [r5, #4]
 8017f74:	68db      	ldr	r3, [r3, #12]
 8017f76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017f7a:	6029      	str	r1, [r5, #0]
 8017f7c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017f80:	bd70      	pop	{r4, r5, r6, pc}

08017f82 <__multadd>:
 8017f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f86:	690d      	ldr	r5, [r1, #16]
 8017f88:	461f      	mov	r7, r3
 8017f8a:	4606      	mov	r6, r0
 8017f8c:	460c      	mov	r4, r1
 8017f8e:	f101 0c14 	add.w	ip, r1, #20
 8017f92:	2300      	movs	r3, #0
 8017f94:	f8dc 0000 	ldr.w	r0, [ip]
 8017f98:	b281      	uxth	r1, r0
 8017f9a:	fb02 7101 	mla	r1, r2, r1, r7
 8017f9e:	0c0f      	lsrs	r7, r1, #16
 8017fa0:	0c00      	lsrs	r0, r0, #16
 8017fa2:	fb02 7000 	mla	r0, r2, r0, r7
 8017fa6:	b289      	uxth	r1, r1
 8017fa8:	3301      	adds	r3, #1
 8017faa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017fae:	429d      	cmp	r5, r3
 8017fb0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017fb4:	f84c 1b04 	str.w	r1, [ip], #4
 8017fb8:	dcec      	bgt.n	8017f94 <__multadd+0x12>
 8017fba:	b1d7      	cbz	r7, 8017ff2 <__multadd+0x70>
 8017fbc:	68a3      	ldr	r3, [r4, #8]
 8017fbe:	42ab      	cmp	r3, r5
 8017fc0:	dc12      	bgt.n	8017fe8 <__multadd+0x66>
 8017fc2:	6861      	ldr	r1, [r4, #4]
 8017fc4:	4630      	mov	r0, r6
 8017fc6:	3101      	adds	r1, #1
 8017fc8:	f7ff ff90 	bl	8017eec <_Balloc>
 8017fcc:	6922      	ldr	r2, [r4, #16]
 8017fce:	3202      	adds	r2, #2
 8017fd0:	f104 010c 	add.w	r1, r4, #12
 8017fd4:	4680      	mov	r8, r0
 8017fd6:	0092      	lsls	r2, r2, #2
 8017fd8:	300c      	adds	r0, #12
 8017fda:	f7fd f831 	bl	8015040 <memcpy>
 8017fde:	4621      	mov	r1, r4
 8017fe0:	4630      	mov	r0, r6
 8017fe2:	f7ff ffb7 	bl	8017f54 <_Bfree>
 8017fe6:	4644      	mov	r4, r8
 8017fe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017fec:	3501      	adds	r5, #1
 8017fee:	615f      	str	r7, [r3, #20]
 8017ff0:	6125      	str	r5, [r4, #16]
 8017ff2:	4620      	mov	r0, r4
 8017ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017ff8 <__s2b>:
 8017ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ffc:	460c      	mov	r4, r1
 8017ffe:	4615      	mov	r5, r2
 8018000:	461f      	mov	r7, r3
 8018002:	2209      	movs	r2, #9
 8018004:	3308      	adds	r3, #8
 8018006:	4606      	mov	r6, r0
 8018008:	fb93 f3f2 	sdiv	r3, r3, r2
 801800c:	2100      	movs	r1, #0
 801800e:	2201      	movs	r2, #1
 8018010:	429a      	cmp	r2, r3
 8018012:	db20      	blt.n	8018056 <__s2b+0x5e>
 8018014:	4630      	mov	r0, r6
 8018016:	f7ff ff69 	bl	8017eec <_Balloc>
 801801a:	9b08      	ldr	r3, [sp, #32]
 801801c:	6143      	str	r3, [r0, #20]
 801801e:	2d09      	cmp	r5, #9
 8018020:	f04f 0301 	mov.w	r3, #1
 8018024:	6103      	str	r3, [r0, #16]
 8018026:	dd19      	ble.n	801805c <__s2b+0x64>
 8018028:	f104 0809 	add.w	r8, r4, #9
 801802c:	46c1      	mov	r9, r8
 801802e:	442c      	add	r4, r5
 8018030:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018034:	4601      	mov	r1, r0
 8018036:	3b30      	subs	r3, #48	; 0x30
 8018038:	220a      	movs	r2, #10
 801803a:	4630      	mov	r0, r6
 801803c:	f7ff ffa1 	bl	8017f82 <__multadd>
 8018040:	45a1      	cmp	r9, r4
 8018042:	d1f5      	bne.n	8018030 <__s2b+0x38>
 8018044:	eb08 0405 	add.w	r4, r8, r5
 8018048:	3c08      	subs	r4, #8
 801804a:	1b2d      	subs	r5, r5, r4
 801804c:	1963      	adds	r3, r4, r5
 801804e:	42bb      	cmp	r3, r7
 8018050:	db07      	blt.n	8018062 <__s2b+0x6a>
 8018052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018056:	0052      	lsls	r2, r2, #1
 8018058:	3101      	adds	r1, #1
 801805a:	e7d9      	b.n	8018010 <__s2b+0x18>
 801805c:	340a      	adds	r4, #10
 801805e:	2509      	movs	r5, #9
 8018060:	e7f3      	b.n	801804a <__s2b+0x52>
 8018062:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018066:	4601      	mov	r1, r0
 8018068:	3b30      	subs	r3, #48	; 0x30
 801806a:	220a      	movs	r2, #10
 801806c:	4630      	mov	r0, r6
 801806e:	f7ff ff88 	bl	8017f82 <__multadd>
 8018072:	e7eb      	b.n	801804c <__s2b+0x54>

08018074 <__hi0bits>:
 8018074:	0c02      	lsrs	r2, r0, #16
 8018076:	0412      	lsls	r2, r2, #16
 8018078:	4603      	mov	r3, r0
 801807a:	b9b2      	cbnz	r2, 80180aa <__hi0bits+0x36>
 801807c:	0403      	lsls	r3, r0, #16
 801807e:	2010      	movs	r0, #16
 8018080:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018084:	bf04      	itt	eq
 8018086:	021b      	lsleq	r3, r3, #8
 8018088:	3008      	addeq	r0, #8
 801808a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801808e:	bf04      	itt	eq
 8018090:	011b      	lsleq	r3, r3, #4
 8018092:	3004      	addeq	r0, #4
 8018094:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018098:	bf04      	itt	eq
 801809a:	009b      	lsleq	r3, r3, #2
 801809c:	3002      	addeq	r0, #2
 801809e:	2b00      	cmp	r3, #0
 80180a0:	db06      	blt.n	80180b0 <__hi0bits+0x3c>
 80180a2:	005b      	lsls	r3, r3, #1
 80180a4:	d503      	bpl.n	80180ae <__hi0bits+0x3a>
 80180a6:	3001      	adds	r0, #1
 80180a8:	4770      	bx	lr
 80180aa:	2000      	movs	r0, #0
 80180ac:	e7e8      	b.n	8018080 <__hi0bits+0xc>
 80180ae:	2020      	movs	r0, #32
 80180b0:	4770      	bx	lr

080180b2 <__lo0bits>:
 80180b2:	6803      	ldr	r3, [r0, #0]
 80180b4:	f013 0207 	ands.w	r2, r3, #7
 80180b8:	4601      	mov	r1, r0
 80180ba:	d00b      	beq.n	80180d4 <__lo0bits+0x22>
 80180bc:	07da      	lsls	r2, r3, #31
 80180be:	d423      	bmi.n	8018108 <__lo0bits+0x56>
 80180c0:	0798      	lsls	r0, r3, #30
 80180c2:	bf49      	itett	mi
 80180c4:	085b      	lsrmi	r3, r3, #1
 80180c6:	089b      	lsrpl	r3, r3, #2
 80180c8:	2001      	movmi	r0, #1
 80180ca:	600b      	strmi	r3, [r1, #0]
 80180cc:	bf5c      	itt	pl
 80180ce:	600b      	strpl	r3, [r1, #0]
 80180d0:	2002      	movpl	r0, #2
 80180d2:	4770      	bx	lr
 80180d4:	b298      	uxth	r0, r3
 80180d6:	b9a8      	cbnz	r0, 8018104 <__lo0bits+0x52>
 80180d8:	0c1b      	lsrs	r3, r3, #16
 80180da:	2010      	movs	r0, #16
 80180dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80180e0:	bf04      	itt	eq
 80180e2:	0a1b      	lsreq	r3, r3, #8
 80180e4:	3008      	addeq	r0, #8
 80180e6:	071a      	lsls	r2, r3, #28
 80180e8:	bf04      	itt	eq
 80180ea:	091b      	lsreq	r3, r3, #4
 80180ec:	3004      	addeq	r0, #4
 80180ee:	079a      	lsls	r2, r3, #30
 80180f0:	bf04      	itt	eq
 80180f2:	089b      	lsreq	r3, r3, #2
 80180f4:	3002      	addeq	r0, #2
 80180f6:	07da      	lsls	r2, r3, #31
 80180f8:	d402      	bmi.n	8018100 <__lo0bits+0x4e>
 80180fa:	085b      	lsrs	r3, r3, #1
 80180fc:	d006      	beq.n	801810c <__lo0bits+0x5a>
 80180fe:	3001      	adds	r0, #1
 8018100:	600b      	str	r3, [r1, #0]
 8018102:	4770      	bx	lr
 8018104:	4610      	mov	r0, r2
 8018106:	e7e9      	b.n	80180dc <__lo0bits+0x2a>
 8018108:	2000      	movs	r0, #0
 801810a:	4770      	bx	lr
 801810c:	2020      	movs	r0, #32
 801810e:	4770      	bx	lr

08018110 <__i2b>:
 8018110:	b510      	push	{r4, lr}
 8018112:	460c      	mov	r4, r1
 8018114:	2101      	movs	r1, #1
 8018116:	f7ff fee9 	bl	8017eec <_Balloc>
 801811a:	2201      	movs	r2, #1
 801811c:	6144      	str	r4, [r0, #20]
 801811e:	6102      	str	r2, [r0, #16]
 8018120:	bd10      	pop	{r4, pc}

08018122 <__multiply>:
 8018122:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018126:	4614      	mov	r4, r2
 8018128:	690a      	ldr	r2, [r1, #16]
 801812a:	6923      	ldr	r3, [r4, #16]
 801812c:	429a      	cmp	r2, r3
 801812e:	bfb8      	it	lt
 8018130:	460b      	movlt	r3, r1
 8018132:	4688      	mov	r8, r1
 8018134:	bfbc      	itt	lt
 8018136:	46a0      	movlt	r8, r4
 8018138:	461c      	movlt	r4, r3
 801813a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801813e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018142:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018146:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801814a:	eb07 0609 	add.w	r6, r7, r9
 801814e:	42b3      	cmp	r3, r6
 8018150:	bfb8      	it	lt
 8018152:	3101      	addlt	r1, #1
 8018154:	f7ff feca 	bl	8017eec <_Balloc>
 8018158:	f100 0514 	add.w	r5, r0, #20
 801815c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018160:	462b      	mov	r3, r5
 8018162:	2200      	movs	r2, #0
 8018164:	4573      	cmp	r3, lr
 8018166:	d316      	bcc.n	8018196 <__multiply+0x74>
 8018168:	f104 0214 	add.w	r2, r4, #20
 801816c:	f108 0114 	add.w	r1, r8, #20
 8018170:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018174:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018178:	9300      	str	r3, [sp, #0]
 801817a:	9b00      	ldr	r3, [sp, #0]
 801817c:	9201      	str	r2, [sp, #4]
 801817e:	4293      	cmp	r3, r2
 8018180:	d80c      	bhi.n	801819c <__multiply+0x7a>
 8018182:	2e00      	cmp	r6, #0
 8018184:	dd03      	ble.n	801818e <__multiply+0x6c>
 8018186:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801818a:	2b00      	cmp	r3, #0
 801818c:	d05d      	beq.n	801824a <__multiply+0x128>
 801818e:	6106      	str	r6, [r0, #16]
 8018190:	b003      	add	sp, #12
 8018192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018196:	f843 2b04 	str.w	r2, [r3], #4
 801819a:	e7e3      	b.n	8018164 <__multiply+0x42>
 801819c:	f8b2 b000 	ldrh.w	fp, [r2]
 80181a0:	f1bb 0f00 	cmp.w	fp, #0
 80181a4:	d023      	beq.n	80181ee <__multiply+0xcc>
 80181a6:	4689      	mov	r9, r1
 80181a8:	46ac      	mov	ip, r5
 80181aa:	f04f 0800 	mov.w	r8, #0
 80181ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80181b2:	f8dc a000 	ldr.w	sl, [ip]
 80181b6:	b2a3      	uxth	r3, r4
 80181b8:	fa1f fa8a 	uxth.w	sl, sl
 80181bc:	fb0b a303 	mla	r3, fp, r3, sl
 80181c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80181c4:	f8dc 4000 	ldr.w	r4, [ip]
 80181c8:	4443      	add	r3, r8
 80181ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80181ce:	fb0b 840a 	mla	r4, fp, sl, r8
 80181d2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80181d6:	46e2      	mov	sl, ip
 80181d8:	b29b      	uxth	r3, r3
 80181da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80181de:	454f      	cmp	r7, r9
 80181e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80181e4:	f84a 3b04 	str.w	r3, [sl], #4
 80181e8:	d82b      	bhi.n	8018242 <__multiply+0x120>
 80181ea:	f8cc 8004 	str.w	r8, [ip, #4]
 80181ee:	9b01      	ldr	r3, [sp, #4]
 80181f0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80181f4:	3204      	adds	r2, #4
 80181f6:	f1ba 0f00 	cmp.w	sl, #0
 80181fa:	d020      	beq.n	801823e <__multiply+0x11c>
 80181fc:	682b      	ldr	r3, [r5, #0]
 80181fe:	4689      	mov	r9, r1
 8018200:	46a8      	mov	r8, r5
 8018202:	f04f 0b00 	mov.w	fp, #0
 8018206:	f8b9 c000 	ldrh.w	ip, [r9]
 801820a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801820e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018212:	445c      	add	r4, fp
 8018214:	46c4      	mov	ip, r8
 8018216:	b29b      	uxth	r3, r3
 8018218:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801821c:	f84c 3b04 	str.w	r3, [ip], #4
 8018220:	f859 3b04 	ldr.w	r3, [r9], #4
 8018224:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018228:	0c1b      	lsrs	r3, r3, #16
 801822a:	fb0a b303 	mla	r3, sl, r3, fp
 801822e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018232:	454f      	cmp	r7, r9
 8018234:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018238:	d805      	bhi.n	8018246 <__multiply+0x124>
 801823a:	f8c8 3004 	str.w	r3, [r8, #4]
 801823e:	3504      	adds	r5, #4
 8018240:	e79b      	b.n	801817a <__multiply+0x58>
 8018242:	46d4      	mov	ip, sl
 8018244:	e7b3      	b.n	80181ae <__multiply+0x8c>
 8018246:	46e0      	mov	r8, ip
 8018248:	e7dd      	b.n	8018206 <__multiply+0xe4>
 801824a:	3e01      	subs	r6, #1
 801824c:	e799      	b.n	8018182 <__multiply+0x60>
	...

08018250 <__pow5mult>:
 8018250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018254:	4615      	mov	r5, r2
 8018256:	f012 0203 	ands.w	r2, r2, #3
 801825a:	4606      	mov	r6, r0
 801825c:	460f      	mov	r7, r1
 801825e:	d007      	beq.n	8018270 <__pow5mult+0x20>
 8018260:	3a01      	subs	r2, #1
 8018262:	4c21      	ldr	r4, [pc, #132]	; (80182e8 <__pow5mult+0x98>)
 8018264:	2300      	movs	r3, #0
 8018266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801826a:	f7ff fe8a 	bl	8017f82 <__multadd>
 801826e:	4607      	mov	r7, r0
 8018270:	10ad      	asrs	r5, r5, #2
 8018272:	d035      	beq.n	80182e0 <__pow5mult+0x90>
 8018274:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018276:	b93c      	cbnz	r4, 8018288 <__pow5mult+0x38>
 8018278:	2010      	movs	r0, #16
 801827a:	f7ff fe1d 	bl	8017eb8 <malloc>
 801827e:	6270      	str	r0, [r6, #36]	; 0x24
 8018280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018284:	6004      	str	r4, [r0, #0]
 8018286:	60c4      	str	r4, [r0, #12]
 8018288:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801828c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018290:	b94c      	cbnz	r4, 80182a6 <__pow5mult+0x56>
 8018292:	f240 2171 	movw	r1, #625	; 0x271
 8018296:	4630      	mov	r0, r6
 8018298:	f7ff ff3a 	bl	8018110 <__i2b>
 801829c:	2300      	movs	r3, #0
 801829e:	f8c8 0008 	str.w	r0, [r8, #8]
 80182a2:	4604      	mov	r4, r0
 80182a4:	6003      	str	r3, [r0, #0]
 80182a6:	f04f 0800 	mov.w	r8, #0
 80182aa:	07eb      	lsls	r3, r5, #31
 80182ac:	d50a      	bpl.n	80182c4 <__pow5mult+0x74>
 80182ae:	4639      	mov	r1, r7
 80182b0:	4622      	mov	r2, r4
 80182b2:	4630      	mov	r0, r6
 80182b4:	f7ff ff35 	bl	8018122 <__multiply>
 80182b8:	4639      	mov	r1, r7
 80182ba:	4681      	mov	r9, r0
 80182bc:	4630      	mov	r0, r6
 80182be:	f7ff fe49 	bl	8017f54 <_Bfree>
 80182c2:	464f      	mov	r7, r9
 80182c4:	106d      	asrs	r5, r5, #1
 80182c6:	d00b      	beq.n	80182e0 <__pow5mult+0x90>
 80182c8:	6820      	ldr	r0, [r4, #0]
 80182ca:	b938      	cbnz	r0, 80182dc <__pow5mult+0x8c>
 80182cc:	4622      	mov	r2, r4
 80182ce:	4621      	mov	r1, r4
 80182d0:	4630      	mov	r0, r6
 80182d2:	f7ff ff26 	bl	8018122 <__multiply>
 80182d6:	6020      	str	r0, [r4, #0]
 80182d8:	f8c0 8000 	str.w	r8, [r0]
 80182dc:	4604      	mov	r4, r0
 80182de:	e7e4      	b.n	80182aa <__pow5mult+0x5a>
 80182e0:	4638      	mov	r0, r7
 80182e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182e6:	bf00      	nop
 80182e8:	08019ec8 	.word	0x08019ec8

080182ec <__lshift>:
 80182ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182f0:	460c      	mov	r4, r1
 80182f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80182f6:	6923      	ldr	r3, [r4, #16]
 80182f8:	6849      	ldr	r1, [r1, #4]
 80182fa:	eb0a 0903 	add.w	r9, sl, r3
 80182fe:	68a3      	ldr	r3, [r4, #8]
 8018300:	4607      	mov	r7, r0
 8018302:	4616      	mov	r6, r2
 8018304:	f109 0501 	add.w	r5, r9, #1
 8018308:	42ab      	cmp	r3, r5
 801830a:	db32      	blt.n	8018372 <__lshift+0x86>
 801830c:	4638      	mov	r0, r7
 801830e:	f7ff fded 	bl	8017eec <_Balloc>
 8018312:	2300      	movs	r3, #0
 8018314:	4680      	mov	r8, r0
 8018316:	f100 0114 	add.w	r1, r0, #20
 801831a:	461a      	mov	r2, r3
 801831c:	4553      	cmp	r3, sl
 801831e:	db2b      	blt.n	8018378 <__lshift+0x8c>
 8018320:	6920      	ldr	r0, [r4, #16]
 8018322:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018326:	f104 0314 	add.w	r3, r4, #20
 801832a:	f016 021f 	ands.w	r2, r6, #31
 801832e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018332:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018336:	d025      	beq.n	8018384 <__lshift+0x98>
 8018338:	f1c2 0e20 	rsb	lr, r2, #32
 801833c:	2000      	movs	r0, #0
 801833e:	681e      	ldr	r6, [r3, #0]
 8018340:	468a      	mov	sl, r1
 8018342:	4096      	lsls	r6, r2
 8018344:	4330      	orrs	r0, r6
 8018346:	f84a 0b04 	str.w	r0, [sl], #4
 801834a:	f853 0b04 	ldr.w	r0, [r3], #4
 801834e:	459c      	cmp	ip, r3
 8018350:	fa20 f00e 	lsr.w	r0, r0, lr
 8018354:	d814      	bhi.n	8018380 <__lshift+0x94>
 8018356:	6048      	str	r0, [r1, #4]
 8018358:	b108      	cbz	r0, 801835e <__lshift+0x72>
 801835a:	f109 0502 	add.w	r5, r9, #2
 801835e:	3d01      	subs	r5, #1
 8018360:	4638      	mov	r0, r7
 8018362:	f8c8 5010 	str.w	r5, [r8, #16]
 8018366:	4621      	mov	r1, r4
 8018368:	f7ff fdf4 	bl	8017f54 <_Bfree>
 801836c:	4640      	mov	r0, r8
 801836e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018372:	3101      	adds	r1, #1
 8018374:	005b      	lsls	r3, r3, #1
 8018376:	e7c7      	b.n	8018308 <__lshift+0x1c>
 8018378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801837c:	3301      	adds	r3, #1
 801837e:	e7cd      	b.n	801831c <__lshift+0x30>
 8018380:	4651      	mov	r1, sl
 8018382:	e7dc      	b.n	801833e <__lshift+0x52>
 8018384:	3904      	subs	r1, #4
 8018386:	f853 2b04 	ldr.w	r2, [r3], #4
 801838a:	f841 2f04 	str.w	r2, [r1, #4]!
 801838e:	459c      	cmp	ip, r3
 8018390:	d8f9      	bhi.n	8018386 <__lshift+0x9a>
 8018392:	e7e4      	b.n	801835e <__lshift+0x72>

08018394 <__mcmp>:
 8018394:	6903      	ldr	r3, [r0, #16]
 8018396:	690a      	ldr	r2, [r1, #16]
 8018398:	1a9b      	subs	r3, r3, r2
 801839a:	b530      	push	{r4, r5, lr}
 801839c:	d10c      	bne.n	80183b8 <__mcmp+0x24>
 801839e:	0092      	lsls	r2, r2, #2
 80183a0:	3014      	adds	r0, #20
 80183a2:	3114      	adds	r1, #20
 80183a4:	1884      	adds	r4, r0, r2
 80183a6:	4411      	add	r1, r2
 80183a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80183ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80183b0:	4295      	cmp	r5, r2
 80183b2:	d003      	beq.n	80183bc <__mcmp+0x28>
 80183b4:	d305      	bcc.n	80183c2 <__mcmp+0x2e>
 80183b6:	2301      	movs	r3, #1
 80183b8:	4618      	mov	r0, r3
 80183ba:	bd30      	pop	{r4, r5, pc}
 80183bc:	42a0      	cmp	r0, r4
 80183be:	d3f3      	bcc.n	80183a8 <__mcmp+0x14>
 80183c0:	e7fa      	b.n	80183b8 <__mcmp+0x24>
 80183c2:	f04f 33ff 	mov.w	r3, #4294967295
 80183c6:	e7f7      	b.n	80183b8 <__mcmp+0x24>

080183c8 <__mdiff>:
 80183c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183cc:	460d      	mov	r5, r1
 80183ce:	4607      	mov	r7, r0
 80183d0:	4611      	mov	r1, r2
 80183d2:	4628      	mov	r0, r5
 80183d4:	4614      	mov	r4, r2
 80183d6:	f7ff ffdd 	bl	8018394 <__mcmp>
 80183da:	1e06      	subs	r6, r0, #0
 80183dc:	d108      	bne.n	80183f0 <__mdiff+0x28>
 80183de:	4631      	mov	r1, r6
 80183e0:	4638      	mov	r0, r7
 80183e2:	f7ff fd83 	bl	8017eec <_Balloc>
 80183e6:	2301      	movs	r3, #1
 80183e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80183ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183f0:	bfa4      	itt	ge
 80183f2:	4623      	movge	r3, r4
 80183f4:	462c      	movge	r4, r5
 80183f6:	4638      	mov	r0, r7
 80183f8:	6861      	ldr	r1, [r4, #4]
 80183fa:	bfa6      	itte	ge
 80183fc:	461d      	movge	r5, r3
 80183fe:	2600      	movge	r6, #0
 8018400:	2601      	movlt	r6, #1
 8018402:	f7ff fd73 	bl	8017eec <_Balloc>
 8018406:	692b      	ldr	r3, [r5, #16]
 8018408:	60c6      	str	r6, [r0, #12]
 801840a:	6926      	ldr	r6, [r4, #16]
 801840c:	f105 0914 	add.w	r9, r5, #20
 8018410:	f104 0214 	add.w	r2, r4, #20
 8018414:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018418:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801841c:	f100 0514 	add.w	r5, r0, #20
 8018420:	f04f 0e00 	mov.w	lr, #0
 8018424:	f852 ab04 	ldr.w	sl, [r2], #4
 8018428:	f859 4b04 	ldr.w	r4, [r9], #4
 801842c:	fa1e f18a 	uxtah	r1, lr, sl
 8018430:	b2a3      	uxth	r3, r4
 8018432:	1ac9      	subs	r1, r1, r3
 8018434:	0c23      	lsrs	r3, r4, #16
 8018436:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801843a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801843e:	b289      	uxth	r1, r1
 8018440:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018444:	45c8      	cmp	r8, r9
 8018446:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801844a:	4694      	mov	ip, r2
 801844c:	f845 3b04 	str.w	r3, [r5], #4
 8018450:	d8e8      	bhi.n	8018424 <__mdiff+0x5c>
 8018452:	45bc      	cmp	ip, r7
 8018454:	d304      	bcc.n	8018460 <__mdiff+0x98>
 8018456:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801845a:	b183      	cbz	r3, 801847e <__mdiff+0xb6>
 801845c:	6106      	str	r6, [r0, #16]
 801845e:	e7c5      	b.n	80183ec <__mdiff+0x24>
 8018460:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018464:	fa1e f381 	uxtah	r3, lr, r1
 8018468:	141a      	asrs	r2, r3, #16
 801846a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801846e:	b29b      	uxth	r3, r3
 8018470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018474:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018478:	f845 3b04 	str.w	r3, [r5], #4
 801847c:	e7e9      	b.n	8018452 <__mdiff+0x8a>
 801847e:	3e01      	subs	r6, #1
 8018480:	e7e9      	b.n	8018456 <__mdiff+0x8e>
	...

08018484 <__ulp>:
 8018484:	4b12      	ldr	r3, [pc, #72]	; (80184d0 <__ulp+0x4c>)
 8018486:	ee10 2a90 	vmov	r2, s1
 801848a:	401a      	ands	r2, r3
 801848c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018490:	2b00      	cmp	r3, #0
 8018492:	dd04      	ble.n	801849e <__ulp+0x1a>
 8018494:	2000      	movs	r0, #0
 8018496:	4619      	mov	r1, r3
 8018498:	ec41 0b10 	vmov	d0, r0, r1
 801849c:	4770      	bx	lr
 801849e:	425b      	negs	r3, r3
 80184a0:	151b      	asrs	r3, r3, #20
 80184a2:	2b13      	cmp	r3, #19
 80184a4:	f04f 0000 	mov.w	r0, #0
 80184a8:	f04f 0100 	mov.w	r1, #0
 80184ac:	dc04      	bgt.n	80184b8 <__ulp+0x34>
 80184ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80184b2:	fa42 f103 	asr.w	r1, r2, r3
 80184b6:	e7ef      	b.n	8018498 <__ulp+0x14>
 80184b8:	3b14      	subs	r3, #20
 80184ba:	2b1e      	cmp	r3, #30
 80184bc:	f04f 0201 	mov.w	r2, #1
 80184c0:	bfda      	itte	le
 80184c2:	f1c3 031f 	rsble	r3, r3, #31
 80184c6:	fa02 f303 	lslle.w	r3, r2, r3
 80184ca:	4613      	movgt	r3, r2
 80184cc:	4618      	mov	r0, r3
 80184ce:	e7e3      	b.n	8018498 <__ulp+0x14>
 80184d0:	7ff00000 	.word	0x7ff00000

080184d4 <__b2d>:
 80184d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184d6:	6905      	ldr	r5, [r0, #16]
 80184d8:	f100 0714 	add.w	r7, r0, #20
 80184dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80184e0:	1f2e      	subs	r6, r5, #4
 80184e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80184e6:	4620      	mov	r0, r4
 80184e8:	f7ff fdc4 	bl	8018074 <__hi0bits>
 80184ec:	f1c0 0320 	rsb	r3, r0, #32
 80184f0:	280a      	cmp	r0, #10
 80184f2:	600b      	str	r3, [r1, #0]
 80184f4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801856c <__b2d+0x98>
 80184f8:	dc14      	bgt.n	8018524 <__b2d+0x50>
 80184fa:	f1c0 0e0b 	rsb	lr, r0, #11
 80184fe:	fa24 f10e 	lsr.w	r1, r4, lr
 8018502:	42b7      	cmp	r7, r6
 8018504:	ea41 030c 	orr.w	r3, r1, ip
 8018508:	bf34      	ite	cc
 801850a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801850e:	2100      	movcs	r1, #0
 8018510:	3015      	adds	r0, #21
 8018512:	fa04 f000 	lsl.w	r0, r4, r0
 8018516:	fa21 f10e 	lsr.w	r1, r1, lr
 801851a:	ea40 0201 	orr.w	r2, r0, r1
 801851e:	ec43 2b10 	vmov	d0, r2, r3
 8018522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018524:	42b7      	cmp	r7, r6
 8018526:	bf3a      	itte	cc
 8018528:	f1a5 0608 	subcc.w	r6, r5, #8
 801852c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018530:	2100      	movcs	r1, #0
 8018532:	380b      	subs	r0, #11
 8018534:	d015      	beq.n	8018562 <__b2d+0x8e>
 8018536:	4084      	lsls	r4, r0
 8018538:	f1c0 0520 	rsb	r5, r0, #32
 801853c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018540:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018544:	42be      	cmp	r6, r7
 8018546:	fa21 fc05 	lsr.w	ip, r1, r5
 801854a:	ea44 030c 	orr.w	r3, r4, ip
 801854e:	bf8c      	ite	hi
 8018550:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018554:	2400      	movls	r4, #0
 8018556:	fa01 f000 	lsl.w	r0, r1, r0
 801855a:	40ec      	lsrs	r4, r5
 801855c:	ea40 0204 	orr.w	r2, r0, r4
 8018560:	e7dd      	b.n	801851e <__b2d+0x4a>
 8018562:	ea44 030c 	orr.w	r3, r4, ip
 8018566:	460a      	mov	r2, r1
 8018568:	e7d9      	b.n	801851e <__b2d+0x4a>
 801856a:	bf00      	nop
 801856c:	3ff00000 	.word	0x3ff00000

08018570 <__d2b>:
 8018570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018574:	460e      	mov	r6, r1
 8018576:	2101      	movs	r1, #1
 8018578:	ec59 8b10 	vmov	r8, r9, d0
 801857c:	4615      	mov	r5, r2
 801857e:	f7ff fcb5 	bl	8017eec <_Balloc>
 8018582:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018586:	4607      	mov	r7, r0
 8018588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801858c:	bb34      	cbnz	r4, 80185dc <__d2b+0x6c>
 801858e:	9301      	str	r3, [sp, #4]
 8018590:	f1b8 0300 	subs.w	r3, r8, #0
 8018594:	d027      	beq.n	80185e6 <__d2b+0x76>
 8018596:	a802      	add	r0, sp, #8
 8018598:	f840 3d08 	str.w	r3, [r0, #-8]!
 801859c:	f7ff fd89 	bl	80180b2 <__lo0bits>
 80185a0:	9900      	ldr	r1, [sp, #0]
 80185a2:	b1f0      	cbz	r0, 80185e2 <__d2b+0x72>
 80185a4:	9a01      	ldr	r2, [sp, #4]
 80185a6:	f1c0 0320 	rsb	r3, r0, #32
 80185aa:	fa02 f303 	lsl.w	r3, r2, r3
 80185ae:	430b      	orrs	r3, r1
 80185b0:	40c2      	lsrs	r2, r0
 80185b2:	617b      	str	r3, [r7, #20]
 80185b4:	9201      	str	r2, [sp, #4]
 80185b6:	9b01      	ldr	r3, [sp, #4]
 80185b8:	61bb      	str	r3, [r7, #24]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	bf14      	ite	ne
 80185be:	2102      	movne	r1, #2
 80185c0:	2101      	moveq	r1, #1
 80185c2:	6139      	str	r1, [r7, #16]
 80185c4:	b1c4      	cbz	r4, 80185f8 <__d2b+0x88>
 80185c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80185ca:	4404      	add	r4, r0
 80185cc:	6034      	str	r4, [r6, #0]
 80185ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80185d2:	6028      	str	r0, [r5, #0]
 80185d4:	4638      	mov	r0, r7
 80185d6:	b003      	add	sp, #12
 80185d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80185e0:	e7d5      	b.n	801858e <__d2b+0x1e>
 80185e2:	6179      	str	r1, [r7, #20]
 80185e4:	e7e7      	b.n	80185b6 <__d2b+0x46>
 80185e6:	a801      	add	r0, sp, #4
 80185e8:	f7ff fd63 	bl	80180b2 <__lo0bits>
 80185ec:	9b01      	ldr	r3, [sp, #4]
 80185ee:	617b      	str	r3, [r7, #20]
 80185f0:	2101      	movs	r1, #1
 80185f2:	6139      	str	r1, [r7, #16]
 80185f4:	3020      	adds	r0, #32
 80185f6:	e7e5      	b.n	80185c4 <__d2b+0x54>
 80185f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80185fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018600:	6030      	str	r0, [r6, #0]
 8018602:	6918      	ldr	r0, [r3, #16]
 8018604:	f7ff fd36 	bl	8018074 <__hi0bits>
 8018608:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801860c:	e7e1      	b.n	80185d2 <__d2b+0x62>

0801860e <__ratio>:
 801860e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018612:	4688      	mov	r8, r1
 8018614:	4669      	mov	r1, sp
 8018616:	4681      	mov	r9, r0
 8018618:	f7ff ff5c 	bl	80184d4 <__b2d>
 801861c:	a901      	add	r1, sp, #4
 801861e:	4640      	mov	r0, r8
 8018620:	ec57 6b10 	vmov	r6, r7, d0
 8018624:	f7ff ff56 	bl	80184d4 <__b2d>
 8018628:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801862c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018630:	eba3 0c02 	sub.w	ip, r3, r2
 8018634:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018638:	1a9b      	subs	r3, r3, r2
 801863a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801863e:	ec5b ab10 	vmov	sl, fp, d0
 8018642:	2b00      	cmp	r3, #0
 8018644:	bfce      	itee	gt
 8018646:	463a      	movgt	r2, r7
 8018648:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801864c:	465a      	movle	r2, fp
 801864e:	4659      	mov	r1, fp
 8018650:	463d      	mov	r5, r7
 8018652:	bfd4      	ite	le
 8018654:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018658:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801865c:	4630      	mov	r0, r6
 801865e:	ee10 2a10 	vmov	r2, s0
 8018662:	460b      	mov	r3, r1
 8018664:	4629      	mov	r1, r5
 8018666:	f7e8 f909 	bl	800087c <__aeabi_ddiv>
 801866a:	ec41 0b10 	vmov	d0, r0, r1
 801866e:	b003      	add	sp, #12
 8018670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018674 <__copybits>:
 8018674:	3901      	subs	r1, #1
 8018676:	b510      	push	{r4, lr}
 8018678:	1149      	asrs	r1, r1, #5
 801867a:	6914      	ldr	r4, [r2, #16]
 801867c:	3101      	adds	r1, #1
 801867e:	f102 0314 	add.w	r3, r2, #20
 8018682:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018686:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801868a:	42a3      	cmp	r3, r4
 801868c:	4602      	mov	r2, r0
 801868e:	d303      	bcc.n	8018698 <__copybits+0x24>
 8018690:	2300      	movs	r3, #0
 8018692:	428a      	cmp	r2, r1
 8018694:	d305      	bcc.n	80186a2 <__copybits+0x2e>
 8018696:	bd10      	pop	{r4, pc}
 8018698:	f853 2b04 	ldr.w	r2, [r3], #4
 801869c:	f840 2b04 	str.w	r2, [r0], #4
 80186a0:	e7f3      	b.n	801868a <__copybits+0x16>
 80186a2:	f842 3b04 	str.w	r3, [r2], #4
 80186a6:	e7f4      	b.n	8018692 <__copybits+0x1e>

080186a8 <__any_on>:
 80186a8:	f100 0214 	add.w	r2, r0, #20
 80186ac:	6900      	ldr	r0, [r0, #16]
 80186ae:	114b      	asrs	r3, r1, #5
 80186b0:	4298      	cmp	r0, r3
 80186b2:	b510      	push	{r4, lr}
 80186b4:	db11      	blt.n	80186da <__any_on+0x32>
 80186b6:	dd0a      	ble.n	80186ce <__any_on+0x26>
 80186b8:	f011 011f 	ands.w	r1, r1, #31
 80186bc:	d007      	beq.n	80186ce <__any_on+0x26>
 80186be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80186c2:	fa24 f001 	lsr.w	r0, r4, r1
 80186c6:	fa00 f101 	lsl.w	r1, r0, r1
 80186ca:	428c      	cmp	r4, r1
 80186cc:	d10b      	bne.n	80186e6 <__any_on+0x3e>
 80186ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80186d2:	4293      	cmp	r3, r2
 80186d4:	d803      	bhi.n	80186de <__any_on+0x36>
 80186d6:	2000      	movs	r0, #0
 80186d8:	bd10      	pop	{r4, pc}
 80186da:	4603      	mov	r3, r0
 80186dc:	e7f7      	b.n	80186ce <__any_on+0x26>
 80186de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80186e2:	2900      	cmp	r1, #0
 80186e4:	d0f5      	beq.n	80186d2 <__any_on+0x2a>
 80186e6:	2001      	movs	r0, #1
 80186e8:	e7f6      	b.n	80186d8 <__any_on+0x30>

080186ea <_calloc_r>:
 80186ea:	b538      	push	{r3, r4, r5, lr}
 80186ec:	fb02 f401 	mul.w	r4, r2, r1
 80186f0:	4621      	mov	r1, r4
 80186f2:	f000 f857 	bl	80187a4 <_malloc_r>
 80186f6:	4605      	mov	r5, r0
 80186f8:	b118      	cbz	r0, 8018702 <_calloc_r+0x18>
 80186fa:	4622      	mov	r2, r4
 80186fc:	2100      	movs	r1, #0
 80186fe:	f7fc fcaa 	bl	8015056 <memset>
 8018702:	4628      	mov	r0, r5
 8018704:	bd38      	pop	{r3, r4, r5, pc}
	...

08018708 <_free_r>:
 8018708:	b538      	push	{r3, r4, r5, lr}
 801870a:	4605      	mov	r5, r0
 801870c:	2900      	cmp	r1, #0
 801870e:	d045      	beq.n	801879c <_free_r+0x94>
 8018710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018714:	1f0c      	subs	r4, r1, #4
 8018716:	2b00      	cmp	r3, #0
 8018718:	bfb8      	it	lt
 801871a:	18e4      	addlt	r4, r4, r3
 801871c:	f000 fe30 	bl	8019380 <__malloc_lock>
 8018720:	4a1f      	ldr	r2, [pc, #124]	; (80187a0 <_free_r+0x98>)
 8018722:	6813      	ldr	r3, [r2, #0]
 8018724:	4610      	mov	r0, r2
 8018726:	b933      	cbnz	r3, 8018736 <_free_r+0x2e>
 8018728:	6063      	str	r3, [r4, #4]
 801872a:	6014      	str	r4, [r2, #0]
 801872c:	4628      	mov	r0, r5
 801872e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018732:	f000 be26 	b.w	8019382 <__malloc_unlock>
 8018736:	42a3      	cmp	r3, r4
 8018738:	d90c      	bls.n	8018754 <_free_r+0x4c>
 801873a:	6821      	ldr	r1, [r4, #0]
 801873c:	1862      	adds	r2, r4, r1
 801873e:	4293      	cmp	r3, r2
 8018740:	bf04      	itt	eq
 8018742:	681a      	ldreq	r2, [r3, #0]
 8018744:	685b      	ldreq	r3, [r3, #4]
 8018746:	6063      	str	r3, [r4, #4]
 8018748:	bf04      	itt	eq
 801874a:	1852      	addeq	r2, r2, r1
 801874c:	6022      	streq	r2, [r4, #0]
 801874e:	6004      	str	r4, [r0, #0]
 8018750:	e7ec      	b.n	801872c <_free_r+0x24>
 8018752:	4613      	mov	r3, r2
 8018754:	685a      	ldr	r2, [r3, #4]
 8018756:	b10a      	cbz	r2, 801875c <_free_r+0x54>
 8018758:	42a2      	cmp	r2, r4
 801875a:	d9fa      	bls.n	8018752 <_free_r+0x4a>
 801875c:	6819      	ldr	r1, [r3, #0]
 801875e:	1858      	adds	r0, r3, r1
 8018760:	42a0      	cmp	r0, r4
 8018762:	d10b      	bne.n	801877c <_free_r+0x74>
 8018764:	6820      	ldr	r0, [r4, #0]
 8018766:	4401      	add	r1, r0
 8018768:	1858      	adds	r0, r3, r1
 801876a:	4282      	cmp	r2, r0
 801876c:	6019      	str	r1, [r3, #0]
 801876e:	d1dd      	bne.n	801872c <_free_r+0x24>
 8018770:	6810      	ldr	r0, [r2, #0]
 8018772:	6852      	ldr	r2, [r2, #4]
 8018774:	605a      	str	r2, [r3, #4]
 8018776:	4401      	add	r1, r0
 8018778:	6019      	str	r1, [r3, #0]
 801877a:	e7d7      	b.n	801872c <_free_r+0x24>
 801877c:	d902      	bls.n	8018784 <_free_r+0x7c>
 801877e:	230c      	movs	r3, #12
 8018780:	602b      	str	r3, [r5, #0]
 8018782:	e7d3      	b.n	801872c <_free_r+0x24>
 8018784:	6820      	ldr	r0, [r4, #0]
 8018786:	1821      	adds	r1, r4, r0
 8018788:	428a      	cmp	r2, r1
 801878a:	bf04      	itt	eq
 801878c:	6811      	ldreq	r1, [r2, #0]
 801878e:	6852      	ldreq	r2, [r2, #4]
 8018790:	6062      	str	r2, [r4, #4]
 8018792:	bf04      	itt	eq
 8018794:	1809      	addeq	r1, r1, r0
 8018796:	6021      	streq	r1, [r4, #0]
 8018798:	605c      	str	r4, [r3, #4]
 801879a:	e7c7      	b.n	801872c <_free_r+0x24>
 801879c:	bd38      	pop	{r3, r4, r5, pc}
 801879e:	bf00      	nop
 80187a0:	200403d4 	.word	0x200403d4

080187a4 <_malloc_r>:
 80187a4:	b570      	push	{r4, r5, r6, lr}
 80187a6:	1ccd      	adds	r5, r1, #3
 80187a8:	f025 0503 	bic.w	r5, r5, #3
 80187ac:	3508      	adds	r5, #8
 80187ae:	2d0c      	cmp	r5, #12
 80187b0:	bf38      	it	cc
 80187b2:	250c      	movcc	r5, #12
 80187b4:	2d00      	cmp	r5, #0
 80187b6:	4606      	mov	r6, r0
 80187b8:	db01      	blt.n	80187be <_malloc_r+0x1a>
 80187ba:	42a9      	cmp	r1, r5
 80187bc:	d903      	bls.n	80187c6 <_malloc_r+0x22>
 80187be:	230c      	movs	r3, #12
 80187c0:	6033      	str	r3, [r6, #0]
 80187c2:	2000      	movs	r0, #0
 80187c4:	bd70      	pop	{r4, r5, r6, pc}
 80187c6:	f000 fddb 	bl	8019380 <__malloc_lock>
 80187ca:	4a21      	ldr	r2, [pc, #132]	; (8018850 <_malloc_r+0xac>)
 80187cc:	6814      	ldr	r4, [r2, #0]
 80187ce:	4621      	mov	r1, r4
 80187d0:	b991      	cbnz	r1, 80187f8 <_malloc_r+0x54>
 80187d2:	4c20      	ldr	r4, [pc, #128]	; (8018854 <_malloc_r+0xb0>)
 80187d4:	6823      	ldr	r3, [r4, #0]
 80187d6:	b91b      	cbnz	r3, 80187e0 <_malloc_r+0x3c>
 80187d8:	4630      	mov	r0, r6
 80187da:	f000 fc91 	bl	8019100 <_sbrk_r>
 80187de:	6020      	str	r0, [r4, #0]
 80187e0:	4629      	mov	r1, r5
 80187e2:	4630      	mov	r0, r6
 80187e4:	f000 fc8c 	bl	8019100 <_sbrk_r>
 80187e8:	1c43      	adds	r3, r0, #1
 80187ea:	d124      	bne.n	8018836 <_malloc_r+0x92>
 80187ec:	230c      	movs	r3, #12
 80187ee:	6033      	str	r3, [r6, #0]
 80187f0:	4630      	mov	r0, r6
 80187f2:	f000 fdc6 	bl	8019382 <__malloc_unlock>
 80187f6:	e7e4      	b.n	80187c2 <_malloc_r+0x1e>
 80187f8:	680b      	ldr	r3, [r1, #0]
 80187fa:	1b5b      	subs	r3, r3, r5
 80187fc:	d418      	bmi.n	8018830 <_malloc_r+0x8c>
 80187fe:	2b0b      	cmp	r3, #11
 8018800:	d90f      	bls.n	8018822 <_malloc_r+0x7e>
 8018802:	600b      	str	r3, [r1, #0]
 8018804:	50cd      	str	r5, [r1, r3]
 8018806:	18cc      	adds	r4, r1, r3
 8018808:	4630      	mov	r0, r6
 801880a:	f000 fdba 	bl	8019382 <__malloc_unlock>
 801880e:	f104 000b 	add.w	r0, r4, #11
 8018812:	1d23      	adds	r3, r4, #4
 8018814:	f020 0007 	bic.w	r0, r0, #7
 8018818:	1ac3      	subs	r3, r0, r3
 801881a:	d0d3      	beq.n	80187c4 <_malloc_r+0x20>
 801881c:	425a      	negs	r2, r3
 801881e:	50e2      	str	r2, [r4, r3]
 8018820:	e7d0      	b.n	80187c4 <_malloc_r+0x20>
 8018822:	428c      	cmp	r4, r1
 8018824:	684b      	ldr	r3, [r1, #4]
 8018826:	bf16      	itet	ne
 8018828:	6063      	strne	r3, [r4, #4]
 801882a:	6013      	streq	r3, [r2, #0]
 801882c:	460c      	movne	r4, r1
 801882e:	e7eb      	b.n	8018808 <_malloc_r+0x64>
 8018830:	460c      	mov	r4, r1
 8018832:	6849      	ldr	r1, [r1, #4]
 8018834:	e7cc      	b.n	80187d0 <_malloc_r+0x2c>
 8018836:	1cc4      	adds	r4, r0, #3
 8018838:	f024 0403 	bic.w	r4, r4, #3
 801883c:	42a0      	cmp	r0, r4
 801883e:	d005      	beq.n	801884c <_malloc_r+0xa8>
 8018840:	1a21      	subs	r1, r4, r0
 8018842:	4630      	mov	r0, r6
 8018844:	f000 fc5c 	bl	8019100 <_sbrk_r>
 8018848:	3001      	adds	r0, #1
 801884a:	d0cf      	beq.n	80187ec <_malloc_r+0x48>
 801884c:	6025      	str	r5, [r4, #0]
 801884e:	e7db      	b.n	8018808 <_malloc_r+0x64>
 8018850:	200403d4 	.word	0x200403d4
 8018854:	200403d8 	.word	0x200403d8

08018858 <__ssputs_r>:
 8018858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801885c:	688e      	ldr	r6, [r1, #8]
 801885e:	429e      	cmp	r6, r3
 8018860:	4682      	mov	sl, r0
 8018862:	460c      	mov	r4, r1
 8018864:	4690      	mov	r8, r2
 8018866:	4699      	mov	r9, r3
 8018868:	d837      	bhi.n	80188da <__ssputs_r+0x82>
 801886a:	898a      	ldrh	r2, [r1, #12]
 801886c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018870:	d031      	beq.n	80188d6 <__ssputs_r+0x7e>
 8018872:	6825      	ldr	r5, [r4, #0]
 8018874:	6909      	ldr	r1, [r1, #16]
 8018876:	1a6f      	subs	r7, r5, r1
 8018878:	6965      	ldr	r5, [r4, #20]
 801887a:	2302      	movs	r3, #2
 801887c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018880:	fb95 f5f3 	sdiv	r5, r5, r3
 8018884:	f109 0301 	add.w	r3, r9, #1
 8018888:	443b      	add	r3, r7
 801888a:	429d      	cmp	r5, r3
 801888c:	bf38      	it	cc
 801888e:	461d      	movcc	r5, r3
 8018890:	0553      	lsls	r3, r2, #21
 8018892:	d530      	bpl.n	80188f6 <__ssputs_r+0x9e>
 8018894:	4629      	mov	r1, r5
 8018896:	f7ff ff85 	bl	80187a4 <_malloc_r>
 801889a:	4606      	mov	r6, r0
 801889c:	b950      	cbnz	r0, 80188b4 <__ssputs_r+0x5c>
 801889e:	230c      	movs	r3, #12
 80188a0:	f8ca 3000 	str.w	r3, [sl]
 80188a4:	89a3      	ldrh	r3, [r4, #12]
 80188a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80188aa:	81a3      	strh	r3, [r4, #12]
 80188ac:	f04f 30ff 	mov.w	r0, #4294967295
 80188b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188b4:	463a      	mov	r2, r7
 80188b6:	6921      	ldr	r1, [r4, #16]
 80188b8:	f7fc fbc2 	bl	8015040 <memcpy>
 80188bc:	89a3      	ldrh	r3, [r4, #12]
 80188be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80188c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80188c6:	81a3      	strh	r3, [r4, #12]
 80188c8:	6126      	str	r6, [r4, #16]
 80188ca:	6165      	str	r5, [r4, #20]
 80188cc:	443e      	add	r6, r7
 80188ce:	1bed      	subs	r5, r5, r7
 80188d0:	6026      	str	r6, [r4, #0]
 80188d2:	60a5      	str	r5, [r4, #8]
 80188d4:	464e      	mov	r6, r9
 80188d6:	454e      	cmp	r6, r9
 80188d8:	d900      	bls.n	80188dc <__ssputs_r+0x84>
 80188da:	464e      	mov	r6, r9
 80188dc:	4632      	mov	r2, r6
 80188de:	4641      	mov	r1, r8
 80188e0:	6820      	ldr	r0, [r4, #0]
 80188e2:	f000 fd34 	bl	801934e <memmove>
 80188e6:	68a3      	ldr	r3, [r4, #8]
 80188e8:	1b9b      	subs	r3, r3, r6
 80188ea:	60a3      	str	r3, [r4, #8]
 80188ec:	6823      	ldr	r3, [r4, #0]
 80188ee:	441e      	add	r6, r3
 80188f0:	6026      	str	r6, [r4, #0]
 80188f2:	2000      	movs	r0, #0
 80188f4:	e7dc      	b.n	80188b0 <__ssputs_r+0x58>
 80188f6:	462a      	mov	r2, r5
 80188f8:	f000 fd44 	bl	8019384 <_realloc_r>
 80188fc:	4606      	mov	r6, r0
 80188fe:	2800      	cmp	r0, #0
 8018900:	d1e2      	bne.n	80188c8 <__ssputs_r+0x70>
 8018902:	6921      	ldr	r1, [r4, #16]
 8018904:	4650      	mov	r0, sl
 8018906:	f7ff feff 	bl	8018708 <_free_r>
 801890a:	e7c8      	b.n	801889e <__ssputs_r+0x46>

0801890c <_svfiprintf_r>:
 801890c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018910:	461d      	mov	r5, r3
 8018912:	898b      	ldrh	r3, [r1, #12]
 8018914:	061f      	lsls	r7, r3, #24
 8018916:	b09d      	sub	sp, #116	; 0x74
 8018918:	4680      	mov	r8, r0
 801891a:	460c      	mov	r4, r1
 801891c:	4616      	mov	r6, r2
 801891e:	d50f      	bpl.n	8018940 <_svfiprintf_r+0x34>
 8018920:	690b      	ldr	r3, [r1, #16]
 8018922:	b96b      	cbnz	r3, 8018940 <_svfiprintf_r+0x34>
 8018924:	2140      	movs	r1, #64	; 0x40
 8018926:	f7ff ff3d 	bl	80187a4 <_malloc_r>
 801892a:	6020      	str	r0, [r4, #0]
 801892c:	6120      	str	r0, [r4, #16]
 801892e:	b928      	cbnz	r0, 801893c <_svfiprintf_r+0x30>
 8018930:	230c      	movs	r3, #12
 8018932:	f8c8 3000 	str.w	r3, [r8]
 8018936:	f04f 30ff 	mov.w	r0, #4294967295
 801893a:	e0c8      	b.n	8018ace <_svfiprintf_r+0x1c2>
 801893c:	2340      	movs	r3, #64	; 0x40
 801893e:	6163      	str	r3, [r4, #20]
 8018940:	2300      	movs	r3, #0
 8018942:	9309      	str	r3, [sp, #36]	; 0x24
 8018944:	2320      	movs	r3, #32
 8018946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801894a:	2330      	movs	r3, #48	; 0x30
 801894c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018950:	9503      	str	r5, [sp, #12]
 8018952:	f04f 0b01 	mov.w	fp, #1
 8018956:	4637      	mov	r7, r6
 8018958:	463d      	mov	r5, r7
 801895a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801895e:	b10b      	cbz	r3, 8018964 <_svfiprintf_r+0x58>
 8018960:	2b25      	cmp	r3, #37	; 0x25
 8018962:	d13e      	bne.n	80189e2 <_svfiprintf_r+0xd6>
 8018964:	ebb7 0a06 	subs.w	sl, r7, r6
 8018968:	d00b      	beq.n	8018982 <_svfiprintf_r+0x76>
 801896a:	4653      	mov	r3, sl
 801896c:	4632      	mov	r2, r6
 801896e:	4621      	mov	r1, r4
 8018970:	4640      	mov	r0, r8
 8018972:	f7ff ff71 	bl	8018858 <__ssputs_r>
 8018976:	3001      	adds	r0, #1
 8018978:	f000 80a4 	beq.w	8018ac4 <_svfiprintf_r+0x1b8>
 801897c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801897e:	4453      	add	r3, sl
 8018980:	9309      	str	r3, [sp, #36]	; 0x24
 8018982:	783b      	ldrb	r3, [r7, #0]
 8018984:	2b00      	cmp	r3, #0
 8018986:	f000 809d 	beq.w	8018ac4 <_svfiprintf_r+0x1b8>
 801898a:	2300      	movs	r3, #0
 801898c:	f04f 32ff 	mov.w	r2, #4294967295
 8018990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018994:	9304      	str	r3, [sp, #16]
 8018996:	9307      	str	r3, [sp, #28]
 8018998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801899c:	931a      	str	r3, [sp, #104]	; 0x68
 801899e:	462f      	mov	r7, r5
 80189a0:	2205      	movs	r2, #5
 80189a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80189a6:	4850      	ldr	r0, [pc, #320]	; (8018ae8 <_svfiprintf_r+0x1dc>)
 80189a8:	f7e7 fc32 	bl	8000210 <memchr>
 80189ac:	9b04      	ldr	r3, [sp, #16]
 80189ae:	b9d0      	cbnz	r0, 80189e6 <_svfiprintf_r+0xda>
 80189b0:	06d9      	lsls	r1, r3, #27
 80189b2:	bf44      	itt	mi
 80189b4:	2220      	movmi	r2, #32
 80189b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80189ba:	071a      	lsls	r2, r3, #28
 80189bc:	bf44      	itt	mi
 80189be:	222b      	movmi	r2, #43	; 0x2b
 80189c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80189c4:	782a      	ldrb	r2, [r5, #0]
 80189c6:	2a2a      	cmp	r2, #42	; 0x2a
 80189c8:	d015      	beq.n	80189f6 <_svfiprintf_r+0xea>
 80189ca:	9a07      	ldr	r2, [sp, #28]
 80189cc:	462f      	mov	r7, r5
 80189ce:	2000      	movs	r0, #0
 80189d0:	250a      	movs	r5, #10
 80189d2:	4639      	mov	r1, r7
 80189d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80189d8:	3b30      	subs	r3, #48	; 0x30
 80189da:	2b09      	cmp	r3, #9
 80189dc:	d94d      	bls.n	8018a7a <_svfiprintf_r+0x16e>
 80189de:	b1b8      	cbz	r0, 8018a10 <_svfiprintf_r+0x104>
 80189e0:	e00f      	b.n	8018a02 <_svfiprintf_r+0xf6>
 80189e2:	462f      	mov	r7, r5
 80189e4:	e7b8      	b.n	8018958 <_svfiprintf_r+0x4c>
 80189e6:	4a40      	ldr	r2, [pc, #256]	; (8018ae8 <_svfiprintf_r+0x1dc>)
 80189e8:	1a80      	subs	r0, r0, r2
 80189ea:	fa0b f000 	lsl.w	r0, fp, r0
 80189ee:	4318      	orrs	r0, r3
 80189f0:	9004      	str	r0, [sp, #16]
 80189f2:	463d      	mov	r5, r7
 80189f4:	e7d3      	b.n	801899e <_svfiprintf_r+0x92>
 80189f6:	9a03      	ldr	r2, [sp, #12]
 80189f8:	1d11      	adds	r1, r2, #4
 80189fa:	6812      	ldr	r2, [r2, #0]
 80189fc:	9103      	str	r1, [sp, #12]
 80189fe:	2a00      	cmp	r2, #0
 8018a00:	db01      	blt.n	8018a06 <_svfiprintf_r+0xfa>
 8018a02:	9207      	str	r2, [sp, #28]
 8018a04:	e004      	b.n	8018a10 <_svfiprintf_r+0x104>
 8018a06:	4252      	negs	r2, r2
 8018a08:	f043 0302 	orr.w	r3, r3, #2
 8018a0c:	9207      	str	r2, [sp, #28]
 8018a0e:	9304      	str	r3, [sp, #16]
 8018a10:	783b      	ldrb	r3, [r7, #0]
 8018a12:	2b2e      	cmp	r3, #46	; 0x2e
 8018a14:	d10c      	bne.n	8018a30 <_svfiprintf_r+0x124>
 8018a16:	787b      	ldrb	r3, [r7, #1]
 8018a18:	2b2a      	cmp	r3, #42	; 0x2a
 8018a1a:	d133      	bne.n	8018a84 <_svfiprintf_r+0x178>
 8018a1c:	9b03      	ldr	r3, [sp, #12]
 8018a1e:	1d1a      	adds	r2, r3, #4
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	9203      	str	r2, [sp, #12]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	bfb8      	it	lt
 8018a28:	f04f 33ff 	movlt.w	r3, #4294967295
 8018a2c:	3702      	adds	r7, #2
 8018a2e:	9305      	str	r3, [sp, #20]
 8018a30:	4d2e      	ldr	r5, [pc, #184]	; (8018aec <_svfiprintf_r+0x1e0>)
 8018a32:	7839      	ldrb	r1, [r7, #0]
 8018a34:	2203      	movs	r2, #3
 8018a36:	4628      	mov	r0, r5
 8018a38:	f7e7 fbea 	bl	8000210 <memchr>
 8018a3c:	b138      	cbz	r0, 8018a4e <_svfiprintf_r+0x142>
 8018a3e:	2340      	movs	r3, #64	; 0x40
 8018a40:	1b40      	subs	r0, r0, r5
 8018a42:	fa03 f000 	lsl.w	r0, r3, r0
 8018a46:	9b04      	ldr	r3, [sp, #16]
 8018a48:	4303      	orrs	r3, r0
 8018a4a:	3701      	adds	r7, #1
 8018a4c:	9304      	str	r3, [sp, #16]
 8018a4e:	7839      	ldrb	r1, [r7, #0]
 8018a50:	4827      	ldr	r0, [pc, #156]	; (8018af0 <_svfiprintf_r+0x1e4>)
 8018a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018a56:	2206      	movs	r2, #6
 8018a58:	1c7e      	adds	r6, r7, #1
 8018a5a:	f7e7 fbd9 	bl	8000210 <memchr>
 8018a5e:	2800      	cmp	r0, #0
 8018a60:	d038      	beq.n	8018ad4 <_svfiprintf_r+0x1c8>
 8018a62:	4b24      	ldr	r3, [pc, #144]	; (8018af4 <_svfiprintf_r+0x1e8>)
 8018a64:	bb13      	cbnz	r3, 8018aac <_svfiprintf_r+0x1a0>
 8018a66:	9b03      	ldr	r3, [sp, #12]
 8018a68:	3307      	adds	r3, #7
 8018a6a:	f023 0307 	bic.w	r3, r3, #7
 8018a6e:	3308      	adds	r3, #8
 8018a70:	9303      	str	r3, [sp, #12]
 8018a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a74:	444b      	add	r3, r9
 8018a76:	9309      	str	r3, [sp, #36]	; 0x24
 8018a78:	e76d      	b.n	8018956 <_svfiprintf_r+0x4a>
 8018a7a:	fb05 3202 	mla	r2, r5, r2, r3
 8018a7e:	2001      	movs	r0, #1
 8018a80:	460f      	mov	r7, r1
 8018a82:	e7a6      	b.n	80189d2 <_svfiprintf_r+0xc6>
 8018a84:	2300      	movs	r3, #0
 8018a86:	3701      	adds	r7, #1
 8018a88:	9305      	str	r3, [sp, #20]
 8018a8a:	4619      	mov	r1, r3
 8018a8c:	250a      	movs	r5, #10
 8018a8e:	4638      	mov	r0, r7
 8018a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a94:	3a30      	subs	r2, #48	; 0x30
 8018a96:	2a09      	cmp	r2, #9
 8018a98:	d903      	bls.n	8018aa2 <_svfiprintf_r+0x196>
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d0c8      	beq.n	8018a30 <_svfiprintf_r+0x124>
 8018a9e:	9105      	str	r1, [sp, #20]
 8018aa0:	e7c6      	b.n	8018a30 <_svfiprintf_r+0x124>
 8018aa2:	fb05 2101 	mla	r1, r5, r1, r2
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	4607      	mov	r7, r0
 8018aaa:	e7f0      	b.n	8018a8e <_svfiprintf_r+0x182>
 8018aac:	ab03      	add	r3, sp, #12
 8018aae:	9300      	str	r3, [sp, #0]
 8018ab0:	4622      	mov	r2, r4
 8018ab2:	4b11      	ldr	r3, [pc, #68]	; (8018af8 <_svfiprintf_r+0x1ec>)
 8018ab4:	a904      	add	r1, sp, #16
 8018ab6:	4640      	mov	r0, r8
 8018ab8:	f7fc fb6a 	bl	8015190 <_printf_float>
 8018abc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018ac0:	4681      	mov	r9, r0
 8018ac2:	d1d6      	bne.n	8018a72 <_svfiprintf_r+0x166>
 8018ac4:	89a3      	ldrh	r3, [r4, #12]
 8018ac6:	065b      	lsls	r3, r3, #25
 8018ac8:	f53f af35 	bmi.w	8018936 <_svfiprintf_r+0x2a>
 8018acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018ace:	b01d      	add	sp, #116	; 0x74
 8018ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ad4:	ab03      	add	r3, sp, #12
 8018ad6:	9300      	str	r3, [sp, #0]
 8018ad8:	4622      	mov	r2, r4
 8018ada:	4b07      	ldr	r3, [pc, #28]	; (8018af8 <_svfiprintf_r+0x1ec>)
 8018adc:	a904      	add	r1, sp, #16
 8018ade:	4640      	mov	r0, r8
 8018ae0:	f7fc fe0c 	bl	80156fc <_printf_i>
 8018ae4:	e7ea      	b.n	8018abc <_svfiprintf_r+0x1b0>
 8018ae6:	bf00      	nop
 8018ae8:	08019ed4 	.word	0x08019ed4
 8018aec:	08019eda 	.word	0x08019eda
 8018af0:	08019ede 	.word	0x08019ede
 8018af4:	08015191 	.word	0x08015191
 8018af8:	08018859 	.word	0x08018859

08018afc <_sungetc_r>:
 8018afc:	b538      	push	{r3, r4, r5, lr}
 8018afe:	1c4b      	adds	r3, r1, #1
 8018b00:	4614      	mov	r4, r2
 8018b02:	d103      	bne.n	8018b0c <_sungetc_r+0x10>
 8018b04:	f04f 35ff 	mov.w	r5, #4294967295
 8018b08:	4628      	mov	r0, r5
 8018b0a:	bd38      	pop	{r3, r4, r5, pc}
 8018b0c:	8993      	ldrh	r3, [r2, #12]
 8018b0e:	f023 0320 	bic.w	r3, r3, #32
 8018b12:	8193      	strh	r3, [r2, #12]
 8018b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b16:	6852      	ldr	r2, [r2, #4]
 8018b18:	b2cd      	uxtb	r5, r1
 8018b1a:	b18b      	cbz	r3, 8018b40 <_sungetc_r+0x44>
 8018b1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018b1e:	4293      	cmp	r3, r2
 8018b20:	dd08      	ble.n	8018b34 <_sungetc_r+0x38>
 8018b22:	6823      	ldr	r3, [r4, #0]
 8018b24:	1e5a      	subs	r2, r3, #1
 8018b26:	6022      	str	r2, [r4, #0]
 8018b28:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018b2c:	6863      	ldr	r3, [r4, #4]
 8018b2e:	3301      	adds	r3, #1
 8018b30:	6063      	str	r3, [r4, #4]
 8018b32:	e7e9      	b.n	8018b08 <_sungetc_r+0xc>
 8018b34:	4621      	mov	r1, r4
 8018b36:	f000 fbc3 	bl	80192c0 <__submore>
 8018b3a:	2800      	cmp	r0, #0
 8018b3c:	d0f1      	beq.n	8018b22 <_sungetc_r+0x26>
 8018b3e:	e7e1      	b.n	8018b04 <_sungetc_r+0x8>
 8018b40:	6921      	ldr	r1, [r4, #16]
 8018b42:	6823      	ldr	r3, [r4, #0]
 8018b44:	b151      	cbz	r1, 8018b5c <_sungetc_r+0x60>
 8018b46:	4299      	cmp	r1, r3
 8018b48:	d208      	bcs.n	8018b5c <_sungetc_r+0x60>
 8018b4a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018b4e:	42a9      	cmp	r1, r5
 8018b50:	d104      	bne.n	8018b5c <_sungetc_r+0x60>
 8018b52:	3b01      	subs	r3, #1
 8018b54:	3201      	adds	r2, #1
 8018b56:	6023      	str	r3, [r4, #0]
 8018b58:	6062      	str	r2, [r4, #4]
 8018b5a:	e7d5      	b.n	8018b08 <_sungetc_r+0xc>
 8018b5c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b64:	6363      	str	r3, [r4, #52]	; 0x34
 8018b66:	2303      	movs	r3, #3
 8018b68:	63a3      	str	r3, [r4, #56]	; 0x38
 8018b6a:	4623      	mov	r3, r4
 8018b6c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018b70:	6023      	str	r3, [r4, #0]
 8018b72:	2301      	movs	r3, #1
 8018b74:	e7dc      	b.n	8018b30 <_sungetc_r+0x34>

08018b76 <__ssrefill_r>:
 8018b76:	b510      	push	{r4, lr}
 8018b78:	460c      	mov	r4, r1
 8018b7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018b7c:	b169      	cbz	r1, 8018b9a <__ssrefill_r+0x24>
 8018b7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b82:	4299      	cmp	r1, r3
 8018b84:	d001      	beq.n	8018b8a <__ssrefill_r+0x14>
 8018b86:	f7ff fdbf 	bl	8018708 <_free_r>
 8018b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b8c:	6063      	str	r3, [r4, #4]
 8018b8e:	2000      	movs	r0, #0
 8018b90:	6360      	str	r0, [r4, #52]	; 0x34
 8018b92:	b113      	cbz	r3, 8018b9a <__ssrefill_r+0x24>
 8018b94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018b96:	6023      	str	r3, [r4, #0]
 8018b98:	bd10      	pop	{r4, pc}
 8018b9a:	6923      	ldr	r3, [r4, #16]
 8018b9c:	6023      	str	r3, [r4, #0]
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	6063      	str	r3, [r4, #4]
 8018ba2:	89a3      	ldrh	r3, [r4, #12]
 8018ba4:	f043 0320 	orr.w	r3, r3, #32
 8018ba8:	81a3      	strh	r3, [r4, #12]
 8018baa:	f04f 30ff 	mov.w	r0, #4294967295
 8018bae:	e7f3      	b.n	8018b98 <__ssrefill_r+0x22>

08018bb0 <__ssvfiscanf_r>:
 8018bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bb4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018bb8:	460c      	mov	r4, r1
 8018bba:	2100      	movs	r1, #0
 8018bbc:	9144      	str	r1, [sp, #272]	; 0x110
 8018bbe:	9145      	str	r1, [sp, #276]	; 0x114
 8018bc0:	499f      	ldr	r1, [pc, #636]	; (8018e40 <__ssvfiscanf_r+0x290>)
 8018bc2:	91a0      	str	r1, [sp, #640]	; 0x280
 8018bc4:	f10d 0804 	add.w	r8, sp, #4
 8018bc8:	499e      	ldr	r1, [pc, #632]	; (8018e44 <__ssvfiscanf_r+0x294>)
 8018bca:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018e48 <__ssvfiscanf_r+0x298>
 8018bce:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018bd2:	4606      	mov	r6, r0
 8018bd4:	4692      	mov	sl, r2
 8018bd6:	91a1      	str	r1, [sp, #644]	; 0x284
 8018bd8:	9300      	str	r3, [sp, #0]
 8018bda:	270a      	movs	r7, #10
 8018bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	f000 812a 	beq.w	8018e3a <__ssvfiscanf_r+0x28a>
 8018be6:	4655      	mov	r5, sl
 8018be8:	f7ff f948 	bl	8017e7c <__locale_ctype_ptr>
 8018bec:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018bf0:	4458      	add	r0, fp
 8018bf2:	7843      	ldrb	r3, [r0, #1]
 8018bf4:	f013 0308 	ands.w	r3, r3, #8
 8018bf8:	d01c      	beq.n	8018c34 <__ssvfiscanf_r+0x84>
 8018bfa:	6863      	ldr	r3, [r4, #4]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	dd12      	ble.n	8018c26 <__ssvfiscanf_r+0x76>
 8018c00:	f7ff f93c 	bl	8017e7c <__locale_ctype_ptr>
 8018c04:	6823      	ldr	r3, [r4, #0]
 8018c06:	781a      	ldrb	r2, [r3, #0]
 8018c08:	4410      	add	r0, r2
 8018c0a:	7842      	ldrb	r2, [r0, #1]
 8018c0c:	0712      	lsls	r2, r2, #28
 8018c0e:	d401      	bmi.n	8018c14 <__ssvfiscanf_r+0x64>
 8018c10:	46aa      	mov	sl, r5
 8018c12:	e7e3      	b.n	8018bdc <__ssvfiscanf_r+0x2c>
 8018c14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018c16:	3201      	adds	r2, #1
 8018c18:	9245      	str	r2, [sp, #276]	; 0x114
 8018c1a:	6862      	ldr	r2, [r4, #4]
 8018c1c:	3301      	adds	r3, #1
 8018c1e:	3a01      	subs	r2, #1
 8018c20:	6062      	str	r2, [r4, #4]
 8018c22:	6023      	str	r3, [r4, #0]
 8018c24:	e7e9      	b.n	8018bfa <__ssvfiscanf_r+0x4a>
 8018c26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018c28:	4621      	mov	r1, r4
 8018c2a:	4630      	mov	r0, r6
 8018c2c:	4798      	blx	r3
 8018c2e:	2800      	cmp	r0, #0
 8018c30:	d0e6      	beq.n	8018c00 <__ssvfiscanf_r+0x50>
 8018c32:	e7ed      	b.n	8018c10 <__ssvfiscanf_r+0x60>
 8018c34:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018c38:	f040 8082 	bne.w	8018d40 <__ssvfiscanf_r+0x190>
 8018c3c:	9343      	str	r3, [sp, #268]	; 0x10c
 8018c3e:	9341      	str	r3, [sp, #260]	; 0x104
 8018c40:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018c44:	2b2a      	cmp	r3, #42	; 0x2a
 8018c46:	d103      	bne.n	8018c50 <__ssvfiscanf_r+0xa0>
 8018c48:	2310      	movs	r3, #16
 8018c4a:	9341      	str	r3, [sp, #260]	; 0x104
 8018c4c:	f10a 0502 	add.w	r5, sl, #2
 8018c50:	46aa      	mov	sl, r5
 8018c52:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018c56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018c5a:	2a09      	cmp	r2, #9
 8018c5c:	d922      	bls.n	8018ca4 <__ssvfiscanf_r+0xf4>
 8018c5e:	2203      	movs	r2, #3
 8018c60:	4879      	ldr	r0, [pc, #484]	; (8018e48 <__ssvfiscanf_r+0x298>)
 8018c62:	f7e7 fad5 	bl	8000210 <memchr>
 8018c66:	b138      	cbz	r0, 8018c78 <__ssvfiscanf_r+0xc8>
 8018c68:	eba0 0309 	sub.w	r3, r0, r9
 8018c6c:	2001      	movs	r0, #1
 8018c6e:	4098      	lsls	r0, r3
 8018c70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018c72:	4318      	orrs	r0, r3
 8018c74:	9041      	str	r0, [sp, #260]	; 0x104
 8018c76:	46aa      	mov	sl, r5
 8018c78:	f89a 3000 	ldrb.w	r3, [sl]
 8018c7c:	2b67      	cmp	r3, #103	; 0x67
 8018c7e:	f10a 0501 	add.w	r5, sl, #1
 8018c82:	d82b      	bhi.n	8018cdc <__ssvfiscanf_r+0x12c>
 8018c84:	2b65      	cmp	r3, #101	; 0x65
 8018c86:	f080 809f 	bcs.w	8018dc8 <__ssvfiscanf_r+0x218>
 8018c8a:	2b47      	cmp	r3, #71	; 0x47
 8018c8c:	d810      	bhi.n	8018cb0 <__ssvfiscanf_r+0x100>
 8018c8e:	2b45      	cmp	r3, #69	; 0x45
 8018c90:	f080 809a 	bcs.w	8018dc8 <__ssvfiscanf_r+0x218>
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d06c      	beq.n	8018d72 <__ssvfiscanf_r+0x1c2>
 8018c98:	2b25      	cmp	r3, #37	; 0x25
 8018c9a:	d051      	beq.n	8018d40 <__ssvfiscanf_r+0x190>
 8018c9c:	2303      	movs	r3, #3
 8018c9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018ca0:	9742      	str	r7, [sp, #264]	; 0x108
 8018ca2:	e027      	b.n	8018cf4 <__ssvfiscanf_r+0x144>
 8018ca4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018ca6:	fb07 1303 	mla	r3, r7, r3, r1
 8018caa:	3b30      	subs	r3, #48	; 0x30
 8018cac:	9343      	str	r3, [sp, #268]	; 0x10c
 8018cae:	e7cf      	b.n	8018c50 <__ssvfiscanf_r+0xa0>
 8018cb0:	2b5b      	cmp	r3, #91	; 0x5b
 8018cb2:	d06a      	beq.n	8018d8a <__ssvfiscanf_r+0x1da>
 8018cb4:	d80c      	bhi.n	8018cd0 <__ssvfiscanf_r+0x120>
 8018cb6:	2b58      	cmp	r3, #88	; 0x58
 8018cb8:	d1f0      	bne.n	8018c9c <__ssvfiscanf_r+0xec>
 8018cba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018cc0:	9241      	str	r2, [sp, #260]	; 0x104
 8018cc2:	2210      	movs	r2, #16
 8018cc4:	9242      	str	r2, [sp, #264]	; 0x108
 8018cc6:	2b6e      	cmp	r3, #110	; 0x6e
 8018cc8:	bf8c      	ite	hi
 8018cca:	2304      	movhi	r3, #4
 8018ccc:	2303      	movls	r3, #3
 8018cce:	e010      	b.n	8018cf2 <__ssvfiscanf_r+0x142>
 8018cd0:	2b63      	cmp	r3, #99	; 0x63
 8018cd2:	d065      	beq.n	8018da0 <__ssvfiscanf_r+0x1f0>
 8018cd4:	2b64      	cmp	r3, #100	; 0x64
 8018cd6:	d1e1      	bne.n	8018c9c <__ssvfiscanf_r+0xec>
 8018cd8:	9742      	str	r7, [sp, #264]	; 0x108
 8018cda:	e7f4      	b.n	8018cc6 <__ssvfiscanf_r+0x116>
 8018cdc:	2b70      	cmp	r3, #112	; 0x70
 8018cde:	d04b      	beq.n	8018d78 <__ssvfiscanf_r+0x1c8>
 8018ce0:	d826      	bhi.n	8018d30 <__ssvfiscanf_r+0x180>
 8018ce2:	2b6e      	cmp	r3, #110	; 0x6e
 8018ce4:	d062      	beq.n	8018dac <__ssvfiscanf_r+0x1fc>
 8018ce6:	d84c      	bhi.n	8018d82 <__ssvfiscanf_r+0x1d2>
 8018ce8:	2b69      	cmp	r3, #105	; 0x69
 8018cea:	d1d7      	bne.n	8018c9c <__ssvfiscanf_r+0xec>
 8018cec:	2300      	movs	r3, #0
 8018cee:	9342      	str	r3, [sp, #264]	; 0x108
 8018cf0:	2303      	movs	r3, #3
 8018cf2:	9347      	str	r3, [sp, #284]	; 0x11c
 8018cf4:	6863      	ldr	r3, [r4, #4]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	dd68      	ble.n	8018dcc <__ssvfiscanf_r+0x21c>
 8018cfa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018cfc:	0659      	lsls	r1, r3, #25
 8018cfe:	d407      	bmi.n	8018d10 <__ssvfiscanf_r+0x160>
 8018d00:	f7ff f8bc 	bl	8017e7c <__locale_ctype_ptr>
 8018d04:	6823      	ldr	r3, [r4, #0]
 8018d06:	781a      	ldrb	r2, [r3, #0]
 8018d08:	4410      	add	r0, r2
 8018d0a:	7842      	ldrb	r2, [r0, #1]
 8018d0c:	0712      	lsls	r2, r2, #28
 8018d0e:	d464      	bmi.n	8018dda <__ssvfiscanf_r+0x22a>
 8018d10:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018d12:	2b02      	cmp	r3, #2
 8018d14:	dc73      	bgt.n	8018dfe <__ssvfiscanf_r+0x24e>
 8018d16:	466b      	mov	r3, sp
 8018d18:	4622      	mov	r2, r4
 8018d1a:	a941      	add	r1, sp, #260	; 0x104
 8018d1c:	4630      	mov	r0, r6
 8018d1e:	f000 f897 	bl	8018e50 <_scanf_chars>
 8018d22:	2801      	cmp	r0, #1
 8018d24:	f000 8089 	beq.w	8018e3a <__ssvfiscanf_r+0x28a>
 8018d28:	2802      	cmp	r0, #2
 8018d2a:	f47f af71 	bne.w	8018c10 <__ssvfiscanf_r+0x60>
 8018d2e:	e01d      	b.n	8018d6c <__ssvfiscanf_r+0x1bc>
 8018d30:	2b75      	cmp	r3, #117	; 0x75
 8018d32:	d0d1      	beq.n	8018cd8 <__ssvfiscanf_r+0x128>
 8018d34:	2b78      	cmp	r3, #120	; 0x78
 8018d36:	d0c0      	beq.n	8018cba <__ssvfiscanf_r+0x10a>
 8018d38:	2b73      	cmp	r3, #115	; 0x73
 8018d3a:	d1af      	bne.n	8018c9c <__ssvfiscanf_r+0xec>
 8018d3c:	2302      	movs	r3, #2
 8018d3e:	e7d8      	b.n	8018cf2 <__ssvfiscanf_r+0x142>
 8018d40:	6863      	ldr	r3, [r4, #4]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	dd0c      	ble.n	8018d60 <__ssvfiscanf_r+0x1b0>
 8018d46:	6823      	ldr	r3, [r4, #0]
 8018d48:	781a      	ldrb	r2, [r3, #0]
 8018d4a:	455a      	cmp	r2, fp
 8018d4c:	d175      	bne.n	8018e3a <__ssvfiscanf_r+0x28a>
 8018d4e:	3301      	adds	r3, #1
 8018d50:	6862      	ldr	r2, [r4, #4]
 8018d52:	6023      	str	r3, [r4, #0]
 8018d54:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018d56:	3a01      	subs	r2, #1
 8018d58:	3301      	adds	r3, #1
 8018d5a:	6062      	str	r2, [r4, #4]
 8018d5c:	9345      	str	r3, [sp, #276]	; 0x114
 8018d5e:	e757      	b.n	8018c10 <__ssvfiscanf_r+0x60>
 8018d60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018d62:	4621      	mov	r1, r4
 8018d64:	4630      	mov	r0, r6
 8018d66:	4798      	blx	r3
 8018d68:	2800      	cmp	r0, #0
 8018d6a:	d0ec      	beq.n	8018d46 <__ssvfiscanf_r+0x196>
 8018d6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018d6e:	2800      	cmp	r0, #0
 8018d70:	d159      	bne.n	8018e26 <__ssvfiscanf_r+0x276>
 8018d72:	f04f 30ff 	mov.w	r0, #4294967295
 8018d76:	e05c      	b.n	8018e32 <__ssvfiscanf_r+0x282>
 8018d78:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018d7a:	f042 0220 	orr.w	r2, r2, #32
 8018d7e:	9241      	str	r2, [sp, #260]	; 0x104
 8018d80:	e79b      	b.n	8018cba <__ssvfiscanf_r+0x10a>
 8018d82:	2308      	movs	r3, #8
 8018d84:	9342      	str	r3, [sp, #264]	; 0x108
 8018d86:	2304      	movs	r3, #4
 8018d88:	e7b3      	b.n	8018cf2 <__ssvfiscanf_r+0x142>
 8018d8a:	4629      	mov	r1, r5
 8018d8c:	4640      	mov	r0, r8
 8018d8e:	f000 f9c7 	bl	8019120 <__sccl>
 8018d92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d98:	9341      	str	r3, [sp, #260]	; 0x104
 8018d9a:	4605      	mov	r5, r0
 8018d9c:	2301      	movs	r3, #1
 8018d9e:	e7a8      	b.n	8018cf2 <__ssvfiscanf_r+0x142>
 8018da0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018da6:	9341      	str	r3, [sp, #260]	; 0x104
 8018da8:	2300      	movs	r3, #0
 8018daa:	e7a2      	b.n	8018cf2 <__ssvfiscanf_r+0x142>
 8018dac:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018dae:	06c3      	lsls	r3, r0, #27
 8018db0:	f53f af2e 	bmi.w	8018c10 <__ssvfiscanf_r+0x60>
 8018db4:	9b00      	ldr	r3, [sp, #0]
 8018db6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018db8:	1d19      	adds	r1, r3, #4
 8018dba:	9100      	str	r1, [sp, #0]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	07c0      	lsls	r0, r0, #31
 8018dc0:	bf4c      	ite	mi
 8018dc2:	801a      	strhmi	r2, [r3, #0]
 8018dc4:	601a      	strpl	r2, [r3, #0]
 8018dc6:	e723      	b.n	8018c10 <__ssvfiscanf_r+0x60>
 8018dc8:	2305      	movs	r3, #5
 8018dca:	e792      	b.n	8018cf2 <__ssvfiscanf_r+0x142>
 8018dcc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018dce:	4621      	mov	r1, r4
 8018dd0:	4630      	mov	r0, r6
 8018dd2:	4798      	blx	r3
 8018dd4:	2800      	cmp	r0, #0
 8018dd6:	d090      	beq.n	8018cfa <__ssvfiscanf_r+0x14a>
 8018dd8:	e7c8      	b.n	8018d6c <__ssvfiscanf_r+0x1bc>
 8018dda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018ddc:	3201      	adds	r2, #1
 8018dde:	9245      	str	r2, [sp, #276]	; 0x114
 8018de0:	6862      	ldr	r2, [r4, #4]
 8018de2:	3a01      	subs	r2, #1
 8018de4:	2a00      	cmp	r2, #0
 8018de6:	6062      	str	r2, [r4, #4]
 8018de8:	dd02      	ble.n	8018df0 <__ssvfiscanf_r+0x240>
 8018dea:	3301      	adds	r3, #1
 8018dec:	6023      	str	r3, [r4, #0]
 8018dee:	e787      	b.n	8018d00 <__ssvfiscanf_r+0x150>
 8018df0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018df2:	4621      	mov	r1, r4
 8018df4:	4630      	mov	r0, r6
 8018df6:	4798      	blx	r3
 8018df8:	2800      	cmp	r0, #0
 8018dfa:	d081      	beq.n	8018d00 <__ssvfiscanf_r+0x150>
 8018dfc:	e7b6      	b.n	8018d6c <__ssvfiscanf_r+0x1bc>
 8018dfe:	2b04      	cmp	r3, #4
 8018e00:	dc06      	bgt.n	8018e10 <__ssvfiscanf_r+0x260>
 8018e02:	466b      	mov	r3, sp
 8018e04:	4622      	mov	r2, r4
 8018e06:	a941      	add	r1, sp, #260	; 0x104
 8018e08:	4630      	mov	r0, r6
 8018e0a:	f000 f885 	bl	8018f18 <_scanf_i>
 8018e0e:	e788      	b.n	8018d22 <__ssvfiscanf_r+0x172>
 8018e10:	4b0e      	ldr	r3, [pc, #56]	; (8018e4c <__ssvfiscanf_r+0x29c>)
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	f43f aefc 	beq.w	8018c10 <__ssvfiscanf_r+0x60>
 8018e18:	466b      	mov	r3, sp
 8018e1a:	4622      	mov	r2, r4
 8018e1c:	a941      	add	r1, sp, #260	; 0x104
 8018e1e:	4630      	mov	r0, r6
 8018e20:	f7fc fd7e 	bl	8015920 <_scanf_float>
 8018e24:	e77d      	b.n	8018d22 <__ssvfiscanf_r+0x172>
 8018e26:	89a3      	ldrh	r3, [r4, #12]
 8018e28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018e2c:	bf18      	it	ne
 8018e2e:	f04f 30ff 	movne.w	r0, #4294967295
 8018e32:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e3a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018e3c:	e7f9      	b.n	8018e32 <__ssvfiscanf_r+0x282>
 8018e3e:	bf00      	nop
 8018e40:	08018afd 	.word	0x08018afd
 8018e44:	08018b77 	.word	0x08018b77
 8018e48:	08019eda 	.word	0x08019eda
 8018e4c:	08015921 	.word	0x08015921

08018e50 <_scanf_chars>:
 8018e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e54:	4615      	mov	r5, r2
 8018e56:	688a      	ldr	r2, [r1, #8]
 8018e58:	4680      	mov	r8, r0
 8018e5a:	460c      	mov	r4, r1
 8018e5c:	b932      	cbnz	r2, 8018e6c <_scanf_chars+0x1c>
 8018e5e:	698a      	ldr	r2, [r1, #24]
 8018e60:	2a00      	cmp	r2, #0
 8018e62:	bf14      	ite	ne
 8018e64:	f04f 32ff 	movne.w	r2, #4294967295
 8018e68:	2201      	moveq	r2, #1
 8018e6a:	608a      	str	r2, [r1, #8]
 8018e6c:	6822      	ldr	r2, [r4, #0]
 8018e6e:	06d1      	lsls	r1, r2, #27
 8018e70:	bf5f      	itttt	pl
 8018e72:	681a      	ldrpl	r2, [r3, #0]
 8018e74:	1d11      	addpl	r1, r2, #4
 8018e76:	6019      	strpl	r1, [r3, #0]
 8018e78:	6817      	ldrpl	r7, [r2, #0]
 8018e7a:	2600      	movs	r6, #0
 8018e7c:	69a3      	ldr	r3, [r4, #24]
 8018e7e:	b1db      	cbz	r3, 8018eb8 <_scanf_chars+0x68>
 8018e80:	2b01      	cmp	r3, #1
 8018e82:	d107      	bne.n	8018e94 <_scanf_chars+0x44>
 8018e84:	682b      	ldr	r3, [r5, #0]
 8018e86:	6962      	ldr	r2, [r4, #20]
 8018e88:	781b      	ldrb	r3, [r3, #0]
 8018e8a:	5cd3      	ldrb	r3, [r2, r3]
 8018e8c:	b9a3      	cbnz	r3, 8018eb8 <_scanf_chars+0x68>
 8018e8e:	2e00      	cmp	r6, #0
 8018e90:	d132      	bne.n	8018ef8 <_scanf_chars+0xa8>
 8018e92:	e006      	b.n	8018ea2 <_scanf_chars+0x52>
 8018e94:	2b02      	cmp	r3, #2
 8018e96:	d007      	beq.n	8018ea8 <_scanf_chars+0x58>
 8018e98:	2e00      	cmp	r6, #0
 8018e9a:	d12d      	bne.n	8018ef8 <_scanf_chars+0xa8>
 8018e9c:	69a3      	ldr	r3, [r4, #24]
 8018e9e:	2b01      	cmp	r3, #1
 8018ea0:	d12a      	bne.n	8018ef8 <_scanf_chars+0xa8>
 8018ea2:	2001      	movs	r0, #1
 8018ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ea8:	f7fe ffe8 	bl	8017e7c <__locale_ctype_ptr>
 8018eac:	682b      	ldr	r3, [r5, #0]
 8018eae:	781b      	ldrb	r3, [r3, #0]
 8018eb0:	4418      	add	r0, r3
 8018eb2:	7843      	ldrb	r3, [r0, #1]
 8018eb4:	071b      	lsls	r3, r3, #28
 8018eb6:	d4ef      	bmi.n	8018e98 <_scanf_chars+0x48>
 8018eb8:	6823      	ldr	r3, [r4, #0]
 8018eba:	06da      	lsls	r2, r3, #27
 8018ebc:	bf5e      	ittt	pl
 8018ebe:	682b      	ldrpl	r3, [r5, #0]
 8018ec0:	781b      	ldrbpl	r3, [r3, #0]
 8018ec2:	703b      	strbpl	r3, [r7, #0]
 8018ec4:	682a      	ldr	r2, [r5, #0]
 8018ec6:	686b      	ldr	r3, [r5, #4]
 8018ec8:	f102 0201 	add.w	r2, r2, #1
 8018ecc:	602a      	str	r2, [r5, #0]
 8018ece:	68a2      	ldr	r2, [r4, #8]
 8018ed0:	f103 33ff 	add.w	r3, r3, #4294967295
 8018ed4:	f102 32ff 	add.w	r2, r2, #4294967295
 8018ed8:	606b      	str	r3, [r5, #4]
 8018eda:	f106 0601 	add.w	r6, r6, #1
 8018ede:	bf58      	it	pl
 8018ee0:	3701      	addpl	r7, #1
 8018ee2:	60a2      	str	r2, [r4, #8]
 8018ee4:	b142      	cbz	r2, 8018ef8 <_scanf_chars+0xa8>
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	dcc8      	bgt.n	8018e7c <_scanf_chars+0x2c>
 8018eea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018eee:	4629      	mov	r1, r5
 8018ef0:	4640      	mov	r0, r8
 8018ef2:	4798      	blx	r3
 8018ef4:	2800      	cmp	r0, #0
 8018ef6:	d0c1      	beq.n	8018e7c <_scanf_chars+0x2c>
 8018ef8:	6823      	ldr	r3, [r4, #0]
 8018efa:	f013 0310 	ands.w	r3, r3, #16
 8018efe:	d105      	bne.n	8018f0c <_scanf_chars+0xbc>
 8018f00:	68e2      	ldr	r2, [r4, #12]
 8018f02:	3201      	adds	r2, #1
 8018f04:	60e2      	str	r2, [r4, #12]
 8018f06:	69a2      	ldr	r2, [r4, #24]
 8018f08:	b102      	cbz	r2, 8018f0c <_scanf_chars+0xbc>
 8018f0a:	703b      	strb	r3, [r7, #0]
 8018f0c:	6923      	ldr	r3, [r4, #16]
 8018f0e:	441e      	add	r6, r3
 8018f10:	6126      	str	r6, [r4, #16]
 8018f12:	2000      	movs	r0, #0
 8018f14:	e7c6      	b.n	8018ea4 <_scanf_chars+0x54>
	...

08018f18 <_scanf_i>:
 8018f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f1c:	469a      	mov	sl, r3
 8018f1e:	4b74      	ldr	r3, [pc, #464]	; (80190f0 <_scanf_i+0x1d8>)
 8018f20:	460c      	mov	r4, r1
 8018f22:	4683      	mov	fp, r0
 8018f24:	4616      	mov	r6, r2
 8018f26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018f2a:	b087      	sub	sp, #28
 8018f2c:	ab03      	add	r3, sp, #12
 8018f2e:	68a7      	ldr	r7, [r4, #8]
 8018f30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018f34:	4b6f      	ldr	r3, [pc, #444]	; (80190f4 <_scanf_i+0x1dc>)
 8018f36:	69a1      	ldr	r1, [r4, #24]
 8018f38:	4a6f      	ldr	r2, [pc, #444]	; (80190f8 <_scanf_i+0x1e0>)
 8018f3a:	2903      	cmp	r1, #3
 8018f3c:	bf08      	it	eq
 8018f3e:	461a      	moveq	r2, r3
 8018f40:	1e7b      	subs	r3, r7, #1
 8018f42:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018f46:	bf84      	itt	hi
 8018f48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018f4c:	60a3      	strhi	r3, [r4, #8]
 8018f4e:	6823      	ldr	r3, [r4, #0]
 8018f50:	9200      	str	r2, [sp, #0]
 8018f52:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018f56:	bf88      	it	hi
 8018f58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018f5c:	f104 091c 	add.w	r9, r4, #28
 8018f60:	6023      	str	r3, [r4, #0]
 8018f62:	bf8c      	ite	hi
 8018f64:	197f      	addhi	r7, r7, r5
 8018f66:	2700      	movls	r7, #0
 8018f68:	464b      	mov	r3, r9
 8018f6a:	f04f 0800 	mov.w	r8, #0
 8018f6e:	9301      	str	r3, [sp, #4]
 8018f70:	6831      	ldr	r1, [r6, #0]
 8018f72:	ab03      	add	r3, sp, #12
 8018f74:	2202      	movs	r2, #2
 8018f76:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018f7a:	7809      	ldrb	r1, [r1, #0]
 8018f7c:	f7e7 f948 	bl	8000210 <memchr>
 8018f80:	9b01      	ldr	r3, [sp, #4]
 8018f82:	b330      	cbz	r0, 8018fd2 <_scanf_i+0xba>
 8018f84:	f1b8 0f01 	cmp.w	r8, #1
 8018f88:	d15a      	bne.n	8019040 <_scanf_i+0x128>
 8018f8a:	6862      	ldr	r2, [r4, #4]
 8018f8c:	b92a      	cbnz	r2, 8018f9a <_scanf_i+0x82>
 8018f8e:	6822      	ldr	r2, [r4, #0]
 8018f90:	2108      	movs	r1, #8
 8018f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018f96:	6061      	str	r1, [r4, #4]
 8018f98:	6022      	str	r2, [r4, #0]
 8018f9a:	6822      	ldr	r2, [r4, #0]
 8018f9c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018fa0:	6022      	str	r2, [r4, #0]
 8018fa2:	68a2      	ldr	r2, [r4, #8]
 8018fa4:	1e51      	subs	r1, r2, #1
 8018fa6:	60a1      	str	r1, [r4, #8]
 8018fa8:	b19a      	cbz	r2, 8018fd2 <_scanf_i+0xba>
 8018faa:	6832      	ldr	r2, [r6, #0]
 8018fac:	1c51      	adds	r1, r2, #1
 8018fae:	6031      	str	r1, [r6, #0]
 8018fb0:	7812      	ldrb	r2, [r2, #0]
 8018fb2:	701a      	strb	r2, [r3, #0]
 8018fb4:	1c5d      	adds	r5, r3, #1
 8018fb6:	6873      	ldr	r3, [r6, #4]
 8018fb8:	3b01      	subs	r3, #1
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	6073      	str	r3, [r6, #4]
 8018fbe:	dc07      	bgt.n	8018fd0 <_scanf_i+0xb8>
 8018fc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018fc4:	4631      	mov	r1, r6
 8018fc6:	4658      	mov	r0, fp
 8018fc8:	4798      	blx	r3
 8018fca:	2800      	cmp	r0, #0
 8018fcc:	f040 8086 	bne.w	80190dc <_scanf_i+0x1c4>
 8018fd0:	462b      	mov	r3, r5
 8018fd2:	f108 0801 	add.w	r8, r8, #1
 8018fd6:	f1b8 0f03 	cmp.w	r8, #3
 8018fda:	d1c8      	bne.n	8018f6e <_scanf_i+0x56>
 8018fdc:	6862      	ldr	r2, [r4, #4]
 8018fde:	b90a      	cbnz	r2, 8018fe4 <_scanf_i+0xcc>
 8018fe0:	220a      	movs	r2, #10
 8018fe2:	6062      	str	r2, [r4, #4]
 8018fe4:	6862      	ldr	r2, [r4, #4]
 8018fe6:	4945      	ldr	r1, [pc, #276]	; (80190fc <_scanf_i+0x1e4>)
 8018fe8:	6960      	ldr	r0, [r4, #20]
 8018fea:	9301      	str	r3, [sp, #4]
 8018fec:	1a89      	subs	r1, r1, r2
 8018fee:	f000 f897 	bl	8019120 <__sccl>
 8018ff2:	9b01      	ldr	r3, [sp, #4]
 8018ff4:	f04f 0800 	mov.w	r8, #0
 8018ff8:	461d      	mov	r5, r3
 8018ffa:	68a3      	ldr	r3, [r4, #8]
 8018ffc:	6822      	ldr	r2, [r4, #0]
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d03a      	beq.n	8019078 <_scanf_i+0x160>
 8019002:	6831      	ldr	r1, [r6, #0]
 8019004:	6960      	ldr	r0, [r4, #20]
 8019006:	f891 c000 	ldrb.w	ip, [r1]
 801900a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801900e:	2800      	cmp	r0, #0
 8019010:	d032      	beq.n	8019078 <_scanf_i+0x160>
 8019012:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019016:	d121      	bne.n	801905c <_scanf_i+0x144>
 8019018:	0510      	lsls	r0, r2, #20
 801901a:	d51f      	bpl.n	801905c <_scanf_i+0x144>
 801901c:	f108 0801 	add.w	r8, r8, #1
 8019020:	b117      	cbz	r7, 8019028 <_scanf_i+0x110>
 8019022:	3301      	adds	r3, #1
 8019024:	3f01      	subs	r7, #1
 8019026:	60a3      	str	r3, [r4, #8]
 8019028:	6873      	ldr	r3, [r6, #4]
 801902a:	3b01      	subs	r3, #1
 801902c:	2b00      	cmp	r3, #0
 801902e:	6073      	str	r3, [r6, #4]
 8019030:	dd1b      	ble.n	801906a <_scanf_i+0x152>
 8019032:	6833      	ldr	r3, [r6, #0]
 8019034:	3301      	adds	r3, #1
 8019036:	6033      	str	r3, [r6, #0]
 8019038:	68a3      	ldr	r3, [r4, #8]
 801903a:	3b01      	subs	r3, #1
 801903c:	60a3      	str	r3, [r4, #8]
 801903e:	e7dc      	b.n	8018ffa <_scanf_i+0xe2>
 8019040:	f1b8 0f02 	cmp.w	r8, #2
 8019044:	d1ad      	bne.n	8018fa2 <_scanf_i+0x8a>
 8019046:	6822      	ldr	r2, [r4, #0]
 8019048:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801904c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019050:	d1bf      	bne.n	8018fd2 <_scanf_i+0xba>
 8019052:	2110      	movs	r1, #16
 8019054:	6061      	str	r1, [r4, #4]
 8019056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801905a:	e7a1      	b.n	8018fa0 <_scanf_i+0x88>
 801905c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019060:	6022      	str	r2, [r4, #0]
 8019062:	780b      	ldrb	r3, [r1, #0]
 8019064:	702b      	strb	r3, [r5, #0]
 8019066:	3501      	adds	r5, #1
 8019068:	e7de      	b.n	8019028 <_scanf_i+0x110>
 801906a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801906e:	4631      	mov	r1, r6
 8019070:	4658      	mov	r0, fp
 8019072:	4798      	blx	r3
 8019074:	2800      	cmp	r0, #0
 8019076:	d0df      	beq.n	8019038 <_scanf_i+0x120>
 8019078:	6823      	ldr	r3, [r4, #0]
 801907a:	05d9      	lsls	r1, r3, #23
 801907c:	d50c      	bpl.n	8019098 <_scanf_i+0x180>
 801907e:	454d      	cmp	r5, r9
 8019080:	d908      	bls.n	8019094 <_scanf_i+0x17c>
 8019082:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019086:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801908a:	4632      	mov	r2, r6
 801908c:	4658      	mov	r0, fp
 801908e:	4798      	blx	r3
 8019090:	1e6f      	subs	r7, r5, #1
 8019092:	463d      	mov	r5, r7
 8019094:	454d      	cmp	r5, r9
 8019096:	d029      	beq.n	80190ec <_scanf_i+0x1d4>
 8019098:	6822      	ldr	r2, [r4, #0]
 801909a:	f012 0210 	ands.w	r2, r2, #16
 801909e:	d113      	bne.n	80190c8 <_scanf_i+0x1b0>
 80190a0:	702a      	strb	r2, [r5, #0]
 80190a2:	6863      	ldr	r3, [r4, #4]
 80190a4:	9e00      	ldr	r6, [sp, #0]
 80190a6:	4649      	mov	r1, r9
 80190a8:	4658      	mov	r0, fp
 80190aa:	47b0      	blx	r6
 80190ac:	f8da 3000 	ldr.w	r3, [sl]
 80190b0:	6821      	ldr	r1, [r4, #0]
 80190b2:	1d1a      	adds	r2, r3, #4
 80190b4:	f8ca 2000 	str.w	r2, [sl]
 80190b8:	f011 0f20 	tst.w	r1, #32
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	d010      	beq.n	80190e2 <_scanf_i+0x1ca>
 80190c0:	6018      	str	r0, [r3, #0]
 80190c2:	68e3      	ldr	r3, [r4, #12]
 80190c4:	3301      	adds	r3, #1
 80190c6:	60e3      	str	r3, [r4, #12]
 80190c8:	eba5 0509 	sub.w	r5, r5, r9
 80190cc:	44a8      	add	r8, r5
 80190ce:	6925      	ldr	r5, [r4, #16]
 80190d0:	4445      	add	r5, r8
 80190d2:	6125      	str	r5, [r4, #16]
 80190d4:	2000      	movs	r0, #0
 80190d6:	b007      	add	sp, #28
 80190d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190dc:	f04f 0800 	mov.w	r8, #0
 80190e0:	e7ca      	b.n	8019078 <_scanf_i+0x160>
 80190e2:	07ca      	lsls	r2, r1, #31
 80190e4:	bf4c      	ite	mi
 80190e6:	8018      	strhmi	r0, [r3, #0]
 80190e8:	6018      	strpl	r0, [r3, #0]
 80190ea:	e7ea      	b.n	80190c2 <_scanf_i+0x1aa>
 80190ec:	2001      	movs	r0, #1
 80190ee:	e7f2      	b.n	80190d6 <_scanf_i+0x1be>
 80190f0:	08019a38 	.word	0x08019a38
 80190f4:	08016b39 	.word	0x08016b39
 80190f8:	0801929d 	.word	0x0801929d
 80190fc:	08019ef5 	.word	0x08019ef5

08019100 <_sbrk_r>:
 8019100:	b538      	push	{r3, r4, r5, lr}
 8019102:	4c06      	ldr	r4, [pc, #24]	; (801911c <_sbrk_r+0x1c>)
 8019104:	2300      	movs	r3, #0
 8019106:	4605      	mov	r5, r0
 8019108:	4608      	mov	r0, r1
 801910a:	6023      	str	r3, [r4, #0]
 801910c:	f7ee fa00 	bl	8007510 <_sbrk>
 8019110:	1c43      	adds	r3, r0, #1
 8019112:	d102      	bne.n	801911a <_sbrk_r+0x1a>
 8019114:	6823      	ldr	r3, [r4, #0]
 8019116:	b103      	cbz	r3, 801911a <_sbrk_r+0x1a>
 8019118:	602b      	str	r3, [r5, #0]
 801911a:	bd38      	pop	{r3, r4, r5, pc}
 801911c:	20044d74 	.word	0x20044d74

08019120 <__sccl>:
 8019120:	b570      	push	{r4, r5, r6, lr}
 8019122:	780b      	ldrb	r3, [r1, #0]
 8019124:	2b5e      	cmp	r3, #94	; 0x5e
 8019126:	bf13      	iteet	ne
 8019128:	1c4a      	addne	r2, r1, #1
 801912a:	1c8a      	addeq	r2, r1, #2
 801912c:	784b      	ldrbeq	r3, [r1, #1]
 801912e:	2100      	movne	r1, #0
 8019130:	bf08      	it	eq
 8019132:	2101      	moveq	r1, #1
 8019134:	1e44      	subs	r4, r0, #1
 8019136:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801913a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801913e:	42ac      	cmp	r4, r5
 8019140:	d1fb      	bne.n	801913a <__sccl+0x1a>
 8019142:	b913      	cbnz	r3, 801914a <__sccl+0x2a>
 8019144:	3a01      	subs	r2, #1
 8019146:	4610      	mov	r0, r2
 8019148:	bd70      	pop	{r4, r5, r6, pc}
 801914a:	f081 0401 	eor.w	r4, r1, #1
 801914e:	54c4      	strb	r4, [r0, r3]
 8019150:	1c51      	adds	r1, r2, #1
 8019152:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019156:	2d2d      	cmp	r5, #45	; 0x2d
 8019158:	f101 36ff 	add.w	r6, r1, #4294967295
 801915c:	460a      	mov	r2, r1
 801915e:	d006      	beq.n	801916e <__sccl+0x4e>
 8019160:	2d5d      	cmp	r5, #93	; 0x5d
 8019162:	d0f0      	beq.n	8019146 <__sccl+0x26>
 8019164:	b90d      	cbnz	r5, 801916a <__sccl+0x4a>
 8019166:	4632      	mov	r2, r6
 8019168:	e7ed      	b.n	8019146 <__sccl+0x26>
 801916a:	462b      	mov	r3, r5
 801916c:	e7ef      	b.n	801914e <__sccl+0x2e>
 801916e:	780e      	ldrb	r6, [r1, #0]
 8019170:	2e5d      	cmp	r6, #93	; 0x5d
 8019172:	d0fa      	beq.n	801916a <__sccl+0x4a>
 8019174:	42b3      	cmp	r3, r6
 8019176:	dcf8      	bgt.n	801916a <__sccl+0x4a>
 8019178:	3301      	adds	r3, #1
 801917a:	429e      	cmp	r6, r3
 801917c:	54c4      	strb	r4, [r0, r3]
 801917e:	dcfb      	bgt.n	8019178 <__sccl+0x58>
 8019180:	3102      	adds	r1, #2
 8019182:	e7e6      	b.n	8019152 <__sccl+0x32>

08019184 <strncmp>:
 8019184:	b510      	push	{r4, lr}
 8019186:	b16a      	cbz	r2, 80191a4 <strncmp+0x20>
 8019188:	3901      	subs	r1, #1
 801918a:	1884      	adds	r4, r0, r2
 801918c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019190:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019194:	4293      	cmp	r3, r2
 8019196:	d103      	bne.n	80191a0 <strncmp+0x1c>
 8019198:	42a0      	cmp	r0, r4
 801919a:	d001      	beq.n	80191a0 <strncmp+0x1c>
 801919c:	2b00      	cmp	r3, #0
 801919e:	d1f5      	bne.n	801918c <strncmp+0x8>
 80191a0:	1a98      	subs	r0, r3, r2
 80191a2:	bd10      	pop	{r4, pc}
 80191a4:	4610      	mov	r0, r2
 80191a6:	e7fc      	b.n	80191a2 <strncmp+0x1e>

080191a8 <_strtoul_l.isra.0>:
 80191a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191ac:	4680      	mov	r8, r0
 80191ae:	4689      	mov	r9, r1
 80191b0:	4692      	mov	sl, r2
 80191b2:	461e      	mov	r6, r3
 80191b4:	460f      	mov	r7, r1
 80191b6:	463d      	mov	r5, r7
 80191b8:	9808      	ldr	r0, [sp, #32]
 80191ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191be:	f7fe fe59 	bl	8017e74 <__locale_ctype_ptr_l>
 80191c2:	4420      	add	r0, r4
 80191c4:	7843      	ldrb	r3, [r0, #1]
 80191c6:	f013 0308 	ands.w	r3, r3, #8
 80191ca:	d130      	bne.n	801922e <_strtoul_l.isra.0+0x86>
 80191cc:	2c2d      	cmp	r4, #45	; 0x2d
 80191ce:	d130      	bne.n	8019232 <_strtoul_l.isra.0+0x8a>
 80191d0:	787c      	ldrb	r4, [r7, #1]
 80191d2:	1cbd      	adds	r5, r7, #2
 80191d4:	2101      	movs	r1, #1
 80191d6:	2e00      	cmp	r6, #0
 80191d8:	d05c      	beq.n	8019294 <_strtoul_l.isra.0+0xec>
 80191da:	2e10      	cmp	r6, #16
 80191dc:	d109      	bne.n	80191f2 <_strtoul_l.isra.0+0x4a>
 80191de:	2c30      	cmp	r4, #48	; 0x30
 80191e0:	d107      	bne.n	80191f2 <_strtoul_l.isra.0+0x4a>
 80191e2:	782b      	ldrb	r3, [r5, #0]
 80191e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80191e8:	2b58      	cmp	r3, #88	; 0x58
 80191ea:	d14e      	bne.n	801928a <_strtoul_l.isra.0+0xe2>
 80191ec:	786c      	ldrb	r4, [r5, #1]
 80191ee:	2610      	movs	r6, #16
 80191f0:	3502      	adds	r5, #2
 80191f2:	f04f 32ff 	mov.w	r2, #4294967295
 80191f6:	2300      	movs	r3, #0
 80191f8:	fbb2 f2f6 	udiv	r2, r2, r6
 80191fc:	fb06 fc02 	mul.w	ip, r6, r2
 8019200:	ea6f 0c0c 	mvn.w	ip, ip
 8019204:	4618      	mov	r0, r3
 8019206:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801920a:	2f09      	cmp	r7, #9
 801920c:	d817      	bhi.n	801923e <_strtoul_l.isra.0+0x96>
 801920e:	463c      	mov	r4, r7
 8019210:	42a6      	cmp	r6, r4
 8019212:	dd23      	ble.n	801925c <_strtoul_l.isra.0+0xb4>
 8019214:	2b00      	cmp	r3, #0
 8019216:	db1e      	blt.n	8019256 <_strtoul_l.isra.0+0xae>
 8019218:	4282      	cmp	r2, r0
 801921a:	d31c      	bcc.n	8019256 <_strtoul_l.isra.0+0xae>
 801921c:	d101      	bne.n	8019222 <_strtoul_l.isra.0+0x7a>
 801921e:	45a4      	cmp	ip, r4
 8019220:	db19      	blt.n	8019256 <_strtoul_l.isra.0+0xae>
 8019222:	fb00 4006 	mla	r0, r0, r6, r4
 8019226:	2301      	movs	r3, #1
 8019228:	f815 4b01 	ldrb.w	r4, [r5], #1
 801922c:	e7eb      	b.n	8019206 <_strtoul_l.isra.0+0x5e>
 801922e:	462f      	mov	r7, r5
 8019230:	e7c1      	b.n	80191b6 <_strtoul_l.isra.0+0xe>
 8019232:	2c2b      	cmp	r4, #43	; 0x2b
 8019234:	bf04      	itt	eq
 8019236:	1cbd      	addeq	r5, r7, #2
 8019238:	787c      	ldrbeq	r4, [r7, #1]
 801923a:	4619      	mov	r1, r3
 801923c:	e7cb      	b.n	80191d6 <_strtoul_l.isra.0+0x2e>
 801923e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019242:	2f19      	cmp	r7, #25
 8019244:	d801      	bhi.n	801924a <_strtoul_l.isra.0+0xa2>
 8019246:	3c37      	subs	r4, #55	; 0x37
 8019248:	e7e2      	b.n	8019210 <_strtoul_l.isra.0+0x68>
 801924a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801924e:	2f19      	cmp	r7, #25
 8019250:	d804      	bhi.n	801925c <_strtoul_l.isra.0+0xb4>
 8019252:	3c57      	subs	r4, #87	; 0x57
 8019254:	e7dc      	b.n	8019210 <_strtoul_l.isra.0+0x68>
 8019256:	f04f 33ff 	mov.w	r3, #4294967295
 801925a:	e7e5      	b.n	8019228 <_strtoul_l.isra.0+0x80>
 801925c:	2b00      	cmp	r3, #0
 801925e:	da09      	bge.n	8019274 <_strtoul_l.isra.0+0xcc>
 8019260:	2322      	movs	r3, #34	; 0x22
 8019262:	f8c8 3000 	str.w	r3, [r8]
 8019266:	f04f 30ff 	mov.w	r0, #4294967295
 801926a:	f1ba 0f00 	cmp.w	sl, #0
 801926e:	d107      	bne.n	8019280 <_strtoul_l.isra.0+0xd8>
 8019270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019274:	b101      	cbz	r1, 8019278 <_strtoul_l.isra.0+0xd0>
 8019276:	4240      	negs	r0, r0
 8019278:	f1ba 0f00 	cmp.w	sl, #0
 801927c:	d0f8      	beq.n	8019270 <_strtoul_l.isra.0+0xc8>
 801927e:	b10b      	cbz	r3, 8019284 <_strtoul_l.isra.0+0xdc>
 8019280:	f105 39ff 	add.w	r9, r5, #4294967295
 8019284:	f8ca 9000 	str.w	r9, [sl]
 8019288:	e7f2      	b.n	8019270 <_strtoul_l.isra.0+0xc8>
 801928a:	2430      	movs	r4, #48	; 0x30
 801928c:	2e00      	cmp	r6, #0
 801928e:	d1b0      	bne.n	80191f2 <_strtoul_l.isra.0+0x4a>
 8019290:	2608      	movs	r6, #8
 8019292:	e7ae      	b.n	80191f2 <_strtoul_l.isra.0+0x4a>
 8019294:	2c30      	cmp	r4, #48	; 0x30
 8019296:	d0a4      	beq.n	80191e2 <_strtoul_l.isra.0+0x3a>
 8019298:	260a      	movs	r6, #10
 801929a:	e7aa      	b.n	80191f2 <_strtoul_l.isra.0+0x4a>

0801929c <_strtoul_r>:
 801929c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801929e:	4c06      	ldr	r4, [pc, #24]	; (80192b8 <_strtoul_r+0x1c>)
 80192a0:	4d06      	ldr	r5, [pc, #24]	; (80192bc <_strtoul_r+0x20>)
 80192a2:	6824      	ldr	r4, [r4, #0]
 80192a4:	6a24      	ldr	r4, [r4, #32]
 80192a6:	2c00      	cmp	r4, #0
 80192a8:	bf08      	it	eq
 80192aa:	462c      	moveq	r4, r5
 80192ac:	9400      	str	r4, [sp, #0]
 80192ae:	f7ff ff7b 	bl	80191a8 <_strtoul_l.isra.0>
 80192b2:	b003      	add	sp, #12
 80192b4:	bd30      	pop	{r4, r5, pc}
 80192b6:	bf00      	nop
 80192b8:	2000000c 	.word	0x2000000c
 80192bc:	20000070 	.word	0x20000070

080192c0 <__submore>:
 80192c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192c4:	460c      	mov	r4, r1
 80192c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80192c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80192cc:	4299      	cmp	r1, r3
 80192ce:	d11d      	bne.n	801930c <__submore+0x4c>
 80192d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80192d4:	f7ff fa66 	bl	80187a4 <_malloc_r>
 80192d8:	b918      	cbnz	r0, 80192e2 <__submore+0x22>
 80192da:	f04f 30ff 	mov.w	r0, #4294967295
 80192de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80192e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80192e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80192ec:	6360      	str	r0, [r4, #52]	; 0x34
 80192ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80192f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80192f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80192fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80192fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019302:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019306:	6020      	str	r0, [r4, #0]
 8019308:	2000      	movs	r0, #0
 801930a:	e7e8      	b.n	80192de <__submore+0x1e>
 801930c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801930e:	0077      	lsls	r7, r6, #1
 8019310:	463a      	mov	r2, r7
 8019312:	f000 f837 	bl	8019384 <_realloc_r>
 8019316:	4605      	mov	r5, r0
 8019318:	2800      	cmp	r0, #0
 801931a:	d0de      	beq.n	80192da <__submore+0x1a>
 801931c:	eb00 0806 	add.w	r8, r0, r6
 8019320:	4601      	mov	r1, r0
 8019322:	4632      	mov	r2, r6
 8019324:	4640      	mov	r0, r8
 8019326:	f7fb fe8b 	bl	8015040 <memcpy>
 801932a:	f8c4 8000 	str.w	r8, [r4]
 801932e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019332:	e7e9      	b.n	8019308 <__submore+0x48>

08019334 <__ascii_wctomb>:
 8019334:	b149      	cbz	r1, 801934a <__ascii_wctomb+0x16>
 8019336:	2aff      	cmp	r2, #255	; 0xff
 8019338:	bf85      	ittet	hi
 801933a:	238a      	movhi	r3, #138	; 0x8a
 801933c:	6003      	strhi	r3, [r0, #0]
 801933e:	700a      	strbls	r2, [r1, #0]
 8019340:	f04f 30ff 	movhi.w	r0, #4294967295
 8019344:	bf98      	it	ls
 8019346:	2001      	movls	r0, #1
 8019348:	4770      	bx	lr
 801934a:	4608      	mov	r0, r1
 801934c:	4770      	bx	lr

0801934e <memmove>:
 801934e:	4288      	cmp	r0, r1
 8019350:	b510      	push	{r4, lr}
 8019352:	eb01 0302 	add.w	r3, r1, r2
 8019356:	d807      	bhi.n	8019368 <memmove+0x1a>
 8019358:	1e42      	subs	r2, r0, #1
 801935a:	4299      	cmp	r1, r3
 801935c:	d00a      	beq.n	8019374 <memmove+0x26>
 801935e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019362:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019366:	e7f8      	b.n	801935a <memmove+0xc>
 8019368:	4283      	cmp	r3, r0
 801936a:	d9f5      	bls.n	8019358 <memmove+0xa>
 801936c:	1881      	adds	r1, r0, r2
 801936e:	1ad2      	subs	r2, r2, r3
 8019370:	42d3      	cmn	r3, r2
 8019372:	d100      	bne.n	8019376 <memmove+0x28>
 8019374:	bd10      	pop	{r4, pc}
 8019376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801937a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801937e:	e7f7      	b.n	8019370 <memmove+0x22>

08019380 <__malloc_lock>:
 8019380:	4770      	bx	lr

08019382 <__malloc_unlock>:
 8019382:	4770      	bx	lr

08019384 <_realloc_r>:
 8019384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019386:	4607      	mov	r7, r0
 8019388:	4614      	mov	r4, r2
 801938a:	460e      	mov	r6, r1
 801938c:	b921      	cbnz	r1, 8019398 <_realloc_r+0x14>
 801938e:	4611      	mov	r1, r2
 8019390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019394:	f7ff ba06 	b.w	80187a4 <_malloc_r>
 8019398:	b922      	cbnz	r2, 80193a4 <_realloc_r+0x20>
 801939a:	f7ff f9b5 	bl	8018708 <_free_r>
 801939e:	4625      	mov	r5, r4
 80193a0:	4628      	mov	r0, r5
 80193a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193a4:	f000 f814 	bl	80193d0 <_malloc_usable_size_r>
 80193a8:	42a0      	cmp	r0, r4
 80193aa:	d20f      	bcs.n	80193cc <_realloc_r+0x48>
 80193ac:	4621      	mov	r1, r4
 80193ae:	4638      	mov	r0, r7
 80193b0:	f7ff f9f8 	bl	80187a4 <_malloc_r>
 80193b4:	4605      	mov	r5, r0
 80193b6:	2800      	cmp	r0, #0
 80193b8:	d0f2      	beq.n	80193a0 <_realloc_r+0x1c>
 80193ba:	4631      	mov	r1, r6
 80193bc:	4622      	mov	r2, r4
 80193be:	f7fb fe3f 	bl	8015040 <memcpy>
 80193c2:	4631      	mov	r1, r6
 80193c4:	4638      	mov	r0, r7
 80193c6:	f7ff f99f 	bl	8018708 <_free_r>
 80193ca:	e7e9      	b.n	80193a0 <_realloc_r+0x1c>
 80193cc:	4635      	mov	r5, r6
 80193ce:	e7e7      	b.n	80193a0 <_realloc_r+0x1c>

080193d0 <_malloc_usable_size_r>:
 80193d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80193d4:	1f18      	subs	r0, r3, #4
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	bfbc      	itt	lt
 80193da:	580b      	ldrlt	r3, [r1, r0]
 80193dc:	18c0      	addlt	r0, r0, r3
 80193de:	4770      	bx	lr

080193e0 <_init>:
 80193e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193e2:	bf00      	nop
 80193e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193e6:	bc08      	pop	{r3}
 80193e8:	469e      	mov	lr, r3
 80193ea:	4770      	bx	lr

080193ec <_fini>:
 80193ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193ee:	bf00      	nop
 80193f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193f2:	bc08      	pop	{r3}
 80193f4:	469e      	mov	lr, r3
 80193f6:	4770      	bx	lr
